
EnviroSense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d158  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800d298  0800d298  0000e298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d440  0800d440  0000f130  2**0
                  CONTENTS
  4 .ARM          00000008  0800d440  0800d440  0000e440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d448  0800d448  0000f130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d448  0800d448  0000e448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d44c  0800d44c  0000e44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  0800d450  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000130  0800d580  0000f130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  0800d580  0000f5f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b46f  00000000  00000000  0000f159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003abe  00000000  00000000  0002a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b08  00000000  00000000  0002e088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014d5  00000000  00000000  0002fb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019deb  00000000  00000000  00031065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b283  00000000  00000000  0004ae50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d58b  00000000  00000000  000660d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010365e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008150  00000000  00000000  001036a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0010b7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000130 	.word	0x20000130
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d280 	.word	0x0800d280

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000134 	.word	0x20000134
 800017c:	0800d280 	.word	0x0800d280

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	@ 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_fmul>:
 8000d64:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d72:	ea92 0f0c 	teqne	r2, ip
 8000d76:	ea93 0f0c 	teqne	r3, ip
 8000d7a:	d06f      	beq.n	8000e5c <__aeabi_fmul+0xf8>
 8000d7c:	441a      	add	r2, r3
 8000d7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d82:	0240      	lsls	r0, r0, #9
 8000d84:	bf18      	it	ne
 8000d86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8a:	d01e      	beq.n	8000dca <__aeabi_fmul+0x66>
 8000d8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d98:	fba0 3101 	umull	r3, r1, r0, r1
 8000d9c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000da0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000da4:	bf3e      	ittt	cc
 8000da6:	0049      	lslcc	r1, r1, #1
 8000da8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	ea40 0001 	orr.w	r0, r0, r1
 8000db2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000db6:	2afd      	cmp	r2, #253	@ 0xfd
 8000db8:	d81d      	bhi.n	8000df6 <__aeabi_fmul+0x92>
 8000dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc2:	bf08      	it	eq
 8000dc4:	f020 0001 	biceq.w	r0, r0, #1
 8000dc8:	4770      	bx	lr
 8000dca:	f090 0f00 	teq	r0, #0
 8000dce:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dd2:	bf08      	it	eq
 8000dd4:	0249      	lsleq	r1, r1, #9
 8000dd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dde:	3a7f      	subs	r2, #127	@ 0x7f
 8000de0:	bfc2      	ittt	gt
 8000de2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000de6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dea:	4770      	bxgt	lr
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	3a01      	subs	r2, #1
 8000df6:	dc5d      	bgt.n	8000eb4 <__aeabi_fmul+0x150>
 8000df8:	f112 0f19 	cmn.w	r2, #25
 8000dfc:	bfdc      	itt	le
 8000dfe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e02:	4770      	bxle	lr
 8000e04:	f1c2 0200 	rsb	r2, r2, #0
 8000e08:	0041      	lsls	r1, r0, #1
 8000e0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e0e:	f1c2 0220 	rsb	r2, r2, #32
 8000e12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1a:	f140 0000 	adc.w	r0, r0, #0
 8000e1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e22:	bf08      	it	eq
 8000e24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e28:	4770      	bx	lr
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xce>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xe6>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e78f      	b.n	8000d7c <__aeabi_fmul+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	bf18      	it	ne
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d00a      	beq.n	8000e82 <__aeabi_fmul+0x11e>
 8000e6c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e70:	bf18      	it	ne
 8000e72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e76:	d1d8      	bne.n	8000e2a <__aeabi_fmul+0xc6>
 8000e78:	ea80 0001 	eor.w	r0, r0, r1
 8000e7c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	bf17      	itett	ne
 8000e88:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e8c:	4608      	moveq	r0, r1
 8000e8e:	f091 0f00 	teqne	r1, #0
 8000e92:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e96:	d014      	beq.n	8000ec2 <__aeabi_fmul+0x15e>
 8000e98:	ea92 0f0c 	teq	r2, ip
 8000e9c:	d101      	bne.n	8000ea2 <__aeabi_fmul+0x13e>
 8000e9e:	0242      	lsls	r2, r0, #9
 8000ea0:	d10f      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000ea2:	ea93 0f0c 	teq	r3, ip
 8000ea6:	d103      	bne.n	8000eb0 <__aeabi_fmul+0x14c>
 8000ea8:	024b      	lsls	r3, r1, #9
 8000eaa:	bf18      	it	ne
 8000eac:	4608      	movne	r0, r1
 8000eae:	d108      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000eb0:	ea80 0001 	eor.w	r0, r0, r1
 8000eb4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ebc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ec0:	4770      	bx	lr
 8000ec2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ec6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eca:	4770      	bx	lr

08000ecc <__aeabi_fdiv>:
 8000ecc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ed0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed4:	bf1e      	ittt	ne
 8000ed6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eda:	ea92 0f0c 	teqne	r2, ip
 8000ede:	ea93 0f0c 	teqne	r3, ip
 8000ee2:	d069      	beq.n	8000fb8 <__aeabi_fdiv+0xec>
 8000ee4:	eba2 0203 	sub.w	r2, r2, r3
 8000ee8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eec:	0249      	lsls	r1, r1, #9
 8000eee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef2:	d037      	beq.n	8000f64 <__aeabi_fdiv+0x98>
 8000ef4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ef8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000efc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f00:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f04:	428b      	cmp	r3, r1
 8000f06:	bf38      	it	cc
 8000f08:	005b      	lslcc	r3, r3, #1
 8000f0a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f0e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f12:	428b      	cmp	r3, r1
 8000f14:	bf24      	itt	cs
 8000f16:	1a5b      	subcs	r3, r3, r1
 8000f18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f2e:	bf24      	itt	cs
 8000f30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	bf18      	it	ne
 8000f4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f4e:	d1e0      	bne.n	8000f12 <__aeabi_fdiv+0x46>
 8000f50:	2afd      	cmp	r2, #253	@ 0xfd
 8000f52:	f63f af50 	bhi.w	8000df6 <__aeabi_fmul+0x92>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f5c:	bf08      	it	eq
 8000f5e:	f020 0001 	biceq.w	r0, r0, #1
 8000f62:	4770      	bx	lr
 8000f64:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f6c:	327f      	adds	r2, #127	@ 0x7f
 8000f6e:	bfc2      	ittt	gt
 8000f70:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f78:	4770      	bxgt	lr
 8000f7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	3a01      	subs	r2, #1
 8000f84:	e737      	b.n	8000df6 <__aeabi_fmul+0x92>
 8000f86:	f092 0f00 	teq	r2, #0
 8000f8a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0040      	lsleq	r0, r0, #1
 8000f92:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f96:	3a01      	subeq	r2, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xc2>
 8000f9a:	ea40 000c 	orr.w	r0, r0, ip
 8000f9e:	f093 0f00 	teq	r3, #0
 8000fa2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0049      	lsleq	r1, r1, #1
 8000faa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fae:	3b01      	subeq	r3, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xda>
 8000fb2:	ea41 010c 	orr.w	r1, r1, ip
 8000fb6:	e795      	b.n	8000ee4 <__aeabi_fdiv+0x18>
 8000fb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fbc:	ea92 0f0c 	teq	r2, ip
 8000fc0:	d108      	bne.n	8000fd4 <__aeabi_fdiv+0x108>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	f47f af7d 	bne.w	8000ec2 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	f47f af70 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e776      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fd4:	ea93 0f0c 	teq	r3, ip
 8000fd8:	d104      	bne.n	8000fe4 <__aeabi_fdiv+0x118>
 8000fda:	024b      	lsls	r3, r1, #9
 8000fdc:	f43f af4c 	beq.w	8000e78 <__aeabi_fmul+0x114>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e76e      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fe4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fe8:	bf18      	it	ne
 8000fea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fee:	d1ca      	bne.n	8000f86 <__aeabi_fdiv+0xba>
 8000ff0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ff4:	f47f af5c 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000ff8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ffc:	f47f af3c 	bne.w	8000e78 <__aeabi_fmul+0x114>
 8001000:	e75f      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8001002:	bf00      	nop

08001004 <__gesf2>:
 8001004:	f04f 3cff 	mov.w	ip, #4294967295
 8001008:	e006      	b.n	8001018 <__cmpsf2+0x4>
 800100a:	bf00      	nop

0800100c <__lesf2>:
 800100c:	f04f 0c01 	mov.w	ip, #1
 8001010:	e002      	b.n	8001018 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__cmpsf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	f84d cd04 	str.w	ip, [sp, #-4]!
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	bf18      	it	ne
 800102a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800102e:	d011      	beq.n	8001054 <__cmpsf2+0x40>
 8001030:	b001      	add	sp, #4
 8001032:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001036:	bf18      	it	ne
 8001038:	ea90 0f01 	teqne	r0, r1
 800103c:	bf58      	it	pl
 800103e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001042:	bf88      	it	hi
 8001044:	17c8      	asrhi	r0, r1, #31
 8001046:	bf38      	it	cc
 8001048:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800104c:	bf18      	it	ne
 800104e:	f040 0001 	orrne.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001058:	d102      	bne.n	8001060 <__cmpsf2+0x4c>
 800105a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800105e:	d105      	bne.n	800106c <__cmpsf2+0x58>
 8001060:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001064:	d1e4      	bne.n	8001030 <__cmpsf2+0x1c>
 8001066:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106a:	d0e1      	beq.n	8001030 <__cmpsf2+0x1c>
 800106c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <__aeabi_cfrcmple>:
 8001074:	4684      	mov	ip, r0
 8001076:	4608      	mov	r0, r1
 8001078:	4661      	mov	r1, ip
 800107a:	e7ff      	b.n	800107c <__aeabi_cfcmpeq>

0800107c <__aeabi_cfcmpeq>:
 800107c:	b50f      	push	{r0, r1, r2, r3, lr}
 800107e:	f7ff ffc9 	bl	8001014 <__cmpsf2>
 8001082:	2800      	cmp	r0, #0
 8001084:	bf48      	it	mi
 8001086:	f110 0f00 	cmnmi.w	r0, #0
 800108a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800108c <__aeabi_fcmpeq>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff fff4 	bl	800107c <__aeabi_cfcmpeq>
 8001094:	bf0c      	ite	eq
 8001096:	2001      	moveq	r0, #1
 8001098:	2000      	movne	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmplt>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffea 	bl	800107c <__aeabi_cfcmpeq>
 80010a8:	bf34      	ite	cc
 80010aa:	2001      	movcc	r0, #1
 80010ac:	2000      	movcs	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmple>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffe0 	bl	800107c <__aeabi_cfcmpeq>
 80010bc:	bf94      	ite	ls
 80010be:	2001      	movls	r0, #1
 80010c0:	2000      	movhi	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_fcmpge>:
 80010c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010cc:	f7ff ffd2 	bl	8001074 <__aeabi_cfrcmple>
 80010d0:	bf94      	ite	ls
 80010d2:	2001      	movls	r0, #1
 80010d4:	2000      	movhi	r0, #0
 80010d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010da:	bf00      	nop

080010dc <__aeabi_fcmpgt>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff ffc8 	bl	8001074 <__aeabi_cfrcmple>
 80010e4:	bf34      	ite	cc
 80010e6:	2001      	movcc	r0, #1
 80010e8:	2000      	movcs	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_f2iz>:
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010f8:	d30f      	bcc.n	800111a <__aeabi_f2iz+0x2a>
 80010fa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001102:	d90d      	bls.n	8001120 <__aeabi_f2iz+0x30>
 8001104:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001108:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800110c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001110:	fa23 f002 	lsr.w	r0, r3, r2
 8001114:	bf18      	it	ne
 8001116:	4240      	negne	r0, r0
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr
 8001120:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001124:	d101      	bne.n	800112a <__aeabi_f2iz+0x3a>
 8001126:	0242      	lsls	r2, r0, #9
 8001128:	d105      	bne.n	8001136 <__aeabi_f2iz+0x46>
 800112a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800112e:	bf08      	it	eq
 8001130:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2uiz>:
 800113c:	0042      	lsls	r2, r0, #1
 800113e:	d20e      	bcs.n	800115e <__aeabi_f2uiz+0x22>
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30b      	bcc.n	800115e <__aeabi_f2uiz+0x22>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d409      	bmi.n	8001164 <__aeabi_f2uiz+0x28>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	fa23 f002 	lsr.w	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2uiz+0x32>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d102      	bne.n	8001174 <__aeabi_f2uiz+0x38>
 800116e:	f04f 30ff 	mov.w	r0, #4294967295
 8001172:	4770      	bx	lr
 8001174:	f04f 0000 	mov.w	r0, #0
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <__aeabi_uldivmod>:
 800117c:	b953      	cbnz	r3, 8001194 <__aeabi_uldivmod+0x18>
 800117e:	b94a      	cbnz	r2, 8001194 <__aeabi_uldivmod+0x18>
 8001180:	2900      	cmp	r1, #0
 8001182:	bf08      	it	eq
 8001184:	2800      	cmpeq	r0, #0
 8001186:	bf1c      	itt	ne
 8001188:	f04f 31ff 	movne.w	r1, #4294967295
 800118c:	f04f 30ff 	movne.w	r0, #4294967295
 8001190:	f000 b968 	b.w	8001464 <__aeabi_idiv0>
 8001194:	f1ad 0c08 	sub.w	ip, sp, #8
 8001198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800119c:	f000 f806 	bl	80011ac <__udivmoddi4>
 80011a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011a8:	b004      	add	sp, #16
 80011aa:	4770      	bx	lr

080011ac <__udivmoddi4>:
 80011ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b0:	9d08      	ldr	r5, [sp, #32]
 80011b2:	460c      	mov	r4, r1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d14e      	bne.n	8001256 <__udivmoddi4+0xaa>
 80011b8:	4694      	mov	ip, r2
 80011ba:	458c      	cmp	ip, r1
 80011bc:	4686      	mov	lr, r0
 80011be:	fab2 f282 	clz	r2, r2
 80011c2:	d962      	bls.n	800128a <__udivmoddi4+0xde>
 80011c4:	b14a      	cbz	r2, 80011da <__udivmoddi4+0x2e>
 80011c6:	f1c2 0320 	rsb	r3, r2, #32
 80011ca:	4091      	lsls	r1, r2
 80011cc:	fa20 f303 	lsr.w	r3, r0, r3
 80011d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011d4:	4319      	orrs	r1, r3
 80011d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80011da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011de:	fbb1 f4f7 	udiv	r4, r1, r7
 80011e2:	fb07 1114 	mls	r1, r7, r4, r1
 80011e6:	fa1f f68c 	uxth.w	r6, ip
 80011ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011f2:	fb04 f106 	mul.w	r1, r4, r6
 80011f6:	4299      	cmp	r1, r3
 80011f8:	d90a      	bls.n	8001210 <__udivmoddi4+0x64>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8001202:	f080 8110 	bcs.w	8001426 <__udivmoddi4+0x27a>
 8001206:	4299      	cmp	r1, r3
 8001208:	f240 810d 	bls.w	8001426 <__udivmoddi4+0x27a>
 800120c:	3c02      	subs	r4, #2
 800120e:	4463      	add	r3, ip
 8001210:	1a59      	subs	r1, r3, r1
 8001212:	fbb1 f0f7 	udiv	r0, r1, r7
 8001216:	fb07 1110 	mls	r1, r7, r0, r1
 800121a:	fb00 f606 	mul.w	r6, r0, r6
 800121e:	fa1f f38e 	uxth.w	r3, lr
 8001222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001226:	429e      	cmp	r6, r3
 8001228:	d90a      	bls.n	8001240 <__udivmoddi4+0x94>
 800122a:	eb1c 0303 	adds.w	r3, ip, r3
 800122e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001232:	f080 80fa 	bcs.w	800142a <__udivmoddi4+0x27e>
 8001236:	429e      	cmp	r6, r3
 8001238:	f240 80f7 	bls.w	800142a <__udivmoddi4+0x27e>
 800123c:	4463      	add	r3, ip
 800123e:	3802      	subs	r0, #2
 8001240:	2100      	movs	r1, #0
 8001242:	1b9b      	subs	r3, r3, r6
 8001244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001248:	b11d      	cbz	r5, 8001252 <__udivmoddi4+0xa6>
 800124a:	40d3      	lsrs	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	e9c5 3200 	strd	r3, r2, [r5]
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	428b      	cmp	r3, r1
 8001258:	d905      	bls.n	8001266 <__udivmoddi4+0xba>
 800125a:	b10d      	cbz	r5, 8001260 <__udivmoddi4+0xb4>
 800125c:	e9c5 0100 	strd	r0, r1, [r5]
 8001260:	2100      	movs	r1, #0
 8001262:	4608      	mov	r0, r1
 8001264:	e7f5      	b.n	8001252 <__udivmoddi4+0xa6>
 8001266:	fab3 f183 	clz	r1, r3
 800126a:	2900      	cmp	r1, #0
 800126c:	d146      	bne.n	80012fc <__udivmoddi4+0x150>
 800126e:	42a3      	cmp	r3, r4
 8001270:	d302      	bcc.n	8001278 <__udivmoddi4+0xcc>
 8001272:	4290      	cmp	r0, r2
 8001274:	f0c0 80ee 	bcc.w	8001454 <__udivmoddi4+0x2a8>
 8001278:	1a86      	subs	r6, r0, r2
 800127a:	eb64 0303 	sbc.w	r3, r4, r3
 800127e:	2001      	movs	r0, #1
 8001280:	2d00      	cmp	r5, #0
 8001282:	d0e6      	beq.n	8001252 <__udivmoddi4+0xa6>
 8001284:	e9c5 6300 	strd	r6, r3, [r5]
 8001288:	e7e3      	b.n	8001252 <__udivmoddi4+0xa6>
 800128a:	2a00      	cmp	r2, #0
 800128c:	f040 808f 	bne.w	80013ae <__udivmoddi4+0x202>
 8001290:	eba1 040c 	sub.w	r4, r1, ip
 8001294:	2101      	movs	r1, #1
 8001296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800129a:	fa1f f78c 	uxth.w	r7, ip
 800129e:	fbb4 f6f8 	udiv	r6, r4, r8
 80012a2:	fb08 4416 	mls	r4, r8, r6, r4
 80012a6:	fb07 f006 	mul.w	r0, r7, r6
 80012aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d908      	bls.n	80012c8 <__udivmoddi4+0x11c>
 80012b6:	eb1c 0303 	adds.w	r3, ip, r3
 80012ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80012be:	d202      	bcs.n	80012c6 <__udivmoddi4+0x11a>
 80012c0:	4298      	cmp	r0, r3
 80012c2:	f200 80cb 	bhi.w	800145c <__udivmoddi4+0x2b0>
 80012c6:	4626      	mov	r6, r4
 80012c8:	1a1c      	subs	r4, r3, r0
 80012ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80012ce:	fb08 4410 	mls	r4, r8, r0, r4
 80012d2:	fb00 f707 	mul.w	r7, r0, r7
 80012d6:	fa1f f38e 	uxth.w	r3, lr
 80012da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012de:	429f      	cmp	r7, r3
 80012e0:	d908      	bls.n	80012f4 <__udivmoddi4+0x148>
 80012e2:	eb1c 0303 	adds.w	r3, ip, r3
 80012e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80012ea:	d202      	bcs.n	80012f2 <__udivmoddi4+0x146>
 80012ec:	429f      	cmp	r7, r3
 80012ee:	f200 80ae 	bhi.w	800144e <__udivmoddi4+0x2a2>
 80012f2:	4620      	mov	r0, r4
 80012f4:	1bdb      	subs	r3, r3, r7
 80012f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012fa:	e7a5      	b.n	8001248 <__udivmoddi4+0x9c>
 80012fc:	f1c1 0720 	rsb	r7, r1, #32
 8001300:	408b      	lsls	r3, r1
 8001302:	fa22 fc07 	lsr.w	ip, r2, r7
 8001306:	ea4c 0c03 	orr.w	ip, ip, r3
 800130a:	fa24 f607 	lsr.w	r6, r4, r7
 800130e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001312:	fbb6 f8f9 	udiv	r8, r6, r9
 8001316:	fa1f fe8c 	uxth.w	lr, ip
 800131a:	fb09 6618 	mls	r6, r9, r8, r6
 800131e:	fa20 f307 	lsr.w	r3, r0, r7
 8001322:	408c      	lsls	r4, r1
 8001324:	fa00 fa01 	lsl.w	sl, r0, r1
 8001328:	fb08 f00e 	mul.w	r0, r8, lr
 800132c:	431c      	orrs	r4, r3
 800132e:	0c23      	lsrs	r3, r4, #16
 8001330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001334:	4298      	cmp	r0, r3
 8001336:	fa02 f201 	lsl.w	r2, r2, r1
 800133a:	d90a      	bls.n	8001352 <__udivmoddi4+0x1a6>
 800133c:	eb1c 0303 	adds.w	r3, ip, r3
 8001340:	f108 36ff 	add.w	r6, r8, #4294967295
 8001344:	f080 8081 	bcs.w	800144a <__udivmoddi4+0x29e>
 8001348:	4298      	cmp	r0, r3
 800134a:	d97e      	bls.n	800144a <__udivmoddi4+0x29e>
 800134c:	f1a8 0802 	sub.w	r8, r8, #2
 8001350:	4463      	add	r3, ip
 8001352:	1a1e      	subs	r6, r3, r0
 8001354:	fbb6 f3f9 	udiv	r3, r6, r9
 8001358:	fb09 6613 	mls	r6, r9, r3, r6
 800135c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001360:	b2a4      	uxth	r4, r4
 8001362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001366:	45a6      	cmp	lr, r4
 8001368:	d908      	bls.n	800137c <__udivmoddi4+0x1d0>
 800136a:	eb1c 0404 	adds.w	r4, ip, r4
 800136e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001372:	d266      	bcs.n	8001442 <__udivmoddi4+0x296>
 8001374:	45a6      	cmp	lr, r4
 8001376:	d964      	bls.n	8001442 <__udivmoddi4+0x296>
 8001378:	3b02      	subs	r3, #2
 800137a:	4464      	add	r4, ip
 800137c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001380:	fba0 8302 	umull	r8, r3, r0, r2
 8001384:	eba4 040e 	sub.w	r4, r4, lr
 8001388:	429c      	cmp	r4, r3
 800138a:	46c6      	mov	lr, r8
 800138c:	461e      	mov	r6, r3
 800138e:	d350      	bcc.n	8001432 <__udivmoddi4+0x286>
 8001390:	d04d      	beq.n	800142e <__udivmoddi4+0x282>
 8001392:	b155      	cbz	r5, 80013aa <__udivmoddi4+0x1fe>
 8001394:	ebba 030e 	subs.w	r3, sl, lr
 8001398:	eb64 0406 	sbc.w	r4, r4, r6
 800139c:	fa04 f707 	lsl.w	r7, r4, r7
 80013a0:	40cb      	lsrs	r3, r1
 80013a2:	431f      	orrs	r7, r3
 80013a4:	40cc      	lsrs	r4, r1
 80013a6:	e9c5 7400 	strd	r7, r4, [r5]
 80013aa:	2100      	movs	r1, #0
 80013ac:	e751      	b.n	8001252 <__udivmoddi4+0xa6>
 80013ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80013b2:	f1c2 0320 	rsb	r3, r2, #32
 80013b6:	40d9      	lsrs	r1, r3
 80013b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013bc:	fa20 f303 	lsr.w	r3, r0, r3
 80013c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80013c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80013c8:	fb08 1110 	mls	r1, r8, r0, r1
 80013cc:	4094      	lsls	r4, r2
 80013ce:	431c      	orrs	r4, r3
 80013d0:	fa1f f78c 	uxth.w	r7, ip
 80013d4:	0c23      	lsrs	r3, r4, #16
 80013d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013da:	fb00 f107 	mul.w	r1, r0, r7
 80013de:	4299      	cmp	r1, r3
 80013e0:	d908      	bls.n	80013f4 <__udivmoddi4+0x248>
 80013e2:	eb1c 0303 	adds.w	r3, ip, r3
 80013e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013ea:	d22c      	bcs.n	8001446 <__udivmoddi4+0x29a>
 80013ec:	4299      	cmp	r1, r3
 80013ee:	d92a      	bls.n	8001446 <__udivmoddi4+0x29a>
 80013f0:	3802      	subs	r0, #2
 80013f2:	4463      	add	r3, ip
 80013f4:	1a5b      	subs	r3, r3, r1
 80013f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80013fa:	fb08 3311 	mls	r3, r8, r1, r3
 80013fe:	b2a4      	uxth	r4, r4
 8001400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001404:	fb01 f307 	mul.w	r3, r1, r7
 8001408:	42a3      	cmp	r3, r4
 800140a:	d908      	bls.n	800141e <__udivmoddi4+0x272>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f101 36ff 	add.w	r6, r1, #4294967295
 8001414:	d213      	bcs.n	800143e <__udivmoddi4+0x292>
 8001416:	42a3      	cmp	r3, r4
 8001418:	d911      	bls.n	800143e <__udivmoddi4+0x292>
 800141a:	3902      	subs	r1, #2
 800141c:	4464      	add	r4, ip
 800141e:	1ae4      	subs	r4, r4, r3
 8001420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001424:	e73b      	b.n	800129e <__udivmoddi4+0xf2>
 8001426:	4604      	mov	r4, r0
 8001428:	e6f2      	b.n	8001210 <__udivmoddi4+0x64>
 800142a:	4608      	mov	r0, r1
 800142c:	e708      	b.n	8001240 <__udivmoddi4+0x94>
 800142e:	45c2      	cmp	sl, r8
 8001430:	d2af      	bcs.n	8001392 <__udivmoddi4+0x1e6>
 8001432:	ebb8 0e02 	subs.w	lr, r8, r2
 8001436:	eb63 060c 	sbc.w	r6, r3, ip
 800143a:	3801      	subs	r0, #1
 800143c:	e7a9      	b.n	8001392 <__udivmoddi4+0x1e6>
 800143e:	4631      	mov	r1, r6
 8001440:	e7ed      	b.n	800141e <__udivmoddi4+0x272>
 8001442:	4603      	mov	r3, r0
 8001444:	e79a      	b.n	800137c <__udivmoddi4+0x1d0>
 8001446:	4630      	mov	r0, r6
 8001448:	e7d4      	b.n	80013f4 <__udivmoddi4+0x248>
 800144a:	46b0      	mov	r8, r6
 800144c:	e781      	b.n	8001352 <__udivmoddi4+0x1a6>
 800144e:	4463      	add	r3, ip
 8001450:	3802      	subs	r0, #2
 8001452:	e74f      	b.n	80012f4 <__udivmoddi4+0x148>
 8001454:	4606      	mov	r6, r0
 8001456:	4623      	mov	r3, r4
 8001458:	4608      	mov	r0, r1
 800145a:	e711      	b.n	8001280 <__udivmoddi4+0xd4>
 800145c:	3e02      	subs	r6, #2
 800145e:	4463      	add	r3, ip
 8001460:	e732      	b.n	80012c8 <__udivmoddi4+0x11c>
 8001462:	bf00      	nop

08001464 <__aeabi_idiv0>:
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001470:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001474:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d013      	beq.n	80014a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001480:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001484:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001488:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00b      	beq.n	80014a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001490:	e000      	b.n	8001494 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001492:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001494:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f9      	beq.n	8001492 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800149e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <TIM6_IRQ>:
  uint32_t out_int;
  uint32_t out_dec;
} displayFloatToInt_t;

void TIM6_IRQ(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
	if(flag_irq){
 80014b8:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <TIM6_IRQ+0x24>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <TIM6_IRQ+0x14>
		flag_irq = 0;
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <TIM6_IRQ+0x24>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
	}else{
		flag_irq = 1;
	}

}
 80014c6:	e002      	b.n	80014ce <TIM6_IRQ+0x1a>
		flag_irq = 1;
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <TIM6_IRQ+0x24>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000344 	.word	0x20000344

080014dc <TIM7_IRQ>:
void TIM7_IRQ(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
		display_cons();
 80014e0:	f000 f8f4 	bl	80016cc <display_cons>
		flag_irq = 0;
 80014e4:	4b02      	ldr	r3, [pc, #8]	@ (80014f0 <TIM7_IRQ+0x14>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000344 	.word	0x20000344

080014f4 <floatToInt>:

static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 80014f4:	b5b0      	push	{r4, r5, r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  if(in >= 0.0f)
 8001500:	f04f 0100 	mov.w	r1, #0
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f7ff fddf 	bl	80010c8 <__aeabi_fcmpge>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <floatToInt+0x24>
  {
    out_value->sign = 0;
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	e006      	b.n	8001526 <floatToInt+0x32>
  }else
  {
    out_value->sign = 1;
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
    in = -in;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001524:	60fb      	str	r3, [r7, #12]
  }

  in = in + (0.5 / pow(10, dec_prec));
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f7fe ff8e 	bl	8000448 <__aeabi_f2d>
 800152c:	4604      	mov	r4, r0
 800152e:	460d      	mov	r5, r1
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7fe ff77 	bl	8000424 <__aeabi_i2d>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	f04f 0000 	mov.w	r0, #0
 800153e:	492a      	ldr	r1, [pc, #168]	@ (80015e8 <floatToInt+0xf4>)
 8001540:	f00a ff5c 	bl	800c3fc <pow>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	f04f 0000 	mov.w	r0, #0
 800154c:	4927      	ldr	r1, [pc, #156]	@ (80015ec <floatToInt+0xf8>)
 800154e:	f7ff f8fd 	bl	800074c <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4620      	mov	r0, r4
 8001558:	4629      	mov	r1, r5
 800155a:	f7fe fe17 	bl	800018c <__adddf3>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fa9f 	bl	8000aa8 <__aeabi_d2f>
 800156a:	4603      	mov	r3, r0
 800156c:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff fdbe 	bl	80010f0 <__aeabi_f2iz>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fb97 	bl	8000cb4 <__aeabi_ui2f>
 8001586:	4603      	mov	r3, r0
 8001588:	4619      	mov	r1, r3
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f7ff fae0 	bl	8000b50 <__aeabi_fsub>
 8001590:	4603      	mov	r3, r0
 8001592:	60fb      	str	r3, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f7fe ff57 	bl	8000448 <__aeabi_f2d>
 800159a:	4604      	mov	r4, r0
 800159c:	460d      	mov	r5, r1
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7fe ff40 	bl	8000424 <__aeabi_i2d>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	f04f 0000 	mov.w	r0, #0
 80015ac:	490e      	ldr	r1, [pc, #56]	@ (80015e8 <floatToInt+0xf4>)
 80015ae:	f00a ff25 	bl	800c3fc <pow>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4620      	mov	r0, r4
 80015b8:	4629      	mov	r1, r5
 80015ba:	f7fe ff9d 	bl	80004f8 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f00a ff87 	bl	800c4d8 <trunc>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fa41 	bl	8000a58 <__aeabi_d2iz>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	609a      	str	r2, [r3, #8]
}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bdb0      	pop	{r4, r5, r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40240000 	.word	0x40240000
 80015ec:	3fe00000 	.word	0x3fe00000

080015f0 <Conf_TEMP>:
/*Fonction d'initialisation du capteur de temperature */
int Conf_TEMP(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	 if(IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE) != BSP_ERROR_NONE)
 80015f4:	2101      	movs	r1, #1
 80015f6:	2002      	movs	r0, #2
 80015f8:	f003 fb5e 	bl	8004cb8 <IKS01A3_ENV_SENSOR_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <Conf_TEMP+0x16>
	 {
		 return 1;
 8001602:	2301      	movs	r3, #1
 8001604:	e00b      	b.n	800161e <Conf_TEMP+0x2e>
	 }
	 if(IKS01A3_ENV_SENSOR_SetOutputDataRate(IKS01A3_STTS751_0, ENV_TEMPERATURE, 4.0f) != BSP_ERROR_NONE)
 8001606:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800160a:	2101      	movs	r1, #1
 800160c:	2002      	movs	r0, #2
 800160e:	f003 fc61 	bl	8004ed4 <IKS01A3_ENV_SENSOR_SetOutputDataRate>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <Conf_TEMP+0x2c>
	 {
		 return 1;
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <Conf_TEMP+0x2e>
	 }
	return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <Aquire_temp>:

void Aquire_temp(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &Temperature);
 8001628:	4a09      	ldr	r2, [pc, #36]	@ (8001650 <Aquire_temp+0x2c>)
 800162a:	2101      	movs	r1, #1
 800162c:	2002      	movs	r0, #2
 800162e:	f003 fc93 	bl	8004f58 <IKS01A3_ENV_SENSOR_GetValue>
	comp.temp = Temperature*100;
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <Aquire_temp+0x2c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4907      	ldr	r1, [pc, #28]	@ (8001654 <Aquire_temp+0x30>)
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fb93 	bl	8000d64 <__aeabi_fmul>
 800163e:	4603      	mov	r3, r0
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fd7b 	bl	800113c <__aeabi_f2uiz>
 8001646:	4603      	mov	r3, r0
 8001648:	4a03      	ldr	r2, [pc, #12]	@ (8001658 <Aquire_temp+0x34>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000340 	.word	0x20000340
 8001654:	42c80000 	.word	0x42c80000
 8001658:	2000034c 	.word	0x2000034c

0800165c <display_temp>:
/*Fonction d'affichage de la temperature sur les 7 segments*/
void display_temp(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
	displayFloatToInt_t out_value;
	floatToInt(Temperature, &out_value, 2);
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <display_temp+0x64>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	1d39      	adds	r1, r7, #4
 8001668:	2202      	movs	r2, #2
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff42 	bl	80014f4 <floatToInt>
	sprintf(buff, "%d", (int)out_value.out_int);
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	461a      	mov	r2, r3
 8001674:	4913      	ldr	r1, [pc, #76]	@ (80016c4 <display_temp+0x68>)
 8001676:	4814      	ldr	r0, [pc, #80]	@ (80016c8 <display_temp+0x6c>)
 8001678:	f009 ffc4 	bl	800b604 <siprintf>
	MAX7219_DisplayChar('1',buff[0]);
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <display_temp+0x6c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	2031      	movs	r0, #49	@ 0x31
 8001684:	f000 fc5b 	bl	8001f3e <MAX7219_DisplayChar>
	MAX7219_DisplayChar1('2',buff[1]);
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <display_temp+0x6c>)
 800168a:	785b      	ldrb	r3, [r3, #1]
 800168c:	4619      	mov	r1, r3
 800168e:	2032      	movs	r0, #50	@ 0x32
 8001690:	f000 fc6c 	bl	8001f6c <MAX7219_DisplayChar1>
	sprintf(buff, "%d", (int)out_value.out_dec);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	461a      	mov	r2, r3
 8001698:	490a      	ldr	r1, [pc, #40]	@ (80016c4 <display_temp+0x68>)
 800169a:	480b      	ldr	r0, [pc, #44]	@ (80016c8 <display_temp+0x6c>)
 800169c:	f009 ffb2 	bl	800b604 <siprintf>
	MAX7219_DisplayChar('3',buff[0]);
 80016a0:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <display_temp+0x6c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	2033      	movs	r0, #51	@ 0x33
 80016a8:	f000 fc49 	bl	8001f3e <MAX7219_DisplayChar>
	MAX7219_DisplayChar('4',buff[1]);
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <display_temp+0x6c>)
 80016ae:	785b      	ldrb	r3, [r3, #1]
 80016b0:	4619      	mov	r1, r3
 80016b2:	2034      	movs	r0, #52	@ 0x34
 80016b4:	f000 fc43 	bl	8001f3e <MAX7219_DisplayChar>
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000340 	.word	0x20000340
 80016c4:	0800d298 	.word	0x0800d298
 80016c8:	20000348 	.word	0x20000348

080016cc <display_cons>:
/*Fonction d'affichage de la temperature sur les 7 segments*/
void display_cons(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, L0_Pin, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2102      	movs	r1, #2
 80016d6:	481a      	ldr	r0, [pc, #104]	@ (8001740 <display_cons+0x74>)
 80016d8:	f004 ffde 	bl	8006698 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, L1_Pin, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2104      	movs	r1, #4
 80016e0:	4817      	ldr	r0, [pc, #92]	@ (8001740 <display_cons+0x74>)
 80016e2:	f004 ffd9 	bl	8006698 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ec:	4814      	ldr	r0, [pc, #80]	@ (8001740 <display_cons+0x74>)
 80016ee:	f004 ffd3 	bl	8006698 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, L3_Pin, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016f8:	4811      	ldr	r0, [pc, #68]	@ (8001740 <display_cons+0x74>)
 80016fa:	f004 ffcd 	bl	8006698 <HAL_GPIO_WritePin>
	char buff[4];
	uint32_t cons;
	cons = Aquire_cons();
 80016fe:	f000 f823 	bl	8001748 <Aquire_cons>
 8001702:	6078      	str	r0, [r7, #4]
	sprintf(buff, "%4ld", cons);
 8001704:	463b      	mov	r3, r7
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	490e      	ldr	r1, [pc, #56]	@ (8001744 <display_cons+0x78>)
 800170a:	4618      	mov	r0, r3
 800170c:	f009 ff7a 	bl	800b604 <siprintf>
	MAX7219_DisplayChar('1',buff[0]);
 8001710:	783b      	ldrb	r3, [r7, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	2031      	movs	r0, #49	@ 0x31
 8001716:	f000 fc12 	bl	8001f3e <MAX7219_DisplayChar>
	MAX7219_DisplayChar1('2',buff[1]);
 800171a:	787b      	ldrb	r3, [r7, #1]
 800171c:	4619      	mov	r1, r3
 800171e:	2032      	movs	r0, #50	@ 0x32
 8001720:	f000 fc24 	bl	8001f6c <MAX7219_DisplayChar1>
	MAX7219_DisplayChar('3',buff[2]);
 8001724:	78bb      	ldrb	r3, [r7, #2]
 8001726:	4619      	mov	r1, r3
 8001728:	2033      	movs	r0, #51	@ 0x33
 800172a:	f000 fc08 	bl	8001f3e <MAX7219_DisplayChar>
	MAX7219_DisplayChar('4',buff[3]);
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	4619      	mov	r1, r3
 8001732:	2034      	movs	r0, #52	@ 0x34
 8001734:	f000 fc03 	bl	8001f3e <MAX7219_DisplayChar>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40020400 	.word	0x40020400
 8001744:	0800d29c 	.word	0x0800d29c

08001748 <Aquire_cons>:
	snprintf(dataOut1, MAX_BUF_SIZE, "Temperature: %c%d.%02d degC ", ((out_value.sign > 0) ? '-' : '+'), (int)out_value.out_int, (int)out_value.out_dec);
	printf("%s \r\n", dataOut1);
}
/*Fonction pour recuperer la valeur sur l'ADC*/
uint32_t Aquire_cons(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
	uint32_t Consigne = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc);
 8001752:	480b      	ldr	r0, [pc, #44]	@ (8001780 <Aquire_cons+0x38>)
 8001754:	f004 f860 	bl	8005818 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1000);
 8001758:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800175c:	4808      	ldr	r0, [pc, #32]	@ (8001780 <Aquire_cons+0x38>)
 800175e:	f004 f8e7 	bl	8005930 <HAL_ADC_PollForConversion>
	Consigne = HAL_ADC_GetValue(&hadc);
 8001762:	4807      	ldr	r0, [pc, #28]	@ (8001780 <Aquire_cons+0x38>)
 8001764:	f004 f974 	bl	8005a50 <HAL_ADC_GetValue>
 8001768:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc);
 800176a:	4805      	ldr	r0, [pc, #20]	@ (8001780 <Aquire_cons+0x38>)
 800176c:	f004 f8b4 	bl	80058d8 <HAL_ADC_Stop>
	comp.cons = Consigne;
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <Aquire_cons+0x3c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6053      	str	r3, [r2, #4]
	return Consigne;
 8001776:	687b      	ldr	r3, [r7, #4]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000014c 	.word	0x2000014c
 8001784:	2000034c 	.word	0x2000034c

08001788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800178c:	f003 fe6e 	bl	800546c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001790:	f000 f88a 	bl	80018a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001794:	f000 fabc 	bl	8001d10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001798:	f000 fa90 	bl	8001cbc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800179c:	f000 f92a 	bl	80019f4 <MX_SPI1_Init>
  MX_ADC_Init();
 80017a0:	f000 f8d0 	bl	8001944 <MX_ADC_Init>
  MX_TIM3_Init();
 80017a4:	f000 f9a8 	bl	8001af8 <MX_TIM3_Init>
  MX_TIM6_Init();
 80017a8:	f000 fa1c 	bl	8001be4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80017ac:	f000 fa50 	bl	8001c50 <MX_TIM7_Init>
  MX_TIM2_Init();
 80017b0:	f000 f956 	bl	8001a60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("PROJET EnviroSense !!! \r\n");
 80017b4:	4833      	ldr	r0, [pc, #204]	@ (8001884 <main+0xfc>)
 80017b6:	f009 ff1d 	bl	800b5f4 <puts>
  MAX7219_Init();
 80017ba:	f000 fb6b 	bl	8001e94 <MAX7219_Init>
  MAX7219_DisplayTestStart();
 80017be:	f000 fb86 	bl	8001ece <MAX7219_DisplayTestStart>
  HAL_Delay(2000);
 80017c2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80017c6:	f003 febf 	bl	8005548 <HAL_Delay>
  MAX7219_DisplayTestStop();
 80017ca:	f000 fb88 	bl	8001ede <MAX7219_DisplayTestStop>
  printf("Display test finished \r\n");
 80017ce:	482e      	ldr	r0, [pc, #184]	@ (8001888 <main+0x100>)
 80017d0:	f009 ff10 	bl	800b5f4 <puts>
  Conf_TEMP();
 80017d4:	f7ff ff0c 	bl	80015f0 <Conf_TEMP>

  if(HAL_TIM_Base_Start_IT(&htim6)!= HAL_OK)
 80017d8:	482c      	ldr	r0, [pc, #176]	@ (800188c <main+0x104>)
 80017da:	f008 fd8b 	bl	800a2f4 <HAL_TIM_Base_Start_IT>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <main+0x60>
  {
    Error_Handler();
 80017e4:	f000 fb37 	bl	8001e56 <Error_Handler>
  }
  printf("Timer 6 enabled\r\n");
 80017e8:	4829      	ldr	r0, [pc, #164]	@ (8001890 <main+0x108>)
 80017ea:	f009 ff03 	bl	800b5f4 <puts>

  HAL_TIM_Base_Start_IT(&htim3);
 80017ee:	4829      	ldr	r0, [pc, #164]	@ (8001894 <main+0x10c>)
 80017f0:	f008 fd80 	bl	800a2f4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Aquire_temp();
 80017f4:	f7ff ff16 	bl	8001624 <Aquire_temp>
	  if(flag_irq ==1)
 80017f8:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <main+0x110>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d1f9      	bne.n	80017f4 <main+0x6c>
	  {
		  display_temp();
 8001800:	f7ff ff2c 	bl	800165c <display_temp>

		  if(comp.cons < comp.temp)
 8001804:	4b25      	ldr	r3, [pc, #148]	@ (800189c <main+0x114>)
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4b24      	ldr	r3, [pc, #144]	@ (800189c <main+0x114>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d21d      	bcs.n	800184c <main+0xc4>
		  {

			  printf("consigne < temperature !! \r\n");
 8001810:	4823      	ldr	r0, [pc, #140]	@ (80018a0 <main+0x118>)
 8001812:	f009 feef 	bl	800b5f4 <puts>

			  HAL_GPIO_WritePin(GPIOB, L0_Pin, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2102      	movs	r1, #2
 800181a:	4822      	ldr	r0, [pc, #136]	@ (80018a4 <main+0x11c>)
 800181c:	f004 ff3c 	bl	8006698 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, L1_Pin, 1);
 8001820:	2201      	movs	r2, #1
 8001822:	2104      	movs	r1, #4
 8001824:	481f      	ldr	r0, [pc, #124]	@ (80018a4 <main+0x11c>)
 8001826:	f004 ff37 	bl	8006698 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001830:	481c      	ldr	r0, [pc, #112]	@ (80018a4 <main+0x11c>)
 8001832:	f004 ff31 	bl	8006698 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, L3_Pin, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800183c:	4819      	ldr	r0, [pc, #100]	@ (80018a4 <main+0x11c>)
 800183e:	f004 ff2b 	bl	8006698 <HAL_GPIO_WritePin>
			 HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);
 8001842:	2100      	movs	r1, #0
 8001844:	4813      	ldr	r0, [pc, #76]	@ (8001894 <main+0x10c>)
 8001846:	f008 fe15 	bl	800a474 <HAL_TIM_PWM_Start_IT>
 800184a:	e7d3      	b.n	80017f4 <main+0x6c>
		  }
		  else
		  {
		  HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_1);
 800184c:	2100      	movs	r1, #0
 800184e:	4811      	ldr	r0, [pc, #68]	@ (8001894 <main+0x10c>)
 8001850:	f008 fef2 	bl	800a638 <HAL_TIM_PWM_Stop_IT>
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 1);
 8001854:	2201      	movs	r2, #1
 8001856:	2102      	movs	r1, #2
 8001858:	4812      	ldr	r0, [pc, #72]	@ (80018a4 <main+0x11c>)
 800185a:	f004 ff1d 	bl	8006698 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2104      	movs	r1, #4
 8001862:	4810      	ldr	r0, [pc, #64]	@ (80018a4 <main+0x11c>)
 8001864:	f004 ff18 	bl	8006698 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800186e:	480d      	ldr	r0, [pc, #52]	@ (80018a4 <main+0x11c>)
 8001870:	f004 ff12 	bl	8006698 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800187a:	480a      	ldr	r0, [pc, #40]	@ (80018a4 <main+0x11c>)
 800187c:	f004 ff0c 	bl	8006698 <HAL_GPIO_WritePin>
	  Aquire_temp();
 8001880:	e7b8      	b.n	80017f4 <main+0x6c>
 8001882:	bf00      	nop
 8001884:	0800d2f0 	.word	0x0800d2f0
 8001888:	0800d30c 	.word	0x0800d30c
 800188c:	20000278 	.word	0x20000278
 8001890:	0800d324 	.word	0x0800d324
 8001894:	20000238 	.word	0x20000238
 8001898:	20000344 	.word	0x20000344
 800189c:	2000034c 	.word	0x2000034c
 80018a0:	0800d338 	.word	0x0800d338
 80018a4:	40020400 	.word	0x40020400

080018a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b092      	sub	sp, #72	@ 0x48
 80018ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	2234      	movs	r2, #52	@ 0x34
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f009 ff9c 	bl	800b7f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018bc:	463b      	mov	r3, r7
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <SystemClock_Config+0x98>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80018d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001940 <SystemClock_Config+0x98>)
 80018d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018d8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018da:	2302      	movs	r3, #2
 80018dc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018de:	2301      	movs	r3, #1
 80018e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e2:	2310      	movs	r3, #16
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e6:	2302      	movs	r3, #2
 80018e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ea:	2300      	movs	r3, #0
 80018ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80018ee:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80018f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80018f4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80018f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4618      	mov	r0, r3
 8001900:	f007 fc2c 	bl	800915c <HAL_RCC_OscConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800190a:	f000 faa4 	bl	8001e56 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190e:	230f      	movs	r3, #15
 8001910:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001912:	2303      	movs	r3, #3
 8001914:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001922:	463b      	mov	r3, r7
 8001924:	2101      	movs	r1, #1
 8001926:	4618      	mov	r0, r3
 8001928:	f007 ff48 	bl	80097bc <HAL_RCC_ClockConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001932:	f000 fa90 	bl	8001e56 <Error_Handler>
  }
}
 8001936:	bf00      	nop
 8001938:	3748      	adds	r7, #72	@ 0x48
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40007000 	.word	0x40007000

08001944 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001954:	4b25      	ldr	r3, [pc, #148]	@ (80019ec <MX_ADC_Init+0xa8>)
 8001956:	4a26      	ldr	r2, [pc, #152]	@ (80019f0 <MX_ADC_Init+0xac>)
 8001958:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800195a:	4b24      	ldr	r3, [pc, #144]	@ (80019ec <MX_ADC_Init+0xa8>)
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001960:	4b22      	ldr	r3, [pc, #136]	@ (80019ec <MX_ADC_Init+0xa8>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001966:	4b21      	ldr	r3, [pc, #132]	@ (80019ec <MX_ADC_Init+0xa8>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800196c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <MX_ADC_Init+0xa8>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001972:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <MX_ADC_Init+0xa8>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001978:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <MX_ADC_Init+0xa8>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <MX_ADC_Init+0xa8>)
 8001980:	2200      	movs	r2, #0
 8001982:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001984:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <MX_ADC_Init+0xa8>)
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800198a:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <MX_ADC_Init+0xa8>)
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8001992:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <MX_ADC_Init+0xa8>)
 8001994:	2201      	movs	r2, #1
 8001996:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001998:	4b14      	ldr	r3, [pc, #80]	@ (80019ec <MX_ADC_Init+0xa8>)
 800199a:	2200      	movs	r2, #0
 800199c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <MX_ADC_Init+0xa8>)
 80019a2:	2210      	movs	r2, #16
 80019a4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <MX_ADC_Init+0xa8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <MX_ADC_Init+0xa8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80019b4:	480d      	ldr	r0, [pc, #52]	@ (80019ec <MX_ADC_Init+0xa8>)
 80019b6:	f003 fde9 	bl	800558c <HAL_ADC_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80019c0:	f000 fa49 	bl	8001e56 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	@ (80019ec <MX_ADC_Init+0xa8>)
 80019d6:	f004 f847 	bl	8005a68 <HAL_ADC_ConfigChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80019e0:	f000 fa39 	bl	8001e56 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	2000014c 	.word	0x2000014c
 80019f0:	40012400 	.word	0x40012400

080019f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019f8:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <MX_SPI1_Init+0x64>)
 80019fa:	4a18      	ldr	r2, [pc, #96]	@ (8001a5c <MX_SPI1_Init+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019fe:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <MX_SPI1_Init+0x64>)
 8001a00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a06:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <MX_SPI1_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <MX_SPI1_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a12:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <MX_SPI1_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <MX_SPI1_Init+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <MX_SPI1_Init+0x64>)
 8001a20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <MX_SPI1_Init+0x64>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <MX_SPI1_Init+0x64>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a32:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <MX_SPI1_Init+0x64>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a38:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <MX_SPI1_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a3e:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <MX_SPI1_Init+0x64>)
 8001a40:	220a      	movs	r2, #10
 8001a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a44:	4804      	ldr	r0, [pc, #16]	@ (8001a58 <MX_SPI1_Init+0x64>)
 8001a46:	f008 f97f 	bl	8009d48 <HAL_SPI_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a50:	f000 fa01 	bl	8001e56 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200001a0 	.word	0x200001a0
 8001a5c:	40013000 	.word	0x40013000

08001a60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001a7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001a86:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001a8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8001a92:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001a94:	22c8      	movs	r2, #200	@ 0xc8
 8001a96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aa4:	4813      	ldr	r0, [pc, #76]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001aa6:	f008 fbe5 	bl	800a274 <HAL_TIM_Base_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ab0:	f000 f9d1 	bl	8001e56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001ac2:	f008 ffe1 	bl	800aa88 <HAL_TIM_ConfigClockSource>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001acc:	f000 f9c3 	bl	8001e56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001ade:	f009 fadf 	bl	800b0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ae8:	f000 f9b5 	bl	8001e56 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200001f8 	.word	0x200001f8

08001af8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	@ 0x28
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afe:	f107 0318 	add.w	r3, r7, #24
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b16:	463b      	mov	r3, r7
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b22:	4b2e      	ldr	r3, [pc, #184]	@ (8001bdc <MX_TIM3_Init+0xe4>)
 8001b24:	4a2e      	ldr	r2, [pc, #184]	@ (8001be0 <MX_TIM3_Init+0xe8>)
 8001b26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000;
 8001b28:	4b2c      	ldr	r3, [pc, #176]	@ (8001bdc <MX_TIM3_Init+0xe4>)
 8001b2a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b30:	4b2a      	ldr	r3, [pc, #168]	@ (8001bdc <MX_TIM3_Init+0xe4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001b36:	4b29      	ldr	r3, [pc, #164]	@ (8001bdc <MX_TIM3_Init+0xe4>)
 8001b38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	4b27      	ldr	r3, [pc, #156]	@ (8001bdc <MX_TIM3_Init+0xe4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <MX_TIM3_Init+0xe4>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b4a:	4824      	ldr	r0, [pc, #144]	@ (8001bdc <MX_TIM3_Init+0xe4>)
 8001b4c:	f008 fb92 	bl	800a274 <HAL_TIM_Base_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001b56:	f000 f97e 	bl	8001e56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b5e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b60:	f107 0318 	add.w	r3, r7, #24
 8001b64:	4619      	mov	r1, r3
 8001b66:	481d      	ldr	r0, [pc, #116]	@ (8001bdc <MX_TIM3_Init+0xe4>)
 8001b68:	f008 ff8e 	bl	800aa88 <HAL_TIM_ConfigClockSource>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001b72:	f000 f970 	bl	8001e56 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b76:	4819      	ldr	r0, [pc, #100]	@ (8001bdc <MX_TIM3_Init+0xe4>)
 8001b78:	f008 fc34 	bl	800a3e4 <HAL_TIM_PWM_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001b82:	f000 f968 	bl	8001e56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	4619      	mov	r1, r3
 8001b94:	4811      	ldr	r0, [pc, #68]	@ (8001bdc <MX_TIM3_Init+0xe4>)
 8001b96:	f009 fa83 	bl	800b0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001ba0:	f000 f959 	bl	8001e56 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba4:	2360      	movs	r3, #96	@ 0x60
 8001ba6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001ba8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001bac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4807      	ldr	r0, [pc, #28]	@ (8001bdc <MX_TIM3_Init+0xe4>)
 8001bbe:	f008 fea1 	bl	800a904 <HAL_TIM_PWM_ConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001bc8:	f000 f945 	bl	8001e56 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bcc:	4803      	ldr	r0, [pc, #12]	@ (8001bdc <MX_TIM3_Init+0xe4>)
 8001bce:	f000 fb89 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	@ 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000238 	.word	0x20000238
 8001be0:	40000400 	.word	0x40000400

08001be4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bea:	463b      	mov	r3, r7
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001bf4:	4a15      	ldr	r2, [pc, #84]	@ (8001c4c <MX_TIM6_Init+0x68>)
 8001bf6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000;
 8001bf8:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001bfa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001bfe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001c08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c0c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c14:	480c      	ldr	r0, [pc, #48]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001c16:	f008 fb2d 	bl	800a274 <HAL_TIM_Base_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c20:	f000 f919 	bl	8001e56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001c32:	f009 fa35 	bl	800b0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c3c:	f000 f90b 	bl	8001e56 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000278 	.word	0x20000278
 8001c4c:	40001000 	.word	0x40001000

08001c50 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c56:	463b      	mov	r3, r7
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <MX_TIM7_Init+0x64>)
 8001c60:	4a15      	ldr	r2, [pc, #84]	@ (8001cb8 <MX_TIM7_Init+0x68>)
 8001c62:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32000;
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <MX_TIM7_Init+0x64>)
 8001c66:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001c6a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <MX_TIM7_Init+0x64>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <MX_TIM7_Init+0x64>)
 8001c74:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c78:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <MX_TIM7_Init+0x64>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c80:	480c      	ldr	r0, [pc, #48]	@ (8001cb4 <MX_TIM7_Init+0x64>)
 8001c82:	f008 faf7 	bl	800a274 <HAL_TIM_Base_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c8c:	f000 f8e3 	bl	8001e56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	@ (8001cb4 <MX_TIM7_Init+0x64>)
 8001c9e:	f009 f9ff 	bl	800b0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001ca8:	f000 f8d5 	bl	8001e56 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200002b8 	.word	0x200002b8
 8001cb8:	40001400 	.word	0x40001400

08001cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	@ (8001d0c <MX_USART2_UART_Init+0x50>)
 8001cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cf4:	f009 fa32 	bl	800b15c <HAL_UART_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cfe:	f000 f8aa 	bl	8001e56 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200002f8 	.word	0x200002f8
 8001d0c:	40004400 	.word	0x40004400

08001d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	@ 0x28
 8001d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d26:	4b41      	ldr	r3, [pc, #260]	@ (8001e2c <MX_GPIO_Init+0x11c>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a40      	ldr	r2, [pc, #256]	@ (8001e2c <MX_GPIO_Init+0x11c>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	61d3      	str	r3, [r2, #28]
 8001d32:	4b3e      	ldr	r3, [pc, #248]	@ (8001e2c <MX_GPIO_Init+0x11c>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e2c <MX_GPIO_Init+0x11c>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4a3a      	ldr	r2, [pc, #232]	@ (8001e2c <MX_GPIO_Init+0x11c>)
 8001d44:	f043 0320 	orr.w	r3, r3, #32
 8001d48:	61d3      	str	r3, [r2, #28]
 8001d4a:	4b38      	ldr	r3, [pc, #224]	@ (8001e2c <MX_GPIO_Init+0x11c>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	4b35      	ldr	r3, [pc, #212]	@ (8001e2c <MX_GPIO_Init+0x11c>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4a34      	ldr	r2, [pc, #208]	@ (8001e2c <MX_GPIO_Init+0x11c>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	61d3      	str	r3, [r2, #28]
 8001d62:	4b32      	ldr	r3, [pc, #200]	@ (8001e2c <MX_GPIO_Init+0x11c>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e2c <MX_GPIO_Init+0x11c>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4a2e      	ldr	r2, [pc, #184]	@ (8001e2c <MX_GPIO_Init+0x11c>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	61d3      	str	r3, [r2, #28]
 8001d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e2c <MX_GPIO_Init+0x11c>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L0_Pin|L1_Pin|L2_Pin|L3_Pin, GPIO_PIN_RESET);
 8001d86:	2200      	movs	r2, #0
 8001d88:	f640 4106 	movw	r1, #3078	@ 0xc06
 8001d8c:	4828      	ldr	r0, [pc, #160]	@ (8001e30 <MX_GPIO_Init+0x120>)
 8001d8e:	f004 fc83 	bl	8006698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d98:	4826      	ldr	r0, [pc, #152]	@ (8001e34 <MX_GPIO_Init+0x124>)
 8001d9a:	f004 fc7d 	bl	8006698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001da4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001daa:	2302      	movs	r3, #2
 8001dac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	4820      	ldr	r0, [pc, #128]	@ (8001e38 <MX_GPIO_Init+0x128>)
 8001db6:	f004 f9ef 	bl	8006198 <HAL_GPIO_Init>

  /*Configure GPIO pins : L0_Pin L1_Pin L2_Pin L3_Pin */
  GPIO_InitStruct.Pin = L0_Pin|L1_Pin|L2_Pin|L3_Pin;
 8001dba:	f640 4306 	movw	r3, #3078	@ 0xc06
 8001dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4817      	ldr	r0, [pc, #92]	@ (8001e30 <MX_GPIO_Init+0x120>)
 8001dd4:	f004 f9e0 	bl	8006198 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001dd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dde:	2301      	movs	r3, #1
 8001de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	4810      	ldr	r0, [pc, #64]	@ (8001e34 <MX_GPIO_Init+0x124>)
 8001df2:	f004 f9d1 	bl	8006198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001df6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dfc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4809      	ldr	r0, [pc, #36]	@ (8001e34 <MX_GPIO_Init+0x124>)
 8001e0e:	f004 f9c3 	bl	8006198 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	2028      	movs	r0, #40	@ 0x28
 8001e18:	f004 f92b 	bl	8006072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e1c:	2028      	movs	r0, #40	@ 0x28
 8001e1e:	f004 f944 	bl	80060aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e22:	bf00      	nop
 8001e24:	3728      	adds	r7, #40	@ 0x28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020400 	.word	0x40020400
 8001e34:	40020000 	.word	0x40020000
 8001e38:	40020800 	.word	0x40020800

08001e3c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
	ITM_SendChar(ch);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fb0e 	bl	8001468 <ITM_SendChar>
	return(ch);
 8001e4c:	687b      	ldr	r3, [r7, #4]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5a:	b672      	cpsid	i
}
 8001e5c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e5e:	bf00      	nop
 8001e60:	e7fd      	b.n	8001e5e <Error_Handler+0x8>
	...

08001e64 <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e6e:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <SPI_CS_High+0x14>)
 8001e70:	f004 fc12 	bl	8006698 <HAL_GPIO_WritePin>
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40020000 	.word	0x40020000

08001e7c <SPI_CS_Low>:

 void SPI_CS_Low()
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001e80:	2200      	movs	r2, #0
 8001e82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e86:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <SPI_CS_Low+0x14>)
 8001e88:	f004 fc06 	bl	8006698 <HAL_GPIO_WritePin>
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40020000 	.word	0x40020000

08001e94 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 8001e98:	2107      	movs	r1, #7
 8001e9a:	200b      	movs	r0, #11
 8001e9c:	f000 f8ca 	bl	8002034 <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2009      	movs	r0, #9
 8001ea4:	f000 f8c6 	bl	8002034 <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 8001ea8:	f000 f809 	bl	8001ebe <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8001eac:	f000 f817 	bl	8001ede <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8001eb0:	f000 f82f 	bl	8001f12 <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8001eb4:	200f      	movs	r0, #15
 8001eb6:	f000 f81a 	bl	8001eee <MAX7219_SetBrightness>
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	200c      	movs	r0, #12
 8001ec6:	f000 f8b5 	bl	8002034 <MAX7219_Write>
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <MAX7219_DisplayTestStart>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStart (void)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 1);                 // put MAX7219 into "display test" mode
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	200f      	movs	r0, #15
 8001ed6:	f000 f8ad 	bl	8002034 <MAX7219_Write>
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}

08001ede <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	200f      	movs	r0, #15
 8001ee6:	f000 f8a5 	bl	8002034 <MAX7219_Write>
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}

08001eee <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	4619      	mov	r1, r3
 8001f04:	200a      	movs	r0, #10
 8001f06:	f000 f895 	bl	8002034 <MAX7219_Write>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	71fb      	strb	r3, [r7, #7]
 8001f1c:	e007      	b.n	8001f2e <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f886 	bl	8002034 <MAX7219_Write>
  for (i=0; i < 8; i++)
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	71fb      	strb	r3, [r7, #7]
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2b07      	cmp	r3, #7
 8001f32:	d9f4      	bls.n	8001f1e <MAX7219_Clear+0xc>
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <MAX7219_DisplayChar>:
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar (char digit, char character)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	460a      	mov	r2, r1
 8001f48:	71fb      	strb	r3, [r7, #7]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	71bb      	strb	r3, [r7, #6]
  MAX7219_Write(digit, MAX7219_LookupCode(character));
 8001f4e:	79bb      	ldrb	r3, [r7, #6]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 f823 	bl	8001f9c <MAX7219_LookupCode>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f868 	bl	8002034 <MAX7219_Write>
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <MAX7219_DisplayChar1>:

void MAX7219_DisplayChar1 (char digit, char character)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	460a      	mov	r2, r1
 8001f76:	71fb      	strb	r3, [r7, #7]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	71bb      	strb	r3, [r7, #6]
  MAX7219_Write(digit, MAX7219_LookupCode1(character));
 8001f7c:	79bb      	ldrb	r3, [r7, #6]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f832 	bl	8001fe8 <MAX7219_LookupCode1>
 8001f84:	4603      	mov	r3, r0
 8001f86:	461a      	mov	r2, r3
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 f851 	bl	8002034 <MAX7219_Write>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <MAX7219_LookupCode>:
* Arguments  : character to display
* Returns    : segment code
*********************************************************************************************************
*/
static unsigned char MAX7219_LookupCode (char character)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	e00f      	b.n	8001fcc <MAX7219_LookupCode+0x30>
    if (character == MAX7219_Font[i].ascii)
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe4 <MAX7219_LookupCode+0x48>)
 8001fb0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001fb4:	79fa      	ldrb	r2, [r7, #7]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d105      	bne.n	8001fc6 <MAX7219_LookupCode+0x2a>
      return MAX7219_Font[i].segs;                    // return segments code
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	4a09      	ldr	r2, [pc, #36]	@ (8001fe4 <MAX7219_LookupCode+0x48>)
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	785b      	ldrb	r3, [r3, #1]
 8001fc4:	e009      	b.n	8001fda <MAX7219_LookupCode+0x3e>
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <MAX7219_LookupCode+0x48>)
 8001fd0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1e9      	bne.n	8001fac <MAX7219_LookupCode+0x10>
  return 0;                                           // code not found, return null (blank)
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	0800d368 	.word	0x0800d368

08001fe8 <MAX7219_LookupCode1>:

static unsigned char MAX7219_LookupCode1 (char character)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font1[i].ascii1; i++)             // scan font table for ascii code
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]
 8001ff6:	e00f      	b.n	8002018 <MAX7219_LookupCode1+0x30>
    if (character == MAX7219_Font1[i].ascii1)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8002030 <MAX7219_LookupCode1+0x48>)
 8001ffc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002000:	79fa      	ldrb	r2, [r7, #7]
 8002002:	429a      	cmp	r2, r3
 8002004:	d105      	bne.n	8002012 <MAX7219_LookupCode1+0x2a>
      return MAX7219_Font1[i].segs1;                    // return segments code
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	4a09      	ldr	r2, [pc, #36]	@ (8002030 <MAX7219_LookupCode1+0x48>)
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	785b      	ldrb	r3, [r3, #1]
 8002010:	e009      	b.n	8002026 <MAX7219_LookupCode1+0x3e>
  for (i = 0; MAX7219_Font1[i].ascii1; i++)             // scan font table for ascii code
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	3301      	adds	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	4a05      	ldr	r2, [pc, #20]	@ (8002030 <MAX7219_LookupCode1+0x48>)
 800201c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1e9      	bne.n	8001ff8 <MAX7219_LookupCode1+0x10>
  return 0;                                           // code not found, return null (blank)
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	0800d3a4 	.word	0x0800d3a4

08002034 <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	460a      	mov	r2, r1
 800203e:	71fb      	strb	r3, [r7, #7]
 8002040:	4613      	mov	r3, r2
 8002042:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 8002044:	f7ff ff1a 	bl	8001e7c <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f80c 	bl	8002068 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 8002050:	79bb      	ldrb	r3, [r7, #6]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f808 	bl	8002068 <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 8002058:	f7ff ff04 	bl	8001e64 <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 800205c:	f7ff ff0e 	bl	8001e7c <SPI_CS_Low>
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 8002072:	1df9      	adds	r1, r7, #7
 8002074:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002078:	2201      	movs	r2, #1
 800207a:	4803      	ldr	r0, [pc, #12]	@ (8002088 <MAX7219_SendByte+0x20>)
 800207c:	f007 feed 	bl	8009e5a <HAL_SPI_Transmit>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200001a0 	.word	0x200001a0

0800208c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <HAL_MspInit+0x5c>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	4a14      	ldr	r2, [pc, #80]	@ (80020e8 <HAL_MspInit+0x5c>)
 8002098:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800209c:	6253      	str	r3, [r2, #36]	@ 0x24
 800209e:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <HAL_MspInit+0x5c>)
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <HAL_MspInit+0x5c>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <HAL_MspInit+0x5c>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6213      	str	r3, [r2, #32]
 80020b6:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <HAL_MspInit+0x5c>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <HAL_MspInit+0x5c>)
 80020c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c6:	4a08      	ldr	r2, [pc, #32]	@ (80020e8 <HAL_MspInit+0x5c>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	6253      	str	r3, [r2, #36]	@ 0x24
 80020ce:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_MspInit+0x5c>)
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020da:	2007      	movs	r0, #7
 80020dc:	f003 ffbe 	bl	800605c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40023800 	.word	0x40023800

080020ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	@ 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a15      	ldr	r2, [pc, #84]	@ (8002160 <HAL_ADC_MspInit+0x74>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d123      	bne.n	8002156 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <HAL_ADC_MspInit+0x78>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <HAL_ADC_MspInit+0x78>)
 8002114:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002118:	6213      	str	r3, [r2, #32]
 800211a:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_ADC_MspInit+0x78>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <HAL_ADC_MspInit+0x78>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4a0e      	ldr	r2, [pc, #56]	@ (8002164 <HAL_ADC_MspInit+0x78>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	61d3      	str	r3, [r2, #28]
 8002132:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <HAL_ADC_MspInit+0x78>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800213e:	2301      	movs	r3, #1
 8002140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002142:	2303      	movs	r3, #3
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4805      	ldr	r0, [pc, #20]	@ (8002168 <HAL_ADC_MspInit+0x7c>)
 8002152:	f004 f821 	bl	8006198 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002156:	bf00      	nop
 8002158:	3728      	adds	r7, #40	@ 0x28
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40012400 	.word	0x40012400
 8002164:	40023800 	.word	0x40023800
 8002168:	40020000 	.word	0x40020000

0800216c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	@ 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a17      	ldr	r2, [pc, #92]	@ (80021e8 <HAL_SPI_MspInit+0x7c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d127      	bne.n	80021de <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800218e:	4b17      	ldr	r3, [pc, #92]	@ (80021ec <HAL_SPI_MspInit+0x80>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a16      	ldr	r2, [pc, #88]	@ (80021ec <HAL_SPI_MspInit+0x80>)
 8002194:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002198:	6213      	str	r3, [r2, #32]
 800219a:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <HAL_SPI_MspInit+0x80>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <HAL_SPI_MspInit+0x80>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a10      	ldr	r2, [pc, #64]	@ (80021ec <HAL_SPI_MspInit+0x80>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	61d3      	str	r3, [r2, #28]
 80021b2:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <HAL_SPI_MspInit+0x80>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021be:	23e0      	movs	r3, #224	@ 0xe0
 80021c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ca:	2303      	movs	r3, #3
 80021cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ce:	2305      	movs	r3, #5
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	@ (80021f0 <HAL_SPI_MspInit+0x84>)
 80021da:	f003 ffdd 	bl	8006198 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021de:	bf00      	nop
 80021e0:	3728      	adds	r7, #40	@ 0x28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40013000 	.word	0x40013000
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020000 	.word	0x40020000

080021f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002204:	d114      	bne.n	8002230 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002206:	4b33      	ldr	r3, [pc, #204]	@ (80022d4 <HAL_TIM_Base_MspInit+0xe0>)
 8002208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220a:	4a32      	ldr	r2, [pc, #200]	@ (80022d4 <HAL_TIM_Base_MspInit+0xe0>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6253      	str	r3, [r2, #36]	@ 0x24
 8002212:	4b30      	ldr	r3, [pc, #192]	@ (80022d4 <HAL_TIM_Base_MspInit+0xe0>)
 8002214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	201c      	movs	r0, #28
 8002224:	f003 ff25 	bl	8006072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002228:	201c      	movs	r0, #28
 800222a:	f003 ff3e 	bl	80060aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800222e:	e04c      	b.n	80022ca <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a28      	ldr	r2, [pc, #160]	@ (80022d8 <HAL_TIM_Base_MspInit+0xe4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d114      	bne.n	8002264 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800223a:	4b26      	ldr	r3, [pc, #152]	@ (80022d4 <HAL_TIM_Base_MspInit+0xe0>)
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	4a25      	ldr	r2, [pc, #148]	@ (80022d4 <HAL_TIM_Base_MspInit+0xe0>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6253      	str	r3, [r2, #36]	@ 0x24
 8002246:	4b23      	ldr	r3, [pc, #140]	@ (80022d4 <HAL_TIM_Base_MspInit+0xe0>)
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	201d      	movs	r0, #29
 8002258:	f003 ff0b 	bl	8006072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800225c:	201d      	movs	r0, #29
 800225e:	f003 ff24 	bl	80060aa <HAL_NVIC_EnableIRQ>
}
 8002262:	e032      	b.n	80022ca <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1c      	ldr	r2, [pc, #112]	@ (80022dc <HAL_TIM_Base_MspInit+0xe8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d114      	bne.n	8002298 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800226e:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <HAL_TIM_Base_MspInit+0xe0>)
 8002270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002272:	4a18      	ldr	r2, [pc, #96]	@ (80022d4 <HAL_TIM_Base_MspInit+0xe0>)
 8002274:	f043 0310 	orr.w	r3, r3, #16
 8002278:	6253      	str	r3, [r2, #36]	@ 0x24
 800227a:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <HAL_TIM_Base_MspInit+0xe0>)
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 1);
 8002286:	2201      	movs	r2, #1
 8002288:	2100      	movs	r1, #0
 800228a:	202b      	movs	r0, #43	@ 0x2b
 800228c:	f003 fef1 	bl	8006072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002290:	202b      	movs	r0, #43	@ 0x2b
 8002292:	f003 ff0a 	bl	80060aa <HAL_NVIC_EnableIRQ>
}
 8002296:	e018      	b.n	80022ca <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a10      	ldr	r2, [pc, #64]	@ (80022e0 <HAL_TIM_Base_MspInit+0xec>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d113      	bne.n	80022ca <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022a2:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <HAL_TIM_Base_MspInit+0xe0>)
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a6:	4a0b      	ldr	r2, [pc, #44]	@ (80022d4 <HAL_TIM_Base_MspInit+0xe0>)
 80022a8:	f043 0320 	orr.w	r3, r3, #32
 80022ac:	6253      	str	r3, [r2, #36]	@ 0x24
 80022ae:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <HAL_TIM_Base_MspInit+0xe0>)
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	202c      	movs	r0, #44	@ 0x2c
 80022c0:	f003 fed7 	bl	8006072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022c4:	202c      	movs	r0, #44	@ 0x2c
 80022c6:	f003 fef0 	bl	80060aa <HAL_NVIC_EnableIRQ>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40000400 	.word	0x40000400
 80022dc:	40001000 	.word	0x40001000
 80022e0:	40001400 	.word	0x40001400

080022e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a11      	ldr	r2, [pc, #68]	@ (8002348 <HAL_TIM_MspPostInit+0x64>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d11b      	bne.n	800233e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	4b11      	ldr	r3, [pc, #68]	@ (800234c <HAL_TIM_MspPostInit+0x68>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4a10      	ldr	r2, [pc, #64]	@ (800234c <HAL_TIM_MspPostInit+0x68>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	61d3      	str	r3, [r2, #28]
 8002312:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <HAL_TIM_MspPostInit+0x68>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800231e:	2310      	movs	r3, #16
 8002320:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800232e:	2302      	movs	r3, #2
 8002330:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	f107 030c 	add.w	r3, r7, #12
 8002336:	4619      	mov	r1, r3
 8002338:	4805      	ldr	r0, [pc, #20]	@ (8002350 <HAL_TIM_MspPostInit+0x6c>)
 800233a:	f003 ff2d 	bl	8006198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800233e:	bf00      	nop
 8002340:	3720      	adds	r7, #32
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40000400 	.word	0x40000400
 800234c:	40023800 	.word	0x40023800
 8002350:	40020400 	.word	0x40020400

08002354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	@ 0x28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a17      	ldr	r2, [pc, #92]	@ (80023d0 <HAL_UART_MspInit+0x7c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d127      	bne.n	80023c6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002376:	4b17      	ldr	r3, [pc, #92]	@ (80023d4 <HAL_UART_MspInit+0x80>)
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	4a16      	ldr	r2, [pc, #88]	@ (80023d4 <HAL_UART_MspInit+0x80>)
 800237c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002380:	6253      	str	r3, [r2, #36]	@ 0x24
 8002382:	4b14      	ldr	r3, [pc, #80]	@ (80023d4 <HAL_UART_MspInit+0x80>)
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <HAL_UART_MspInit+0x80>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4a10      	ldr	r2, [pc, #64]	@ (80023d4 <HAL_UART_MspInit+0x80>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	61d3      	str	r3, [r2, #28]
 800239a:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <HAL_UART_MspInit+0x80>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023a6:	230c      	movs	r3, #12
 80023a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b6:	2307      	movs	r3, #7
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	@ (80023d8 <HAL_UART_MspInit+0x84>)
 80023c2:	f003 fee9 	bl	8006198 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023c6:	bf00      	nop
 80023c8:	3728      	adds	r7, #40	@ 0x28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40004400 	.word	0x40004400
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020000 	.word	0x40020000

080023dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <NMI_Handler+0x4>

080023e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <MemManage_Handler+0x4>

080023f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <UsageFault_Handler+0x4>

08002404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242c:	f003 f870 	bl	8005510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002438:	4802      	ldr	r0, [pc, #8]	@ (8002444 <TIM2_IRQHandler+0x10>)
 800243a:	f008 f987 	bl	800a74c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200001f8 	.word	0x200001f8

08002448 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800244c:	4802      	ldr	r0, [pc, #8]	@ (8002458 <TIM3_IRQHandler+0x10>)
 800244e:	f008 f97d 	bl	800a74c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000238 	.word	0x20000238

0800245c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002460:	4802      	ldr	r0, [pc, #8]	@ (800246c <I2C1_EV_IRQHandler+0x10>)
 8002462:	f004 fe03 	bl	800706c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000358 	.word	0x20000358

08002470 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002474:	4802      	ldr	r0, [pc, #8]	@ (8002480 <I2C1_ER_IRQHandler+0x10>)
 8002476:	f004 ff4c 	bl	8007312 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000358 	.word	0x20000358

08002484 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	printf("BP1\r\n");
 8002488:	4808      	ldr	r0, [pc, #32]	@ (80024ac <EXTI15_10_IRQHandler+0x28>)
 800248a:	f009 f8b3 	bl	800b5f4 <puts>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800248e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002492:	f004 f919 	bl	80066c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002496:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800249a:	f004 f915 	bl	80066c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800249e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80024a2:	f004 f911 	bl	80066c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	0800d354 	.word	0x0800d354

080024b0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024b4:	4804      	ldr	r0, [pc, #16]	@ (80024c8 <TIM6_IRQHandler+0x18>)
 80024b6:	f008 f949 	bl	800a74c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  TIM6_IRQ();
 80024ba:	f7fe fffb 	bl	80014b4 <TIM6_IRQ>
  printf("T6\r\n");
 80024be:	4803      	ldr	r0, [pc, #12]	@ (80024cc <TIM6_IRQHandler+0x1c>)
 80024c0:	f009 f898 	bl	800b5f4 <puts>
  /* USER CODE END TIM6_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000278 	.word	0x20000278
 80024cc:	0800d35c 	.word	0x0800d35c

080024d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80024d4:	4804      	ldr	r0, [pc, #16]	@ (80024e8 <TIM7_IRQHandler+0x18>)
 80024d6:	f008 f939 	bl	800a74c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
	TIM7_IRQ();
 80024da:	f7fe ffff 	bl	80014dc <TIM7_IRQ>
	printf("T7\r\n");
 80024de:	4803      	ldr	r0, [pc, #12]	@ (80024ec <TIM7_IRQHandler+0x1c>)
 80024e0:	f009 f888 	bl	800b5f4 <puts>
  /* USER CODE END TIM7_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200002b8 	.word	0x200002b8
 80024ec:	0800d360 	.word	0x0800d360

080024f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_11){
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002500:	d128      	bne.n	8002554 <HAL_GPIO_EXTI_Callback+0x64>
		if(!debounce_flag1){
 8002502:	4b16      	ldr	r3, [pc, #88]	@ (800255c <HAL_GPIO_EXTI_Callback+0x6c>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d123      	bne.n	8002554 <HAL_GPIO_EXTI_Callback+0x64>
			debounce_flag1 = 1;
 800250c:	4b13      	ldr	r3, [pc, #76]	@ (800255c <HAL_GPIO_EXTI_Callback+0x6c>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
			printf("11\r\n");
 8002512:	4813      	ldr	r0, [pc, #76]	@ (8002560 <HAL_GPIO_EXTI_Callback+0x70>)
 8002514:	f009 f86e 	bl	800b5f4 <puts>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002518:	4b12      	ldr	r3, [pc, #72]	@ (8002564 <HAL_GPIO_EXTI_Callback+0x74>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2200      	movs	r2, #0
 800251e:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Start_IT(&htim2);
 8002520:	4810      	ldr	r0, [pc, #64]	@ (8002564 <HAL_GPIO_EXTI_Callback+0x74>)
 8002522:	f007 fee7 	bl	800a2f4 <HAL_TIM_Base_Start_IT>
			if (reg){
 8002526:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <HAL_GPIO_EXTI_Callback+0x78>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_GPIO_EXTI_Callback+0x52>
				reg = 0;
 800252e:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <HAL_GPIO_EXTI_Callback+0x78>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim6);
 8002534:	480d      	ldr	r0, [pc, #52]	@ (800256c <HAL_GPIO_EXTI_Callback+0x7c>)
 8002536:	f007 fedd 	bl	800a2f4 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Stop_IT(&htim7);
 800253a:	480d      	ldr	r0, [pc, #52]	@ (8002570 <HAL_GPIO_EXTI_Callback+0x80>)
 800253c:	f007 ff2c 	bl	800a398 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Start_IT(&htim7);
				HAL_TIM_Base_Stop_IT(&htim6);
				reg = 1;
			}
		}}
}
 8002540:	e008      	b.n	8002554 <HAL_GPIO_EXTI_Callback+0x64>
				HAL_TIM_Base_Start_IT(&htim7);
 8002542:	480b      	ldr	r0, [pc, #44]	@ (8002570 <HAL_GPIO_EXTI_Callback+0x80>)
 8002544:	f007 fed6 	bl	800a2f4 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Stop_IT(&htim6);
 8002548:	4808      	ldr	r0, [pc, #32]	@ (800256c <HAL_GPIO_EXTI_Callback+0x7c>)
 800254a:	f007 ff25 	bl	800a398 <HAL_TIM_Base_Stop_IT>
				reg = 1;
 800254e:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <HAL_GPIO_EXTI_Callback+0x78>)
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000355 	.word	0x20000355
 8002560:	0800d364 	.word	0x0800d364
 8002564:	200001f8 	.word	0x200001f8
 8002568:	20000354 	.word	0x20000354
 800256c:	20000278 	.word	0x20000278
 8002570:	200002b8 	.word	0x200002b8

08002574 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2){
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002584:	d112      	bne.n	80025ac <HAL_TIM_PeriodElapsedCallback+0x38>
        if (debounce_flag1){
 8002586:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_TIM_PeriodElapsedCallback+0x22>
            debounce_flag1 = 0;
 8002590:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
        }
        if (debounce_flag2){
 8002596:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_TIM_PeriodElapsedCallback+0x32>
            debounce_flag2 = 0;
 80025a0:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
        }
        HAL_TIM_Base_Stop_IT(&htim2); // Stop the timer
 80025a6:	4805      	ldr	r0, [pc, #20]	@ (80025bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025a8:	f007 fef6 	bl	800a398 <HAL_TIM_Base_Stop_IT>
    }
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000355 	.word	0x20000355
 80025b8:	20000356 	.word	0x20000356
 80025bc:	200001f8 	.word	0x200001f8

080025c0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80025ca:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <BSP_I2C1_Init+0x58>)
 80025cc:	4a13      	ldr	r2, [pc, #76]	@ (800261c <BSP_I2C1_Init+0x5c>)
 80025ce:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80025d0:	4b13      	ldr	r3, [pc, #76]	@ (8002620 <BSP_I2C1_Init+0x60>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	4912      	ldr	r1, [pc, #72]	@ (8002620 <BSP_I2C1_Init+0x60>)
 80025d8:	600a      	str	r2, [r1, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d117      	bne.n	800260e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80025de:	480e      	ldr	r0, [pc, #56]	@ (8002618 <BSP_I2C1_Init+0x58>)
 80025e0:	f004 ff94 	bl	800750c <HAL_I2C_GetState>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d111      	bne.n	800260e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80025ea:	480b      	ldr	r0, [pc, #44]	@ (8002618 <BSP_I2C1_Init+0x58>)
 80025ec:	f000 f8e2 	bl	80027b4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80025f6:	4808      	ldr	r0, [pc, #32]	@ (8002618 <BSP_I2C1_Init+0x58>)
 80025f8:	f000 f8a8 	bl	800274c <MX_I2C1_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002602:	f06f 0307 	mvn.w	r3, #7
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	e001      	b.n	800260e <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800260e:	687b      	ldr	r3, [r7, #4]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000358 	.word	0x20000358
 800261c:	40005400 	.word	0x40005400
 8002620:	200003ac 	.word	0x200003ac

08002624 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800262a:	2300      	movs	r3, #0
 800262c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800262e:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <BSP_I2C1_DeInit+0x48>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d014      	beq.n	8002660 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002636:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <BSP_I2C1_DeInit+0x48>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3b01      	subs	r3, #1
 800263c:	4a0b      	ldr	r2, [pc, #44]	@ (800266c <BSP_I2C1_DeInit+0x48>)
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b0a      	ldr	r3, [pc, #40]	@ (800266c <BSP_I2C1_DeInit+0x48>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10b      	bne.n	8002660 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002648:	4809      	ldr	r0, [pc, #36]	@ (8002670 <BSP_I2C1_DeInit+0x4c>)
 800264a:	f000 f909 	bl	8002860 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800264e:	4808      	ldr	r0, [pc, #32]	@ (8002670 <BSP_I2C1_DeInit+0x4c>)
 8002650:	f004 f996 	bl	8006980 <HAL_I2C_DeInit>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800265a:	f06f 0307 	mvn.w	r3, #7
 800265e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002660:	687b      	ldr	r3, [r7, #4]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200003ac 	.word	0x200003ac
 8002670:	20000358 	.word	0x20000358

08002674 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	@ 0x28
 8002678:	af04      	add	r7, sp, #16
 800267a:	60ba      	str	r2, [r7, #8]
 800267c:	461a      	mov	r2, r3
 800267e:	4603      	mov	r3, r0
 8002680:	81fb      	strh	r3, [r7, #14]
 8002682:	460b      	mov	r3, r1
 8002684:	81bb      	strh	r3, [r7, #12]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800268e:	89ba      	ldrh	r2, [r7, #12]
 8002690:	89f9      	ldrh	r1, [r7, #14]
 8002692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002696:	9302      	str	r3, [sp, #8]
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	2301      	movs	r3, #1
 80026a2:	480c      	ldr	r0, [pc, #48]	@ (80026d4 <BSP_I2C1_WriteReg+0x60>)
 80026a4:	f004 f9c2 	bl	8006a2c <HAL_I2C_Mem_Write>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00c      	beq.n	80026c8 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80026ae:	4809      	ldr	r0, [pc, #36]	@ (80026d4 <BSP_I2C1_WriteReg+0x60>)
 80026b0:	f004 ff39 	bl	8007526 <HAL_I2C_GetError>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d103      	bne.n	80026c2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80026ba:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	e002      	b.n	80026c8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80026c2:	f06f 0303 	mvn.w	r3, #3
 80026c6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80026c8:	697b      	ldr	r3, [r7, #20]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000358 	.word	0x20000358

080026d8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	@ 0x28
 80026dc:	af04      	add	r7, sp, #16
 80026de:	60ba      	str	r2, [r7, #8]
 80026e0:	461a      	mov	r2, r3
 80026e2:	4603      	mov	r3, r0
 80026e4:	81fb      	strh	r3, [r7, #14]
 80026e6:	460b      	mov	r3, r1
 80026e8:	81bb      	strh	r3, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80026f2:	89ba      	ldrh	r2, [r7, #12]
 80026f4:	89f9      	ldrh	r1, [r7, #14]
 80026f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026fa:	9302      	str	r3, [sp, #8]
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2301      	movs	r3, #1
 8002706:	480c      	ldr	r0, [pc, #48]	@ (8002738 <BSP_I2C1_ReadReg+0x60>)
 8002708:	f004 fa8a 	bl	8006c20 <HAL_I2C_Mem_Read>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00c      	beq.n	800272c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002712:	4809      	ldr	r0, [pc, #36]	@ (8002738 <BSP_I2C1_ReadReg+0x60>)
 8002714:	f004 ff07 	bl	8007526 <HAL_I2C_GetError>
 8002718:	4603      	mov	r3, r0
 800271a:	2b04      	cmp	r3, #4
 800271c:	d103      	bne.n	8002726 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800271e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e002      	b.n	800272c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002726:	f06f 0303 	mvn.w	r3, #3
 800272a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800272c:	697b      	ldr	r3, [r7, #20]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000358 	.word	0x20000358

0800273c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002740:	f002 fef8 	bl	8005534 <HAL_GetTick>
 8002744:	4603      	mov	r3, r0
}
 8002746:	4618      	mov	r0, r3
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a14      	ldr	r2, [pc, #80]	@ (80027ac <MX_I2C1_Init+0x60>)
 800275c:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a13      	ldr	r2, [pc, #76]	@ (80027b0 <MX_I2C1_Init+0x64>)
 8002762:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002776:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f003 ffb1 	bl	80066f8 <HAL_I2C_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40005400 	.word	0x40005400
 80027b0:	00061a80 	.word	0x00061a80

080027b4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	@ 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027bc:	4b26      	ldr	r3, [pc, #152]	@ (8002858 <I2C1_MspInit+0xa4>)
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	4a25      	ldr	r2, [pc, #148]	@ (8002858 <I2C1_MspInit+0xa4>)
 80027c2:	f043 0302 	orr.w	r3, r3, #2
 80027c6:	61d3      	str	r3, [r2, #28]
 80027c8:	4b23      	ldr	r3, [pc, #140]	@ (8002858 <I2C1_MspInit+0xa4>)
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80027d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027da:	2312      	movs	r3, #18
 80027dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80027e6:	2304      	movs	r3, #4
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	4619      	mov	r1, r3
 80027f0:	481a      	ldr	r0, [pc, #104]	@ (800285c <I2C1_MspInit+0xa8>)
 80027f2:	f003 fcd1 	bl	8006198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80027f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fc:	2312      	movs	r3, #18
 80027fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002804:	2303      	movs	r3, #3
 8002806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002808:	2304      	movs	r3, #4
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	4619      	mov	r1, r3
 8002812:	4812      	ldr	r0, [pc, #72]	@ (800285c <I2C1_MspInit+0xa8>)
 8002814:	f003 fcc0 	bl	8006198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002818:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <I2C1_MspInit+0xa4>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	4a0e      	ldr	r2, [pc, #56]	@ (8002858 <I2C1_MspInit+0xa4>)
 800281e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002822:	6253      	str	r3, [r2, #36]	@ 0x24
 8002824:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <I2C1_MspInit+0xa4>)
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002830:	2200      	movs	r2, #0
 8002832:	2100      	movs	r1, #0
 8002834:	201f      	movs	r0, #31
 8002836:	f003 fc1c 	bl	8006072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800283a:	201f      	movs	r0, #31
 800283c:	f003 fc35 	bl	80060aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002840:	2200      	movs	r2, #0
 8002842:	2100      	movs	r1, #0
 8002844:	2020      	movs	r0, #32
 8002846:	f003 fc14 	bl	8006072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800284a:	2020      	movs	r0, #32
 800284c:	f003 fc2d 	bl	80060aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002850:	bf00      	nop
 8002852:	3728      	adds	r7, #40	@ 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40023800 	.word	0x40023800
 800285c:	40020400 	.word	0x40020400

08002860 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002868:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <I2C1_MspDeInit+0x3c>)
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	4a0b      	ldr	r2, [pc, #44]	@ (800289c <I2C1_MspDeInit+0x3c>)
 800286e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002872:	6253      	str	r3, [r2, #36]	@ 0x24

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002874:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002878:	4809      	ldr	r0, [pc, #36]	@ (80028a0 <I2C1_MspDeInit+0x40>)
 800287a:	f003 fe1d 	bl	80064b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800287e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002882:	4807      	ldr	r0, [pc, #28]	@ (80028a0 <I2C1_MspDeInit+0x40>)
 8002884:	f003 fe18 	bl	80064b8 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002888:	201f      	movs	r0, #31
 800288a:	f003 fc1c 	bl	80060c6 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800288e:	2020      	movs	r0, #32
 8002890:	f003 fc19 	bl	80060c6 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020400 	.word	0x40020400

080028a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	e00a      	b.n	80028cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028b6:	f3af 8000 	nop.w
 80028ba:	4601      	mov	r1, r0
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	60ba      	str	r2, [r7, #8]
 80028c2:	b2ca      	uxtb	r2, r1
 80028c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	3301      	adds	r3, #1
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	dbf0      	blt.n	80028b6 <_read+0x12>
  }

  return len;
 80028d4:	687b      	ldr	r3, [r7, #4]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	e009      	b.n	8002904 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	60ba      	str	r2, [r7, #8]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fa9f 	bl	8001e3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	3301      	adds	r3, #1
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	dbf1      	blt.n	80028f0 <_write+0x12>
  }
  return len;
 800290c:	687b      	ldr	r3, [r7, #4]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <_close>:

int _close(int file)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800291e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800293c:	605a      	str	r2, [r3, #4]
  return 0;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <_isatty>:

int _isatty(int file)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002952:	2301      	movs	r3, #1
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
	...

08002978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002980:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <_sbrk+0x5c>)
 8002982:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <_sbrk+0x60>)
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800298c:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <_sbrk+0x64>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002994:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <_sbrk+0x64>)
 8002996:	4a12      	ldr	r2, [pc, #72]	@ (80029e0 <_sbrk+0x68>)
 8002998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800299a:	4b10      	ldr	r3, [pc, #64]	@ (80029dc <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d207      	bcs.n	80029b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a8:	f008 ff72 	bl	800b890 <__errno>
 80029ac:	4603      	mov	r3, r0
 80029ae:	220c      	movs	r2, #12
 80029b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
 80029b6:	e009      	b.n	80029cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b8:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <_sbrk+0x64>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029be:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <_sbrk+0x64>)
 80029c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ca:	68fb      	ldr	r3, [r7, #12]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20014000 	.word	0x20014000
 80029d8:	00000400 	.word	0x00000400
 80029dc:	200003b0 	.word	0x200003b0
 80029e0:	200005f8 	.word	0x200005f8

080029e4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80029f0:	f7ff fff8 	bl	80029e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029f4:	480b      	ldr	r0, [pc, #44]	@ (8002a24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80029f6:	490c      	ldr	r1, [pc, #48]	@ (8002a28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80029f8:	4a0c      	ldr	r2, [pc, #48]	@ (8002a2c <LoopFillZerobss+0x16>)
  movs r3, #0
 80029fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029fc:	e002      	b.n	8002a04 <LoopCopyDataInit>

080029fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a02:	3304      	adds	r3, #4

08002a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a08:	d3f9      	bcc.n	80029fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a0a:	4a09      	ldr	r2, [pc, #36]	@ (8002a30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a0c:	4c09      	ldr	r4, [pc, #36]	@ (8002a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a10:	e001      	b.n	8002a16 <LoopFillZerobss>

08002a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a14:	3204      	adds	r2, #4

08002a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a18:	d3fb      	bcc.n	8002a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a1a:	f008 ff3f 	bl	800b89c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a1e:	f7fe feb3 	bl	8001788 <main>
  bx lr
 8002a22:	4770      	bx	lr
  ldr r0, =_sdata
 8002a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a28:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8002a2c:	0800d450 	.word	0x0800d450
  ldr r2, =_sbss
 8002a30:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8002a34:	200005f8 	.word	0x200005f8

08002a38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a38:	e7fe      	b.n	8002a38 <ADC1_IRQHandler>
	...

08002a3c <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	e034      	b.n	8002abe <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	7b1a      	ldrb	r2, [r3, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	699a      	ldr	r2, [r3, #24]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ac8 <HTS221_RegisterBusIO+0x8c>)
 8002a90:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a0d      	ldr	r2, [pc, #52]	@ (8002acc <HTS221_RegisterBusIO+0x90>)
 8002a96:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4798      	blx	r3
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	e002      	b.n	8002abe <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8002abc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002abe:	68fb      	ldr	r3, [r7, #12]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	08003105 	.word	0x08003105
 8002acc:	08003167 	.word	0x08003167

08002ad0 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d108      	bne.n	8002af4 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fa9e 	bl	8003024 <HTS221_Initialize>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295
 8002af2:	e004      	b.n	8002afe <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d111      	bne.n	8002b3c <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f87e 	bl	8002c1a <HTS221_HUM_Disable>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295
 8002b28:	e00d      	b.n	8002b46 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f95f 	bl	8002dee <HTS221_TEMP_Disable>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3a:	e004      	b.n	8002b46 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3320      	adds	r3, #32
 8002b5c:	6839      	ldr	r1, [r7, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fc2a 	bl	80033b8 <hts221_device_id_get>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	e000      	b.n	8002b72 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	4a09      	ldr	r2, [pc, #36]	@ (8002bcc <HTS221_GetCapabilities+0x50>)
 8002ba8:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	4a07      	ldr	r2, [pc, #28]	@ (8002bcc <HTS221_GetCapabilities+0x50>)
 8002bae:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	41480000 	.word	0x41480000

08002bd0 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e015      	b.n	8002c12 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10b      	bne.n	8002c08 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3320      	adds	r3, #32
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fbef 	bl	80033da <hts221_power_on_set>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	e004      	b.n	8002c12 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e015      	b.n	8002c5c <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10b      	bne.n	8002c52 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3320      	adds	r3, #32
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fbca 	bl	80033da <hts221_power_on_set>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c50:	e004      	b.n	8002c5c <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002c6e:	6839      	ldr	r1, [r7, #0]
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f965 	bl	8002f40 <HTS221_GetOutputDataRate>
 8002c76:	4603      	mov	r3, r0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002c8a:	6839      	ldr	r1, [r7, #0]
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f99b 	bl	8002fc8 <HTS221_SetOutputDataRate>
 8002c92:	4603      	mov	r3, r0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3320      	adds	r3, #32
 8002caa:	f107 020c 	add.w	r2, r7, #12
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fc5e 	bl	8003572 <hts221_hum_adc_point_0_get>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	e069      	b.n	8002d96 <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f103 0220 	add.w	r2, r3, #32
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	3304      	adds	r3, #4
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	f000 fba8 	bl	8003426 <hts221_hum_rh_point_0_get>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8002cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce0:	e059      	b.n	8002d96 <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f103 0220 	add.w	r2, r3, #32
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	3308      	adds	r3, #8
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	f000 fc5f 	bl	80035b4 <hts221_hum_adc_point_1_get>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002d00:	e049      	b.n	8002d96 <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f103 0220 	add.w	r2, r3, #32
 8002d08:	f107 030c 	add.w	r3, r7, #12
 8002d0c:	330c      	adds	r3, #12
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f000 fba8 	bl	8003466 <hts221_hum_rh_point_1_get>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8002d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d20:	e039      	b.n	8002d96 <HTS221_HUM_GetHumidity+0xfa>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 8002d22:	2300      	movs	r3, #0
 8002d24:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3320      	adds	r3, #32
 8002d2a:	f107 021c 	add.w	r2, r7, #28
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fafd 	bl	8003330 <hts221_humidity_raw_get>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8002d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d40:	e029      	b.n	8002d96 <HTS221_HUM_GetHumidity+0xfa>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002d42:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd ffb8 	bl	8000cbc <__aeabi_i2f>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	f107 030c 	add.w	r3, r7, #12
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 f991 	bl	800307c <Linear_Interpolation>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe f999 	bl	80010a0 <__aeabi_fcmplt>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HTS221_HUM_GetHumidity+0xe0>
  {
    *Value = 0.0f;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4907      	ldr	r1, [pc, #28]	@ (8002da0 <HTS221_HUM_GetHumidity+0x104>)
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe f9aa 	bl	80010dc <__aeabi_fcmpgt>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <HTS221_HUM_GetHumidity+0xf8>
  {
    *Value = 100.0f;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	4a03      	ldr	r2, [pc, #12]	@ (8002da0 <HTS221_HUM_GetHumidity+0x104>)
 8002d92:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	42c80000 	.word	0x42c80000

08002da4 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e015      	b.n	8002de6 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3320      	adds	r3, #32
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fb05 	bl	80033da <hts221_power_on_set>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	e004      	b.n	8002de6 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e015      	b.n	8002e30 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10b      	bne.n	8002e26 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3320      	adds	r3, #32
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fae0 	bl	80033da <hts221_power_on_set>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295
 8002e24:	e004      	b.n	8002e30 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002e42:	6839      	ldr	r1, [r7, #0]
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f87b 	bl	8002f40 <HTS221_GetOutputDataRate>
 8002e4a:	4603      	mov	r3, r0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002e5e:	6839      	ldr	r1, [r7, #0]
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f8b1 	bl	8002fc8 <HTS221_SetOutputDataRate>
 8002e66:	4603      	mov	r3, r0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3320      	adds	r3, #32
 8002e7e:	f107 020c 	add.w	r2, r7, #12
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fbb6 	bl	80035f6 <hts221_temp_adc_point_0_get>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295
 8002e94:	e04f      	b.n	8002f36 <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f103 0220 	add.w	r2, r3, #32
 8002e9c:	f107 030c 	add.w	r3, r7, #12
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f000 fafe 	bl	80034a6 <hts221_temp_deg_point_0_get>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8002eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb4:	e03f      	b.n	8002f36 <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f103 0220 	add.w	r2, r3, #32
 8002ebc:	f107 030c 	add.w	r3, r7, #12
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f000 fbb7 	bl	8003638 <hts221_temp_adc_point_1_get>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed4:	e02f      	b.n	8002f36 <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f103 0220 	add.w	r2, r3, #32
 8002edc:	f107 030c 	add.w	r3, r7, #12
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f000 fb11 	bl	800350c <hts221_temp_deg_point_1_get>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	e01f      	b.n	8002f36 <HTS221_TEMP_GetTemperature+0xc6>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3320      	adds	r3, #32
 8002efe:	f107 021c 	add.w	r2, r7, #28
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fa35 	bl	8003374 <hts221_temperature_raw_get>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
 8002f14:	e00f      	b.n	8002f36 <HTS221_TEMP_GetTemperature+0xc6>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8002f16:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fece 	bl	8000cbc <__aeabi_i2f>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 f8a7 	bl	800307c <Linear_Interpolation>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3320      	adds	r3, #32
 8002f52:	f107 020b 	add.w	r2, r7, #11
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 f98b 	bl	8003274 <hts221_data_rate_get>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8002f64:	f04f 33ff 	mov.w	r3, #4294967295
 8002f68:	e025      	b.n	8002fb6 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8002f6a:	7afb      	ldrb	r3, [r7, #11]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d81d      	bhi.n	8002fac <HTS221_GetOutputDataRate+0x6c>
 8002f70:	a201      	add	r2, pc, #4	@ (adr r2, 8002f78 <HTS221_GetOutputDataRate+0x38>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002f89 	.word	0x08002f89
 8002f7c:	08002f93 	.word	0x08002f93
 8002f80:	08002f9d 	.word	0x08002f9d
 8002f84:	08002fa5 	.word	0x08002fa5
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
      break;
 8002f90:	e010      	b.n	8002fb4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002f98:	601a      	str	r2, [r3, #0]
      break;
 8002f9a:	e00b      	b.n	8002fb4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4a08      	ldr	r2, [pc, #32]	@ (8002fc0 <HTS221_GetOutputDataRate+0x80>)
 8002fa0:	601a      	str	r2, [r3, #0]
      break;
 8002fa2:	e007      	b.n	8002fb4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4a07      	ldr	r2, [pc, #28]	@ (8002fc4 <HTS221_GetOutputDataRate+0x84>)
 8002fa8:	601a      	str	r2, [r3, #0]
      break;
 8002faa:	e003      	b.n	8002fb4 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8002fac:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb0:	60fb      	str	r3, [r7, #12]
      break;
 8002fb2:	bf00      	nop
  }

  return ret;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40e00000 	.word	0x40e00000
 8002fc4:	41480000 	.word	0x41480000

08002fc8 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002fd2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002fd6:	6838      	ldr	r0, [r7, #0]
 8002fd8:	f7fe f86c 	bl	80010b4 <__aeabi_fcmple>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HTS221_SetOutputDataRate+0x1e>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e009      	b.n	8002ffa <HTS221_SetOutputDataRate+0x32>
 8002fe6:	490e      	ldr	r1, [pc, #56]	@ (8003020 <HTS221_SetOutputDataRate+0x58>)
 8002fe8:	6838      	ldr	r0, [r7, #0]
 8002fea:	f7fe f863 	bl	80010b4 <__aeabi_fcmple>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HTS221_SetOutputDataRate+0x30>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e000      	b.n	8002ffa <HTS221_SetOutputDataRate+0x32>
 8002ff8:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8002ffa:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3320      	adds	r3, #32
 8003000:	7bfa      	ldrb	r2, [r7, #15]
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f000 f90f 	bl	8003228 <hts221_data_rate_set>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HTS221_SetOutputDataRate+0x4e>
  {
    return HTS221_ERROR;
 8003010:	f04f 33ff 	mov.w	r3, #4294967295
 8003014:	e000      	b.n	8003018 <HTS221_SetOutputDataRate+0x50>
  }

  return HTS221_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40e00000 	.word	0x40e00000

08003024 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3320      	adds	r3, #32
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f9d1 	bl	80033da <hts221_power_on_set>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 800303e:	f04f 33ff 	mov.w	r3, #4294967295
 8003042:	e017      	b.n	8003074 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3320      	adds	r3, #32
 8003048:	2101      	movs	r1, #1
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f94a 	bl	80032e4 <hts221_block_data_update_set>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	e00b      	b.n	8003074 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800305c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff ffb1 	bl	8002fc8 <HTS221_SetOutputDataRate>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 800306c:	f04f 33ff 	mov.w	r3, #4294967295
 8003070:	e000      	b.n	8003074 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 800307c:	b5b0      	push	{r4, r5, r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4619      	mov	r1, r3
 8003090:	4610      	mov	r0, r2
 8003092:	f7fd fd5d 	bl	8000b50 <__aeabi_fsub>
 8003096:	4603      	mov	r3, r0
 8003098:	6839      	ldr	r1, [r7, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fe62 	bl	8000d64 <__aeabi_fmul>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461c      	mov	r4, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4619      	mov	r1, r3
 80030ae:	4610      	mov	r0, r2
 80030b0:	f7fd fe58 	bl	8000d64 <__aeabi_fmul>
 80030b4:	4603      	mov	r3, r0
 80030b6:	461d      	mov	r5, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4619      	mov	r1, r3
 80030c2:	4610      	mov	r0, r2
 80030c4:	f7fd fe4e 	bl	8000d64 <__aeabi_fmul>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4619      	mov	r1, r3
 80030cc:	4628      	mov	r0, r5
 80030ce:	f7fd fd3f 	bl	8000b50 <__aeabi_fsub>
 80030d2:	4603      	mov	r3, r0
 80030d4:	4619      	mov	r1, r3
 80030d6:	4620      	mov	r0, r4
 80030d8:	f7fd fd3c 	bl	8000b54 <__addsf3>
 80030dc:	4603      	mov	r3, r0
 80030de:	461c      	mov	r4, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7fd fd30 	bl	8000b50 <__aeabi_fsub>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4619      	mov	r1, r3
 80030f4:	4620      	mov	r0, r4
 80030f6:	f7fd fee9 	bl	8000ecc <__aeabi_fdiv>
 80030fa:	4603      	mov	r3, r0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bdb0      	pop	{r4, r5, r7, pc}

08003104 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	461a      	mov	r2, r3
 8003110:	460b      	mov	r3, r1
 8003112:	72fb      	strb	r3, [r7, #11]
 8003114:	4613      	mov	r3, r2
 8003116:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10e      	bne.n	8003142 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	695c      	ldr	r4, [r3, #20]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	7b1b      	ldrb	r3, [r3, #12]
 800312c:	4618      	mov	r0, r3
 800312e:	7afb      	ldrb	r3, [r7, #11]
 8003130:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003134:	b2db      	uxtb	r3, r3
 8003136:	4619      	mov	r1, r3
 8003138:	893b      	ldrh	r3, [r7, #8]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	47a0      	blx	r4
 800313e:	4603      	mov	r3, r0
 8003140:	e00d      	b.n	800315e <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	695c      	ldr	r4, [r3, #20]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	7b1b      	ldrb	r3, [r3, #12]
 800314a:	4618      	mov	r0, r3
 800314c:	7afb      	ldrb	r3, [r7, #11]
 800314e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003152:	b2db      	uxtb	r3, r3
 8003154:	4619      	mov	r1, r3
 8003156:	893b      	ldrh	r3, [r7, #8]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	47a0      	blx	r4
 800315c:	4603      	mov	r3, r0
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	bd90      	pop	{r4, r7, pc}

08003166 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003166:	b590      	push	{r4, r7, lr}
 8003168:	b087      	sub	sp, #28
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	461a      	mov	r2, r3
 8003172:	460b      	mov	r3, r1
 8003174:	72fb      	strb	r3, [r7, #11]
 8003176:	4613      	mov	r3, r2
 8003178:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10e      	bne.n	80031a4 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	691c      	ldr	r4, [r3, #16]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	7b1b      	ldrb	r3, [r3, #12]
 800318e:	4618      	mov	r0, r3
 8003190:	7afb      	ldrb	r3, [r7, #11]
 8003192:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003196:	b2db      	uxtb	r3, r3
 8003198:	4619      	mov	r1, r3
 800319a:	893b      	ldrh	r3, [r7, #8]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	47a0      	blx	r4
 80031a0:	4603      	mov	r3, r0
 80031a2:	e00d      	b.n	80031c0 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	691c      	ldr	r4, [r3, #16]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	7b1b      	ldrb	r3, [r3, #12]
 80031ac:	4618      	mov	r0, r3
 80031ae:	7afb      	ldrb	r3, [r7, #11]
 80031b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	4619      	mov	r1, r3
 80031b8:	893b      	ldrh	r3, [r7, #8]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	47a0      	blx	r4
 80031be:	4603      	mov	r3, r0
  }
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd90      	pop	{r4, r7, pc}

080031c8 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	461a      	mov	r2, r3
 80031d4:	460b      	mov	r3, r1
 80031d6:	72fb      	strb	r3, [r7, #11]
 80031d8:	4613      	mov	r3, r2
 80031da:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685c      	ldr	r4, [r3, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	68d8      	ldr	r0, [r3, #12]
 80031e4:	893b      	ldrh	r3, [r7, #8]
 80031e6:	7af9      	ldrb	r1, [r7, #11]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	47a0      	blx	r4
 80031ec:	6178      	str	r0, [r7, #20]

  return ret;
 80031ee:	697b      	ldr	r3, [r7, #20]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd90      	pop	{r4, r7, pc}

080031f8 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	461a      	mov	r2, r3
 8003204:	460b      	mov	r3, r1
 8003206:	72fb      	strb	r3, [r7, #11]
 8003208:	4613      	mov	r3, r2
 800320a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681c      	ldr	r4, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	68d8      	ldr	r0, [r3, #12]
 8003214:	893b      	ldrh	r3, [r7, #8]
 8003216:	7af9      	ldrb	r1, [r7, #11]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	47a0      	blx	r4
 800321c:	6178      	str	r0, [r7, #20]

  return ret;
 800321e:	697b      	ldr	r3, [r7, #20]
}
 8003220:	4618      	mov	r0, r3
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	bd90      	pop	{r4, r7, pc}

08003228 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003234:	f107 0208 	add.w	r2, r7, #8
 8003238:	2301      	movs	r3, #1
 800323a:	2120      	movs	r1, #32
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff ffc3 	bl	80031c8 <hts221_read_reg>
 8003242:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	b2da      	uxtb	r2, r3
 8003252:	7a3b      	ldrb	r3, [r7, #8]
 8003254:	f362 0301 	bfi	r3, r2, #0, #2
 8003258:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800325a:	f107 0208 	add.w	r2, r7, #8
 800325e:	2301      	movs	r3, #1
 8003260:	2120      	movs	r1, #32
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ffc8 	bl	80031f8 <hts221_write_reg>
 8003268:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800326a:	68fb      	ldr	r3, [r7, #12]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800327e:	f107 0208 	add.w	r2, r7, #8
 8003282:	2301      	movs	r3, #1
 8003284:	2120      	movs	r1, #32
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ff9e 	bl	80031c8 <hts221_read_reg>
 800328c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800328e:	7a3b      	ldrb	r3, [r7, #8]
 8003290:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b03      	cmp	r3, #3
 8003298:	d81a      	bhi.n	80032d0 <hts221_data_rate_get+0x5c>
 800329a:	a201      	add	r2, pc, #4	@ (adr r2, 80032a0 <hts221_data_rate_get+0x2c>)
 800329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a0:	080032b1 	.word	0x080032b1
 80032a4:	080032b9 	.word	0x080032b9
 80032a8:	080032c1 	.word	0x080032c1
 80032ac:	080032c9 	.word	0x080032c9
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
      break;
 80032b6:	e00f      	b.n	80032d8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
      break;
 80032be:	e00b      	b.n	80032d8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2202      	movs	r2, #2
 80032c4:	701a      	strb	r2, [r3, #0]
      break;
 80032c6:	e007      	b.n	80032d8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2203      	movs	r2, #3
 80032cc:	701a      	strb	r2, [r3, #0]
      break;
 80032ce:	e003      	b.n	80032d8 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2204      	movs	r2, #4
 80032d4:	701a      	strb	r2, [r3, #0]
      break;
 80032d6:	bf00      	nop
  }

  return ret;
 80032d8:	68fb      	ldr	r3, [r7, #12]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop

080032e4 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80032f0:	f107 0208 	add.w	r2, r7, #8
 80032f4:	2301      	movs	r3, #1
 80032f6:	2120      	movs	r1, #32
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff ff65 	bl	80031c8 <hts221_read_reg>
 80032fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	b2da      	uxtb	r2, r3
 800330e:	7a3b      	ldrb	r3, [r7, #8]
 8003310:	f362 0382 	bfi	r3, r2, #2, #1
 8003314:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003316:	f107 0208 	add.w	r2, r7, #8
 800331a:	2301      	movs	r3, #1
 800331c:	2120      	movs	r1, #32
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff ff6a 	bl	80031f8 <hts221_write_reg>
 8003324:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003326:	68fb      	ldr	r3, [r7, #12]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800333a:	f107 0208 	add.w	r2, r7, #8
 800333e:	2302      	movs	r3, #2
 8003340:	2128      	movs	r1, #40	@ 0x28
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ff40 	bl	80031c8 <hts221_read_reg>
 8003348:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800334a:	7a7b      	ldrb	r3, [r7, #9]
 800334c:	b21a      	sxth	r2, r3
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003358:	b29b      	uxth	r3, r3
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	b29b      	uxth	r3, r3
 800335e:	7a3a      	ldrb	r2, [r7, #8]
 8003360:	4413      	add	r3, r2
 8003362:	b29b      	uxth	r3, r3
 8003364:	b21a      	sxth	r2, r3
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	801a      	strh	r2, [r3, #0]

  return ret;
 800336a:	68fb      	ldr	r3, [r7, #12]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800337e:	f107 0208 	add.w	r2, r7, #8
 8003382:	2302      	movs	r3, #2
 8003384:	212a      	movs	r1, #42	@ 0x2a
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff ff1e 	bl	80031c8 <hts221_read_reg>
 800338c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800338e:	7a7b      	ldrb	r3, [r7, #9]
 8003390:	b21a      	sxth	r2, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800339c:	b29b      	uxth	r3, r3
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	7a3a      	ldrb	r2, [r7, #8]
 80033a4:	4413      	add	r3, r2
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	b21a      	sxth	r2, r3
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	801a      	strh	r2, [r3, #0]

  return ret;
 80033ae:	68fb      	ldr	r3, [r7, #12]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80033c2:	2301      	movs	r3, #1
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	210f      	movs	r1, #15
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff fefd 	bl	80031c8 <hts221_read_reg>
 80033ce:	60f8      	str	r0, [r7, #12]

  return ret;
 80033d0:	68fb      	ldr	r3, [r7, #12]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80033e6:	f107 0208 	add.w	r2, r7, #8
 80033ea:	2301      	movs	r3, #1
 80033ec:	2120      	movs	r1, #32
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff feea 	bl	80031c8 <hts221_read_reg>
 80033f4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10f      	bne.n	800341c <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	b2da      	uxtb	r2, r3
 8003404:	7a3b      	ldrb	r3, [r7, #8]
 8003406:	f362 13c7 	bfi	r3, r2, #7, #1
 800340a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800340c:	f107 0208 	add.w	r2, r7, #8
 8003410:	2301      	movs	r3, #1
 8003412:	2120      	movs	r1, #32
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff feef 	bl	80031f8 <hts221_write_reg>
 800341a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800341c:	68fb      	ldr	r3, [r7, #12]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003430:	f107 020b 	add.w	r2, r7, #11
 8003434:	2301      	movs	r3, #1
 8003436:	2130      	movs	r1, #48	@ 0x30
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff fec5 	bl	80031c8 <hts221_read_reg>
 800343e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003440:	7afb      	ldrb	r3, [r7, #11]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd fc3a 	bl	8000cbc <__aeabi_i2f>
 8003448:	4603      	mov	r3, r0
 800344a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd fd3c 	bl	8000ecc <__aeabi_fdiv>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	601a      	str	r2, [r3, #0]

  return ret;
 800345c:	68fb      	ldr	r3, [r7, #12]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003470:	f107 020b 	add.w	r2, r7, #11
 8003474:	2301      	movs	r3, #1
 8003476:	2131      	movs	r1, #49	@ 0x31
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff fea5 	bl	80031c8 <hts221_read_reg>
 800347e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003480:	7afb      	ldrb	r3, [r7, #11]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd fc1a 	bl	8000cbc <__aeabi_i2f>
 8003488:	4603      	mov	r3, r0
 800348a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd fd1c 	bl	8000ecc <__aeabi_fdiv>
 8003494:	4603      	mov	r3, r0
 8003496:	461a      	mov	r2, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	601a      	str	r2, [r3, #0]

  return ret;
 800349c:	68fb      	ldr	r3, [r7, #12]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80034b0:	f107 020f 	add.w	r2, r7, #15
 80034b4:	2301      	movs	r3, #1
 80034b6:	2132      	movs	r1, #50	@ 0x32
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff fe85 	bl	80031c8 <hts221_read_reg>
 80034be:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d11d      	bne.n	8003502 <hts221_temp_deg_point_0_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80034c6:	f107 0210 	add.w	r2, r7, #16
 80034ca:	2301      	movs	r3, #1
 80034cc:	2135      	movs	r1, #53	@ 0x35
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff fe7a 	bl	80031c8 <hts221_read_reg>
 80034d4:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80034d6:	7c3b      	ldrb	r3, [r7, #16]
 80034d8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	4413      	add	r3, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd fbe7 	bl	8000cbc <__aeabi_i2f>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd fce9 	bl	8000ecc <__aeabi_fdiv>
 80034fa:	4603      	mov	r3, r0
 80034fc:	461a      	mov	r2, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003502:	697b      	ldr	r3, [r7, #20]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003516:	f107 020f 	add.w	r2, r7, #15
 800351a:	2301      	movs	r3, #1
 800351c:	2133      	movs	r1, #51	@ 0x33
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fe52 	bl	80031c8 <hts221_read_reg>
 8003524:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d11d      	bne.n	8003568 <hts221_temp_deg_point_1_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800352c:	f107 0210 	add.w	r2, r7, #16
 8003530:	2301      	movs	r3, #1
 8003532:	2135      	movs	r1, #53	@ 0x35
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff fe47 	bl	80031c8 <hts221_read_reg>
 800353a:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 800353c:	7c3b      	ldrb	r3, [r7, #16]
 800353e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003542:	b2db      	uxtb	r3, r3
 8003544:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003546:	7cfb      	ldrb	r3, [r7, #19]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	4413      	add	r3, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd fbb4 	bl	8000cbc <__aeabi_i2f>
 8003554:	4603      	mov	r3, r0
 8003556:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd fcb6 	bl	8000ecc <__aeabi_fdiv>
 8003560:	4603      	mov	r3, r0
 8003562:	461a      	mov	r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003568:	697b      	ldr	r3, [r7, #20]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 800357c:	f107 0208 	add.w	r2, r7, #8
 8003580:	2302      	movs	r3, #2
 8003582:	2136      	movs	r1, #54	@ 0x36
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff fe1f 	bl	80031c8 <hts221_read_reg>
 800358a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800358c:	7a7b      	ldrb	r3, [r7, #9]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	b29b      	uxth	r3, r3
 8003592:	7a3a      	ldrb	r2, [r7, #8]
 8003594:	4413      	add	r3, r2
 8003596:	b29b      	uxth	r3, r3
 8003598:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800359a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd fb8c 	bl	8000cbc <__aeabi_i2f>
 80035a4:	4602      	mov	r2, r0
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	601a      	str	r2, [r3, #0]

  return ret;
 80035aa:	68fb      	ldr	r3, [r7, #12]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80035be:	f107 0208 	add.w	r2, r7, #8
 80035c2:	2302      	movs	r3, #2
 80035c4:	213a      	movs	r1, #58	@ 0x3a
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff fdfe 	bl	80031c8 <hts221_read_reg>
 80035cc:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80035ce:	7a7b      	ldrb	r3, [r7, #9]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	7a3a      	ldrb	r2, [r7, #8]
 80035d6:	4413      	add	r3, r2
 80035d8:	b29b      	uxth	r3, r3
 80035da:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80035dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fd fb6b 	bl	8000cbc <__aeabi_i2f>
 80035e6:	4602      	mov	r2, r0
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	601a      	str	r2, [r3, #0]

  return ret;
 80035ec:	68fb      	ldr	r3, [r7, #12]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8003600:	f107 0208 	add.w	r2, r7, #8
 8003604:	2302      	movs	r3, #2
 8003606:	213c      	movs	r1, #60	@ 0x3c
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff fddd 	bl	80031c8 <hts221_read_reg>
 800360e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003610:	7a7b      	ldrb	r3, [r7, #9]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	b29b      	uxth	r3, r3
 8003616:	7a3a      	ldrb	r2, [r7, #8]
 8003618:	4413      	add	r3, r2
 800361a:	b29b      	uxth	r3, r3
 800361c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800361e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fd fb4a 	bl	8000cbc <__aeabi_i2f>
 8003628:	4602      	mov	r2, r0
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	601a      	str	r2, [r3, #0]

  return ret;
 800362e:	68fb      	ldr	r3, [r7, #12]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8003642:	f107 0208 	add.w	r2, r7, #8
 8003646:	2302      	movs	r3, #2
 8003648:	213e      	movs	r1, #62	@ 0x3e
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fdbc 	bl	80031c8 <hts221_read_reg>
 8003650:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003652:	7a7b      	ldrb	r3, [r7, #9]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	b29b      	uxth	r3, r3
 8003658:	7a3a      	ldrb	r2, [r7, #8]
 800365a:	4413      	add	r3, r2
 800365c:	b29b      	uxth	r3, r3
 800365e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003660:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fd fb29 	bl	8000cbc <__aeabi_i2f>
 800366a:	4602      	mov	r2, r0
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	601a      	str	r2, [r3, #0]

  return ret;
 8003670:	68fb      	ldr	r3, [r7, #12]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d103      	bne.n	8003698 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8003690:	f04f 33ff 	mov.w	r3, #4294967295
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	e051      	b.n	800373c <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	7b1a      	ldrb	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	699a      	ldr	r2, [r3, #24]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003748 <LPS22HH_RegisterBusIO+0xcc>)
 80036d4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a1c      	ldr	r2, [pc, #112]	@ (800374c <LPS22HH_RegisterBusIO+0xd0>)
 80036da:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	e020      	b.n	800373c <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4798      	blx	r3
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 8003706:	f04f 33ff 	mov.w	r3, #4294967295
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	e016      	b.n	800373c <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d112      	bne.n	800373c <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003720:	2301      	movs	r3, #1
 8003722:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8003724:	7afb      	ldrb	r3, [r7, #11]
 8003726:	461a      	mov	r2, r3
 8003728:	2110      	movs	r1, #16
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f9db 	bl	8003ae6 <LPS22HH_Write_Reg>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295
 800373a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800373c:	68fb      	ldr	r3, [r7, #12]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	08003df3 	.word	0x08003df3
 800374c:	08003e29 	.word	0x08003e29

08003750 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 faf8 	bl	8003d58 <LPS22HH_Initialize>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 800376e:	f04f 33ff 	mov.w	r3, #4294967295
 8003772:	e004      	b.n	800377e <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003794:	2b01      	cmp	r3, #1
 8003796:	d111      	bne.n	80037bc <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f87d 	bl	8003898 <LPS22HH_PRESS_Disable>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 80037a4:	f04f 33ff 	mov.w	r3, #4294967295
 80037a8:	e00d      	b.n	80037c6 <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f919 	bl	80039e2 <LPS22HH_TEMP_Disable>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	e004      	b.n	80037c6 <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3320      	adds	r3, #32
 80037dc:	6839      	ldr	r1, [r7, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fcfd 	bl	80041de <lps22hh_device_id_get>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 80037ea:	f04f 33ff 	mov.w	r3, #4294967295
 80037ee:	e000      	b.n	80037f2 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2200      	movs	r2, #0
 800380a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2201      	movs	r2, #1
 8003810:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2200      	movs	r2, #0
 800381c:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2200      	movs	r2, #0
 8003822:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4a07      	ldr	r2, [pc, #28]	@ (800384c <LPS22HH_GetCapabilities+0x50>)
 8003830:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	4a05      	ldr	r2, [pc, #20]	@ (800384c <LPS22HH_GetCapabilities+0x50>)
 8003836:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr
 800384c:	43480000 	.word	0x43480000

08003850 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	e014      	b.n	8003890 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f103 0220 	add.w	r2, r3, #32
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f000 fb71 	bl	8003f5c <lps22hh_data_rate_set>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8003880:	f04f 33ff 	mov.w	r3, #4294967295
 8003884:	e004      	b.n	8003890 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e024      	b.n	80038f8 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11a      	bne.n	80038ee <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f103 0220 	add.w	r2, r3, #32
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3333      	adds	r3, #51	@ 0x33
 80038c2:	4619      	mov	r1, r3
 80038c4:	4610      	mov	r0, r2
 80038c6:	f000 fb97 	bl	8003ff8 <lps22hh_data_rate_get>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80038d0:	f04f 33ff 	mov.w	r3, #4294967295
 80038d4:	e010      	b.n	80038f8 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3320      	adds	r3, #32
 80038da:	2100      	movs	r1, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fb3d 	bl	8003f5c <lps22hh_data_rate_set>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80038e8:	f04f 33ff 	mov.w	r3, #4294967295
 80038ec:	e004      	b.n	80038f8 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800390a:	6839      	ldr	r1, [r7, #0]
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f905 	bl	8003b1c <LPS22HH_GetOutputDataRate>
 8003912:	4603      	mov	r3, r0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800392c:	2b01      	cmp	r3, #1
 800392e:	d105      	bne.n	800393c <LPS22HH_PRESS_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003930:	6839      	ldr	r1, [r7, #0]
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f956 	bl	8003be4 <LPS22HH_SetOutputDataRate_When_Enabled>
 8003938:	4603      	mov	r3, r0
 800393a:	e004      	b.n	8003946 <LPS22HH_PRESS_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800393c:	6839      	ldr	r1, [r7, #0]
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f9ba 	bl	8003cb8 <LPS22HH_SetOutputDataRate_When_Disabled>
 8003944:	4603      	mov	r3, r0
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8003958:	f107 030c 	add.w	r3, r7, #12
 800395c:	2204      	movs	r2, #4
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f007 ff47 	bl	800b7f4 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3320      	adds	r3, #32
 800396a:	f107 020c 	add.w	r2, r7, #12
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fbe9 	bl	8004148 <lps22hh_pressure_raw_get>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 800397c:	f04f 33ff 	mov.w	r3, #4294967295
 8003980:	e007      	b.n	8003992 <LPS22HH_PRESS_GetPressure+0x44>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fa9a 	bl	8003ebe <lps22hh_from_lsb_to_hpa>
 800398a:	4602      	mov	r2, r0
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	e014      	b.n	80039da <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f103 0220 	add.w	r2, r3, #32
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 facc 	bl	8003f5c <lps22hh_data_rate_set>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295
 80039ce:	e004      	b.n	80039da <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e024      	b.n	8003a42 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d11a      	bne.n	8003a38 <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f103 0220 	add.w	r2, r3, #32
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3333      	adds	r3, #51	@ 0x33
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f000 faf2 	bl	8003ff8 <lps22hh_data_rate_get>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1e:	e010      	b.n	8003a42 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3320      	adds	r3, #32
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fa98 	bl	8003f5c <lps22hh_data_rate_set>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8003a32:	f04f 33ff 	mov.w	r3, #4294967295
 8003a36:	e004      	b.n	8003a42 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8003a54:	6839      	ldr	r1, [r7, #0]
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f860 	bl	8003b1c <LPS22HH_GetOutputDataRate>
 8003a5c:	4603      	mov	r3, r0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <LPS22HH_TEMP_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003a7a:	6839      	ldr	r1, [r7, #0]
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f8b1 	bl	8003be4 <LPS22HH_SetOutputDataRate_When_Enabled>
 8003a82:	4603      	mov	r3, r0
 8003a84:	e004      	b.n	8003a90 <LPS22HH_TEMP_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003a86:	6839      	ldr	r1, [r7, #0]
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f915 	bl	8003cb8 <LPS22HH_SetOutputDataRate_When_Disabled>
 8003a8e:	4603      	mov	r3, r0
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f007 fea2 	bl	800b7f4 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3320      	adds	r3, #32
 8003ab4:	f107 020c 	add.w	r2, r7, #12
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fb6d 	bl	800419a <lps22hh_temperature_raw_get>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aca:	e008      	b.n	8003ade <LPS22HH_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8003acc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fa07 	bl	8003ee4 <lps22hh_from_lsb_to_celsius>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	70fb      	strb	r3, [r7, #3]
 8003af2:	4613      	mov	r3, r2
 8003af4:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f103 0020 	add.w	r0, r3, #32
 8003afc:	1cba      	adds	r2, r7, #2
 8003afe:	78f9      	ldrb	r1, [r7, #3]
 8003b00:	2301      	movs	r3, #1
 8003b02:	f000 f9c4 	bl	8003e8e <lps22hh_write_reg>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8003b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b10:	e000      	b.n	8003b14 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3320      	adds	r3, #32
 8003b2e:	f107 020b 	add.w	r2, r7, #11
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fa5f 	bl	8003ff8 <lps22hh_data_rate_get>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8003b40:	f04f 33ff 	mov.w	r3, #4294967295
 8003b44:	e03d      	b.n	8003bc2 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8003b46:	7afb      	ldrb	r3, [r7, #11]
 8003b48:	2b07      	cmp	r3, #7
 8003b4a:	d835      	bhi.n	8003bb8 <LPS22HH_GetOutputDataRate+0x9c>
 8003b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b54 <LPS22HH_GetOutputDataRate+0x38>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b75 	.word	0x08003b75
 8003b58:	08003b7f 	.word	0x08003b7f
 8003b5c:	08003b89 	.word	0x08003b89
 8003b60:	08003b91 	.word	0x08003b91
 8003b64:	08003b99 	.word	0x08003b99
 8003b68:	08003ba1 	.word	0x08003ba1
 8003b6c:	08003ba9 	.word	0x08003ba9
 8003b70:	08003bb1 	.word	0x08003bb1
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
      break;
 8003b7c:	e020      	b.n	8003bc0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003b84:	601a      	str	r2, [r3, #0]
      break;
 8003b86:	e01b      	b.n	8003bc0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	4a10      	ldr	r2, [pc, #64]	@ (8003bcc <LPS22HH_GetOutputDataRate+0xb0>)
 8003b8c:	601a      	str	r2, [r3, #0]
      break;
 8003b8e:	e017      	b.n	8003bc0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4a0f      	ldr	r2, [pc, #60]	@ (8003bd0 <LPS22HH_GetOutputDataRate+0xb4>)
 8003b94:	601a      	str	r2, [r3, #0]
      break;
 8003b96:	e013      	b.n	8003bc0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8003bd4 <LPS22HH_GetOutputDataRate+0xb8>)
 8003b9c:	601a      	str	r2, [r3, #0]
      break;
 8003b9e:	e00f      	b.n	8003bc0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd8 <LPS22HH_GetOutputDataRate+0xbc>)
 8003ba4:	601a      	str	r2, [r3, #0]
      break;
 8003ba6:	e00b      	b.n	8003bc0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4a0c      	ldr	r2, [pc, #48]	@ (8003bdc <LPS22HH_GetOutputDataRate+0xc0>)
 8003bac:	601a      	str	r2, [r3, #0]
      break;
 8003bae:	e007      	b.n	8003bc0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	4a0b      	ldr	r2, [pc, #44]	@ (8003be0 <LPS22HH_GetOutputDataRate+0xc4>)
 8003bb4:	601a      	str	r2, [r3, #0]
      break;
 8003bb6:	e003      	b.n	8003bc0 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8003bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbc:	60fb      	str	r3, [r7, #12]
      break;
 8003bbe:	bf00      	nop
  }

  return ret;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	41200000 	.word	0x41200000
 8003bd0:	41c80000 	.word	0x41c80000
 8003bd4:	42480000 	.word	0x42480000
 8003bd8:	42960000 	.word	0x42960000
 8003bdc:	42c80000 	.word	0x42c80000
 8003be0:	43480000 	.word	0x43480000

08003be4 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8003bee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003bf2:	6838      	ldr	r0, [r7, #0]
 8003bf4:	f7fd fa5e 	bl	80010b4 <__aeabi_fcmple>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <LPS22HH_SetOutputDataRate_When_Enabled+0x1e>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e02d      	b.n	8003c5e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003c02:	4928      	ldr	r1, [pc, #160]	@ (8003ca4 <LPS22HH_SetOutputDataRate_When_Enabled+0xc0>)
 8003c04:	6838      	ldr	r0, [r7, #0]
 8003c06:	f7fd fa55 	bl	80010b4 <__aeabi_fcmple>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <LPS22HH_SetOutputDataRate_When_Enabled+0x30>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e024      	b.n	8003c5e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003c14:	4924      	ldr	r1, [pc, #144]	@ (8003ca8 <LPS22HH_SetOutputDataRate_When_Enabled+0xc4>)
 8003c16:	6838      	ldr	r0, [r7, #0]
 8003c18:	f7fd fa4c 	bl	80010b4 <__aeabi_fcmple>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <LPS22HH_SetOutputDataRate_When_Enabled+0x42>
 8003c22:	2303      	movs	r3, #3
 8003c24:	e01b      	b.n	8003c5e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003c26:	4921      	ldr	r1, [pc, #132]	@ (8003cac <LPS22HH_SetOutputDataRate_When_Enabled+0xc8>)
 8003c28:	6838      	ldr	r0, [r7, #0]
 8003c2a:	f7fd fa43 	bl	80010b4 <__aeabi_fcmple>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <LPS22HH_SetOutputDataRate_When_Enabled+0x54>
 8003c34:	2304      	movs	r3, #4
 8003c36:	e012      	b.n	8003c5e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003c38:	491d      	ldr	r1, [pc, #116]	@ (8003cb0 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>)
 8003c3a:	6838      	ldr	r0, [r7, #0]
 8003c3c:	f7fd fa3a 	bl	80010b4 <__aeabi_fcmple>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <LPS22HH_SetOutputDataRate_When_Enabled+0x66>
 8003c46:	2305      	movs	r3, #5
 8003c48:	e009      	b.n	8003c5e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003c4a:	491a      	ldr	r1, [pc, #104]	@ (8003cb4 <LPS22HH_SetOutputDataRate_When_Enabled+0xd0>)
 8003c4c:	6838      	ldr	r0, [r7, #0]
 8003c4e:	f7fd fa31 	bl	80010b4 <__aeabi_fcmple>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <LPS22HH_SetOutputDataRate_When_Enabled+0x78>
 8003c58:	2306      	movs	r3, #6
 8003c5a:	e000      	b.n	8003c5e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003c5c:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8003c5e:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3320      	adds	r3, #32
 8003c64:	7bfa      	ldrb	r2, [r7, #15]
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 f977 	bl	8003f5c <lps22hh_data_rate_set>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <LPS22HH_SetOutputDataRate_When_Enabled+0x96>
  {
    return LPS22HH_ERROR;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	e00f      	b.n	8003c9a <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f103 0220 	add.w	r2, r3, #32
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3333      	adds	r3, #51	@ 0x33
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f000 f9b6 	bl	8003ff8 <lps22hh_data_rate_get>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <LPS22HH_SetOutputDataRate_When_Enabled+0xb4>
  {
    return LPS22HH_ERROR;
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295
 8003c96:	e000      	b.n	8003c9a <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  return LPS22HH_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	41200000 	.word	0x41200000
 8003ca8:	41c80000 	.word	0x41c80000
 8003cac:	42480000 	.word	0x42480000
 8003cb0:	42960000 	.word	0x42960000
 8003cb4:	42c80000 	.word	0x42c80000

08003cb8 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8003cc2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003cc6:	6838      	ldr	r0, [r7, #0]
 8003cc8:	f7fd f9f4 	bl	80010b4 <__aeabi_fcmple>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <LPS22HH_SetOutputDataRate_When_Disabled+0x1e>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e02d      	b.n	8003d32 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8003cd6:	491b      	ldr	r1, [pc, #108]	@ (8003d44 <LPS22HH_SetOutputDataRate_When_Disabled+0x8c>)
 8003cd8:	6838      	ldr	r0, [r7, #0]
 8003cda:	f7fd f9eb 	bl	80010b4 <__aeabi_fcmple>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <LPS22HH_SetOutputDataRate_When_Disabled+0x30>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e024      	b.n	8003d32 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8003ce8:	4917      	ldr	r1, [pc, #92]	@ (8003d48 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>)
 8003cea:	6838      	ldr	r0, [r7, #0]
 8003cec:	f7fd f9e2 	bl	80010b4 <__aeabi_fcmple>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <LPS22HH_SetOutputDataRate_When_Disabled+0x42>
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e01b      	b.n	8003d32 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8003cfa:	4914      	ldr	r1, [pc, #80]	@ (8003d4c <LPS22HH_SetOutputDataRate_When_Disabled+0x94>)
 8003cfc:	6838      	ldr	r0, [r7, #0]
 8003cfe:	f7fd f9d9 	bl	80010b4 <__aeabi_fcmple>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <LPS22HH_SetOutputDataRate_When_Disabled+0x54>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	e012      	b.n	8003d32 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8003d0c:	4910      	ldr	r1, [pc, #64]	@ (8003d50 <LPS22HH_SetOutputDataRate_When_Disabled+0x98>)
 8003d0e:	6838      	ldr	r0, [r7, #0]
 8003d10:	f7fd f9d0 	bl	80010b4 <__aeabi_fcmple>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <LPS22HH_SetOutputDataRate_When_Disabled+0x66>
 8003d1a:	2305      	movs	r3, #5
 8003d1c:	e009      	b.n	8003d32 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8003d1e:	490d      	ldr	r1, [pc, #52]	@ (8003d54 <LPS22HH_SetOutputDataRate_When_Disabled+0x9c>)
 8003d20:	6838      	ldr	r0, [r7, #0]
 8003d22:	f7fd f9c7 	bl	80010b4 <__aeabi_fcmple>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <LPS22HH_SetOutputDataRate_When_Disabled+0x78>
 8003d2c:	2306      	movs	r3, #6
 8003d2e:	e000      	b.n	8003d32 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8003d30:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	41200000 	.word	0x41200000
 8003d48:	41c80000 	.word	0x41c80000
 8003d4c:	42480000 	.word	0x42480000
 8003d50:	42960000 	.word	0x42960000
 8003d54:	42c80000 	.word	0x42c80000

08003d58 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d00b      	beq.n	8003d80 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3320      	adds	r3, #32
 8003d6c:	2111      	movs	r1, #17
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fa92 	bl	8004298 <lps22hh_i3c_interface_set>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 8003d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7e:	e034      	b.n	8003dea <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3320      	adds	r3, #32
 8003d84:	2110      	movs	r1, #16
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f8e8 	bl	8003f5c <lps22hh_data_rate_set>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295
 8003d96:	e028      	b.n	8003dea <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3320      	adds	r3, #32
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fa54 	bl	800424c <lps22hh_lp_bandwidth_set>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dae:	e01c      	b.n	8003dea <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3320      	adds	r3, #32
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f8aa 	bl	8003f10 <lps22hh_block_data_update_set>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc6:	e010      	b.n	8003dea <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3320      	adds	r3, #32
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fa16 	bl	8004200 <lps22hh_auto_increment_set>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
 8003dde:	e004      	b.n	8003dea <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2203      	movs	r2, #3
 8003de4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22HH_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003df2:	b590      	push	{r4, r7, lr}
 8003df4:	b087      	sub	sp, #28
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	460b      	mov	r3, r1
 8003e00:	72fb      	strb	r3, [r7, #11]
 8003e02:	4613      	mov	r3, r2
 8003e04:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	695c      	ldr	r4, [r3, #20]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	7b1b      	ldrb	r3, [r3, #12]
 8003e12:	4618      	mov	r0, r3
 8003e14:	7afb      	ldrb	r3, [r7, #11]
 8003e16:	b299      	uxth	r1, r3
 8003e18:	893b      	ldrh	r3, [r7, #8]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	47a0      	blx	r4
 8003e1e:	4603      	mov	r3, r0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd90      	pop	{r4, r7, pc}

08003e28 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	461a      	mov	r2, r3
 8003e34:	460b      	mov	r3, r1
 8003e36:	72fb      	strb	r3, [r7, #11]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	691c      	ldr	r4, [r3, #16]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	7b1b      	ldrb	r3, [r3, #12]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	7afb      	ldrb	r3, [r7, #11]
 8003e4c:	b299      	uxth	r1, r3
 8003e4e:	893b      	ldrh	r3, [r7, #8]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	47a0      	blx	r4
 8003e54:	4603      	mov	r3, r0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd90      	pop	{r4, r7, pc}

08003e5e <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003e5e:	b590      	push	{r4, r7, lr}
 8003e60:	b087      	sub	sp, #28
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	72fb      	strb	r3, [r7, #11]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685c      	ldr	r4, [r3, #4]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	68d8      	ldr	r0, [r3, #12]
 8003e7a:	893b      	ldrh	r3, [r7, #8]
 8003e7c:	7af9      	ldrb	r1, [r7, #11]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	47a0      	blx	r4
 8003e82:	6178      	str	r0, [r7, #20]

  return ret;
 8003e84:	697b      	ldr	r3, [r7, #20]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd90      	pop	{r4, r7, pc}

08003e8e <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8003e8e:	b590      	push	{r4, r7, lr}
 8003e90:	b087      	sub	sp, #28
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	72fb      	strb	r3, [r7, #11]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681c      	ldr	r4, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	68d8      	ldr	r0, [r3, #12]
 8003eaa:	893b      	ldrh	r3, [r7, #8]
 8003eac:	7af9      	ldrb	r1, [r7, #11]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	47a0      	blx	r4
 8003eb2:	6178      	str	r0, [r7, #20]

  return ret;
 8003eb4:	697b      	ldr	r3, [r7, #20]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd90      	pop	{r4, r7, pc}

08003ebe <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fc fef4 	bl	8000cb4 <__aeabi_ui2f>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fc fffa 	bl	8000ecc <__aeabi_fdiv>
 8003ed8:	4603      	mov	r3, r0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8003eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fc fee2 	bl	8000cbc <__aeabi_i2f>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	4904      	ldr	r1, [pc, #16]	@ (8003f0c <lps22hh_from_lsb_to_celsius+0x28>)
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fc ffe5 	bl	8000ecc <__aeabi_fdiv>
 8003f02:	4603      	mov	r3, r0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	42c80000 	.word	0x42c80000

08003f10 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003f1c:	f107 0208 	add.w	r2, r7, #8
 8003f20:	2301      	movs	r3, #1
 8003f22:	2110      	movs	r1, #16
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff9a 	bl	8003e5e <lps22hh_read_reg>
 8003f2a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10f      	bne.n	8003f52 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	7a3b      	ldrb	r3, [r7, #8]
 8003f3c:	f362 0341 	bfi	r3, r2, #1, #1
 8003f40:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003f42:	f107 0208 	add.w	r2, r7, #8
 8003f46:	2301      	movs	r3, #1
 8003f48:	2110      	movs	r1, #16
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ff9f 	bl	8003e8e <lps22hh_write_reg>
 8003f50:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f52:	68fb      	ldr	r3, [r7, #12]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003f68:	f107 0210 	add.w	r2, r7, #16
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	2110      	movs	r1, #16
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff ff74 	bl	8003e5e <lps22hh_read_reg>
 8003f76:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d107      	bne.n	8003f8e <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003f7e:	f107 020c 	add.w	r2, r7, #12
 8003f82:	2301      	movs	r3, #1
 8003f84:	2111      	movs	r1, #17
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff ff69 	bl	8003e5e <lps22hh_read_reg>
 8003f8c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10f      	bne.n	8003fb4 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	7c3b      	ldrb	r3, [r7, #16]
 8003f9e:	f362 1306 	bfi	r3, r2, #4, #3
 8003fa2:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003fa4:	f107 0210 	add.w	r2, r7, #16
 8003fa8:	2301      	movs	r3, #1
 8003faa:	2110      	movs	r1, #16
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff ff6e 	bl	8003e8e <lps22hh_write_reg>
 8003fb2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d119      	bne.n	8003fee <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	7b3b      	ldrb	r3, [r7, #12]
 8003fc6:	f362 0341 	bfi	r3, r2, #1, #1
 8003fca:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	08db      	lsrs	r3, r3, #3
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	7b3b      	ldrb	r3, [r7, #12]
 8003fd8:	f362 0300 	bfi	r3, r2, #0, #1
 8003fdc:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003fde:	f107 020c 	add.w	r2, r7, #12
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	2111      	movs	r1, #17
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff ff51 	bl	8003e8e <lps22hh_write_reg>
 8003fec:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003fee:	697b      	ldr	r3, [r7, #20]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004002:	f107 0210 	add.w	r2, r7, #16
 8004006:	2301      	movs	r3, #1
 8004008:	2110      	movs	r1, #16
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff ff27 	bl	8003e5e <lps22hh_read_reg>
 8004010:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004018:	f107 020c 	add.w	r2, r7, #12
 800401c:	2301      	movs	r3, #1
 800401e:	2111      	movs	r1, #17
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff1c 	bl	8003e5e <lps22hh_read_reg>
 8004026:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f040 8086 	bne.w	800413c <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004030:	f107 020c 	add.w	r2, r7, #12
 8004034:	2301      	movs	r3, #1
 8004036:	2111      	movs	r1, #17
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ff10 	bl	8003e5e <lps22hh_read_reg>
 800403e:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004040:	7b3b      	ldrb	r3, [r7, #12]
 8004042:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004046:	b2db      	uxtb	r3, r3
 8004048:	011a      	lsls	r2, r3, #4
 800404a:	7b3b      	ldrb	r3, [r7, #12]
 800404c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004050:	b2db      	uxtb	r3, r3
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8004056:	7c3a      	ldrb	r2, [r7, #16]
 8004058:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800405c:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800405e:	4413      	add	r3, r2
 8004060:	2b15      	cmp	r3, #21
 8004062:	d867      	bhi.n	8004134 <lps22hh_data_rate_get+0x13c>
 8004064:	a201      	add	r2, pc, #4	@ (adr r2, 800406c <lps22hh_data_rate_get+0x74>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	080040c5 	.word	0x080040c5
 8004070:	080040d5 	.word	0x080040d5
 8004074:	080040dd 	.word	0x080040dd
 8004078:	080040e5 	.word	0x080040e5
 800407c:	080040ed 	.word	0x080040ed
 8004080:	080040f5 	.word	0x080040f5
 8004084:	08004125 	.word	0x08004125
 8004088:	0800412d 	.word	0x0800412d
 800408c:	080040cd 	.word	0x080040cd
 8004090:	08004135 	.word	0x08004135
 8004094:	08004135 	.word	0x08004135
 8004098:	08004135 	.word	0x08004135
 800409c:	08004135 	.word	0x08004135
 80040a0:	08004135 	.word	0x08004135
 80040a4:	08004135 	.word	0x08004135
 80040a8:	08004135 	.word	0x08004135
 80040ac:	08004135 	.word	0x08004135
 80040b0:	080040fd 	.word	0x080040fd
 80040b4:	08004105 	.word	0x08004105
 80040b8:	0800410d 	.word	0x0800410d
 80040bc:	08004115 	.word	0x08004115
 80040c0:	0800411d 	.word	0x0800411d
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
        break;
 80040ca:	e037      	b.n	800413c <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2208      	movs	r2, #8
 80040d0:	701a      	strb	r2, [r3, #0]
        break;
 80040d2:	e033      	b.n	800413c <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2201      	movs	r2, #1
 80040d8:	701a      	strb	r2, [r3, #0]
        break;
 80040da:	e02f      	b.n	800413c <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2202      	movs	r2, #2
 80040e0:	701a      	strb	r2, [r3, #0]
        break;
 80040e2:	e02b      	b.n	800413c <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2203      	movs	r2, #3
 80040e8:	701a      	strb	r2, [r3, #0]
        break;
 80040ea:	e027      	b.n	800413c <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2204      	movs	r2, #4
 80040f0:	701a      	strb	r2, [r3, #0]
        break;
 80040f2:	e023      	b.n	800413c <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2205      	movs	r2, #5
 80040f8:	701a      	strb	r2, [r3, #0]
        break;
 80040fa:	e01f      	b.n	800413c <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2211      	movs	r2, #17
 8004100:	701a      	strb	r2, [r3, #0]
        break;
 8004102:	e01b      	b.n	800413c <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2212      	movs	r2, #18
 8004108:	701a      	strb	r2, [r3, #0]
        break;
 800410a:	e017      	b.n	800413c <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2213      	movs	r2, #19
 8004110:	701a      	strb	r2, [r3, #0]
        break;
 8004112:	e013      	b.n	800413c <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2214      	movs	r2, #20
 8004118:	701a      	strb	r2, [r3, #0]
        break;
 800411a:	e00f      	b.n	800413c <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2215      	movs	r2, #21
 8004120:	701a      	strb	r2, [r3, #0]
        break;
 8004122:	e00b      	b.n	800413c <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2206      	movs	r2, #6
 8004128:	701a      	strb	r2, [r3, #0]
        break;
 800412a:	e007      	b.n	800413c <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2207      	movs	r2, #7
 8004130:	701a      	strb	r2, [r3, #0]
        break;
 8004132:	e003      	b.n	800413c <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]
        break;
 800413a:	bf00      	nop
    }
  }

  return ret;
 800413c:	697b      	ldr	r3, [r7, #20]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop

08004148 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8004152:	f107 0208 	add.w	r2, r7, #8
 8004156:	2303      	movs	r3, #3
 8004158:	2128      	movs	r1, #40	@ 0x28
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff fe7f 	bl	8003e5e <lps22hh_read_reg>
 8004160:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004162:	7abb      	ldrb	r3, [r7, #10]
 8004164:	461a      	mov	r2, r3
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	7a7a      	ldrb	r2, [r7, #9]
 8004172:	441a      	add	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	7a3a      	ldrb	r2, [r7, #8]
 8004180:	441a      	add	r2, r3
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	021a      	lsls	r2, r3, #8
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	601a      	str	r2, [r3, #0]

  return ret;
 8004190:	68fb      	ldr	r3, [r7, #12]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80041a4:	f107 0208 	add.w	r2, r7, #8
 80041a8:	2302      	movs	r3, #2
 80041aa:	212b      	movs	r1, #43	@ 0x2b
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff fe56 	bl	8003e5e <lps22hh_read_reg>
 80041b2:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80041b4:	7a7b      	ldrb	r3, [r7, #9]
 80041b6:	b21a      	sxth	r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	7a3a      	ldrb	r2, [r7, #8]
 80041ca:	4413      	add	r3, r2
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	b21a      	sxth	r2, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	801a      	strh	r2, [r3, #0]

  return ret;
 80041d4:	68fb      	ldr	r3, [r7, #12]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80041e8:	2301      	movs	r3, #1
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	210f      	movs	r1, #15
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff fe35 	bl	8003e5e <lps22hh_read_reg>
 80041f4:	60f8      	str	r0, [r7, #12]

  return ret;
 80041f6:	68fb      	ldr	r3, [r7, #12]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800420c:	f107 0208 	add.w	r2, r7, #8
 8004210:	2301      	movs	r3, #1
 8004212:	2111      	movs	r1, #17
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff fe22 	bl	8003e5e <lps22hh_read_reg>
 800421a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10f      	bne.n	8004242 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	b2da      	uxtb	r2, r3
 800422a:	7a3b      	ldrb	r3, [r7, #8]
 800422c:	f362 1304 	bfi	r3, r2, #4, #1
 8004230:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004232:	f107 0208 	add.w	r2, r7, #8
 8004236:	2301      	movs	r3, #1
 8004238:	2111      	movs	r1, #17
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fe27 	bl	8003e8e <lps22hh_write_reg>
 8004240:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004242:	68fb      	ldr	r3, [r7, #12]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004258:	f107 0208 	add.w	r2, r7, #8
 800425c:	2301      	movs	r3, #1
 800425e:	2110      	movs	r1, #16
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff fdfc 	bl	8003e5e <lps22hh_read_reg>
 8004266:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10f      	bne.n	800428e <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	b2da      	uxtb	r2, r3
 8004276:	7a3b      	ldrb	r3, [r7, #8]
 8004278:	f362 0383 	bfi	r3, r2, #2, #2
 800427c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800427e:	f107 0208 	add.w	r2, r7, #8
 8004282:	2301      	movs	r3, #1
 8004284:	2110      	movs	r1, #16
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff fe01 	bl	8003e8e <lps22hh_write_reg>
 800428c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800428e:	68fb      	ldr	r3, [r7, #12]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80042a4:	f107 0208 	add.w	r2, r7, #8
 80042a8:	2301      	movs	r3, #1
 80042aa:	210e      	movs	r1, #14
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff fdd6 	bl	8003e5e <lps22hh_read_reg>
 80042b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d118      	bne.n	80042ec <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 80042ba:	78fb      	ldrb	r3, [r7, #3]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	7a3b      	ldrb	r3, [r7, #8]
 80042c4:	f362 0341 	bfi	r3, r2, #1, #1
 80042c8:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	7a3b      	ldrb	r3, [r7, #8]
 80042d6:	f362 13c7 	bfi	r3, r2, #7, #1
 80042da:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80042dc:	f107 0208 	add.w	r2, r7, #8
 80042e0:	2301      	movs	r3, #1
 80042e2:	210e      	movs	r1, #14
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff fdd2 	bl	8003e8e <lps22hh_write_reg>
 80042ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042ec:	68fb      	ldr	r3, [r7, #12]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d103      	bne.n	8004310 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	e034      	b.n	800437a <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	7b1a      	ldrb	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a0e      	ldr	r2, [pc, #56]	@ (8004384 <STTS751_RegisterBusIO+0x8c>)
 800434c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a0d      	ldr	r2, [pc, #52]	@ (8004388 <STTS751_RegisterBusIO+0x90>)
 8004352:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d004      	beq.n	8004374 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4798      	blx	r3
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	e002      	b.n	800437a <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 8004374:	f04f 33ff 	mov.w	r3, #4294967295
 8004378:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800437a:	68fb      	ldr	r3, [r7, #12]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	080047f1 	.word	0x080047f1
 8004388:	0800485f 	.word	0x0800485f

0800438c <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800439a:	2b00      	cmp	r3, #0
 800439c:	d127      	bne.n	80043ee <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3320      	adds	r3, #32
 80043a2:	2101      	movs	r1, #1
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fc39 	bl	8004c1c <stts751_pin_event_route_set>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 80043b0:	f04f 33ff 	mov.w	r3, #4294967295
 80043b4:	e020      	b.n	80043f8 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3320      	adds	r3, #32
 80043c2:	2103      	movs	r1, #3
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fb9d 	bl	8004b04 <stts751_resolution_set>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 80043d0:	f04f 33ff 	mov.w	r3, #4294967295
 80043d4:	e010      	b.n	80043f8 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3320      	adds	r3, #32
 80043da:	2180      	movs	r1, #128	@ 0x80
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 faba 	bl	8004956 <stts751_temp_data_rate_set>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 80043e8:	f04f 33ff 	mov.w	r3, #4294967295
 80043ec:	e004      	b.n	80043f8 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800440e:	2b01      	cmp	r3, #1
 8004410:	d108      	bne.n	8004424 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f874 	bl	8004500 <STTS751_TEMP_Disable>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 800441e:	f04f 33ff 	mov.w	r3, #4294967295
 8004422:	e004      	b.n	800442e <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3320      	adds	r3, #32
 8004444:	f107 020c 	add.w	r2, r7, #12
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fc0c 	bl	8004c68 <stts751_device_id_get>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 8004456:	f04f 33ff 	mov.w	r3, #4294967295
 800445a:	e003      	b.n	8004464 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 800445c:	7b7a      	ldrb	r2, [r7, #13]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2200      	movs	r2, #0
 800447a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2200      	movs	r2, #0
 8004480:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2201      	movs	r2, #1
 8004486:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2200      	movs	r2, #0
 800448c:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2200      	movs	r2, #0
 8004492:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 80044a2:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr

080044c0 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	e010      	b.n	80044f8 <STTS751_TEMP_Enable+0x38>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044da:	4619      	mov	r1, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8b5 	bl	800464c <STTS751_TEMP_SetOutputDataRate>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <STTS751_TEMP_Enable+0x2e>
  {
    return STTS751_ERROR;
 80044e8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ec:	e004      	b.n	80044f8 <STTS751_TEMP_Enable+0x38>
  }

  pObj->temp_is_enabled = 1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e01c      	b.n	8004550 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3334      	adds	r3, #52	@ 0x34
 800451a:	4619      	mov	r1, r3
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f81b 	bl	8004558 <STTS751_TEMP_GetOutputDataRate>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8004528:	f04f 33ff 	mov.w	r3, #4294967295
 800452c:	e010      	b.n	8004550 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3320      	adds	r3, #32
 8004532:	2180      	movs	r1, #128	@ 0x80
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fa0e 	bl	8004956 <stts751_temp_data_rate_set>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8004540:	f04f 33ff 	mov.w	r3, #4294967295
 8004544:	e004      	b.n	8004550 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3320      	adds	r3, #32
 800456a:	f107 020b 	add.w	r2, r7, #11
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fa47 	bl	8004a04 <stts751_temp_data_rate_get>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 800457c:	f04f 33ff 	mov.w	r3, #4294967295
 8004580:	e060      	b.n	8004644 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 8004582:	7afb      	ldrb	r3, [r7, #11]
 8004584:	2b90      	cmp	r3, #144	@ 0x90
 8004586:	d021      	beq.n	80045cc <STTS751_TEMP_GetOutputDataRate+0x74>
 8004588:	2b90      	cmp	r3, #144	@ 0x90
 800458a:	dc56      	bgt.n	800463a <STTS751_TEMP_GetOutputDataRate+0xe2>
 800458c:	2b09      	cmp	r3, #9
 800458e:	dc1b      	bgt.n	80045c8 <STTS751_TEMP_GetOutputDataRate+0x70>
 8004590:	2b00      	cmp	r3, #0
 8004592:	db52      	blt.n	800463a <STTS751_TEMP_GetOutputDataRate+0xe2>
 8004594:	2b09      	cmp	r3, #9
 8004596:	d850      	bhi.n	800463a <STTS751_TEMP_GetOutputDataRate+0xe2>
 8004598:	a201      	add	r2, pc, #4	@ (adr r2, 80045a0 <STTS751_TEMP_GetOutputDataRate+0x48>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045d7 	.word	0x080045d7
 80045a4:	080045e1 	.word	0x080045e1
 80045a8:	080045eb 	.word	0x080045eb
 80045ac:	080045f5 	.word	0x080045f5
 80045b0:	080045ff 	.word	0x080045ff
 80045b4:	08004609 	.word	0x08004609
 80045b8:	08004613 	.word	0x08004613
 80045bc:	0800461d 	.word	0x0800461d
 80045c0:	08004627 	.word	0x08004627
 80045c4:	08004631 	.word	0x08004631
 80045c8:	2b80      	cmp	r3, #128	@ 0x80
 80045ca:	d136      	bne.n	800463a <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
      break;
 80045d4:	e035      	b.n	8004642 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	f04f 5276 	mov.w	r2, #1031798784	@ 0x3d800000
 80045dc:	601a      	str	r2, [r3, #0]
      break;
 80045de:	e030      	b.n	8004642 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 80045e6:	601a      	str	r2, [r3, #0]
      break;
 80045e8:	e02b      	b.n	8004642 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 80045f0:	601a      	str	r2, [r3, #0]
      break;
 80045f2:	e026      	b.n	8004642 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80045fa:	601a      	str	r2, [r3, #0]
      break;
 80045fc:	e021      	b.n	8004642 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004604:	601a      	str	r2, [r3, #0]
      break;
 8004606:	e01c      	b.n	8004642 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800460e:	601a      	str	r2, [r3, #0]
      break;
 8004610:	e017      	b.n	8004642 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8004618:	601a      	str	r2, [r3, #0]
      break;
 800461a:	e012      	b.n	8004642 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004622:	601a      	str	r2, [r3, #0]
      break;
 8004624:	e00d      	b.n	8004642 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 800462c:	601a      	str	r2, [r3, #0]
      break;
 800462e:	e008      	b.n	8004642 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 8004636:	601a      	str	r2, [r3, #0]
      break;
 8004638:	e003      	b.n	8004642 <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 800463a:	f04f 33ff 	mov.w	r3, #4294967295
 800463e:	60fb      	str	r3, [r7, #12]
      break;
 8004640:	bf00      	nop
  }

  return ret;
 8004642:	68fb      	ldr	r3, [r7, #12]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3320      	adds	r3, #32
 800465a:	f107 020e 	add.w	r2, r7, #14
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fa75 	bl	8004b50 <stts751_resolution_get>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <STTS751_TEMP_SetOutputDataRate+0x26>
  {
    return STTS751_ERROR;
 800466c:	f04f 33ff 	mov.w	r3, #4294967295
 8004670:	e09a      	b.n	80047a8 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8004672:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8004676:	6838      	ldr	r0, [r7, #0]
 8004678:	f7fc fd08 	bl	800108c <__aeabi_fcmpeq>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00e      	beq.n	80046a0 <STTS751_TEMP_SetOutputDataRate+0x54>
 8004682:	7bbb      	ldrb	r3, [r7, #14]
 8004684:	2b03      	cmp	r3, #3
 8004686:	d10b      	bne.n	80046a0 <STTS751_TEMP_SetOutputDataRate+0x54>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3320      	adds	r3, #32
 800468c:	2101      	movs	r1, #1
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fa38 	bl	8004b04 <stts751_resolution_set>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <STTS751_TEMP_SetOutputDataRate+0x54>
    {
      return STTS751_ERROR;
 800469a:	f04f 33ff 	mov.w	r3, #4294967295
 800469e:	e083      	b.n	80047a8 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 80046a0:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 80046a4:	6838      	ldr	r0, [r7, #0]
 80046a6:	f7fc fcf1 	bl	800108c <__aeabi_fcmpeq>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d011      	beq.n	80046d4 <STTS751_TEMP_SetOutputDataRate+0x88>
 80046b0:	7bbb      	ldrb	r3, [r7, #14]
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d002      	beq.n	80046bc <STTS751_TEMP_SetOutputDataRate+0x70>
 80046b6:	7bbb      	ldrb	r3, [r7, #14]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d10b      	bne.n	80046d4 <STTS751_TEMP_SetOutputDataRate+0x88>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3320      	adds	r3, #32
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fa1e 	bl	8004b04 <stts751_resolution_set>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <STTS751_TEMP_SetOutputDataRate+0x88>
    {
      return STTS751_ERROR;
 80046ce:	f04f 33ff 	mov.w	r3, #4294967295
 80046d2:	e069      	b.n	80047a8 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 80046d4:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 80046d8:	6838      	ldr	r0, [r7, #0]
 80046da:	f7fc fceb 	bl	80010b4 <__aeabi_fcmple>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <STTS751_TEMP_SetOutputDataRate+0x9c>
 80046e4:	2300      	movs	r3, #0
 80046e6:	e050      	b.n	800478a <STTS751_TEMP_SetOutputDataRate+0x13e>
 80046e8:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80046ec:	6838      	ldr	r0, [r7, #0]
 80046ee:	f7fc fce1 	bl	80010b4 <__aeabi_fcmple>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <STTS751_TEMP_SetOutputDataRate+0xb0>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e046      	b.n	800478a <STTS751_TEMP_SetOutputDataRate+0x13e>
 80046fc:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8004700:	6838      	ldr	r0, [r7, #0]
 8004702:	f7fc fcd7 	bl	80010b4 <__aeabi_fcmple>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <STTS751_TEMP_SetOutputDataRate+0xc4>
 800470c:	2302      	movs	r3, #2
 800470e:	e03c      	b.n	800478a <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004710:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004714:	6838      	ldr	r0, [r7, #0]
 8004716:	f7fc fccd 	bl	80010b4 <__aeabi_fcmple>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <STTS751_TEMP_SetOutputDataRate+0xd8>
 8004720:	2303      	movs	r3, #3
 8004722:	e032      	b.n	800478a <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004724:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004728:	6838      	ldr	r0, [r7, #0]
 800472a:	f7fc fcc3 	bl	80010b4 <__aeabi_fcmple>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <STTS751_TEMP_SetOutputDataRate+0xec>
 8004734:	2304      	movs	r3, #4
 8004736:	e028      	b.n	800478a <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004738:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800473c:	6838      	ldr	r0, [r7, #0]
 800473e:	f7fc fcb9 	bl	80010b4 <__aeabi_fcmple>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <STTS751_TEMP_SetOutputDataRate+0x100>
 8004748:	2305      	movs	r3, #5
 800474a:	e01e      	b.n	800478a <STTS751_TEMP_SetOutputDataRate+0x13e>
 800474c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8004750:	6838      	ldr	r0, [r7, #0]
 8004752:	f7fc fcaf 	bl	80010b4 <__aeabi_fcmple>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <STTS751_TEMP_SetOutputDataRate+0x114>
 800475c:	2306      	movs	r3, #6
 800475e:	e014      	b.n	800478a <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004760:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8004764:	6838      	ldr	r0, [r7, #0]
 8004766:	f7fc fca5 	bl	80010b4 <__aeabi_fcmple>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <STTS751_TEMP_SetOutputDataRate+0x128>
 8004770:	2307      	movs	r3, #7
 8004772:	e00a      	b.n	800478a <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004774:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8004778:	6838      	ldr	r0, [r7, #0]
 800477a:	f7fc fc9b 	bl	80010b4 <__aeabi_fcmple>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <STTS751_TEMP_SetOutputDataRate+0x13c>
 8004784:	2308      	movs	r3, #8
 8004786:	e000      	b.n	800478a <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004788:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 800478a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3320      	adds	r3, #32
 8004790:	7bfa      	ldrb	r2, [r7, #15]
 8004792:	4611      	mov	r1, r2
 8004794:	4618      	mov	r0, r3
 8004796:	f000 f8de 	bl	8004956 <stts751_temp_data_rate_set>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <STTS751_TEMP_SetOutputDataRate+0x15a>
  {
    return STTS751_ERROR;
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295
 80047a4:	e000      	b.n	80047a8 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  return STTS751_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3320      	adds	r3, #32
 80047be:	f107 020e 	add.w	r2, r7, #14
 80047c2:	4611      	mov	r1, r2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 f9fb 	bl	8004bc0 <stts751_temperature_raw_get>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 80047d0:	f04f 33ff 	mov.w	r3, #4294967295
 80047d4:	e008      	b.n	80047e8 <STTS751_TEMP_GetTemperature+0x38>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 80047d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f8a6 	bl	800492c <stts751_from_lsb_to_celsius>
 80047e0:	4602      	mov	r2, r0
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	601a      	str	r2, [r3, #0]

  return STTS751_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80047f0:	b590      	push	{r4, r7, lr}
 80047f2:	b089      	sub	sp, #36	@ 0x24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	461a      	mov	r2, r3
 80047fc:	460b      	mov	r3, r1
 80047fe:	72fb      	strb	r3, [r7, #11]
 8004800:	4613      	mov	r3, r2
 8004802:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d11f      	bne.n	8004854 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8004814:	2300      	movs	r3, #0
 8004816:	83fb      	strh	r3, [r7, #30]
 8004818:	e018      	b.n	800484c <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	695c      	ldr	r4, [r3, #20]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	7b1b      	ldrb	r3, [r3, #12]
 8004822:	4618      	mov	r0, r3
 8004824:	7afb      	ldrb	r3, [r7, #11]
 8004826:	b29a      	uxth	r2, r3
 8004828:	8bfb      	ldrh	r3, [r7, #30]
 800482a:	4413      	add	r3, r2
 800482c:	b299      	uxth	r1, r3
 800482e:	8bfb      	ldrh	r3, [r7, #30]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	441a      	add	r2, r3
 8004834:	2301      	movs	r3, #1
 8004836:	47a0      	blx	r4
 8004838:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8004840:	f04f 33ff 	mov.w	r3, #4294967295
 8004844:	e007      	b.n	8004856 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8004846:	8bfb      	ldrh	r3, [r7, #30]
 8004848:	3301      	adds	r3, #1
 800484a:	83fb      	strh	r3, [r7, #30]
 800484c:	8bfa      	ldrh	r2, [r7, #30]
 800484e:	893b      	ldrh	r3, [r7, #8]
 8004850:	429a      	cmp	r2, r3
 8004852:	d3e2      	bcc.n	800481a <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8004854:	69bb      	ldr	r3, [r7, #24]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3724      	adds	r7, #36	@ 0x24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd90      	pop	{r4, r7, pc}

0800485e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800485e:	b590      	push	{r4, r7, lr}
 8004860:	b089      	sub	sp, #36	@ 0x24
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	461a      	mov	r2, r3
 800486a:	460b      	mov	r3, r1
 800486c:	72fb      	strb	r3, [r7, #11]
 800486e:	4613      	mov	r3, r2
 8004870:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d11f      	bne.n	80048c2 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8004882:	2300      	movs	r3, #0
 8004884:	83fb      	strh	r3, [r7, #30]
 8004886:	e018      	b.n	80048ba <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	691c      	ldr	r4, [r3, #16]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	7b1b      	ldrb	r3, [r3, #12]
 8004890:	4618      	mov	r0, r3
 8004892:	7afb      	ldrb	r3, [r7, #11]
 8004894:	b29a      	uxth	r2, r3
 8004896:	8bfb      	ldrh	r3, [r7, #30]
 8004898:	4413      	add	r3, r2
 800489a:	b299      	uxth	r1, r3
 800489c:	8bfb      	ldrh	r3, [r7, #30]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	441a      	add	r2, r3
 80048a2:	2301      	movs	r3, #1
 80048a4:	47a0      	blx	r4
 80048a6:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 80048ae:	f04f 33ff 	mov.w	r3, #4294967295
 80048b2:	e007      	b.n	80048c4 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 80048b4:	8bfb      	ldrh	r3, [r7, #30]
 80048b6:	3301      	adds	r3, #1
 80048b8:	83fb      	strh	r3, [r7, #30]
 80048ba:	8bfa      	ldrh	r2, [r7, #30]
 80048bc:	893b      	ldrh	r3, [r7, #8]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d3e2      	bcc.n	8004888 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 80048c2:	69bb      	ldr	r3, [r7, #24]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3724      	adds	r7, #36	@ 0x24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd90      	pop	{r4, r7, pc}

080048cc <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80048cc:	b590      	push	{r4, r7, lr}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	461a      	mov	r2, r3
 80048d8:	460b      	mov	r3, r1
 80048da:	72fb      	strb	r3, [r7, #11]
 80048dc:	4613      	mov	r3, r2
 80048de:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	685c      	ldr	r4, [r3, #4]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68d8      	ldr	r0, [r3, #12]
 80048e8:	893b      	ldrh	r3, [r7, #8]
 80048ea:	7af9      	ldrb	r1, [r7, #11]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	47a0      	blx	r4
 80048f0:	6178      	str	r0, [r7, #20]

  return ret;
 80048f2:	697b      	ldr	r3, [r7, #20]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd90      	pop	{r4, r7, pc}

080048fc <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	461a      	mov	r2, r3
 8004908:	460b      	mov	r3, r1
 800490a:	72fb      	strb	r3, [r7, #11]
 800490c:	4613      	mov	r3, r2
 800490e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681c      	ldr	r4, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	68d8      	ldr	r0, [r3, #12]
 8004918:	893b      	ldrh	r3, [r7, #8]
 800491a:	7af9      	ldrb	r1, [r7, #11]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	47a0      	blx	r4
 8004920:	6178      	str	r0, [r7, #20]

  return ret;
 8004922:	697b      	ldr	r3, [r7, #20]
}
 8004924:	4618      	mov	r0, r3
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	bd90      	pop	{r4, r7, pc}

0800492c <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8004936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800493a:	4618      	mov	r0, r3
 800493c:	f7fc f9be 	bl	8000cbc <__aeabi_i2f>
 8004940:	4603      	mov	r3, r0
 8004942:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004946:	4618      	mov	r0, r3
 8004948:	f7fc fac0 	bl	8000ecc <__aeabi_fdiv>
 800494c:	4603      	mov	r3, r0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b086      	sub	sp, #24
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8004962:	23aa      	movs	r3, #170	@ 0xaa
 8004964:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8004966:	f107 020c 	add.w	r2, r7, #12
 800496a:	2301      	movs	r3, #1
 800496c:	2104      	movs	r1, #4
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff ffac 	bl	80048cc <stts751_read_reg>
 8004974:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10f      	bne.n	800499c <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	b2da      	uxtb	r2, r3
 8004984:	7b3b      	ldrb	r3, [r7, #12]
 8004986:	f362 0303 	bfi	r3, r2, #0, #4
 800498a:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 800498c:	f107 020c 	add.w	r2, r7, #12
 8004990:	2301      	movs	r3, #1
 8004992:	2104      	movs	r1, #4
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7ff ffb1 	bl	80048fc <stts751_write_reg>
 800499a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d107      	bne.n	80049b2 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80049a2:	f107 0210 	add.w	r2, r7, #16
 80049a6:	2301      	movs	r3, #1
 80049a8:	2103      	movs	r1, #3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff ff8e 	bl	80048cc <stts751_read_reg>
 80049b0:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d111      	bne.n	80049dc <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	09db      	lsrs	r3, r3, #7
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	7c3b      	ldrb	r3, [r7, #16]
 80049c6:	f362 1386 	bfi	r3, r2, #6, #1
 80049ca:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 80049cc:	f107 0210 	add.w	r2, r7, #16
 80049d0:	2301      	movs	r3, #1
 80049d2:	2103      	movs	r1, #3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff ff91 	bl	80048fc <stts751_write_reg>
 80049da:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <stts751_temp_data_rate_set+0xa2>
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	2b90      	cmp	r3, #144	@ 0x90
 80049e6:	d107      	bne.n	80049f8 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 80049e8:	f107 020b 	add.w	r2, r7, #11
 80049ec:	2301      	movs	r3, #1
 80049ee:	210f      	movs	r1, #15
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff ff83 	bl	80048fc <stts751_write_reg>
 80049f6:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80049f8:	697b      	ldr	r3, [r7, #20]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8004a0e:	f107 0210 	add.w	r2, r7, #16
 8004a12:	2301      	movs	r3, #1
 8004a14:	2104      	movs	r1, #4
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff ff58 	bl	80048cc <stts751_read_reg>
 8004a1c:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d107      	bne.n	8004a34 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8004a24:	f107 020c 	add.w	r2, r7, #12
 8004a28:	2301      	movs	r3, #1
 8004a2a:	2103      	movs	r1, #3
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff ff4d 	bl	80048cc <stts751_read_reg>
 8004a32:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8004a34:	7b3b      	ldrb	r3, [r7, #12]
 8004a36:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	01db      	lsls	r3, r3, #7
 8004a3e:	7c3a      	ldrb	r2, [r7, #16]
 8004a40:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	4413      	add	r3, r2
 8004a48:	2b90      	cmp	r3, #144	@ 0x90
 8004a4a:	d025      	beq.n	8004a98 <stts751_temp_data_rate_get+0x94>
 8004a4c:	2b90      	cmp	r3, #144	@ 0x90
 8004a4e:	dc4f      	bgt.n	8004af0 <stts751_temp_data_rate_get+0xec>
 8004a50:	2b09      	cmp	r3, #9
 8004a52:	dc1b      	bgt.n	8004a8c <stts751_temp_data_rate_get+0x88>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	db4b      	blt.n	8004af0 <stts751_temp_data_rate_get+0xec>
 8004a58:	2b09      	cmp	r3, #9
 8004a5a:	d849      	bhi.n	8004af0 <stts751_temp_data_rate_get+0xec>
 8004a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a64 <stts751_temp_data_rate_get+0x60>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004aa1 	.word	0x08004aa1
 8004a68:	08004aa9 	.word	0x08004aa9
 8004a6c:	08004ab1 	.word	0x08004ab1
 8004a70:	08004ab9 	.word	0x08004ab9
 8004a74:	08004ac1 	.word	0x08004ac1
 8004a78:	08004ac9 	.word	0x08004ac9
 8004a7c:	08004ad1 	.word	0x08004ad1
 8004a80:	08004ad9 	.word	0x08004ad9
 8004a84:	08004ae1 	.word	0x08004ae1
 8004a88:	08004ae9 	.word	0x08004ae9
 8004a8c:	2b80      	cmp	r3, #128	@ 0x80
 8004a8e:	d12f      	bne.n	8004af0 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2280      	movs	r2, #128	@ 0x80
 8004a94:	701a      	strb	r2, [r3, #0]
      break;
 8004a96:	e02f      	b.n	8004af8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2290      	movs	r2, #144	@ 0x90
 8004a9c:	701a      	strb	r2, [r3, #0]
      break;
 8004a9e:	e02b      	b.n	8004af8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
      break;
 8004aa6:	e027      	b.n	8004af8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	701a      	strb	r2, [r3, #0]
      break;
 8004aae:	e023      	b.n	8004af8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	701a      	strb	r2, [r3, #0]
      break;
 8004ab6:	e01f      	b.n	8004af8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2203      	movs	r2, #3
 8004abc:	701a      	strb	r2, [r3, #0]
      break;
 8004abe:	e01b      	b.n	8004af8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2204      	movs	r2, #4
 8004ac4:	701a      	strb	r2, [r3, #0]
      break;
 8004ac6:	e017      	b.n	8004af8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2205      	movs	r2, #5
 8004acc:	701a      	strb	r2, [r3, #0]
      break;
 8004ace:	e013      	b.n	8004af8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2206      	movs	r2, #6
 8004ad4:	701a      	strb	r2, [r3, #0]
      break;
 8004ad6:	e00f      	b.n	8004af8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2207      	movs	r2, #7
 8004adc:	701a      	strb	r2, [r3, #0]
      break;
 8004ade:	e00b      	b.n	8004af8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	701a      	strb	r2, [r3, #0]
      break;
 8004ae6:	e007      	b.n	8004af8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2209      	movs	r2, #9
 8004aec:	701a      	strb	r2, [r3, #0]
      break;
 8004aee:	e003      	b.n	8004af8 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2280      	movs	r2, #128	@ 0x80
 8004af4:	701a      	strb	r2, [r3, #0]
      break;
 8004af6:	bf00      	nop
  }

  return ret;
 8004af8:	697b      	ldr	r3, [r7, #20]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop

08004b04 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8004b10:	f107 0208 	add.w	r2, r7, #8
 8004b14:	2301      	movs	r3, #1
 8004b16:	2103      	movs	r1, #3
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff fed7 	bl	80048cc <stts751_read_reg>
 8004b1e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10f      	bne.n	8004b46 <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	7a3b      	ldrb	r3, [r7, #8]
 8004b30:	f362 0383 	bfi	r3, r2, #2, #2
 8004b34:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8004b36:	f107 0208 	add.w	r2, r7, #8
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	2103      	movs	r1, #3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff fedc 	bl	80048fc <stts751_write_reg>
 8004b44:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b46:	68fb      	ldr	r3, [r7, #12]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8004b5a:	f107 0208 	add.w	r2, r7, #8
 8004b5e:	2301      	movs	r3, #1
 8004b60:	2103      	movs	r1, #3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff feb2 	bl	80048cc <stts751_read_reg>
 8004b68:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8004b6a:	7a3b      	ldrb	r3, [r7, #8]
 8004b6c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d81a      	bhi.n	8004bac <stts751_resolution_get+0x5c>
 8004b76:	a201      	add	r2, pc, #4	@ (adr r2, 8004b7c <stts751_resolution_get+0x2c>)
 8004b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7c:	08004b95 	.word	0x08004b95
 8004b80:	08004b9d 	.word	0x08004b9d
 8004b84:	08004b8d 	.word	0x08004b8d
 8004b88:	08004ba5 	.word	0x08004ba5
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	701a      	strb	r2, [r3, #0]
      break;
 8004b92:	e00f      	b.n	8004bb4 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
      break;
 8004b9a:	e00b      	b.n	8004bb4 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	701a      	strb	r2, [r3, #0]
      break;
 8004ba2:	e007      	b.n	8004bb4 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	701a      	strb	r2, [r3, #0]
      break;
 8004baa:	e003      	b.n	8004bb4 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	701a      	strb	r2, [r3, #0]
      break;
 8004bb2:	bf00      	nop
  }

  return ret;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop

08004bc0 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8004bca:	f107 0308 	add.w	r3, r7, #8
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff fe79 	bl	80048cc <stts751_read_reg>
 8004bda:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d117      	bne.n	8004c12 <stts751_temperature_raw_get+0x52>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8004be2:	f107 0208 	add.w	r2, r7, #8
 8004be6:	2301      	movs	r3, #1
 8004be8:	2102      	movs	r1, #2
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fe6e 	bl	80048cc <stts751_read_reg>
 8004bf0:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 8004bf2:	7a7b      	ldrb	r3, [r7, #9]
 8004bf4:	b21a      	sxth	r2, r3
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	7a3a      	ldrb	r2, [r7, #8]
 8004c08:	4413      	add	r3, r2
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	b21a      	sxth	r2, r3
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8004c12:	68fb      	ldr	r3, [r7, #12]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8004c28:	f107 0208 	add.w	r2, r7, #8
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	2103      	movs	r1, #3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff fe4b 	bl	80048cc <stts751_read_reg>
 8004c36:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	7a3b      	ldrb	r3, [r7, #8]
 8004c48:	f362 13c7 	bfi	r3, r2, #7, #1
 8004c4c:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8004c4e:	f107 0208 	add.w	r2, r7, #8
 8004c52:	2301      	movs	r3, #1
 8004c54:	2103      	movs	r1, #3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff fe50 	bl	80048fc <stts751_write_reg>
 8004c5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	2301      	movs	r3, #1
 8004c76:	21fd      	movs	r1, #253	@ 0xfd
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fe27 	bl	80048cc <stts751_read_reg>
 8004c7e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d107      	bne.n	8004c96 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	21fe      	movs	r1, #254	@ 0xfe
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff fe1c 	bl	80048cc <stts751_read_reg>
 8004c94:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d107      	bne.n	8004cac <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	1c9a      	adds	r2, r3, #2
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	21ff      	movs	r1, #255	@ 0xff
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff fe11 	bl	80048cc <stts751_read_reg>
 8004caa:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8004cac:	68fb      	ldr	r3, [r7, #12]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08c      	sub	sp, #48	@ 0x30
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d07c      	beq.n	8004dce <IKS01A3_ENV_SENSOR_Init+0x116>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	f200 80b2 	bhi.w	8004e40 <IKS01A3_ENV_SENSOR_Init+0x188>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <IKS01A3_ENV_SENSOR_Init+0x32>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d039      	beq.n	8004d5c <IKS01A3_ENV_SENSOR_Init+0xa4>
 8004ce8:	e0aa      	b.n	8004e40 <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8004cea:	6838      	ldr	r0, [r7, #0]
 8004cec:	f000 f976 	bl	8004fdc <HTS221_0_Probe>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfa:	e0df      	b.n	8004ebc <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004cfc:	4a71      	ldr	r2, [pc, #452]	@ (8004ec4 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	4970      	ldr	r1, [pc, #448]	@ (8004ec8 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004d0e:	f107 0108 	add.w	r1, r7, #8
 8004d12:	4610      	mov	r0, r2
 8004d14:	4798      	blx	r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004d1c:	f06f 0306 	mvn.w	r3, #6
 8004d20:	e0cc      	b.n	8004ebc <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8004d22:	7a3b      	ldrb	r3, [r7, #8]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d103      	bne.n	8004d30 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8004d30:	7abb      	ldrb	r3, [r7, #10]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d103      	bne.n	8004d3e <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	f043 0304 	orr.w	r3, r3, #4
 8004d3c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8004d3e:	7a7b      	ldrb	r3, [r7, #9]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d103      	bne.n	8004d4c <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	f043 0302 	orr.w	r3, r3, #2
 8004d4a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8004d4c:	7afb      	ldrb	r3, [r7, #11]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d17a      	bne.n	8004e48 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	f043 0308 	orr.w	r3, r3, #8
 8004d58:	623b      	str	r3, [r7, #32]
      }
      break;
 8004d5a:	e075      	b.n	8004e48 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8004d5c:	6838      	ldr	r0, [r7, #0]
 8004d5e:	f000 fa07 	bl	8005170 <LPS22HH_0_Probe>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 8004d68:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6c:	e0a6      	b.n	8004ebc <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004d6e:	4a55      	ldr	r2, [pc, #340]	@ (8004ec4 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4953      	ldr	r1, [pc, #332]	@ (8004ec8 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004d80:	f107 0108 	add.w	r1, r7, #8
 8004d84:	4610      	mov	r0, r2
 8004d86:	4798      	blx	r3
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004d8e:	f06f 0306 	mvn.w	r3, #6
 8004d92:	e093      	b.n	8004ebc <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8004d94:	7a3b      	ldrb	r3, [r7, #8]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d103      	bne.n	8004da2 <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8004da2:	7abb      	ldrb	r3, [r7, #10]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d103      	bne.n	8004db0 <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	f043 0304 	orr.w	r3, r3, #4
 8004dae:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8004db0:	7a7b      	ldrb	r3, [r7, #9]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d103      	bne.n	8004dbe <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	f043 0302 	orr.w	r3, r3, #2
 8004dbc:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8004dbe:	7afb      	ldrb	r3, [r7, #11]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d143      	bne.n	8004e4c <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	f043 0308 	orr.w	r3, r3, #8
 8004dca:	623b      	str	r3, [r7, #32]
      }
      break;
 8004dcc:	e03e      	b.n	8004e4c <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8004dce:	6838      	ldr	r0, [r7, #0]
 8004dd0:	f000 fa9a 	bl	8005308 <STTS751_0_Probe>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 8004dda:	f04f 33ff 	mov.w	r3, #4294967295
 8004dde:	e06d      	b.n	8004ebc <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004de0:	4a38      	ldr	r2, [pc, #224]	@ (8004ec4 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	4937      	ldr	r1, [pc, #220]	@ (8004ec8 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004df2:	f107 0108 	add.w	r1, r7, #8
 8004df6:	4610      	mov	r0, r2
 8004df8:	4798      	blx	r3
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004e00:	f06f 0306 	mvn.w	r3, #6
 8004e04:	e05a      	b.n	8004ebc <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8004e06:	7a3b      	ldrb	r3, [r7, #8]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d103      	bne.n	8004e14 <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8004e14:	7abb      	ldrb	r3, [r7, #10]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d103      	bne.n	8004e22 <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	f043 0304 	orr.w	r3, r3, #4
 8004e20:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8004e22:	7a7b      	ldrb	r3, [r7, #9]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d103      	bne.n	8004e30 <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	f043 0302 	orr.w	r3, r3, #2
 8004e2e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8004e30:	7afb      	ldrb	r3, [r7, #11]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d10c      	bne.n	8004e50 <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	f043 0308 	orr.w	r3, r3, #8
 8004e3c:	623b      	str	r3, [r7, #32]
      }
      break;
 8004e3e:	e007      	b.n	8004e50 <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004e40:	f06f 0301 	mvn.w	r3, #1
 8004e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8004e46:	e004      	b.n	8004e52 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8004e48:	bf00      	nop
 8004e4a:	e002      	b.n	8004e52 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8004e4c:	bf00      	nop
 8004e4e:	e000      	b.n	8004e52 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8004e50:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8004e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 8004e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e5a:	e02f      	b.n	8004ebc <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e60:	e028      	b.n	8004eb4 <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e66:	4013      	ands	r3, r2
 8004e68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d11c      	bne.n	8004ea8 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 8004e6e:	6a3a      	ldr	r2, [r7, #32]
 8004e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e72:	4013      	ands	r3, r2
 8004e74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d116      	bne.n	8004ea8 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8004e7a:	4a14      	ldr	r2, [pc, #80]	@ (8004ecc <IKS01A3_ENV_SENSOR_Init+0x214>)
 8004e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e82:	4913      	ldr	r1, [pc, #76]	@ (8004ed0 <IKS01A3_ENV_SENSOR_Init+0x218>)
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	0092      	lsls	r2, r2, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	490d      	ldr	r1, [pc, #52]	@ (8004ec8 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4798      	blx	r3
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8004ea2:	f06f 0304 	mvn.w	r3, #4
 8004ea6:	e009      	b.n	8004ebc <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 8004ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d9d3      	bls.n	8004e62 <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 8004eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3730      	adds	r7, #48	@ 0x30
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	200003f0 	.word	0x200003f0
 8004ec8:	200003b4 	.word	0x200003b4
 8004ecc:	20000098 	.word	0x20000098
 8004ed0:	200003c0 	.word	0x200003c0

08004ed4 <IKS01A3_ENV_SENSOR_SetOutputDataRate>:
  * @param  Function Environmental sensor function
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d903      	bls.n	8004eee <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004ee6:	f06f 0301 	mvn.w	r3, #1
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e027      	b.n	8004f3e <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8004eee:	4a16      	ldr	r2, [pc, #88]	@ (8004f48 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x74>)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d11b      	bne.n	8004f38 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8004f00:	4a12      	ldr	r2, [pc, #72]	@ (8004f4c <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x78>)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f08:	4911      	ldr	r1, [pc, #68]	@ (8004f50 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x7c>)
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	0092      	lsls	r2, r2, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	490f      	ldr	r1, [pc, #60]	@ (8004f54 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x80>)
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4610      	mov	r0, r2
 8004f22:	4798      	blx	r3
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f2a:	f06f 0304 	mvn.w	r3, #4
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	e005      	b.n	8004f3e <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	e002      	b.n	8004f3e <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004f38:	f06f 0301 	mvn.w	r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004f3e:	697b      	ldr	r3, [r7, #20]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	200003fc 	.word	0x200003fc
 8004f4c:	20000098 	.word	0x20000098
 8004f50:	200003c0 	.word	0x200003c0
 8004f54:	200003b4 	.word	0x200003b4

08004f58 <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d903      	bls.n	8004f72 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004f6a:	f06f 0301 	mvn.w	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e027      	b.n	8004fc2 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8004f72:	4a16      	ldr	r2, [pc, #88]	@ (8004fcc <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d11b      	bne.n	8004fbc <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8004f84:	4a12      	ldr	r2, [pc, #72]	@ (8004fd0 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8c:	4911      	ldr	r1, [pc, #68]	@ (8004fd4 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	0092      	lsls	r2, r2, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	490f      	ldr	r1, [pc, #60]	@ (8004fd8 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	4798      	blx	r3
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004fae:	f06f 0304 	mvn.w	r3, #4
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	e005      	b.n	8004fc2 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	e002      	b.n	8004fc2 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004fbc:	f06f 0301 	mvn.w	r3, #1
 8004fc0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004fc2:	697b      	ldr	r3, [r7, #20]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	200003fc 	.word	0x200003fc
 8004fd0:	20000098 	.word	0x20000098
 8004fd4:	200003c0 	.word	0x200003c0
 8004fd8:	200003b4 	.word	0x200003b4

08004fdc <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b092      	sub	sp, #72	@ 0x48
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	647b      	str	r3, [r7, #68]	@ 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8004fe8:	2300      	movs	r3, #0
 8004fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8004fec:	23bf      	movs	r3, #191	@ 0xbf
 8004fee:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8004ff2:	4b51      	ldr	r3, [pc, #324]	@ (8005138 <HTS221_0_Probe+0x15c>)
 8004ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8004ff6:	4b51      	ldr	r3, [pc, #324]	@ (800513c <HTS221_0_Probe+0x160>)
 8004ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8004ffa:	4b51      	ldr	r3, [pc, #324]	@ (8005140 <HTS221_0_Probe+0x164>)
 8004ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8004ffe:	4b51      	ldr	r3, [pc, #324]	@ (8005144 <HTS221_0_Probe+0x168>)
 8005000:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005002:	4b51      	ldr	r3, [pc, #324]	@ (8005148 <HTS221_0_Probe+0x16c>)
 8005004:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8005006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800500a:	4619      	mov	r1, r3
 800500c:	484f      	ldr	r0, [pc, #316]	@ (800514c <HTS221_0_Probe+0x170>)
 800500e:	f7fd fd15 	bl	8002a3c <HTS221_RegisterBusIO>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005018:	f06f 0306 	mvn.w	r3, #6
 800501c:	647b      	str	r3, [r7, #68]	@ 0x44
 800501e:	e085      	b.n	800512c <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8005020:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8005024:	4619      	mov	r1, r3
 8005026:	4849      	ldr	r0, [pc, #292]	@ (800514c <HTS221_0_Probe+0x170>)
 8005028:	f7fd fd91 	bl	8002b4e <HTS221_ReadID>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005032:	f06f 0306 	mvn.w	r3, #6
 8005036:	647b      	str	r3, [r7, #68]	@ 0x44
 8005038:	e078      	b.n	800512c <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 800503a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800503e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005040:	d003      	beq.n	800504a <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005042:	f06f 0306 	mvn.w	r3, #6
 8005046:	647b      	str	r3, [r7, #68]	@ 0x44
 8005048:	e070      	b.n	800512c <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800504a:	f107 0308 	add.w	r3, r7, #8
 800504e:	4619      	mov	r1, r3
 8005050:	483e      	ldr	r0, [pc, #248]	@ (800514c <HTS221_0_Probe+0x170>)
 8005052:	f7fd fd93 	bl	8002b7c <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8005056:	7a3b      	ldrb	r3, [r7, #8]
 8005058:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800505a:	7a7b      	ldrb	r3, [r7, #9]
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 8005060:	7abb      	ldrb	r3, [r7, #10]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 8005066:	7afb      	ldrb	r3, [r7, #11]
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 800506c:	4a38      	ldr	r2, [pc, #224]	@ (8005150 <HTS221_0_Probe+0x174>)
 800506e:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8005070:	4b38      	ldr	r3, [pc, #224]	@ (8005154 <HTS221_0_Probe+0x178>)
 8005072:	4a36      	ldr	r2, [pc, #216]	@ (800514c <HTS221_0_Probe+0x170>)
 8005074:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8005076:	4b38      	ldr	r3, [pc, #224]	@ (8005158 <HTS221_0_Probe+0x17c>)
 8005078:	4a38      	ldr	r2, [pc, #224]	@ (800515c <HTS221_0_Probe+0x180>)
 800507a:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800507c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800507e:	2b00      	cmp	r3, #0
 8005080:	d11d      	bne.n	80050be <HTS221_0_Probe+0xe2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d018      	beq.n	80050be <HTS221_0_Probe+0xe2>
 800508c:	7a3b      	ldrb	r3, [r7, #8]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d115      	bne.n	80050be <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8005092:	4b33      	ldr	r3, [pc, #204]	@ (8005160 <HTS221_0_Probe+0x184>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4a33      	ldr	r2, [pc, #204]	@ (8005164 <HTS221_0_Probe+0x188>)
 8005098:	4933      	ldr	r1, [pc, #204]	@ (8005168 <HTS221_0_Probe+0x18c>)
 800509a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800509e:	4b2e      	ldr	r3, [pc, #184]	@ (8005158 <HTS221_0_Probe+0x17c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005154 <HTS221_0_Probe+0x178>)
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	4610      	mov	r0, r2
 80050aa:	4798      	blx	r3
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80050b2:	f06f 0304 	mvn.w	r3, #4
 80050b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80050b8:	e001      	b.n	80050be <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80050ba:	2300      	movs	r3, #0
 80050bc:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80050be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d11d      	bne.n	8005100 <HTS221_0_Probe+0x124>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d018      	beq.n	8005100 <HTS221_0_Probe+0x124>
 80050ce:	7abb      	ldrb	r3, [r7, #10]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d115      	bne.n	8005100 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80050d4:	4b22      	ldr	r3, [pc, #136]	@ (8005160 <HTS221_0_Probe+0x184>)
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	4a22      	ldr	r2, [pc, #136]	@ (8005164 <HTS221_0_Probe+0x188>)
 80050da:	4924      	ldr	r1, [pc, #144]	@ (800516c <HTS221_0_Probe+0x190>)
 80050dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 80050e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005158 <HTS221_0_Probe+0x17c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005154 <HTS221_0_Probe+0x178>)
 80050e8:	6812      	ldr	r2, [r2, #0]
 80050ea:	4610      	mov	r0, r2
 80050ec:	4798      	blx	r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80050f4:	f06f 0304 	mvn.w	r3, #4
 80050f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80050fa:	e001      	b.n	8005100 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80050fc:	2300      	movs	r3, #0
 80050fe:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8005100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005102:	2b00      	cmp	r3, #0
 8005104:	d107      	bne.n	8005116 <HTS221_0_Probe+0x13a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005110:	f06f 0304 	mvn.w	r3, #4
 8005114:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8005116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005118:	2b00      	cmp	r3, #0
 800511a:	d107      	bne.n	800512c <HTS221_0_Probe+0x150>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005126:	f06f 0304 	mvn.w	r3, #4
 800512a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800512c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800512e:	4618      	mov	r0, r3
 8005130:	3748      	adds	r7, #72	@ 0x48
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	080025c1 	.word	0x080025c1
 800513c:	08002625 	.word	0x08002625
 8005140:	080026d9 	.word	0x080026d9
 8005144:	08002675 	.word	0x08002675
 8005148:	0800273d 	.word	0x0800273d
 800514c:	20000408 	.word	0x20000408
 8005150:	200003fc 	.word	0x200003fc
 8005154:	200003b4 	.word	0x200003b4
 8005158:	200003f0 	.word	0x200003f0
 800515c:	20000004 	.word	0x20000004
 8005160:	20000098 	.word	0x20000098
 8005164:	200003c0 	.word	0x200003c0
 8005168:	20000028 	.word	0x20000028
 800516c:	20000014 	.word	0x20000014

08005170 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b092      	sub	sp, #72	@ 0x48
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8005178:	2300      	movs	r3, #0
 800517a:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 800517c:	2300      	movs	r3, #0
 800517e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8005180:	23bb      	movs	r3, #187	@ 0xbb
 8005182:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005186:	4b52      	ldr	r3, [pc, #328]	@ (80052d0 <LPS22HH_0_Probe+0x160>)
 8005188:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800518a:	4b52      	ldr	r3, [pc, #328]	@ (80052d4 <LPS22HH_0_Probe+0x164>)
 800518c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800518e:	4b52      	ldr	r3, [pc, #328]	@ (80052d8 <LPS22HH_0_Probe+0x168>)
 8005190:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005192:	4b52      	ldr	r3, [pc, #328]	@ (80052dc <LPS22HH_0_Probe+0x16c>)
 8005194:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005196:	4b52      	ldr	r3, [pc, #328]	@ (80052e0 <LPS22HH_0_Probe+0x170>)
 8005198:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800519a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800519e:	4619      	mov	r1, r3
 80051a0:	4850      	ldr	r0, [pc, #320]	@ (80052e4 <LPS22HH_0_Probe+0x174>)
 80051a2:	f7fe fa6b 	bl	800367c <LPS22HH_RegisterBusIO>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80051ac:	f06f 0306 	mvn.w	r3, #6
 80051b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051b2:	e087      	b.n	80052c4 <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 80051b4:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 80051b8:	4619      	mov	r1, r3
 80051ba:	484a      	ldr	r0, [pc, #296]	@ (80052e4 <LPS22HH_0_Probe+0x174>)
 80051bc:	f7fe fb07 	bl	80037ce <LPS22HH_ReadID>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80051c6:	f06f 0306 	mvn.w	r3, #6
 80051ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80051cc:	e07a      	b.n	80052c4 <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 80051ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051d2:	2bb3      	cmp	r3, #179	@ 0xb3
 80051d4:	d003      	beq.n	80051de <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80051d6:	f06f 0306 	mvn.w	r3, #6
 80051da:	647b      	str	r3, [r7, #68]	@ 0x44
 80051dc:	e072      	b.n	80052c4 <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 80051de:	f107 0308 	add.w	r3, r7, #8
 80051e2:	4619      	mov	r1, r3
 80051e4:	483f      	ldr	r0, [pc, #252]	@ (80052e4 <LPS22HH_0_Probe+0x174>)
 80051e6:	f7fe fb09 	bl	80037fc <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 80051ea:	7a3b      	ldrb	r3, [r7, #8]
 80051ec:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 80051ee:	7a7b      	ldrb	r3, [r7, #9]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 80051f4:	7abb      	ldrb	r3, [r7, #10]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 80051fa:	7afb      	ldrb	r3, [r7, #11]
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8005200:	4a39      	ldr	r2, [pc, #228]	@ (80052e8 <LPS22HH_0_Probe+0x178>)
 8005202:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8005204:	4b39      	ldr	r3, [pc, #228]	@ (80052ec <LPS22HH_0_Probe+0x17c>)
 8005206:	4a37      	ldr	r2, [pc, #220]	@ (80052e4 <LPS22HH_0_Probe+0x174>)
 8005208:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800520a:	4b39      	ldr	r3, [pc, #228]	@ (80052f0 <LPS22HH_0_Probe+0x180>)
 800520c:	4a39      	ldr	r2, [pc, #228]	@ (80052f4 <LPS22HH_0_Probe+0x184>)
 800520e:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005212:	2b00      	cmp	r3, #0
 8005214:	d11e      	bne.n	8005254 <LPS22HH_0_Probe+0xe4>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d019      	beq.n	8005254 <LPS22HH_0_Probe+0xe4>
 8005220:	7a3b      	ldrb	r3, [r7, #8]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d116      	bne.n	8005254 <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8005226:	4b34      	ldr	r3, [pc, #208]	@ (80052f8 <LPS22HH_0_Probe+0x188>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	4a34      	ldr	r2, [pc, #208]	@ (80052fc <LPS22HH_0_Probe+0x18c>)
 800522c:	3304      	adds	r3, #4
 800522e:	4934      	ldr	r1, [pc, #208]	@ (8005300 <LPS22HH_0_Probe+0x190>)
 8005230:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8005234:	4b2e      	ldr	r3, [pc, #184]	@ (80052f0 <LPS22HH_0_Probe+0x180>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a2c      	ldr	r2, [pc, #176]	@ (80052ec <LPS22HH_0_Probe+0x17c>)
 800523c:	6852      	ldr	r2, [r2, #4]
 800523e:	4610      	mov	r0, r2
 8005240:	4798      	blx	r3
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005248:	f06f 0304 	mvn.w	r3, #4
 800524c:	647b      	str	r3, [r7, #68]	@ 0x44
 800524e:	e001      	b.n	8005254 <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005250:	2300      	movs	r3, #0
 8005252:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8005254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005256:	2b00      	cmp	r3, #0
 8005258:	d11e      	bne.n	8005298 <LPS22HH_0_Probe+0x128>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d019      	beq.n	8005298 <LPS22HH_0_Probe+0x128>
 8005264:	7a7b      	ldrb	r3, [r7, #9]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d116      	bne.n	8005298 <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800526a:	4b23      	ldr	r3, [pc, #140]	@ (80052f8 <LPS22HH_0_Probe+0x188>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	4a23      	ldr	r2, [pc, #140]	@ (80052fc <LPS22HH_0_Probe+0x18c>)
 8005270:	3304      	adds	r3, #4
 8005272:	4924      	ldr	r1, [pc, #144]	@ (8005304 <LPS22HH_0_Probe+0x194>)
 8005274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8005278:	4b1d      	ldr	r3, [pc, #116]	@ (80052f0 <LPS22HH_0_Probe+0x180>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1b      	ldr	r2, [pc, #108]	@ (80052ec <LPS22HH_0_Probe+0x17c>)
 8005280:	6852      	ldr	r2, [r2, #4]
 8005282:	4610      	mov	r0, r2
 8005284:	4798      	blx	r3
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800528c:	f06f 0304 	mvn.w	r3, #4
 8005290:	647b      	str	r3, [r7, #68]	@ 0x44
 8005292:	e001      	b.n	8005298 <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005294:	2300      	movs	r3, #0
 8005296:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8005298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800529a:	2b00      	cmp	r3, #0
 800529c:	d107      	bne.n	80052ae <LPS22HH_0_Probe+0x13e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80052a8:	f06f 0304 	mvn.w	r3, #4
 80052ac:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 80052ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d107      	bne.n	80052c4 <LPS22HH_0_Probe+0x154>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80052be:	f06f 0304 	mvn.w	r3, #4
 80052c2:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 80052c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3748      	adds	r7, #72	@ 0x48
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	080025c1 	.word	0x080025c1
 80052d4:	08002625 	.word	0x08002625
 80052d8:	080026d9 	.word	0x080026d9
 80052dc:	08002675 	.word	0x08002675
 80052e0:	0800273d 	.word	0x0800273d
 80052e4:	2000043c 	.word	0x2000043c
 80052e8:	200003fc 	.word	0x200003fc
 80052ec:	200003b4 	.word	0x200003b4
 80052f0:	200003f0 	.word	0x200003f0
 80052f4:	2000003c 	.word	0x2000003c
 80052f8:	20000098 	.word	0x20000098
 80052fc:	200003c0 	.word	0x200003c0
 8005300:	20000060 	.word	0x20000060
 8005304:	2000004c 	.word	0x2000004c

08005308 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b092      	sub	sp, #72	@ 0x48
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8005310:	2300      	movs	r3, #0
 8005312:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8005314:	2300      	movs	r3, #0
 8005316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8005318:	2395      	movs	r3, #149	@ 0x95
 800531a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800531e:	4b46      	ldr	r3, [pc, #280]	@ (8005438 <STTS751_0_Probe+0x130>)
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005322:	4b46      	ldr	r3, [pc, #280]	@ (800543c <STTS751_0_Probe+0x134>)
 8005324:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005326:	4b46      	ldr	r3, [pc, #280]	@ (8005440 <STTS751_0_Probe+0x138>)
 8005328:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800532a:	4b46      	ldr	r3, [pc, #280]	@ (8005444 <STTS751_0_Probe+0x13c>)
 800532c:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800532e:	4b46      	ldr	r3, [pc, #280]	@ (8005448 <STTS751_0_Probe+0x140>)
 8005330:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8005332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005336:	4619      	mov	r1, r3
 8005338:	4844      	ldr	r0, [pc, #272]	@ (800544c <STTS751_0_Probe+0x144>)
 800533a:	f7fe ffdd 	bl	80042f8 <STTS751_RegisterBusIO>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005344:	f06f 0306 	mvn.w	r3, #6
 8005348:	647b      	str	r3, [r7, #68]	@ 0x44
 800534a:	e070      	b.n	800542e <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 800534c:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8005350:	4619      	mov	r1, r3
 8005352:	483e      	ldr	r0, [pc, #248]	@ (800544c <STTS751_0_Probe+0x144>)
 8005354:	f7ff f86f 	bl	8004436 <STTS751_ReadID>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800535e:	f06f 0306 	mvn.w	r3, #6
 8005362:	647b      	str	r3, [r7, #68]	@ 0x44
 8005364:	e063      	b.n	800542e <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 8005366:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800536a:	2b53      	cmp	r3, #83	@ 0x53
 800536c:	d003      	beq.n	8005376 <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800536e:	f06f 0306 	mvn.w	r3, #6
 8005372:	647b      	str	r3, [r7, #68]	@ 0x44
 8005374:	e05b      	b.n	800542e <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8005376:	f107 0308 	add.w	r3, r7, #8
 800537a:	4619      	mov	r1, r3
 800537c:	4833      	ldr	r0, [pc, #204]	@ (800544c <STTS751_0_Probe+0x144>)
 800537e:	f7ff f875 	bl	800446c <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8005382:	7a3b      	ldrb	r3, [r7, #8]
 8005384:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8005386:	7a7b      	ldrb	r3, [r7, #9]
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 800538c:	7abb      	ldrb	r3, [r7, #10]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8005392:	7afb      	ldrb	r3, [r7, #11]
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8005398:	4a2d      	ldr	r2, [pc, #180]	@ (8005450 <STTS751_0_Probe+0x148>)
 800539a:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 800539c:	4b2d      	ldr	r3, [pc, #180]	@ (8005454 <STTS751_0_Probe+0x14c>)
 800539e:	4a2b      	ldr	r2, [pc, #172]	@ (800544c <STTS751_0_Probe+0x144>)
 80053a0:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 80053a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005458 <STTS751_0_Probe+0x150>)
 80053a4:	4a2d      	ldr	r2, [pc, #180]	@ (800545c <STTS751_0_Probe+0x154>)
 80053a6:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80053a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d11e      	bne.n	80053ec <STTS751_0_Probe+0xe4>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d019      	beq.n	80053ec <STTS751_0_Probe+0xe4>
 80053b8:	7a3b      	ldrb	r3, [r7, #8]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d116      	bne.n	80053ec <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 80053be:	4b28      	ldr	r3, [pc, #160]	@ (8005460 <STTS751_0_Probe+0x158>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4a28      	ldr	r2, [pc, #160]	@ (8005464 <STTS751_0_Probe+0x15c>)
 80053c4:	3308      	adds	r3, #8
 80053c6:	4928      	ldr	r1, [pc, #160]	@ (8005468 <STTS751_0_Probe+0x160>)
 80053c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 80053cc:	4b22      	ldr	r3, [pc, #136]	@ (8005458 <STTS751_0_Probe+0x150>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a20      	ldr	r2, [pc, #128]	@ (8005454 <STTS751_0_Probe+0x14c>)
 80053d4:	6892      	ldr	r2, [r2, #8]
 80053d6:	4610      	mov	r0, r2
 80053d8:	4798      	blx	r3
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80053e0:	f06f 0304 	mvn.w	r3, #4
 80053e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053e6:	e001      	b.n	80053ec <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80053e8:	2300      	movs	r3, #0
 80053ea:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80053ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d107      	bne.n	8005402 <STTS751_0_Probe+0xfa>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80053fc:	f06f 0304 	mvn.w	r3, #4
 8005400:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8005402:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005404:	2b00      	cmp	r3, #0
 8005406:	d107      	bne.n	8005418 <STTS751_0_Probe+0x110>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005412:	f06f 0304 	mvn.w	r3, #4
 8005416:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8005418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800541a:	2b00      	cmp	r3, #0
 800541c:	d107      	bne.n	800542e <STTS751_0_Probe+0x126>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005428:	f06f 0304 	mvn.w	r3, #4
 800542c:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 800542e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8005430:	4618      	mov	r0, r3
 8005432:	3748      	adds	r7, #72	@ 0x48
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	080025c1 	.word	0x080025c1
 800543c:	08002625 	.word	0x08002625
 8005440:	080026d9 	.word	0x080026d9
 8005444:	08002675 	.word	0x08002675
 8005448:	0800273d 	.word	0x0800273d
 800544c:	20000470 	.word	0x20000470
 8005450:	200003fc 	.word	0x200003fc
 8005454:	200003b4 	.word	0x200003b4
 8005458:	200003f0 	.word	0x200003f0
 800545c:	20000074 	.word	0x20000074
 8005460:	20000098 	.word	0x20000098
 8005464:	200003c0 	.word	0x200003c0
 8005468:	20000084 	.word	0x20000084

0800546c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005476:	2003      	movs	r0, #3
 8005478:	f000 fdf0 	bl	800605c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800547c:	2000      	movs	r0, #0
 800547e:	f000 f80d 	bl	800549c <HAL_InitTick>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	71fb      	strb	r3, [r7, #7]
 800548c:	e001      	b.n	8005492 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800548e:	f7fc fdfd 	bl	800208c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005492:	79fb      	ldrb	r3, [r7, #7]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80054a8:	4b16      	ldr	r3, [pc, #88]	@ (8005504 <HAL_InitTick+0x68>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d022      	beq.n	80054f6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80054b0:	4b15      	ldr	r3, [pc, #84]	@ (8005508 <HAL_InitTick+0x6c>)
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4b13      	ldr	r3, [pc, #76]	@ (8005504 <HAL_InitTick+0x68>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80054bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80054c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fe0c 	bl	80060e2 <HAL_SYSTICK_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10f      	bne.n	80054f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b0f      	cmp	r3, #15
 80054d4:	d809      	bhi.n	80054ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054d6:	2200      	movs	r2, #0
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	f04f 30ff 	mov.w	r0, #4294967295
 80054de:	f000 fdc8 	bl	8006072 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054e2:	4a0a      	ldr	r2, [pc, #40]	@ (800550c <HAL_InitTick+0x70>)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	e007      	b.n	80054fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	73fb      	strb	r3, [r7, #15]
 80054ee:	e004      	b.n	80054fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
 80054f4:	e001      	b.n	80054fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	200000c0 	.word	0x200000c0
 8005508:	20000000 	.word	0x20000000
 800550c:	200000bc 	.word	0x200000bc

08005510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005514:	4b05      	ldr	r3, [pc, #20]	@ (800552c <HAL_IncTick+0x1c>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	4b05      	ldr	r3, [pc, #20]	@ (8005530 <HAL_IncTick+0x20>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4413      	add	r3, r2
 800551e:	4a03      	ldr	r2, [pc, #12]	@ (800552c <HAL_IncTick+0x1c>)
 8005520:	6013      	str	r3, [r2, #0]
}
 8005522:	bf00      	nop
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	200004a8 	.word	0x200004a8
 8005530:	200000c0 	.word	0x200000c0

08005534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  return uwTick;
 8005538:	4b02      	ldr	r3, [pc, #8]	@ (8005544 <HAL_GetTick+0x10>)
 800553a:	681b      	ldr	r3, [r3, #0]
}
 800553c:	4618      	mov	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr
 8005544:	200004a8 	.word	0x200004a8

08005548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005550:	f7ff fff0 	bl	8005534 <HAL_GetTick>
 8005554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005560:	d004      	beq.n	800556c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005562:	4b09      	ldr	r3, [pc, #36]	@ (8005588 <HAL_Delay+0x40>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800556c:	bf00      	nop
 800556e:	f7ff ffe1 	bl	8005534 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	429a      	cmp	r2, r3
 800557c:	d8f7      	bhi.n	800556e <HAL_Delay+0x26>
  {
  }
}
 800557e:	bf00      	nop
 8005580:	bf00      	nop
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	200000c0 	.word	0x200000c0

0800558c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08e      	sub	sp, #56	@ 0x38
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 800559a:	2300      	movs	r3, #0
 800559c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e127      	b.n	80057fc <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d115      	bne.n	80055e6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055c8:	4b8e      	ldr	r3, [pc, #568]	@ (8005804 <HAL_ADC_Init+0x278>)
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	4a8d      	ldr	r2, [pc, #564]	@ (8005804 <HAL_ADC_Init+0x278>)
 80055ce:	f043 0301 	orr.w	r3, r3, #1
 80055d2:	6213      	str	r3, [r2, #32]
 80055d4:	4b8b      	ldr	r3, [pc, #556]	@ (8005804 <HAL_ADC_Init+0x278>)
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7fc fd83 	bl	80020ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f040 80ff 	bne.w	80057f2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80055fc:	f023 0302 	bic.w	r3, r3, #2
 8005600:	f043 0202 	orr.w	r2, r3, #2
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8005608:	4b7f      	ldr	r3, [pc, #508]	@ (8005808 <HAL_ADC_Init+0x27c>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	497c      	ldr	r1, [pc, #496]	@ (8005808 <HAL_ADC_Init+0x27c>)
 8005616:	4313      	orrs	r3, r2
 8005618:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8005622:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800562a:	4619      	mov	r1, r3
 800562c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005630:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	fa93 f3a3 	rbit	r3, r3
 8005638:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	fab3 f383 	clz	r3, r3
 8005640:	b2db      	uxtb	r3, r3
 8005642:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8005646:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800564c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005654:	4619      	mov	r1, r3
 8005656:	2302      	movs	r3, #2
 8005658:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565c:	fa93 f3a3 	rbit	r3, r3
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	fab3 f383 	clz	r3, r3
 8005668:	b2db      	uxtb	r3, r3
 800566a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800566e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8005670:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005672:	4313      	orrs	r3, r2
 8005674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800567a:	2b10      	cmp	r3, #16
 800567c:	d007      	beq.n	800568e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8005686:	4313      	orrs	r3, r2
 8005688:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800568a:	4313      	orrs	r3, r2
 800568c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005698:	2b40      	cmp	r3, #64	@ 0x40
 800569a:	d04f      	beq.n	800573c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056a2:	4313      	orrs	r3, r2
 80056a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80056ae:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6912      	ldr	r2, [r2, #16]
 80056b4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80056b8:	d003      	beq.n	80056c2 <HAL_ADC_Init+0x136>
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6912      	ldr	r2, [r2, #16]
 80056be:	2a01      	cmp	r2, #1
 80056c0:	d102      	bne.n	80056c8 <HAL_ADC_Init+0x13c>
 80056c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056c6:	e000      	b.n	80056ca <HAL_ADC_Init+0x13e>
 80056c8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80056ca:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80056cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ce:	4313      	orrs	r3, r2
 80056d0:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d125      	bne.n	8005728 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d114      	bne.n	8005710 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ea:	3b01      	subs	r3, #1
 80056ec:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80056f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	fa92 f2a2 	rbit	r2, r2
 80056f8:	617a      	str	r2, [r7, #20]
  return result;
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	fab2 f282 	clz	r2, r2
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	4093      	lsls	r3, r2
 8005704:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800570a:	4313      	orrs	r3, r2
 800570c:	633b      	str	r3, [r7, #48]	@ 0x30
 800570e:	e00b      	b.n	8005728 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005714:	f043 0220 	orr.w	r2, r3, #32
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005720:	f043 0201 	orr.w	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	4b37      	ldr	r3, [pc, #220]	@ (800580c <HAL_ADC_Init+0x280>)
 8005730:	4013      	ands	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005738:	430b      	orrs	r3, r1
 800573a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	4b33      	ldr	r3, [pc, #204]	@ (8005810 <HAL_ADC_Init+0x284>)
 8005744:	4013      	ands	r3, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6812      	ldr	r2, [r2, #0]
 800574a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800574c:	430b      	orrs	r3, r1
 800574e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005758:	d003      	beq.n	8005762 <HAL_ADC_Init+0x1d6>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d119      	bne.n	8005796 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005768:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005770:	3b01      	subs	r3, #1
 8005772:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 8005776:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	fa92 f2a2 	rbit	r2, r2
 800577e:	60fa      	str	r2, [r7, #12]
  return result;
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	fab2 f282 	clz	r2, r2
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	fa03 f202 	lsl.w	r2, r3, r2
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	631a      	str	r2, [r3, #48]	@ 0x30
 8005794:	e007      	b.n	80057a6 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 80057a4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	4b19      	ldr	r3, [pc, #100]	@ (8005814 <HAL_ADC_Init+0x288>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d10b      	bne.n	80057ce <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057c0:	f023 0303 	bic.w	r3, r3, #3
 80057c4:	f043 0201 	orr.w	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 80057cc:	e014      	b.n	80057f8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057d2:	f023 0312 	bic.w	r3, r3, #18
 80057d6:	f043 0210 	orr.w	r2, r3, #16
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e2:	f043 0201 	orr.w	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80057f0:	e002      	b.n	80057f8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80057f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3738      	adds	r7, #56	@ 0x38
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40023800 	.word	0x40023800
 8005808:	40012700 	.word	0x40012700
 800580c:	fcfc16ff 	.word	0xfcfc16ff
 8005810:	c0fff189 	.word	0xc0fff189
 8005814:	bf80fffe 	.word	0xbf80fffe

08005818 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_ADC_Start+0x1a>
 800582e:	2302      	movs	r3, #2
 8005830:	e04e      	b.n	80058d0 <HAL_ADC_Start+0xb8>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa80 	bl	8005d40 <ADC_Enable>
 8005840:	4603      	mov	r3, r0
 8005842:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d141      	bne.n	80058ce <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800584e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005870:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005874:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005888:	d106      	bne.n	8005898 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588e:	f023 0206 	bic.w	r2, r3, #6
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	651a      	str	r2, [r3, #80]	@ 0x50
 8005896:	e002      	b.n	800589e <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80058ae:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d107      	bne.n	80058ce <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80058cc:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_ADC_Stop+0x1a>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e01a      	b.n	8005928 <HAL_ADC_Stop+0x50>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa7c 	bl	8005df8 <ADC_ConversionStop_Disable>
 8005900:	4603      	mov	r3, r0
 8005902:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800590e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005912:	f023 0301 	bic.w	r3, r3, #1
 8005916:	f043 0201 	orr.w	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8005926:	7bfb      	ldrb	r3, [r7, #15]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800594c:	d113      	bne.n	8005976 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800595c:	d10b      	bne.n	8005976 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005962:	f043 0220 	orr.w	r2, r3, #32
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e068      	b.n	8005a48 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005976:	f7ff fddd 	bl	8005534 <HAL_GetTick>
 800597a:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800597c:	e021      	b.n	80059c2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d01d      	beq.n	80059c2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <HAL_ADC_PollForConversion+0x6c>
 800598c:	f7ff fdd2 	bl	8005534 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d212      	bcs.n	80059c2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ae:	f043 0204 	orr.w	r2, r3, #4
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e042      	b.n	8005a48 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0d6      	beq.n	800597e <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d104      	bne.n	80059e2 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0212 	mvn.w	r2, #18
 80059e0:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d124      	bne.n	8005a46 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d11f      	bne.n	8005a46 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0c:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d006      	beq.n	8005a22 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d111      	bne.n	8005a46 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a26:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d105      	bne.n	8005a46 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a3e:	f043 0201 	orr.w	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr

08005a68 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_ADC_ConfigChannel+0x20>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e14f      	b.n	8005d28 <HAL_ADC_ConfigChannel+0x2c0>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b06      	cmp	r3, #6
 8005a96:	d81c      	bhi.n	8005ad2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3b05      	subs	r3, #5
 8005aaa:	221f      	movs	r2, #31
 8005aac:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	4019      	ands	r1, r3
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3b05      	subs	r3, #5
 8005ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ad0:	e07e      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2b0c      	cmp	r3, #12
 8005ad8:	d81c      	bhi.n	8005b14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	3b23      	subs	r3, #35	@ 0x23
 8005aec:	221f      	movs	r2, #31
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	43db      	mvns	r3, r3
 8005af4:	4019      	ands	r1, r3
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	3b23      	subs	r3, #35	@ 0x23
 8005b06:	fa00 f203 	lsl.w	r2, r0, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b12:	e05d      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b12      	cmp	r3, #18
 8005b1a:	d81c      	bhi.n	8005b56 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3b41      	subs	r3, #65	@ 0x41
 8005b2e:	221f      	movs	r2, #31
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	43db      	mvns	r3, r3
 8005b36:	4019      	ands	r1, r3
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	3b41      	subs	r3, #65	@ 0x41
 8005b48:	fa00 f203 	lsl.w	r2, r0, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b54:	e03c      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b18      	cmp	r3, #24
 8005b5c:	d81c      	bhi.n	8005b98 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	3b5f      	subs	r3, #95	@ 0x5f
 8005b70:	221f      	movs	r2, #31
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43db      	mvns	r3, r3
 8005b78:	4019      	ands	r1, r3
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	6818      	ldr	r0, [r3, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	3b5f      	subs	r3, #95	@ 0x5f
 8005b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b96:	e01b      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3b7d      	subs	r3, #125	@ 0x7d
 8005baa:	221f      	movs	r2, #31
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	4019      	ands	r1, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3b7d      	subs	r3, #125	@ 0x7d
 8005bc4:	fa00 f203 	lsl.w	r2, r0, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b09      	cmp	r3, #9
 8005bd6:	d81a      	bhi.n	8005c0e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6959      	ldr	r1, [r3, #20]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4613      	mov	r3, r2
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	4413      	add	r3, r2
 8005be8:	2207      	movs	r2, #7
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	43db      	mvns	r3, r3
 8005bf0:	4019      	ands	r1, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6898      	ldr	r0, [r3, #8]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	4413      	add	r3, r2
 8005c00:	fa00 f203 	lsl.w	r2, r0, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	615a      	str	r2, [r3, #20]
 8005c0c:	e05d      	b.n	8005cca <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b13      	cmp	r3, #19
 8005c14:	d81c      	bhi.n	8005c50 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6919      	ldr	r1, [r3, #16]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4613      	mov	r3, r2
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	4413      	add	r3, r2
 8005c26:	3b1e      	subs	r3, #30
 8005c28:	2207      	movs	r2, #7
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	4019      	ands	r1, r3
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6898      	ldr	r0, [r3, #8]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	4413      	add	r3, r2
 8005c40:	3b1e      	subs	r3, #30
 8005c42:	fa00 f203 	lsl.w	r2, r0, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	611a      	str	r2, [r3, #16]
 8005c4e:	e03c      	b.n	8005cca <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b1d      	cmp	r3, #29
 8005c56:	d81c      	bhi.n	8005c92 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68d9      	ldr	r1, [r3, #12]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	4613      	mov	r3, r2
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	4413      	add	r3, r2
 8005c68:	3b3c      	subs	r3, #60	@ 0x3c
 8005c6a:	2207      	movs	r2, #7
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	4019      	ands	r1, r3
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	6898      	ldr	r0, [r3, #8]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	4413      	add	r3, r2
 8005c82:	3b3c      	subs	r3, #60	@ 0x3c
 8005c84:	fa00 f203 	lsl.w	r2, r0, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	60da      	str	r2, [r3, #12]
 8005c90:	e01b      	b.n	8005cca <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	4413      	add	r3, r2
 8005ca2:	3b5a      	subs	r3, #90	@ 0x5a
 8005ca4:	2207      	movs	r2, #7
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	43db      	mvns	r3, r3
 8005cac:	4019      	ands	r1, r3
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6898      	ldr	r0, [r3, #8]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	4413      	add	r3, r2
 8005cbc:	3b5a      	subs	r3, #90	@ 0x5a
 8005cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b10      	cmp	r3, #16
 8005cd0:	d003      	beq.n	8005cda <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005cd6:	2b11      	cmp	r3, #17
 8005cd8:	d121      	bne.n	8005d1e <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8005cda:	4b16      	ldr	r3, [pc, #88]	@ (8005d34 <HAL_ADC_ConfigChannel+0x2cc>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d11b      	bne.n	8005d1e <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8005ce6:	4b13      	ldr	r3, [pc, #76]	@ (8005d34 <HAL_ADC_ConfigChannel+0x2cc>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	4a12      	ldr	r2, [pc, #72]	@ (8005d34 <HAL_ADC_ConfigChannel+0x2cc>)
 8005cec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005cf0:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b10      	cmp	r3, #16
 8005cf8:	d111      	bne.n	8005d1e <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8005d38 <HAL_ADC_ConfigChannel+0x2d0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8005d3c <HAL_ADC_ConfigChannel+0x2d4>)
 8005d00:	fba2 2303 	umull	r2, r3, r2, r3
 8005d04:	0c9a      	lsrs	r2, r3, #18
 8005d06:	4613      	mov	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8005d10:	e002      	b.n	8005d18 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1f9      	bne.n	8005d12 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bc80      	pop	{r7}
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40012700 	.word	0x40012700
 8005d38:	20000000 	.word	0x20000000
 8005d3c:	431bde83 	.word	0x431bde83

08005d40 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d5a:	2b40      	cmp	r3, #64	@ 0x40
 8005d5c:	d043      	beq.n	8005de6 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005d6e:	4b20      	ldr	r3, [pc, #128]	@ (8005df0 <ADC_Enable+0xb0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a20      	ldr	r2, [pc, #128]	@ (8005df4 <ADC_Enable+0xb4>)
 8005d74:	fba2 2303 	umull	r2, r3, r2, r3
 8005d78:	0c9a      	lsrs	r2, r3, #18
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	4413      	add	r3, r2
 8005d80:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8005d82:	e002      	b.n	8005d8a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1f9      	bne.n	8005d84 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8005d90:	f7ff fbd0 	bl	8005534 <HAL_GetTick>
 8005d94:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005d96:	e01f      	b.n	8005dd8 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8005d98:	f7ff fbcc 	bl	8005534 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d918      	bls.n	8005dd8 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db0:	2b40      	cmp	r3, #64	@ 0x40
 8005db2:	d011      	beq.n	8005dd8 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db8:	f043 0210 	orr.w	r2, r3, #16
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dc4:	f043 0201 	orr.w	r2, r3, #1
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e007      	b.n	8005de8 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de2:	2b40      	cmp	r3, #64	@ 0x40
 8005de4:	d1d8      	bne.n	8005d98 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	20000000 	.word	0x20000000
 8005df4:	431bde83 	.word	0x431bde83

08005df8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0e:	2b40      	cmp	r3, #64	@ 0x40
 8005e10:	d12e      	bne.n	8005e70 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005e22:	f7ff fb87 	bl	8005534 <HAL_GetTick>
 8005e26:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005e28:	e01b      	b.n	8005e62 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8005e2a:	f7ff fb83 	bl	8005534 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d914      	bls.n	8005e62 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e42:	2b40      	cmp	r3, #64	@ 0x40
 8005e44:	d10d      	bne.n	8005e62 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e4a:	f043 0210 	orr.w	r2, r3, #16
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e56:	f043 0201 	orr.w	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e007      	b.n	8005e72 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6c:	2b40      	cmp	r3, #64	@ 0x40
 8005e6e:	d0dc      	beq.n	8005e2a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <__NVIC_SetPriorityGrouping>:
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e98:	4013      	ands	r3, r2
 8005e9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ea4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005eae:	4a04      	ldr	r2, [pc, #16]	@ (8005ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	60d3      	str	r3, [r2, #12]
}
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bc80      	pop	{r7}
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	e000ed00 	.word	0xe000ed00

08005ec4 <__NVIC_GetPriorityGrouping>:
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ec8:	4b04      	ldr	r3, [pc, #16]	@ (8005edc <__NVIC_GetPriorityGrouping+0x18>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	0a1b      	lsrs	r3, r3, #8
 8005ece:	f003 0307 	and.w	r3, r3, #7
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bc80      	pop	{r7}
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	e000ed00 	.word	0xe000ed00

08005ee0 <__NVIC_EnableIRQ>:
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	db0b      	blt.n	8005f0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	f003 021f 	and.w	r2, r3, #31
 8005ef8:	4906      	ldr	r1, [pc, #24]	@ (8005f14 <__NVIC_EnableIRQ+0x34>)
 8005efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2001      	movs	r0, #1
 8005f02:	fa00 f202 	lsl.w	r2, r0, r2
 8005f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr
 8005f14:	e000e100 	.word	0xe000e100

08005f18 <__NVIC_DisableIRQ>:
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	db12      	blt.n	8005f50 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	f003 021f 	and.w	r2, r3, #31
 8005f30:	490a      	ldr	r1, [pc, #40]	@ (8005f5c <__NVIC_DisableIRQ+0x44>)
 8005f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	2001      	movs	r0, #1
 8005f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f3e:	3320      	adds	r3, #32
 8005f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f44:	f3bf 8f4f 	dsb	sy
}
 8005f48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f4a:	f3bf 8f6f 	isb	sy
}
 8005f4e:	bf00      	nop
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	e000e100 	.word	0xe000e100

08005f60 <__NVIC_SetPriority>:
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	6039      	str	r1, [r7, #0]
 8005f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	db0a      	blt.n	8005f8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	490c      	ldr	r1, [pc, #48]	@ (8005fac <__NVIC_SetPriority+0x4c>)
 8005f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f7e:	0112      	lsls	r2, r2, #4
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	440b      	add	r3, r1
 8005f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005f88:	e00a      	b.n	8005fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	4908      	ldr	r1, [pc, #32]	@ (8005fb0 <__NVIC_SetPriority+0x50>)
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	3b04      	subs	r3, #4
 8005f98:	0112      	lsls	r2, r2, #4
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	761a      	strb	r2, [r3, #24]
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bc80      	pop	{r7}
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	e000e100 	.word	0xe000e100
 8005fb0:	e000ed00 	.word	0xe000ed00

08005fb4 <NVIC_EncodePriority>:
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b089      	sub	sp, #36	@ 0x24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f1c3 0307 	rsb	r3, r3, #7
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	bf28      	it	cs
 8005fd2:	2304      	movcs	r3, #4
 8005fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	2b06      	cmp	r3, #6
 8005fdc:	d902      	bls.n	8005fe4 <NVIC_EncodePriority+0x30>
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	3b03      	subs	r3, #3
 8005fe2:	e000      	b.n	8005fe6 <NVIC_EncodePriority+0x32>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff2:	43da      	mvns	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	401a      	ands	r2, r3
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	fa01 f303 	lsl.w	r3, r1, r3
 8006006:	43d9      	mvns	r1, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800600c:	4313      	orrs	r3, r2
}
 800600e:	4618      	mov	r0, r3
 8006010:	3724      	adds	r7, #36	@ 0x24
 8006012:	46bd      	mov	sp, r7
 8006014:	bc80      	pop	{r7}
 8006016:	4770      	bx	lr

08006018 <SysTick_Config>:
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3b01      	subs	r3, #1
 8006024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006028:	d301      	bcc.n	800602e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800602a:	2301      	movs	r3, #1
 800602c:	e00f      	b.n	800604e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800602e:	4a0a      	ldr	r2, [pc, #40]	@ (8006058 <SysTick_Config+0x40>)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3b01      	subs	r3, #1
 8006034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006036:	210f      	movs	r1, #15
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	f7ff ff90 	bl	8005f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006040:	4b05      	ldr	r3, [pc, #20]	@ (8006058 <SysTick_Config+0x40>)
 8006042:	2200      	movs	r2, #0
 8006044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006046:	4b04      	ldr	r3, [pc, #16]	@ (8006058 <SysTick_Config+0x40>)
 8006048:	2207      	movs	r2, #7
 800604a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	e000e010 	.word	0xe000e010

0800605c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff ff09 	bl	8005e7c <__NVIC_SetPriorityGrouping>
}
 800606a:	bf00      	nop
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b086      	sub	sp, #24
 8006076:	af00      	add	r7, sp, #0
 8006078:	4603      	mov	r3, r0
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	607a      	str	r2, [r7, #4]
 800607e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006084:	f7ff ff1e 	bl	8005ec4 <__NVIC_GetPriorityGrouping>
 8006088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	6978      	ldr	r0, [r7, #20]
 8006090:	f7ff ff90 	bl	8005fb4 <NVIC_EncodePriority>
 8006094:	4602      	mov	r2, r0
 8006096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800609a:	4611      	mov	r1, r2
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff ff5f 	bl	8005f60 <__NVIC_SetPriority>
}
 80060a2:	bf00      	nop
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	4603      	mov	r3, r0
 80060b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff ff11 	bl	8005ee0 <__NVIC_EnableIRQ>
}
 80060be:	bf00      	nop
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	4603      	mov	r3, r0
 80060ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80060d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff ff1f 	bl	8005f18 <__NVIC_DisableIRQ>
}
 80060da:	bf00      	nop
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b082      	sub	sp, #8
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7ff ff94 	bl	8006018 <SysTick_Config>
 80060f0:	4603      	mov	r3, r0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d005      	beq.n	800611e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2204      	movs	r2, #4
 8006116:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
 800611c:	e029      	b.n	8006172 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 020e 	bic.w	r2, r2, #14
 800612c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0201 	bic.w	r2, r2, #1
 800613c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006142:	f003 021c 	and.w	r2, r3, #28
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614a:	2101      	movs	r1, #1
 800614c:	fa01 f202 	lsl.w	r2, r1, r2
 8006150:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
    }
  }
  return status;
 8006172:	7bfb      	ldrb	r3, [r7, #15]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800618a:	b2db      	uxtb	r3, r3
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr
	...

08006198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80061a2:	2300      	movs	r3, #0
 80061a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80061aa:	2300      	movs	r3, #0
 80061ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80061ae:	e160      	b.n	8006472 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	2101      	movs	r1, #1
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	fa01 f303 	lsl.w	r3, r1, r3
 80061bc:	4013      	ands	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8152 	beq.w	800646c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d005      	beq.n	80061e0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d130      	bne.n	8006242 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	2203      	movs	r2, #3
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	43db      	mvns	r3, r3
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4013      	ands	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8006216:	2201      	movs	r2, #1
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	43db      	mvns	r3, r3
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4013      	ands	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	091b      	lsrs	r3, r3, #4
 800622c:	f003 0201 	and.w	r2, r3, #1
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	fa02 f303 	lsl.w	r3, r2, r3
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	2b03      	cmp	r3, #3
 800624c:	d017      	beq.n	800627e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	2203      	movs	r2, #3
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	43db      	mvns	r3, r3
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	4013      	ands	r3, r2
 8006264:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d123      	bne.n	80062d2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	08da      	lsrs	r2, r3, #3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3208      	adds	r2, #8
 8006292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006296:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	220f      	movs	r2, #15
 80062a2:	fa02 f303 	lsl.w	r3, r2, r3
 80062a6:	43db      	mvns	r3, r3
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4013      	ands	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	691a      	ldr	r2, [r3, #16]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	08da      	lsrs	r2, r3, #3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3208      	adds	r2, #8
 80062cc:	6939      	ldr	r1, [r7, #16]
 80062ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	2203      	movs	r2, #3
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	43db      	mvns	r3, r3
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4013      	ands	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f003 0203 	and.w	r2, r3, #3
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 80ac 	beq.w	800646c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006314:	4b5e      	ldr	r3, [pc, #376]	@ (8006490 <HAL_GPIO_Init+0x2f8>)
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	4a5d      	ldr	r2, [pc, #372]	@ (8006490 <HAL_GPIO_Init+0x2f8>)
 800631a:	f043 0301 	orr.w	r3, r3, #1
 800631e:	6213      	str	r3, [r2, #32]
 8006320:	4b5b      	ldr	r3, [pc, #364]	@ (8006490 <HAL_GPIO_Init+0x2f8>)
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	60bb      	str	r3, [r7, #8]
 800632a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800632c:	4a59      	ldr	r2, [pc, #356]	@ (8006494 <HAL_GPIO_Init+0x2fc>)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	089b      	lsrs	r3, r3, #2
 8006332:	3302      	adds	r3, #2
 8006334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006338:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f003 0303 	and.w	r3, r3, #3
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	220f      	movs	r2, #15
 8006344:	fa02 f303 	lsl.w	r3, r2, r3
 8006348:	43db      	mvns	r3, r3
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4013      	ands	r3, r2
 800634e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a51      	ldr	r2, [pc, #324]	@ (8006498 <HAL_GPIO_Init+0x300>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d025      	beq.n	80063a4 <HAL_GPIO_Init+0x20c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a50      	ldr	r2, [pc, #320]	@ (800649c <HAL_GPIO_Init+0x304>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d01f      	beq.n	80063a0 <HAL_GPIO_Init+0x208>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a4f      	ldr	r2, [pc, #316]	@ (80064a0 <HAL_GPIO_Init+0x308>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d019      	beq.n	800639c <HAL_GPIO_Init+0x204>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a4e      	ldr	r2, [pc, #312]	@ (80064a4 <HAL_GPIO_Init+0x30c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d013      	beq.n	8006398 <HAL_GPIO_Init+0x200>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a4d      	ldr	r2, [pc, #308]	@ (80064a8 <HAL_GPIO_Init+0x310>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00d      	beq.n	8006394 <HAL_GPIO_Init+0x1fc>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a4c      	ldr	r2, [pc, #304]	@ (80064ac <HAL_GPIO_Init+0x314>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d007      	beq.n	8006390 <HAL_GPIO_Init+0x1f8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a4b      	ldr	r2, [pc, #300]	@ (80064b0 <HAL_GPIO_Init+0x318>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d101      	bne.n	800638c <HAL_GPIO_Init+0x1f4>
 8006388:	2306      	movs	r3, #6
 800638a:	e00c      	b.n	80063a6 <HAL_GPIO_Init+0x20e>
 800638c:	2307      	movs	r3, #7
 800638e:	e00a      	b.n	80063a6 <HAL_GPIO_Init+0x20e>
 8006390:	2305      	movs	r3, #5
 8006392:	e008      	b.n	80063a6 <HAL_GPIO_Init+0x20e>
 8006394:	2304      	movs	r3, #4
 8006396:	e006      	b.n	80063a6 <HAL_GPIO_Init+0x20e>
 8006398:	2303      	movs	r3, #3
 800639a:	e004      	b.n	80063a6 <HAL_GPIO_Init+0x20e>
 800639c:	2302      	movs	r3, #2
 800639e:	e002      	b.n	80063a6 <HAL_GPIO_Init+0x20e>
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <HAL_GPIO_Init+0x20e>
 80063a4:	2300      	movs	r3, #0
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	f002 0203 	and.w	r2, r2, #3
 80063ac:	0092      	lsls	r2, r2, #2
 80063ae:	4093      	lsls	r3, r2
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80063b6:	4937      	ldr	r1, [pc, #220]	@ (8006494 <HAL_GPIO_Init+0x2fc>)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	089b      	lsrs	r3, r3, #2
 80063bc:	3302      	adds	r3, #2
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80063c4:	4b3b      	ldr	r3, [pc, #236]	@ (80064b4 <HAL_GPIO_Init+0x31c>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4013      	ands	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80063e8:	4a32      	ldr	r2, [pc, #200]	@ (80064b4 <HAL_GPIO_Init+0x31c>)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063ee:	4b31      	ldr	r3, [pc, #196]	@ (80064b4 <HAL_GPIO_Init+0x31c>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	43db      	mvns	r3, r3
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4013      	ands	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006412:	4a28      	ldr	r2, [pc, #160]	@ (80064b4 <HAL_GPIO_Init+0x31c>)
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006418:	4b26      	ldr	r3, [pc, #152]	@ (80064b4 <HAL_GPIO_Init+0x31c>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	43db      	mvns	r3, r3
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4013      	ands	r3, r2
 8006426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800643c:	4a1d      	ldr	r2, [pc, #116]	@ (80064b4 <HAL_GPIO_Init+0x31c>)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006442:	4b1c      	ldr	r3, [pc, #112]	@ (80064b4 <HAL_GPIO_Init+0x31c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	43db      	mvns	r3, r3
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4013      	ands	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006466:	4a13      	ldr	r2, [pc, #76]	@ (80064b4 <HAL_GPIO_Init+0x31c>)
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	3301      	adds	r3, #1
 8006470:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	f47f ae97 	bne.w	80061b0 <HAL_GPIO_Init+0x18>
  }
}
 8006482:	bf00      	nop
 8006484:	bf00      	nop
 8006486:	371c      	adds	r7, #28
 8006488:	46bd      	mov	sp, r7
 800648a:	bc80      	pop	{r7}
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	40023800 	.word	0x40023800
 8006494:	40010000 	.word	0x40010000
 8006498:	40020000 	.word	0x40020000
 800649c:	40020400 	.word	0x40020400
 80064a0:	40020800 	.word	0x40020800
 80064a4:	40020c00 	.word	0x40020c00
 80064a8:	40021000 	.word	0x40021000
 80064ac:	40021400 	.word	0x40021400
 80064b0:	40021800 	.word	0x40021800
 80064b4:	40010400 	.word	0x40010400

080064b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80064c6:	2300      	movs	r3, #0
 80064c8:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80064ce:	e0c4      	b.n	800665a <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80064d0:	2201      	movs	r2, #1
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	fa02 f303 	lsl.w	r3, r2, r3
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	4013      	ands	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80b7 	beq.w	8006654 <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 80064e6:	4a63      	ldr	r2, [pc, #396]	@ (8006674 <HAL_GPIO_DeInit+0x1bc>)
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	089b      	lsrs	r3, r3, #2
 80064ec:	3302      	adds	r3, #2
 80064ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f2:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	220f      	movs	r2, #15
 80064fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4013      	ands	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a5b      	ldr	r2, [pc, #364]	@ (8006678 <HAL_GPIO_DeInit+0x1c0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d025      	beq.n	800655c <HAL_GPIO_DeInit+0xa4>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a5a      	ldr	r2, [pc, #360]	@ (800667c <HAL_GPIO_DeInit+0x1c4>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d01f      	beq.n	8006558 <HAL_GPIO_DeInit+0xa0>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a59      	ldr	r2, [pc, #356]	@ (8006680 <HAL_GPIO_DeInit+0x1c8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d019      	beq.n	8006554 <HAL_GPIO_DeInit+0x9c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a58      	ldr	r2, [pc, #352]	@ (8006684 <HAL_GPIO_DeInit+0x1cc>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d013      	beq.n	8006550 <HAL_GPIO_DeInit+0x98>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a57      	ldr	r2, [pc, #348]	@ (8006688 <HAL_GPIO_DeInit+0x1d0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00d      	beq.n	800654c <HAL_GPIO_DeInit+0x94>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a56      	ldr	r2, [pc, #344]	@ (800668c <HAL_GPIO_DeInit+0x1d4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d007      	beq.n	8006548 <HAL_GPIO_DeInit+0x90>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a55      	ldr	r2, [pc, #340]	@ (8006690 <HAL_GPIO_DeInit+0x1d8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d101      	bne.n	8006544 <HAL_GPIO_DeInit+0x8c>
 8006540:	2306      	movs	r3, #6
 8006542:	e00c      	b.n	800655e <HAL_GPIO_DeInit+0xa6>
 8006544:	2307      	movs	r3, #7
 8006546:	e00a      	b.n	800655e <HAL_GPIO_DeInit+0xa6>
 8006548:	2305      	movs	r3, #5
 800654a:	e008      	b.n	800655e <HAL_GPIO_DeInit+0xa6>
 800654c:	2304      	movs	r3, #4
 800654e:	e006      	b.n	800655e <HAL_GPIO_DeInit+0xa6>
 8006550:	2303      	movs	r3, #3
 8006552:	e004      	b.n	800655e <HAL_GPIO_DeInit+0xa6>
 8006554:	2302      	movs	r3, #2
 8006556:	e002      	b.n	800655e <HAL_GPIO_DeInit+0xa6>
 8006558:	2301      	movs	r3, #1
 800655a:	e000      	b.n	800655e <HAL_GPIO_DeInit+0xa6>
 800655c:	2300      	movs	r3, #0
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	f002 0203 	and.w	r2, r2, #3
 8006564:	0092      	lsls	r2, r2, #2
 8006566:	4093      	lsls	r3, r2
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	429a      	cmp	r2, r3
 800656c:	d132      	bne.n	80065d4 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800656e:	4b49      	ldr	r3, [pc, #292]	@ (8006694 <HAL_GPIO_DeInit+0x1dc>)
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	43db      	mvns	r3, r3
 8006576:	4947      	ldr	r1, [pc, #284]	@ (8006694 <HAL_GPIO_DeInit+0x1dc>)
 8006578:	4013      	ands	r3, r2
 800657a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800657c:	4b45      	ldr	r3, [pc, #276]	@ (8006694 <HAL_GPIO_DeInit+0x1dc>)
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	43db      	mvns	r3, r3
 8006584:	4943      	ldr	r1, [pc, #268]	@ (8006694 <HAL_GPIO_DeInit+0x1dc>)
 8006586:	4013      	ands	r3, r2
 8006588:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800658a:	4b42      	ldr	r3, [pc, #264]	@ (8006694 <HAL_GPIO_DeInit+0x1dc>)
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	43db      	mvns	r3, r3
 8006592:	4940      	ldr	r1, [pc, #256]	@ (8006694 <HAL_GPIO_DeInit+0x1dc>)
 8006594:	4013      	ands	r3, r2
 8006596:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8006598:	4b3e      	ldr	r3, [pc, #248]	@ (8006694 <HAL_GPIO_DeInit+0x1dc>)
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	43db      	mvns	r3, r3
 80065a0:	493c      	ldr	r1, [pc, #240]	@ (8006694 <HAL_GPIO_DeInit+0x1dc>)
 80065a2:	4013      	ands	r3, r2
 80065a4:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	220f      	movs	r2, #15
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80065b6:	4a2f      	ldr	r2, [pc, #188]	@ (8006674 <HAL_GPIO_DeInit+0x1bc>)
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	089b      	lsrs	r3, r3, #2
 80065bc:	3302      	adds	r3, #2
 80065be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	43da      	mvns	r2, r3
 80065c6:	482b      	ldr	r0, [pc, #172]	@ (8006674 <HAL_GPIO_DeInit+0x1bc>)
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	089b      	lsrs	r3, r3, #2
 80065cc:	400a      	ands	r2, r1
 80065ce:	3302      	adds	r3, #2
 80065d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	2103      	movs	r1, #3
 80065de:	fa01 f303 	lsl.w	r3, r1, r3
 80065e2:	43db      	mvns	r3, r3
 80065e4:	401a      	ands	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	08da      	lsrs	r2, r3, #3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3208      	adds	r2, #8
 80065f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	220f      	movs	r2, #15
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	43db      	mvns	r3, r3
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	08d2      	lsrs	r2, r2, #3
 800660a:	4019      	ands	r1, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3208      	adds	r2, #8
 8006610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	2103      	movs	r1, #3
 800661e:	fa01 f303 	lsl.w	r3, r1, r3
 8006622:	43db      	mvns	r3, r3
 8006624:	401a      	ands	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	2101      	movs	r1, #1
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	fa01 f303 	lsl.w	r3, r1, r3
 8006636:	43db      	mvns	r3, r3
 8006638:	401a      	ands	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	2103      	movs	r1, #3
 8006648:	fa01 f303 	lsl.w	r3, r1, r3
 800664c:	43db      	mvns	r3, r3
 800664e:	401a      	ands	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	3301      	adds	r3, #1
 8006658:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	fa22 f303 	lsr.w	r3, r2, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	f47f af34 	bne.w	80064d0 <HAL_GPIO_DeInit+0x18>
  }
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr
 8006674:	40010000 	.word	0x40010000
 8006678:	40020000 	.word	0x40020000
 800667c:	40020400 	.word	0x40020400
 8006680:	40020800 	.word	0x40020800
 8006684:	40020c00 	.word	0x40020c00
 8006688:	40021000 	.word	0x40021000
 800668c:	40021400 	.word	0x40021400
 8006690:	40021800 	.word	0x40021800
 8006694:	40010400 	.word	0x40010400

08006698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	807b      	strh	r3, [r7, #2]
 80066a4:	4613      	mov	r3, r2
 80066a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066a8:	787b      	ldrb	r3, [r7, #1]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066ae:	887a      	ldrh	r2, [r7, #2]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80066b4:	e003      	b.n	80066be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80066b6:	887b      	ldrh	r3, [r7, #2]
 80066b8:	041a      	lsls	r2, r3, #16
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	619a      	str	r2, [r3, #24]
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr

080066c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80066d2:	4b08      	ldr	r3, [pc, #32]	@ (80066f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066d4:	695a      	ldr	r2, [r3, #20]
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	4013      	ands	r3, r2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d006      	beq.n	80066ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066de:	4a05      	ldr	r2, [pc, #20]	@ (80066f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066e4:	88fb      	ldrh	r3, [r7, #6]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fb ff02 	bl	80024f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80066ec:	bf00      	nop
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	40010400 	.word	0x40010400

080066f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e12b      	b.n	8006962 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d106      	bne.n	8006724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f95d 	bl	80069de <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2224      	movs	r2, #36	@ 0x24
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0201 	bic.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800674a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800675a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800675c:	f003 fa6c 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 8006760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	4a81      	ldr	r2, [pc, #516]	@ (800696c <HAL_I2C_Init+0x274>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d807      	bhi.n	800677c <HAL_I2C_Init+0x84>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a80      	ldr	r2, [pc, #512]	@ (8006970 <HAL_I2C_Init+0x278>)
 8006770:	4293      	cmp	r3, r2
 8006772:	bf94      	ite	ls
 8006774:	2301      	movls	r3, #1
 8006776:	2300      	movhi	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	e006      	b.n	800678a <HAL_I2C_Init+0x92>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4a7d      	ldr	r2, [pc, #500]	@ (8006974 <HAL_I2C_Init+0x27c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	bf94      	ite	ls
 8006784:	2301      	movls	r3, #1
 8006786:	2300      	movhi	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e0e7      	b.n	8006962 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4a78      	ldr	r2, [pc, #480]	@ (8006978 <HAL_I2C_Init+0x280>)
 8006796:	fba2 2303 	umull	r2, r3, r2, r3
 800679a:	0c9b      	lsrs	r3, r3, #18
 800679c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	4a6a      	ldr	r2, [pc, #424]	@ (800696c <HAL_I2C_Init+0x274>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d802      	bhi.n	80067cc <HAL_I2C_Init+0xd4>
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	3301      	adds	r3, #1
 80067ca:	e009      	b.n	80067e0 <HAL_I2C_Init+0xe8>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80067d2:	fb02 f303 	mul.w	r3, r2, r3
 80067d6:	4a69      	ldr	r2, [pc, #420]	@ (800697c <HAL_I2C_Init+0x284>)
 80067d8:	fba2 2303 	umull	r2, r3, r2, r3
 80067dc:	099b      	lsrs	r3, r3, #6
 80067de:	3301      	adds	r3, #1
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6812      	ldr	r2, [r2, #0]
 80067e4:	430b      	orrs	r3, r1
 80067e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80067f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	495c      	ldr	r1, [pc, #368]	@ (800696c <HAL_I2C_Init+0x274>)
 80067fc:	428b      	cmp	r3, r1
 80067fe:	d819      	bhi.n	8006834 <HAL_I2C_Init+0x13c>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	1e59      	subs	r1, r3, #1
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	fbb1 f3f3 	udiv	r3, r1, r3
 800680e:	1c59      	adds	r1, r3, #1
 8006810:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006814:	400b      	ands	r3, r1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <HAL_I2C_Init+0x138>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	1e59      	subs	r1, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	fbb1 f3f3 	udiv	r3, r1, r3
 8006828:	3301      	adds	r3, #1
 800682a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800682e:	e051      	b.n	80068d4 <HAL_I2C_Init+0x1dc>
 8006830:	2304      	movs	r3, #4
 8006832:	e04f      	b.n	80068d4 <HAL_I2C_Init+0x1dc>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d111      	bne.n	8006860 <HAL_I2C_Init+0x168>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	1e58      	subs	r0, r3, #1
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6859      	ldr	r1, [r3, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	440b      	add	r3, r1
 800684a:	fbb0 f3f3 	udiv	r3, r0, r3
 800684e:	3301      	adds	r3, #1
 8006850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006854:	2b00      	cmp	r3, #0
 8006856:	bf0c      	ite	eq
 8006858:	2301      	moveq	r3, #1
 800685a:	2300      	movne	r3, #0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	e012      	b.n	8006886 <HAL_I2C_Init+0x18e>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	1e58      	subs	r0, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6859      	ldr	r1, [r3, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	0099      	lsls	r1, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	fbb0 f3f3 	udiv	r3, r0, r3
 8006876:	3301      	adds	r3, #1
 8006878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800687c:	2b00      	cmp	r3, #0
 800687e:	bf0c      	ite	eq
 8006880:	2301      	moveq	r3, #1
 8006882:	2300      	movne	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <HAL_I2C_Init+0x196>
 800688a:	2301      	movs	r3, #1
 800688c:	e022      	b.n	80068d4 <HAL_I2C_Init+0x1dc>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10e      	bne.n	80068b4 <HAL_I2C_Init+0x1bc>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1e58      	subs	r0, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6859      	ldr	r1, [r3, #4]
 800689e:	460b      	mov	r3, r1
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	440b      	add	r3, r1
 80068a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80068a8:	3301      	adds	r3, #1
 80068aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068b2:	e00f      	b.n	80068d4 <HAL_I2C_Init+0x1dc>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	1e58      	subs	r0, r3, #1
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6859      	ldr	r1, [r3, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	0099      	lsls	r1, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80068ca:	3301      	adds	r3, #1
 80068cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	6809      	ldr	r1, [r1, #0]
 80068d8:	4313      	orrs	r3, r2
 80068da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69da      	ldr	r2, [r3, #28]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006902:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6911      	ldr	r1, [r2, #16]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	68d2      	ldr	r2, [r2, #12]
 800690e:	4311      	orrs	r1, r2
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6812      	ldr	r2, [r2, #0]
 8006914:	430b      	orrs	r3, r1
 8006916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	695a      	ldr	r2, [r3, #20]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0201 	orr.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2220      	movs	r2, #32
 800694e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	000186a0 	.word	0x000186a0
 8006970:	001e847f 	.word	0x001e847f
 8006974:	003d08ff 	.word	0x003d08ff
 8006978:	431bde83 	.word	0x431bde83
 800697c:	10624dd3 	.word	0x10624dd3

08006980 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e021      	b.n	80069d6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2224      	movs	r2, #36	@ 0x24
 8006996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0201 	bic.w	r2, r2, #1
 80069a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f820 	bl	80069f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr

08006a02 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a14:	2b80      	cmp	r3, #128	@ 0x80
 8006a16:	d103      	bne.n	8006a20 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	611a      	str	r2, [r3, #16]
  }
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr
	...

08006a2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	4608      	mov	r0, r1
 8006a36:	4611      	mov	r1, r2
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	817b      	strh	r3, [r7, #10]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	813b      	strh	r3, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a46:	f7fe fd75 	bl	8005534 <HAL_GetTick>
 8006a4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	f040 80d9 	bne.w	8006c0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	2319      	movs	r3, #25
 8006a60:	2201      	movs	r2, #1
 8006a62:	496d      	ldr	r1, [pc, #436]	@ (8006c18 <HAL_I2C_Mem_Write+0x1ec>)
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f002 f8f7 	bl	8008c58 <I2C_WaitOnFlagUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a70:	2302      	movs	r3, #2
 8006a72:	e0cc      	b.n	8006c0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_I2C_Mem_Write+0x56>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e0c5      	b.n	8006c0e <HAL_I2C_Mem_Write+0x1e2>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d007      	beq.n	8006aa8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ab6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2221      	movs	r2, #33	@ 0x21
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2240      	movs	r2, #64	@ 0x40
 8006ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a3a      	ldr	r2, [r7, #32]
 8006ad2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4a4d      	ldr	r2, [pc, #308]	@ (8006c1c <HAL_I2C_Mem_Write+0x1f0>)
 8006ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aea:	88f8      	ldrh	r0, [r7, #6]
 8006aec:	893a      	ldrh	r2, [r7, #8]
 8006aee:	8979      	ldrh	r1, [r7, #10]
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	9301      	str	r3, [sp, #4]
 8006af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	4603      	mov	r3, r0
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f001 fe86 	bl	800880c <I2C_RequestMemoryWrite>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d052      	beq.n	8006bac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e081      	b.n	8006c0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f002 f9bc 	bl	8008e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00d      	beq.n	8006b36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d107      	bne.n	8006b32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e06b      	b.n	8006c0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3a:	781a      	ldrb	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d11b      	bne.n	8006bac <HAL_I2C_Mem_Write+0x180>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d017      	beq.n	8006bac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b80:	781a      	ldrb	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1aa      	bne.n	8006b0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f002 f9af 	bl	8008f1c <I2C_WaitOnBTFFlagUntilTimeout>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00d      	beq.n	8006be0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d107      	bne.n	8006bdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e016      	b.n	8006c0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	e000      	b.n	8006c0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c0c:	2302      	movs	r3, #2
  }
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	00100002 	.word	0x00100002
 8006c1c:	ffff0000 	.word	0xffff0000

08006c20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08c      	sub	sp, #48	@ 0x30
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	4608      	mov	r0, r1
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4603      	mov	r3, r0
 8006c30:	817b      	strh	r3, [r7, #10]
 8006c32:	460b      	mov	r3, r1
 8006c34:	813b      	strh	r3, [r7, #8]
 8006c36:	4613      	mov	r3, r2
 8006c38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c3a:	f7fe fc7b 	bl	8005534 <HAL_GetTick>
 8006c3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	f040 8208 	bne.w	800705e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	2319      	movs	r3, #25
 8006c54:	2201      	movs	r2, #1
 8006c56:	497b      	ldr	r1, [pc, #492]	@ (8006e44 <HAL_I2C_Mem_Read+0x224>)
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f001 fffd 	bl	8008c58 <I2C_WaitOnFlagUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c64:	2302      	movs	r3, #2
 8006c66:	e1fb      	b.n	8007060 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <HAL_I2C_Mem_Read+0x56>
 8006c72:	2302      	movs	r3, #2
 8006c74:	e1f4      	b.n	8007060 <HAL_I2C_Mem_Read+0x440>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d007      	beq.n	8006c9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006caa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2222      	movs	r2, #34	@ 0x22
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2240      	movs	r2, #64	@ 0x40
 8006cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4a5b      	ldr	r2, [pc, #364]	@ (8006e48 <HAL_I2C_Mem_Read+0x228>)
 8006cdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cde:	88f8      	ldrh	r0, [r7, #6]
 8006ce0:	893a      	ldrh	r2, [r7, #8]
 8006ce2:	8979      	ldrh	r1, [r7, #10]
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	9301      	str	r3, [sp, #4]
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	4603      	mov	r3, r0
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f001 fe22 	bl	8008938 <I2C_RequestMemoryRead>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e1b0      	b.n	8007060 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d113      	bne.n	8006d2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d06:	2300      	movs	r3, #0
 8006d08:	623b      	str	r3, [r7, #32]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	623b      	str	r3, [r7, #32]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	623b      	str	r3, [r7, #32]
 8006d1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	e184      	b.n	8007038 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d11b      	bne.n	8006d6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d46:	2300      	movs	r3, #0
 8006d48:	61fb      	str	r3, [r7, #28]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	61fb      	str	r3, [r7, #28]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	61fb      	str	r3, [r7, #28]
 8006d5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e164      	b.n	8007038 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d11b      	bne.n	8006dae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d96:	2300      	movs	r3, #0
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	61bb      	str	r3, [r7, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	e144      	b.n	8007038 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dae:	2300      	movs	r3, #0
 8006db0:	617b      	str	r3, [r7, #20]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006dc4:	e138      	b.n	8007038 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	f200 80f1 	bhi.w	8006fb2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d123      	bne.n	8006e20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f002 f917 	bl	8009010 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e139      	b.n	8007060 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691a      	ldr	r2, [r3, #16]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	3b01      	subs	r3, #1
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e1e:	e10b      	b.n	8007038 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d14e      	bne.n	8006ec6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2e:	2200      	movs	r2, #0
 8006e30:	4906      	ldr	r1, [pc, #24]	@ (8006e4c <HAL_I2C_Mem_Read+0x22c>)
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f001 ff10 	bl	8008c58 <I2C_WaitOnFlagUntilTimeout>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d008      	beq.n	8006e50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e10e      	b.n	8007060 <HAL_I2C_Mem_Read+0x440>
 8006e42:	bf00      	nop
 8006e44:	00100002 	.word	0x00100002
 8006e48:	ffff0000 	.word	0xffff0000
 8006e4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	691a      	ldr	r2, [r3, #16]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006ec4:	e0b8      	b.n	8007038 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ecc:	2200      	movs	r2, #0
 8006ece:	4966      	ldr	r1, [pc, #408]	@ (8007068 <HAL_I2C_Mem_Read+0x448>)
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f001 fec1 	bl	8008c58 <I2C_WaitOnFlagUntilTimeout>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e0bf      	b.n	8007060 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	691a      	ldr	r2, [r3, #16]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efa:	b2d2      	uxtb	r2, r2
 8006efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f28:	2200      	movs	r2, #0
 8006f2a:	494f      	ldr	r1, [pc, #316]	@ (8007068 <HAL_I2C_Mem_Read+0x448>)
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f001 fe93 	bl	8008c58 <I2C_WaitOnFlagUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e091      	b.n	8007060 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691a      	ldr	r2, [r3, #16]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	3b01      	subs	r3, #1
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691a      	ldr	r2, [r3, #16]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006fb0:	e042      	b.n	8007038 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f002 f82a 	bl	8009010 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e04c      	b.n	8007060 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	f003 0304 	and.w	r3, r3, #4
 8007002:	2b04      	cmp	r3, #4
 8007004:	d118      	bne.n	8007038 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800703c:	2b00      	cmp	r3, #0
 800703e:	f47f aec2 	bne.w	8006dc6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	e000      	b.n	8007060 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800705e:	2302      	movs	r3, #2
  }
}
 8007060:	4618      	mov	r0, r3
 8007062:	3728      	adds	r7, #40	@ 0x28
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	00010004 	.word	0x00010004

0800706c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007084:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800708c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007094:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007096:	7bfb      	ldrb	r3, [r7, #15]
 8007098:	2b10      	cmp	r3, #16
 800709a:	d003      	beq.n	80070a4 <HAL_I2C_EV_IRQHandler+0x38>
 800709c:	7bfb      	ldrb	r3, [r7, #15]
 800709e:	2b40      	cmp	r3, #64	@ 0x40
 80070a0:	f040 80b1 	bne.w	8007206 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10d      	bne.n	80070da <HAL_I2C_EV_IRQHandler+0x6e>
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80070c4:	d003      	beq.n	80070ce <HAL_I2C_EV_IRQHandler+0x62>
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80070cc:	d101      	bne.n	80070d2 <HAL_I2C_EV_IRQHandler+0x66>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <HAL_I2C_EV_IRQHandler+0x68>
 80070d2:	2300      	movs	r3, #0
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	f000 8114 	beq.w	8007302 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00b      	beq.n	80070fc <HAL_I2C_EV_IRQHandler+0x90>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d006      	beq.n	80070fc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f002 f819 	bl	8009126 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fd70 	bl	8007bda <I2C_Master_SB>
 80070fa:	e083      	b.n	8007204 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	f003 0308 	and.w	r3, r3, #8
 8007102:	2b00      	cmp	r3, #0
 8007104:	d008      	beq.n	8007118 <HAL_I2C_EV_IRQHandler+0xac>
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fde7 	bl	8007ce4 <I2C_Master_ADD10>
 8007116:	e075      	b.n	8007204 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d008      	beq.n	8007134 <HAL_I2C_EV_IRQHandler+0xc8>
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fe02 	bl	8007d36 <I2C_Master_ADDR>
 8007132:	e067      	b.n	8007204 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	2b00      	cmp	r3, #0
 800713c:	d036      	beq.n	80071ac <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800714c:	f000 80db 	beq.w	8007306 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00d      	beq.n	8007176 <HAL_I2C_EV_IRQHandler+0x10a>
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007160:	2b00      	cmp	r3, #0
 8007162:	d008      	beq.n	8007176 <HAL_I2C_EV_IRQHandler+0x10a>
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	f003 0304 	and.w	r3, r3, #4
 800716a:	2b00      	cmp	r3, #0
 800716c:	d103      	bne.n	8007176 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f9e4 	bl	800753c <I2C_MasterTransmit_TXE>
 8007174:	e046      	b.n	8007204 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 80c2 	beq.w	8007306 <HAL_I2C_EV_IRQHandler+0x29a>
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 80bc 	beq.w	8007306 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	2b21      	cmp	r3, #33	@ 0x21
 8007192:	d103      	bne.n	800719c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fa6d 	bl	8007674 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800719a:	e0b4      	b.n	8007306 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	2b40      	cmp	r3, #64	@ 0x40
 80071a0:	f040 80b1 	bne.w	8007306 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fadb 	bl	8007760 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071aa:	e0ac      	b.n	8007306 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071ba:	f000 80a4 	beq.w	8007306 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00d      	beq.n	80071e4 <HAL_I2C_EV_IRQHandler+0x178>
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d008      	beq.n	80071e4 <HAL_I2C_EV_IRQHandler+0x178>
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d103      	bne.n	80071e4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fb57 	bl	8007890 <I2C_MasterReceive_RXNE>
 80071e2:	e00f      	b.n	8007204 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	f003 0304 	and.w	r3, r3, #4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 808b 	beq.w	8007306 <HAL_I2C_EV_IRQHandler+0x29a>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 8085 	beq.w	8007306 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fc02 	bl	8007a06 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007202:	e080      	b.n	8007306 <HAL_I2C_EV_IRQHandler+0x29a>
 8007204:	e07f      	b.n	8007306 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d004      	beq.n	8007218 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	e007      	b.n	8007228 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d011      	beq.n	8007256 <HAL_I2C_EV_IRQHandler+0x1ea>
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00c      	beq.n	8007256 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800724c:	69b9      	ldr	r1, [r7, #24]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 ffbd 	bl	80081ce <I2C_Slave_ADDR>
 8007254:	e05a      	b.n	800730c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	f003 0310 	and.w	r3, r3, #16
 800725c:	2b00      	cmp	r3, #0
 800725e:	d008      	beq.n	8007272 <HAL_I2C_EV_IRQHandler+0x206>
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fff8 	bl	8008260 <I2C_Slave_STOPF>
 8007270:	e04c      	b.n	800730c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	2b21      	cmp	r3, #33	@ 0x21
 8007276:	d002      	beq.n	800727e <HAL_I2C_EV_IRQHandler+0x212>
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b29      	cmp	r3, #41	@ 0x29
 800727c:	d120      	bne.n	80072c0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00d      	beq.n	80072a4 <HAL_I2C_EV_IRQHandler+0x238>
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800728e:	2b00      	cmp	r3, #0
 8007290:	d008      	beq.n	80072a4 <HAL_I2C_EV_IRQHandler+0x238>
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	f003 0304 	and.w	r3, r3, #4
 8007298:	2b00      	cmp	r3, #0
 800729a:	d103      	bne.n	80072a4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 feda 	bl	8008056 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072a2:	e032      	b.n	800730a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	f003 0304 	and.w	r3, r3, #4
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d02d      	beq.n	800730a <HAL_I2C_EV_IRQHandler+0x29e>
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d028      	beq.n	800730a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 ff09 	bl	80080d0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072be:	e024      	b.n	800730a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00d      	beq.n	80072e6 <HAL_I2C_EV_IRQHandler+0x27a>
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d008      	beq.n	80072e6 <HAL_I2C_EV_IRQHandler+0x27a>
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	f003 0304 	and.w	r3, r3, #4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d103      	bne.n	80072e6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 ff16 	bl	8008110 <I2C_SlaveReceive_RXNE>
 80072e4:	e012      	b.n	800730c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00d      	beq.n	800730c <HAL_I2C_EV_IRQHandler+0x2a0>
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d008      	beq.n	800730c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 ff46 	bl	800818c <I2C_SlaveReceive_BTF>
 8007300:	e004      	b.n	800730c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8007302:	bf00      	nop
 8007304:	e002      	b.n	800730c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007306:	bf00      	nop
 8007308:	e000      	b.n	800730c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800730a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800730c:	3720      	adds	r7, #32
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b08a      	sub	sp, #40	@ 0x28
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800732a:	2300      	movs	r3, #0
 800732c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007334:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00d      	beq.n	800735c <HAL_I2C_ER_IRQHandler+0x4a>
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007346:	2b00      	cmp	r3, #0
 8007348:	d008      	beq.n	800735c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	f043 0301 	orr.w	r3, r3, #1
 8007350:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800735a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00d      	beq.n	8007382 <HAL_I2C_ER_IRQHandler+0x70>
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	d008      	beq.n	8007382 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007372:	f043 0302 	orr.w	r3, r3, #2
 8007376:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8007380:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007388:	2b00      	cmp	r3, #0
 800738a:	d03e      	beq.n	800740a <HAL_I2C_ER_IRQHandler+0xf8>
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007392:	2b00      	cmp	r3, #0
 8007394:	d039      	beq.n	800740a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8007396:	7efb      	ldrb	r3, [r7, #27]
 8007398:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800739e:	b29b      	uxth	r3, r3
 80073a0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073a8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80073b0:	7ebb      	ldrb	r3, [r7, #26]
 80073b2:	2b20      	cmp	r3, #32
 80073b4:	d112      	bne.n	80073dc <HAL_I2C_ER_IRQHandler+0xca>
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10f      	bne.n	80073dc <HAL_I2C_ER_IRQHandler+0xca>
 80073bc:	7cfb      	ldrb	r3, [r7, #19]
 80073be:	2b21      	cmp	r3, #33	@ 0x21
 80073c0:	d008      	beq.n	80073d4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80073c2:	7cfb      	ldrb	r3, [r7, #19]
 80073c4:	2b29      	cmp	r3, #41	@ 0x29
 80073c6:	d005      	beq.n	80073d4 <HAL_I2C_ER_IRQHandler+0xc2>
 80073c8:	7cfb      	ldrb	r3, [r7, #19]
 80073ca:	2b28      	cmp	r3, #40	@ 0x28
 80073cc:	d106      	bne.n	80073dc <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b21      	cmp	r3, #33	@ 0x21
 80073d2:	d103      	bne.n	80073dc <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 f873 	bl	80084c0 <I2C_Slave_AF>
 80073da:	e016      	b.n	800740a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073e4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	f043 0304 	orr.w	r3, r3, #4
 80073ec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80073ee:	7efb      	ldrb	r3, [r7, #27]
 80073f0:	2b10      	cmp	r3, #16
 80073f2:	d002      	beq.n	80073fa <HAL_I2C_ER_IRQHandler+0xe8>
 80073f4:	7efb      	ldrb	r3, [r7, #27]
 80073f6:	2b40      	cmp	r3, #64	@ 0x40
 80073f8:	d107      	bne.n	800740a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007408:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00d      	beq.n	8007430 <HAL_I2C_ER_IRQHandler+0x11e>
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800741a:	2b00      	cmp	r3, #0
 800741c:	d008      	beq.n	8007430 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007420:	f043 0308 	orr.w	r3, r3, #8
 8007424:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800742e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	2b00      	cmp	r3, #0
 8007434:	d008      	beq.n	8007448 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 f8b0 	bl	80085a8 <I2C_ITError>
  }
}
 8007448:	bf00      	nop
 800744a:	3728      	adds	r7, #40	@ 0x28
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	bc80      	pop	{r7}
 8007460:	4770      	bx	lr

08007462 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	bc80      	pop	{r7}
 8007472:	4770      	bx	lr

08007474 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	bc80      	pop	{r7}
 8007484:	4770      	bx	lr

08007486 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	bc80      	pop	{r7}
 8007496:	4770      	bx	lr

08007498 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
 80074a4:	4613      	mov	r3, r2
 80074a6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bc80      	pop	{r7}
 80074b0:	4770      	bx	lr

080074b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80074ba:	bf00      	nop
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr

080074c4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr

080074d6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr

080074e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr

080074fa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	bc80      	pop	{r7}
 800750a:	4770      	bx	lr

0800750c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800751a:	b2db      	uxtb	r3, r3
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr

08007526 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8007532:	4618      	mov	r0, r3
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	bc80      	pop	{r7}
 800753a:	4770      	bx	lr

0800753c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800754a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007552:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007558:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800755e:	2b00      	cmp	r3, #0
 8007560:	d150      	bne.n	8007604 <I2C_MasterTransmit_TXE+0xc8>
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	2b21      	cmp	r3, #33	@ 0x21
 8007566:	d14d      	bne.n	8007604 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b08      	cmp	r3, #8
 800756c:	d01d      	beq.n	80075aa <I2C_MasterTransmit_TXE+0x6e>
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b20      	cmp	r3, #32
 8007572:	d01a      	beq.n	80075aa <I2C_MasterTransmit_TXE+0x6e>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800757a:	d016      	beq.n	80075aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800758a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2211      	movs	r2, #17
 8007590:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2220      	movs	r2, #32
 800759e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7ff ff54 	bl	8007450 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80075a8:	e060      	b.n	800766c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80075b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b40      	cmp	r3, #64	@ 0x40
 80075e2:	d107      	bne.n	80075f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7ff ff69 	bl	80074c4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80075f2:	e03b      	b.n	800766c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff ff27 	bl	8007450 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007602:	e033      	b.n	800766c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	2b21      	cmp	r3, #33	@ 0x21
 8007608:	d005      	beq.n	8007616 <I2C_MasterTransmit_TXE+0xda>
 800760a:	7bbb      	ldrb	r3, [r7, #14]
 800760c:	2b40      	cmp	r3, #64	@ 0x40
 800760e:	d12d      	bne.n	800766c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	2b22      	cmp	r3, #34	@ 0x22
 8007614:	d12a      	bne.n	800766c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800761a:	b29b      	uxth	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d108      	bne.n	8007632 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800762e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007630:	e01c      	b.n	800766c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b40      	cmp	r3, #64	@ 0x40
 800763c:	d103      	bne.n	8007646 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f88e 	bl	8007760 <I2C_MemoryTransmit_TXE_BTF>
}
 8007644:	e012      	b.n	800766c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764a:	781a      	ldrb	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007660:	b29b      	uxth	r3, r3
 8007662:	3b01      	subs	r3, #1
 8007664:	b29a      	uxth	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800766a:	e7ff      	b.n	800766c <I2C_MasterTransmit_TXE+0x130>
 800766c:	bf00      	nop
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007680:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b21      	cmp	r3, #33	@ 0x21
 800768c:	d164      	bne.n	8007758 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d012      	beq.n	80076be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769c:	781a      	ldrb	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80076bc:	e04c      	b.n	8007758 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d01d      	beq.n	8007700 <I2C_MasterTransmit_BTF+0x8c>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	d01a      	beq.n	8007700 <I2C_MasterTransmit_BTF+0x8c>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80076d0:	d016      	beq.n	8007700 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80076e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2211      	movs	r2, #17
 80076e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff fea9 	bl	8007450 <HAL_I2C_MasterTxCpltCallback>
}
 80076fe:	e02b      	b.n	8007758 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800770e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800771e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2220      	movs	r2, #32
 800772a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b40      	cmp	r3, #64	@ 0x40
 8007738:	d107      	bne.n	800774a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff febe 	bl	80074c4 <HAL_I2C_MemTxCpltCallback>
}
 8007748:	e006      	b.n	8007758 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff fe7c 	bl	8007450 <HAL_I2C_MasterTxCpltCallback>
}
 8007758:	bf00      	nop
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800776e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007774:	2b00      	cmp	r3, #0
 8007776:	d11d      	bne.n	80077b4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800777c:	2b01      	cmp	r3, #1
 800777e:	d10b      	bne.n	8007798 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007784:	b2da      	uxtb	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007790:	1c9a      	adds	r2, r3, #2
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8007796:	e077      	b.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800779c:	b29b      	uxth	r3, r3
 800779e:	121b      	asrs	r3, r3, #8
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80077b2:	e069      	b.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d10b      	bne.n	80077d4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80077d2:	e059      	b.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d152      	bne.n	8007882 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	2b22      	cmp	r3, #34	@ 0x22
 80077e0:	d10d      	bne.n	80077fe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077f0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80077fc:	e044      	b.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007802:	b29b      	uxth	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d015      	beq.n	8007834 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	2b21      	cmp	r3, #33	@ 0x21
 800780c:	d112      	bne.n	8007834 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007812:	781a      	ldrb	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007832:	e029      	b.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d124      	bne.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800783e:	7bfb      	ldrb	r3, [r7, #15]
 8007840:	2b21      	cmp	r3, #33	@ 0x21
 8007842:	d121      	bne.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007852:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007862:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2220      	movs	r2, #32
 800786e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff fe22 	bl	80074c4 <HAL_I2C_MemTxCpltCallback>
}
 8007880:	e002      	b.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff f8bd 	bl	8006a02 <I2C_Flush_DR>
}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b22      	cmp	r3, #34	@ 0x22
 80078a2:	f040 80ac 	bne.w	80079fe <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d921      	bls.n	80078f8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	691a      	ldr	r2, [r3, #16]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078de:	b29b      	uxth	r3, r3
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	f040 808c 	bne.w	80079fe <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078f4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80078f6:	e082      	b.n	80079fe <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d075      	beq.n	80079ec <I2C_MasterReceive_RXNE+0x15c>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d002      	beq.n	800790c <I2C_MasterReceive_RXNE+0x7c>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d16f      	bne.n	80079ec <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 fb4d 	bl	8008fac <I2C_WaitOnSTOPRequestThroughIT>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d142      	bne.n	800799e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007926:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007936:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	691a      	ldr	r2, [r3, #16]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b40      	cmp	r3, #64	@ 0x40
 8007970:	d10a      	bne.n	8007988 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff fda8 	bl	80074d6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007986:	e03a      	b.n	80079fe <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2212      	movs	r2, #18
 8007994:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7ff fd63 	bl	8007462 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800799c:	e02f      	b.n	80079fe <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80079ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	691a      	ldr	r2, [r3, #16]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b8:	b2d2      	uxtb	r2, r2
 80079ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff fd7f 	bl	80074e8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80079ea:	e008      	b.n	80079fe <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079fa:	605a      	str	r2, [r3, #4]
}
 80079fc:	e7ff      	b.n	80079fe <I2C_MasterReceive_RXNE+0x16e>
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a12:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	d11b      	bne.n	8007a56 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a2c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	691a      	ldr	r2, [r3, #16]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007a54:	e0bd      	b.n	8007bd2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d129      	bne.n	8007ab4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a6e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d00a      	beq.n	8007a8c <I2C_MasterReceive_BTF+0x86>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d007      	beq.n	8007a8c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a8a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691a      	ldr	r2, [r3, #16]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007ab2:	e08e      	b.n	8007bd2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d176      	bne.n	8007bac <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d002      	beq.n	8007aca <I2C_MasterReceive_BTF+0xc4>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2b10      	cmp	r3, #16
 8007ac8:	d108      	bne.n	8007adc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	e019      	b.n	8007b10 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d002      	beq.n	8007ae8 <I2C_MasterReceive_BTF+0xe2>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d108      	bne.n	8007afa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	e00a      	b.n	8007b10 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2b10      	cmp	r3, #16
 8007afe:	d007      	beq.n	8007b10 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b0e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691a      	ldr	r2, [r3, #16]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	691a      	ldr	r2, [r3, #16]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b40:	b2d2      	uxtb	r2, r2
 8007b42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007b6a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b40      	cmp	r3, #64	@ 0x40
 8007b7e:	d10a      	bne.n	8007b96 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff fca1 	bl	80074d6 <HAL_I2C_MemRxCpltCallback>
}
 8007b94:	e01d      	b.n	8007bd2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2212      	movs	r2, #18
 8007ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff fc5c 	bl	8007462 <HAL_I2C_MasterRxCpltCallback>
}
 8007baa:	e012      	b.n	8007bd2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691a      	ldr	r2, [r3, #16]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b40      	cmp	r3, #64	@ 0x40
 8007bec:	d117      	bne.n	8007c1e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007c06:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007c08:	e067      	b.n	8007cda <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	f043 0301 	orr.w	r3, r3, #1
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	611a      	str	r2, [r3, #16]
}
 8007c1c:	e05d      	b.n	8007cda <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c26:	d133      	bne.n	8007c90 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b21      	cmp	r3, #33	@ 0x21
 8007c32:	d109      	bne.n	8007c48 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007c44:	611a      	str	r2, [r3, #16]
 8007c46:	e008      	b.n	8007c5a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	f043 0301 	orr.w	r3, r3, #1
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d004      	beq.n	8007c6c <I2C_Master_SB+0x92>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d108      	bne.n	8007c7e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d032      	beq.n	8007cda <I2C_Master_SB+0x100>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d02d      	beq.n	8007cda <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c8c:	605a      	str	r2, [r3, #4]
}
 8007c8e:	e024      	b.n	8007cda <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10e      	bne.n	8007cb6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	11db      	asrs	r3, r3, #7
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	f003 0306 	and.w	r3, r3, #6
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f063 030f 	orn	r3, r3, #15
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	611a      	str	r2, [r3, #16]
}
 8007cb4:	e011      	b.n	8007cda <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d10d      	bne.n	8007cda <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	11db      	asrs	r3, r3, #7
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	f003 0306 	and.w	r3, r3, #6
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	f063 030e 	orn	r3, r3, #14
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	611a      	str	r2, [r3, #16]
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bc80      	pop	{r7}
 8007ce2:	4770      	bx	lr

08007ce4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d004      	beq.n	8007d0a <I2C_Master_ADD10+0x26>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d108      	bne.n	8007d1c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00c      	beq.n	8007d2c <I2C_Master_ADD10+0x48>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d007      	beq.n	8007d2c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d2a:	605a      	str	r2, [r3, #4]
  }
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr

08007d36 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b091      	sub	sp, #68	@ 0x44
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d44:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d52:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b22      	cmp	r3, #34	@ 0x22
 8007d5e:	f040 8169 	bne.w	8008034 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10f      	bne.n	8007d8a <I2C_Master_ADDR+0x54>
 8007d6a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007d6e:	2b40      	cmp	r3, #64	@ 0x40
 8007d70:	d10b      	bne.n	8007d8a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d72:	2300      	movs	r3, #0
 8007d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d88:	e160      	b.n	800804c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d11d      	bne.n	8007dce <I2C_Master_ADDR+0x98>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007d9a:	d118      	bne.n	8007dce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007dc0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	651a      	str	r2, [r3, #80]	@ 0x50
 8007dcc:	e13e      	b.n	800804c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d113      	bne.n	8007e00 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dd8:	2300      	movs	r3, #0
 8007dda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e115      	b.n	800802c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	f040 808a 	bne.w	8007f20 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e12:	d137      	bne.n	8007e84 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e22:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e32:	d113      	bne.n	8007e5c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e42:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e44:	2300      	movs	r3, #0
 8007e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5a:	e0e7      	b.n	800802c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	623b      	str	r3, [r7, #32]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	623b      	str	r3, [r7, #32]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	623b      	str	r3, [r7, #32]
 8007e70:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	e0d3      	b.n	800802c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	d02e      	beq.n	8007ee8 <I2C_Master_ADDR+0x1b2>
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8c:	2b20      	cmp	r3, #32
 8007e8e:	d02b      	beq.n	8007ee8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e92:	2b12      	cmp	r3, #18
 8007e94:	d102      	bne.n	8007e9c <I2C_Master_ADDR+0x166>
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d125      	bne.n	8007ee8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9e:	2b04      	cmp	r3, #4
 8007ea0:	d00e      	beq.n	8007ec0 <I2C_Master_ADDR+0x18a>
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d00b      	beq.n	8007ec0 <I2C_Master_ADDR+0x18a>
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eaa:	2b10      	cmp	r3, #16
 8007eac:	d008      	beq.n	8007ec0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	e007      	b.n	8007ed0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007ece:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61fb      	str	r3, [r7, #28]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	61fb      	str	r3, [r7, #28]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	61fb      	str	r3, [r7, #28]
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	e0a1      	b.n	800802c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ef6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ef8:	2300      	movs	r3, #0
 8007efa:	61bb      	str	r3, [r7, #24]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	61bb      	str	r3, [r7, #24]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	61bb      	str	r3, [r7, #24]
 8007f0c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	e085      	b.n	800802c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d14d      	bne.n	8007fc6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d016      	beq.n	8007f5e <I2C_Master_ADDR+0x228>
 8007f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d013      	beq.n	8007f5e <I2C_Master_ADDR+0x228>
 8007f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f38:	2b10      	cmp	r3, #16
 8007f3a:	d010      	beq.n	8007f5e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f4a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	e007      	b.n	8007f6e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f6c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f7c:	d117      	bne.n	8007fae <I2C_Master_ADDR+0x278>
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f84:	d00b      	beq.n	8007f9e <I2C_Master_ADDR+0x268>
 8007f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d008      	beq.n	8007f9e <I2C_Master_ADDR+0x268>
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	2b08      	cmp	r3, #8
 8007f90:	d005      	beq.n	8007f9e <I2C_Master_ADDR+0x268>
 8007f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f94:	2b10      	cmp	r3, #16
 8007f96:	d002      	beq.n	8007f9e <I2C_Master_ADDR+0x268>
 8007f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9a:	2b20      	cmp	r3, #32
 8007f9c:	d107      	bne.n	8007fae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007fac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	617b      	str	r3, [r7, #20]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	617b      	str	r3, [r7, #20]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	e032      	b.n	800802c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007fd4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fe4:	d117      	bne.n	8008016 <I2C_Master_ADDR+0x2e0>
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007fec:	d00b      	beq.n	8008006 <I2C_Master_ADDR+0x2d0>
 8007fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d008      	beq.n	8008006 <I2C_Master_ADDR+0x2d0>
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff6:	2b08      	cmp	r3, #8
 8007ff8:	d005      	beq.n	8008006 <I2C_Master_ADDR+0x2d0>
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffc:	2b10      	cmp	r3, #16
 8007ffe:	d002      	beq.n	8008006 <I2C_Master_ADDR+0x2d0>
 8008000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008002:	2b20      	cmp	r3, #32
 8008004:	d107      	bne.n	8008016 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008014:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008016:	2300      	movs	r3, #0
 8008018:	613b      	str	r3, [r7, #16]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	613b      	str	r3, [r7, #16]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	613b      	str	r3, [r7, #16]
 800802a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008032:	e00b      	b.n	800804c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008034:	2300      	movs	r3, #0
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	60fb      	str	r3, [r7, #12]
 8008048:	68fb      	ldr	r3, [r7, #12]
}
 800804a:	e7ff      	b.n	800804c <I2C_Master_ADDR+0x316>
 800804c:	bf00      	nop
 800804e:	3744      	adds	r7, #68	@ 0x44
 8008050:	46bd      	mov	sp, r7
 8008052:	bc80      	pop	{r7}
 8008054:	4770      	bx	lr

08008056 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008064:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800806a:	b29b      	uxth	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d02b      	beq.n	80080c8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008074:	781a      	ldrb	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800808a:	b29b      	uxth	r3, r3
 800808c:	3b01      	subs	r3, #1
 800808e:	b29a      	uxth	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008098:	b29b      	uxth	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d114      	bne.n	80080c8 <I2C_SlaveTransmit_TXE+0x72>
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	2b29      	cmp	r3, #41	@ 0x29
 80080a2:	d111      	bne.n	80080c8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2221      	movs	r2, #33	@ 0x21
 80080b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2228      	movs	r2, #40	@ 0x28
 80080be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7ff f9d6 	bl	8007474 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80080c8:	bf00      	nop
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080dc:	b29b      	uxth	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d011      	beq.n	8008106 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e6:	781a      	ldrb	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	3b01      	subs	r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr

08008110 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800811e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008124:	b29b      	uxth	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d02c      	beq.n	8008184 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	691a      	ldr	r2, [r3, #16]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008146:	b29b      	uxth	r3, r3
 8008148:	3b01      	subs	r3, #1
 800814a:	b29a      	uxth	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d114      	bne.n	8008184 <I2C_SlaveReceive_RXNE+0x74>
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	2b2a      	cmp	r3, #42	@ 0x2a
 800815e:	d111      	bne.n	8008184 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800816e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2222      	movs	r2, #34	@ 0x22
 8008174:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2228      	movs	r2, #40	@ 0x28
 800817a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7ff f981 	bl	8007486 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008184:	bf00      	nop
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008198:	b29b      	uxth	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d012      	beq.n	80081c4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	691a      	ldr	r2, [r3, #16]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a8:	b2d2      	uxtb	r2, r2
 80081aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	3b01      	subs	r3, #1
 80081be:	b29a      	uxth	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr

080081ce <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80081e8:	2b28      	cmp	r3, #40	@ 0x28
 80081ea:	d125      	bne.n	8008238 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081fa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	f003 0304 	and.w	r3, r3, #4
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008206:	2301      	movs	r3, #1
 8008208:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008210:	2b00      	cmp	r3, #0
 8008212:	d103      	bne.n	800821c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	81bb      	strh	r3, [r7, #12]
 800821a:	e002      	b.n	8008222 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800822a:	89ba      	ldrh	r2, [r7, #12]
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7ff f931 	bl	8007498 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008236:	e00e      	b.n	8008256 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008238:	2300      	movs	r3, #0
 800823a:	60bb      	str	r3, [r7, #8]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	60bb      	str	r3, [r7, #8]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	60bb      	str	r3, [r7, #8]
 800824c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008256:	bf00      	nop
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800826e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800827e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008280:	2300      	movs	r3, #0
 8008282:	60bb      	str	r3, [r7, #8]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	60bb      	str	r3, [r7, #8]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f042 0201 	orr.w	r2, r2, #1
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082ac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082bc:	d172      	bne.n	80083a4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80082be:	7bfb      	ldrb	r3, [r7, #15]
 80082c0:	2b22      	cmp	r3, #34	@ 0x22
 80082c2:	d002      	beq.n	80082ca <I2C_Slave_STOPF+0x6a>
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082c8:	d135      	bne.n	8008336 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082dc:	b29b      	uxth	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e6:	f043 0204 	orr.w	r2, r3, #4
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008302:	4618      	mov	r0, r3
 8008304:	f7fd ff3a 	bl	800617c <HAL_DMA_GetState>
 8008308:	4603      	mov	r3, r0
 800830a:	2b01      	cmp	r3, #1
 800830c:	d049      	beq.n	80083a2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008312:	4a69      	ldr	r2, [pc, #420]	@ (80084b8 <I2C_Slave_STOPF+0x258>)
 8008314:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831a:	4618      	mov	r0, r3
 800831c:	f7fd feed 	bl	80060fa <HAL_DMA_Abort_IT>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d03d      	beq.n	80083a2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008330:	4610      	mov	r0, r2
 8008332:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008334:	e035      	b.n	80083a2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	b29a      	uxth	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d005      	beq.n	800835a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008352:	f043 0204 	orr.w	r2, r3, #4
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008368:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800836e:	4618      	mov	r0, r3
 8008370:	f7fd ff04 	bl	800617c <HAL_DMA_GetState>
 8008374:	4603      	mov	r3, r0
 8008376:	2b01      	cmp	r3, #1
 8008378:	d014      	beq.n	80083a4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800837e:	4a4e      	ldr	r2, [pc, #312]	@ (80084b8 <I2C_Slave_STOPF+0x258>)
 8008380:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008386:	4618      	mov	r0, r3
 8008388:	f7fd feb7 	bl	80060fa <HAL_DMA_Abort_IT>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d008      	beq.n	80083a4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800839c:	4610      	mov	r0, r2
 800839e:	4798      	blx	r3
 80083a0:	e000      	b.n	80083a4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083a2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d03e      	beq.n	800842c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	f003 0304 	and.w	r3, r3, #4
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d112      	bne.n	80083e2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	691a      	ldr	r2, [r3, #16]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c6:	b2d2      	uxtb	r2, r2
 80083c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3b01      	subs	r3, #1
 80083dc:	b29a      	uxth	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ec:	2b40      	cmp	r3, #64	@ 0x40
 80083ee:	d112      	bne.n	8008416 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	691a      	ldr	r2, [r3, #16]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800840c:	b29b      	uxth	r3, r3
 800840e:	3b01      	subs	r3, #1
 8008410:	b29a      	uxth	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800841a:	b29b      	uxth	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d005      	beq.n	800842c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008424:	f043 0204 	orr.w	r2, r3, #4
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008430:	2b00      	cmp	r3, #0
 8008432:	d003      	beq.n	800843c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f8b7 	bl	80085a8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800843a:	e039      	b.n	80084b0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008440:	d109      	bne.n	8008456 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2228      	movs	r2, #40	@ 0x28
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7ff f818 	bl	8007486 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b28      	cmp	r3, #40	@ 0x28
 8008460:	d111      	bne.n	8008486 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a15      	ldr	r2, [pc, #84]	@ (80084bc <I2C_Slave_STOPF+0x25c>)
 8008466:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2220      	movs	r2, #32
 8008472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff f817 	bl	80074b2 <HAL_I2C_ListenCpltCallback>
}
 8008484:	e014      	b.n	80084b0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800848a:	2b22      	cmp	r3, #34	@ 0x22
 800848c:	d002      	beq.n	8008494 <I2C_Slave_STOPF+0x234>
 800848e:	7bfb      	ldrb	r3, [r7, #15]
 8008490:	2b22      	cmp	r3, #34	@ 0x22
 8008492:	d10d      	bne.n	80084b0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2220      	movs	r2, #32
 800849e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7fe ffeb 	bl	8007486 <HAL_I2C_SlaveRxCpltCallback>
}
 80084b0:	bf00      	nop
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	08008b09 	.word	0x08008b09
 80084bc:	ffff0000 	.word	0xffff0000

080084c0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084ce:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b08      	cmp	r3, #8
 80084da:	d002      	beq.n	80084e2 <I2C_Slave_AF+0x22>
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2b20      	cmp	r3, #32
 80084e0:	d129      	bne.n	8008536 <I2C_Slave_AF+0x76>
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	2b28      	cmp	r3, #40	@ 0x28
 80084e6:	d126      	bne.n	8008536 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a2e      	ldr	r2, [pc, #184]	@ (80085a4 <I2C_Slave_AF+0xe4>)
 80084ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80084fc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008506:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008516:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7fe ffbf 	bl	80074b2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008534:	e031      	b.n	800859a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	2b21      	cmp	r3, #33	@ 0x21
 800853a:	d129      	bne.n	8008590 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a19      	ldr	r2, [pc, #100]	@ (80085a4 <I2C_Slave_AF+0xe4>)
 8008540:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2221      	movs	r2, #33	@ 0x21
 8008546:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2220      	movs	r2, #32
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008566:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008570:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008580:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7fe fa3d 	bl	8006a02 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7fe ff73 	bl	8007474 <HAL_I2C_SlaveTxCpltCallback>
}
 800858e:	e004      	b.n	800859a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008598:	615a      	str	r2, [r3, #20]
}
 800859a:	bf00      	nop
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	ffff0000 	.word	0xffff0000

080085a8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80085be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	2b10      	cmp	r3, #16
 80085c4:	d002      	beq.n	80085cc <I2C_ITError+0x24>
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	2b40      	cmp	r3, #64	@ 0x40
 80085ca:	d10a      	bne.n	80085e2 <I2C_ITError+0x3a>
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	2b22      	cmp	r3, #34	@ 0x22
 80085d0:	d107      	bne.n	80085e2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085e0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80085e8:	2b28      	cmp	r3, #40	@ 0x28
 80085ea:	d107      	bne.n	80085fc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2228      	movs	r2, #40	@ 0x28
 80085f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80085fa:	e015      	b.n	8008628 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008606:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800860a:	d00a      	beq.n	8008622 <I2C_ITError+0x7a>
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	2b60      	cmp	r3, #96	@ 0x60
 8008610:	d007      	beq.n	8008622 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2220      	movs	r2, #32
 8008616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008632:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008636:	d162      	bne.n	80086fe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008646:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800864c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b01      	cmp	r3, #1
 8008654:	d020      	beq.n	8008698 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800865a:	4a6a      	ldr	r2, [pc, #424]	@ (8008804 <I2C_ITError+0x25c>)
 800865c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008662:	4618      	mov	r0, r3
 8008664:	f7fd fd49 	bl	80060fa <HAL_DMA_Abort_IT>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 8089 	beq.w	8008782 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 0201 	bic.w	r2, r2, #1
 800867e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2220      	movs	r2, #32
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800868c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008692:	4610      	mov	r0, r2
 8008694:	4798      	blx	r3
 8008696:	e074      	b.n	8008782 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800869c:	4a59      	ldr	r2, [pc, #356]	@ (8008804 <I2C_ITError+0x25c>)
 800869e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fd fd28 	bl	80060fa <HAL_DMA_Abort_IT>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d068      	beq.n	8008782 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ba:	2b40      	cmp	r3, #64	@ 0x40
 80086bc:	d10b      	bne.n	80086d6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	691a      	ldr	r2, [r3, #16]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c8:	b2d2      	uxtb	r2, r2
 80086ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 0201 	bic.w	r2, r2, #1
 80086e4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2220      	movs	r2, #32
 80086ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80086f8:	4610      	mov	r0, r2
 80086fa:	4798      	blx	r3
 80086fc:	e041      	b.n	8008782 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b60      	cmp	r3, #96	@ 0x60
 8008708:	d125      	bne.n	8008756 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2220      	movs	r2, #32
 800870e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008722:	2b40      	cmp	r3, #64	@ 0x40
 8008724:	d10b      	bne.n	800873e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	691a      	ldr	r2, [r3, #16]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008730:	b2d2      	uxtb	r2, r2
 8008732:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 0201 	bic.w	r2, r2, #1
 800874c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7fe fed3 	bl	80074fa <HAL_I2C_AbortCpltCallback>
 8008754:	e015      	b.n	8008782 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008760:	2b40      	cmp	r3, #64	@ 0x40
 8008762:	d10b      	bne.n	800877c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	691a      	ldr	r2, [r3, #16]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800876e:	b2d2      	uxtb	r2, r2
 8008770:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7fe feb3 	bl	80074e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008786:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10e      	bne.n	80087b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008798:	2b00      	cmp	r3, #0
 800879a:	d109      	bne.n	80087b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d104      	bne.n	80087b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d007      	beq.n	80087c0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80087be:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087c6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087cc:	f003 0304 	and.w	r3, r3, #4
 80087d0:	2b04      	cmp	r3, #4
 80087d2:	d113      	bne.n	80087fc <I2C_ITError+0x254>
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	2b28      	cmp	r3, #40	@ 0x28
 80087d8:	d110      	bne.n	80087fc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a0a      	ldr	r2, [pc, #40]	@ (8008808 <I2C_ITError+0x260>)
 80087de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2220      	movs	r2, #32
 80087ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7fe fe5b 	bl	80074b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087fc:	bf00      	nop
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	08008b09 	.word	0x08008b09
 8008808:	ffff0000 	.word	0xffff0000

0800880c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af02      	add	r7, sp, #8
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	4608      	mov	r0, r1
 8008816:	4611      	mov	r1, r2
 8008818:	461a      	mov	r2, r3
 800881a:	4603      	mov	r3, r0
 800881c:	817b      	strh	r3, [r7, #10]
 800881e:	460b      	mov	r3, r1
 8008820:	813b      	strh	r3, [r7, #8]
 8008822:	4613      	mov	r3, r2
 8008824:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008834:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	2200      	movs	r2, #0
 800883e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 fa08 	bl	8008c58 <I2C_WaitOnFlagUntilTimeout>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00d      	beq.n	800886a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800885c:	d103      	bne.n	8008866 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008864:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e05f      	b.n	800892a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800886a:	897b      	ldrh	r3, [r7, #10]
 800886c:	b2db      	uxtb	r3, r3
 800886e:	461a      	mov	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008878:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800887a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887c:	6a3a      	ldr	r2, [r7, #32]
 800887e:	492d      	ldr	r1, [pc, #180]	@ (8008934 <I2C_RequestMemoryWrite+0x128>)
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 fa63 	bl	8008d4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e04c      	b.n	800892a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008890:	2300      	movs	r3, #0
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	617b      	str	r3, [r7, #20]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088a8:	6a39      	ldr	r1, [r7, #32]
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f000 faee 	bl	8008e8c <I2C_WaitOnTXEFlagUntilTimeout>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00d      	beq.n	80088d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ba:	2b04      	cmp	r3, #4
 80088bc:	d107      	bne.n	80088ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e02b      	b.n	800892a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80088d2:	88fb      	ldrh	r3, [r7, #6]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d105      	bne.n	80088e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80088d8:	893b      	ldrh	r3, [r7, #8]
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	611a      	str	r2, [r3, #16]
 80088e2:	e021      	b.n	8008928 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80088e4:	893b      	ldrh	r3, [r7, #8]
 80088e6:	0a1b      	lsrs	r3, r3, #8
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f4:	6a39      	ldr	r1, [r7, #32]
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 fac8 	bl	8008e8c <I2C_WaitOnTXEFlagUntilTimeout>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00d      	beq.n	800891e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008906:	2b04      	cmp	r3, #4
 8008908:	d107      	bne.n	800891a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008918:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e005      	b.n	800892a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800891e:	893b      	ldrh	r3, [r7, #8]
 8008920:	b2da      	uxtb	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	00010002 	.word	0x00010002

08008938 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af02      	add	r7, sp, #8
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	4608      	mov	r0, r1
 8008942:	4611      	mov	r1, r2
 8008944:	461a      	mov	r2, r3
 8008946:	4603      	mov	r3, r0
 8008948:	817b      	strh	r3, [r7, #10]
 800894a:	460b      	mov	r3, r1
 800894c:	813b      	strh	r3, [r7, #8]
 800894e:	4613      	mov	r3, r2
 8008950:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008960:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008970:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	2200      	movs	r2, #0
 800897a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 f96a 	bl	8008c58 <I2C_WaitOnFlagUntilTimeout>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00d      	beq.n	80089a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008998:	d103      	bne.n	80089a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e0aa      	b.n	8008afc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80089a6:	897b      	ldrh	r3, [r7, #10]
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	461a      	mov	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80089b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	6a3a      	ldr	r2, [r7, #32]
 80089ba:	4952      	ldr	r1, [pc, #328]	@ (8008b04 <I2C_RequestMemoryRead+0x1cc>)
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 f9c5 	bl	8008d4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e097      	b.n	8008afc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089cc:	2300      	movs	r3, #0
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	617b      	str	r3, [r7, #20]
 80089e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089e4:	6a39      	ldr	r1, [r7, #32]
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f000 fa50 	bl	8008e8c <I2C_WaitOnTXEFlagUntilTimeout>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00d      	beq.n	8008a0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f6:	2b04      	cmp	r3, #4
 80089f8:	d107      	bne.n	8008a0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e076      	b.n	8008afc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d105      	bne.n	8008a20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a14:	893b      	ldrh	r3, [r7, #8]
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	611a      	str	r2, [r3, #16]
 8008a1e:	e021      	b.n	8008a64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008a20:	893b      	ldrh	r3, [r7, #8]
 8008a22:	0a1b      	lsrs	r3, r3, #8
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a30:	6a39      	ldr	r1, [r7, #32]
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 fa2a 	bl	8008e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00d      	beq.n	8008a5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d107      	bne.n	8008a56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e050      	b.n	8008afc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a5a:	893b      	ldrh	r3, [r7, #8]
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a66:	6a39      	ldr	r1, [r7, #32]
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 fa0f 	bl	8008e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00d      	beq.n	8008a90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a78:	2b04      	cmp	r3, #4
 8008a7a:	d107      	bne.n	8008a8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e035      	b.n	8008afc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f000 f8d3 	bl	8008c58 <I2C_WaitOnFlagUntilTimeout>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00d      	beq.n	8008ad4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ac6:	d103      	bne.n	8008ad0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ace:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e013      	b.n	8008afc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008ad4:	897b      	ldrh	r3, [r7, #10]
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	f043 0301 	orr.w	r3, r3, #1
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae6:	6a3a      	ldr	r2, [r7, #32]
 8008ae8:	4906      	ldr	r1, [pc, #24]	@ (8008b04 <I2C_RequestMemoryRead+0x1cc>)
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f000 f92e 	bl	8008d4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e000      	b.n	8008afc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	00010002 	.word	0x00010002

08008b08 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b18:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b20:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008b22:	4b4b      	ldr	r3, [pc, #300]	@ (8008c50 <I2C_DMAAbort+0x148>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	08db      	lsrs	r3, r3, #3
 8008b28:	4a4a      	ldr	r2, [pc, #296]	@ (8008c54 <I2C_DMAAbort+0x14c>)
 8008b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2e:	0a1a      	lsrs	r2, r3, #8
 8008b30:	4613      	mov	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	00da      	lsls	r2, r3, #3
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d106      	bne.n	8008b50 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b46:	f043 0220 	orr.w	r2, r3, #32
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8008b4e:	e00a      	b.n	8008b66 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	3b01      	subs	r3, #1
 8008b54:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b64:	d0ea      	beq.n	8008b3c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b72:	2200      	movs	r2, #0
 8008b74:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b82:	2200      	movs	r2, #0
 8008b84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b94:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d003      	beq.n	8008bac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ba8:	2200      	movs	r2, #0
 8008baa:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb8:	2200      	movs	r2, #0
 8008bba:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 0201 	bic.w	r2, r2, #1
 8008bca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b60      	cmp	r3, #96	@ 0x60
 8008bd6:	d10e      	bne.n	8008bf6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2200      	movs	r2, #0
 8008bec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008bee:	6978      	ldr	r0, [r7, #20]
 8008bf0:	f7fe fc83 	bl	80074fa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008bf4:	e027      	b.n	8008c46 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008bf6:	7cfb      	ldrb	r3, [r7, #19]
 8008bf8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008bfc:	2b28      	cmp	r3, #40	@ 0x28
 8008bfe:	d117      	bne.n	8008c30 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f042 0201 	orr.w	r2, r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008c1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	2200      	movs	r2, #0
 8008c24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2228      	movs	r2, #40	@ 0x28
 8008c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008c2e:	e007      	b.n	8008c40 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008c40:	6978      	ldr	r0, [r7, #20]
 8008c42:	f7fe fc51 	bl	80074e8 <HAL_I2C_ErrorCallback>
}
 8008c46:	bf00      	nop
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	20000000 	.word	0x20000000
 8008c54:	14f8b589 	.word	0x14f8b589

08008c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	603b      	str	r3, [r7, #0]
 8008c64:	4613      	mov	r3, r2
 8008c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c68:	e048      	b.n	8008cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c70:	d044      	beq.n	8008cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c72:	f7fc fc5f 	bl	8005534 <HAL_GetTick>
 8008c76:	4602      	mov	r2, r0
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d302      	bcc.n	8008c88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d139      	bne.n	8008cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	0c1b      	lsrs	r3, r3, #16
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d10d      	bne.n	8008cae <I2C_WaitOnFlagUntilTimeout+0x56>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	43da      	mvns	r2, r3
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	bf0c      	ite	eq
 8008ca4:	2301      	moveq	r3, #1
 8008ca6:	2300      	movne	r3, #0
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	461a      	mov	r2, r3
 8008cac:	e00c      	b.n	8008cc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	699b      	ldr	r3, [r3, #24]
 8008cb4:	43da      	mvns	r2, r3
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	4013      	ands	r3, r2
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	bf0c      	ite	eq
 8008cc0:	2301      	moveq	r3, #1
 8008cc2:	2300      	movne	r3, #0
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	79fb      	ldrb	r3, [r7, #7]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d116      	bne.n	8008cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce8:	f043 0220 	orr.w	r2, r3, #32
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e023      	b.n	8008d44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	0c1b      	lsrs	r3, r3, #16
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d10d      	bne.n	8008d22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	43da      	mvns	r2, r3
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	4013      	ands	r3, r2
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	bf0c      	ite	eq
 8008d18:	2301      	moveq	r3, #1
 8008d1a:	2300      	movne	r3, #0
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	461a      	mov	r2, r3
 8008d20:	e00c      	b.n	8008d3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	43da      	mvns	r2, r3
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	bf0c      	ite	eq
 8008d34:	2301      	moveq	r3, #1
 8008d36:	2300      	movne	r3, #0
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	79fb      	ldrb	r3, [r7, #7]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d093      	beq.n	8008c6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d5a:	e071      	b.n	8008e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d6a:	d123      	bne.n	8008db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008d84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da0:	f043 0204 	orr.w	r2, r3, #4
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e067      	b.n	8008e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dba:	d041      	beq.n	8008e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dbc:	f7fc fbba 	bl	8005534 <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d302      	bcc.n	8008dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d136      	bne.n	8008e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	0c1b      	lsrs	r3, r3, #16
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d10c      	bne.n	8008df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	43da      	mvns	r2, r3
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	4013      	ands	r3, r2
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	bf14      	ite	ne
 8008dee:	2301      	movne	r3, #1
 8008df0:	2300      	moveq	r3, #0
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	e00b      	b.n	8008e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	43da      	mvns	r2, r3
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	4013      	ands	r3, r2
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	bf14      	ite	ne
 8008e08:	2301      	movne	r3, #1
 8008e0a:	2300      	moveq	r3, #0
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d016      	beq.n	8008e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2c:	f043 0220 	orr.w	r2, r3, #32
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e021      	b.n	8008e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	0c1b      	lsrs	r3, r3, #16
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d10c      	bne.n	8008e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	695b      	ldr	r3, [r3, #20]
 8008e50:	43da      	mvns	r2, r3
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	4013      	ands	r3, r2
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	bf14      	ite	ne
 8008e5c:	2301      	movne	r3, #1
 8008e5e:	2300      	moveq	r3, #0
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	e00b      	b.n	8008e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	43da      	mvns	r2, r3
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	4013      	ands	r3, r2
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bf14      	ite	ne
 8008e76:	2301      	movne	r3, #1
 8008e78:	2300      	moveq	r3, #0
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f47f af6d 	bne.w	8008d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e98:	e034      	b.n	8008f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f000 f915 	bl	80090ca <I2C_IsAcknowledgeFailed>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e034      	b.n	8008f14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb0:	d028      	beq.n	8008f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eb2:	f7fc fb3f 	bl	8005534 <HAL_GetTick>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d302      	bcc.n	8008ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d11d      	bne.n	8008f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ed2:	2b80      	cmp	r3, #128	@ 0x80
 8008ed4:	d016      	beq.n	8008f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2220      	movs	r2, #32
 8008ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef0:	f043 0220 	orr.w	r2, r3, #32
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e007      	b.n	8008f14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f0e:	2b80      	cmp	r3, #128	@ 0x80
 8008f10:	d1c3      	bne.n	8008e9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f28:	e034      	b.n	8008f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 f8cd 	bl	80090ca <I2C_IsAcknowledgeFailed>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e034      	b.n	8008fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d028      	beq.n	8008f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f42:	f7fc faf7 	bl	8005534 <HAL_GetTick>
 8008f46:	4602      	mov	r2, r0
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d302      	bcc.n	8008f58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d11d      	bne.n	8008f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	f003 0304 	and.w	r3, r3, #4
 8008f62:	2b04      	cmp	r3, #4
 8008f64:	d016      	beq.n	8008f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f80:	f043 0220 	orr.w	r2, r3, #32
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e007      	b.n	8008fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	f003 0304 	and.w	r3, r3, #4
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d1c3      	bne.n	8008f2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008fb8:	4b13      	ldr	r3, [pc, #76]	@ (8009008 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	08db      	lsrs	r3, r3, #3
 8008fbe:	4a13      	ldr	r2, [pc, #76]	@ (800900c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc4:	0a1a      	lsrs	r2, r3, #8
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d107      	bne.n	8008fea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fde:	f043 0220 	orr.w	r2, r3, #32
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e008      	b.n	8008ffc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ff8:	d0e9      	beq.n	8008fce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	bc80      	pop	{r7}
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20000000 	.word	0x20000000
 800900c:	14f8b589 	.word	0x14f8b589

08009010 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800901c:	e049      	b.n	80090b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	f003 0310 	and.w	r3, r3, #16
 8009028:	2b10      	cmp	r3, #16
 800902a:	d119      	bne.n	8009060 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f06f 0210 	mvn.w	r2, #16
 8009034:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2220      	movs	r2, #32
 8009040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e030      	b.n	80090c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009060:	f7fc fa68 	bl	8005534 <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	429a      	cmp	r2, r3
 800906e:	d302      	bcc.n	8009076 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d11d      	bne.n	80090b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009080:	2b40      	cmp	r3, #64	@ 0x40
 8009082:	d016      	beq.n	80090b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2220      	movs	r2, #32
 800908e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800909e:	f043 0220 	orr.w	r2, r3, #32
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e007      	b.n	80090c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090bc:	2b40      	cmp	r3, #64	@ 0x40
 80090be:	d1ae      	bne.n	800901e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80090ca:	b480      	push	{r7}
 80090cc:	b083      	sub	sp, #12
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090e0:	d11b      	bne.n	800911a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80090ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2220      	movs	r2, #32
 80090f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009106:	f043 0204 	orr.w	r2, r3, #4
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e000      	b.n	800911c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	bc80      	pop	{r7}
 8009124:	4770      	bx	lr

08009126 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009126:	b480      	push	{r7}
 8009128:	b083      	sub	sp, #12
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009132:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8009136:	d103      	bne.n	8009140 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800913e:	e007      	b.n	8009150 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009144:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009148:	d102      	bne.n	8009150 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2208      	movs	r2, #8
 800914e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	bc80      	pop	{r7}
 8009158:	4770      	bx	lr
	...

0800915c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e31d      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800916e:	4b94      	ldr	r3, [pc, #592]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f003 030c 	and.w	r3, r3, #12
 8009176:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009178:	4b91      	ldr	r3, [pc, #580]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009180:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d07b      	beq.n	8009286 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	2b08      	cmp	r3, #8
 8009192:	d006      	beq.n	80091a2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	2b0c      	cmp	r3, #12
 8009198:	d10f      	bne.n	80091ba <HAL_RCC_OscConfig+0x5e>
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091a0:	d10b      	bne.n	80091ba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091a2:	4b87      	ldr	r3, [pc, #540]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d06a      	beq.n	8009284 <HAL_RCC_OscConfig+0x128>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d166      	bne.n	8009284 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e2f7      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d106      	bne.n	80091d0 <HAL_RCC_OscConfig+0x74>
 80091c2:	4b7f      	ldr	r3, [pc, #508]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a7e      	ldr	r2, [pc, #504]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80091c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	e02d      	b.n	800922c <HAL_RCC_OscConfig+0xd0>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10c      	bne.n	80091f2 <HAL_RCC_OscConfig+0x96>
 80091d8:	4b79      	ldr	r3, [pc, #484]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a78      	ldr	r2, [pc, #480]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80091de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	4b76      	ldr	r3, [pc, #472]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a75      	ldr	r2, [pc, #468]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80091ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	e01c      	b.n	800922c <HAL_RCC_OscConfig+0xd0>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	2b05      	cmp	r3, #5
 80091f8:	d10c      	bne.n	8009214 <HAL_RCC_OscConfig+0xb8>
 80091fa:	4b71      	ldr	r3, [pc, #452]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a70      	ldr	r2, [pc, #448]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 8009200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009204:	6013      	str	r3, [r2, #0]
 8009206:	4b6e      	ldr	r3, [pc, #440]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a6d      	ldr	r2, [pc, #436]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 800920c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009210:	6013      	str	r3, [r2, #0]
 8009212:	e00b      	b.n	800922c <HAL_RCC_OscConfig+0xd0>
 8009214:	4b6a      	ldr	r3, [pc, #424]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a69      	ldr	r2, [pc, #420]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 800921a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	4b67      	ldr	r3, [pc, #412]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a66      	ldr	r2, [pc, #408]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 8009226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800922a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d013      	beq.n	800925c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009234:	f7fc f97e 	bl	8005534 <HAL_GetTick>
 8009238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800923a:	e008      	b.n	800924e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800923c:	f7fc f97a 	bl	8005534 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b64      	cmp	r3, #100	@ 0x64
 8009248:	d901      	bls.n	800924e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e2ad      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800924e:	4b5c      	ldr	r3, [pc, #368]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0f0      	beq.n	800923c <HAL_RCC_OscConfig+0xe0>
 800925a:	e014      	b.n	8009286 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800925c:	f7fc f96a 	bl	8005534 <HAL_GetTick>
 8009260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009262:	e008      	b.n	8009276 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009264:	f7fc f966 	bl	8005534 <HAL_GetTick>
 8009268:	4602      	mov	r2, r0
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	2b64      	cmp	r3, #100	@ 0x64
 8009270:	d901      	bls.n	8009276 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e299      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009276:	4b52      	ldr	r3, [pc, #328]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1f0      	bne.n	8009264 <HAL_RCC_OscConfig+0x108>
 8009282:	e000      	b.n	8009286 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d05a      	beq.n	8009348 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	2b04      	cmp	r3, #4
 8009296:	d005      	beq.n	80092a4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	2b0c      	cmp	r3, #12
 800929c:	d119      	bne.n	80092d2 <HAL_RCC_OscConfig+0x176>
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d116      	bne.n	80092d2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092a4:	4b46      	ldr	r3, [pc, #280]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0302 	and.w	r3, r3, #2
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d005      	beq.n	80092bc <HAL_RCC_OscConfig+0x160>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d001      	beq.n	80092bc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e276      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092bc:	4b40      	ldr	r3, [pc, #256]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	021b      	lsls	r3, r3, #8
 80092ca:	493d      	ldr	r1, [pc, #244]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80092cc:	4313      	orrs	r3, r2
 80092ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092d0:	e03a      	b.n	8009348 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d020      	beq.n	800931c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092da:	4b3a      	ldr	r3, [pc, #232]	@ (80093c4 <HAL_RCC_OscConfig+0x268>)
 80092dc:	2201      	movs	r2, #1
 80092de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092e0:	f7fc f928 	bl	8005534 <HAL_GetTick>
 80092e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092e6:	e008      	b.n	80092fa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092e8:	f7fc f924 	bl	8005534 <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d901      	bls.n	80092fa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e257      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092fa:	4b31      	ldr	r3, [pc, #196]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 0302 	and.w	r3, r3, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d0f0      	beq.n	80092e8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009306:	4b2e      	ldr	r3, [pc, #184]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	021b      	lsls	r3, r3, #8
 8009314:	492a      	ldr	r1, [pc, #168]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 8009316:	4313      	orrs	r3, r2
 8009318:	604b      	str	r3, [r1, #4]
 800931a:	e015      	b.n	8009348 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800931c:	4b29      	ldr	r3, [pc, #164]	@ (80093c4 <HAL_RCC_OscConfig+0x268>)
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009322:	f7fc f907 	bl	8005534 <HAL_GetTick>
 8009326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009328:	e008      	b.n	800933c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800932a:	f7fc f903 	bl	8005534 <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	2b02      	cmp	r3, #2
 8009336:	d901      	bls.n	800933c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e236      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800933c:	4b20      	ldr	r3, [pc, #128]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1f0      	bne.n	800932a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0310 	and.w	r3, r3, #16
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 80b8 	beq.w	80094c6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d170      	bne.n	800943e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800935c:	4b18      	ldr	r3, [pc, #96]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009364:	2b00      	cmp	r3, #0
 8009366:	d005      	beq.n	8009374 <HAL_RCC_OscConfig+0x218>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e21a      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a1a      	ldr	r2, [r3, #32]
 8009378:	4b11      	ldr	r3, [pc, #68]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009380:	429a      	cmp	r2, r3
 8009382:	d921      	bls.n	80093c8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a1b      	ldr	r3, [r3, #32]
 8009388:	4618      	mov	r0, r3
 800938a:	f000 fc7d 	bl	8009c88 <RCC_SetFlashLatencyFromMSIRange>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	e208      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009398:	4b09      	ldr	r3, [pc, #36]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	4906      	ldr	r1, [pc, #24]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80093a6:	4313      	orrs	r3, r2
 80093a8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80093aa:	4b05      	ldr	r3, [pc, #20]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	061b      	lsls	r3, r3, #24
 80093b8:	4901      	ldr	r1, [pc, #4]	@ (80093c0 <HAL_RCC_OscConfig+0x264>)
 80093ba:	4313      	orrs	r3, r2
 80093bc:	604b      	str	r3, [r1, #4]
 80093be:	e020      	b.n	8009402 <HAL_RCC_OscConfig+0x2a6>
 80093c0:	40023800 	.word	0x40023800
 80093c4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80093c8:	4b99      	ldr	r3, [pc, #612]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	4996      	ldr	r1, [pc, #600]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80093da:	4b95      	ldr	r3, [pc, #596]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	061b      	lsls	r3, r3, #24
 80093e8:	4991      	ldr	r1, [pc, #580]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 fc48 	bl	8009c88 <RCC_SetFlashLatencyFromMSIRange>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e1d3      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	0b5b      	lsrs	r3, r3, #13
 8009408:	3301      	adds	r3, #1
 800940a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800940e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009412:	4a87      	ldr	r2, [pc, #540]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 8009414:	6892      	ldr	r2, [r2, #8]
 8009416:	0912      	lsrs	r2, r2, #4
 8009418:	f002 020f 	and.w	r2, r2, #15
 800941c:	4985      	ldr	r1, [pc, #532]	@ (8009634 <HAL_RCC_OscConfig+0x4d8>)
 800941e:	5c8a      	ldrb	r2, [r1, r2]
 8009420:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009422:	4a85      	ldr	r2, [pc, #532]	@ (8009638 <HAL_RCC_OscConfig+0x4dc>)
 8009424:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009426:	4b85      	ldr	r3, [pc, #532]	@ (800963c <HAL_RCC_OscConfig+0x4e0>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4618      	mov	r0, r3
 800942c:	f7fc f836 	bl	800549c <HAL_InitTick>
 8009430:	4603      	mov	r3, r0
 8009432:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d045      	beq.n	80094c6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800943a:	7bfb      	ldrb	r3, [r7, #15]
 800943c:	e1b5      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d029      	beq.n	800949a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009446:	4b7e      	ldr	r3, [pc, #504]	@ (8009640 <HAL_RCC_OscConfig+0x4e4>)
 8009448:	2201      	movs	r2, #1
 800944a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800944c:	f7fc f872 	bl	8005534 <HAL_GetTick>
 8009450:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009452:	e008      	b.n	8009466 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009454:	f7fc f86e 	bl	8005534 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	2b02      	cmp	r3, #2
 8009460:	d901      	bls.n	8009466 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e1a1      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009466:	4b72      	ldr	r3, [pc, #456]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800946e:	2b00      	cmp	r3, #0
 8009470:	d0f0      	beq.n	8009454 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009472:	4b6f      	ldr	r3, [pc, #444]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	496c      	ldr	r1, [pc, #432]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 8009480:	4313      	orrs	r3, r2
 8009482:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009484:	4b6a      	ldr	r3, [pc, #424]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	061b      	lsls	r3, r3, #24
 8009492:	4967      	ldr	r1, [pc, #412]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 8009494:	4313      	orrs	r3, r2
 8009496:	604b      	str	r3, [r1, #4]
 8009498:	e015      	b.n	80094c6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800949a:	4b69      	ldr	r3, [pc, #420]	@ (8009640 <HAL_RCC_OscConfig+0x4e4>)
 800949c:	2200      	movs	r2, #0
 800949e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094a0:	f7fc f848 	bl	8005534 <HAL_GetTick>
 80094a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80094a6:	e008      	b.n	80094ba <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80094a8:	f7fc f844 	bl	8005534 <HAL_GetTick>
 80094ac:	4602      	mov	r2, r0
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d901      	bls.n	80094ba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e177      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80094ba:	4b5d      	ldr	r3, [pc, #372]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1f0      	bne.n	80094a8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0308 	and.w	r3, r3, #8
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d030      	beq.n	8009534 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d016      	beq.n	8009508 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80094da:	4b5a      	ldr	r3, [pc, #360]	@ (8009644 <HAL_RCC_OscConfig+0x4e8>)
 80094dc:	2201      	movs	r2, #1
 80094de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094e0:	f7fc f828 	bl	8005534 <HAL_GetTick>
 80094e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80094e6:	e008      	b.n	80094fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094e8:	f7fc f824 	bl	8005534 <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d901      	bls.n	80094fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e157      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80094fa:	4b4d      	ldr	r3, [pc, #308]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80094fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094fe:	f003 0302 	and.w	r3, r3, #2
 8009502:	2b00      	cmp	r3, #0
 8009504:	d0f0      	beq.n	80094e8 <HAL_RCC_OscConfig+0x38c>
 8009506:	e015      	b.n	8009534 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009508:	4b4e      	ldr	r3, [pc, #312]	@ (8009644 <HAL_RCC_OscConfig+0x4e8>)
 800950a:	2200      	movs	r2, #0
 800950c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800950e:	f7fc f811 	bl	8005534 <HAL_GetTick>
 8009512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009514:	e008      	b.n	8009528 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009516:	f7fc f80d 	bl	8005534 <HAL_GetTick>
 800951a:	4602      	mov	r2, r0
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	2b02      	cmp	r3, #2
 8009522:	d901      	bls.n	8009528 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	e140      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009528:	4b41      	ldr	r3, [pc, #260]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 800952a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800952c:	f003 0302 	and.w	r3, r3, #2
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1f0      	bne.n	8009516 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 0304 	and.w	r3, r3, #4
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 80b5 	beq.w	80096ac <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009542:	2300      	movs	r3, #0
 8009544:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009546:	4b3a      	ldr	r3, [pc, #232]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 8009548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10d      	bne.n	800956e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009552:	4b37      	ldr	r3, [pc, #220]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 8009554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009556:	4a36      	ldr	r2, [pc, #216]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 8009558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800955c:	6253      	str	r3, [r2, #36]	@ 0x24
 800955e:	4b34      	ldr	r3, [pc, #208]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 8009560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009566:	60bb      	str	r3, [r7, #8]
 8009568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800956a:	2301      	movs	r3, #1
 800956c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800956e:	4b36      	ldr	r3, [pc, #216]	@ (8009648 <HAL_RCC_OscConfig+0x4ec>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009576:	2b00      	cmp	r3, #0
 8009578:	d118      	bne.n	80095ac <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800957a:	4b33      	ldr	r3, [pc, #204]	@ (8009648 <HAL_RCC_OscConfig+0x4ec>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a32      	ldr	r2, [pc, #200]	@ (8009648 <HAL_RCC_OscConfig+0x4ec>)
 8009580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009586:	f7fb ffd5 	bl	8005534 <HAL_GetTick>
 800958a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800958c:	e008      	b.n	80095a0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800958e:	f7fb ffd1 	bl	8005534 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b64      	cmp	r3, #100	@ 0x64
 800959a:	d901      	bls.n	80095a0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e104      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095a0:	4b29      	ldr	r3, [pc, #164]	@ (8009648 <HAL_RCC_OscConfig+0x4ec>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0f0      	beq.n	800958e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d106      	bne.n	80095c2 <HAL_RCC_OscConfig+0x466>
 80095b4:	4b1e      	ldr	r3, [pc, #120]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80095b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80095ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095be:	6353      	str	r3, [r2, #52]	@ 0x34
 80095c0:	e02d      	b.n	800961e <HAL_RCC_OscConfig+0x4c2>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10c      	bne.n	80095e4 <HAL_RCC_OscConfig+0x488>
 80095ca:	4b19      	ldr	r3, [pc, #100]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80095cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ce:	4a18      	ldr	r2, [pc, #96]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80095d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095d4:	6353      	str	r3, [r2, #52]	@ 0x34
 80095d6:	4b16      	ldr	r3, [pc, #88]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80095d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095da:	4a15      	ldr	r2, [pc, #84]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80095dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095e0:	6353      	str	r3, [r2, #52]	@ 0x34
 80095e2:	e01c      	b.n	800961e <HAL_RCC_OscConfig+0x4c2>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	2b05      	cmp	r3, #5
 80095ea:	d10c      	bne.n	8009606 <HAL_RCC_OscConfig+0x4aa>
 80095ec:	4b10      	ldr	r3, [pc, #64]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80095ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095f0:	4a0f      	ldr	r2, [pc, #60]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80095f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80095f6:	6353      	str	r3, [r2, #52]	@ 0x34
 80095f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80095fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095fc:	4a0c      	ldr	r2, [pc, #48]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 80095fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009602:	6353      	str	r3, [r2, #52]	@ 0x34
 8009604:	e00b      	b.n	800961e <HAL_RCC_OscConfig+0x4c2>
 8009606:	4b0a      	ldr	r3, [pc, #40]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 8009608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800960a:	4a09      	ldr	r2, [pc, #36]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 800960c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009610:	6353      	str	r3, [r2, #52]	@ 0x34
 8009612:	4b07      	ldr	r3, [pc, #28]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 8009614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009616:	4a06      	ldr	r2, [pc, #24]	@ (8009630 <HAL_RCC_OscConfig+0x4d4>)
 8009618:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800961c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d024      	beq.n	8009670 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009626:	f7fb ff85 	bl	8005534 <HAL_GetTick>
 800962a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800962c:	e019      	b.n	8009662 <HAL_RCC_OscConfig+0x506>
 800962e:	bf00      	nop
 8009630:	40023800 	.word	0x40023800
 8009634:	0800d3c4 	.word	0x0800d3c4
 8009638:	20000000 	.word	0x20000000
 800963c:	200000bc 	.word	0x200000bc
 8009640:	42470020 	.word	0x42470020
 8009644:	42470680 	.word	0x42470680
 8009648:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800964c:	f7fb ff72 	bl	8005534 <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800965a:	4293      	cmp	r3, r2
 800965c:	d901      	bls.n	8009662 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e0a3      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009662:	4b54      	ldr	r3, [pc, #336]	@ (80097b4 <HAL_RCC_OscConfig+0x658>)
 8009664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0ee      	beq.n	800964c <HAL_RCC_OscConfig+0x4f0>
 800966e:	e014      	b.n	800969a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009670:	f7fb ff60 	bl	8005534 <HAL_GetTick>
 8009674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009676:	e00a      	b.n	800968e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009678:	f7fb ff5c 	bl	8005534 <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009686:	4293      	cmp	r3, r2
 8009688:	d901      	bls.n	800968e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e08d      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800968e:	4b49      	ldr	r3, [pc, #292]	@ (80097b4 <HAL_RCC_OscConfig+0x658>)
 8009690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1ee      	bne.n	8009678 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800969a:	7ffb      	ldrb	r3, [r7, #31]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d105      	bne.n	80096ac <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096a0:	4b44      	ldr	r3, [pc, #272]	@ (80097b4 <HAL_RCC_OscConfig+0x658>)
 80096a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a4:	4a43      	ldr	r2, [pc, #268]	@ (80097b4 <HAL_RCC_OscConfig+0x658>)
 80096a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096aa:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d079      	beq.n	80097a8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	2b0c      	cmp	r3, #12
 80096b8:	d056      	beq.n	8009768 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d13b      	bne.n	800973a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096c2:	4b3d      	ldr	r3, [pc, #244]	@ (80097b8 <HAL_RCC_OscConfig+0x65c>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096c8:	f7fb ff34 	bl	8005534 <HAL_GetTick>
 80096cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096ce:	e008      	b.n	80096e2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096d0:	f7fb ff30 	bl	8005534 <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d901      	bls.n	80096e2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80096de:	2303      	movs	r3, #3
 80096e0:	e063      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096e2:	4b34      	ldr	r3, [pc, #208]	@ (80097b4 <HAL_RCC_OscConfig+0x658>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1f0      	bne.n	80096d0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80096ee:	4b31      	ldr	r3, [pc, #196]	@ (80097b4 <HAL_RCC_OscConfig+0x658>)
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096fe:	4319      	orrs	r1, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009704:	430b      	orrs	r3, r1
 8009706:	492b      	ldr	r1, [pc, #172]	@ (80097b4 <HAL_RCC_OscConfig+0x658>)
 8009708:	4313      	orrs	r3, r2
 800970a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800970c:	4b2a      	ldr	r3, [pc, #168]	@ (80097b8 <HAL_RCC_OscConfig+0x65c>)
 800970e:	2201      	movs	r2, #1
 8009710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009712:	f7fb ff0f 	bl	8005534 <HAL_GetTick>
 8009716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009718:	e008      	b.n	800972c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800971a:	f7fb ff0b 	bl	8005534 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	2b02      	cmp	r3, #2
 8009726:	d901      	bls.n	800972c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e03e      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800972c:	4b21      	ldr	r3, [pc, #132]	@ (80097b4 <HAL_RCC_OscConfig+0x658>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d0f0      	beq.n	800971a <HAL_RCC_OscConfig+0x5be>
 8009738:	e036      	b.n	80097a8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800973a:	4b1f      	ldr	r3, [pc, #124]	@ (80097b8 <HAL_RCC_OscConfig+0x65c>)
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009740:	f7fb fef8 	bl	8005534 <HAL_GetTick>
 8009744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009746:	e008      	b.n	800975a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009748:	f7fb fef4 	bl	8005534 <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	2b02      	cmp	r3, #2
 8009754:	d901      	bls.n	800975a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e027      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800975a:	4b16      	ldr	r3, [pc, #88]	@ (80097b4 <HAL_RCC_OscConfig+0x658>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1f0      	bne.n	8009748 <HAL_RCC_OscConfig+0x5ec>
 8009766:	e01f      	b.n	80097a8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800976c:	2b01      	cmp	r3, #1
 800976e:	d101      	bne.n	8009774 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e01a      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009774:	4b0f      	ldr	r3, [pc, #60]	@ (80097b4 <HAL_RCC_OscConfig+0x658>)
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009784:	429a      	cmp	r2, r3
 8009786:	d10d      	bne.n	80097a4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009792:	429a      	cmp	r2, r3
 8009794:	d106      	bne.n	80097a4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d001      	beq.n	80097a8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e000      	b.n	80097aa <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3720      	adds	r7, #32
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	40023800 	.word	0x40023800
 80097b8:	42470060 	.word	0x42470060

080097bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e11a      	b.n	8009a06 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80097d0:	4b8f      	ldr	r3, [pc, #572]	@ (8009a10 <HAL_RCC_ClockConfig+0x254>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	683a      	ldr	r2, [r7, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d919      	bls.n	8009812 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d105      	bne.n	80097f0 <HAL_RCC_ClockConfig+0x34>
 80097e4:	4b8a      	ldr	r3, [pc, #552]	@ (8009a10 <HAL_RCC_ClockConfig+0x254>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a89      	ldr	r2, [pc, #548]	@ (8009a10 <HAL_RCC_ClockConfig+0x254>)
 80097ea:	f043 0304 	orr.w	r3, r3, #4
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	4b87      	ldr	r3, [pc, #540]	@ (8009a10 <HAL_RCC_ClockConfig+0x254>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f023 0201 	bic.w	r2, r3, #1
 80097f8:	4985      	ldr	r1, [pc, #532]	@ (8009a10 <HAL_RCC_ClockConfig+0x254>)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009800:	4b83      	ldr	r3, [pc, #524]	@ (8009a10 <HAL_RCC_ClockConfig+0x254>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d001      	beq.n	8009812 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e0f9      	b.n	8009a06 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	2b00      	cmp	r3, #0
 800981c:	d008      	beq.n	8009830 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800981e:	4b7d      	ldr	r3, [pc, #500]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	497a      	ldr	r1, [pc, #488]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 800982c:	4313      	orrs	r3, r2
 800982e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 808e 	beq.w	800995a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	2b02      	cmp	r3, #2
 8009844:	d107      	bne.n	8009856 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009846:	4b73      	ldr	r3, [pc, #460]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d121      	bne.n	8009896 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e0d7      	b.n	8009a06 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	2b03      	cmp	r3, #3
 800985c:	d107      	bne.n	800986e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800985e:	4b6d      	ldr	r3, [pc, #436]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d115      	bne.n	8009896 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e0cb      	b.n	8009a06 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d107      	bne.n	8009886 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009876:	4b67      	ldr	r3, [pc, #412]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 0302 	and.w	r3, r3, #2
 800987e:	2b00      	cmp	r3, #0
 8009880:	d109      	bne.n	8009896 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e0bf      	b.n	8009a06 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009886:	4b63      	ldr	r3, [pc, #396]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800988e:	2b00      	cmp	r3, #0
 8009890:	d101      	bne.n	8009896 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e0b7      	b.n	8009a06 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009896:	4b5f      	ldr	r3, [pc, #380]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	f023 0203 	bic.w	r2, r3, #3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	495c      	ldr	r1, [pc, #368]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80098a8:	f7fb fe44 	bl	8005534 <HAL_GetTick>
 80098ac:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d112      	bne.n	80098dc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80098b6:	e00a      	b.n	80098ce <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098b8:	f7fb fe3c 	bl	8005534 <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d901      	bls.n	80098ce <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e09b      	b.n	8009a06 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80098ce:	4b51      	ldr	r3, [pc, #324]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	f003 030c 	and.w	r3, r3, #12
 80098d6:	2b08      	cmp	r3, #8
 80098d8:	d1ee      	bne.n	80098b8 <HAL_RCC_ClockConfig+0xfc>
 80098da:	e03e      	b.n	800995a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d112      	bne.n	800990a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80098e4:	e00a      	b.n	80098fc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098e6:	f7fb fe25 	bl	8005534 <HAL_GetTick>
 80098ea:	4602      	mov	r2, r0
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d901      	bls.n	80098fc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e084      	b.n	8009a06 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80098fc:	4b45      	ldr	r3, [pc, #276]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f003 030c 	and.w	r3, r3, #12
 8009904:	2b0c      	cmp	r3, #12
 8009906:	d1ee      	bne.n	80098e6 <HAL_RCC_ClockConfig+0x12a>
 8009908:	e027      	b.n	800995a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d11d      	bne.n	800994e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009912:	e00a      	b.n	800992a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009914:	f7fb fe0e 	bl	8005534 <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009922:	4293      	cmp	r3, r2
 8009924:	d901      	bls.n	800992a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e06d      	b.n	8009a06 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800992a:	4b3a      	ldr	r3, [pc, #232]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f003 030c 	and.w	r3, r3, #12
 8009932:	2b04      	cmp	r3, #4
 8009934:	d1ee      	bne.n	8009914 <HAL_RCC_ClockConfig+0x158>
 8009936:	e010      	b.n	800995a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009938:	f7fb fdfc 	bl	8005534 <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009946:	4293      	cmp	r3, r2
 8009948:	d901      	bls.n	800994e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e05b      	b.n	8009a06 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800994e:	4b31      	ldr	r3, [pc, #196]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f003 030c 	and.w	r3, r3, #12
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1ee      	bne.n	8009938 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800995a:	4b2d      	ldr	r3, [pc, #180]	@ (8009a10 <HAL_RCC_ClockConfig+0x254>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	429a      	cmp	r2, r3
 8009966:	d219      	bcs.n	800999c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d105      	bne.n	800997a <HAL_RCC_ClockConfig+0x1be>
 800996e:	4b28      	ldr	r3, [pc, #160]	@ (8009a10 <HAL_RCC_ClockConfig+0x254>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a27      	ldr	r2, [pc, #156]	@ (8009a10 <HAL_RCC_ClockConfig+0x254>)
 8009974:	f043 0304 	orr.w	r3, r3, #4
 8009978:	6013      	str	r3, [r2, #0]
 800997a:	4b25      	ldr	r3, [pc, #148]	@ (8009a10 <HAL_RCC_ClockConfig+0x254>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f023 0201 	bic.w	r2, r3, #1
 8009982:	4923      	ldr	r1, [pc, #140]	@ (8009a10 <HAL_RCC_ClockConfig+0x254>)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	4313      	orrs	r3, r2
 8009988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800998a:	4b21      	ldr	r3, [pc, #132]	@ (8009a10 <HAL_RCC_ClockConfig+0x254>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	429a      	cmp	r2, r3
 8009996:	d001      	beq.n	800999c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e034      	b.n	8009a06 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0304 	and.w	r3, r3, #4
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d008      	beq.n	80099ba <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80099a8:	4b1a      	ldr	r3, [pc, #104]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	4917      	ldr	r1, [pc, #92]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 0308 	and.w	r3, r3, #8
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d009      	beq.n	80099da <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80099c6:	4b13      	ldr	r3, [pc, #76]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	00db      	lsls	r3, r3, #3
 80099d4:	490f      	ldr	r1, [pc, #60]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 80099d6:	4313      	orrs	r3, r2
 80099d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80099da:	f000 f823 	bl	8009a24 <HAL_RCC_GetSysClockFreq>
 80099de:	4602      	mov	r2, r0
 80099e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009a14 <HAL_RCC_ClockConfig+0x258>)
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	091b      	lsrs	r3, r3, #4
 80099e6:	f003 030f 	and.w	r3, r3, #15
 80099ea:	490b      	ldr	r1, [pc, #44]	@ (8009a18 <HAL_RCC_ClockConfig+0x25c>)
 80099ec:	5ccb      	ldrb	r3, [r1, r3]
 80099ee:	fa22 f303 	lsr.w	r3, r2, r3
 80099f2:	4a0a      	ldr	r2, [pc, #40]	@ (8009a1c <HAL_RCC_ClockConfig+0x260>)
 80099f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80099f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009a20 <HAL_RCC_ClockConfig+0x264>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fb fd4e 	bl	800549c <HAL_InitTick>
 8009a00:	4603      	mov	r3, r0
 8009a02:	72fb      	strb	r3, [r7, #11]

  return status;
 8009a04:	7afb      	ldrb	r3, [r7, #11]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	40023c00 	.word	0x40023c00
 8009a14:	40023800 	.word	0x40023800
 8009a18:	0800d3c4 	.word	0x0800d3c4
 8009a1c:	20000000 	.word	0x20000000
 8009a20:	200000bc 	.word	0x200000bc

08009a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a28:	b092      	sub	sp, #72	@ 0x48
 8009a2a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8009a2c:	4b79      	ldr	r3, [pc, #484]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a34:	f003 030c 	and.w	r3, r3, #12
 8009a38:	2b0c      	cmp	r3, #12
 8009a3a:	d00d      	beq.n	8009a58 <HAL_RCC_GetSysClockFreq+0x34>
 8009a3c:	2b0c      	cmp	r3, #12
 8009a3e:	f200 80d5 	bhi.w	8009bec <HAL_RCC_GetSysClockFreq+0x1c8>
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d002      	beq.n	8009a4c <HAL_RCC_GetSysClockFreq+0x28>
 8009a46:	2b08      	cmp	r3, #8
 8009a48:	d003      	beq.n	8009a52 <HAL_RCC_GetSysClockFreq+0x2e>
 8009a4a:	e0cf      	b.n	8009bec <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009a4c:	4b72      	ldr	r3, [pc, #456]	@ (8009c18 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8009a4e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8009a50:	e0da      	b.n	8009c08 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009a52:	4b72      	ldr	r3, [pc, #456]	@ (8009c1c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009a54:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8009a56:	e0d7      	b.n	8009c08 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a5a:	0c9b      	lsrs	r3, r3, #18
 8009a5c:	f003 020f 	and.w	r2, r3, #15
 8009a60:	4b6f      	ldr	r3, [pc, #444]	@ (8009c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009a62:	5c9b      	ldrb	r3, [r3, r2]
 8009a64:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a68:	0d9b      	lsrs	r3, r3, #22
 8009a6a:	f003 0303 	and.w	r3, r3, #3
 8009a6e:	3301      	adds	r3, #1
 8009a70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a72:	4b68      	ldr	r3, [pc, #416]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d05d      	beq.n	8009b3a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a80:	2200      	movs	r2, #0
 8009a82:	4618      	mov	r0, r3
 8009a84:	4611      	mov	r1, r2
 8009a86:	4604      	mov	r4, r0
 8009a88:	460d      	mov	r5, r1
 8009a8a:	4622      	mov	r2, r4
 8009a8c:	462b      	mov	r3, r5
 8009a8e:	f04f 0000 	mov.w	r0, #0
 8009a92:	f04f 0100 	mov.w	r1, #0
 8009a96:	0159      	lsls	r1, r3, #5
 8009a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009a9c:	0150      	lsls	r0, r2, #5
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	1a51      	subs	r1, r2, r1
 8009aa6:	6139      	str	r1, [r7, #16]
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8009aae:	617b      	str	r3, [r7, #20]
 8009ab0:	f04f 0200 	mov.w	r2, #0
 8009ab4:	f04f 0300 	mov.w	r3, #0
 8009ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009abc:	4659      	mov	r1, fp
 8009abe:	018b      	lsls	r3, r1, #6
 8009ac0:	4651      	mov	r1, sl
 8009ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009ac6:	4651      	mov	r1, sl
 8009ac8:	018a      	lsls	r2, r1, #6
 8009aca:	46d4      	mov	ip, sl
 8009acc:	ebb2 080c 	subs.w	r8, r2, ip
 8009ad0:	4659      	mov	r1, fp
 8009ad2:	eb63 0901 	sbc.w	r9, r3, r1
 8009ad6:	f04f 0200 	mov.w	r2, #0
 8009ada:	f04f 0300 	mov.w	r3, #0
 8009ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009aea:	4690      	mov	r8, r2
 8009aec:	4699      	mov	r9, r3
 8009aee:	4623      	mov	r3, r4
 8009af0:	eb18 0303 	adds.w	r3, r8, r3
 8009af4:	60bb      	str	r3, [r7, #8]
 8009af6:	462b      	mov	r3, r5
 8009af8:	eb49 0303 	adc.w	r3, r9, r3
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	f04f 0200 	mov.w	r2, #0
 8009b02:	f04f 0300 	mov.w	r3, #0
 8009b06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	024b      	lsls	r3, r1, #9
 8009b0e:	4620      	mov	r0, r4
 8009b10:	4629      	mov	r1, r5
 8009b12:	4604      	mov	r4, r0
 8009b14:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8009b18:	4601      	mov	r1, r0
 8009b1a:	024a      	lsls	r2, r1, #9
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b22:	2200      	movs	r2, #0
 8009b24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009b2c:	f7f7 fb26 	bl	800117c <__aeabi_uldivmod>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	4613      	mov	r3, r2
 8009b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b38:	e055      	b.n	8009be6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	623b      	str	r3, [r7, #32]
 8009b40:	627a      	str	r2, [r7, #36]	@ 0x24
 8009b42:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009b46:	4642      	mov	r2, r8
 8009b48:	464b      	mov	r3, r9
 8009b4a:	f04f 0000 	mov.w	r0, #0
 8009b4e:	f04f 0100 	mov.w	r1, #0
 8009b52:	0159      	lsls	r1, r3, #5
 8009b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009b58:	0150      	lsls	r0, r2, #5
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	46c4      	mov	ip, r8
 8009b60:	ebb2 0a0c 	subs.w	sl, r2, ip
 8009b64:	4640      	mov	r0, r8
 8009b66:	4649      	mov	r1, r9
 8009b68:	468c      	mov	ip, r1
 8009b6a:	eb63 0b0c 	sbc.w	fp, r3, ip
 8009b6e:	f04f 0200 	mov.w	r2, #0
 8009b72:	f04f 0300 	mov.w	r3, #0
 8009b76:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009b7a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009b7e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009b82:	ebb2 040a 	subs.w	r4, r2, sl
 8009b86:	eb63 050b 	sbc.w	r5, r3, fp
 8009b8a:	f04f 0200 	mov.w	r2, #0
 8009b8e:	f04f 0300 	mov.w	r3, #0
 8009b92:	00eb      	lsls	r3, r5, #3
 8009b94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b98:	00e2      	lsls	r2, r4, #3
 8009b9a:	4614      	mov	r4, r2
 8009b9c:	461d      	mov	r5, r3
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	18e3      	adds	r3, r4, r3
 8009ba2:	603b      	str	r3, [r7, #0]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	eb45 0303 	adc.w	r3, r5, r3
 8009baa:	607b      	str	r3, [r7, #4]
 8009bac:	f04f 0200 	mov.w	r2, #0
 8009bb0:	f04f 0300 	mov.w	r3, #0
 8009bb4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009bb8:	4629      	mov	r1, r5
 8009bba:	028b      	lsls	r3, r1, #10
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8009bc6:	4601      	mov	r1, r0
 8009bc8:	028a      	lsls	r2, r1, #10
 8009bca:	4610      	mov	r0, r2
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	61bb      	str	r3, [r7, #24]
 8009bd4:	61fa      	str	r2, [r7, #28]
 8009bd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009bda:	f7f7 facf 	bl	800117c <__aeabi_uldivmod>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	4613      	mov	r3, r2
 8009be4:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8009be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009be8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8009bea:	e00d      	b.n	8009c08 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8009bec:	4b09      	ldr	r3, [pc, #36]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	0b5b      	lsrs	r3, r3, #13
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009c00:	fa02 f303 	lsl.w	r3, r2, r3
 8009c04:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8009c06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009c08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3748      	adds	r7, #72	@ 0x48
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c14:	40023800 	.word	0x40023800
 8009c18:	00f42400 	.word	0x00f42400
 8009c1c:	007a1200 	.word	0x007a1200
 8009c20:	0800d3b8 	.word	0x0800d3b8

08009c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c24:	b480      	push	{r7}
 8009c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c28:	4b02      	ldr	r3, [pc, #8]	@ (8009c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bc80      	pop	{r7}
 8009c32:	4770      	bx	lr
 8009c34:	20000000 	.word	0x20000000

08009c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009c3c:	f7ff fff2 	bl	8009c24 <HAL_RCC_GetHCLKFreq>
 8009c40:	4602      	mov	r2, r0
 8009c42:	4b05      	ldr	r3, [pc, #20]	@ (8009c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	0a1b      	lsrs	r3, r3, #8
 8009c48:	f003 0307 	and.w	r3, r3, #7
 8009c4c:	4903      	ldr	r1, [pc, #12]	@ (8009c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c4e:	5ccb      	ldrb	r3, [r1, r3]
 8009c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	40023800 	.word	0x40023800
 8009c5c:	0800d3d4 	.word	0x0800d3d4

08009c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009c64:	f7ff ffde 	bl	8009c24 <HAL_RCC_GetHCLKFreq>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	4b05      	ldr	r3, [pc, #20]	@ (8009c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	0adb      	lsrs	r3, r3, #11
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	4903      	ldr	r1, [pc, #12]	@ (8009c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c76:	5ccb      	ldrb	r3, [r1, r3]
 8009c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	40023800 	.word	0x40023800
 8009c84:	0800d3d4 	.word	0x0800d3d4

08009c88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b087      	sub	sp, #28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009c90:	2300      	movs	r3, #0
 8009c92:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009c94:	4b29      	ldr	r3, [pc, #164]	@ (8009d3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d12c      	bne.n	8009cfa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009ca0:	4b26      	ldr	r3, [pc, #152]	@ (8009d3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d005      	beq.n	8009cb8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009cac:	4b24      	ldr	r3, [pc, #144]	@ (8009d40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8009cb4:	617b      	str	r3, [r7, #20]
 8009cb6:	e016      	b.n	8009ce6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cb8:	4b20      	ldr	r3, [pc, #128]	@ (8009d3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8009d3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cc2:	6253      	str	r3, [r2, #36]	@ 0x24
 8009cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8009d3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ccc:	60fb      	str	r3, [r7, #12]
 8009cce:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8009d40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8009cd8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cda:	4b18      	ldr	r3, [pc, #96]	@ (8009d3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cde:	4a17      	ldr	r2, [pc, #92]	@ (8009d3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ce4:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8009cec:	d105      	bne.n	8009cfa <RCC_SetFlashLatencyFromMSIRange+0x72>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009cf4:	d101      	bne.n	8009cfa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d105      	bne.n	8009d0c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8009d00:	4b10      	ldr	r3, [pc, #64]	@ (8009d44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a0f      	ldr	r2, [pc, #60]	@ (8009d44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009d06:	f043 0304 	orr.w	r3, r3, #4
 8009d0a:	6013      	str	r3, [r2, #0]
 8009d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f023 0201 	bic.w	r2, r3, #1
 8009d14:	490b      	ldr	r1, [pc, #44]	@ (8009d44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009d1c:	4b09      	ldr	r3, [pc, #36]	@ (8009d44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d001      	beq.n	8009d2e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e000      	b.n	8009d30 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	371c      	adds	r7, #28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bc80      	pop	{r7}
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	40023800 	.word	0x40023800
 8009d40:	40007000 	.word	0x40007000
 8009d44:	40023c00 	.word	0x40023c00

08009d48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e07b      	b.n	8009e52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d108      	bne.n	8009d74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d6a:	d009      	beq.n	8009d80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	61da      	str	r2, [r3, #28]
 8009d72:	e005      	b.n	8009d80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d106      	bne.n	8009da0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7f8 f9e6 	bl	800216c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2202      	movs	r2, #2
 8009da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009db6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009dd2:	431a      	orrs	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	f003 0302 	and.w	r3, r3, #2
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	431a      	orrs	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009df0:	431a      	orrs	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a1b      	ldr	r3, [r3, #32]
 8009e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e04:	ea42 0103 	orr.w	r1, r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e0c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	430a      	orrs	r2, r1
 8009e16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	0c1b      	lsrs	r3, r3, #16
 8009e1e:	f003 0104 	and.w	r1, r3, #4
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e26:	f003 0210 	and.w	r2, r3, #16
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69da      	ldr	r2, [r3, #28]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009e40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b088      	sub	sp, #32
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	603b      	str	r3, [r7, #0]
 8009e66:	4613      	mov	r3, r2
 8009e68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d101      	bne.n	8009e7c <HAL_SPI_Transmit+0x22>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	e12d      	b.n	800a0d8 <HAL_SPI_Transmit+0x27e>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e84:	f7fb fb56 	bl	8005534 <HAL_GetTick>
 8009e88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009e8a:	88fb      	ldrh	r3, [r7, #6]
 8009e8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d002      	beq.n	8009ea0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009e9e:	e116      	b.n	800a0ce <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d002      	beq.n	8009eac <HAL_SPI_Transmit+0x52>
 8009ea6:	88fb      	ldrh	r3, [r7, #6]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d102      	bne.n	8009eb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009eb0:	e10d      	b.n	800a0ce <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2203      	movs	r2, #3
 8009eb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	88fa      	ldrh	r2, [r7, #6]
 8009eca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	88fa      	ldrh	r2, [r7, #6]
 8009ed0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ef8:	d10f      	bne.n	8009f1a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f24:	2b40      	cmp	r3, #64	@ 0x40
 8009f26:	d007      	beq.n	8009f38 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f40:	d14f      	bne.n	8009fe2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d002      	beq.n	8009f50 <HAL_SPI_Transmit+0xf6>
 8009f4a:	8afb      	ldrh	r3, [r7, #22]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d142      	bne.n	8009fd6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f54:	881a      	ldrh	r2, [r3, #0]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f60:	1c9a      	adds	r2, r3, #2
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009f74:	e02f      	b.n	8009fd6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	f003 0302 	and.w	r3, r3, #2
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d112      	bne.n	8009faa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f88:	881a      	ldrh	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f94:	1c9a      	adds	r2, r3, #2
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009fa8:	e015      	b.n	8009fd6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009faa:	f7fb fac3 	bl	8005534 <HAL_GetTick>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	1ad3      	subs	r3, r2, r3
 8009fb4:	683a      	ldr	r2, [r7, #0]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d803      	bhi.n	8009fc2 <HAL_SPI_Transmit+0x168>
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc0:	d102      	bne.n	8009fc8 <HAL_SPI_Transmit+0x16e>
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d106      	bne.n	8009fd6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8009fd4:	e07b      	b.n	800a0ce <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1ca      	bne.n	8009f76 <HAL_SPI_Transmit+0x11c>
 8009fe0:	e050      	b.n	800a084 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d002      	beq.n	8009ff0 <HAL_SPI_Transmit+0x196>
 8009fea:	8afb      	ldrh	r3, [r7, #22]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d144      	bne.n	800a07a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	330c      	adds	r3, #12
 8009ffa:	7812      	ldrb	r2, [r2, #0]
 8009ffc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a002:	1c5a      	adds	r2, r3, #1
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	3b01      	subs	r3, #1
 800a010:	b29a      	uxth	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a016:	e030      	b.n	800a07a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f003 0302 	and.w	r3, r3, #2
 800a022:	2b02      	cmp	r3, #2
 800a024:	d113      	bne.n	800a04e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	330c      	adds	r3, #12
 800a030:	7812      	ldrb	r2, [r2, #0]
 800a032:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a038:	1c5a      	adds	r2, r3, #1
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a042:	b29b      	uxth	r3, r3
 800a044:	3b01      	subs	r3, #1
 800a046:	b29a      	uxth	r2, r3
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a04c:	e015      	b.n	800a07a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a04e:	f7fb fa71 	bl	8005534 <HAL_GetTick>
 800a052:	4602      	mov	r2, r0
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d803      	bhi.n	800a066 <HAL_SPI_Transmit+0x20c>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a064:	d102      	bne.n	800a06c <HAL_SPI_Transmit+0x212>
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d106      	bne.n	800a07a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800a078:	e029      	b.n	800a0ce <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a07e:	b29b      	uxth	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1c9      	bne.n	800a018 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a084:	69ba      	ldr	r2, [r7, #24]
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 f8b1 	bl	800a1f0 <SPI_EndRxTxTransaction>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2220      	movs	r2, #32
 800a098:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10a      	bne.n	800a0b8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	613b      	str	r3, [r7, #16]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	613b      	str	r3, [r7, #16]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	613b      	str	r3, [r7, #16]
 800a0b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	77fb      	strb	r3, [r7, #31]
 800a0c4:	e003      	b.n	800a0ce <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a0d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3720      	adds	r7, #32
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b088      	sub	sp, #32
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	603b      	str	r3, [r7, #0]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a0f0:	f7fb fa20 	bl	8005534 <HAL_GetTick>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f8:	1a9b      	subs	r3, r3, r2
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a100:	f7fb fa18 	bl	8005534 <HAL_GetTick>
 800a104:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a106:	4b39      	ldr	r3, [pc, #228]	@ (800a1ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	015b      	lsls	r3, r3, #5
 800a10c:	0d1b      	lsrs	r3, r3, #20
 800a10e:	69fa      	ldr	r2, [r7, #28]
 800a110:	fb02 f303 	mul.w	r3, r2, r3
 800a114:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a116:	e054      	b.n	800a1c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11e:	d050      	beq.n	800a1c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a120:	f7fb fa08 	bl	8005534 <HAL_GetTick>
 800a124:	4602      	mov	r2, r0
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	69fa      	ldr	r2, [r7, #28]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d902      	bls.n	800a136 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d13d      	bne.n	800a1b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a144:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a14e:	d111      	bne.n	800a174 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a158:	d004      	beq.n	800a164 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a162:	d107      	bne.n	800a174 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a172:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a17c:	d10f      	bne.n	800a19e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a18c:	601a      	str	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a19c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e017      	b.n	800a1e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	689a      	ldr	r2, [r3, #8]
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	68ba      	ldr	r2, [r7, #8]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	bf0c      	ite	eq
 800a1d2:	2301      	moveq	r3, #1
 800a1d4:	2300      	movne	r3, #0
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	461a      	mov	r2, r3
 800a1da:	79fb      	ldrb	r3, [r7, #7]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d19b      	bne.n	800a118 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3720      	adds	r7, #32
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	20000000 	.word	0x20000000

0800a1f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b088      	sub	sp, #32
 800a1f4:	af02      	add	r7, sp, #8
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a1fc:	4b1b      	ldr	r3, [pc, #108]	@ (800a26c <SPI_EndRxTxTransaction+0x7c>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a1b      	ldr	r2, [pc, #108]	@ (800a270 <SPI_EndRxTxTransaction+0x80>)
 800a202:	fba2 2303 	umull	r2, r3, r2, r3
 800a206:	0d5b      	lsrs	r3, r3, #21
 800a208:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a20c:	fb02 f303 	mul.w	r3, r2, r3
 800a210:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a21a:	d112      	bne.n	800a242 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	2200      	movs	r2, #0
 800a224:	2180      	movs	r1, #128	@ 0x80
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f7ff ff5a 	bl	800a0e0 <SPI_WaitFlagStateUntilTimeout>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d016      	beq.n	800a260 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a236:	f043 0220 	orr.w	r2, r3, #32
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a23e:	2303      	movs	r3, #3
 800a240:	e00f      	b.n	800a262 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00a      	beq.n	800a25e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	3b01      	subs	r3, #1
 800a24c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a258:	2b80      	cmp	r3, #128	@ 0x80
 800a25a:	d0f2      	beq.n	800a242 <SPI_EndRxTxTransaction+0x52>
 800a25c:	e000      	b.n	800a260 <SPI_EndRxTxTransaction+0x70>
        break;
 800a25e:	bf00      	nop
  }

  return HAL_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3718      	adds	r7, #24
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	20000000 	.word	0x20000000
 800a270:	165e9f81 	.word	0x165e9f81

0800a274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d101      	bne.n	800a286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	e031      	b.n	800a2ea <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d106      	bne.n	800a2a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f7f7 ffaa 	bl	80021f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	3304      	adds	r3, #4
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	f000 fcd4 	bl	800ac60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
	...

0800a2f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b01      	cmp	r3, #1
 800a306:	d001      	beq.n	800a30c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e03a      	b.n	800a382 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2202      	movs	r2, #2
 800a310:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f042 0201 	orr.w	r2, r2, #1
 800a322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a32c:	d00e      	beq.n	800a34c <HAL_TIM_Base_Start_IT+0x58>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a16      	ldr	r2, [pc, #88]	@ (800a38c <HAL_TIM_Base_Start_IT+0x98>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d009      	beq.n	800a34c <HAL_TIM_Base_Start_IT+0x58>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a14      	ldr	r2, [pc, #80]	@ (800a390 <HAL_TIM_Base_Start_IT+0x9c>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d004      	beq.n	800a34c <HAL_TIM_Base_Start_IT+0x58>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a13      	ldr	r2, [pc, #76]	@ (800a394 <HAL_TIM_Base_Start_IT+0xa0>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d111      	bne.n	800a370 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	f003 0307 	and.w	r3, r3, #7
 800a356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2b06      	cmp	r3, #6
 800a35c:	d010      	beq.n	800a380 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f042 0201 	orr.w	r2, r2, #1
 800a36c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a36e:	e007      	b.n	800a380 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f042 0201 	orr.w	r2, r2, #1
 800a37e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	bc80      	pop	{r7}
 800a38a:	4770      	bx	lr
 800a38c:	40000400 	.word	0x40000400
 800a390:	40000800 	.word	0x40000800
 800a394:	40010800 	.word	0x40010800

0800a398 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68da      	ldr	r2, [r3, #12]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f022 0201 	bic.w	r2, r2, #1
 800a3ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6a1a      	ldr	r2, [r3, #32]
 800a3b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d107      	bne.n	800a3d0 <HAL_TIM_Base_Stop_IT+0x38>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f022 0201 	bic.w	r2, r2, #1
 800a3ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Return function status */
  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bc80      	pop	{r7}
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e031      	b.n	800a45a <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d106      	bne.n	800a410 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f829 	bl	800a462 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2202      	movs	r2, #2
 800a414:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3304      	adds	r3, #4
 800a420:	4619      	mov	r1, r3
 800a422:	4610      	mov	r0, r2
 800a424:	f000 fc1c 	bl	800ac60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a46a:	bf00      	nop
 800a46c:	370c      	adds	r7, #12
 800a46e:	46bd      	mov	sp, r7
 800a470:	bc80      	pop	{r7}
 800a472:	4770      	bx	lr

0800a474 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d109      	bne.n	800a49c <HAL_TIM_PWM_Start_IT+0x28>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	2b01      	cmp	r3, #1
 800a492:	bf14      	ite	ne
 800a494:	2301      	movne	r3, #1
 800a496:	2300      	moveq	r3, #0
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	e022      	b.n	800a4e2 <HAL_TIM_PWM_Start_IT+0x6e>
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	d109      	bne.n	800a4b6 <HAL_TIM_PWM_Start_IT+0x42>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	bf14      	ite	ne
 800a4ae:	2301      	movne	r3, #1
 800a4b0:	2300      	moveq	r3, #0
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	e015      	b.n	800a4e2 <HAL_TIM_PWM_Start_IT+0x6e>
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2b08      	cmp	r3, #8
 800a4ba:	d109      	bne.n	800a4d0 <HAL_TIM_PWM_Start_IT+0x5c>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	bf14      	ite	ne
 800a4c8:	2301      	movne	r3, #1
 800a4ca:	2300      	moveq	r3, #0
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	e008      	b.n	800a4e2 <HAL_TIM_PWM_Start_IT+0x6e>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	bf14      	ite	ne
 800a4dc:	2301      	movne	r3, #1
 800a4de:	2300      	moveq	r3, #0
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d001      	beq.n	800a4ea <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e09c      	b.n	800a624 <HAL_TIM_PWM_Start_IT+0x1b0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d104      	bne.n	800a4fa <HAL_TIM_PWM_Start_IT+0x86>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2202      	movs	r2, #2
 800a4f4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800a4f8:	e013      	b.n	800a522 <HAL_TIM_PWM_Start_IT+0xae>
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	2b04      	cmp	r3, #4
 800a4fe:	d104      	bne.n	800a50a <HAL_TIM_PWM_Start_IT+0x96>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2202      	movs	r2, #2
 800a504:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800a508:	e00b      	b.n	800a522 <HAL_TIM_PWM_Start_IT+0xae>
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d104      	bne.n	800a51a <HAL_TIM_PWM_Start_IT+0xa6>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2202      	movs	r2, #2
 800a514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800a518:	e003      	b.n	800a522 <HAL_TIM_PWM_Start_IT+0xae>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2202      	movs	r2, #2
 800a51e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b0c      	cmp	r3, #12
 800a526:	d841      	bhi.n	800a5ac <HAL_TIM_PWM_Start_IT+0x138>
 800a528:	a201      	add	r2, pc, #4	@ (adr r2, 800a530 <HAL_TIM_PWM_Start_IT+0xbc>)
 800a52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52e:	bf00      	nop
 800a530:	0800a565 	.word	0x0800a565
 800a534:	0800a5ad 	.word	0x0800a5ad
 800a538:	0800a5ad 	.word	0x0800a5ad
 800a53c:	0800a5ad 	.word	0x0800a5ad
 800a540:	0800a577 	.word	0x0800a577
 800a544:	0800a5ad 	.word	0x0800a5ad
 800a548:	0800a5ad 	.word	0x0800a5ad
 800a54c:	0800a5ad 	.word	0x0800a5ad
 800a550:	0800a589 	.word	0x0800a589
 800a554:	0800a5ad 	.word	0x0800a5ad
 800a558:	0800a5ad 	.word	0x0800a5ad
 800a55c:	0800a5ad 	.word	0x0800a5ad
 800a560:	0800a59b 	.word	0x0800a59b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68da      	ldr	r2, [r3, #12]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f042 0202 	orr.w	r2, r2, #2
 800a572:	60da      	str	r2, [r3, #12]
      break;
 800a574:	e01d      	b.n	800a5b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68da      	ldr	r2, [r3, #12]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f042 0204 	orr.w	r2, r2, #4
 800a584:	60da      	str	r2, [r3, #12]
      break;
 800a586:	e014      	b.n	800a5b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68da      	ldr	r2, [r3, #12]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f042 0208 	orr.w	r2, r2, #8
 800a596:	60da      	str	r2, [r3, #12]
      break;
 800a598:	e00b      	b.n	800a5b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68da      	ldr	r2, [r3, #12]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f042 0210 	orr.w	r2, r2, #16
 800a5a8:	60da      	str	r2, [r3, #12]
      break;
 800a5aa:	e002      	b.n	800a5b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a5b0:	bf00      	nop
  }

  if (status == HAL_OK)
 800a5b2:	7bfb      	ldrb	r3, [r7, #15]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d134      	bne.n	800a622 <HAL_TIM_PWM_Start_IT+0x1ae>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 fd48 	bl	800b056 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5ce:	d00e      	beq.n	800a5ee <HAL_TIM_PWM_Start_IT+0x17a>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a15      	ldr	r2, [pc, #84]	@ (800a62c <HAL_TIM_PWM_Start_IT+0x1b8>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d009      	beq.n	800a5ee <HAL_TIM_PWM_Start_IT+0x17a>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a14      	ldr	r2, [pc, #80]	@ (800a630 <HAL_TIM_PWM_Start_IT+0x1bc>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d004      	beq.n	800a5ee <HAL_TIM_PWM_Start_IT+0x17a>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a12      	ldr	r2, [pc, #72]	@ (800a634 <HAL_TIM_PWM_Start_IT+0x1c0>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d111      	bne.n	800a612 <HAL_TIM_PWM_Start_IT+0x19e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	f003 0307 	and.w	r3, r3, #7
 800a5f8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2b06      	cmp	r3, #6
 800a5fe:	d010      	beq.n	800a622 <HAL_TIM_PWM_Start_IT+0x1ae>
      {
        __HAL_TIM_ENABLE(htim);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f042 0201 	orr.w	r2, r2, #1
 800a60e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a610:	e007      	b.n	800a622 <HAL_TIM_PWM_Start_IT+0x1ae>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f042 0201 	orr.w	r2, r2, #1
 800a620:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a622:	7bfb      	ldrb	r3, [r7, #15]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	40000400 	.word	0x40000400
 800a630:	40000800 	.word	0x40000800
 800a634:	40010800 	.word	0x40010800

0800a638 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b0c      	cmp	r3, #12
 800a64a:	d841      	bhi.n	800a6d0 <HAL_TIM_PWM_Stop_IT+0x98>
 800a64c:	a201      	add	r2, pc, #4	@ (adr r2, 800a654 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800a64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a652:	bf00      	nop
 800a654:	0800a689 	.word	0x0800a689
 800a658:	0800a6d1 	.word	0x0800a6d1
 800a65c:	0800a6d1 	.word	0x0800a6d1
 800a660:	0800a6d1 	.word	0x0800a6d1
 800a664:	0800a69b 	.word	0x0800a69b
 800a668:	0800a6d1 	.word	0x0800a6d1
 800a66c:	0800a6d1 	.word	0x0800a6d1
 800a670:	0800a6d1 	.word	0x0800a6d1
 800a674:	0800a6ad 	.word	0x0800a6ad
 800a678:	0800a6d1 	.word	0x0800a6d1
 800a67c:	0800a6d1 	.word	0x0800a6d1
 800a680:	0800a6d1 	.word	0x0800a6d1
 800a684:	0800a6bf 	.word	0x0800a6bf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68da      	ldr	r2, [r3, #12]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f022 0202 	bic.w	r2, r2, #2
 800a696:	60da      	str	r2, [r3, #12]
      break;
 800a698:	e01d      	b.n	800a6d6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68da      	ldr	r2, [r3, #12]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f022 0204 	bic.w	r2, r2, #4
 800a6a8:	60da      	str	r2, [r3, #12]
      break;
 800a6aa:	e014      	b.n	800a6d6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68da      	ldr	r2, [r3, #12]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f022 0208 	bic.w	r2, r2, #8
 800a6ba:	60da      	str	r2, [r3, #12]
      break;
 800a6bc:	e00b      	b.n	800a6d6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68da      	ldr	r2, [r3, #12]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f022 0210 	bic.w	r2, r2, #16
 800a6cc:	60da      	str	r2, [r3, #12]
      break;
 800a6ce:	e002      	b.n	800a6d6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6d4:	bf00      	nop
  }

  if (status == HAL_OK)
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d132      	bne.n	800a742 <HAL_TIM_PWM_Stop_IT+0x10a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 fcb6 	bl	800b056 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6a1a      	ldr	r2, [r3, #32]
 800a6f0:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d107      	bne.n	800a70a <HAL_TIM_PWM_Stop_IT+0xd2>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f022 0201 	bic.w	r2, r2, #1
 800a708:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d104      	bne.n	800a71a <HAL_TIM_PWM_Stop_IT+0xe2>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800a718:	e013      	b.n	800a742 <HAL_TIM_PWM_Stop_IT+0x10a>
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	2b04      	cmp	r3, #4
 800a71e:	d104      	bne.n	800a72a <HAL_TIM_PWM_Stop_IT+0xf2>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800a728:	e00b      	b.n	800a742 <HAL_TIM_PWM_Stop_IT+0x10a>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b08      	cmp	r3, #8
 800a72e:	d104      	bne.n	800a73a <HAL_TIM_PWM_Stop_IT+0x102>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800a738:	e003      	b.n	800a742 <HAL_TIM_PWM_Stop_IT+0x10a>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  /* Return function status */
  return status;
 800a742:	7bfb      	ldrb	r3, [r7, #15]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	f003 0302 	and.w	r3, r3, #2
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d122      	bne.n	800a7a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f003 0302 	and.w	r3, r3, #2
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d11b      	bne.n	800a7a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f06f 0202 	mvn.w	r2, #2
 800a778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2201      	movs	r2, #1
 800a77e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	f003 0303 	and.w	r3, r3, #3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fa4a 	bl	800ac28 <HAL_TIM_IC_CaptureCallback>
 800a794:	e005      	b.n	800a7a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fa3d 	bl	800ac16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fa4c 	bl	800ac3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	f003 0304 	and.w	r3, r3, #4
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	d122      	bne.n	800a7fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	f003 0304 	and.w	r3, r3, #4
 800a7c0:	2b04      	cmp	r3, #4
 800a7c2:	d11b      	bne.n	800a7fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f06f 0204 	mvn.w	r2, #4
 800a7cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2202      	movs	r2, #2
 800a7d2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d003      	beq.n	800a7ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fa20 	bl	800ac28 <HAL_TIM_IC_CaptureCallback>
 800a7e8:	e005      	b.n	800a7f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fa13 	bl	800ac16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fa22 	bl	800ac3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	f003 0308 	and.w	r3, r3, #8
 800a806:	2b08      	cmp	r3, #8
 800a808:	d122      	bne.n	800a850 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	f003 0308 	and.w	r3, r3, #8
 800a814:	2b08      	cmp	r3, #8
 800a816:	d11b      	bne.n	800a850 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f06f 0208 	mvn.w	r2, #8
 800a820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2204      	movs	r2, #4
 800a826:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	f003 0303 	and.w	r3, r3, #3
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f9f6 	bl	800ac28 <HAL_TIM_IC_CaptureCallback>
 800a83c:	e005      	b.n	800a84a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f9e9 	bl	800ac16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f9f8 	bl	800ac3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	f003 0310 	and.w	r3, r3, #16
 800a85a:	2b10      	cmp	r3, #16
 800a85c:	d122      	bne.n	800a8a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	f003 0310 	and.w	r3, r3, #16
 800a868:	2b10      	cmp	r3, #16
 800a86a:	d11b      	bne.n	800a8a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f06f 0210 	mvn.w	r2, #16
 800a874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2208      	movs	r2, #8
 800a87a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	69db      	ldr	r3, [r3, #28]
 800a882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a886:	2b00      	cmp	r3, #0
 800a888:	d003      	beq.n	800a892 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f9cc 	bl	800ac28 <HAL_TIM_IC_CaptureCallback>
 800a890:	e005      	b.n	800a89e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f9bf 	bl	800ac16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f9ce 	bl	800ac3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	f003 0301 	and.w	r3, r3, #1
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d10e      	bne.n	800a8d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	f003 0301 	and.w	r3, r3, #1
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d107      	bne.n	800a8d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f06f 0201 	mvn.w	r2, #1
 800a8c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7f7 fe52 	bl	8002574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8da:	2b40      	cmp	r3, #64	@ 0x40
 800a8dc:	d10e      	bne.n	800a8fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8e8:	2b40      	cmp	r3, #64	@ 0x40
 800a8ea:	d107      	bne.n	800a8fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a8f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f9a8 	bl	800ac4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8fc:	bf00      	nop
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b086      	sub	sp, #24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a910:	2300      	movs	r3, #0
 800a912:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d101      	bne.n	800a922 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a91e:	2302      	movs	r3, #2
 800a920:	e0ae      	b.n	800aa80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2201      	movs	r2, #1
 800a926:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b0c      	cmp	r3, #12
 800a92e:	f200 809f 	bhi.w	800aa70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a932:	a201      	add	r2, pc, #4	@ (adr r2, 800a938 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a938:	0800a96d 	.word	0x0800a96d
 800a93c:	0800aa71 	.word	0x0800aa71
 800a940:	0800aa71 	.word	0x0800aa71
 800a944:	0800aa71 	.word	0x0800aa71
 800a948:	0800a9ad 	.word	0x0800a9ad
 800a94c:	0800aa71 	.word	0x0800aa71
 800a950:	0800aa71 	.word	0x0800aa71
 800a954:	0800aa71 	.word	0x0800aa71
 800a958:	0800a9ef 	.word	0x0800a9ef
 800a95c:	0800aa71 	.word	0x0800aa71
 800a960:	0800aa71 	.word	0x0800aa71
 800a964:	0800aa71 	.word	0x0800aa71
 800a968:	0800aa2f 	.word	0x0800aa2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68b9      	ldr	r1, [r7, #8]
 800a972:	4618      	mov	r0, r3
 800a974:	f000 f9e4 	bl	800ad40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	699a      	ldr	r2, [r3, #24]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f042 0208 	orr.w	r2, r2, #8
 800a986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	699a      	ldr	r2, [r3, #24]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f022 0204 	bic.w	r2, r2, #4
 800a996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	6999      	ldr	r1, [r3, #24]
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	68da      	ldr	r2, [r3, #12]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	430a      	orrs	r2, r1
 800a9a8:	619a      	str	r2, [r3, #24]
      break;
 800a9aa:	e064      	b.n	800aa76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68b9      	ldr	r1, [r7, #8]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 fa00 	bl	800adb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	699a      	ldr	r2, [r3, #24]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a9c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	699a      	ldr	r2, [r3, #24]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	6999      	ldr	r1, [r3, #24]
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	021a      	lsls	r2, r3, #8
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	430a      	orrs	r2, r1
 800a9ea:	619a      	str	r2, [r3, #24]
      break;
 800a9ec:	e043      	b.n	800aa76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68b9      	ldr	r1, [r7, #8]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f000 fa1d 	bl	800ae34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	69da      	ldr	r2, [r3, #28]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f042 0208 	orr.w	r2, r2, #8
 800aa08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	69da      	ldr	r2, [r3, #28]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f022 0204 	bic.w	r2, r2, #4
 800aa18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	69d9      	ldr	r1, [r3, #28]
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	68da      	ldr	r2, [r3, #12]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	430a      	orrs	r2, r1
 800aa2a:	61da      	str	r2, [r3, #28]
      break;
 800aa2c:	e023      	b.n	800aa76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68b9      	ldr	r1, [r7, #8]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f000 fa3a 	bl	800aeae <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	69da      	ldr	r2, [r3, #28]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	69da      	ldr	r2, [r3, #28]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	69d9      	ldr	r1, [r3, #28]
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	021a      	lsls	r2, r3, #8
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	430a      	orrs	r2, r1
 800aa6c:	61da      	str	r2, [r3, #28]
      break;
 800aa6e:	e002      	b.n	800aa76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	75fb      	strb	r3, [r7, #23]
      break;
 800aa74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800aa7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d101      	bne.n	800aaa4 <HAL_TIM_ConfigClockSource+0x1c>
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	e0b4      	b.n	800ac0e <HAL_TIM_ConfigClockSource+0x186>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2202      	movs	r2, #2
 800aab0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aaca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aadc:	d03e      	beq.n	800ab5c <HAL_TIM_ConfigClockSource+0xd4>
 800aade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aae2:	f200 8087 	bhi.w	800abf4 <HAL_TIM_ConfigClockSource+0x16c>
 800aae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aaea:	f000 8086 	beq.w	800abfa <HAL_TIM_ConfigClockSource+0x172>
 800aaee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aaf2:	d87f      	bhi.n	800abf4 <HAL_TIM_ConfigClockSource+0x16c>
 800aaf4:	2b70      	cmp	r3, #112	@ 0x70
 800aaf6:	d01a      	beq.n	800ab2e <HAL_TIM_ConfigClockSource+0xa6>
 800aaf8:	2b70      	cmp	r3, #112	@ 0x70
 800aafa:	d87b      	bhi.n	800abf4 <HAL_TIM_ConfigClockSource+0x16c>
 800aafc:	2b60      	cmp	r3, #96	@ 0x60
 800aafe:	d050      	beq.n	800aba2 <HAL_TIM_ConfigClockSource+0x11a>
 800ab00:	2b60      	cmp	r3, #96	@ 0x60
 800ab02:	d877      	bhi.n	800abf4 <HAL_TIM_ConfigClockSource+0x16c>
 800ab04:	2b50      	cmp	r3, #80	@ 0x50
 800ab06:	d03c      	beq.n	800ab82 <HAL_TIM_ConfigClockSource+0xfa>
 800ab08:	2b50      	cmp	r3, #80	@ 0x50
 800ab0a:	d873      	bhi.n	800abf4 <HAL_TIM_ConfigClockSource+0x16c>
 800ab0c:	2b40      	cmp	r3, #64	@ 0x40
 800ab0e:	d058      	beq.n	800abc2 <HAL_TIM_ConfigClockSource+0x13a>
 800ab10:	2b40      	cmp	r3, #64	@ 0x40
 800ab12:	d86f      	bhi.n	800abf4 <HAL_TIM_ConfigClockSource+0x16c>
 800ab14:	2b30      	cmp	r3, #48	@ 0x30
 800ab16:	d064      	beq.n	800abe2 <HAL_TIM_ConfigClockSource+0x15a>
 800ab18:	2b30      	cmp	r3, #48	@ 0x30
 800ab1a:	d86b      	bhi.n	800abf4 <HAL_TIM_ConfigClockSource+0x16c>
 800ab1c:	2b20      	cmp	r3, #32
 800ab1e:	d060      	beq.n	800abe2 <HAL_TIM_ConfigClockSource+0x15a>
 800ab20:	2b20      	cmp	r3, #32
 800ab22:	d867      	bhi.n	800abf4 <HAL_TIM_ConfigClockSource+0x16c>
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d05c      	beq.n	800abe2 <HAL_TIM_ConfigClockSource+0x15a>
 800ab28:	2b10      	cmp	r3, #16
 800ab2a:	d05a      	beq.n	800abe2 <HAL_TIM_ConfigClockSource+0x15a>
 800ab2c:	e062      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab3e:	f000 fa6b 	bl	800b018 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ab50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68ba      	ldr	r2, [r7, #8]
 800ab58:	609a      	str	r2, [r3, #8]
      break;
 800ab5a:	e04f      	b.n	800abfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab6c:	f000 fa54 	bl	800b018 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	689a      	ldr	r2, [r3, #8]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ab7e:	609a      	str	r2, [r3, #8]
      break;
 800ab80:	e03c      	b.n	800abfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f000 f9cb 	bl	800af2a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2150      	movs	r1, #80	@ 0x50
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f000 fa22 	bl	800afe4 <TIM_ITRx_SetConfig>
      break;
 800aba0:	e02c      	b.n	800abfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800abae:	461a      	mov	r2, r3
 800abb0:	f000 f9e9 	bl	800af86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2160      	movs	r1, #96	@ 0x60
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 fa12 	bl	800afe4 <TIM_ITRx_SetConfig>
      break;
 800abc0:	e01c      	b.n	800abfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abce:	461a      	mov	r2, r3
 800abd0:	f000 f9ab 	bl	800af2a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2140      	movs	r1, #64	@ 0x40
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 fa02 	bl	800afe4 <TIM_ITRx_SetConfig>
      break;
 800abe0:	e00c      	b.n	800abfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4619      	mov	r1, r3
 800abec:	4610      	mov	r0, r2
 800abee:	f000 f9f9 	bl	800afe4 <TIM_ITRx_SetConfig>
      break;
 800abf2:	e003      	b.n	800abfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	73fb      	strb	r3, [r7, #15]
      break;
 800abf8:	e000      	b.n	800abfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800abfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b083      	sub	sp, #12
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac1e:	bf00      	nop
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bc80      	pop	{r7}
 800ac26:	4770      	bx	lr

0800ac28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bc80      	pop	{r7}
 800ac38:	4770      	bx	lr

0800ac3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	b083      	sub	sp, #12
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac42:	bf00      	nop
 800ac44:	370c      	adds	r7, #12
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bc80      	pop	{r7}
 800ac4a:	4770      	bx	lr

0800ac4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bc80      	pop	{r7}
 800ac5c:	4770      	bx	lr
	...

0800ac60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac76:	d00f      	beq.n	800ac98 <TIM_Base_SetConfig+0x38>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a2b      	ldr	r2, [pc, #172]	@ (800ad28 <TIM_Base_SetConfig+0xc8>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d00b      	beq.n	800ac98 <TIM_Base_SetConfig+0x38>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a2a      	ldr	r2, [pc, #168]	@ (800ad2c <TIM_Base_SetConfig+0xcc>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d007      	beq.n	800ac98 <TIM_Base_SetConfig+0x38>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a29      	ldr	r2, [pc, #164]	@ (800ad30 <TIM_Base_SetConfig+0xd0>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d003      	beq.n	800ac98 <TIM_Base_SetConfig+0x38>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a28      	ldr	r2, [pc, #160]	@ (800ad34 <TIM_Base_SetConfig+0xd4>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d108      	bne.n	800acaa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acb0:	d017      	beq.n	800ace2 <TIM_Base_SetConfig+0x82>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a1c      	ldr	r2, [pc, #112]	@ (800ad28 <TIM_Base_SetConfig+0xc8>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d013      	beq.n	800ace2 <TIM_Base_SetConfig+0x82>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a1b      	ldr	r2, [pc, #108]	@ (800ad2c <TIM_Base_SetConfig+0xcc>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d00f      	beq.n	800ace2 <TIM_Base_SetConfig+0x82>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a1a      	ldr	r2, [pc, #104]	@ (800ad30 <TIM_Base_SetConfig+0xd0>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d00b      	beq.n	800ace2 <TIM_Base_SetConfig+0x82>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a19      	ldr	r2, [pc, #100]	@ (800ad34 <TIM_Base_SetConfig+0xd4>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d007      	beq.n	800ace2 <TIM_Base_SetConfig+0x82>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a18      	ldr	r2, [pc, #96]	@ (800ad38 <TIM_Base_SetConfig+0xd8>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d003      	beq.n	800ace2 <TIM_Base_SetConfig+0x82>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a17      	ldr	r2, [pc, #92]	@ (800ad3c <TIM_Base_SetConfig+0xdc>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d108      	bne.n	800acf4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ace8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	615a      	str	r2, [r3, #20]
}
 800ad1e:	bf00      	nop
 800ad20:	3714      	adds	r7, #20
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bc80      	pop	{r7}
 800ad26:	4770      	bx	lr
 800ad28:	40000400 	.word	0x40000400
 800ad2c:	40000800 	.word	0x40000800
 800ad30:	40000c00 	.word	0x40000c00
 800ad34:	40010800 	.word	0x40010800
 800ad38:	40010c00 	.word	0x40010c00
 800ad3c:	40011000 	.word	0x40011000

0800ad40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b087      	sub	sp, #28
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	f023 0201 	bic.w	r2, r3, #1
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f023 0303 	bic.w	r3, r3, #3
 800ad76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	f023 0302 	bic.w	r3, r3, #2
 800ad88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	685a      	ldr	r2, [r3, #4]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	621a      	str	r2, [r3, #32]
}
 800adae:	bf00      	nop
 800adb0:	371c      	adds	r7, #28
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bc80      	pop	{r7}
 800adb6:	4770      	bx	lr

0800adb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800adb8:	b480      	push	{r7}
 800adba:	b087      	sub	sp, #28
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a1b      	ldr	r3, [r3, #32]
 800adcc:	f023 0210 	bic.w	r2, r3, #16
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ade6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800adee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	021b      	lsls	r3, r3, #8
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	f023 0320 	bic.w	r3, r3, #32
 800ae02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	011b      	lsls	r3, r3, #4
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	621a      	str	r2, [r3, #32]
}
 800ae2a:	bf00      	nop
 800ae2c:	371c      	adds	r7, #28
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bc80      	pop	{r7}
 800ae32:	4770      	bx	lr

0800ae34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b087      	sub	sp, #28
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6a1b      	ldr	r3, [r3, #32]
 800ae48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	69db      	ldr	r3, [r3, #28]
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f023 0303 	bic.w	r3, r3, #3
 800ae6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ae7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	021b      	lsls	r3, r3, #8
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	685a      	ldr	r2, [r3, #4]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	621a      	str	r2, [r3, #32]
}
 800aea4:	bf00      	nop
 800aea6:	371c      	adds	r7, #28
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bc80      	pop	{r7}
 800aeac:	4770      	bx	lr

0800aeae <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b087      	sub	sp, #28
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a1b      	ldr	r3, [r3, #32]
 800aebc:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	69db      	ldr	r3, [r3, #28]
 800aed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aedc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aee4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	021b      	lsls	r3, r3, #8
 800aeec:	68fa      	ldr	r2, [r7, #12]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	031b      	lsls	r3, r3, #12
 800af00:	697a      	ldr	r2, [r7, #20]
 800af02:	4313      	orrs	r3, r2
 800af04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	693a      	ldr	r2, [r7, #16]
 800af0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	685a      	ldr	r2, [r3, #4]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	621a      	str	r2, [r3, #32]
}
 800af20:	bf00      	nop
 800af22:	371c      	adds	r7, #28
 800af24:	46bd      	mov	sp, r7
 800af26:	bc80      	pop	{r7}
 800af28:	4770      	bx	lr

0800af2a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af2a:	b480      	push	{r7}
 800af2c:	b087      	sub	sp, #28
 800af2e:	af00      	add	r7, sp, #0
 800af30:	60f8      	str	r0, [r7, #12]
 800af32:	60b9      	str	r1, [r7, #8]
 800af34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6a1b      	ldr	r3, [r3, #32]
 800af3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6a1b      	ldr	r3, [r3, #32]
 800af40:	f023 0201 	bic.w	r2, r3, #1
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	699b      	ldr	r3, [r3, #24]
 800af4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800af54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	011b      	lsls	r3, r3, #4
 800af5a:	693a      	ldr	r2, [r7, #16]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f023 030a 	bic.w	r3, r3, #10
 800af66:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	621a      	str	r2, [r3, #32]
}
 800af7c:	bf00      	nop
 800af7e:	371c      	adds	r7, #28
 800af80:	46bd      	mov	sp, r7
 800af82:	bc80      	pop	{r7}
 800af84:	4770      	bx	lr

0800af86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af86:	b480      	push	{r7}
 800af88:	b087      	sub	sp, #28
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	60f8      	str	r0, [r7, #12]
 800af8e:	60b9      	str	r1, [r7, #8]
 800af90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6a1b      	ldr	r3, [r3, #32]
 800af9c:	f023 0210 	bic.w	r2, r3, #16
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800afb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	031b      	lsls	r3, r3, #12
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	4313      	orrs	r3, r2
 800afba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800afc2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	011b      	lsls	r3, r3, #4
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	4313      	orrs	r3, r2
 800afcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	621a      	str	r2, [r3, #32]
}
 800afda:	bf00      	nop
 800afdc:	371c      	adds	r7, #28
 800afde:	46bd      	mov	sp, r7
 800afe0:	bc80      	pop	{r7}
 800afe2:	4770      	bx	lr

0800afe4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800affa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	4313      	orrs	r3, r2
 800b002:	f043 0307 	orr.w	r3, r3, #7
 800b006:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	609a      	str	r2, [r3, #8]
}
 800b00e:	bf00      	nop
 800b010:	3714      	adds	r7, #20
 800b012:	46bd      	mov	sp, r7
 800b014:	bc80      	pop	{r7}
 800b016:	4770      	bx	lr

0800b018 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b018:	b480      	push	{r7}
 800b01a:	b087      	sub	sp, #28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
 800b024:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b032:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	021a      	lsls	r2, r3, #8
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	431a      	orrs	r2, r3
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	4313      	orrs	r3, r2
 800b040:	697a      	ldr	r2, [r7, #20]
 800b042:	4313      	orrs	r3, r2
 800b044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	697a      	ldr	r2, [r7, #20]
 800b04a:	609a      	str	r2, [r3, #8]
}
 800b04c:	bf00      	nop
 800b04e:	371c      	adds	r7, #28
 800b050:	46bd      	mov	sp, r7
 800b052:	bc80      	pop	{r7}
 800b054:	4770      	bx	lr

0800b056 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b056:	b480      	push	{r7}
 800b058:	b087      	sub	sp, #28
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	60f8      	str	r0, [r7, #12]
 800b05e:	60b9      	str	r1, [r7, #8]
 800b060:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	f003 031f 	and.w	r3, r3, #31
 800b068:	2201      	movs	r2, #1
 800b06a:	fa02 f303 	lsl.w	r3, r2, r3
 800b06e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6a1a      	ldr	r2, [r3, #32]
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	43db      	mvns	r3, r3
 800b078:	401a      	ands	r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6a1a      	ldr	r2, [r3, #32]
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	f003 031f 	and.w	r3, r3, #31
 800b088:	6879      	ldr	r1, [r7, #4]
 800b08a:	fa01 f303 	lsl.w	r3, r1, r3
 800b08e:	431a      	orrs	r2, r3
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	621a      	str	r2, [r3, #32]
}
 800b094:	bf00      	nop
 800b096:	371c      	adds	r7, #28
 800b098:	46bd      	mov	sp, r7
 800b09a:	bc80      	pop	{r7}
 800b09c:	4770      	bx	lr
	...

0800b0a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d101      	bne.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0b4:	2302      	movs	r3, #2
 800b0b6:	e046      	b.n	800b146 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68fa      	ldr	r2, [r7, #12]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0fa:	d00e      	beq.n	800b11a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a13      	ldr	r2, [pc, #76]	@ (800b150 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d009      	beq.n	800b11a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a12      	ldr	r2, [pc, #72]	@ (800b154 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d004      	beq.n	800b11a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a10      	ldr	r2, [pc, #64]	@ (800b158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d10c      	bne.n	800b134 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	4313      	orrs	r3, r2
 800b12a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bc80      	pop	{r7}
 800b14e:	4770      	bx	lr
 800b150:	40000400 	.word	0x40000400
 800b154:	40000800 	.word	0x40000800
 800b158:	40010800 	.word	0x40010800

0800b15c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d101      	bne.n	800b16e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e042      	b.n	800b1f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b174:	b2db      	uxtb	r3, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	d106      	bne.n	800b188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7f7 f8e6 	bl	8002354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2224      	movs	r2, #36	@ 0x24
 800b18c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68da      	ldr	r2, [r3, #12]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b19e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f82b 	bl	800b1fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	691a      	ldr	r2, [r3, #16]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b1b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	695a      	ldr	r2, [r3, #20]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b1c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68da      	ldr	r2, [r3, #12]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b1d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2220      	movs	r2, #32
 800b1e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2220      	movs	r2, #32
 800b1e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	68da      	ldr	r2, [r3, #12]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	430a      	orrs	r2, r1
 800b218:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	689a      	ldr	r2, [r3, #8]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	431a      	orrs	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	695b      	ldr	r3, [r3, #20]
 800b228:	431a      	orrs	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	69db      	ldr	r3, [r3, #28]
 800b22e:	4313      	orrs	r3, r2
 800b230:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800b23c:	f023 030c 	bic.w	r3, r3, #12
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	6812      	ldr	r2, [r2, #0]
 800b244:	68b9      	ldr	r1, [r7, #8]
 800b246:	430b      	orrs	r3, r1
 800b248:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	695b      	ldr	r3, [r3, #20]
 800b250:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	699a      	ldr	r2, [r3, #24]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	430a      	orrs	r2, r1
 800b25e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a55      	ldr	r2, [pc, #340]	@ (800b3bc <UART_SetConfig+0x1c0>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d103      	bne.n	800b272 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b26a:	f7fe fcf9 	bl	8009c60 <HAL_RCC_GetPCLK2Freq>
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	e002      	b.n	800b278 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b272:	f7fe fce1 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800b276:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	69db      	ldr	r3, [r3, #28]
 800b27c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b280:	d14c      	bne.n	800b31c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b282:	68fa      	ldr	r2, [r7, #12]
 800b284:	4613      	mov	r3, r2
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4413      	add	r3, r2
 800b28a:	009a      	lsls	r2, r3, #2
 800b28c:	441a      	add	r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	005b      	lsls	r3, r3, #1
 800b294:	fbb2 f3f3 	udiv	r3, r2, r3
 800b298:	4a49      	ldr	r2, [pc, #292]	@ (800b3c0 <UART_SetConfig+0x1c4>)
 800b29a:	fba2 2303 	umull	r2, r3, r2, r3
 800b29e:	095b      	lsrs	r3, r3, #5
 800b2a0:	0119      	lsls	r1, r3, #4
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	009a      	lsls	r2, r3, #2
 800b2ac:	441a      	add	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	005b      	lsls	r3, r3, #1
 800b2b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b2b8:	4b41      	ldr	r3, [pc, #260]	@ (800b3c0 <UART_SetConfig+0x1c4>)
 800b2ba:	fba3 0302 	umull	r0, r3, r3, r2
 800b2be:	095b      	lsrs	r3, r3, #5
 800b2c0:	2064      	movs	r0, #100	@ 0x64
 800b2c2:	fb00 f303 	mul.w	r3, r0, r3
 800b2c6:	1ad3      	subs	r3, r2, r3
 800b2c8:	00db      	lsls	r3, r3, #3
 800b2ca:	3332      	adds	r3, #50	@ 0x32
 800b2cc:	4a3c      	ldr	r2, [pc, #240]	@ (800b3c0 <UART_SetConfig+0x1c4>)
 800b2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d2:	095b      	lsrs	r3, r3, #5
 800b2d4:	005b      	lsls	r3, r3, #1
 800b2d6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b2da:	4419      	add	r1, r3
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	009a      	lsls	r2, r3, #2
 800b2e6:	441a      	add	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	fbb2 f2f3 	udiv	r2, r2, r3
 800b2f2:	4b33      	ldr	r3, [pc, #204]	@ (800b3c0 <UART_SetConfig+0x1c4>)
 800b2f4:	fba3 0302 	umull	r0, r3, r3, r2
 800b2f8:	095b      	lsrs	r3, r3, #5
 800b2fa:	2064      	movs	r0, #100	@ 0x64
 800b2fc:	fb00 f303 	mul.w	r3, r0, r3
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	00db      	lsls	r3, r3, #3
 800b304:	3332      	adds	r3, #50	@ 0x32
 800b306:	4a2e      	ldr	r2, [pc, #184]	@ (800b3c0 <UART_SetConfig+0x1c4>)
 800b308:	fba2 2303 	umull	r2, r3, r2, r3
 800b30c:	095b      	lsrs	r3, r3, #5
 800b30e:	f003 0207 	and.w	r2, r3, #7
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	440a      	add	r2, r1
 800b318:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b31a:	e04a      	b.n	800b3b2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	4613      	mov	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	4413      	add	r3, r2
 800b324:	009a      	lsls	r2, r3, #2
 800b326:	441a      	add	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b332:	4a23      	ldr	r2, [pc, #140]	@ (800b3c0 <UART_SetConfig+0x1c4>)
 800b334:	fba2 2303 	umull	r2, r3, r2, r3
 800b338:	095b      	lsrs	r3, r3, #5
 800b33a:	0119      	lsls	r1, r3, #4
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	4613      	mov	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4413      	add	r3, r2
 800b344:	009a      	lsls	r2, r3, #2
 800b346:	441a      	add	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b352:	4b1b      	ldr	r3, [pc, #108]	@ (800b3c0 <UART_SetConfig+0x1c4>)
 800b354:	fba3 0302 	umull	r0, r3, r3, r2
 800b358:	095b      	lsrs	r3, r3, #5
 800b35a:	2064      	movs	r0, #100	@ 0x64
 800b35c:	fb00 f303 	mul.w	r3, r0, r3
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	011b      	lsls	r3, r3, #4
 800b364:	3332      	adds	r3, #50	@ 0x32
 800b366:	4a16      	ldr	r2, [pc, #88]	@ (800b3c0 <UART_SetConfig+0x1c4>)
 800b368:	fba2 2303 	umull	r2, r3, r2, r3
 800b36c:	095b      	lsrs	r3, r3, #5
 800b36e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b372:	4419      	add	r1, r3
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	4613      	mov	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	009a      	lsls	r2, r3, #2
 800b37e:	441a      	add	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	fbb2 f2f3 	udiv	r2, r2, r3
 800b38a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c0 <UART_SetConfig+0x1c4>)
 800b38c:	fba3 0302 	umull	r0, r3, r3, r2
 800b390:	095b      	lsrs	r3, r3, #5
 800b392:	2064      	movs	r0, #100	@ 0x64
 800b394:	fb00 f303 	mul.w	r3, r0, r3
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	011b      	lsls	r3, r3, #4
 800b39c:	3332      	adds	r3, #50	@ 0x32
 800b39e:	4a08      	ldr	r2, [pc, #32]	@ (800b3c0 <UART_SetConfig+0x1c4>)
 800b3a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b3a4:	095b      	lsrs	r3, r3, #5
 800b3a6:	f003 020f 	and.w	r2, r3, #15
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	440a      	add	r2, r1
 800b3b0:	609a      	str	r2, [r3, #8]
}
 800b3b2:	bf00      	nop
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	40013800 	.word	0x40013800
 800b3c0:	51eb851f 	.word	0x51eb851f

0800b3c4 <std>:
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	b510      	push	{r4, lr}
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	e9c0 3300 	strd	r3, r3, [r0]
 800b3ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3d2:	6083      	str	r3, [r0, #8]
 800b3d4:	8181      	strh	r1, [r0, #12]
 800b3d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b3d8:	81c2      	strh	r2, [r0, #14]
 800b3da:	6183      	str	r3, [r0, #24]
 800b3dc:	4619      	mov	r1, r3
 800b3de:	2208      	movs	r2, #8
 800b3e0:	305c      	adds	r0, #92	@ 0x5c
 800b3e2:	f000 fa07 	bl	800b7f4 <memset>
 800b3e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b41c <std+0x58>)
 800b3e8:	6224      	str	r4, [r4, #32]
 800b3ea:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3ec:	4b0c      	ldr	r3, [pc, #48]	@ (800b420 <std+0x5c>)
 800b3ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b424 <std+0x60>)
 800b3f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b428 <std+0x64>)
 800b3f6:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3f8:	4b0c      	ldr	r3, [pc, #48]	@ (800b42c <std+0x68>)
 800b3fa:	429c      	cmp	r4, r3
 800b3fc:	d006      	beq.n	800b40c <std+0x48>
 800b3fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b402:	4294      	cmp	r4, r2
 800b404:	d002      	beq.n	800b40c <std+0x48>
 800b406:	33d0      	adds	r3, #208	@ 0xd0
 800b408:	429c      	cmp	r4, r3
 800b40a:	d105      	bne.n	800b418 <std+0x54>
 800b40c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b414:	f000 ba66 	b.w	800b8e4 <__retarget_lock_init_recursive>
 800b418:	bd10      	pop	{r4, pc}
 800b41a:	bf00      	nop
 800b41c:	0800b645 	.word	0x0800b645
 800b420:	0800b667 	.word	0x0800b667
 800b424:	0800b69f 	.word	0x0800b69f
 800b428:	0800b6c3 	.word	0x0800b6c3
 800b42c:	200004ac 	.word	0x200004ac

0800b430 <stdio_exit_handler>:
 800b430:	4a02      	ldr	r2, [pc, #8]	@ (800b43c <stdio_exit_handler+0xc>)
 800b432:	4903      	ldr	r1, [pc, #12]	@ (800b440 <stdio_exit_handler+0x10>)
 800b434:	4803      	ldr	r0, [pc, #12]	@ (800b444 <stdio_exit_handler+0x14>)
 800b436:	f000 b869 	b.w	800b50c <_fwalk_sglue>
 800b43a:	bf00      	nop
 800b43c:	200000c4 	.word	0x200000c4
 800b440:	0800c1ad 	.word	0x0800c1ad
 800b444:	200000d4 	.word	0x200000d4

0800b448 <cleanup_stdio>:
 800b448:	6841      	ldr	r1, [r0, #4]
 800b44a:	4b0c      	ldr	r3, [pc, #48]	@ (800b47c <cleanup_stdio+0x34>)
 800b44c:	b510      	push	{r4, lr}
 800b44e:	4299      	cmp	r1, r3
 800b450:	4604      	mov	r4, r0
 800b452:	d001      	beq.n	800b458 <cleanup_stdio+0x10>
 800b454:	f000 feaa 	bl	800c1ac <_fflush_r>
 800b458:	68a1      	ldr	r1, [r4, #8]
 800b45a:	4b09      	ldr	r3, [pc, #36]	@ (800b480 <cleanup_stdio+0x38>)
 800b45c:	4299      	cmp	r1, r3
 800b45e:	d002      	beq.n	800b466 <cleanup_stdio+0x1e>
 800b460:	4620      	mov	r0, r4
 800b462:	f000 fea3 	bl	800c1ac <_fflush_r>
 800b466:	68e1      	ldr	r1, [r4, #12]
 800b468:	4b06      	ldr	r3, [pc, #24]	@ (800b484 <cleanup_stdio+0x3c>)
 800b46a:	4299      	cmp	r1, r3
 800b46c:	d004      	beq.n	800b478 <cleanup_stdio+0x30>
 800b46e:	4620      	mov	r0, r4
 800b470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b474:	f000 be9a 	b.w	800c1ac <_fflush_r>
 800b478:	bd10      	pop	{r4, pc}
 800b47a:	bf00      	nop
 800b47c:	200004ac 	.word	0x200004ac
 800b480:	20000514 	.word	0x20000514
 800b484:	2000057c 	.word	0x2000057c

0800b488 <global_stdio_init.part.0>:
 800b488:	b510      	push	{r4, lr}
 800b48a:	4b0b      	ldr	r3, [pc, #44]	@ (800b4b8 <global_stdio_init.part.0+0x30>)
 800b48c:	4c0b      	ldr	r4, [pc, #44]	@ (800b4bc <global_stdio_init.part.0+0x34>)
 800b48e:	4a0c      	ldr	r2, [pc, #48]	@ (800b4c0 <global_stdio_init.part.0+0x38>)
 800b490:	4620      	mov	r0, r4
 800b492:	601a      	str	r2, [r3, #0]
 800b494:	2104      	movs	r1, #4
 800b496:	2200      	movs	r2, #0
 800b498:	f7ff ff94 	bl	800b3c4 <std>
 800b49c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	2109      	movs	r1, #9
 800b4a4:	f7ff ff8e 	bl	800b3c4 <std>
 800b4a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b4ac:	2202      	movs	r2, #2
 800b4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b2:	2112      	movs	r1, #18
 800b4b4:	f7ff bf86 	b.w	800b3c4 <std>
 800b4b8:	200005e4 	.word	0x200005e4
 800b4bc:	200004ac 	.word	0x200004ac
 800b4c0:	0800b431 	.word	0x0800b431

0800b4c4 <__sfp_lock_acquire>:
 800b4c4:	4801      	ldr	r0, [pc, #4]	@ (800b4cc <__sfp_lock_acquire+0x8>)
 800b4c6:	f000 ba0e 	b.w	800b8e6 <__retarget_lock_acquire_recursive>
 800b4ca:	bf00      	nop
 800b4cc:	200005ed 	.word	0x200005ed

0800b4d0 <__sfp_lock_release>:
 800b4d0:	4801      	ldr	r0, [pc, #4]	@ (800b4d8 <__sfp_lock_release+0x8>)
 800b4d2:	f000 ba09 	b.w	800b8e8 <__retarget_lock_release_recursive>
 800b4d6:	bf00      	nop
 800b4d8:	200005ed 	.word	0x200005ed

0800b4dc <__sinit>:
 800b4dc:	b510      	push	{r4, lr}
 800b4de:	4604      	mov	r4, r0
 800b4e0:	f7ff fff0 	bl	800b4c4 <__sfp_lock_acquire>
 800b4e4:	6a23      	ldr	r3, [r4, #32]
 800b4e6:	b11b      	cbz	r3, 800b4f0 <__sinit+0x14>
 800b4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ec:	f7ff bff0 	b.w	800b4d0 <__sfp_lock_release>
 800b4f0:	4b04      	ldr	r3, [pc, #16]	@ (800b504 <__sinit+0x28>)
 800b4f2:	6223      	str	r3, [r4, #32]
 800b4f4:	4b04      	ldr	r3, [pc, #16]	@ (800b508 <__sinit+0x2c>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1f5      	bne.n	800b4e8 <__sinit+0xc>
 800b4fc:	f7ff ffc4 	bl	800b488 <global_stdio_init.part.0>
 800b500:	e7f2      	b.n	800b4e8 <__sinit+0xc>
 800b502:	bf00      	nop
 800b504:	0800b449 	.word	0x0800b449
 800b508:	200005e4 	.word	0x200005e4

0800b50c <_fwalk_sglue>:
 800b50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b510:	4607      	mov	r7, r0
 800b512:	4688      	mov	r8, r1
 800b514:	4614      	mov	r4, r2
 800b516:	2600      	movs	r6, #0
 800b518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b51c:	f1b9 0901 	subs.w	r9, r9, #1
 800b520:	d505      	bpl.n	800b52e <_fwalk_sglue+0x22>
 800b522:	6824      	ldr	r4, [r4, #0]
 800b524:	2c00      	cmp	r4, #0
 800b526:	d1f7      	bne.n	800b518 <_fwalk_sglue+0xc>
 800b528:	4630      	mov	r0, r6
 800b52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b52e:	89ab      	ldrh	r3, [r5, #12]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d907      	bls.n	800b544 <_fwalk_sglue+0x38>
 800b534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b538:	3301      	adds	r3, #1
 800b53a:	d003      	beq.n	800b544 <_fwalk_sglue+0x38>
 800b53c:	4629      	mov	r1, r5
 800b53e:	4638      	mov	r0, r7
 800b540:	47c0      	blx	r8
 800b542:	4306      	orrs	r6, r0
 800b544:	3568      	adds	r5, #104	@ 0x68
 800b546:	e7e9      	b.n	800b51c <_fwalk_sglue+0x10>

0800b548 <_puts_r>:
 800b548:	6a03      	ldr	r3, [r0, #32]
 800b54a:	b570      	push	{r4, r5, r6, lr}
 800b54c:	4605      	mov	r5, r0
 800b54e:	460e      	mov	r6, r1
 800b550:	6884      	ldr	r4, [r0, #8]
 800b552:	b90b      	cbnz	r3, 800b558 <_puts_r+0x10>
 800b554:	f7ff ffc2 	bl	800b4dc <__sinit>
 800b558:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b55a:	07db      	lsls	r3, r3, #31
 800b55c:	d405      	bmi.n	800b56a <_puts_r+0x22>
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	0598      	lsls	r0, r3, #22
 800b562:	d402      	bmi.n	800b56a <_puts_r+0x22>
 800b564:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b566:	f000 f9be 	bl	800b8e6 <__retarget_lock_acquire_recursive>
 800b56a:	89a3      	ldrh	r3, [r4, #12]
 800b56c:	0719      	lsls	r1, r3, #28
 800b56e:	d502      	bpl.n	800b576 <_puts_r+0x2e>
 800b570:	6923      	ldr	r3, [r4, #16]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d135      	bne.n	800b5e2 <_puts_r+0x9a>
 800b576:	4621      	mov	r1, r4
 800b578:	4628      	mov	r0, r5
 800b57a:	f000 f8e5 	bl	800b748 <__swsetup_r>
 800b57e:	b380      	cbz	r0, 800b5e2 <_puts_r+0x9a>
 800b580:	f04f 35ff 	mov.w	r5, #4294967295
 800b584:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b586:	07da      	lsls	r2, r3, #31
 800b588:	d405      	bmi.n	800b596 <_puts_r+0x4e>
 800b58a:	89a3      	ldrh	r3, [r4, #12]
 800b58c:	059b      	lsls	r3, r3, #22
 800b58e:	d402      	bmi.n	800b596 <_puts_r+0x4e>
 800b590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b592:	f000 f9a9 	bl	800b8e8 <__retarget_lock_release_recursive>
 800b596:	4628      	mov	r0, r5
 800b598:	bd70      	pop	{r4, r5, r6, pc}
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	da04      	bge.n	800b5a8 <_puts_r+0x60>
 800b59e:	69a2      	ldr	r2, [r4, #24]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	dc17      	bgt.n	800b5d4 <_puts_r+0x8c>
 800b5a4:	290a      	cmp	r1, #10
 800b5a6:	d015      	beq.n	800b5d4 <_puts_r+0x8c>
 800b5a8:	6823      	ldr	r3, [r4, #0]
 800b5aa:	1c5a      	adds	r2, r3, #1
 800b5ac:	6022      	str	r2, [r4, #0]
 800b5ae:	7019      	strb	r1, [r3, #0]
 800b5b0:	68a3      	ldr	r3, [r4, #8]
 800b5b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	60a3      	str	r3, [r4, #8]
 800b5ba:	2900      	cmp	r1, #0
 800b5bc:	d1ed      	bne.n	800b59a <_puts_r+0x52>
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	da11      	bge.n	800b5e6 <_puts_r+0x9e>
 800b5c2:	4622      	mov	r2, r4
 800b5c4:	210a      	movs	r1, #10
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	f000 f87f 	bl	800b6ca <__swbuf_r>
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	d0d7      	beq.n	800b580 <_puts_r+0x38>
 800b5d0:	250a      	movs	r5, #10
 800b5d2:	e7d7      	b.n	800b584 <_puts_r+0x3c>
 800b5d4:	4622      	mov	r2, r4
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	f000 f877 	bl	800b6ca <__swbuf_r>
 800b5dc:	3001      	adds	r0, #1
 800b5de:	d1e7      	bne.n	800b5b0 <_puts_r+0x68>
 800b5e0:	e7ce      	b.n	800b580 <_puts_r+0x38>
 800b5e2:	3e01      	subs	r6, #1
 800b5e4:	e7e4      	b.n	800b5b0 <_puts_r+0x68>
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	1c5a      	adds	r2, r3, #1
 800b5ea:	6022      	str	r2, [r4, #0]
 800b5ec:	220a      	movs	r2, #10
 800b5ee:	701a      	strb	r2, [r3, #0]
 800b5f0:	e7ee      	b.n	800b5d0 <_puts_r+0x88>
	...

0800b5f4 <puts>:
 800b5f4:	4b02      	ldr	r3, [pc, #8]	@ (800b600 <puts+0xc>)
 800b5f6:	4601      	mov	r1, r0
 800b5f8:	6818      	ldr	r0, [r3, #0]
 800b5fa:	f7ff bfa5 	b.w	800b548 <_puts_r>
 800b5fe:	bf00      	nop
 800b600:	200000d0 	.word	0x200000d0

0800b604 <siprintf>:
 800b604:	b40e      	push	{r1, r2, r3}
 800b606:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b60a:	b500      	push	{lr}
 800b60c:	b09c      	sub	sp, #112	@ 0x70
 800b60e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b610:	9002      	str	r0, [sp, #8]
 800b612:	9006      	str	r0, [sp, #24]
 800b614:	9107      	str	r1, [sp, #28]
 800b616:	9104      	str	r1, [sp, #16]
 800b618:	4808      	ldr	r0, [pc, #32]	@ (800b63c <siprintf+0x38>)
 800b61a:	4909      	ldr	r1, [pc, #36]	@ (800b640 <siprintf+0x3c>)
 800b61c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b620:	9105      	str	r1, [sp, #20]
 800b622:	6800      	ldr	r0, [r0, #0]
 800b624:	a902      	add	r1, sp, #8
 800b626:	9301      	str	r3, [sp, #4]
 800b628:	f000 fab2 	bl	800bb90 <_svfiprintf_r>
 800b62c:	2200      	movs	r2, #0
 800b62e:	9b02      	ldr	r3, [sp, #8]
 800b630:	701a      	strb	r2, [r3, #0]
 800b632:	b01c      	add	sp, #112	@ 0x70
 800b634:	f85d eb04 	ldr.w	lr, [sp], #4
 800b638:	b003      	add	sp, #12
 800b63a:	4770      	bx	lr
 800b63c:	200000d0 	.word	0x200000d0
 800b640:	ffff0208 	.word	0xffff0208

0800b644 <__sread>:
 800b644:	b510      	push	{r4, lr}
 800b646:	460c      	mov	r4, r1
 800b648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b64c:	f000 f8fc 	bl	800b848 <_read_r>
 800b650:	2800      	cmp	r0, #0
 800b652:	bfab      	itete	ge
 800b654:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b656:	89a3      	ldrhlt	r3, [r4, #12]
 800b658:	181b      	addge	r3, r3, r0
 800b65a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b65e:	bfac      	ite	ge
 800b660:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b662:	81a3      	strhlt	r3, [r4, #12]
 800b664:	bd10      	pop	{r4, pc}

0800b666 <__swrite>:
 800b666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66a:	461f      	mov	r7, r3
 800b66c:	898b      	ldrh	r3, [r1, #12]
 800b66e:	4605      	mov	r5, r0
 800b670:	05db      	lsls	r3, r3, #23
 800b672:	460c      	mov	r4, r1
 800b674:	4616      	mov	r6, r2
 800b676:	d505      	bpl.n	800b684 <__swrite+0x1e>
 800b678:	2302      	movs	r3, #2
 800b67a:	2200      	movs	r2, #0
 800b67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b680:	f000 f8d0 	bl	800b824 <_lseek_r>
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	4632      	mov	r2, r6
 800b688:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b68c:	81a3      	strh	r3, [r4, #12]
 800b68e:	4628      	mov	r0, r5
 800b690:	463b      	mov	r3, r7
 800b692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b69a:	f000 b8e7 	b.w	800b86c <_write_r>

0800b69e <__sseek>:
 800b69e:	b510      	push	{r4, lr}
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a6:	f000 f8bd 	bl	800b824 <_lseek_r>
 800b6aa:	1c43      	adds	r3, r0, #1
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	bf15      	itete	ne
 800b6b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b6b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b6b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b6ba:	81a3      	strheq	r3, [r4, #12]
 800b6bc:	bf18      	it	ne
 800b6be:	81a3      	strhne	r3, [r4, #12]
 800b6c0:	bd10      	pop	{r4, pc}

0800b6c2 <__sclose>:
 800b6c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c6:	f000 b89d 	b.w	800b804 <_close_r>

0800b6ca <__swbuf_r>:
 800b6ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6cc:	460e      	mov	r6, r1
 800b6ce:	4614      	mov	r4, r2
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	b118      	cbz	r0, 800b6dc <__swbuf_r+0x12>
 800b6d4:	6a03      	ldr	r3, [r0, #32]
 800b6d6:	b90b      	cbnz	r3, 800b6dc <__swbuf_r+0x12>
 800b6d8:	f7ff ff00 	bl	800b4dc <__sinit>
 800b6dc:	69a3      	ldr	r3, [r4, #24]
 800b6de:	60a3      	str	r3, [r4, #8]
 800b6e0:	89a3      	ldrh	r3, [r4, #12]
 800b6e2:	071a      	lsls	r2, r3, #28
 800b6e4:	d501      	bpl.n	800b6ea <__swbuf_r+0x20>
 800b6e6:	6923      	ldr	r3, [r4, #16]
 800b6e8:	b943      	cbnz	r3, 800b6fc <__swbuf_r+0x32>
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	f000 f82b 	bl	800b748 <__swsetup_r>
 800b6f2:	b118      	cbz	r0, 800b6fc <__swbuf_r+0x32>
 800b6f4:	f04f 37ff 	mov.w	r7, #4294967295
 800b6f8:	4638      	mov	r0, r7
 800b6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6fc:	6823      	ldr	r3, [r4, #0]
 800b6fe:	6922      	ldr	r2, [r4, #16]
 800b700:	b2f6      	uxtb	r6, r6
 800b702:	1a98      	subs	r0, r3, r2
 800b704:	6963      	ldr	r3, [r4, #20]
 800b706:	4637      	mov	r7, r6
 800b708:	4283      	cmp	r3, r0
 800b70a:	dc05      	bgt.n	800b718 <__swbuf_r+0x4e>
 800b70c:	4621      	mov	r1, r4
 800b70e:	4628      	mov	r0, r5
 800b710:	f000 fd4c 	bl	800c1ac <_fflush_r>
 800b714:	2800      	cmp	r0, #0
 800b716:	d1ed      	bne.n	800b6f4 <__swbuf_r+0x2a>
 800b718:	68a3      	ldr	r3, [r4, #8]
 800b71a:	3b01      	subs	r3, #1
 800b71c:	60a3      	str	r3, [r4, #8]
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	1c5a      	adds	r2, r3, #1
 800b722:	6022      	str	r2, [r4, #0]
 800b724:	701e      	strb	r6, [r3, #0]
 800b726:	6962      	ldr	r2, [r4, #20]
 800b728:	1c43      	adds	r3, r0, #1
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d004      	beq.n	800b738 <__swbuf_r+0x6e>
 800b72e:	89a3      	ldrh	r3, [r4, #12]
 800b730:	07db      	lsls	r3, r3, #31
 800b732:	d5e1      	bpl.n	800b6f8 <__swbuf_r+0x2e>
 800b734:	2e0a      	cmp	r6, #10
 800b736:	d1df      	bne.n	800b6f8 <__swbuf_r+0x2e>
 800b738:	4621      	mov	r1, r4
 800b73a:	4628      	mov	r0, r5
 800b73c:	f000 fd36 	bl	800c1ac <_fflush_r>
 800b740:	2800      	cmp	r0, #0
 800b742:	d0d9      	beq.n	800b6f8 <__swbuf_r+0x2e>
 800b744:	e7d6      	b.n	800b6f4 <__swbuf_r+0x2a>
	...

0800b748 <__swsetup_r>:
 800b748:	b538      	push	{r3, r4, r5, lr}
 800b74a:	4b29      	ldr	r3, [pc, #164]	@ (800b7f0 <__swsetup_r+0xa8>)
 800b74c:	4605      	mov	r5, r0
 800b74e:	6818      	ldr	r0, [r3, #0]
 800b750:	460c      	mov	r4, r1
 800b752:	b118      	cbz	r0, 800b75c <__swsetup_r+0x14>
 800b754:	6a03      	ldr	r3, [r0, #32]
 800b756:	b90b      	cbnz	r3, 800b75c <__swsetup_r+0x14>
 800b758:	f7ff fec0 	bl	800b4dc <__sinit>
 800b75c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b760:	0719      	lsls	r1, r3, #28
 800b762:	d422      	bmi.n	800b7aa <__swsetup_r+0x62>
 800b764:	06da      	lsls	r2, r3, #27
 800b766:	d407      	bmi.n	800b778 <__swsetup_r+0x30>
 800b768:	2209      	movs	r2, #9
 800b76a:	602a      	str	r2, [r5, #0]
 800b76c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b770:	f04f 30ff 	mov.w	r0, #4294967295
 800b774:	81a3      	strh	r3, [r4, #12]
 800b776:	e033      	b.n	800b7e0 <__swsetup_r+0x98>
 800b778:	0758      	lsls	r0, r3, #29
 800b77a:	d512      	bpl.n	800b7a2 <__swsetup_r+0x5a>
 800b77c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b77e:	b141      	cbz	r1, 800b792 <__swsetup_r+0x4a>
 800b780:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b784:	4299      	cmp	r1, r3
 800b786:	d002      	beq.n	800b78e <__swsetup_r+0x46>
 800b788:	4628      	mov	r0, r5
 800b78a:	f000 f8af 	bl	800b8ec <_free_r>
 800b78e:	2300      	movs	r3, #0
 800b790:	6363      	str	r3, [r4, #52]	@ 0x34
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b798:	81a3      	strh	r3, [r4, #12]
 800b79a:	2300      	movs	r3, #0
 800b79c:	6063      	str	r3, [r4, #4]
 800b79e:	6923      	ldr	r3, [r4, #16]
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	89a3      	ldrh	r3, [r4, #12]
 800b7a4:	f043 0308 	orr.w	r3, r3, #8
 800b7a8:	81a3      	strh	r3, [r4, #12]
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	b94b      	cbnz	r3, 800b7c2 <__swsetup_r+0x7a>
 800b7ae:	89a3      	ldrh	r3, [r4, #12]
 800b7b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b7b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7b8:	d003      	beq.n	800b7c2 <__swsetup_r+0x7a>
 800b7ba:	4621      	mov	r1, r4
 800b7bc:	4628      	mov	r0, r5
 800b7be:	f000 fd42 	bl	800c246 <__smakebuf_r>
 800b7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7c6:	f013 0201 	ands.w	r2, r3, #1
 800b7ca:	d00a      	beq.n	800b7e2 <__swsetup_r+0x9a>
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	60a2      	str	r2, [r4, #8]
 800b7d0:	6962      	ldr	r2, [r4, #20]
 800b7d2:	4252      	negs	r2, r2
 800b7d4:	61a2      	str	r2, [r4, #24]
 800b7d6:	6922      	ldr	r2, [r4, #16]
 800b7d8:	b942      	cbnz	r2, 800b7ec <__swsetup_r+0xa4>
 800b7da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7de:	d1c5      	bne.n	800b76c <__swsetup_r+0x24>
 800b7e0:	bd38      	pop	{r3, r4, r5, pc}
 800b7e2:	0799      	lsls	r1, r3, #30
 800b7e4:	bf58      	it	pl
 800b7e6:	6962      	ldrpl	r2, [r4, #20]
 800b7e8:	60a2      	str	r2, [r4, #8]
 800b7ea:	e7f4      	b.n	800b7d6 <__swsetup_r+0x8e>
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	e7f7      	b.n	800b7e0 <__swsetup_r+0x98>
 800b7f0:	200000d0 	.word	0x200000d0

0800b7f4 <memset>:
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	4402      	add	r2, r0
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d100      	bne.n	800b7fe <memset+0xa>
 800b7fc:	4770      	bx	lr
 800b7fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b802:	e7f9      	b.n	800b7f8 <memset+0x4>

0800b804 <_close_r>:
 800b804:	b538      	push	{r3, r4, r5, lr}
 800b806:	2300      	movs	r3, #0
 800b808:	4d05      	ldr	r5, [pc, #20]	@ (800b820 <_close_r+0x1c>)
 800b80a:	4604      	mov	r4, r0
 800b80c:	4608      	mov	r0, r1
 800b80e:	602b      	str	r3, [r5, #0]
 800b810:	f7f7 f881 	bl	8002916 <_close>
 800b814:	1c43      	adds	r3, r0, #1
 800b816:	d102      	bne.n	800b81e <_close_r+0x1a>
 800b818:	682b      	ldr	r3, [r5, #0]
 800b81a:	b103      	cbz	r3, 800b81e <_close_r+0x1a>
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	bd38      	pop	{r3, r4, r5, pc}
 800b820:	200005e8 	.word	0x200005e8

0800b824 <_lseek_r>:
 800b824:	b538      	push	{r3, r4, r5, lr}
 800b826:	4604      	mov	r4, r0
 800b828:	4608      	mov	r0, r1
 800b82a:	4611      	mov	r1, r2
 800b82c:	2200      	movs	r2, #0
 800b82e:	4d05      	ldr	r5, [pc, #20]	@ (800b844 <_lseek_r+0x20>)
 800b830:	602a      	str	r2, [r5, #0]
 800b832:	461a      	mov	r2, r3
 800b834:	f7f7 f893 	bl	800295e <_lseek>
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d102      	bne.n	800b842 <_lseek_r+0x1e>
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	b103      	cbz	r3, 800b842 <_lseek_r+0x1e>
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	bd38      	pop	{r3, r4, r5, pc}
 800b844:	200005e8 	.word	0x200005e8

0800b848 <_read_r>:
 800b848:	b538      	push	{r3, r4, r5, lr}
 800b84a:	4604      	mov	r4, r0
 800b84c:	4608      	mov	r0, r1
 800b84e:	4611      	mov	r1, r2
 800b850:	2200      	movs	r2, #0
 800b852:	4d05      	ldr	r5, [pc, #20]	@ (800b868 <_read_r+0x20>)
 800b854:	602a      	str	r2, [r5, #0]
 800b856:	461a      	mov	r2, r3
 800b858:	f7f7 f824 	bl	80028a4 <_read>
 800b85c:	1c43      	adds	r3, r0, #1
 800b85e:	d102      	bne.n	800b866 <_read_r+0x1e>
 800b860:	682b      	ldr	r3, [r5, #0]
 800b862:	b103      	cbz	r3, 800b866 <_read_r+0x1e>
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	bd38      	pop	{r3, r4, r5, pc}
 800b868:	200005e8 	.word	0x200005e8

0800b86c <_write_r>:
 800b86c:	b538      	push	{r3, r4, r5, lr}
 800b86e:	4604      	mov	r4, r0
 800b870:	4608      	mov	r0, r1
 800b872:	4611      	mov	r1, r2
 800b874:	2200      	movs	r2, #0
 800b876:	4d05      	ldr	r5, [pc, #20]	@ (800b88c <_write_r+0x20>)
 800b878:	602a      	str	r2, [r5, #0]
 800b87a:	461a      	mov	r2, r3
 800b87c:	f7f7 f82f 	bl	80028de <_write>
 800b880:	1c43      	adds	r3, r0, #1
 800b882:	d102      	bne.n	800b88a <_write_r+0x1e>
 800b884:	682b      	ldr	r3, [r5, #0]
 800b886:	b103      	cbz	r3, 800b88a <_write_r+0x1e>
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	bd38      	pop	{r3, r4, r5, pc}
 800b88c:	200005e8 	.word	0x200005e8

0800b890 <__errno>:
 800b890:	4b01      	ldr	r3, [pc, #4]	@ (800b898 <__errno+0x8>)
 800b892:	6818      	ldr	r0, [r3, #0]
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	200000d0 	.word	0x200000d0

0800b89c <__libc_init_array>:
 800b89c:	b570      	push	{r4, r5, r6, lr}
 800b89e:	2600      	movs	r6, #0
 800b8a0:	4d0c      	ldr	r5, [pc, #48]	@ (800b8d4 <__libc_init_array+0x38>)
 800b8a2:	4c0d      	ldr	r4, [pc, #52]	@ (800b8d8 <__libc_init_array+0x3c>)
 800b8a4:	1b64      	subs	r4, r4, r5
 800b8a6:	10a4      	asrs	r4, r4, #2
 800b8a8:	42a6      	cmp	r6, r4
 800b8aa:	d109      	bne.n	800b8c0 <__libc_init_array+0x24>
 800b8ac:	f001 fce8 	bl	800d280 <_init>
 800b8b0:	2600      	movs	r6, #0
 800b8b2:	4d0a      	ldr	r5, [pc, #40]	@ (800b8dc <__libc_init_array+0x40>)
 800b8b4:	4c0a      	ldr	r4, [pc, #40]	@ (800b8e0 <__libc_init_array+0x44>)
 800b8b6:	1b64      	subs	r4, r4, r5
 800b8b8:	10a4      	asrs	r4, r4, #2
 800b8ba:	42a6      	cmp	r6, r4
 800b8bc:	d105      	bne.n	800b8ca <__libc_init_array+0x2e>
 800b8be:	bd70      	pop	{r4, r5, r6, pc}
 800b8c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8c4:	4798      	blx	r3
 800b8c6:	3601      	adds	r6, #1
 800b8c8:	e7ee      	b.n	800b8a8 <__libc_init_array+0xc>
 800b8ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8ce:	4798      	blx	r3
 800b8d0:	3601      	adds	r6, #1
 800b8d2:	e7f2      	b.n	800b8ba <__libc_init_array+0x1e>
 800b8d4:	0800d448 	.word	0x0800d448
 800b8d8:	0800d448 	.word	0x0800d448
 800b8dc:	0800d448 	.word	0x0800d448
 800b8e0:	0800d44c 	.word	0x0800d44c

0800b8e4 <__retarget_lock_init_recursive>:
 800b8e4:	4770      	bx	lr

0800b8e6 <__retarget_lock_acquire_recursive>:
 800b8e6:	4770      	bx	lr

0800b8e8 <__retarget_lock_release_recursive>:
 800b8e8:	4770      	bx	lr
	...

0800b8ec <_free_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	2900      	cmp	r1, #0
 800b8f2:	d040      	beq.n	800b976 <_free_r+0x8a>
 800b8f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8f8:	1f0c      	subs	r4, r1, #4
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	bfb8      	it	lt
 800b8fe:	18e4      	addlt	r4, r4, r3
 800b900:	f000 f8de 	bl	800bac0 <__malloc_lock>
 800b904:	4a1c      	ldr	r2, [pc, #112]	@ (800b978 <_free_r+0x8c>)
 800b906:	6813      	ldr	r3, [r2, #0]
 800b908:	b933      	cbnz	r3, 800b918 <_free_r+0x2c>
 800b90a:	6063      	str	r3, [r4, #4]
 800b90c:	6014      	str	r4, [r2, #0]
 800b90e:	4628      	mov	r0, r5
 800b910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b914:	f000 b8da 	b.w	800bacc <__malloc_unlock>
 800b918:	42a3      	cmp	r3, r4
 800b91a:	d908      	bls.n	800b92e <_free_r+0x42>
 800b91c:	6820      	ldr	r0, [r4, #0]
 800b91e:	1821      	adds	r1, r4, r0
 800b920:	428b      	cmp	r3, r1
 800b922:	bf01      	itttt	eq
 800b924:	6819      	ldreq	r1, [r3, #0]
 800b926:	685b      	ldreq	r3, [r3, #4]
 800b928:	1809      	addeq	r1, r1, r0
 800b92a:	6021      	streq	r1, [r4, #0]
 800b92c:	e7ed      	b.n	800b90a <_free_r+0x1e>
 800b92e:	461a      	mov	r2, r3
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	b10b      	cbz	r3, 800b938 <_free_r+0x4c>
 800b934:	42a3      	cmp	r3, r4
 800b936:	d9fa      	bls.n	800b92e <_free_r+0x42>
 800b938:	6811      	ldr	r1, [r2, #0]
 800b93a:	1850      	adds	r0, r2, r1
 800b93c:	42a0      	cmp	r0, r4
 800b93e:	d10b      	bne.n	800b958 <_free_r+0x6c>
 800b940:	6820      	ldr	r0, [r4, #0]
 800b942:	4401      	add	r1, r0
 800b944:	1850      	adds	r0, r2, r1
 800b946:	4283      	cmp	r3, r0
 800b948:	6011      	str	r1, [r2, #0]
 800b94a:	d1e0      	bne.n	800b90e <_free_r+0x22>
 800b94c:	6818      	ldr	r0, [r3, #0]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	4408      	add	r0, r1
 800b952:	6010      	str	r0, [r2, #0]
 800b954:	6053      	str	r3, [r2, #4]
 800b956:	e7da      	b.n	800b90e <_free_r+0x22>
 800b958:	d902      	bls.n	800b960 <_free_r+0x74>
 800b95a:	230c      	movs	r3, #12
 800b95c:	602b      	str	r3, [r5, #0]
 800b95e:	e7d6      	b.n	800b90e <_free_r+0x22>
 800b960:	6820      	ldr	r0, [r4, #0]
 800b962:	1821      	adds	r1, r4, r0
 800b964:	428b      	cmp	r3, r1
 800b966:	bf01      	itttt	eq
 800b968:	6819      	ldreq	r1, [r3, #0]
 800b96a:	685b      	ldreq	r3, [r3, #4]
 800b96c:	1809      	addeq	r1, r1, r0
 800b96e:	6021      	streq	r1, [r4, #0]
 800b970:	6063      	str	r3, [r4, #4]
 800b972:	6054      	str	r4, [r2, #4]
 800b974:	e7cb      	b.n	800b90e <_free_r+0x22>
 800b976:	bd38      	pop	{r3, r4, r5, pc}
 800b978:	200005f4 	.word	0x200005f4

0800b97c <sbrk_aligned>:
 800b97c:	b570      	push	{r4, r5, r6, lr}
 800b97e:	4e0f      	ldr	r6, [pc, #60]	@ (800b9bc <sbrk_aligned+0x40>)
 800b980:	460c      	mov	r4, r1
 800b982:	6831      	ldr	r1, [r6, #0]
 800b984:	4605      	mov	r5, r0
 800b986:	b911      	cbnz	r1, 800b98e <sbrk_aligned+0x12>
 800b988:	f000 fcd6 	bl	800c338 <_sbrk_r>
 800b98c:	6030      	str	r0, [r6, #0]
 800b98e:	4621      	mov	r1, r4
 800b990:	4628      	mov	r0, r5
 800b992:	f000 fcd1 	bl	800c338 <_sbrk_r>
 800b996:	1c43      	adds	r3, r0, #1
 800b998:	d103      	bne.n	800b9a2 <sbrk_aligned+0x26>
 800b99a:	f04f 34ff 	mov.w	r4, #4294967295
 800b99e:	4620      	mov	r0, r4
 800b9a0:	bd70      	pop	{r4, r5, r6, pc}
 800b9a2:	1cc4      	adds	r4, r0, #3
 800b9a4:	f024 0403 	bic.w	r4, r4, #3
 800b9a8:	42a0      	cmp	r0, r4
 800b9aa:	d0f8      	beq.n	800b99e <sbrk_aligned+0x22>
 800b9ac:	1a21      	subs	r1, r4, r0
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f000 fcc2 	bl	800c338 <_sbrk_r>
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d1f2      	bne.n	800b99e <sbrk_aligned+0x22>
 800b9b8:	e7ef      	b.n	800b99a <sbrk_aligned+0x1e>
 800b9ba:	bf00      	nop
 800b9bc:	200005f0 	.word	0x200005f0

0800b9c0 <_malloc_r>:
 800b9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c4:	1ccd      	adds	r5, r1, #3
 800b9c6:	f025 0503 	bic.w	r5, r5, #3
 800b9ca:	3508      	adds	r5, #8
 800b9cc:	2d0c      	cmp	r5, #12
 800b9ce:	bf38      	it	cc
 800b9d0:	250c      	movcc	r5, #12
 800b9d2:	2d00      	cmp	r5, #0
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	db01      	blt.n	800b9dc <_malloc_r+0x1c>
 800b9d8:	42a9      	cmp	r1, r5
 800b9da:	d904      	bls.n	800b9e6 <_malloc_r+0x26>
 800b9dc:	230c      	movs	r3, #12
 800b9de:	6033      	str	r3, [r6, #0]
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800babc <_malloc_r+0xfc>
 800b9ea:	f000 f869 	bl	800bac0 <__malloc_lock>
 800b9ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b9f2:	461c      	mov	r4, r3
 800b9f4:	bb44      	cbnz	r4, 800ba48 <_malloc_r+0x88>
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f7ff ffbf 	bl	800b97c <sbrk_aligned>
 800b9fe:	1c43      	adds	r3, r0, #1
 800ba00:	4604      	mov	r4, r0
 800ba02:	d158      	bne.n	800bab6 <_malloc_r+0xf6>
 800ba04:	f8d8 4000 	ldr.w	r4, [r8]
 800ba08:	4627      	mov	r7, r4
 800ba0a:	2f00      	cmp	r7, #0
 800ba0c:	d143      	bne.n	800ba96 <_malloc_r+0xd6>
 800ba0e:	2c00      	cmp	r4, #0
 800ba10:	d04b      	beq.n	800baaa <_malloc_r+0xea>
 800ba12:	6823      	ldr	r3, [r4, #0]
 800ba14:	4639      	mov	r1, r7
 800ba16:	4630      	mov	r0, r6
 800ba18:	eb04 0903 	add.w	r9, r4, r3
 800ba1c:	f000 fc8c 	bl	800c338 <_sbrk_r>
 800ba20:	4581      	cmp	r9, r0
 800ba22:	d142      	bne.n	800baaa <_malloc_r+0xea>
 800ba24:	6821      	ldr	r1, [r4, #0]
 800ba26:	4630      	mov	r0, r6
 800ba28:	1a6d      	subs	r5, r5, r1
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	f7ff ffa6 	bl	800b97c <sbrk_aligned>
 800ba30:	3001      	adds	r0, #1
 800ba32:	d03a      	beq.n	800baaa <_malloc_r+0xea>
 800ba34:	6823      	ldr	r3, [r4, #0]
 800ba36:	442b      	add	r3, r5
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	bb62      	cbnz	r2, 800ba9c <_malloc_r+0xdc>
 800ba42:	f8c8 7000 	str.w	r7, [r8]
 800ba46:	e00f      	b.n	800ba68 <_malloc_r+0xa8>
 800ba48:	6822      	ldr	r2, [r4, #0]
 800ba4a:	1b52      	subs	r2, r2, r5
 800ba4c:	d420      	bmi.n	800ba90 <_malloc_r+0xd0>
 800ba4e:	2a0b      	cmp	r2, #11
 800ba50:	d917      	bls.n	800ba82 <_malloc_r+0xc2>
 800ba52:	1961      	adds	r1, r4, r5
 800ba54:	42a3      	cmp	r3, r4
 800ba56:	6025      	str	r5, [r4, #0]
 800ba58:	bf18      	it	ne
 800ba5a:	6059      	strne	r1, [r3, #4]
 800ba5c:	6863      	ldr	r3, [r4, #4]
 800ba5e:	bf08      	it	eq
 800ba60:	f8c8 1000 	streq.w	r1, [r8]
 800ba64:	5162      	str	r2, [r4, r5]
 800ba66:	604b      	str	r3, [r1, #4]
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f000 f82f 	bl	800bacc <__malloc_unlock>
 800ba6e:	f104 000b 	add.w	r0, r4, #11
 800ba72:	1d23      	adds	r3, r4, #4
 800ba74:	f020 0007 	bic.w	r0, r0, #7
 800ba78:	1ac2      	subs	r2, r0, r3
 800ba7a:	bf1c      	itt	ne
 800ba7c:	1a1b      	subne	r3, r3, r0
 800ba7e:	50a3      	strne	r3, [r4, r2]
 800ba80:	e7af      	b.n	800b9e2 <_malloc_r+0x22>
 800ba82:	6862      	ldr	r2, [r4, #4]
 800ba84:	42a3      	cmp	r3, r4
 800ba86:	bf0c      	ite	eq
 800ba88:	f8c8 2000 	streq.w	r2, [r8]
 800ba8c:	605a      	strne	r2, [r3, #4]
 800ba8e:	e7eb      	b.n	800ba68 <_malloc_r+0xa8>
 800ba90:	4623      	mov	r3, r4
 800ba92:	6864      	ldr	r4, [r4, #4]
 800ba94:	e7ae      	b.n	800b9f4 <_malloc_r+0x34>
 800ba96:	463c      	mov	r4, r7
 800ba98:	687f      	ldr	r7, [r7, #4]
 800ba9a:	e7b6      	b.n	800ba0a <_malloc_r+0x4a>
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	42a3      	cmp	r3, r4
 800baa2:	d1fb      	bne.n	800ba9c <_malloc_r+0xdc>
 800baa4:	2300      	movs	r3, #0
 800baa6:	6053      	str	r3, [r2, #4]
 800baa8:	e7de      	b.n	800ba68 <_malloc_r+0xa8>
 800baaa:	230c      	movs	r3, #12
 800baac:	4630      	mov	r0, r6
 800baae:	6033      	str	r3, [r6, #0]
 800bab0:	f000 f80c 	bl	800bacc <__malloc_unlock>
 800bab4:	e794      	b.n	800b9e0 <_malloc_r+0x20>
 800bab6:	6005      	str	r5, [r0, #0]
 800bab8:	e7d6      	b.n	800ba68 <_malloc_r+0xa8>
 800baba:	bf00      	nop
 800babc:	200005f4 	.word	0x200005f4

0800bac0 <__malloc_lock>:
 800bac0:	4801      	ldr	r0, [pc, #4]	@ (800bac8 <__malloc_lock+0x8>)
 800bac2:	f7ff bf10 	b.w	800b8e6 <__retarget_lock_acquire_recursive>
 800bac6:	bf00      	nop
 800bac8:	200005ec 	.word	0x200005ec

0800bacc <__malloc_unlock>:
 800bacc:	4801      	ldr	r0, [pc, #4]	@ (800bad4 <__malloc_unlock+0x8>)
 800bace:	f7ff bf0b 	b.w	800b8e8 <__retarget_lock_release_recursive>
 800bad2:	bf00      	nop
 800bad4:	200005ec 	.word	0x200005ec

0800bad8 <__ssputs_r>:
 800bad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800badc:	461f      	mov	r7, r3
 800bade:	688e      	ldr	r6, [r1, #8]
 800bae0:	4682      	mov	sl, r0
 800bae2:	42be      	cmp	r6, r7
 800bae4:	460c      	mov	r4, r1
 800bae6:	4690      	mov	r8, r2
 800bae8:	680b      	ldr	r3, [r1, #0]
 800baea:	d82d      	bhi.n	800bb48 <__ssputs_r+0x70>
 800baec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800baf0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800baf4:	d026      	beq.n	800bb44 <__ssputs_r+0x6c>
 800baf6:	6965      	ldr	r5, [r4, #20]
 800baf8:	6909      	ldr	r1, [r1, #16]
 800bafa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bafe:	eba3 0901 	sub.w	r9, r3, r1
 800bb02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb06:	1c7b      	adds	r3, r7, #1
 800bb08:	444b      	add	r3, r9
 800bb0a:	106d      	asrs	r5, r5, #1
 800bb0c:	429d      	cmp	r5, r3
 800bb0e:	bf38      	it	cc
 800bb10:	461d      	movcc	r5, r3
 800bb12:	0553      	lsls	r3, r2, #21
 800bb14:	d527      	bpl.n	800bb66 <__ssputs_r+0x8e>
 800bb16:	4629      	mov	r1, r5
 800bb18:	f7ff ff52 	bl	800b9c0 <_malloc_r>
 800bb1c:	4606      	mov	r6, r0
 800bb1e:	b360      	cbz	r0, 800bb7a <__ssputs_r+0xa2>
 800bb20:	464a      	mov	r2, r9
 800bb22:	6921      	ldr	r1, [r4, #16]
 800bb24:	f000 fc26 	bl	800c374 <memcpy>
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb32:	81a3      	strh	r3, [r4, #12]
 800bb34:	6126      	str	r6, [r4, #16]
 800bb36:	444e      	add	r6, r9
 800bb38:	6026      	str	r6, [r4, #0]
 800bb3a:	463e      	mov	r6, r7
 800bb3c:	6165      	str	r5, [r4, #20]
 800bb3e:	eba5 0509 	sub.w	r5, r5, r9
 800bb42:	60a5      	str	r5, [r4, #8]
 800bb44:	42be      	cmp	r6, r7
 800bb46:	d900      	bls.n	800bb4a <__ssputs_r+0x72>
 800bb48:	463e      	mov	r6, r7
 800bb4a:	4632      	mov	r2, r6
 800bb4c:	4641      	mov	r1, r8
 800bb4e:	6820      	ldr	r0, [r4, #0]
 800bb50:	f000 fbb5 	bl	800c2be <memmove>
 800bb54:	2000      	movs	r0, #0
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	1b9b      	subs	r3, r3, r6
 800bb5a:	60a3      	str	r3, [r4, #8]
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	4433      	add	r3, r6
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb66:	462a      	mov	r2, r5
 800bb68:	f000 fc12 	bl	800c390 <_realloc_r>
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	d1e0      	bne.n	800bb34 <__ssputs_r+0x5c>
 800bb72:	4650      	mov	r0, sl
 800bb74:	6921      	ldr	r1, [r4, #16]
 800bb76:	f7ff feb9 	bl	800b8ec <_free_r>
 800bb7a:	230c      	movs	r3, #12
 800bb7c:	f8ca 3000 	str.w	r3, [sl]
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	f04f 30ff 	mov.w	r0, #4294967295
 800bb86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb8a:	81a3      	strh	r3, [r4, #12]
 800bb8c:	e7e9      	b.n	800bb62 <__ssputs_r+0x8a>
	...

0800bb90 <_svfiprintf_r>:
 800bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	4698      	mov	r8, r3
 800bb96:	898b      	ldrh	r3, [r1, #12]
 800bb98:	4607      	mov	r7, r0
 800bb9a:	061b      	lsls	r3, r3, #24
 800bb9c:	460d      	mov	r5, r1
 800bb9e:	4614      	mov	r4, r2
 800bba0:	b09d      	sub	sp, #116	@ 0x74
 800bba2:	d510      	bpl.n	800bbc6 <_svfiprintf_r+0x36>
 800bba4:	690b      	ldr	r3, [r1, #16]
 800bba6:	b973      	cbnz	r3, 800bbc6 <_svfiprintf_r+0x36>
 800bba8:	2140      	movs	r1, #64	@ 0x40
 800bbaa:	f7ff ff09 	bl	800b9c0 <_malloc_r>
 800bbae:	6028      	str	r0, [r5, #0]
 800bbb0:	6128      	str	r0, [r5, #16]
 800bbb2:	b930      	cbnz	r0, 800bbc2 <_svfiprintf_r+0x32>
 800bbb4:	230c      	movs	r3, #12
 800bbb6:	603b      	str	r3, [r7, #0]
 800bbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbc:	b01d      	add	sp, #116	@ 0x74
 800bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc2:	2340      	movs	r3, #64	@ 0x40
 800bbc4:	616b      	str	r3, [r5, #20]
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbca:	2320      	movs	r3, #32
 800bbcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbd0:	2330      	movs	r3, #48	@ 0x30
 800bbd2:	f04f 0901 	mov.w	r9, #1
 800bbd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbda:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800bd74 <_svfiprintf_r+0x1e4>
 800bbde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbe2:	4623      	mov	r3, r4
 800bbe4:	469a      	mov	sl, r3
 800bbe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbea:	b10a      	cbz	r2, 800bbf0 <_svfiprintf_r+0x60>
 800bbec:	2a25      	cmp	r2, #37	@ 0x25
 800bbee:	d1f9      	bne.n	800bbe4 <_svfiprintf_r+0x54>
 800bbf0:	ebba 0b04 	subs.w	fp, sl, r4
 800bbf4:	d00b      	beq.n	800bc0e <_svfiprintf_r+0x7e>
 800bbf6:	465b      	mov	r3, fp
 800bbf8:	4622      	mov	r2, r4
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	4638      	mov	r0, r7
 800bbfe:	f7ff ff6b 	bl	800bad8 <__ssputs_r>
 800bc02:	3001      	adds	r0, #1
 800bc04:	f000 80a7 	beq.w	800bd56 <_svfiprintf_r+0x1c6>
 800bc08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc0a:	445a      	add	r2, fp
 800bc0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc0e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f000 809f 	beq.w	800bd56 <_svfiprintf_r+0x1c6>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc22:	f10a 0a01 	add.w	sl, sl, #1
 800bc26:	9304      	str	r3, [sp, #16]
 800bc28:	9307      	str	r3, [sp, #28]
 800bc2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc2e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc30:	4654      	mov	r4, sl
 800bc32:	2205      	movs	r2, #5
 800bc34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc38:	484e      	ldr	r0, [pc, #312]	@ (800bd74 <_svfiprintf_r+0x1e4>)
 800bc3a:	f000 fb8d 	bl	800c358 <memchr>
 800bc3e:	9a04      	ldr	r2, [sp, #16]
 800bc40:	b9d8      	cbnz	r0, 800bc7a <_svfiprintf_r+0xea>
 800bc42:	06d0      	lsls	r0, r2, #27
 800bc44:	bf44      	itt	mi
 800bc46:	2320      	movmi	r3, #32
 800bc48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc4c:	0711      	lsls	r1, r2, #28
 800bc4e:	bf44      	itt	mi
 800bc50:	232b      	movmi	r3, #43	@ 0x2b
 800bc52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc56:	f89a 3000 	ldrb.w	r3, [sl]
 800bc5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc5c:	d015      	beq.n	800bc8a <_svfiprintf_r+0xfa>
 800bc5e:	4654      	mov	r4, sl
 800bc60:	2000      	movs	r0, #0
 800bc62:	f04f 0c0a 	mov.w	ip, #10
 800bc66:	9a07      	ldr	r2, [sp, #28]
 800bc68:	4621      	mov	r1, r4
 800bc6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc6e:	3b30      	subs	r3, #48	@ 0x30
 800bc70:	2b09      	cmp	r3, #9
 800bc72:	d94b      	bls.n	800bd0c <_svfiprintf_r+0x17c>
 800bc74:	b1b0      	cbz	r0, 800bca4 <_svfiprintf_r+0x114>
 800bc76:	9207      	str	r2, [sp, #28]
 800bc78:	e014      	b.n	800bca4 <_svfiprintf_r+0x114>
 800bc7a:	eba0 0308 	sub.w	r3, r0, r8
 800bc7e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc82:	4313      	orrs	r3, r2
 800bc84:	46a2      	mov	sl, r4
 800bc86:	9304      	str	r3, [sp, #16]
 800bc88:	e7d2      	b.n	800bc30 <_svfiprintf_r+0xa0>
 800bc8a:	9b03      	ldr	r3, [sp, #12]
 800bc8c:	1d19      	adds	r1, r3, #4
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	9103      	str	r1, [sp, #12]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bfbb      	ittet	lt
 800bc96:	425b      	neglt	r3, r3
 800bc98:	f042 0202 	orrlt.w	r2, r2, #2
 800bc9c:	9307      	strge	r3, [sp, #28]
 800bc9e:	9307      	strlt	r3, [sp, #28]
 800bca0:	bfb8      	it	lt
 800bca2:	9204      	strlt	r2, [sp, #16]
 800bca4:	7823      	ldrb	r3, [r4, #0]
 800bca6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bca8:	d10a      	bne.n	800bcc0 <_svfiprintf_r+0x130>
 800bcaa:	7863      	ldrb	r3, [r4, #1]
 800bcac:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcae:	d132      	bne.n	800bd16 <_svfiprintf_r+0x186>
 800bcb0:	9b03      	ldr	r3, [sp, #12]
 800bcb2:	3402      	adds	r4, #2
 800bcb4:	1d1a      	adds	r2, r3, #4
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	9203      	str	r2, [sp, #12]
 800bcba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcbe:	9305      	str	r3, [sp, #20]
 800bcc0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800bd78 <_svfiprintf_r+0x1e8>
 800bcc4:	2203      	movs	r2, #3
 800bcc6:	4650      	mov	r0, sl
 800bcc8:	7821      	ldrb	r1, [r4, #0]
 800bcca:	f000 fb45 	bl	800c358 <memchr>
 800bcce:	b138      	cbz	r0, 800bce0 <_svfiprintf_r+0x150>
 800bcd0:	2240      	movs	r2, #64	@ 0x40
 800bcd2:	9b04      	ldr	r3, [sp, #16]
 800bcd4:	eba0 000a 	sub.w	r0, r0, sl
 800bcd8:	4082      	lsls	r2, r0
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	3401      	adds	r4, #1
 800bcde:	9304      	str	r3, [sp, #16]
 800bce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce4:	2206      	movs	r2, #6
 800bce6:	4825      	ldr	r0, [pc, #148]	@ (800bd7c <_svfiprintf_r+0x1ec>)
 800bce8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcec:	f000 fb34 	bl	800c358 <memchr>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d036      	beq.n	800bd62 <_svfiprintf_r+0x1d2>
 800bcf4:	4b22      	ldr	r3, [pc, #136]	@ (800bd80 <_svfiprintf_r+0x1f0>)
 800bcf6:	bb1b      	cbnz	r3, 800bd40 <_svfiprintf_r+0x1b0>
 800bcf8:	9b03      	ldr	r3, [sp, #12]
 800bcfa:	3307      	adds	r3, #7
 800bcfc:	f023 0307 	bic.w	r3, r3, #7
 800bd00:	3308      	adds	r3, #8
 800bd02:	9303      	str	r3, [sp, #12]
 800bd04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd06:	4433      	add	r3, r6
 800bd08:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd0a:	e76a      	b.n	800bbe2 <_svfiprintf_r+0x52>
 800bd0c:	460c      	mov	r4, r1
 800bd0e:	2001      	movs	r0, #1
 800bd10:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd14:	e7a8      	b.n	800bc68 <_svfiprintf_r+0xd8>
 800bd16:	2300      	movs	r3, #0
 800bd18:	f04f 0c0a 	mov.w	ip, #10
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	3401      	adds	r4, #1
 800bd20:	9305      	str	r3, [sp, #20]
 800bd22:	4620      	mov	r0, r4
 800bd24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd28:	3a30      	subs	r2, #48	@ 0x30
 800bd2a:	2a09      	cmp	r2, #9
 800bd2c:	d903      	bls.n	800bd36 <_svfiprintf_r+0x1a6>
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d0c6      	beq.n	800bcc0 <_svfiprintf_r+0x130>
 800bd32:	9105      	str	r1, [sp, #20]
 800bd34:	e7c4      	b.n	800bcc0 <_svfiprintf_r+0x130>
 800bd36:	4604      	mov	r4, r0
 800bd38:	2301      	movs	r3, #1
 800bd3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd3e:	e7f0      	b.n	800bd22 <_svfiprintf_r+0x192>
 800bd40:	ab03      	add	r3, sp, #12
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	462a      	mov	r2, r5
 800bd46:	4638      	mov	r0, r7
 800bd48:	4b0e      	ldr	r3, [pc, #56]	@ (800bd84 <_svfiprintf_r+0x1f4>)
 800bd4a:	a904      	add	r1, sp, #16
 800bd4c:	f3af 8000 	nop.w
 800bd50:	1c42      	adds	r2, r0, #1
 800bd52:	4606      	mov	r6, r0
 800bd54:	d1d6      	bne.n	800bd04 <_svfiprintf_r+0x174>
 800bd56:	89ab      	ldrh	r3, [r5, #12]
 800bd58:	065b      	lsls	r3, r3, #25
 800bd5a:	f53f af2d 	bmi.w	800bbb8 <_svfiprintf_r+0x28>
 800bd5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd60:	e72c      	b.n	800bbbc <_svfiprintf_r+0x2c>
 800bd62:	ab03      	add	r3, sp, #12
 800bd64:	9300      	str	r3, [sp, #0]
 800bd66:	462a      	mov	r2, r5
 800bd68:	4638      	mov	r0, r7
 800bd6a:	4b06      	ldr	r3, [pc, #24]	@ (800bd84 <_svfiprintf_r+0x1f4>)
 800bd6c:	a904      	add	r1, sp, #16
 800bd6e:	f000 f87d 	bl	800be6c <_printf_i>
 800bd72:	e7ed      	b.n	800bd50 <_svfiprintf_r+0x1c0>
 800bd74:	0800d3dc 	.word	0x0800d3dc
 800bd78:	0800d3e2 	.word	0x0800d3e2
 800bd7c:	0800d3e6 	.word	0x0800d3e6
 800bd80:	00000000 	.word	0x00000000
 800bd84:	0800bad9 	.word	0x0800bad9

0800bd88 <_printf_common>:
 800bd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd8c:	4616      	mov	r6, r2
 800bd8e:	4698      	mov	r8, r3
 800bd90:	688a      	ldr	r2, [r1, #8]
 800bd92:	690b      	ldr	r3, [r1, #16]
 800bd94:	4607      	mov	r7, r0
 800bd96:	4293      	cmp	r3, r2
 800bd98:	bfb8      	it	lt
 800bd9a:	4613      	movlt	r3, r2
 800bd9c:	6033      	str	r3, [r6, #0]
 800bd9e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bda2:	460c      	mov	r4, r1
 800bda4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bda8:	b10a      	cbz	r2, 800bdae <_printf_common+0x26>
 800bdaa:	3301      	adds	r3, #1
 800bdac:	6033      	str	r3, [r6, #0]
 800bdae:	6823      	ldr	r3, [r4, #0]
 800bdb0:	0699      	lsls	r1, r3, #26
 800bdb2:	bf42      	ittt	mi
 800bdb4:	6833      	ldrmi	r3, [r6, #0]
 800bdb6:	3302      	addmi	r3, #2
 800bdb8:	6033      	strmi	r3, [r6, #0]
 800bdba:	6825      	ldr	r5, [r4, #0]
 800bdbc:	f015 0506 	ands.w	r5, r5, #6
 800bdc0:	d106      	bne.n	800bdd0 <_printf_common+0x48>
 800bdc2:	f104 0a19 	add.w	sl, r4, #25
 800bdc6:	68e3      	ldr	r3, [r4, #12]
 800bdc8:	6832      	ldr	r2, [r6, #0]
 800bdca:	1a9b      	subs	r3, r3, r2
 800bdcc:	42ab      	cmp	r3, r5
 800bdce:	dc2b      	bgt.n	800be28 <_printf_common+0xa0>
 800bdd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bdd4:	6822      	ldr	r2, [r4, #0]
 800bdd6:	3b00      	subs	r3, #0
 800bdd8:	bf18      	it	ne
 800bdda:	2301      	movne	r3, #1
 800bddc:	0692      	lsls	r2, r2, #26
 800bdde:	d430      	bmi.n	800be42 <_printf_common+0xba>
 800bde0:	4641      	mov	r1, r8
 800bde2:	4638      	mov	r0, r7
 800bde4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bde8:	47c8      	blx	r9
 800bdea:	3001      	adds	r0, #1
 800bdec:	d023      	beq.n	800be36 <_printf_common+0xae>
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	6922      	ldr	r2, [r4, #16]
 800bdf2:	f003 0306 	and.w	r3, r3, #6
 800bdf6:	2b04      	cmp	r3, #4
 800bdf8:	bf14      	ite	ne
 800bdfa:	2500      	movne	r5, #0
 800bdfc:	6833      	ldreq	r3, [r6, #0]
 800bdfe:	f04f 0600 	mov.w	r6, #0
 800be02:	bf08      	it	eq
 800be04:	68e5      	ldreq	r5, [r4, #12]
 800be06:	f104 041a 	add.w	r4, r4, #26
 800be0a:	bf08      	it	eq
 800be0c:	1aed      	subeq	r5, r5, r3
 800be0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800be12:	bf08      	it	eq
 800be14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be18:	4293      	cmp	r3, r2
 800be1a:	bfc4      	itt	gt
 800be1c:	1a9b      	subgt	r3, r3, r2
 800be1e:	18ed      	addgt	r5, r5, r3
 800be20:	42b5      	cmp	r5, r6
 800be22:	d11a      	bne.n	800be5a <_printf_common+0xd2>
 800be24:	2000      	movs	r0, #0
 800be26:	e008      	b.n	800be3a <_printf_common+0xb2>
 800be28:	2301      	movs	r3, #1
 800be2a:	4652      	mov	r2, sl
 800be2c:	4641      	mov	r1, r8
 800be2e:	4638      	mov	r0, r7
 800be30:	47c8      	blx	r9
 800be32:	3001      	adds	r0, #1
 800be34:	d103      	bne.n	800be3e <_printf_common+0xb6>
 800be36:	f04f 30ff 	mov.w	r0, #4294967295
 800be3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be3e:	3501      	adds	r5, #1
 800be40:	e7c1      	b.n	800bdc6 <_printf_common+0x3e>
 800be42:	2030      	movs	r0, #48	@ 0x30
 800be44:	18e1      	adds	r1, r4, r3
 800be46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be4a:	1c5a      	adds	r2, r3, #1
 800be4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be50:	4422      	add	r2, r4
 800be52:	3302      	adds	r3, #2
 800be54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be58:	e7c2      	b.n	800bde0 <_printf_common+0x58>
 800be5a:	2301      	movs	r3, #1
 800be5c:	4622      	mov	r2, r4
 800be5e:	4641      	mov	r1, r8
 800be60:	4638      	mov	r0, r7
 800be62:	47c8      	blx	r9
 800be64:	3001      	adds	r0, #1
 800be66:	d0e6      	beq.n	800be36 <_printf_common+0xae>
 800be68:	3601      	adds	r6, #1
 800be6a:	e7d9      	b.n	800be20 <_printf_common+0x98>

0800be6c <_printf_i>:
 800be6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be70:	7e0f      	ldrb	r7, [r1, #24]
 800be72:	4691      	mov	r9, r2
 800be74:	2f78      	cmp	r7, #120	@ 0x78
 800be76:	4680      	mov	r8, r0
 800be78:	460c      	mov	r4, r1
 800be7a:	469a      	mov	sl, r3
 800be7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be82:	d807      	bhi.n	800be94 <_printf_i+0x28>
 800be84:	2f62      	cmp	r7, #98	@ 0x62
 800be86:	d80a      	bhi.n	800be9e <_printf_i+0x32>
 800be88:	2f00      	cmp	r7, #0
 800be8a:	f000 80d3 	beq.w	800c034 <_printf_i+0x1c8>
 800be8e:	2f58      	cmp	r7, #88	@ 0x58
 800be90:	f000 80ba 	beq.w	800c008 <_printf_i+0x19c>
 800be94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be9c:	e03a      	b.n	800bf14 <_printf_i+0xa8>
 800be9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bea2:	2b15      	cmp	r3, #21
 800bea4:	d8f6      	bhi.n	800be94 <_printf_i+0x28>
 800bea6:	a101      	add	r1, pc, #4	@ (adr r1, 800beac <_printf_i+0x40>)
 800bea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800beac:	0800bf05 	.word	0x0800bf05
 800beb0:	0800bf19 	.word	0x0800bf19
 800beb4:	0800be95 	.word	0x0800be95
 800beb8:	0800be95 	.word	0x0800be95
 800bebc:	0800be95 	.word	0x0800be95
 800bec0:	0800be95 	.word	0x0800be95
 800bec4:	0800bf19 	.word	0x0800bf19
 800bec8:	0800be95 	.word	0x0800be95
 800becc:	0800be95 	.word	0x0800be95
 800bed0:	0800be95 	.word	0x0800be95
 800bed4:	0800be95 	.word	0x0800be95
 800bed8:	0800c01b 	.word	0x0800c01b
 800bedc:	0800bf43 	.word	0x0800bf43
 800bee0:	0800bfd5 	.word	0x0800bfd5
 800bee4:	0800be95 	.word	0x0800be95
 800bee8:	0800be95 	.word	0x0800be95
 800beec:	0800c03d 	.word	0x0800c03d
 800bef0:	0800be95 	.word	0x0800be95
 800bef4:	0800bf43 	.word	0x0800bf43
 800bef8:	0800be95 	.word	0x0800be95
 800befc:	0800be95 	.word	0x0800be95
 800bf00:	0800bfdd 	.word	0x0800bfdd
 800bf04:	6833      	ldr	r3, [r6, #0]
 800bf06:	1d1a      	adds	r2, r3, #4
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	6032      	str	r2, [r6, #0]
 800bf0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf14:	2301      	movs	r3, #1
 800bf16:	e09e      	b.n	800c056 <_printf_i+0x1ea>
 800bf18:	6833      	ldr	r3, [r6, #0]
 800bf1a:	6820      	ldr	r0, [r4, #0]
 800bf1c:	1d19      	adds	r1, r3, #4
 800bf1e:	6031      	str	r1, [r6, #0]
 800bf20:	0606      	lsls	r6, r0, #24
 800bf22:	d501      	bpl.n	800bf28 <_printf_i+0xbc>
 800bf24:	681d      	ldr	r5, [r3, #0]
 800bf26:	e003      	b.n	800bf30 <_printf_i+0xc4>
 800bf28:	0645      	lsls	r5, r0, #25
 800bf2a:	d5fb      	bpl.n	800bf24 <_printf_i+0xb8>
 800bf2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf30:	2d00      	cmp	r5, #0
 800bf32:	da03      	bge.n	800bf3c <_printf_i+0xd0>
 800bf34:	232d      	movs	r3, #45	@ 0x2d
 800bf36:	426d      	negs	r5, r5
 800bf38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf3c:	230a      	movs	r3, #10
 800bf3e:	4859      	ldr	r0, [pc, #356]	@ (800c0a4 <_printf_i+0x238>)
 800bf40:	e011      	b.n	800bf66 <_printf_i+0xfa>
 800bf42:	6821      	ldr	r1, [r4, #0]
 800bf44:	6833      	ldr	r3, [r6, #0]
 800bf46:	0608      	lsls	r0, r1, #24
 800bf48:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf4c:	d402      	bmi.n	800bf54 <_printf_i+0xe8>
 800bf4e:	0649      	lsls	r1, r1, #25
 800bf50:	bf48      	it	mi
 800bf52:	b2ad      	uxthmi	r5, r5
 800bf54:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf56:	6033      	str	r3, [r6, #0]
 800bf58:	bf14      	ite	ne
 800bf5a:	230a      	movne	r3, #10
 800bf5c:	2308      	moveq	r3, #8
 800bf5e:	4851      	ldr	r0, [pc, #324]	@ (800c0a4 <_printf_i+0x238>)
 800bf60:	2100      	movs	r1, #0
 800bf62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf66:	6866      	ldr	r6, [r4, #4]
 800bf68:	2e00      	cmp	r6, #0
 800bf6a:	bfa8      	it	ge
 800bf6c:	6821      	ldrge	r1, [r4, #0]
 800bf6e:	60a6      	str	r6, [r4, #8]
 800bf70:	bfa4      	itt	ge
 800bf72:	f021 0104 	bicge.w	r1, r1, #4
 800bf76:	6021      	strge	r1, [r4, #0]
 800bf78:	b90d      	cbnz	r5, 800bf7e <_printf_i+0x112>
 800bf7a:	2e00      	cmp	r6, #0
 800bf7c:	d04b      	beq.n	800c016 <_printf_i+0x1aa>
 800bf7e:	4616      	mov	r6, r2
 800bf80:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf84:	fb03 5711 	mls	r7, r3, r1, r5
 800bf88:	5dc7      	ldrb	r7, [r0, r7]
 800bf8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf8e:	462f      	mov	r7, r5
 800bf90:	42bb      	cmp	r3, r7
 800bf92:	460d      	mov	r5, r1
 800bf94:	d9f4      	bls.n	800bf80 <_printf_i+0x114>
 800bf96:	2b08      	cmp	r3, #8
 800bf98:	d10b      	bne.n	800bfb2 <_printf_i+0x146>
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	07df      	lsls	r7, r3, #31
 800bf9e:	d508      	bpl.n	800bfb2 <_printf_i+0x146>
 800bfa0:	6923      	ldr	r3, [r4, #16]
 800bfa2:	6861      	ldr	r1, [r4, #4]
 800bfa4:	4299      	cmp	r1, r3
 800bfa6:	bfde      	ittt	le
 800bfa8:	2330      	movle	r3, #48	@ 0x30
 800bfaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bfae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bfb2:	1b92      	subs	r2, r2, r6
 800bfb4:	6122      	str	r2, [r4, #16]
 800bfb6:	464b      	mov	r3, r9
 800bfb8:	4621      	mov	r1, r4
 800bfba:	4640      	mov	r0, r8
 800bfbc:	f8cd a000 	str.w	sl, [sp]
 800bfc0:	aa03      	add	r2, sp, #12
 800bfc2:	f7ff fee1 	bl	800bd88 <_printf_common>
 800bfc6:	3001      	adds	r0, #1
 800bfc8:	d14a      	bne.n	800c060 <_printf_i+0x1f4>
 800bfca:	f04f 30ff 	mov.w	r0, #4294967295
 800bfce:	b004      	add	sp, #16
 800bfd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd4:	6823      	ldr	r3, [r4, #0]
 800bfd6:	f043 0320 	orr.w	r3, r3, #32
 800bfda:	6023      	str	r3, [r4, #0]
 800bfdc:	2778      	movs	r7, #120	@ 0x78
 800bfde:	4832      	ldr	r0, [pc, #200]	@ (800c0a8 <_printf_i+0x23c>)
 800bfe0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	6831      	ldr	r1, [r6, #0]
 800bfe8:	061f      	lsls	r7, r3, #24
 800bfea:	f851 5b04 	ldr.w	r5, [r1], #4
 800bfee:	d402      	bmi.n	800bff6 <_printf_i+0x18a>
 800bff0:	065f      	lsls	r7, r3, #25
 800bff2:	bf48      	it	mi
 800bff4:	b2ad      	uxthmi	r5, r5
 800bff6:	6031      	str	r1, [r6, #0]
 800bff8:	07d9      	lsls	r1, r3, #31
 800bffa:	bf44      	itt	mi
 800bffc:	f043 0320 	orrmi.w	r3, r3, #32
 800c000:	6023      	strmi	r3, [r4, #0]
 800c002:	b11d      	cbz	r5, 800c00c <_printf_i+0x1a0>
 800c004:	2310      	movs	r3, #16
 800c006:	e7ab      	b.n	800bf60 <_printf_i+0xf4>
 800c008:	4826      	ldr	r0, [pc, #152]	@ (800c0a4 <_printf_i+0x238>)
 800c00a:	e7e9      	b.n	800bfe0 <_printf_i+0x174>
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	f023 0320 	bic.w	r3, r3, #32
 800c012:	6023      	str	r3, [r4, #0]
 800c014:	e7f6      	b.n	800c004 <_printf_i+0x198>
 800c016:	4616      	mov	r6, r2
 800c018:	e7bd      	b.n	800bf96 <_printf_i+0x12a>
 800c01a:	6833      	ldr	r3, [r6, #0]
 800c01c:	6825      	ldr	r5, [r4, #0]
 800c01e:	1d18      	adds	r0, r3, #4
 800c020:	6961      	ldr	r1, [r4, #20]
 800c022:	6030      	str	r0, [r6, #0]
 800c024:	062e      	lsls	r6, r5, #24
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	d501      	bpl.n	800c02e <_printf_i+0x1c2>
 800c02a:	6019      	str	r1, [r3, #0]
 800c02c:	e002      	b.n	800c034 <_printf_i+0x1c8>
 800c02e:	0668      	lsls	r0, r5, #25
 800c030:	d5fb      	bpl.n	800c02a <_printf_i+0x1be>
 800c032:	8019      	strh	r1, [r3, #0]
 800c034:	2300      	movs	r3, #0
 800c036:	4616      	mov	r6, r2
 800c038:	6123      	str	r3, [r4, #16]
 800c03a:	e7bc      	b.n	800bfb6 <_printf_i+0x14a>
 800c03c:	6833      	ldr	r3, [r6, #0]
 800c03e:	2100      	movs	r1, #0
 800c040:	1d1a      	adds	r2, r3, #4
 800c042:	6032      	str	r2, [r6, #0]
 800c044:	681e      	ldr	r6, [r3, #0]
 800c046:	6862      	ldr	r2, [r4, #4]
 800c048:	4630      	mov	r0, r6
 800c04a:	f000 f985 	bl	800c358 <memchr>
 800c04e:	b108      	cbz	r0, 800c054 <_printf_i+0x1e8>
 800c050:	1b80      	subs	r0, r0, r6
 800c052:	6060      	str	r0, [r4, #4]
 800c054:	6863      	ldr	r3, [r4, #4]
 800c056:	6123      	str	r3, [r4, #16]
 800c058:	2300      	movs	r3, #0
 800c05a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c05e:	e7aa      	b.n	800bfb6 <_printf_i+0x14a>
 800c060:	4632      	mov	r2, r6
 800c062:	4649      	mov	r1, r9
 800c064:	4640      	mov	r0, r8
 800c066:	6923      	ldr	r3, [r4, #16]
 800c068:	47d0      	blx	sl
 800c06a:	3001      	adds	r0, #1
 800c06c:	d0ad      	beq.n	800bfca <_printf_i+0x15e>
 800c06e:	6823      	ldr	r3, [r4, #0]
 800c070:	079b      	lsls	r3, r3, #30
 800c072:	d413      	bmi.n	800c09c <_printf_i+0x230>
 800c074:	68e0      	ldr	r0, [r4, #12]
 800c076:	9b03      	ldr	r3, [sp, #12]
 800c078:	4298      	cmp	r0, r3
 800c07a:	bfb8      	it	lt
 800c07c:	4618      	movlt	r0, r3
 800c07e:	e7a6      	b.n	800bfce <_printf_i+0x162>
 800c080:	2301      	movs	r3, #1
 800c082:	4632      	mov	r2, r6
 800c084:	4649      	mov	r1, r9
 800c086:	4640      	mov	r0, r8
 800c088:	47d0      	blx	sl
 800c08a:	3001      	adds	r0, #1
 800c08c:	d09d      	beq.n	800bfca <_printf_i+0x15e>
 800c08e:	3501      	adds	r5, #1
 800c090:	68e3      	ldr	r3, [r4, #12]
 800c092:	9903      	ldr	r1, [sp, #12]
 800c094:	1a5b      	subs	r3, r3, r1
 800c096:	42ab      	cmp	r3, r5
 800c098:	dcf2      	bgt.n	800c080 <_printf_i+0x214>
 800c09a:	e7eb      	b.n	800c074 <_printf_i+0x208>
 800c09c:	2500      	movs	r5, #0
 800c09e:	f104 0619 	add.w	r6, r4, #25
 800c0a2:	e7f5      	b.n	800c090 <_printf_i+0x224>
 800c0a4:	0800d3ed 	.word	0x0800d3ed
 800c0a8:	0800d3fe 	.word	0x0800d3fe

0800c0ac <__sflush_r>:
 800c0ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b2:	0716      	lsls	r6, r2, #28
 800c0b4:	4605      	mov	r5, r0
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	d454      	bmi.n	800c164 <__sflush_r+0xb8>
 800c0ba:	684b      	ldr	r3, [r1, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	dc02      	bgt.n	800c0c6 <__sflush_r+0x1a>
 800c0c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	dd48      	ble.n	800c158 <__sflush_r+0xac>
 800c0c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0c8:	2e00      	cmp	r6, #0
 800c0ca:	d045      	beq.n	800c158 <__sflush_r+0xac>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c0d2:	682f      	ldr	r7, [r5, #0]
 800c0d4:	6a21      	ldr	r1, [r4, #32]
 800c0d6:	602b      	str	r3, [r5, #0]
 800c0d8:	d030      	beq.n	800c13c <__sflush_r+0x90>
 800c0da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c0dc:	89a3      	ldrh	r3, [r4, #12]
 800c0de:	0759      	lsls	r1, r3, #29
 800c0e0:	d505      	bpl.n	800c0ee <__sflush_r+0x42>
 800c0e2:	6863      	ldr	r3, [r4, #4]
 800c0e4:	1ad2      	subs	r2, r2, r3
 800c0e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0e8:	b10b      	cbz	r3, 800c0ee <__sflush_r+0x42>
 800c0ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0ec:	1ad2      	subs	r2, r2, r3
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0f4:	6a21      	ldr	r1, [r4, #32]
 800c0f6:	47b0      	blx	r6
 800c0f8:	1c43      	adds	r3, r0, #1
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	d106      	bne.n	800c10c <__sflush_r+0x60>
 800c0fe:	6829      	ldr	r1, [r5, #0]
 800c100:	291d      	cmp	r1, #29
 800c102:	d82b      	bhi.n	800c15c <__sflush_r+0xb0>
 800c104:	4a28      	ldr	r2, [pc, #160]	@ (800c1a8 <__sflush_r+0xfc>)
 800c106:	410a      	asrs	r2, r1
 800c108:	07d6      	lsls	r6, r2, #31
 800c10a:	d427      	bmi.n	800c15c <__sflush_r+0xb0>
 800c10c:	2200      	movs	r2, #0
 800c10e:	6062      	str	r2, [r4, #4]
 800c110:	6922      	ldr	r2, [r4, #16]
 800c112:	04d9      	lsls	r1, r3, #19
 800c114:	6022      	str	r2, [r4, #0]
 800c116:	d504      	bpl.n	800c122 <__sflush_r+0x76>
 800c118:	1c42      	adds	r2, r0, #1
 800c11a:	d101      	bne.n	800c120 <__sflush_r+0x74>
 800c11c:	682b      	ldr	r3, [r5, #0]
 800c11e:	b903      	cbnz	r3, 800c122 <__sflush_r+0x76>
 800c120:	6560      	str	r0, [r4, #84]	@ 0x54
 800c122:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c124:	602f      	str	r7, [r5, #0]
 800c126:	b1b9      	cbz	r1, 800c158 <__sflush_r+0xac>
 800c128:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c12c:	4299      	cmp	r1, r3
 800c12e:	d002      	beq.n	800c136 <__sflush_r+0x8a>
 800c130:	4628      	mov	r0, r5
 800c132:	f7ff fbdb 	bl	800b8ec <_free_r>
 800c136:	2300      	movs	r3, #0
 800c138:	6363      	str	r3, [r4, #52]	@ 0x34
 800c13a:	e00d      	b.n	800c158 <__sflush_r+0xac>
 800c13c:	2301      	movs	r3, #1
 800c13e:	4628      	mov	r0, r5
 800c140:	47b0      	blx	r6
 800c142:	4602      	mov	r2, r0
 800c144:	1c50      	adds	r0, r2, #1
 800c146:	d1c9      	bne.n	800c0dc <__sflush_r+0x30>
 800c148:	682b      	ldr	r3, [r5, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d0c6      	beq.n	800c0dc <__sflush_r+0x30>
 800c14e:	2b1d      	cmp	r3, #29
 800c150:	d001      	beq.n	800c156 <__sflush_r+0xaa>
 800c152:	2b16      	cmp	r3, #22
 800c154:	d11d      	bne.n	800c192 <__sflush_r+0xe6>
 800c156:	602f      	str	r7, [r5, #0]
 800c158:	2000      	movs	r0, #0
 800c15a:	e021      	b.n	800c1a0 <__sflush_r+0xf4>
 800c15c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c160:	b21b      	sxth	r3, r3
 800c162:	e01a      	b.n	800c19a <__sflush_r+0xee>
 800c164:	690f      	ldr	r7, [r1, #16]
 800c166:	2f00      	cmp	r7, #0
 800c168:	d0f6      	beq.n	800c158 <__sflush_r+0xac>
 800c16a:	0793      	lsls	r3, r2, #30
 800c16c:	bf18      	it	ne
 800c16e:	2300      	movne	r3, #0
 800c170:	680e      	ldr	r6, [r1, #0]
 800c172:	bf08      	it	eq
 800c174:	694b      	ldreq	r3, [r1, #20]
 800c176:	1bf6      	subs	r6, r6, r7
 800c178:	600f      	str	r7, [r1, #0]
 800c17a:	608b      	str	r3, [r1, #8]
 800c17c:	2e00      	cmp	r6, #0
 800c17e:	ddeb      	ble.n	800c158 <__sflush_r+0xac>
 800c180:	4633      	mov	r3, r6
 800c182:	463a      	mov	r2, r7
 800c184:	4628      	mov	r0, r5
 800c186:	6a21      	ldr	r1, [r4, #32]
 800c188:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c18c:	47e0      	blx	ip
 800c18e:	2800      	cmp	r0, #0
 800c190:	dc07      	bgt.n	800c1a2 <__sflush_r+0xf6>
 800c192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c19a:	f04f 30ff 	mov.w	r0, #4294967295
 800c19e:	81a3      	strh	r3, [r4, #12]
 800c1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1a2:	4407      	add	r7, r0
 800c1a4:	1a36      	subs	r6, r6, r0
 800c1a6:	e7e9      	b.n	800c17c <__sflush_r+0xd0>
 800c1a8:	dfbffffe 	.word	0xdfbffffe

0800c1ac <_fflush_r>:
 800c1ac:	b538      	push	{r3, r4, r5, lr}
 800c1ae:	690b      	ldr	r3, [r1, #16]
 800c1b0:	4605      	mov	r5, r0
 800c1b2:	460c      	mov	r4, r1
 800c1b4:	b913      	cbnz	r3, 800c1bc <_fflush_r+0x10>
 800c1b6:	2500      	movs	r5, #0
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	bd38      	pop	{r3, r4, r5, pc}
 800c1bc:	b118      	cbz	r0, 800c1c6 <_fflush_r+0x1a>
 800c1be:	6a03      	ldr	r3, [r0, #32]
 800c1c0:	b90b      	cbnz	r3, 800c1c6 <_fflush_r+0x1a>
 800c1c2:	f7ff f98b 	bl	800b4dc <__sinit>
 800c1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d0f3      	beq.n	800c1b6 <_fflush_r+0xa>
 800c1ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c1d0:	07d0      	lsls	r0, r2, #31
 800c1d2:	d404      	bmi.n	800c1de <_fflush_r+0x32>
 800c1d4:	0599      	lsls	r1, r3, #22
 800c1d6:	d402      	bmi.n	800c1de <_fflush_r+0x32>
 800c1d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1da:	f7ff fb84 	bl	800b8e6 <__retarget_lock_acquire_recursive>
 800c1de:	4628      	mov	r0, r5
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	f7ff ff63 	bl	800c0ac <__sflush_r>
 800c1e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	07da      	lsls	r2, r3, #31
 800c1ec:	d4e4      	bmi.n	800c1b8 <_fflush_r+0xc>
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	059b      	lsls	r3, r3, #22
 800c1f2:	d4e1      	bmi.n	800c1b8 <_fflush_r+0xc>
 800c1f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1f6:	f7ff fb77 	bl	800b8e8 <__retarget_lock_release_recursive>
 800c1fa:	e7dd      	b.n	800c1b8 <_fflush_r+0xc>

0800c1fc <__swhatbuf_r>:
 800c1fc:	b570      	push	{r4, r5, r6, lr}
 800c1fe:	460c      	mov	r4, r1
 800c200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c204:	4615      	mov	r5, r2
 800c206:	2900      	cmp	r1, #0
 800c208:	461e      	mov	r6, r3
 800c20a:	b096      	sub	sp, #88	@ 0x58
 800c20c:	da0c      	bge.n	800c228 <__swhatbuf_r+0x2c>
 800c20e:	89a3      	ldrh	r3, [r4, #12]
 800c210:	2100      	movs	r1, #0
 800c212:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c216:	bf14      	ite	ne
 800c218:	2340      	movne	r3, #64	@ 0x40
 800c21a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c21e:	2000      	movs	r0, #0
 800c220:	6031      	str	r1, [r6, #0]
 800c222:	602b      	str	r3, [r5, #0]
 800c224:	b016      	add	sp, #88	@ 0x58
 800c226:	bd70      	pop	{r4, r5, r6, pc}
 800c228:	466a      	mov	r2, sp
 800c22a:	f000 f863 	bl	800c2f4 <_fstat_r>
 800c22e:	2800      	cmp	r0, #0
 800c230:	dbed      	blt.n	800c20e <__swhatbuf_r+0x12>
 800c232:	9901      	ldr	r1, [sp, #4]
 800c234:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c238:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c23c:	4259      	negs	r1, r3
 800c23e:	4159      	adcs	r1, r3
 800c240:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c244:	e7eb      	b.n	800c21e <__swhatbuf_r+0x22>

0800c246 <__smakebuf_r>:
 800c246:	898b      	ldrh	r3, [r1, #12]
 800c248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c24a:	079d      	lsls	r5, r3, #30
 800c24c:	4606      	mov	r6, r0
 800c24e:	460c      	mov	r4, r1
 800c250:	d507      	bpl.n	800c262 <__smakebuf_r+0x1c>
 800c252:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c256:	6023      	str	r3, [r4, #0]
 800c258:	6123      	str	r3, [r4, #16]
 800c25a:	2301      	movs	r3, #1
 800c25c:	6163      	str	r3, [r4, #20]
 800c25e:	b003      	add	sp, #12
 800c260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c262:	466a      	mov	r2, sp
 800c264:	ab01      	add	r3, sp, #4
 800c266:	f7ff ffc9 	bl	800c1fc <__swhatbuf_r>
 800c26a:	9f00      	ldr	r7, [sp, #0]
 800c26c:	4605      	mov	r5, r0
 800c26e:	4639      	mov	r1, r7
 800c270:	4630      	mov	r0, r6
 800c272:	f7ff fba5 	bl	800b9c0 <_malloc_r>
 800c276:	b948      	cbnz	r0, 800c28c <__smakebuf_r+0x46>
 800c278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c27c:	059a      	lsls	r2, r3, #22
 800c27e:	d4ee      	bmi.n	800c25e <__smakebuf_r+0x18>
 800c280:	f023 0303 	bic.w	r3, r3, #3
 800c284:	f043 0302 	orr.w	r3, r3, #2
 800c288:	81a3      	strh	r3, [r4, #12]
 800c28a:	e7e2      	b.n	800c252 <__smakebuf_r+0xc>
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c296:	81a3      	strh	r3, [r4, #12]
 800c298:	9b01      	ldr	r3, [sp, #4]
 800c29a:	6020      	str	r0, [r4, #0]
 800c29c:	b15b      	cbz	r3, 800c2b6 <__smakebuf_r+0x70>
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2a4:	f000 f838 	bl	800c318 <_isatty_r>
 800c2a8:	b128      	cbz	r0, 800c2b6 <__smakebuf_r+0x70>
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	f023 0303 	bic.w	r3, r3, #3
 800c2b0:	f043 0301 	orr.w	r3, r3, #1
 800c2b4:	81a3      	strh	r3, [r4, #12]
 800c2b6:	89a3      	ldrh	r3, [r4, #12]
 800c2b8:	431d      	orrs	r5, r3
 800c2ba:	81a5      	strh	r5, [r4, #12]
 800c2bc:	e7cf      	b.n	800c25e <__smakebuf_r+0x18>

0800c2be <memmove>:
 800c2be:	4288      	cmp	r0, r1
 800c2c0:	b510      	push	{r4, lr}
 800c2c2:	eb01 0402 	add.w	r4, r1, r2
 800c2c6:	d902      	bls.n	800c2ce <memmove+0x10>
 800c2c8:	4284      	cmp	r4, r0
 800c2ca:	4623      	mov	r3, r4
 800c2cc:	d807      	bhi.n	800c2de <memmove+0x20>
 800c2ce:	1e43      	subs	r3, r0, #1
 800c2d0:	42a1      	cmp	r1, r4
 800c2d2:	d008      	beq.n	800c2e6 <memmove+0x28>
 800c2d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2dc:	e7f8      	b.n	800c2d0 <memmove+0x12>
 800c2de:	4601      	mov	r1, r0
 800c2e0:	4402      	add	r2, r0
 800c2e2:	428a      	cmp	r2, r1
 800c2e4:	d100      	bne.n	800c2e8 <memmove+0x2a>
 800c2e6:	bd10      	pop	{r4, pc}
 800c2e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2f0:	e7f7      	b.n	800c2e2 <memmove+0x24>
	...

0800c2f4 <_fstat_r>:
 800c2f4:	b538      	push	{r3, r4, r5, lr}
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	4d06      	ldr	r5, [pc, #24]	@ (800c314 <_fstat_r+0x20>)
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	4608      	mov	r0, r1
 800c2fe:	4611      	mov	r1, r2
 800c300:	602b      	str	r3, [r5, #0]
 800c302:	f7f6 fb13 	bl	800292c <_fstat>
 800c306:	1c43      	adds	r3, r0, #1
 800c308:	d102      	bne.n	800c310 <_fstat_r+0x1c>
 800c30a:	682b      	ldr	r3, [r5, #0]
 800c30c:	b103      	cbz	r3, 800c310 <_fstat_r+0x1c>
 800c30e:	6023      	str	r3, [r4, #0]
 800c310:	bd38      	pop	{r3, r4, r5, pc}
 800c312:	bf00      	nop
 800c314:	200005e8 	.word	0x200005e8

0800c318 <_isatty_r>:
 800c318:	b538      	push	{r3, r4, r5, lr}
 800c31a:	2300      	movs	r3, #0
 800c31c:	4d05      	ldr	r5, [pc, #20]	@ (800c334 <_isatty_r+0x1c>)
 800c31e:	4604      	mov	r4, r0
 800c320:	4608      	mov	r0, r1
 800c322:	602b      	str	r3, [r5, #0]
 800c324:	f7f6 fb11 	bl	800294a <_isatty>
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	d102      	bne.n	800c332 <_isatty_r+0x1a>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	b103      	cbz	r3, 800c332 <_isatty_r+0x1a>
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	200005e8 	.word	0x200005e8

0800c338 <_sbrk_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	2300      	movs	r3, #0
 800c33c:	4d05      	ldr	r5, [pc, #20]	@ (800c354 <_sbrk_r+0x1c>)
 800c33e:	4604      	mov	r4, r0
 800c340:	4608      	mov	r0, r1
 800c342:	602b      	str	r3, [r5, #0]
 800c344:	f7f6 fb18 	bl	8002978 <_sbrk>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	d102      	bne.n	800c352 <_sbrk_r+0x1a>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	b103      	cbz	r3, 800c352 <_sbrk_r+0x1a>
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	200005e8 	.word	0x200005e8

0800c358 <memchr>:
 800c358:	4603      	mov	r3, r0
 800c35a:	b510      	push	{r4, lr}
 800c35c:	b2c9      	uxtb	r1, r1
 800c35e:	4402      	add	r2, r0
 800c360:	4293      	cmp	r3, r2
 800c362:	4618      	mov	r0, r3
 800c364:	d101      	bne.n	800c36a <memchr+0x12>
 800c366:	2000      	movs	r0, #0
 800c368:	e003      	b.n	800c372 <memchr+0x1a>
 800c36a:	7804      	ldrb	r4, [r0, #0]
 800c36c:	3301      	adds	r3, #1
 800c36e:	428c      	cmp	r4, r1
 800c370:	d1f6      	bne.n	800c360 <memchr+0x8>
 800c372:	bd10      	pop	{r4, pc}

0800c374 <memcpy>:
 800c374:	440a      	add	r2, r1
 800c376:	4291      	cmp	r1, r2
 800c378:	f100 33ff 	add.w	r3, r0, #4294967295
 800c37c:	d100      	bne.n	800c380 <memcpy+0xc>
 800c37e:	4770      	bx	lr
 800c380:	b510      	push	{r4, lr}
 800c382:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c386:	4291      	cmp	r1, r2
 800c388:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c38c:	d1f9      	bne.n	800c382 <memcpy+0xe>
 800c38e:	bd10      	pop	{r4, pc}

0800c390 <_realloc_r>:
 800c390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c394:	4680      	mov	r8, r0
 800c396:	4615      	mov	r5, r2
 800c398:	460c      	mov	r4, r1
 800c39a:	b921      	cbnz	r1, 800c3a6 <_realloc_r+0x16>
 800c39c:	4611      	mov	r1, r2
 800c39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a2:	f7ff bb0d 	b.w	800b9c0 <_malloc_r>
 800c3a6:	b92a      	cbnz	r2, 800c3b4 <_realloc_r+0x24>
 800c3a8:	f7ff faa0 	bl	800b8ec <_free_r>
 800c3ac:	2400      	movs	r4, #0
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b4:	f000 f81a 	bl	800c3ec <_malloc_usable_size_r>
 800c3b8:	4285      	cmp	r5, r0
 800c3ba:	4606      	mov	r6, r0
 800c3bc:	d802      	bhi.n	800c3c4 <_realloc_r+0x34>
 800c3be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c3c2:	d8f4      	bhi.n	800c3ae <_realloc_r+0x1e>
 800c3c4:	4629      	mov	r1, r5
 800c3c6:	4640      	mov	r0, r8
 800c3c8:	f7ff fafa 	bl	800b9c0 <_malloc_r>
 800c3cc:	4607      	mov	r7, r0
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d0ec      	beq.n	800c3ac <_realloc_r+0x1c>
 800c3d2:	42b5      	cmp	r5, r6
 800c3d4:	462a      	mov	r2, r5
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	bf28      	it	cs
 800c3da:	4632      	movcs	r2, r6
 800c3dc:	f7ff ffca 	bl	800c374 <memcpy>
 800c3e0:	4621      	mov	r1, r4
 800c3e2:	4640      	mov	r0, r8
 800c3e4:	f7ff fa82 	bl	800b8ec <_free_r>
 800c3e8:	463c      	mov	r4, r7
 800c3ea:	e7e0      	b.n	800c3ae <_realloc_r+0x1e>

0800c3ec <_malloc_usable_size_r>:
 800c3ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3f0:	1f18      	subs	r0, r3, #4
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	bfbc      	itt	lt
 800c3f6:	580b      	ldrlt	r3, [r1, r0]
 800c3f8:	18c0      	addlt	r0, r0, r3
 800c3fa:	4770      	bx	lr

0800c3fc <pow>:
 800c3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c400:	4614      	mov	r4, r2
 800c402:	461d      	mov	r5, r3
 800c404:	4680      	mov	r8, r0
 800c406:	4689      	mov	r9, r1
 800c408:	f000 f89a 	bl	800c540 <__ieee754_pow>
 800c40c:	4622      	mov	r2, r4
 800c40e:	4606      	mov	r6, r0
 800c410:	460f      	mov	r7, r1
 800c412:	462b      	mov	r3, r5
 800c414:	4620      	mov	r0, r4
 800c416:	4629      	mov	r1, r5
 800c418:	f7f4 fb08 	bl	8000a2c <__aeabi_dcmpun>
 800c41c:	bbc8      	cbnz	r0, 800c492 <pow+0x96>
 800c41e:	2200      	movs	r2, #0
 800c420:	2300      	movs	r3, #0
 800c422:	4640      	mov	r0, r8
 800c424:	4649      	mov	r1, r9
 800c426:	f7f4 facf 	bl	80009c8 <__aeabi_dcmpeq>
 800c42a:	b1b8      	cbz	r0, 800c45c <pow+0x60>
 800c42c:	2200      	movs	r2, #0
 800c42e:	2300      	movs	r3, #0
 800c430:	4620      	mov	r0, r4
 800c432:	4629      	mov	r1, r5
 800c434:	f7f4 fac8 	bl	80009c8 <__aeabi_dcmpeq>
 800c438:	2800      	cmp	r0, #0
 800c43a:	d141      	bne.n	800c4c0 <pow+0xc4>
 800c43c:	4620      	mov	r0, r4
 800c43e:	4629      	mov	r1, r5
 800c440:	f000 f844 	bl	800c4cc <finite>
 800c444:	b328      	cbz	r0, 800c492 <pow+0x96>
 800c446:	2200      	movs	r2, #0
 800c448:	2300      	movs	r3, #0
 800c44a:	4620      	mov	r0, r4
 800c44c:	4629      	mov	r1, r5
 800c44e:	f7f4 fac5 	bl	80009dc <__aeabi_dcmplt>
 800c452:	b1f0      	cbz	r0, 800c492 <pow+0x96>
 800c454:	f7ff fa1c 	bl	800b890 <__errno>
 800c458:	2322      	movs	r3, #34	@ 0x22
 800c45a:	e019      	b.n	800c490 <pow+0x94>
 800c45c:	4630      	mov	r0, r6
 800c45e:	4639      	mov	r1, r7
 800c460:	f000 f834 	bl	800c4cc <finite>
 800c464:	b9c8      	cbnz	r0, 800c49a <pow+0x9e>
 800c466:	4640      	mov	r0, r8
 800c468:	4649      	mov	r1, r9
 800c46a:	f000 f82f 	bl	800c4cc <finite>
 800c46e:	b1a0      	cbz	r0, 800c49a <pow+0x9e>
 800c470:	4620      	mov	r0, r4
 800c472:	4629      	mov	r1, r5
 800c474:	f000 f82a 	bl	800c4cc <finite>
 800c478:	b178      	cbz	r0, 800c49a <pow+0x9e>
 800c47a:	4632      	mov	r2, r6
 800c47c:	463b      	mov	r3, r7
 800c47e:	4630      	mov	r0, r6
 800c480:	4639      	mov	r1, r7
 800c482:	f7f4 fad3 	bl	8000a2c <__aeabi_dcmpun>
 800c486:	2800      	cmp	r0, #0
 800c488:	d0e4      	beq.n	800c454 <pow+0x58>
 800c48a:	f7ff fa01 	bl	800b890 <__errno>
 800c48e:	2321      	movs	r3, #33	@ 0x21
 800c490:	6003      	str	r3, [r0, #0]
 800c492:	4630      	mov	r0, r6
 800c494:	4639      	mov	r1, r7
 800c496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c49a:	2200      	movs	r2, #0
 800c49c:	2300      	movs	r3, #0
 800c49e:	4630      	mov	r0, r6
 800c4a0:	4639      	mov	r1, r7
 800c4a2:	f7f4 fa91 	bl	80009c8 <__aeabi_dcmpeq>
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	d0f3      	beq.n	800c492 <pow+0x96>
 800c4aa:	4640      	mov	r0, r8
 800c4ac:	4649      	mov	r1, r9
 800c4ae:	f000 f80d 	bl	800c4cc <finite>
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	d0ed      	beq.n	800c492 <pow+0x96>
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	f000 f807 	bl	800c4cc <finite>
 800c4be:	e7c8      	b.n	800c452 <pow+0x56>
 800c4c0:	2600      	movs	r6, #0
 800c4c2:	4f01      	ldr	r7, [pc, #4]	@ (800c4c8 <pow+0xcc>)
 800c4c4:	e7e5      	b.n	800c492 <pow+0x96>
 800c4c6:	bf00      	nop
 800c4c8:	3ff00000 	.word	0x3ff00000

0800c4cc <finite>:
 800c4cc:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800c4d0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c4d4:	0fc0      	lsrs	r0, r0, #31
 800c4d6:	4770      	bx	lr

0800c4d8 <trunc>:
 800c4d8:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
 800c4dc:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c4e0:	f2a5 34ff 	subw	r4, r5, #1023	@ 0x3ff
 800c4e4:	2c13      	cmp	r4, #19
 800c4e6:	4683      	mov	fp, r0
 800c4e8:	468c      	mov	ip, r1
 800c4ea:	dc13      	bgt.n	800c514 <trunc+0x3c>
 800c4ec:	2c00      	cmp	r4, #0
 800c4ee:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c4f2:	da06      	bge.n	800c502 <trunc+0x2a>
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	46ac      	mov	ip, r5
 800c4f8:	4693      	mov	fp, r2
 800c4fa:	4658      	mov	r0, fp
 800c4fc:	4661      	mov	r1, ip
 800c4fe:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
 800c502:	2000      	movs	r0, #0
 800c504:	4b0c      	ldr	r3, [pc, #48]	@ (800c538 <trunc+0x60>)
 800c506:	4123      	asrs	r3, r4
 800c508:	400b      	ands	r3, r1
 800c50a:	ea43 0105 	orr.w	r1, r3, r5
 800c50e:	4683      	mov	fp, r0
 800c510:	468c      	mov	ip, r1
 800c512:	e7f2      	b.n	800c4fa <trunc+0x22>
 800c514:	2c33      	cmp	r4, #51	@ 0x33
 800c516:	dd07      	ble.n	800c528 <trunc+0x50>
 800c518:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 800c51c:	d1ed      	bne.n	800c4fa <trunc+0x22>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	f7f3 fe33 	bl	800018c <__adddf3>
 800c526:	e7f2      	b.n	800c50e <trunc+0x36>
 800c528:	f04f 33ff 	mov.w	r3, #4294967295
 800c52c:	f2a5 4513 	subw	r5, r5, #1043	@ 0x413
 800c530:	40eb      	lsrs	r3, r5
 800c532:	ea20 0003 	bic.w	r0, r0, r3
 800c536:	e7ea      	b.n	800c50e <trunc+0x36>
 800c538:	fff00000 	.word	0xfff00000
 800c53c:	00000000 	.word	0x00000000

0800c540 <__ieee754_pow>:
 800c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	b091      	sub	sp, #68	@ 0x44
 800c546:	e9cd 2300 	strd	r2, r3, [sp]
 800c54a:	468b      	mov	fp, r1
 800c54c:	e9dd 1800 	ldrd	r1, r8, [sp]
 800c550:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800c554:	4682      	mov	sl, r0
 800c556:	ea57 0001 	orrs.w	r0, r7, r1
 800c55a:	d112      	bne.n	800c582 <__ieee754_pow+0x42>
 800c55c:	4653      	mov	r3, sl
 800c55e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800c562:	18db      	adds	r3, r3, r3
 800c564:	4152      	adcs	r2, r2
 800c566:	4298      	cmp	r0, r3
 800c568:	4b91      	ldr	r3, [pc, #580]	@ (800c7b0 <__ieee754_pow+0x270>)
 800c56a:	4193      	sbcs	r3, r2
 800c56c:	f080 84ce 	bcs.w	800cf0c <__ieee754_pow+0x9cc>
 800c570:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c574:	4650      	mov	r0, sl
 800c576:	4659      	mov	r1, fp
 800c578:	f7f3 fe08 	bl	800018c <__adddf3>
 800c57c:	b011      	add	sp, #68	@ 0x44
 800c57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c582:	4b8c      	ldr	r3, [pc, #560]	@ (800c7b4 <__ieee754_pow+0x274>)
 800c584:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800c588:	429e      	cmp	r6, r3
 800c58a:	465d      	mov	r5, fp
 800c58c:	46d1      	mov	r9, sl
 800c58e:	d807      	bhi.n	800c5a0 <__ieee754_pow+0x60>
 800c590:	d102      	bne.n	800c598 <__ieee754_pow+0x58>
 800c592:	f1ba 0f00 	cmp.w	sl, #0
 800c596:	d1eb      	bne.n	800c570 <__ieee754_pow+0x30>
 800c598:	429f      	cmp	r7, r3
 800c59a:	d801      	bhi.n	800c5a0 <__ieee754_pow+0x60>
 800c59c:	d10f      	bne.n	800c5be <__ieee754_pow+0x7e>
 800c59e:	b171      	cbz	r1, 800c5be <__ieee754_pow+0x7e>
 800c5a0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800c5a4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800c5a8:	ea55 0509 	orrs.w	r5, r5, r9
 800c5ac:	d1e0      	bne.n	800c570 <__ieee754_pow+0x30>
 800c5ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c5b2:	18db      	adds	r3, r3, r3
 800c5b4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800c5b8:	4152      	adcs	r2, r2
 800c5ba:	429d      	cmp	r5, r3
 800c5bc:	e7d4      	b.n	800c568 <__ieee754_pow+0x28>
 800c5be:	2d00      	cmp	r5, #0
 800c5c0:	4633      	mov	r3, r6
 800c5c2:	da39      	bge.n	800c638 <__ieee754_pow+0xf8>
 800c5c4:	4a7c      	ldr	r2, [pc, #496]	@ (800c7b8 <__ieee754_pow+0x278>)
 800c5c6:	4297      	cmp	r7, r2
 800c5c8:	d84e      	bhi.n	800c668 <__ieee754_pow+0x128>
 800c5ca:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800c5ce:	4297      	cmp	r7, r2
 800c5d0:	f240 84ab 	bls.w	800cf2a <__ieee754_pow+0x9ea>
 800c5d4:	153a      	asrs	r2, r7, #20
 800c5d6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c5da:	2a14      	cmp	r2, #20
 800c5dc:	dd0f      	ble.n	800c5fe <__ieee754_pow+0xbe>
 800c5de:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800c5e2:	fa21 f402 	lsr.w	r4, r1, r2
 800c5e6:	fa04 f202 	lsl.w	r2, r4, r2
 800c5ea:	428a      	cmp	r2, r1
 800c5ec:	f040 849d 	bne.w	800cf2a <__ieee754_pow+0x9ea>
 800c5f0:	f004 0401 	and.w	r4, r4, #1
 800c5f4:	f1c4 0402 	rsb	r4, r4, #2
 800c5f8:	2900      	cmp	r1, #0
 800c5fa:	d15a      	bne.n	800c6b2 <__ieee754_pow+0x172>
 800c5fc:	e00e      	b.n	800c61c <__ieee754_pow+0xdc>
 800c5fe:	2900      	cmp	r1, #0
 800c600:	d156      	bne.n	800c6b0 <__ieee754_pow+0x170>
 800c602:	f1c2 0214 	rsb	r2, r2, #20
 800c606:	fa47 f402 	asr.w	r4, r7, r2
 800c60a:	fa04 f202 	lsl.w	r2, r4, r2
 800c60e:	42ba      	cmp	r2, r7
 800c610:	f040 8488 	bne.w	800cf24 <__ieee754_pow+0x9e4>
 800c614:	f004 0401 	and.w	r4, r4, #1
 800c618:	f1c4 0402 	rsb	r4, r4, #2
 800c61c:	4a67      	ldr	r2, [pc, #412]	@ (800c7bc <__ieee754_pow+0x27c>)
 800c61e:	4297      	cmp	r7, r2
 800c620:	d130      	bne.n	800c684 <__ieee754_pow+0x144>
 800c622:	f1b8 0f00 	cmp.w	r8, #0
 800c626:	f280 8479 	bge.w	800cf1c <__ieee754_pow+0x9dc>
 800c62a:	4652      	mov	r2, sl
 800c62c:	465b      	mov	r3, fp
 800c62e:	2000      	movs	r0, #0
 800c630:	4962      	ldr	r1, [pc, #392]	@ (800c7bc <__ieee754_pow+0x27c>)
 800c632:	f7f4 f88b 	bl	800074c <__aeabi_ddiv>
 800c636:	e7a1      	b.n	800c57c <__ieee754_pow+0x3c>
 800c638:	2400      	movs	r4, #0
 800c63a:	2900      	cmp	r1, #0
 800c63c:	d139      	bne.n	800c6b2 <__ieee754_pow+0x172>
 800c63e:	4a5d      	ldr	r2, [pc, #372]	@ (800c7b4 <__ieee754_pow+0x274>)
 800c640:	4297      	cmp	r7, r2
 800c642:	d1eb      	bne.n	800c61c <__ieee754_pow+0xdc>
 800c644:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800c648:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800c64c:	ea53 0309 	orrs.w	r3, r3, r9
 800c650:	f000 845c 	beq.w	800cf0c <__ieee754_pow+0x9cc>
 800c654:	4b5a      	ldr	r3, [pc, #360]	@ (800c7c0 <__ieee754_pow+0x280>)
 800c656:	429e      	cmp	r6, r3
 800c658:	d908      	bls.n	800c66c <__ieee754_pow+0x12c>
 800c65a:	f1b8 0f00 	cmp.w	r8, #0
 800c65e:	f2c0 8459 	blt.w	800cf14 <__ieee754_pow+0x9d4>
 800c662:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c666:	e789      	b.n	800c57c <__ieee754_pow+0x3c>
 800c668:	2402      	movs	r4, #2
 800c66a:	e7e6      	b.n	800c63a <__ieee754_pow+0xfa>
 800c66c:	f1b8 0f00 	cmp.w	r8, #0
 800c670:	f04f 0000 	mov.w	r0, #0
 800c674:	f04f 0100 	mov.w	r1, #0
 800c678:	da80      	bge.n	800c57c <__ieee754_pow+0x3c>
 800c67a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c67e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c682:	e77b      	b.n	800c57c <__ieee754_pow+0x3c>
 800c684:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800c688:	d106      	bne.n	800c698 <__ieee754_pow+0x158>
 800c68a:	4652      	mov	r2, sl
 800c68c:	465b      	mov	r3, fp
 800c68e:	4650      	mov	r0, sl
 800c690:	4659      	mov	r1, fp
 800c692:	f7f3 ff31 	bl	80004f8 <__aeabi_dmul>
 800c696:	e771      	b.n	800c57c <__ieee754_pow+0x3c>
 800c698:	4a4a      	ldr	r2, [pc, #296]	@ (800c7c4 <__ieee754_pow+0x284>)
 800c69a:	4590      	cmp	r8, r2
 800c69c:	d109      	bne.n	800c6b2 <__ieee754_pow+0x172>
 800c69e:	2d00      	cmp	r5, #0
 800c6a0:	db07      	blt.n	800c6b2 <__ieee754_pow+0x172>
 800c6a2:	4650      	mov	r0, sl
 800c6a4:	4659      	mov	r1, fp
 800c6a6:	b011      	add	sp, #68	@ 0x44
 800c6a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	f000 bd12 	b.w	800d0d4 <__ieee754_sqrt>
 800c6b0:	2400      	movs	r4, #0
 800c6b2:	4650      	mov	r0, sl
 800c6b4:	4659      	mov	r1, fp
 800c6b6:	9302      	str	r3, [sp, #8]
 800c6b8:	f000 fc6a 	bl	800cf90 <fabs>
 800c6bc:	9b02      	ldr	r3, [sp, #8]
 800c6be:	f1b9 0f00 	cmp.w	r9, #0
 800c6c2:	d127      	bne.n	800c714 <__ieee754_pow+0x1d4>
 800c6c4:	4a3d      	ldr	r2, [pc, #244]	@ (800c7bc <__ieee754_pow+0x27c>)
 800c6c6:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800c6ca:	4594      	cmp	ip, r2
 800c6cc:	d000      	beq.n	800c6d0 <__ieee754_pow+0x190>
 800c6ce:	bb0e      	cbnz	r6, 800c714 <__ieee754_pow+0x1d4>
 800c6d0:	f1b8 0f00 	cmp.w	r8, #0
 800c6d4:	da05      	bge.n	800c6e2 <__ieee754_pow+0x1a2>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	460b      	mov	r3, r1
 800c6da:	2000      	movs	r0, #0
 800c6dc:	4937      	ldr	r1, [pc, #220]	@ (800c7bc <__ieee754_pow+0x27c>)
 800c6de:	f7f4 f835 	bl	800074c <__aeabi_ddiv>
 800c6e2:	2d00      	cmp	r5, #0
 800c6e4:	f6bf af4a 	bge.w	800c57c <__ieee754_pow+0x3c>
 800c6e8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800c6ec:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800c6f0:	4326      	orrs	r6, r4
 800c6f2:	d108      	bne.n	800c706 <__ieee754_pow+0x1c6>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	f7f3 fd44 	bl	8000188 <__aeabi_dsub>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	e795      	b.n	800c632 <__ieee754_pow+0xf2>
 800c706:	2c01      	cmp	r4, #1
 800c708:	f47f af38 	bne.w	800c57c <__ieee754_pow+0x3c>
 800c70c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c710:	4619      	mov	r1, r3
 800c712:	e733      	b.n	800c57c <__ieee754_pow+0x3c>
 800c714:	0fea      	lsrs	r2, r5, #31
 800c716:	3a01      	subs	r2, #1
 800c718:	ea52 0c04 	orrs.w	ip, r2, r4
 800c71c:	d102      	bne.n	800c724 <__ieee754_pow+0x1e4>
 800c71e:	4652      	mov	r2, sl
 800c720:	465b      	mov	r3, fp
 800c722:	e7e9      	b.n	800c6f8 <__ieee754_pow+0x1b8>
 800c724:	f04f 0900 	mov.w	r9, #0
 800c728:	3c01      	subs	r4, #1
 800c72a:	4314      	orrs	r4, r2
 800c72c:	bf14      	ite	ne
 800c72e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800c7bc <__ieee754_pow+0x27c>
 800c732:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800c7c8 <__ieee754_pow+0x288>
 800c736:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800c73a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800c73e:	f240 8107 	bls.w	800c950 <__ieee754_pow+0x410>
 800c742:	4b22      	ldr	r3, [pc, #136]	@ (800c7cc <__ieee754_pow+0x28c>)
 800c744:	429f      	cmp	r7, r3
 800c746:	4b1e      	ldr	r3, [pc, #120]	@ (800c7c0 <__ieee754_pow+0x280>)
 800c748:	d913      	bls.n	800c772 <__ieee754_pow+0x232>
 800c74a:	429e      	cmp	r6, r3
 800c74c:	d808      	bhi.n	800c760 <__ieee754_pow+0x220>
 800c74e:	f1b8 0f00 	cmp.w	r8, #0
 800c752:	da08      	bge.n	800c766 <__ieee754_pow+0x226>
 800c754:	2000      	movs	r0, #0
 800c756:	b011      	add	sp, #68	@ 0x44
 800c758:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75c:	f000 bcb4 	b.w	800d0c8 <__math_oflow>
 800c760:	f1b8 0f00 	cmp.w	r8, #0
 800c764:	dcf6      	bgt.n	800c754 <__ieee754_pow+0x214>
 800c766:	2000      	movs	r0, #0
 800c768:	b011      	add	sp, #68	@ 0x44
 800c76a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c76e:	f000 bca6 	b.w	800d0be <__math_uflow>
 800c772:	429e      	cmp	r6, r3
 800c774:	d20c      	bcs.n	800c790 <__ieee754_pow+0x250>
 800c776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c77a:	2200      	movs	r2, #0
 800c77c:	2300      	movs	r3, #0
 800c77e:	f7f4 f92d 	bl	80009dc <__aeabi_dcmplt>
 800c782:	3800      	subs	r0, #0
 800c784:	bf18      	it	ne
 800c786:	2001      	movne	r0, #1
 800c788:	f1b8 0f00 	cmp.w	r8, #0
 800c78c:	daec      	bge.n	800c768 <__ieee754_pow+0x228>
 800c78e:	e7e2      	b.n	800c756 <__ieee754_pow+0x216>
 800c790:	4b0a      	ldr	r3, [pc, #40]	@ (800c7bc <__ieee754_pow+0x27c>)
 800c792:	2200      	movs	r2, #0
 800c794:	429e      	cmp	r6, r3
 800c796:	d91b      	bls.n	800c7d0 <__ieee754_pow+0x290>
 800c798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c79c:	2300      	movs	r3, #0
 800c79e:	f7f4 f91d 	bl	80009dc <__aeabi_dcmplt>
 800c7a2:	3800      	subs	r0, #0
 800c7a4:	bf18      	it	ne
 800c7a6:	2001      	movne	r0, #1
 800c7a8:	f1b8 0f00 	cmp.w	r8, #0
 800c7ac:	dcd3      	bgt.n	800c756 <__ieee754_pow+0x216>
 800c7ae:	e7db      	b.n	800c768 <__ieee754_pow+0x228>
 800c7b0:	fff00000 	.word	0xfff00000
 800c7b4:	7ff00000 	.word	0x7ff00000
 800c7b8:	433fffff 	.word	0x433fffff
 800c7bc:	3ff00000 	.word	0x3ff00000
 800c7c0:	3fefffff 	.word	0x3fefffff
 800c7c4:	3fe00000 	.word	0x3fe00000
 800c7c8:	bff00000 	.word	0xbff00000
 800c7cc:	43f00000 	.word	0x43f00000
 800c7d0:	4b5b      	ldr	r3, [pc, #364]	@ (800c940 <__ieee754_pow+0x400>)
 800c7d2:	f7f3 fcd9 	bl	8000188 <__aeabi_dsub>
 800c7d6:	a352      	add	r3, pc, #328	@ (adr r3, 800c920 <__ieee754_pow+0x3e0>)
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	4604      	mov	r4, r0
 800c7de:	460d      	mov	r5, r1
 800c7e0:	f7f3 fe8a 	bl	80004f8 <__aeabi_dmul>
 800c7e4:	a350      	add	r3, pc, #320	@ (adr r3, 800c928 <__ieee754_pow+0x3e8>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	4606      	mov	r6, r0
 800c7ec:	460f      	mov	r7, r1
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	f7f3 fe81 	bl	80004f8 <__aeabi_dmul>
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	4682      	mov	sl, r0
 800c7fa:	468b      	mov	fp, r1
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	4629      	mov	r1, r5
 800c800:	4b50      	ldr	r3, [pc, #320]	@ (800c944 <__ieee754_pow+0x404>)
 800c802:	f7f3 fe79 	bl	80004f8 <__aeabi_dmul>
 800c806:	4602      	mov	r2, r0
 800c808:	460b      	mov	r3, r1
 800c80a:	a149      	add	r1, pc, #292	@ (adr r1, 800c930 <__ieee754_pow+0x3f0>)
 800c80c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c810:	f7f3 fcba 	bl	8000188 <__aeabi_dsub>
 800c814:	4622      	mov	r2, r4
 800c816:	462b      	mov	r3, r5
 800c818:	f7f3 fe6e 	bl	80004f8 <__aeabi_dmul>
 800c81c:	4602      	mov	r2, r0
 800c81e:	460b      	mov	r3, r1
 800c820:	2000      	movs	r0, #0
 800c822:	4949      	ldr	r1, [pc, #292]	@ (800c948 <__ieee754_pow+0x408>)
 800c824:	f7f3 fcb0 	bl	8000188 <__aeabi_dsub>
 800c828:	4622      	mov	r2, r4
 800c82a:	4680      	mov	r8, r0
 800c82c:	4689      	mov	r9, r1
 800c82e:	462b      	mov	r3, r5
 800c830:	4620      	mov	r0, r4
 800c832:	4629      	mov	r1, r5
 800c834:	f7f3 fe60 	bl	80004f8 <__aeabi_dmul>
 800c838:	4602      	mov	r2, r0
 800c83a:	460b      	mov	r3, r1
 800c83c:	4640      	mov	r0, r8
 800c83e:	4649      	mov	r1, r9
 800c840:	f7f3 fe5a 	bl	80004f8 <__aeabi_dmul>
 800c844:	a33c      	add	r3, pc, #240	@ (adr r3, 800c938 <__ieee754_pow+0x3f8>)
 800c846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84a:	f7f3 fe55 	bl	80004f8 <__aeabi_dmul>
 800c84e:	4602      	mov	r2, r0
 800c850:	460b      	mov	r3, r1
 800c852:	4650      	mov	r0, sl
 800c854:	4659      	mov	r1, fp
 800c856:	f7f3 fc97 	bl	8000188 <__aeabi_dsub>
 800c85a:	2400      	movs	r4, #0
 800c85c:	4602      	mov	r2, r0
 800c85e:	460b      	mov	r3, r1
 800c860:	4680      	mov	r8, r0
 800c862:	4689      	mov	r9, r1
 800c864:	4630      	mov	r0, r6
 800c866:	4639      	mov	r1, r7
 800c868:	f7f3 fc90 	bl	800018c <__adddf3>
 800c86c:	4632      	mov	r2, r6
 800c86e:	463b      	mov	r3, r7
 800c870:	4620      	mov	r0, r4
 800c872:	460d      	mov	r5, r1
 800c874:	f7f3 fc88 	bl	8000188 <__aeabi_dsub>
 800c878:	4602      	mov	r2, r0
 800c87a:	460b      	mov	r3, r1
 800c87c:	4640      	mov	r0, r8
 800c87e:	4649      	mov	r1, r9
 800c880:	f7f3 fc82 	bl	8000188 <__aeabi_dsub>
 800c884:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c888:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c88c:	2300      	movs	r3, #0
 800c88e:	9304      	str	r3, [sp, #16]
 800c890:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c894:	4606      	mov	r6, r0
 800c896:	460f      	mov	r7, r1
 800c898:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c89c:	4652      	mov	r2, sl
 800c89e:	465b      	mov	r3, fp
 800c8a0:	f7f3 fc72 	bl	8000188 <__aeabi_dsub>
 800c8a4:	4622      	mov	r2, r4
 800c8a6:	462b      	mov	r3, r5
 800c8a8:	f7f3 fe26 	bl	80004f8 <__aeabi_dmul>
 800c8ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8b0:	4680      	mov	r8, r0
 800c8b2:	4689      	mov	r9, r1
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	4639      	mov	r1, r7
 800c8b8:	f7f3 fe1e 	bl	80004f8 <__aeabi_dmul>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	460b      	mov	r3, r1
 800c8c0:	4640      	mov	r0, r8
 800c8c2:	4649      	mov	r1, r9
 800c8c4:	f7f3 fc62 	bl	800018c <__adddf3>
 800c8c8:	4652      	mov	r2, sl
 800c8ca:	465b      	mov	r3, fp
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	460f      	mov	r7, r1
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	4629      	mov	r1, r5
 800c8d4:	f7f3 fe10 	bl	80004f8 <__aeabi_dmul>
 800c8d8:	460b      	mov	r3, r1
 800c8da:	4602      	mov	r2, r0
 800c8dc:	4680      	mov	r8, r0
 800c8de:	4689      	mov	r9, r1
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	4639      	mov	r1, r7
 800c8e4:	f7f3 fc52 	bl	800018c <__adddf3>
 800c8e8:	4b18      	ldr	r3, [pc, #96]	@ (800c94c <__ieee754_pow+0x40c>)
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	4299      	cmp	r1, r3
 800c8ee:	460d      	mov	r5, r1
 800c8f0:	468a      	mov	sl, r1
 800c8f2:	468b      	mov	fp, r1
 800c8f4:	f340 82e0 	ble.w	800ceb8 <__ieee754_pow+0x978>
 800c8f8:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800c8fc:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800c900:	4303      	orrs	r3, r0
 800c902:	f000 81df 	beq.w	800ccc4 <__ieee754_pow+0x784>
 800c906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c90a:	2200      	movs	r2, #0
 800c90c:	2300      	movs	r3, #0
 800c90e:	f7f4 f865 	bl	80009dc <__aeabi_dcmplt>
 800c912:	3800      	subs	r0, #0
 800c914:	bf18      	it	ne
 800c916:	2001      	movne	r0, #1
 800c918:	e71d      	b.n	800c756 <__ieee754_pow+0x216>
 800c91a:	bf00      	nop
 800c91c:	f3af 8000 	nop.w
 800c920:	60000000 	.word	0x60000000
 800c924:	3ff71547 	.word	0x3ff71547
 800c928:	f85ddf44 	.word	0xf85ddf44
 800c92c:	3e54ae0b 	.word	0x3e54ae0b
 800c930:	55555555 	.word	0x55555555
 800c934:	3fd55555 	.word	0x3fd55555
 800c938:	652b82fe 	.word	0x652b82fe
 800c93c:	3ff71547 	.word	0x3ff71547
 800c940:	3ff00000 	.word	0x3ff00000
 800c944:	3fd00000 	.word	0x3fd00000
 800c948:	3fe00000 	.word	0x3fe00000
 800c94c:	408fffff 	.word	0x408fffff
 800c950:	4ad3      	ldr	r2, [pc, #844]	@ (800cca0 <__ieee754_pow+0x760>)
 800c952:	402a      	ands	r2, r5
 800c954:	2a00      	cmp	r2, #0
 800c956:	f040 817a 	bne.w	800cc4e <__ieee754_pow+0x70e>
 800c95a:	4bd2      	ldr	r3, [pc, #840]	@ (800cca4 <__ieee754_pow+0x764>)
 800c95c:	2200      	movs	r2, #0
 800c95e:	f7f3 fdcb 	bl	80004f8 <__aeabi_dmul>
 800c962:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800c966:	460b      	mov	r3, r1
 800c968:	151a      	asrs	r2, r3, #20
 800c96a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c96e:	4422      	add	r2, r4
 800c970:	920a      	str	r2, [sp, #40]	@ 0x28
 800c972:	4acd      	ldr	r2, [pc, #820]	@ (800cca8 <__ieee754_pow+0x768>)
 800c974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c978:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800c97c:	4293      	cmp	r3, r2
 800c97e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c982:	dd08      	ble.n	800c996 <__ieee754_pow+0x456>
 800c984:	4ac9      	ldr	r2, [pc, #804]	@ (800ccac <__ieee754_pow+0x76c>)
 800c986:	4293      	cmp	r3, r2
 800c988:	f340 8163 	ble.w	800cc52 <__ieee754_pow+0x712>
 800c98c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c98e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c992:	3301      	adds	r3, #1
 800c994:	930a      	str	r3, [sp, #40]	@ 0x28
 800c996:	2600      	movs	r6, #0
 800c998:	00f3      	lsls	r3, r6, #3
 800c99a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c99c:	4bc4      	ldr	r3, [pc, #784]	@ (800ccb0 <__ieee754_pow+0x770>)
 800c99e:	4629      	mov	r1, r5
 800c9a0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c9a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800c9ae:	4623      	mov	r3, r4
 800c9b0:	4682      	mov	sl, r0
 800c9b2:	f7f3 fbe9 	bl	8000188 <__aeabi_dsub>
 800c9b6:	4652      	mov	r2, sl
 800c9b8:	462b      	mov	r3, r5
 800c9ba:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c9be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c9c2:	f7f3 fbe3 	bl	800018c <__adddf3>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	49b9      	ldr	r1, [pc, #740]	@ (800ccb4 <__ieee754_pow+0x774>)
 800c9ce:	f7f3 febd 	bl	800074c <__aeabi_ddiv>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c9da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9de:	f7f3 fd8b 	bl	80004f8 <__aeabi_dmul>
 800c9e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c9e6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c9ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	46ab      	mov	fp, r5
 800c9f4:	106d      	asrs	r5, r5, #1
 800c9f6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800c9fa:	9304      	str	r3, [sp, #16]
 800c9fc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ca00:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ca04:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ca08:	4640      	mov	r0, r8
 800ca0a:	4649      	mov	r1, r9
 800ca0c:	4614      	mov	r4, r2
 800ca0e:	461d      	mov	r5, r3
 800ca10:	f7f3 fd72 	bl	80004f8 <__aeabi_dmul>
 800ca14:	4602      	mov	r2, r0
 800ca16:	460b      	mov	r3, r1
 800ca18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca1c:	f7f3 fbb4 	bl	8000188 <__aeabi_dsub>
 800ca20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ca24:	4606      	mov	r6, r0
 800ca26:	460f      	mov	r7, r1
 800ca28:	4620      	mov	r0, r4
 800ca2a:	4629      	mov	r1, r5
 800ca2c:	f7f3 fbac 	bl	8000188 <__aeabi_dsub>
 800ca30:	4602      	mov	r2, r0
 800ca32:	460b      	mov	r3, r1
 800ca34:	4650      	mov	r0, sl
 800ca36:	4659      	mov	r1, fp
 800ca38:	f7f3 fba6 	bl	8000188 <__aeabi_dsub>
 800ca3c:	4642      	mov	r2, r8
 800ca3e:	464b      	mov	r3, r9
 800ca40:	f7f3 fd5a 	bl	80004f8 <__aeabi_dmul>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	4630      	mov	r0, r6
 800ca4a:	4639      	mov	r1, r7
 800ca4c:	f7f3 fb9c 	bl	8000188 <__aeabi_dsub>
 800ca50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ca54:	f7f3 fd50 	bl	80004f8 <__aeabi_dmul>
 800ca58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca5c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca60:	4610      	mov	r0, r2
 800ca62:	4619      	mov	r1, r3
 800ca64:	f7f3 fd48 	bl	80004f8 <__aeabi_dmul>
 800ca68:	a37b      	add	r3, pc, #492	@ (adr r3, 800cc58 <__ieee754_pow+0x718>)
 800ca6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6e:	4604      	mov	r4, r0
 800ca70:	460d      	mov	r5, r1
 800ca72:	f7f3 fd41 	bl	80004f8 <__aeabi_dmul>
 800ca76:	a37a      	add	r3, pc, #488	@ (adr r3, 800cc60 <__ieee754_pow+0x720>)
 800ca78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7c:	f7f3 fb86 	bl	800018c <__adddf3>
 800ca80:	4622      	mov	r2, r4
 800ca82:	462b      	mov	r3, r5
 800ca84:	f7f3 fd38 	bl	80004f8 <__aeabi_dmul>
 800ca88:	a377      	add	r3, pc, #476	@ (adr r3, 800cc68 <__ieee754_pow+0x728>)
 800ca8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8e:	f7f3 fb7d 	bl	800018c <__adddf3>
 800ca92:	4622      	mov	r2, r4
 800ca94:	462b      	mov	r3, r5
 800ca96:	f7f3 fd2f 	bl	80004f8 <__aeabi_dmul>
 800ca9a:	a375      	add	r3, pc, #468	@ (adr r3, 800cc70 <__ieee754_pow+0x730>)
 800ca9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa0:	f7f3 fb74 	bl	800018c <__adddf3>
 800caa4:	4622      	mov	r2, r4
 800caa6:	462b      	mov	r3, r5
 800caa8:	f7f3 fd26 	bl	80004f8 <__aeabi_dmul>
 800caac:	a372      	add	r3, pc, #456	@ (adr r3, 800cc78 <__ieee754_pow+0x738>)
 800caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab2:	f7f3 fb6b 	bl	800018c <__adddf3>
 800cab6:	4622      	mov	r2, r4
 800cab8:	462b      	mov	r3, r5
 800caba:	f7f3 fd1d 	bl	80004f8 <__aeabi_dmul>
 800cabe:	a370      	add	r3, pc, #448	@ (adr r3, 800cc80 <__ieee754_pow+0x740>)
 800cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac4:	f7f3 fb62 	bl	800018c <__adddf3>
 800cac8:	4622      	mov	r2, r4
 800caca:	4606      	mov	r6, r0
 800cacc:	460f      	mov	r7, r1
 800cace:	462b      	mov	r3, r5
 800cad0:	4620      	mov	r0, r4
 800cad2:	4629      	mov	r1, r5
 800cad4:	f7f3 fd10 	bl	80004f8 <__aeabi_dmul>
 800cad8:	4602      	mov	r2, r0
 800cada:	460b      	mov	r3, r1
 800cadc:	4630      	mov	r0, r6
 800cade:	4639      	mov	r1, r7
 800cae0:	f7f3 fd0a 	bl	80004f8 <__aeabi_dmul>
 800cae4:	4604      	mov	r4, r0
 800cae6:	460d      	mov	r5, r1
 800cae8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800caec:	4642      	mov	r2, r8
 800caee:	464b      	mov	r3, r9
 800caf0:	f7f3 fb4c 	bl	800018c <__adddf3>
 800caf4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800caf8:	f7f3 fcfe 	bl	80004f8 <__aeabi_dmul>
 800cafc:	4622      	mov	r2, r4
 800cafe:	462b      	mov	r3, r5
 800cb00:	f7f3 fb44 	bl	800018c <__adddf3>
 800cb04:	4642      	mov	r2, r8
 800cb06:	4682      	mov	sl, r0
 800cb08:	468b      	mov	fp, r1
 800cb0a:	464b      	mov	r3, r9
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	4649      	mov	r1, r9
 800cb10:	f7f3 fcf2 	bl	80004f8 <__aeabi_dmul>
 800cb14:	2200      	movs	r2, #0
 800cb16:	4b68      	ldr	r3, [pc, #416]	@ (800ccb8 <__ieee754_pow+0x778>)
 800cb18:	4606      	mov	r6, r0
 800cb1a:	460f      	mov	r7, r1
 800cb1c:	f7f3 fb36 	bl	800018c <__adddf3>
 800cb20:	4652      	mov	r2, sl
 800cb22:	465b      	mov	r3, fp
 800cb24:	f7f3 fb32 	bl	800018c <__adddf3>
 800cb28:	2400      	movs	r4, #0
 800cb2a:	460d      	mov	r5, r1
 800cb2c:	4622      	mov	r2, r4
 800cb2e:	460b      	mov	r3, r1
 800cb30:	4640      	mov	r0, r8
 800cb32:	4649      	mov	r1, r9
 800cb34:	f7f3 fce0 	bl	80004f8 <__aeabi_dmul>
 800cb38:	2200      	movs	r2, #0
 800cb3a:	4680      	mov	r8, r0
 800cb3c:	4689      	mov	r9, r1
 800cb3e:	4620      	mov	r0, r4
 800cb40:	4629      	mov	r1, r5
 800cb42:	4b5d      	ldr	r3, [pc, #372]	@ (800ccb8 <__ieee754_pow+0x778>)
 800cb44:	f7f3 fb20 	bl	8000188 <__aeabi_dsub>
 800cb48:	4632      	mov	r2, r6
 800cb4a:	463b      	mov	r3, r7
 800cb4c:	f7f3 fb1c 	bl	8000188 <__aeabi_dsub>
 800cb50:	4602      	mov	r2, r0
 800cb52:	460b      	mov	r3, r1
 800cb54:	4650      	mov	r0, sl
 800cb56:	4659      	mov	r1, fp
 800cb58:	f7f3 fb16 	bl	8000188 <__aeabi_dsub>
 800cb5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cb60:	f7f3 fcca 	bl	80004f8 <__aeabi_dmul>
 800cb64:	4622      	mov	r2, r4
 800cb66:	4606      	mov	r6, r0
 800cb68:	460f      	mov	r7, r1
 800cb6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb6e:	462b      	mov	r3, r5
 800cb70:	f7f3 fcc2 	bl	80004f8 <__aeabi_dmul>
 800cb74:	4602      	mov	r2, r0
 800cb76:	460b      	mov	r3, r1
 800cb78:	4630      	mov	r0, r6
 800cb7a:	4639      	mov	r1, r7
 800cb7c:	f7f3 fb06 	bl	800018c <__adddf3>
 800cb80:	2400      	movs	r4, #0
 800cb82:	4606      	mov	r6, r0
 800cb84:	460f      	mov	r7, r1
 800cb86:	4602      	mov	r2, r0
 800cb88:	460b      	mov	r3, r1
 800cb8a:	4640      	mov	r0, r8
 800cb8c:	4649      	mov	r1, r9
 800cb8e:	f7f3 fafd 	bl	800018c <__adddf3>
 800cb92:	a33d      	add	r3, pc, #244	@ (adr r3, 800cc88 <__ieee754_pow+0x748>)
 800cb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb98:	4620      	mov	r0, r4
 800cb9a:	460d      	mov	r5, r1
 800cb9c:	f7f3 fcac 	bl	80004f8 <__aeabi_dmul>
 800cba0:	4642      	mov	r2, r8
 800cba2:	464b      	mov	r3, r9
 800cba4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cba8:	4620      	mov	r0, r4
 800cbaa:	4629      	mov	r1, r5
 800cbac:	f7f3 faec 	bl	8000188 <__aeabi_dsub>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	4639      	mov	r1, r7
 800cbb8:	f7f3 fae6 	bl	8000188 <__aeabi_dsub>
 800cbbc:	a334      	add	r3, pc, #208	@ (adr r3, 800cc90 <__ieee754_pow+0x750>)
 800cbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc2:	f7f3 fc99 	bl	80004f8 <__aeabi_dmul>
 800cbc6:	a334      	add	r3, pc, #208	@ (adr r3, 800cc98 <__ieee754_pow+0x758>)
 800cbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbcc:	4606      	mov	r6, r0
 800cbce:	460f      	mov	r7, r1
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	f7f3 fc90 	bl	80004f8 <__aeabi_dmul>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	460b      	mov	r3, r1
 800cbdc:	4630      	mov	r0, r6
 800cbde:	4639      	mov	r1, r7
 800cbe0:	f7f3 fad4 	bl	800018c <__adddf3>
 800cbe4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cbe6:	4b35      	ldr	r3, [pc, #212]	@ (800ccbc <__ieee754_pow+0x77c>)
 800cbe8:	2400      	movs	r4, #0
 800cbea:	4413      	add	r3, r2
 800cbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf0:	f7f3 facc 	bl	800018c <__adddf3>
 800cbf4:	4682      	mov	sl, r0
 800cbf6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cbf8:	468b      	mov	fp, r1
 800cbfa:	f7f3 fc13 	bl	8000424 <__aeabi_i2d>
 800cbfe:	4606      	mov	r6, r0
 800cc00:	460f      	mov	r7, r1
 800cc02:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cc04:	4b2e      	ldr	r3, [pc, #184]	@ (800ccc0 <__ieee754_pow+0x780>)
 800cc06:	4413      	add	r3, r2
 800cc08:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc0c:	4652      	mov	r2, sl
 800cc0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc12:	465b      	mov	r3, fp
 800cc14:	f7f3 faba 	bl	800018c <__adddf3>
 800cc18:	4642      	mov	r2, r8
 800cc1a:	464b      	mov	r3, r9
 800cc1c:	f7f3 fab6 	bl	800018c <__adddf3>
 800cc20:	4632      	mov	r2, r6
 800cc22:	463b      	mov	r3, r7
 800cc24:	f7f3 fab2 	bl	800018c <__adddf3>
 800cc28:	4632      	mov	r2, r6
 800cc2a:	463b      	mov	r3, r7
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	460d      	mov	r5, r1
 800cc30:	f7f3 faaa 	bl	8000188 <__aeabi_dsub>
 800cc34:	4642      	mov	r2, r8
 800cc36:	464b      	mov	r3, r9
 800cc38:	f7f3 faa6 	bl	8000188 <__aeabi_dsub>
 800cc3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc40:	f7f3 faa2 	bl	8000188 <__aeabi_dsub>
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	4650      	mov	r0, sl
 800cc4a:	4659      	mov	r1, fp
 800cc4c:	e618      	b.n	800c880 <__ieee754_pow+0x340>
 800cc4e:	2400      	movs	r4, #0
 800cc50:	e68a      	b.n	800c968 <__ieee754_pow+0x428>
 800cc52:	2601      	movs	r6, #1
 800cc54:	e6a0      	b.n	800c998 <__ieee754_pow+0x458>
 800cc56:	bf00      	nop
 800cc58:	4a454eef 	.word	0x4a454eef
 800cc5c:	3fca7e28 	.word	0x3fca7e28
 800cc60:	93c9db65 	.word	0x93c9db65
 800cc64:	3fcd864a 	.word	0x3fcd864a
 800cc68:	a91d4101 	.word	0xa91d4101
 800cc6c:	3fd17460 	.word	0x3fd17460
 800cc70:	518f264d 	.word	0x518f264d
 800cc74:	3fd55555 	.word	0x3fd55555
 800cc78:	db6fabff 	.word	0xdb6fabff
 800cc7c:	3fdb6db6 	.word	0x3fdb6db6
 800cc80:	33333303 	.word	0x33333303
 800cc84:	3fe33333 	.word	0x3fe33333
 800cc88:	e0000000 	.word	0xe0000000
 800cc8c:	3feec709 	.word	0x3feec709
 800cc90:	dc3a03fd 	.word	0xdc3a03fd
 800cc94:	3feec709 	.word	0x3feec709
 800cc98:	145b01f5 	.word	0x145b01f5
 800cc9c:	be3e2fe0 	.word	0xbe3e2fe0
 800cca0:	7ff00000 	.word	0x7ff00000
 800cca4:	43400000 	.word	0x43400000
 800cca8:	0003988e 	.word	0x0003988e
 800ccac:	000bb679 	.word	0x000bb679
 800ccb0:	0800d430 	.word	0x0800d430
 800ccb4:	3ff00000 	.word	0x3ff00000
 800ccb8:	40080000 	.word	0x40080000
 800ccbc:	0800d410 	.word	0x0800d410
 800ccc0:	0800d420 	.word	0x0800d420
 800ccc4:	a39a      	add	r3, pc, #616	@ (adr r3, 800cf30 <__ieee754_pow+0x9f0>)
 800ccc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccca:	4630      	mov	r0, r6
 800cccc:	4639      	mov	r1, r7
 800ccce:	f7f3 fa5d 	bl	800018c <__adddf3>
 800ccd2:	4642      	mov	r2, r8
 800ccd4:	e9cd 0100 	strd	r0, r1, [sp]
 800ccd8:	464b      	mov	r3, r9
 800ccda:	4620      	mov	r0, r4
 800ccdc:	4629      	mov	r1, r5
 800ccde:	f7f3 fa53 	bl	8000188 <__aeabi_dsub>
 800cce2:	4602      	mov	r2, r0
 800cce4:	460b      	mov	r3, r1
 800cce6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccea:	f7f3 fe95 	bl	8000a18 <__aeabi_dcmpgt>
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	f47f ae09 	bne.w	800c906 <__ieee754_pow+0x3c6>
 800ccf4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ccf8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ccfc:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800cd00:	fa43 fa0a 	asr.w	sl, r3, sl
 800cd04:	44da      	add	sl, fp
 800cd06:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cd0a:	489b      	ldr	r0, [pc, #620]	@ (800cf78 <__ieee754_pow+0xa38>)
 800cd0c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800cd10:	4108      	asrs	r0, r1
 800cd12:	ea00 030a 	and.w	r3, r0, sl
 800cd16:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cd1a:	f1c1 0114 	rsb	r1, r1, #20
 800cd1e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800cd22:	4640      	mov	r0, r8
 800cd24:	fa4a fa01 	asr.w	sl, sl, r1
 800cd28:	f1bb 0f00 	cmp.w	fp, #0
 800cd2c:	4649      	mov	r1, r9
 800cd2e:	f04f 0200 	mov.w	r2, #0
 800cd32:	bfb8      	it	lt
 800cd34:	f1ca 0a00 	rsblt	sl, sl, #0
 800cd38:	f7f3 fa26 	bl	8000188 <__aeabi_dsub>
 800cd3c:	4680      	mov	r8, r0
 800cd3e:	4689      	mov	r9, r1
 800cd40:	2400      	movs	r4, #0
 800cd42:	4632      	mov	r2, r6
 800cd44:	463b      	mov	r3, r7
 800cd46:	4640      	mov	r0, r8
 800cd48:	4649      	mov	r1, r9
 800cd4a:	f7f3 fa1f 	bl	800018c <__adddf3>
 800cd4e:	a37a      	add	r3, pc, #488	@ (adr r3, 800cf38 <__ieee754_pow+0x9f8>)
 800cd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd54:	4620      	mov	r0, r4
 800cd56:	460d      	mov	r5, r1
 800cd58:	f7f3 fbce 	bl	80004f8 <__aeabi_dmul>
 800cd5c:	4642      	mov	r2, r8
 800cd5e:	464b      	mov	r3, r9
 800cd60:	e9cd 0100 	strd	r0, r1, [sp]
 800cd64:	4620      	mov	r0, r4
 800cd66:	4629      	mov	r1, r5
 800cd68:	f7f3 fa0e 	bl	8000188 <__aeabi_dsub>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	460b      	mov	r3, r1
 800cd70:	4630      	mov	r0, r6
 800cd72:	4639      	mov	r1, r7
 800cd74:	f7f3 fa08 	bl	8000188 <__aeabi_dsub>
 800cd78:	a371      	add	r3, pc, #452	@ (adr r3, 800cf40 <__ieee754_pow+0xa00>)
 800cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7e:	f7f3 fbbb 	bl	80004f8 <__aeabi_dmul>
 800cd82:	a371      	add	r3, pc, #452	@ (adr r3, 800cf48 <__ieee754_pow+0xa08>)
 800cd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd88:	4680      	mov	r8, r0
 800cd8a:	4689      	mov	r9, r1
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	4629      	mov	r1, r5
 800cd90:	f7f3 fbb2 	bl	80004f8 <__aeabi_dmul>
 800cd94:	4602      	mov	r2, r0
 800cd96:	460b      	mov	r3, r1
 800cd98:	4640      	mov	r0, r8
 800cd9a:	4649      	mov	r1, r9
 800cd9c:	f7f3 f9f6 	bl	800018c <__adddf3>
 800cda0:	4604      	mov	r4, r0
 800cda2:	460d      	mov	r5, r1
 800cda4:	4602      	mov	r2, r0
 800cda6:	460b      	mov	r3, r1
 800cda8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdac:	f7f3 f9ee 	bl	800018c <__adddf3>
 800cdb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdb4:	4680      	mov	r8, r0
 800cdb6:	4689      	mov	r9, r1
 800cdb8:	f7f3 f9e6 	bl	8000188 <__aeabi_dsub>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	f7f3 f9e0 	bl	8000188 <__aeabi_dsub>
 800cdc8:	4642      	mov	r2, r8
 800cdca:	4606      	mov	r6, r0
 800cdcc:	460f      	mov	r7, r1
 800cdce:	464b      	mov	r3, r9
 800cdd0:	4640      	mov	r0, r8
 800cdd2:	4649      	mov	r1, r9
 800cdd4:	f7f3 fb90 	bl	80004f8 <__aeabi_dmul>
 800cdd8:	a35d      	add	r3, pc, #372	@ (adr r3, 800cf50 <__ieee754_pow+0xa10>)
 800cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdde:	4604      	mov	r4, r0
 800cde0:	460d      	mov	r5, r1
 800cde2:	f7f3 fb89 	bl	80004f8 <__aeabi_dmul>
 800cde6:	a35c      	add	r3, pc, #368	@ (adr r3, 800cf58 <__ieee754_pow+0xa18>)
 800cde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdec:	f7f3 f9cc 	bl	8000188 <__aeabi_dsub>
 800cdf0:	4622      	mov	r2, r4
 800cdf2:	462b      	mov	r3, r5
 800cdf4:	f7f3 fb80 	bl	80004f8 <__aeabi_dmul>
 800cdf8:	a359      	add	r3, pc, #356	@ (adr r3, 800cf60 <__ieee754_pow+0xa20>)
 800cdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfe:	f7f3 f9c5 	bl	800018c <__adddf3>
 800ce02:	4622      	mov	r2, r4
 800ce04:	462b      	mov	r3, r5
 800ce06:	f7f3 fb77 	bl	80004f8 <__aeabi_dmul>
 800ce0a:	a357      	add	r3, pc, #348	@ (adr r3, 800cf68 <__ieee754_pow+0xa28>)
 800ce0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce10:	f7f3 f9ba 	bl	8000188 <__aeabi_dsub>
 800ce14:	4622      	mov	r2, r4
 800ce16:	462b      	mov	r3, r5
 800ce18:	f7f3 fb6e 	bl	80004f8 <__aeabi_dmul>
 800ce1c:	a354      	add	r3, pc, #336	@ (adr r3, 800cf70 <__ieee754_pow+0xa30>)
 800ce1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce22:	f7f3 f9b3 	bl	800018c <__adddf3>
 800ce26:	4622      	mov	r2, r4
 800ce28:	462b      	mov	r3, r5
 800ce2a:	f7f3 fb65 	bl	80004f8 <__aeabi_dmul>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	460b      	mov	r3, r1
 800ce32:	4640      	mov	r0, r8
 800ce34:	4649      	mov	r1, r9
 800ce36:	f7f3 f9a7 	bl	8000188 <__aeabi_dsub>
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	460d      	mov	r5, r1
 800ce3e:	4602      	mov	r2, r0
 800ce40:	460b      	mov	r3, r1
 800ce42:	4640      	mov	r0, r8
 800ce44:	4649      	mov	r1, r9
 800ce46:	f7f3 fb57 	bl	80004f8 <__aeabi_dmul>
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	e9cd 0100 	strd	r0, r1, [sp]
 800ce50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ce54:	4620      	mov	r0, r4
 800ce56:	4629      	mov	r1, r5
 800ce58:	f7f3 f996 	bl	8000188 <__aeabi_dsub>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	460b      	mov	r3, r1
 800ce60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce64:	f7f3 fc72 	bl	800074c <__aeabi_ddiv>
 800ce68:	4632      	mov	r2, r6
 800ce6a:	4604      	mov	r4, r0
 800ce6c:	460d      	mov	r5, r1
 800ce6e:	463b      	mov	r3, r7
 800ce70:	4640      	mov	r0, r8
 800ce72:	4649      	mov	r1, r9
 800ce74:	f7f3 fb40 	bl	80004f8 <__aeabi_dmul>
 800ce78:	4632      	mov	r2, r6
 800ce7a:	463b      	mov	r3, r7
 800ce7c:	f7f3 f986 	bl	800018c <__adddf3>
 800ce80:	4602      	mov	r2, r0
 800ce82:	460b      	mov	r3, r1
 800ce84:	4620      	mov	r0, r4
 800ce86:	4629      	mov	r1, r5
 800ce88:	f7f3 f97e 	bl	8000188 <__aeabi_dsub>
 800ce8c:	4642      	mov	r2, r8
 800ce8e:	464b      	mov	r3, r9
 800ce90:	f7f3 f97a 	bl	8000188 <__aeabi_dsub>
 800ce94:	4602      	mov	r2, r0
 800ce96:	460b      	mov	r3, r1
 800ce98:	2000      	movs	r0, #0
 800ce9a:	4938      	ldr	r1, [pc, #224]	@ (800cf7c <__ieee754_pow+0xa3c>)
 800ce9c:	f7f3 f974 	bl	8000188 <__aeabi_dsub>
 800cea0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800cea4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800cea8:	da2e      	bge.n	800cf08 <__ieee754_pow+0x9c8>
 800ceaa:	4652      	mov	r2, sl
 800ceac:	f000 f874 	bl	800cf98 <scalbn>
 800ceb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ceb4:	f7ff bbed 	b.w	800c692 <__ieee754_pow+0x152>
 800ceb8:	4c31      	ldr	r4, [pc, #196]	@ (800cf80 <__ieee754_pow+0xa40>)
 800ceba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cebe:	42a3      	cmp	r3, r4
 800cec0:	d91a      	bls.n	800cef8 <__ieee754_pow+0x9b8>
 800cec2:	4b30      	ldr	r3, [pc, #192]	@ (800cf84 <__ieee754_pow+0xa44>)
 800cec4:	440b      	add	r3, r1
 800cec6:	4303      	orrs	r3, r0
 800cec8:	d009      	beq.n	800cede <__ieee754_pow+0x99e>
 800ceca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cece:	2200      	movs	r2, #0
 800ced0:	2300      	movs	r3, #0
 800ced2:	f7f3 fd83 	bl	80009dc <__aeabi_dcmplt>
 800ced6:	3800      	subs	r0, #0
 800ced8:	bf18      	it	ne
 800ceda:	2001      	movne	r0, #1
 800cedc:	e444      	b.n	800c768 <__ieee754_pow+0x228>
 800cede:	4642      	mov	r2, r8
 800cee0:	464b      	mov	r3, r9
 800cee2:	f7f3 f951 	bl	8000188 <__aeabi_dsub>
 800cee6:	4632      	mov	r2, r6
 800cee8:	463b      	mov	r3, r7
 800ceea:	f7f3 fd8b 	bl	8000a04 <__aeabi_dcmpge>
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d1eb      	bne.n	800ceca <__ieee754_pow+0x98a>
 800cef2:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800cf88 <__ieee754_pow+0xa48>
 800cef6:	e6fd      	b.n	800ccf4 <__ieee754_pow+0x7b4>
 800cef8:	469a      	mov	sl, r3
 800cefa:	4b24      	ldr	r3, [pc, #144]	@ (800cf8c <__ieee754_pow+0xa4c>)
 800cefc:	459a      	cmp	sl, r3
 800cefe:	f63f aef9 	bhi.w	800ccf4 <__ieee754_pow+0x7b4>
 800cf02:	f8dd a010 	ldr.w	sl, [sp, #16]
 800cf06:	e71b      	b.n	800cd40 <__ieee754_pow+0x800>
 800cf08:	4621      	mov	r1, r4
 800cf0a:	e7d1      	b.n	800ceb0 <__ieee754_pow+0x970>
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	491b      	ldr	r1, [pc, #108]	@ (800cf7c <__ieee754_pow+0xa3c>)
 800cf10:	f7ff bb34 	b.w	800c57c <__ieee754_pow+0x3c>
 800cf14:	2000      	movs	r0, #0
 800cf16:	2100      	movs	r1, #0
 800cf18:	f7ff bb30 	b.w	800c57c <__ieee754_pow+0x3c>
 800cf1c:	4650      	mov	r0, sl
 800cf1e:	4659      	mov	r1, fp
 800cf20:	f7ff bb2c 	b.w	800c57c <__ieee754_pow+0x3c>
 800cf24:	460c      	mov	r4, r1
 800cf26:	f7ff bb79 	b.w	800c61c <__ieee754_pow+0xdc>
 800cf2a:	2400      	movs	r4, #0
 800cf2c:	f7ff bb64 	b.w	800c5f8 <__ieee754_pow+0xb8>
 800cf30:	652b82fe 	.word	0x652b82fe
 800cf34:	3c971547 	.word	0x3c971547
 800cf38:	00000000 	.word	0x00000000
 800cf3c:	3fe62e43 	.word	0x3fe62e43
 800cf40:	fefa39ef 	.word	0xfefa39ef
 800cf44:	3fe62e42 	.word	0x3fe62e42
 800cf48:	0ca86c39 	.word	0x0ca86c39
 800cf4c:	be205c61 	.word	0xbe205c61
 800cf50:	72bea4d0 	.word	0x72bea4d0
 800cf54:	3e663769 	.word	0x3e663769
 800cf58:	c5d26bf1 	.word	0xc5d26bf1
 800cf5c:	3ebbbd41 	.word	0x3ebbbd41
 800cf60:	af25de2c 	.word	0xaf25de2c
 800cf64:	3f11566a 	.word	0x3f11566a
 800cf68:	16bebd93 	.word	0x16bebd93
 800cf6c:	3f66c16c 	.word	0x3f66c16c
 800cf70:	5555553e 	.word	0x5555553e
 800cf74:	3fc55555 	.word	0x3fc55555
 800cf78:	fff00000 	.word	0xfff00000
 800cf7c:	3ff00000 	.word	0x3ff00000
 800cf80:	4090cbff 	.word	0x4090cbff
 800cf84:	3f6f3400 	.word	0x3f6f3400
 800cf88:	4090cc00 	.word	0x4090cc00
 800cf8c:	3fe00000 	.word	0x3fe00000

0800cf90 <fabs>:
 800cf90:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cf94:	4619      	mov	r1, r3
 800cf96:	4770      	bx	lr

0800cf98 <scalbn>:
 800cf98:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800cf9c:	4616      	mov	r6, r2
 800cf9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cfa2:	4683      	mov	fp, r0
 800cfa4:	468c      	mov	ip, r1
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	b982      	cbnz	r2, 800cfcc <scalbn+0x34>
 800cfaa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cfae:	4303      	orrs	r3, r0
 800cfb0:	d039      	beq.n	800d026 <scalbn+0x8e>
 800cfb2:	4b2f      	ldr	r3, [pc, #188]	@ (800d070 <scalbn+0xd8>)
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f7f3 fa9f 	bl	80004f8 <__aeabi_dmul>
 800cfba:	4b2e      	ldr	r3, [pc, #184]	@ (800d074 <scalbn+0xdc>)
 800cfbc:	4683      	mov	fp, r0
 800cfbe:	429e      	cmp	r6, r3
 800cfc0:	468c      	mov	ip, r1
 800cfc2:	da0d      	bge.n	800cfe0 <scalbn+0x48>
 800cfc4:	a326      	add	r3, pc, #152	@ (adr r3, 800d060 <scalbn+0xc8>)
 800cfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfca:	e01b      	b.n	800d004 <scalbn+0x6c>
 800cfcc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800cfd0:	42ba      	cmp	r2, r7
 800cfd2:	d109      	bne.n	800cfe8 <scalbn+0x50>
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	f7f3 f8d9 	bl	800018c <__adddf3>
 800cfda:	4683      	mov	fp, r0
 800cfdc:	468c      	mov	ip, r1
 800cfde:	e022      	b.n	800d026 <scalbn+0x8e>
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cfe6:	3a36      	subs	r2, #54	@ 0x36
 800cfe8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800cfec:	428e      	cmp	r6, r1
 800cfee:	dd0c      	ble.n	800d00a <scalbn+0x72>
 800cff0:	a31d      	add	r3, pc, #116	@ (adr r3, 800d068 <scalbn+0xd0>)
 800cff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff6:	461c      	mov	r4, r3
 800cff8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800cffc:	f361 74df 	bfi	r4, r1, #31, #1
 800d000:	4621      	mov	r1, r4
 800d002:	481d      	ldr	r0, [pc, #116]	@ (800d078 <scalbn+0xe0>)
 800d004:	f7f3 fa78 	bl	80004f8 <__aeabi_dmul>
 800d008:	e7e7      	b.n	800cfda <scalbn+0x42>
 800d00a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d00e:	4432      	add	r2, r6
 800d010:	428a      	cmp	r2, r1
 800d012:	dced      	bgt.n	800cff0 <scalbn+0x58>
 800d014:	2a00      	cmp	r2, #0
 800d016:	dd0a      	ble.n	800d02e <scalbn+0x96>
 800d018:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d01c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d020:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d024:	46ac      	mov	ip, r5
 800d026:	4658      	mov	r0, fp
 800d028:	4661      	mov	r1, ip
 800d02a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800d02e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d032:	da09      	bge.n	800d048 <scalbn+0xb0>
 800d034:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800d038:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800d03c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800d040:	480e      	ldr	r0, [pc, #56]	@ (800d07c <scalbn+0xe4>)
 800d042:	f041 011f 	orr.w	r1, r1, #31
 800d046:	e7bd      	b.n	800cfc4 <scalbn+0x2c>
 800d048:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d04c:	3236      	adds	r2, #54	@ 0x36
 800d04e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d052:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d056:	4658      	mov	r0, fp
 800d058:	4629      	mov	r1, r5
 800d05a:	2200      	movs	r2, #0
 800d05c:	4b08      	ldr	r3, [pc, #32]	@ (800d080 <scalbn+0xe8>)
 800d05e:	e7d1      	b.n	800d004 <scalbn+0x6c>
 800d060:	c2f8f359 	.word	0xc2f8f359
 800d064:	01a56e1f 	.word	0x01a56e1f
 800d068:	8800759c 	.word	0x8800759c
 800d06c:	7e37e43c 	.word	0x7e37e43c
 800d070:	43500000 	.word	0x43500000
 800d074:	ffff3cb0 	.word	0xffff3cb0
 800d078:	8800759c 	.word	0x8800759c
 800d07c:	c2f8f359 	.word	0xc2f8f359
 800d080:	3c900000 	.word	0x3c900000

0800d084 <with_errno>:
 800d084:	b570      	push	{r4, r5, r6, lr}
 800d086:	4604      	mov	r4, r0
 800d088:	460d      	mov	r5, r1
 800d08a:	4616      	mov	r6, r2
 800d08c:	f7fe fc00 	bl	800b890 <__errno>
 800d090:	4629      	mov	r1, r5
 800d092:	6006      	str	r6, [r0, #0]
 800d094:	4620      	mov	r0, r4
 800d096:	bd70      	pop	{r4, r5, r6, pc}

0800d098 <xflow>:
 800d098:	b513      	push	{r0, r1, r4, lr}
 800d09a:	4604      	mov	r4, r0
 800d09c:	4619      	mov	r1, r3
 800d09e:	4610      	mov	r0, r2
 800d0a0:	b10c      	cbz	r4, 800d0a6 <xflow+0xe>
 800d0a2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d0a6:	e9cd 2300 	strd	r2, r3, [sp]
 800d0aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0ae:	f7f3 fa23 	bl	80004f8 <__aeabi_dmul>
 800d0b2:	2222      	movs	r2, #34	@ 0x22
 800d0b4:	b002      	add	sp, #8
 800d0b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0ba:	f7ff bfe3 	b.w	800d084 <with_errno>

0800d0be <__math_uflow>:
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d0c4:	f7ff bfe8 	b.w	800d098 <xflow>

0800d0c8 <__math_oflow>:
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800d0ce:	f7ff bfe3 	b.w	800d098 <xflow>
	...

0800d0d4 <__ieee754_sqrt>:
 800d0d4:	4a67      	ldr	r2, [pc, #412]	@ (800d274 <__ieee754_sqrt+0x1a0>)
 800d0d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0da:	438a      	bics	r2, r1
 800d0dc:	4606      	mov	r6, r0
 800d0de:	460f      	mov	r7, r1
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	d10e      	bne.n	800d104 <__ieee754_sqrt+0x30>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	f7f3 fa06 	bl	80004f8 <__aeabi_dmul>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	4639      	mov	r1, r7
 800d0f4:	f7f3 f84a 	bl	800018c <__adddf3>
 800d0f8:	4606      	mov	r6, r0
 800d0fa:	460f      	mov	r7, r1
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	4639      	mov	r1, r7
 800d100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d104:	2900      	cmp	r1, #0
 800d106:	dc0c      	bgt.n	800d122 <__ieee754_sqrt+0x4e>
 800d108:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800d10c:	4302      	orrs	r2, r0
 800d10e:	d0f5      	beq.n	800d0fc <__ieee754_sqrt+0x28>
 800d110:	b189      	cbz	r1, 800d136 <__ieee754_sqrt+0x62>
 800d112:	4602      	mov	r2, r0
 800d114:	f7f3 f838 	bl	8000188 <__aeabi_dsub>
 800d118:	4602      	mov	r2, r0
 800d11a:	460b      	mov	r3, r1
 800d11c:	f7f3 fb16 	bl	800074c <__aeabi_ddiv>
 800d120:	e7ea      	b.n	800d0f8 <__ieee754_sqrt+0x24>
 800d122:	150a      	asrs	r2, r1, #20
 800d124:	d115      	bne.n	800d152 <__ieee754_sqrt+0x7e>
 800d126:	2100      	movs	r1, #0
 800d128:	e009      	b.n	800d13e <__ieee754_sqrt+0x6a>
 800d12a:	0ae3      	lsrs	r3, r4, #11
 800d12c:	3a15      	subs	r2, #21
 800d12e:	0564      	lsls	r4, r4, #21
 800d130:	2b00      	cmp	r3, #0
 800d132:	d0fa      	beq.n	800d12a <__ieee754_sqrt+0x56>
 800d134:	e7f7      	b.n	800d126 <__ieee754_sqrt+0x52>
 800d136:	460a      	mov	r2, r1
 800d138:	e7fa      	b.n	800d130 <__ieee754_sqrt+0x5c>
 800d13a:	005b      	lsls	r3, r3, #1
 800d13c:	3101      	adds	r1, #1
 800d13e:	02d8      	lsls	r0, r3, #11
 800d140:	d5fb      	bpl.n	800d13a <__ieee754_sqrt+0x66>
 800d142:	1e48      	subs	r0, r1, #1
 800d144:	1a12      	subs	r2, r2, r0
 800d146:	f1c1 0020 	rsb	r0, r1, #32
 800d14a:	fa24 f000 	lsr.w	r0, r4, r0
 800d14e:	4303      	orrs	r3, r0
 800d150:	408c      	lsls	r4, r1
 800d152:	2600      	movs	r6, #0
 800d154:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800d158:	2116      	movs	r1, #22
 800d15a:	07d2      	lsls	r2, r2, #31
 800d15c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d160:	4632      	mov	r2, r6
 800d162:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d16a:	bf5c      	itt	pl
 800d16c:	005b      	lslpl	r3, r3, #1
 800d16e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800d172:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d176:	bf58      	it	pl
 800d178:	0064      	lslpl	r4, r4, #1
 800d17a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d17e:	107f      	asrs	r7, r7, #1
 800d180:	0064      	lsls	r4, r4, #1
 800d182:	1815      	adds	r5, r2, r0
 800d184:	429d      	cmp	r5, r3
 800d186:	bfde      	ittt	le
 800d188:	182a      	addle	r2, r5, r0
 800d18a:	1b5b      	suble	r3, r3, r5
 800d18c:	1836      	addle	r6, r6, r0
 800d18e:	0fe5      	lsrs	r5, r4, #31
 800d190:	3901      	subs	r1, #1
 800d192:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800d196:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d19a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800d19e:	d1f0      	bne.n	800d182 <__ieee754_sqrt+0xae>
 800d1a0:	460d      	mov	r5, r1
 800d1a2:	f04f 0a20 	mov.w	sl, #32
 800d1a6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	eb01 0c00 	add.w	ip, r1, r0
 800d1b0:	db02      	blt.n	800d1b8 <__ieee754_sqrt+0xe4>
 800d1b2:	d113      	bne.n	800d1dc <__ieee754_sqrt+0x108>
 800d1b4:	45a4      	cmp	ip, r4
 800d1b6:	d811      	bhi.n	800d1dc <__ieee754_sqrt+0x108>
 800d1b8:	f1bc 0f00 	cmp.w	ip, #0
 800d1bc:	eb0c 0100 	add.w	r1, ip, r0
 800d1c0:	da42      	bge.n	800d248 <__ieee754_sqrt+0x174>
 800d1c2:	2900      	cmp	r1, #0
 800d1c4:	db40      	blt.n	800d248 <__ieee754_sqrt+0x174>
 800d1c6:	f102 0e01 	add.w	lr, r2, #1
 800d1ca:	1a9b      	subs	r3, r3, r2
 800d1cc:	4672      	mov	r2, lr
 800d1ce:	45a4      	cmp	ip, r4
 800d1d0:	bf88      	it	hi
 800d1d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d1d6:	eba4 040c 	sub.w	r4, r4, ip
 800d1da:	4405      	add	r5, r0
 800d1dc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800d1e0:	f1ba 0a01 	subs.w	sl, sl, #1
 800d1e4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800d1e8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d1ec:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800d1f0:	d1db      	bne.n	800d1aa <__ieee754_sqrt+0xd6>
 800d1f2:	431c      	orrs	r4, r3
 800d1f4:	d01a      	beq.n	800d22c <__ieee754_sqrt+0x158>
 800d1f6:	4c20      	ldr	r4, [pc, #128]	@ (800d278 <__ieee754_sqrt+0x1a4>)
 800d1f8:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800d27c <__ieee754_sqrt+0x1a8>
 800d1fc:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d200:	e9db 2300 	ldrd	r2, r3, [fp]
 800d204:	f7f2 ffc0 	bl	8000188 <__aeabi_dsub>
 800d208:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d20c:	4602      	mov	r2, r0
 800d20e:	460b      	mov	r3, r1
 800d210:	4640      	mov	r0, r8
 800d212:	4649      	mov	r1, r9
 800d214:	f7f3 fbec 	bl	80009f0 <__aeabi_dcmple>
 800d218:	b140      	cbz	r0, 800d22c <__ieee754_sqrt+0x158>
 800d21a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d21e:	e9db 2300 	ldrd	r2, r3, [fp]
 800d222:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d226:	d111      	bne.n	800d24c <__ieee754_sqrt+0x178>
 800d228:	4655      	mov	r5, sl
 800d22a:	3601      	adds	r6, #1
 800d22c:	1072      	asrs	r2, r6, #1
 800d22e:	086b      	lsrs	r3, r5, #1
 800d230:	07f1      	lsls	r1, r6, #31
 800d232:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d236:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d23a:	bf48      	it	mi
 800d23c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d240:	4618      	mov	r0, r3
 800d242:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800d246:	e757      	b.n	800d0f8 <__ieee754_sqrt+0x24>
 800d248:	4696      	mov	lr, r2
 800d24a:	e7be      	b.n	800d1ca <__ieee754_sqrt+0xf6>
 800d24c:	f7f2 ff9e 	bl	800018c <__adddf3>
 800d250:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d254:	4602      	mov	r2, r0
 800d256:	460b      	mov	r3, r1
 800d258:	4640      	mov	r0, r8
 800d25a:	4649      	mov	r1, r9
 800d25c:	f7f3 fbbe 	bl	80009dc <__aeabi_dcmplt>
 800d260:	b120      	cbz	r0, 800d26c <__ieee754_sqrt+0x198>
 800d262:	1ca8      	adds	r0, r5, #2
 800d264:	bf08      	it	eq
 800d266:	3601      	addeq	r6, #1
 800d268:	3502      	adds	r5, #2
 800d26a:	e7df      	b.n	800d22c <__ieee754_sqrt+0x158>
 800d26c:	1c6b      	adds	r3, r5, #1
 800d26e:	f023 0501 	bic.w	r5, r3, #1
 800d272:	e7db      	b.n	800d22c <__ieee754_sqrt+0x158>
 800d274:	7ff00000 	.word	0x7ff00000
 800d278:	20000128 	.word	0x20000128
 800d27c:	20000120 	.word	0x20000120

0800d280 <_init>:
 800d280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d282:	bf00      	nop
 800d284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d286:	bc08      	pop	{r3}
 800d288:	469e      	mov	lr, r3
 800d28a:	4770      	bx	lr

0800d28c <_fini>:
 800d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28e:	bf00      	nop
 800d290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d292:	bc08      	pop	{r3}
 800d294:	469e      	mov	lr, r3
 800d296:	4770      	bx	lr
