
EnviroSense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096f8  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08009838  08009838  0000a838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009920  08009920  0000b130  2**0
                  CONTENTS
  4 .ARM          00000008  08009920  08009920  0000a920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009928  08009928  0000b130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009928  08009928  0000a928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800992c  0800992c  0000a92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  08009930  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000130  08009a60  0000b130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08009a60  0000b590  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b130  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014de2  00000000  00000000  0000b159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa7  00000000  00000000  0001ff3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00022ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe4  00000000  00000000  000243a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018309  00000000  00000000  0002538c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001507e  00000000  00000000  0003d695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f37e  00000000  00000000  00052713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1a91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006694  00000000  00000000  000e1ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e8168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000130 	.word	0x20000130
 800015c:	00000000 	.word	0x00000000
 8000160:	08009820 	.word	0x08009820

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000134 	.word	0x20000134
 800017c:	08009820 	.word	0x08009820

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	@ 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_fmul>:
 8000d64:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d72:	ea92 0f0c 	teqne	r2, ip
 8000d76:	ea93 0f0c 	teqne	r3, ip
 8000d7a:	d06f      	beq.n	8000e5c <__aeabi_fmul+0xf8>
 8000d7c:	441a      	add	r2, r3
 8000d7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d82:	0240      	lsls	r0, r0, #9
 8000d84:	bf18      	it	ne
 8000d86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8a:	d01e      	beq.n	8000dca <__aeabi_fmul+0x66>
 8000d8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d98:	fba0 3101 	umull	r3, r1, r0, r1
 8000d9c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000da0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000da4:	bf3e      	ittt	cc
 8000da6:	0049      	lslcc	r1, r1, #1
 8000da8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	ea40 0001 	orr.w	r0, r0, r1
 8000db2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000db6:	2afd      	cmp	r2, #253	@ 0xfd
 8000db8:	d81d      	bhi.n	8000df6 <__aeabi_fmul+0x92>
 8000dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc2:	bf08      	it	eq
 8000dc4:	f020 0001 	biceq.w	r0, r0, #1
 8000dc8:	4770      	bx	lr
 8000dca:	f090 0f00 	teq	r0, #0
 8000dce:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dd2:	bf08      	it	eq
 8000dd4:	0249      	lsleq	r1, r1, #9
 8000dd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dde:	3a7f      	subs	r2, #127	@ 0x7f
 8000de0:	bfc2      	ittt	gt
 8000de2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000de6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dea:	4770      	bxgt	lr
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	3a01      	subs	r2, #1
 8000df6:	dc5d      	bgt.n	8000eb4 <__aeabi_fmul+0x150>
 8000df8:	f112 0f19 	cmn.w	r2, #25
 8000dfc:	bfdc      	itt	le
 8000dfe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e02:	4770      	bxle	lr
 8000e04:	f1c2 0200 	rsb	r2, r2, #0
 8000e08:	0041      	lsls	r1, r0, #1
 8000e0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e0e:	f1c2 0220 	rsb	r2, r2, #32
 8000e12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1a:	f140 0000 	adc.w	r0, r0, #0
 8000e1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e22:	bf08      	it	eq
 8000e24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e28:	4770      	bx	lr
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xce>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xe6>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e78f      	b.n	8000d7c <__aeabi_fmul+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	bf18      	it	ne
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d00a      	beq.n	8000e82 <__aeabi_fmul+0x11e>
 8000e6c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e70:	bf18      	it	ne
 8000e72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e76:	d1d8      	bne.n	8000e2a <__aeabi_fmul+0xc6>
 8000e78:	ea80 0001 	eor.w	r0, r0, r1
 8000e7c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	bf17      	itett	ne
 8000e88:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e8c:	4608      	moveq	r0, r1
 8000e8e:	f091 0f00 	teqne	r1, #0
 8000e92:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e96:	d014      	beq.n	8000ec2 <__aeabi_fmul+0x15e>
 8000e98:	ea92 0f0c 	teq	r2, ip
 8000e9c:	d101      	bne.n	8000ea2 <__aeabi_fmul+0x13e>
 8000e9e:	0242      	lsls	r2, r0, #9
 8000ea0:	d10f      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000ea2:	ea93 0f0c 	teq	r3, ip
 8000ea6:	d103      	bne.n	8000eb0 <__aeabi_fmul+0x14c>
 8000ea8:	024b      	lsls	r3, r1, #9
 8000eaa:	bf18      	it	ne
 8000eac:	4608      	movne	r0, r1
 8000eae:	d108      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000eb0:	ea80 0001 	eor.w	r0, r0, r1
 8000eb4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ebc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ec0:	4770      	bx	lr
 8000ec2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ec6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eca:	4770      	bx	lr

08000ecc <__aeabi_fdiv>:
 8000ecc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ed0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed4:	bf1e      	ittt	ne
 8000ed6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eda:	ea92 0f0c 	teqne	r2, ip
 8000ede:	ea93 0f0c 	teqne	r3, ip
 8000ee2:	d069      	beq.n	8000fb8 <__aeabi_fdiv+0xec>
 8000ee4:	eba2 0203 	sub.w	r2, r2, r3
 8000ee8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eec:	0249      	lsls	r1, r1, #9
 8000eee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef2:	d037      	beq.n	8000f64 <__aeabi_fdiv+0x98>
 8000ef4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ef8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000efc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f00:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f04:	428b      	cmp	r3, r1
 8000f06:	bf38      	it	cc
 8000f08:	005b      	lslcc	r3, r3, #1
 8000f0a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f0e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f12:	428b      	cmp	r3, r1
 8000f14:	bf24      	itt	cs
 8000f16:	1a5b      	subcs	r3, r3, r1
 8000f18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f2e:	bf24      	itt	cs
 8000f30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	bf18      	it	ne
 8000f4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f4e:	d1e0      	bne.n	8000f12 <__aeabi_fdiv+0x46>
 8000f50:	2afd      	cmp	r2, #253	@ 0xfd
 8000f52:	f63f af50 	bhi.w	8000df6 <__aeabi_fmul+0x92>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f5c:	bf08      	it	eq
 8000f5e:	f020 0001 	biceq.w	r0, r0, #1
 8000f62:	4770      	bx	lr
 8000f64:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f6c:	327f      	adds	r2, #127	@ 0x7f
 8000f6e:	bfc2      	ittt	gt
 8000f70:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f78:	4770      	bxgt	lr
 8000f7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	3a01      	subs	r2, #1
 8000f84:	e737      	b.n	8000df6 <__aeabi_fmul+0x92>
 8000f86:	f092 0f00 	teq	r2, #0
 8000f8a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0040      	lsleq	r0, r0, #1
 8000f92:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f96:	3a01      	subeq	r2, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xc2>
 8000f9a:	ea40 000c 	orr.w	r0, r0, ip
 8000f9e:	f093 0f00 	teq	r3, #0
 8000fa2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0049      	lsleq	r1, r1, #1
 8000faa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fae:	3b01      	subeq	r3, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xda>
 8000fb2:	ea41 010c 	orr.w	r1, r1, ip
 8000fb6:	e795      	b.n	8000ee4 <__aeabi_fdiv+0x18>
 8000fb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fbc:	ea92 0f0c 	teq	r2, ip
 8000fc0:	d108      	bne.n	8000fd4 <__aeabi_fdiv+0x108>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	f47f af7d 	bne.w	8000ec2 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	f47f af70 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e776      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fd4:	ea93 0f0c 	teq	r3, ip
 8000fd8:	d104      	bne.n	8000fe4 <__aeabi_fdiv+0x118>
 8000fda:	024b      	lsls	r3, r1, #9
 8000fdc:	f43f af4c 	beq.w	8000e78 <__aeabi_fmul+0x114>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e76e      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fe4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fe8:	bf18      	it	ne
 8000fea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fee:	d1ca      	bne.n	8000f86 <__aeabi_fdiv+0xba>
 8000ff0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ff4:	f47f af5c 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000ff8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ffc:	f47f af3c 	bne.w	8000e78 <__aeabi_fmul+0x114>
 8001000:	e75f      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8001002:	bf00      	nop

08001004 <__gesf2>:
 8001004:	f04f 3cff 	mov.w	ip, #4294967295
 8001008:	e006      	b.n	8001018 <__cmpsf2+0x4>
 800100a:	bf00      	nop

0800100c <__lesf2>:
 800100c:	f04f 0c01 	mov.w	ip, #1
 8001010:	e002      	b.n	8001018 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__cmpsf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	f84d cd04 	str.w	ip, [sp, #-4]!
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	bf18      	it	ne
 800102a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800102e:	d011      	beq.n	8001054 <__cmpsf2+0x40>
 8001030:	b001      	add	sp, #4
 8001032:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001036:	bf18      	it	ne
 8001038:	ea90 0f01 	teqne	r0, r1
 800103c:	bf58      	it	pl
 800103e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001042:	bf88      	it	hi
 8001044:	17c8      	asrhi	r0, r1, #31
 8001046:	bf38      	it	cc
 8001048:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800104c:	bf18      	it	ne
 800104e:	f040 0001 	orrne.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001058:	d102      	bne.n	8001060 <__cmpsf2+0x4c>
 800105a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800105e:	d105      	bne.n	800106c <__cmpsf2+0x58>
 8001060:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001064:	d1e4      	bne.n	8001030 <__cmpsf2+0x1c>
 8001066:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106a:	d0e1      	beq.n	8001030 <__cmpsf2+0x1c>
 800106c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <__aeabi_cfrcmple>:
 8001074:	4684      	mov	ip, r0
 8001076:	4608      	mov	r0, r1
 8001078:	4661      	mov	r1, ip
 800107a:	e7ff      	b.n	800107c <__aeabi_cfcmpeq>

0800107c <__aeabi_cfcmpeq>:
 800107c:	b50f      	push	{r0, r1, r2, r3, lr}
 800107e:	f7ff ffc9 	bl	8001014 <__cmpsf2>
 8001082:	2800      	cmp	r0, #0
 8001084:	bf48      	it	mi
 8001086:	f110 0f00 	cmnmi.w	r0, #0
 800108a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800108c <__aeabi_fcmpeq>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff fff4 	bl	800107c <__aeabi_cfcmpeq>
 8001094:	bf0c      	ite	eq
 8001096:	2001      	moveq	r0, #1
 8001098:	2000      	movne	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmplt>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffea 	bl	800107c <__aeabi_cfcmpeq>
 80010a8:	bf34      	ite	cc
 80010aa:	2001      	movcc	r0, #1
 80010ac:	2000      	movcs	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmple>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffe0 	bl	800107c <__aeabi_cfcmpeq>
 80010bc:	bf94      	ite	ls
 80010be:	2001      	movls	r0, #1
 80010c0:	2000      	movhi	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_fcmpge>:
 80010c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010cc:	f7ff ffd2 	bl	8001074 <__aeabi_cfrcmple>
 80010d0:	bf94      	ite	ls
 80010d2:	2001      	movls	r0, #1
 80010d4:	2000      	movhi	r0, #0
 80010d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010da:	bf00      	nop

080010dc <__aeabi_fcmpgt>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff ffc8 	bl	8001074 <__aeabi_cfrcmple>
 80010e4:	bf34      	ite	cc
 80010e6:	2001      	movcc	r0, #1
 80010e8:	2000      	movcs	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_f2iz>:
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010f8:	d30f      	bcc.n	800111a <__aeabi_f2iz+0x2a>
 80010fa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001102:	d90d      	bls.n	8001120 <__aeabi_f2iz+0x30>
 8001104:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001108:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800110c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001110:	fa23 f002 	lsr.w	r0, r3, r2
 8001114:	bf18      	it	ne
 8001116:	4240      	negne	r0, r0
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr
 8001120:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001124:	d101      	bne.n	800112a <__aeabi_f2iz+0x3a>
 8001126:	0242      	lsls	r2, r0, #9
 8001128:	d105      	bne.n	8001136 <__aeabi_f2iz+0x46>
 800112a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800112e:	bf08      	it	eq
 8001130:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr

0800113c <__aeabi_uldivmod>:
 800113c:	b953      	cbnz	r3, 8001154 <__aeabi_uldivmod+0x18>
 800113e:	b94a      	cbnz	r2, 8001154 <__aeabi_uldivmod+0x18>
 8001140:	2900      	cmp	r1, #0
 8001142:	bf08      	it	eq
 8001144:	2800      	cmpeq	r0, #0
 8001146:	bf1c      	itt	ne
 8001148:	f04f 31ff 	movne.w	r1, #4294967295
 800114c:	f04f 30ff 	movne.w	r0, #4294967295
 8001150:	f000 b968 	b.w	8001424 <__aeabi_idiv0>
 8001154:	f1ad 0c08 	sub.w	ip, sp, #8
 8001158:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800115c:	f000 f806 	bl	800116c <__udivmoddi4>
 8001160:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001168:	b004      	add	sp, #16
 800116a:	4770      	bx	lr

0800116c <__udivmoddi4>:
 800116c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001170:	9d08      	ldr	r5, [sp, #32]
 8001172:	460c      	mov	r4, r1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d14e      	bne.n	8001216 <__udivmoddi4+0xaa>
 8001178:	4694      	mov	ip, r2
 800117a:	458c      	cmp	ip, r1
 800117c:	4686      	mov	lr, r0
 800117e:	fab2 f282 	clz	r2, r2
 8001182:	d962      	bls.n	800124a <__udivmoddi4+0xde>
 8001184:	b14a      	cbz	r2, 800119a <__udivmoddi4+0x2e>
 8001186:	f1c2 0320 	rsb	r3, r2, #32
 800118a:	4091      	lsls	r1, r2
 800118c:	fa20 f303 	lsr.w	r3, r0, r3
 8001190:	fa0c fc02 	lsl.w	ip, ip, r2
 8001194:	4319      	orrs	r1, r3
 8001196:	fa00 fe02 	lsl.w	lr, r0, r2
 800119a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800119e:	fbb1 f4f7 	udiv	r4, r1, r7
 80011a2:	fb07 1114 	mls	r1, r7, r4, r1
 80011a6:	fa1f f68c 	uxth.w	r6, ip
 80011aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011b2:	fb04 f106 	mul.w	r1, r4, r6
 80011b6:	4299      	cmp	r1, r3
 80011b8:	d90a      	bls.n	80011d0 <__udivmoddi4+0x64>
 80011ba:	eb1c 0303 	adds.w	r3, ip, r3
 80011be:	f104 30ff 	add.w	r0, r4, #4294967295
 80011c2:	f080 8110 	bcs.w	80013e6 <__udivmoddi4+0x27a>
 80011c6:	4299      	cmp	r1, r3
 80011c8:	f240 810d 	bls.w	80013e6 <__udivmoddi4+0x27a>
 80011cc:	3c02      	subs	r4, #2
 80011ce:	4463      	add	r3, ip
 80011d0:	1a59      	subs	r1, r3, r1
 80011d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80011d6:	fb07 1110 	mls	r1, r7, r0, r1
 80011da:	fb00 f606 	mul.w	r6, r0, r6
 80011de:	fa1f f38e 	uxth.w	r3, lr
 80011e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011e6:	429e      	cmp	r6, r3
 80011e8:	d90a      	bls.n	8001200 <__udivmoddi4+0x94>
 80011ea:	eb1c 0303 	adds.w	r3, ip, r3
 80011ee:	f100 31ff 	add.w	r1, r0, #4294967295
 80011f2:	f080 80fa 	bcs.w	80013ea <__udivmoddi4+0x27e>
 80011f6:	429e      	cmp	r6, r3
 80011f8:	f240 80f7 	bls.w	80013ea <__udivmoddi4+0x27e>
 80011fc:	4463      	add	r3, ip
 80011fe:	3802      	subs	r0, #2
 8001200:	2100      	movs	r1, #0
 8001202:	1b9b      	subs	r3, r3, r6
 8001204:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001208:	b11d      	cbz	r5, 8001212 <__udivmoddi4+0xa6>
 800120a:	40d3      	lsrs	r3, r2
 800120c:	2200      	movs	r2, #0
 800120e:	e9c5 3200 	strd	r3, r2, [r5]
 8001212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001216:	428b      	cmp	r3, r1
 8001218:	d905      	bls.n	8001226 <__udivmoddi4+0xba>
 800121a:	b10d      	cbz	r5, 8001220 <__udivmoddi4+0xb4>
 800121c:	e9c5 0100 	strd	r0, r1, [r5]
 8001220:	2100      	movs	r1, #0
 8001222:	4608      	mov	r0, r1
 8001224:	e7f5      	b.n	8001212 <__udivmoddi4+0xa6>
 8001226:	fab3 f183 	clz	r1, r3
 800122a:	2900      	cmp	r1, #0
 800122c:	d146      	bne.n	80012bc <__udivmoddi4+0x150>
 800122e:	42a3      	cmp	r3, r4
 8001230:	d302      	bcc.n	8001238 <__udivmoddi4+0xcc>
 8001232:	4290      	cmp	r0, r2
 8001234:	f0c0 80ee 	bcc.w	8001414 <__udivmoddi4+0x2a8>
 8001238:	1a86      	subs	r6, r0, r2
 800123a:	eb64 0303 	sbc.w	r3, r4, r3
 800123e:	2001      	movs	r0, #1
 8001240:	2d00      	cmp	r5, #0
 8001242:	d0e6      	beq.n	8001212 <__udivmoddi4+0xa6>
 8001244:	e9c5 6300 	strd	r6, r3, [r5]
 8001248:	e7e3      	b.n	8001212 <__udivmoddi4+0xa6>
 800124a:	2a00      	cmp	r2, #0
 800124c:	f040 808f 	bne.w	800136e <__udivmoddi4+0x202>
 8001250:	eba1 040c 	sub.w	r4, r1, ip
 8001254:	2101      	movs	r1, #1
 8001256:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800125a:	fa1f f78c 	uxth.w	r7, ip
 800125e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001262:	fb08 4416 	mls	r4, r8, r6, r4
 8001266:	fb07 f006 	mul.w	r0, r7, r6
 800126a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800126e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001272:	4298      	cmp	r0, r3
 8001274:	d908      	bls.n	8001288 <__udivmoddi4+0x11c>
 8001276:	eb1c 0303 	adds.w	r3, ip, r3
 800127a:	f106 34ff 	add.w	r4, r6, #4294967295
 800127e:	d202      	bcs.n	8001286 <__udivmoddi4+0x11a>
 8001280:	4298      	cmp	r0, r3
 8001282:	f200 80cb 	bhi.w	800141c <__udivmoddi4+0x2b0>
 8001286:	4626      	mov	r6, r4
 8001288:	1a1c      	subs	r4, r3, r0
 800128a:	fbb4 f0f8 	udiv	r0, r4, r8
 800128e:	fb08 4410 	mls	r4, r8, r0, r4
 8001292:	fb00 f707 	mul.w	r7, r0, r7
 8001296:	fa1f f38e 	uxth.w	r3, lr
 800129a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800129e:	429f      	cmp	r7, r3
 80012a0:	d908      	bls.n	80012b4 <__udivmoddi4+0x148>
 80012a2:	eb1c 0303 	adds.w	r3, ip, r3
 80012a6:	f100 34ff 	add.w	r4, r0, #4294967295
 80012aa:	d202      	bcs.n	80012b2 <__udivmoddi4+0x146>
 80012ac:	429f      	cmp	r7, r3
 80012ae:	f200 80ae 	bhi.w	800140e <__udivmoddi4+0x2a2>
 80012b2:	4620      	mov	r0, r4
 80012b4:	1bdb      	subs	r3, r3, r7
 80012b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012ba:	e7a5      	b.n	8001208 <__udivmoddi4+0x9c>
 80012bc:	f1c1 0720 	rsb	r7, r1, #32
 80012c0:	408b      	lsls	r3, r1
 80012c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80012c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80012ca:	fa24 f607 	lsr.w	r6, r4, r7
 80012ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012d2:	fbb6 f8f9 	udiv	r8, r6, r9
 80012d6:	fa1f fe8c 	uxth.w	lr, ip
 80012da:	fb09 6618 	mls	r6, r9, r8, r6
 80012de:	fa20 f307 	lsr.w	r3, r0, r7
 80012e2:	408c      	lsls	r4, r1
 80012e4:	fa00 fa01 	lsl.w	sl, r0, r1
 80012e8:	fb08 f00e 	mul.w	r0, r8, lr
 80012ec:	431c      	orrs	r4, r3
 80012ee:	0c23      	lsrs	r3, r4, #16
 80012f0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80012f4:	4298      	cmp	r0, r3
 80012f6:	fa02 f201 	lsl.w	r2, r2, r1
 80012fa:	d90a      	bls.n	8001312 <__udivmoddi4+0x1a6>
 80012fc:	eb1c 0303 	adds.w	r3, ip, r3
 8001300:	f108 36ff 	add.w	r6, r8, #4294967295
 8001304:	f080 8081 	bcs.w	800140a <__udivmoddi4+0x29e>
 8001308:	4298      	cmp	r0, r3
 800130a:	d97e      	bls.n	800140a <__udivmoddi4+0x29e>
 800130c:	f1a8 0802 	sub.w	r8, r8, #2
 8001310:	4463      	add	r3, ip
 8001312:	1a1e      	subs	r6, r3, r0
 8001314:	fbb6 f3f9 	udiv	r3, r6, r9
 8001318:	fb09 6613 	mls	r6, r9, r3, r6
 800131c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001320:	b2a4      	uxth	r4, r4
 8001322:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001326:	45a6      	cmp	lr, r4
 8001328:	d908      	bls.n	800133c <__udivmoddi4+0x1d0>
 800132a:	eb1c 0404 	adds.w	r4, ip, r4
 800132e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001332:	d266      	bcs.n	8001402 <__udivmoddi4+0x296>
 8001334:	45a6      	cmp	lr, r4
 8001336:	d964      	bls.n	8001402 <__udivmoddi4+0x296>
 8001338:	3b02      	subs	r3, #2
 800133a:	4464      	add	r4, ip
 800133c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001340:	fba0 8302 	umull	r8, r3, r0, r2
 8001344:	eba4 040e 	sub.w	r4, r4, lr
 8001348:	429c      	cmp	r4, r3
 800134a:	46c6      	mov	lr, r8
 800134c:	461e      	mov	r6, r3
 800134e:	d350      	bcc.n	80013f2 <__udivmoddi4+0x286>
 8001350:	d04d      	beq.n	80013ee <__udivmoddi4+0x282>
 8001352:	b155      	cbz	r5, 800136a <__udivmoddi4+0x1fe>
 8001354:	ebba 030e 	subs.w	r3, sl, lr
 8001358:	eb64 0406 	sbc.w	r4, r4, r6
 800135c:	fa04 f707 	lsl.w	r7, r4, r7
 8001360:	40cb      	lsrs	r3, r1
 8001362:	431f      	orrs	r7, r3
 8001364:	40cc      	lsrs	r4, r1
 8001366:	e9c5 7400 	strd	r7, r4, [r5]
 800136a:	2100      	movs	r1, #0
 800136c:	e751      	b.n	8001212 <__udivmoddi4+0xa6>
 800136e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001372:	f1c2 0320 	rsb	r3, r2, #32
 8001376:	40d9      	lsrs	r1, r3
 8001378:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800137c:	fa20 f303 	lsr.w	r3, r0, r3
 8001380:	fa00 fe02 	lsl.w	lr, r0, r2
 8001384:	fbb1 f0f8 	udiv	r0, r1, r8
 8001388:	fb08 1110 	mls	r1, r8, r0, r1
 800138c:	4094      	lsls	r4, r2
 800138e:	431c      	orrs	r4, r3
 8001390:	fa1f f78c 	uxth.w	r7, ip
 8001394:	0c23      	lsrs	r3, r4, #16
 8001396:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800139a:	fb00 f107 	mul.w	r1, r0, r7
 800139e:	4299      	cmp	r1, r3
 80013a0:	d908      	bls.n	80013b4 <__udivmoddi4+0x248>
 80013a2:	eb1c 0303 	adds.w	r3, ip, r3
 80013a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013aa:	d22c      	bcs.n	8001406 <__udivmoddi4+0x29a>
 80013ac:	4299      	cmp	r1, r3
 80013ae:	d92a      	bls.n	8001406 <__udivmoddi4+0x29a>
 80013b0:	3802      	subs	r0, #2
 80013b2:	4463      	add	r3, ip
 80013b4:	1a5b      	subs	r3, r3, r1
 80013b6:	fbb3 f1f8 	udiv	r1, r3, r8
 80013ba:	fb08 3311 	mls	r3, r8, r1, r3
 80013be:	b2a4      	uxth	r4, r4
 80013c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013c4:	fb01 f307 	mul.w	r3, r1, r7
 80013c8:	42a3      	cmp	r3, r4
 80013ca:	d908      	bls.n	80013de <__udivmoddi4+0x272>
 80013cc:	eb1c 0404 	adds.w	r4, ip, r4
 80013d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80013d4:	d213      	bcs.n	80013fe <__udivmoddi4+0x292>
 80013d6:	42a3      	cmp	r3, r4
 80013d8:	d911      	bls.n	80013fe <__udivmoddi4+0x292>
 80013da:	3902      	subs	r1, #2
 80013dc:	4464      	add	r4, ip
 80013de:	1ae4      	subs	r4, r4, r3
 80013e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013e4:	e73b      	b.n	800125e <__udivmoddi4+0xf2>
 80013e6:	4604      	mov	r4, r0
 80013e8:	e6f2      	b.n	80011d0 <__udivmoddi4+0x64>
 80013ea:	4608      	mov	r0, r1
 80013ec:	e708      	b.n	8001200 <__udivmoddi4+0x94>
 80013ee:	45c2      	cmp	sl, r8
 80013f0:	d2af      	bcs.n	8001352 <__udivmoddi4+0x1e6>
 80013f2:	ebb8 0e02 	subs.w	lr, r8, r2
 80013f6:	eb63 060c 	sbc.w	r6, r3, ip
 80013fa:	3801      	subs	r0, #1
 80013fc:	e7a9      	b.n	8001352 <__udivmoddi4+0x1e6>
 80013fe:	4631      	mov	r1, r6
 8001400:	e7ed      	b.n	80013de <__udivmoddi4+0x272>
 8001402:	4603      	mov	r3, r0
 8001404:	e79a      	b.n	800133c <__udivmoddi4+0x1d0>
 8001406:	4630      	mov	r0, r6
 8001408:	e7d4      	b.n	80013b4 <__udivmoddi4+0x248>
 800140a:	46b0      	mov	r8, r6
 800140c:	e781      	b.n	8001312 <__udivmoddi4+0x1a6>
 800140e:	4463      	add	r3, ip
 8001410:	3802      	subs	r0, #2
 8001412:	e74f      	b.n	80012b4 <__udivmoddi4+0x148>
 8001414:	4606      	mov	r6, r0
 8001416:	4623      	mov	r3, r4
 8001418:	4608      	mov	r0, r1
 800141a:	e711      	b.n	8001240 <__udivmoddi4+0xd4>
 800141c:	3e02      	subs	r6, #2
 800141e:	4463      	add	r3, ip
 8001420:	e732      	b.n	8001288 <__udivmoddi4+0x11c>
 8001422:	bf00      	nop

08001424 <__aeabi_idiv0>:
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop

08001428 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001430:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001434:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001440:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001444:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001448:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00b      	beq.n	8001468 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001450:	e000      	b.n	8001454 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001452:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001454:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f9      	beq.n	8001452 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800145e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001468:	687b      	ldr	r3, [r7, #4]
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <floatToInt>:
  uint32_t out_int;
  uint32_t out_dec;
} displayFloatToInt_t;

static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8001474:	b5b0      	push	{r4, r5, r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  if(in >= 0.0f)
 8001480:	f04f 0100 	mov.w	r1, #0
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff fe1f 	bl	80010c8 <__aeabi_fcmpge>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <floatToInt+0x24>
  {
    out_value->sign = 0;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	e006      	b.n	80014a6 <floatToInt+0x32>
  }else
  {
    out_value->sign = 1;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
    in = -in;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  in = in + (0.5 / pow(10, dec_prec));
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f7fe ffce 	bl	8000448 <__aeabi_f2d>
 80014ac:	4604      	mov	r4, r0
 80014ae:	460d      	mov	r5, r1
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7fe ffb7 	bl	8000424 <__aeabi_i2d>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	f04f 0000 	mov.w	r0, #0
 80014be:	492a      	ldr	r1, [pc, #168]	@ (8001568 <floatToInt+0xf4>)
 80014c0:	f007 fa6e 	bl	80089a0 <pow>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	f04f 0000 	mov.w	r0, #0
 80014cc:	4927      	ldr	r1, [pc, #156]	@ (800156c <floatToInt+0xf8>)
 80014ce:	f7ff f93d 	bl	800074c <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4620      	mov	r0, r4
 80014d8:	4629      	mov	r1, r5
 80014da:	f7fe fe57 	bl	800018c <__adddf3>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f7ff fadf 	bl	8000aa8 <__aeabi_d2f>
 80014ea:	4603      	mov	r3, r0
 80014ec:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f7ff fdfe 	bl	80010f0 <__aeabi_f2iz>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fbd7 	bl	8000cb4 <__aeabi_ui2f>
 8001506:	4603      	mov	r3, r0
 8001508:	4619      	mov	r1, r3
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f7ff fb20 	bl	8000b50 <__aeabi_fsub>
 8001510:	4603      	mov	r3, r0
 8001512:	60fb      	str	r3, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f7fe ff97 	bl	8000448 <__aeabi_f2d>
 800151a:	4604      	mov	r4, r0
 800151c:	460d      	mov	r5, r1
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7fe ff80 	bl	8000424 <__aeabi_i2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	f04f 0000 	mov.w	r0, #0
 800152c:	490e      	ldr	r1, [pc, #56]	@ (8001568 <floatToInt+0xf4>)
 800152e:	f007 fa37 	bl	80089a0 <pow>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4620      	mov	r0, r4
 8001538:	4629      	mov	r1, r5
 800153a:	f7fe ffdd 	bl	80004f8 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f007 fa99 	bl	8008a7c <trunc>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fa81 	bl	8000a58 <__aeabi_d2iz>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	609a      	str	r2, [r3, #8]
}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bdb0      	pop	{r4, r5, r7, pc}
 8001566:	bf00      	nop
 8001568:	40240000 	.word	0x40240000
 800156c:	3fe00000 	.word	0x3fe00000

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001576:	f003 fa53 	bl	8004a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157a:	f000 f853 	bl	8001624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157e:	f000 f8ff 	bl	8001780 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001582:	f000 f8d3 	bl	800172c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001586:	f000 f89b 	bl	80016c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("PROJET EnviroSense !!! \r\n");
 800158a:	4820      	ldr	r0, [pc, #128]	@ (800160c <main+0x9c>)
 800158c:	f006 f9b0 	bl	80078f0 <puts>
  MAX7219_Init();
 8001590:	f000 f9a0 	bl	80018d4 <MAX7219_Init>
  MAX7219_DisplayTestStart();
 8001594:	f000 f9bb 	bl	800190e <MAX7219_DisplayTestStart>
  HAL_Delay(2000);
 8001598:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800159c:	f003 faae 	bl	8004afc <HAL_Delay>
  MAX7219_DisplayTestStop();
 80015a0:	f000 f9bd 	bl	800191e <MAX7219_DisplayTestStop>
  printf("Display test finished \r\n");
 80015a4:	481a      	ldr	r0, [pc, #104]	@ (8001610 <main+0xa0>)
 80015a6:	f006 f9a3 	bl	80078f0 <puts>
  IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 80015aa:	2101      	movs	r1, #1
 80015ac:	2002      	movs	r0, #2
 80015ae:	f002 fe5d 	bl	800426c <IKS01A3_ENV_SENSOR_Init>
  IKS01A3_ENV_SENSOR_SetOutputDataRate(IKS01A3_STTS751_0, ENV_TEMPERATURE, 4.0f);
 80015b2:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80015b6:	2101      	movs	r1, #1
 80015b8:	2002      	movs	r0, #2
 80015ba:	f002 ff65 	bl	8004488 <IKS01A3_ENV_SENSOR_SetOutputDataRate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &Temperature);
 80015be:	4a15      	ldr	r2, [pc, #84]	@ (8001614 <main+0xa4>)
 80015c0:	2101      	movs	r1, #1
 80015c2:	2002      	movs	r0, #2
 80015c4:	f002 ffa2 	bl	800450c <IKS01A3_ENV_SENSOR_GetValue>
	  floatToInt(Temperature, &out_value, 2);
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <main+0xa4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	1d39      	adds	r1, r7, #4
 80015ce:	2202      	movs	r2, #2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff4f 	bl	8001474 <floatToInt>
	  snprintf(dataOut1, MAX_BUF_SIZE, "Temperature: %c%d.%02d degC ", ((out_value.sign > 0) ? '-' : '+'), (int)out_value.out_int, (int)out_value.out_dec);
 80015d6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	dd01      	ble.n	80015e2 <main+0x72>
 80015de:	232d      	movs	r3, #45	@ 0x2d
 80015e0:	e000      	b.n	80015e4 <main+0x74>
 80015e2:	232b      	movs	r3, #43	@ 0x2b
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	68f9      	ldr	r1, [r7, #12]
 80015e8:	9101      	str	r1, [sp, #4]
 80015ea:	9200      	str	r2, [sp, #0]
 80015ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001618 <main+0xa8>)
 80015ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015f2:	480a      	ldr	r0, [pc, #40]	@ (800161c <main+0xac>)
 80015f4:	f006 f984 	bl	8007900 <sniprintf>
	  printf("%s \r\n", dataOut1);
 80015f8:	4908      	ldr	r1, [pc, #32]	@ (800161c <main+0xac>)
 80015fa:	4809      	ldr	r0, [pc, #36]	@ (8001620 <main+0xb0>)
 80015fc:	f006 f910 	bl	8007820 <iprintf>
	  HAL_Delay(1000);
 8001600:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001604:	f003 fa7a 	bl	8004afc <HAL_Delay>
	  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &Temperature);
 8001608:	e7d9      	b.n	80015be <main+0x4e>
 800160a:	bf00      	nop
 800160c:	08009838 	.word	0x08009838
 8001610:	08009854 	.word	0x08009854
 8001614:	200001ec 	.word	0x200001ec
 8001618:	0800986c 	.word	0x0800986c
 800161c:	200001f0 	.word	0x200001f0
 8001620:	0800988c 	.word	0x0800988c

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b092      	sub	sp, #72	@ 0x48
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	2234      	movs	r2, #52	@ 0x34
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f006 fa70 	bl	8007b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	463b      	mov	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001646:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <SystemClock_Config+0x98>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800164e:	4a1b      	ldr	r2, [pc, #108]	@ (80016bc <SystemClock_Config+0x98>)
 8001650:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001654:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001656:	2302      	movs	r3, #2
 8001658:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165a:	2301      	movs	r3, #1
 800165c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800165e:	2310      	movs	r3, #16
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001662:	2302      	movs	r3, #2
 8001664:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001666:	2300      	movs	r3, #0
 8001668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800166a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800166e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001670:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001674:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4618      	mov	r0, r3
 800167c:	f004 fe4e 	bl	800631c <HAL_RCC_OscConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001686:	f000 f906 	bl	8001896 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168a:	230f      	movs	r3, #15
 800168c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168e:	2303      	movs	r3, #3
 8001690:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800169e:	463b      	mov	r3, r7
 80016a0:	2101      	movs	r1, #1
 80016a2:	4618      	mov	r0, r3
 80016a4:	f005 f96a 	bl	800697c <HAL_RCC_ClockConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80016ae:	f000 f8f2 	bl	8001896 <Error_Handler>
  }
}
 80016b2:	bf00      	nop
 80016b4:	3748      	adds	r7, #72	@ 0x48
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40007000 	.word	0x40007000

080016c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016c4:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016c6:	4a18      	ldr	r2, [pc, #96]	@ (8001728 <MX_SPI1_Init+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ca:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016d2:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016de:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <MX_SPI1_Init+0x64>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <MX_SPI1_Init+0x64>)
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001704:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <MX_SPI1_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <MX_SPI1_Init+0x64>)
 800170c:	220a      	movs	r2, #10
 800170e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	@ (8001724 <MX_SPI1_Init+0x64>)
 8001712:	f005 fbf9 	bl	8006f08 <HAL_SPI_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800171c:	f000 f8bb 	bl	8001896 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2000014c 	.word	0x2000014c
 8001728:	40013000 	.word	0x40013000

0800172c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001730:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <MX_USART2_UART_Init+0x4c>)
 8001732:	4a12      	ldr	r2, [pc, #72]	@ (800177c <MX_USART2_UART_Init+0x50>)
 8001734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <MX_USART2_UART_Init+0x4c>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <MX_USART2_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <MX_USART2_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <MX_USART2_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <MX_USART2_UART_Init+0x4c>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <MX_USART2_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <MX_USART2_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <MX_USART2_UART_Init+0x4c>)
 8001764:	f005 fe66 	bl	8007434 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800176e:	f000 f892 	bl	8001896 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200001a4 	.word	0x200001a4
 800177c:	40004400 	.word	0x40004400

08001780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	@ 0x28
 8001784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	4b35      	ldr	r3, [pc, #212]	@ (800186c <MX_GPIO_Init+0xec>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a34      	ldr	r2, [pc, #208]	@ (800186c <MX_GPIO_Init+0xec>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	61d3      	str	r3, [r2, #28]
 80017a2:	4b32      	ldr	r3, [pc, #200]	@ (800186c <MX_GPIO_Init+0xec>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ae:	4b2f      	ldr	r3, [pc, #188]	@ (800186c <MX_GPIO_Init+0xec>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a2e      	ldr	r2, [pc, #184]	@ (800186c <MX_GPIO_Init+0xec>)
 80017b4:	f043 0320 	orr.w	r3, r3, #32
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b2c      	ldr	r3, [pc, #176]	@ (800186c <MX_GPIO_Init+0xec>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 0320 	and.w	r3, r3, #32
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	4b29      	ldr	r3, [pc, #164]	@ (800186c <MX_GPIO_Init+0xec>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a28      	ldr	r2, [pc, #160]	@ (800186c <MX_GPIO_Init+0xec>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	61d3      	str	r3, [r2, #28]
 80017d2:	4b26      	ldr	r3, [pc, #152]	@ (800186c <MX_GPIO_Init+0xec>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	4b23      	ldr	r3, [pc, #140]	@ (800186c <MX_GPIO_Init+0xec>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4a22      	ldr	r2, [pc, #136]	@ (800186c <MX_GPIO_Init+0xec>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	61d3      	str	r3, [r2, #28]
 80017ea:	4b20      	ldr	r3, [pc, #128]	@ (800186c <MX_GPIO_Init+0xec>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2102      	movs	r1, #2
 80017fa:	481d      	ldr	r0, [pc, #116]	@ (8001870 <MX_GPIO_Init+0xf0>)
 80017fc:	f003 fd04 	bl	8005208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001806:	481b      	ldr	r0, [pc, #108]	@ (8001874 <MX_GPIO_Init+0xf4>)
 8001808:	f003 fcfe 	bl	8005208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800180c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001812:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4815      	ldr	r0, [pc, #84]	@ (8001878 <MX_GPIO_Init+0xf8>)
 8001824:	f003 fa70 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : L0_Pin */
  GPIO_InitStruct.Pin = L0_Pin;
 8001828:	2302      	movs	r3, #2
 800182a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182c:	2301      	movs	r3, #1
 800182e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(L0_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	480c      	ldr	r0, [pc, #48]	@ (8001870 <MX_GPIO_Init+0xf0>)
 8001840:	f003 fa62 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001844:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4805      	ldr	r0, [pc, #20]	@ (8001874 <MX_GPIO_Init+0xf4>)
 800185e:	f003 fa53 	bl	8004d08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	@ 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40020400 	.word	0x40020400
 8001874:	40020000 	.word	0x40020000
 8001878:	40020800 	.word	0x40020800

0800187c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
	ITM_SendChar(ch);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fdce 	bl	8001428 <ITM_SendChar>
	return(ch);
 800188c:	687b      	ldr	r3, [r7, #4]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189a:	b672      	cpsid	i
}
 800189c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800189e:	bf00      	nop
 80018a0:	e7fd      	b.n	800189e <Error_Handler+0x8>
	...

080018a4 <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018ae:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <SPI_CS_High+0x14>)
 80018b0:	f003 fcaa 	bl	8005208 <HAL_GPIO_WritePin>
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40020000 	.word	0x40020000

080018bc <SPI_CS_Low>:

 void SPI_CS_Low()
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018c6:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <SPI_CS_Low+0x14>)
 80018c8:	f003 fc9e 	bl	8005208 <HAL_GPIO_WritePin>
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40020000 	.word	0x40020000

080018d4 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 80018d8:	2107      	movs	r1, #7
 80018da:	200b      	movs	r0, #11
 80018dc:	f000 f84f 	bl	800197e <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 80018e0:	2100      	movs	r1, #0
 80018e2:	2009      	movs	r0, #9
 80018e4:	f000 f84b 	bl	800197e <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 80018e8:	f000 f809 	bl	80018fe <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 80018ec:	f000 f817 	bl	800191e <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 80018f0:	f000 f82f 	bl	8001952 <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 80018f4:	200f      	movs	r0, #15
 80018f6:	f000 f81a 	bl	800192e <MAX7219_SetBrightness>
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}

080018fe <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8001902:	2101      	movs	r1, #1
 8001904:	200c      	movs	r0, #12
 8001906:	f000 f83a 	bl	800197e <MAX7219_Write>
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}

0800190e <MAX7219_DisplayTestStart>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStart (void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 1);                 // put MAX7219 into "display test" mode
 8001912:	2101      	movs	r1, #1
 8001914:	200f      	movs	r0, #15
 8001916:	f000 f832 	bl	800197e <MAX7219_Write>
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}

0800191e <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 8001922:	2100      	movs	r1, #0
 8001924:	200f      	movs	r0, #15
 8001926:	f000 f82a 	bl	800197e <MAX7219_Write>
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}

0800192e <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	4619      	mov	r1, r3
 8001944:	200a      	movs	r0, #10
 8001946:	f000 f81a 	bl	800197e <MAX7219_Write>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 8001958:	2300      	movs	r3, #0
 800195a:	71fb      	strb	r3, [r7, #7]
 800195c:	e007      	b.n	800196e <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f80b 	bl	800197e <MAX7219_Write>
  for (i=0; i < 8; i++)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	3301      	adds	r3, #1
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b07      	cmp	r3, #7
 8001972:	d9f4      	bls.n	800195e <MAX7219_Clear+0xc>
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	460a      	mov	r2, r1
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	4613      	mov	r3, r2
 800198c:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 800198e:	f7ff ff95 	bl	80018bc <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f80d 	bl	80019b4 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f809 	bl	80019b4 <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 80019a2:	f7ff ff7f 	bl	80018a4 <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 80019a6:	f7ff ff89 	bl	80018bc <SPI_CS_Low>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 80019be:	1df9      	adds	r1, r7, #7
 80019c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c4:	2201      	movs	r2, #1
 80019c6:	4803      	ldr	r0, [pc, #12]	@ (80019d4 <MAX7219_SendByte+0x20>)
 80019c8:	f005 fb27 	bl	800701a <HAL_SPI_Transmit>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000014c 	.word	0x2000014c

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80019de:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <HAL_MspInit+0x5c>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	4a14      	ldr	r2, [pc, #80]	@ (8001a34 <HAL_MspInit+0x5c>)
 80019e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80019e8:	6253      	str	r3, [r2, #36]	@ 0x24
 80019ea:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_MspInit+0x5c>)
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <HAL_MspInit+0x5c>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001a34 <HAL_MspInit+0x5c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <HAL_MspInit+0x5c>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_MspInit+0x5c>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_MspInit+0x5c>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	6253      	str	r3, [r2, #36]	@ 0x24
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_MspInit+0x5c>)
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a26:	2007      	movs	r0, #7
 8001a28:	f003 f93a 	bl	8004ca0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a17      	ldr	r2, [pc, #92]	@ (8001ab4 <HAL_SPI_MspInit+0x7c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d127      	bne.n	8001aaa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a5a:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <HAL_SPI_MspInit+0x80>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4a16      	ldr	r2, [pc, #88]	@ (8001ab8 <HAL_SPI_MspInit+0x80>)
 8001a60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a64:	6213      	str	r3, [r2, #32]
 8001a66:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <HAL_SPI_MspInit+0x80>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <HAL_SPI_MspInit+0x80>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a10      	ldr	r2, [pc, #64]	@ (8001ab8 <HAL_SPI_MspInit+0x80>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	61d3      	str	r3, [r2, #28]
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab8 <HAL_SPI_MspInit+0x80>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a8a:	23e0      	movs	r3, #224	@ 0xe0
 8001a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a9a:	2305      	movs	r3, #5
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	@ (8001abc <HAL_SPI_MspInit+0x84>)
 8001aa6:	f003 f92f 	bl	8004d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	@ 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40013000 	.word	0x40013000
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020000 	.word	0x40020000

08001ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	@ 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a17      	ldr	r2, [pc, #92]	@ (8001b3c <HAL_UART_MspInit+0x7c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d127      	bne.n	8001b32 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ae2:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <HAL_UART_MspInit+0x80>)
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	4a16      	ldr	r2, [pc, #88]	@ (8001b40 <HAL_UART_MspInit+0x80>)
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aec:	6253      	str	r3, [r2, #36]	@ 0x24
 8001aee:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <HAL_UART_MspInit+0x80>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_UART_MspInit+0x80>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a10      	ldr	r2, [pc, #64]	@ (8001b40 <HAL_UART_MspInit+0x80>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_UART_MspInit+0x80>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b12:	230c      	movs	r3, #12
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b22:	2307      	movs	r3, #7
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <HAL_UART_MspInit+0x84>)
 8001b2e:	f003 f8eb 	bl	8004d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b32:	bf00      	nop
 8001b34:	3728      	adds	r7, #40	@ 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40004400 	.word	0x40004400
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000

08001b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <NMI_Handler+0x4>

08001b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <HardFault_Handler+0x4>

08001b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <MemManage_Handler+0x4>

08001b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <BusFault_Handler+0x4>

08001b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <UsageFault_Handler+0x4>

08001b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b98:	f002 ff94 	bl	8004ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001baa:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <BSP_I2C1_Init+0x58>)
 8001bac:	4a13      	ldr	r2, [pc, #76]	@ (8001bfc <BSP_I2C1_Init+0x5c>)
 8001bae:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001bb0:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <BSP_I2C1_Init+0x60>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	4912      	ldr	r1, [pc, #72]	@ (8001c00 <BSP_I2C1_Init+0x60>)
 8001bb8:	600a      	str	r2, [r1, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d117      	bne.n	8001bee <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001bbe:	480e      	ldr	r0, [pc, #56]	@ (8001bf8 <BSP_I2C1_Init+0x58>)
 8001bc0:	f003 ffe0 	bl	8005b84 <HAL_I2C_GetState>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d111      	bne.n	8001bee <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001bca:	480b      	ldr	r0, [pc, #44]	@ (8001bf8 <BSP_I2C1_Init+0x58>)
 8001bcc:	f000 f8e2 	bl	8001d94 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10b      	bne.n	8001bee <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001bd6:	4808      	ldr	r0, [pc, #32]	@ (8001bf8 <BSP_I2C1_Init+0x58>)
 8001bd8:	f000 f8a8 	bl	8001d2c <MX_I2C1_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001be2:	f06f 0307 	mvn.w	r3, #7
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	e001      	b.n	8001bee <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001bee:	687b      	ldr	r3, [r7, #4]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200002f0 	.word	0x200002f0
 8001bfc:	40005400 	.word	0x40005400
 8001c00:	20000344 	.word	0x20000344

08001c04 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <BSP_I2C1_DeInit+0x48>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d014      	beq.n	8001c40 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001c16:	4b0d      	ldr	r3, [pc, #52]	@ (8001c4c <BSP_I2C1_DeInit+0x48>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c4c <BSP_I2C1_DeInit+0x48>)
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <BSP_I2C1_DeInit+0x48>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10b      	bne.n	8001c40 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001c28:	4809      	ldr	r0, [pc, #36]	@ (8001c50 <BSP_I2C1_DeInit+0x4c>)
 8001c2a:	f000 f8f9 	bl	8001e20 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001c2e:	4808      	ldr	r0, [pc, #32]	@ (8001c50 <BSP_I2C1_DeInit+0x4c>)
 8001c30:	f003 fc46 	bl	80054c0 <HAL_I2C_DeInit>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001c3a:	f06f 0307 	mvn.w	r3, #7
 8001c3e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001c40:	687b      	ldr	r3, [r7, #4]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000344 	.word	0x20000344
 8001c50:	200002f0 	.word	0x200002f0

08001c54 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	@ 0x28
 8001c58:	af04      	add	r7, sp, #16
 8001c5a:	60ba      	str	r2, [r7, #8]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4603      	mov	r3, r0
 8001c60:	81fb      	strh	r3, [r7, #14]
 8001c62:	460b      	mov	r3, r1
 8001c64:	81bb      	strh	r3, [r7, #12]
 8001c66:	4613      	mov	r3, r2
 8001c68:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001c6e:	89ba      	ldrh	r2, [r7, #12]
 8001c70:	89f9      	ldrh	r1, [r7, #14]
 8001c72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c76:	9302      	str	r3, [sp, #8]
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2301      	movs	r3, #1
 8001c82:	480c      	ldr	r0, [pc, #48]	@ (8001cb4 <BSP_I2C1_WriteReg+0x60>)
 8001c84:	f003 fc5e 	bl	8005544 <HAL_I2C_Mem_Write>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00c      	beq.n	8001ca8 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001c8e:	4809      	ldr	r0, [pc, #36]	@ (8001cb4 <BSP_I2C1_WriteReg+0x60>)
 8001c90:	f003 ff85 	bl	8005b9e <HAL_I2C_GetError>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d103      	bne.n	8001ca2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001c9a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	e002      	b.n	8001ca8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001ca2:	f06f 0303 	mvn.w	r3, #3
 8001ca6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001ca8:	697b      	ldr	r3, [r7, #20]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200002f0 	.word	0x200002f0

08001cb8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	@ 0x28
 8001cbc:	af04      	add	r7, sp, #16
 8001cbe:	60ba      	str	r2, [r7, #8]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	81fb      	strh	r3, [r7, #14]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	81bb      	strh	r3, [r7, #12]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001cd2:	89ba      	ldrh	r2, [r7, #12]
 8001cd4:	89f9      	ldrh	r1, [r7, #14]
 8001cd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cda:	9302      	str	r3, [sp, #8]
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	480c      	ldr	r0, [pc, #48]	@ (8001d18 <BSP_I2C1_ReadReg+0x60>)
 8001ce8:	f003 fd26 	bl	8005738 <HAL_I2C_Mem_Read>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00c      	beq.n	8001d0c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001cf2:	4809      	ldr	r0, [pc, #36]	@ (8001d18 <BSP_I2C1_ReadReg+0x60>)
 8001cf4:	f003 ff53 	bl	8005b9e <HAL_I2C_GetError>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d103      	bne.n	8001d06 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001cfe:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e002      	b.n	8001d0c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001d06:	f06f 0303 	mvn.w	r3, #3
 8001d0a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001d0c:	697b      	ldr	r3, [r7, #20]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200002f0 	.word	0x200002f0

08001d1c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001d20:	f002 fee2 	bl	8004ae8 <HAL_GetTick>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a14      	ldr	r2, [pc, #80]	@ (8001d8c <MX_I2C1_Init+0x60>)
 8001d3c:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <MX_I2C1_Init+0x64>)
 8001d42:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d56:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f003 fa61 	bl	8005238 <HAL_I2C_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40005400 	.word	0x40005400
 8001d90:	00061a80 	.word	0x00061a80

08001d94 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e18 <I2C1_MspInit+0x84>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e18 <I2C1_MspInit+0x84>)
 8001da2:	f043 0302 	orr.w	r3, r3, #2
 8001da6:	61d3      	str	r3, [r2, #28]
 8001da8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <I2C1_MspInit+0x84>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001db4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dba:	2312      	movs	r3, #18
 8001dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4812      	ldr	r0, [pc, #72]	@ (8001e1c <I2C1_MspInit+0x88>)
 8001dd2:	f002 ff99 	bl	8004d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ddc:	2312      	movs	r3, #18
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001de8:	2304      	movs	r3, #4
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	480a      	ldr	r0, [pc, #40]	@ (8001e1c <I2C1_MspInit+0x88>)
 8001df4:	f002 ff88 	bl	8004d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001df8:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <I2C1_MspInit+0x84>)
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfc:	4a06      	ldr	r2, [pc, #24]	@ (8001e18 <I2C1_MspInit+0x84>)
 8001dfe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e02:	6253      	str	r3, [r2, #36]	@ 0x24
 8001e04:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <I2C1_MspInit+0x84>)
 8001e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	@ 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020400 	.word	0x40020400

08001e20 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <I2C1_MspDeInit+0x30>)
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2c:	4a08      	ldr	r2, [pc, #32]	@ (8001e50 <I2C1_MspDeInit+0x30>)
 8001e2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e32:	6253      	str	r3, [r2, #36]	@ 0x24

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001e34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e38:	4806      	ldr	r0, [pc, #24]	@ (8001e54 <I2C1_MspDeInit+0x34>)
 8001e3a:	f003 f8f5 	bl	8005028 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001e3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e42:	4804      	ldr	r0, [pc, #16]	@ (8001e54 <I2C1_MspDeInit+0x34>)
 8001e44:	f003 f8f0 	bl	8005028 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020400 	.word	0x40020400

08001e58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	e00a      	b.n	8001e80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e6a:	f3af 8000 	nop.w
 8001e6e:	4601      	mov	r1, r0
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	60ba      	str	r2, [r7, #8]
 8001e76:	b2ca      	uxtb	r2, r1
 8001e78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dbf0      	blt.n	8001e6a <_read+0x12>
  }

  return len;
 8001e88:	687b      	ldr	r3, [r7, #4]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e009      	b.n	8001eb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fce5 	bl	800187c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dbf1      	blt.n	8001ea4 <_write+0x12>
  }
  return len;
 8001ec0:	687b      	ldr	r3, [r7, #4]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <_close>:

int _close(int file)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ef0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <_isatty>:

int _isatty(int file)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr

08001f12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
	...

08001f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f34:	4a14      	ldr	r2, [pc, #80]	@ (8001f88 <_sbrk+0x5c>)
 8001f36:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <_sbrk+0x60>)
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f40:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f48:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <_sbrk+0x64>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	@ (8001f94 <_sbrk+0x68>)
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4e:	4b10      	ldr	r3, [pc, #64]	@ (8001f90 <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d207      	bcs.n	8001f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f5c:	f005 fe2a 	bl	8007bb4 <__errno>
 8001f60:	4603      	mov	r3, r0
 8001f62:	220c      	movs	r2, #12
 8001f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e009      	b.n	8001f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f72:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a05      	ldr	r2, [pc, #20]	@ (8001f90 <_sbrk+0x64>)
 8001f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20014000 	.word	0x20014000
 8001f8c:	00000400 	.word	0x00000400
 8001f90:	20000348 	.word	0x20000348
 8001f94:	20000590 	.word	0x20000590

08001f98 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa4:	f7ff fff8 	bl	8001f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa8:	480b      	ldr	r0, [pc, #44]	@ (8001fd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001faa:	490c      	ldr	r1, [pc, #48]	@ (8001fdc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fac:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a09      	ldr	r2, [pc, #36]	@ (8001fe4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fc0:	4c09      	ldr	r4, [pc, #36]	@ (8001fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fce:	f005 fdf7 	bl	8007bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fd2:	f7ff facd 	bl	8001570 <main>
  bx lr
 8001fd6:	4770      	bx	lr
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8001fe0:	08009930 	.word	0x08009930
  ldr r2, =_sbss
 8001fe4:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8001fe8:	20000590 	.word	0x20000590

08001fec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC1_IRQHandler>
	...

08001ff0 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d103      	bne.n	8002008 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002000:	f04f 33ff 	mov.w	r3, #4294967295
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	e034      	b.n	8002072 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	7b1a      	ldrb	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	699a      	ldr	r2, [r3, #24]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a0e      	ldr	r2, [pc, #56]	@ (800207c <HTS221_RegisterBusIO+0x8c>)
 8002044:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a0d      	ldr	r2, [pc, #52]	@ (8002080 <HTS221_RegisterBusIO+0x90>)
 800204a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	69da      	ldr	r2, [r3, #28]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4798      	blx	r3
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	e002      	b.n	8002072 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 800206c:	f04f 33ff 	mov.w	r3, #4294967295
 8002070:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002072:	68fb      	ldr	r3, [r7, #12]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	080026b9 	.word	0x080026b9
 8002080:	0800271b 	.word	0x0800271b

08002084 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002092:	2b00      	cmp	r3, #0
 8002094:	d108      	bne.n	80020a8 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fa9e 	bl	80025d8 <HTS221_Initialize>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	e004      	b.n	80020b2 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d111      	bne.n	80020f0 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f87e 	bl	80021ce <HTS221_HUM_Disable>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295
 80020dc:	e00d      	b.n	80020fa <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f95f 	bl	80023a2 <HTS221_TEMP_Disable>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	e004      	b.n	80020fa <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3320      	adds	r3, #32
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fc2a 	bl	800296c <hts221_device_id_get>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	e000      	b.n	8002126 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2201      	movs	r2, #1
 800213e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2200      	movs	r2, #0
 8002150:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2200      	movs	r2, #0
 8002156:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4a09      	ldr	r2, [pc, #36]	@ (8002180 <HTS221_GetCapabilities+0x50>)
 800215c:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	4a07      	ldr	r2, [pc, #28]	@ (8002180 <HTS221_GetCapabilities+0x50>)
 8002162:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	41480000 	.word	0x41480000

08002184 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e015      	b.n	80021c6 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10b      	bne.n	80021bc <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3320      	adds	r3, #32
 80021a8:	2101      	movs	r1, #1
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fbef 	bl	800298e <hts221_power_on_set>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ba:	e004      	b.n	80021c6 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e015      	b.n	8002210 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10b      	bne.n	8002206 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3320      	adds	r3, #32
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fbca 	bl	800298e <hts221_power_on_set>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
 8002204:	e004      	b.n	8002210 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002222:	6839      	ldr	r1, [r7, #0]
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f965 	bl	80024f4 <HTS221_GetOutputDataRate>
 800222a:	4603      	mov	r3, r0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800223e:	6839      	ldr	r1, [r7, #0]
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f99b 	bl	800257c <HTS221_SetOutputDataRate>
 8002246:	4603      	mov	r3, r0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3320      	adds	r3, #32
 800225e:	f107 020c 	add.w	r2, r7, #12
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fc5e 	bl	8002b26 <hts221_hum_adc_point_0_get>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
 8002274:	e069      	b.n	800234a <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f103 0220 	add.w	r2, r3, #32
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	3304      	adds	r3, #4
 8002282:	4619      	mov	r1, r3
 8002284:	4610      	mov	r0, r2
 8002286:	f000 fba8 	bl	80029da <hts221_hum_rh_point_0_get>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
 8002294:	e059      	b.n	800234a <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f103 0220 	add.w	r2, r3, #32
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	3308      	adds	r3, #8
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f000 fc5f 	bl	8002b68 <hts221_hum_adc_point_1_get>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295
 80022b4:	e049      	b.n	800234a <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f103 0220 	add.w	r2, r3, #32
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	330c      	adds	r3, #12
 80022c2:	4619      	mov	r1, r3
 80022c4:	4610      	mov	r0, r2
 80022c6:	f000 fba8 	bl	8002a1a <hts221_hum_rh_point_1_get>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295
 80022d4:	e039      	b.n	800234a <HTS221_HUM_GetHumidity+0xfa>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 80022d6:	2300      	movs	r3, #0
 80022d8:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3320      	adds	r3, #32
 80022de:	f107 021c 	add.w	r2, r7, #28
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fafd 	bl	80028e4 <hts221_humidity_raw_get>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295
 80022f4:	e029      	b.n	800234a <HTS221_HUM_GetHumidity+0xfa>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80022f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fcde 	bl	8000cbc <__aeabi_i2f>
 8002300:	4602      	mov	r2, r0
 8002302:	f107 030c 	add.w	r3, r7, #12
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f991 	bl	8002630 <Linear_Interpolation>
 800230e:	4602      	mov	r2, r0
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f04f 0100 	mov.w	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe febf 	bl	80010a0 <__aeabi_fcmplt>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HTS221_HUM_GetHumidity+0xe0>
  {
    *Value = 0.0f;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4907      	ldr	r1, [pc, #28]	@ (8002354 <HTS221_HUM_GetHumidity+0x104>)
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fed0 	bl	80010dc <__aeabi_fcmpgt>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HTS221_HUM_GetHumidity+0xf8>
  {
    *Value = 100.0f;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	4a03      	ldr	r2, [pc, #12]	@ (8002354 <HTS221_HUM_GetHumidity+0x104>)
 8002346:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	42c80000 	.word	0x42c80000

08002358 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e015      	b.n	800239a <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10b      	bne.n	8002390 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3320      	adds	r3, #32
 800237c:	2101      	movs	r1, #1
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fb05 	bl	800298e <hts221_power_on_set>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	e004      	b.n	800239a <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e015      	b.n	80023e4 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10b      	bne.n	80023da <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3320      	adds	r3, #32
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fae0 	bl	800298e <hts221_power_on_set>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
 80023d8:	e004      	b.n	80023e4 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80023f6:	6839      	ldr	r1, [r7, #0]
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f87b 	bl	80024f4 <HTS221_GetOutputDataRate>
 80023fe:	4603      	mov	r3, r0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002412:	6839      	ldr	r1, [r7, #0]
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f8b1 	bl	800257c <HTS221_SetOutputDataRate>
 800241a:	4603      	mov	r3, r0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3320      	adds	r3, #32
 8002432:	f107 020c 	add.w	r2, r7, #12
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fbb6 	bl	8002baa <hts221_temp_adc_point_0_get>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
 8002448:	e04f      	b.n	80024ea <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f103 0220 	add.w	r2, r3, #32
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	3304      	adds	r3, #4
 8002456:	4619      	mov	r1, r3
 8002458:	4610      	mov	r0, r2
 800245a:	f000 fafe 	bl	8002a5a <hts221_temp_deg_point_0_get>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
 8002468:	e03f      	b.n	80024ea <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f103 0220 	add.w	r2, r3, #32
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	3308      	adds	r3, #8
 8002476:	4619      	mov	r1, r3
 8002478:	4610      	mov	r0, r2
 800247a:	f000 fbb7 	bl	8002bec <hts221_temp_adc_point_1_get>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	e02f      	b.n	80024ea <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f103 0220 	add.w	r2, r3, #32
 8002490:	f107 030c 	add.w	r3, r7, #12
 8002494:	330c      	adds	r3, #12
 8002496:	4619      	mov	r1, r3
 8002498:	4610      	mov	r0, r2
 800249a:	f000 fb11 	bl	8002ac0 <hts221_temp_deg_point_1_get>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80024a4:	f04f 33ff 	mov.w	r3, #4294967295
 80024a8:	e01f      	b.n	80024ea <HTS221_TEMP_GetTemperature+0xc6>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 80024aa:	2300      	movs	r3, #0
 80024ac:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3320      	adds	r3, #32
 80024b2:	f107 021c 	add.w	r2, r7, #28
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fa35 	bl	8002928 <hts221_temperature_raw_get>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295
 80024c8:	e00f      	b.n	80024ea <HTS221_TEMP_GetTemperature+0xc6>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80024ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fbf4 	bl	8000cbc <__aeabi_i2f>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 f8a7 	bl	8002630 <Linear_Interpolation>
 80024e2:	4602      	mov	r2, r0
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3320      	adds	r3, #32
 8002506:	f107 020b 	add.w	r2, r7, #11
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f98b 	bl	8002828 <hts221_data_rate_get>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
 800251c:	e025      	b.n	800256a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800251e:	7afb      	ldrb	r3, [r7, #11]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d81d      	bhi.n	8002560 <HTS221_GetOutputDataRate+0x6c>
 8002524:	a201      	add	r2, pc, #4	@ (adr r2, 800252c <HTS221_GetOutputDataRate+0x38>)
 8002526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252a:	bf00      	nop
 800252c:	0800253d 	.word	0x0800253d
 8002530:	08002547 	.word	0x08002547
 8002534:	08002551 	.word	0x08002551
 8002538:	08002559 	.word	0x08002559
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
      break;
 8002544:	e010      	b.n	8002568 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800254c:	601a      	str	r2, [r3, #0]
      break;
 800254e:	e00b      	b.n	8002568 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4a08      	ldr	r2, [pc, #32]	@ (8002574 <HTS221_GetOutputDataRate+0x80>)
 8002554:	601a      	str	r2, [r3, #0]
      break;
 8002556:	e007      	b.n	8002568 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4a07      	ldr	r2, [pc, #28]	@ (8002578 <HTS221_GetOutputDataRate+0x84>)
 800255c:	601a      	str	r2, [r3, #0]
      break;
 800255e:	e003      	b.n	8002568 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	60fb      	str	r3, [r7, #12]
      break;
 8002566:	bf00      	nop
  }

  return ret;
 8002568:	68fb      	ldr	r3, [r7, #12]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40e00000 	.word	0x40e00000
 8002578:	41480000 	.word	0x41480000

0800257c <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002586:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800258a:	6838      	ldr	r0, [r7, #0]
 800258c:	f7fe fd92 	bl	80010b4 <__aeabi_fcmple>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HTS221_SetOutputDataRate+0x1e>
 8002596:	2301      	movs	r3, #1
 8002598:	e009      	b.n	80025ae <HTS221_SetOutputDataRate+0x32>
 800259a:	490e      	ldr	r1, [pc, #56]	@ (80025d4 <HTS221_SetOutputDataRate+0x58>)
 800259c:	6838      	ldr	r0, [r7, #0]
 800259e:	f7fe fd89 	bl	80010b4 <__aeabi_fcmple>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HTS221_SetOutputDataRate+0x30>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e000      	b.n	80025ae <HTS221_SetOutputDataRate+0x32>
 80025ac:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80025ae:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3320      	adds	r3, #32
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 f90f 	bl	80027dc <hts221_data_rate_set>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <HTS221_SetOutputDataRate+0x4e>
  {
    return HTS221_ERROR;
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295
 80025c8:	e000      	b.n	80025cc <HTS221_SetOutputDataRate+0x50>
  }

  return HTS221_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40e00000 	.word	0x40e00000

080025d8 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3320      	adds	r3, #32
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f9d1 	bl	800298e <hts221_power_on_set>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	e017      	b.n	8002628 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3320      	adds	r3, #32
 80025fc:	2101      	movs	r1, #1
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f94a 	bl	8002898 <hts221_block_data_update_set>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	e00b      	b.n	8002628 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8002610:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ffb1 	bl	800257c <HTS221_SetOutputDataRate>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8002620:	f04f 33ff 	mov.w	r3, #4294967295
 8002624:	e000      	b.n	8002628 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8002630:	b5b0      	push	{r4, r5, r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f7fe fa83 	bl	8000b50 <__aeabi_fsub>
 800264a:	4603      	mov	r3, r0
 800264c:	6839      	ldr	r1, [r7, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb88 	bl	8000d64 <__aeabi_fmul>
 8002654:	4603      	mov	r3, r0
 8002656:	461c      	mov	r4, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4619      	mov	r1, r3
 8002662:	4610      	mov	r0, r2
 8002664:	f7fe fb7e 	bl	8000d64 <__aeabi_fmul>
 8002668:	4603      	mov	r3, r0
 800266a:	461d      	mov	r5, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4619      	mov	r1, r3
 8002676:	4610      	mov	r0, r2
 8002678:	f7fe fb74 	bl	8000d64 <__aeabi_fmul>
 800267c:	4603      	mov	r3, r0
 800267e:	4619      	mov	r1, r3
 8002680:	4628      	mov	r0, r5
 8002682:	f7fe fa65 	bl	8000b50 <__aeabi_fsub>
 8002686:	4603      	mov	r3, r0
 8002688:	4619      	mov	r1, r3
 800268a:	4620      	mov	r0, r4
 800268c:	f7fe fa62 	bl	8000b54 <__addsf3>
 8002690:	4603      	mov	r3, r0
 8002692:	461c      	mov	r4, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	4610      	mov	r0, r2
 80026a0:	f7fe fa56 	bl	8000b50 <__aeabi_fsub>
 80026a4:	4603      	mov	r3, r0
 80026a6:	4619      	mov	r1, r3
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7fe fc0f 	bl	8000ecc <__aeabi_fdiv>
 80026ae:	4603      	mov	r3, r0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bdb0      	pop	{r4, r5, r7, pc}

080026b8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	461a      	mov	r2, r3
 80026c4:	460b      	mov	r3, r1
 80026c6:	72fb      	strb	r3, [r7, #11]
 80026c8:	4613      	mov	r3, r2
 80026ca:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10e      	bne.n	80026f6 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	695c      	ldr	r4, [r3, #20]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	7b1b      	ldrb	r3, [r3, #12]
 80026e0:	4618      	mov	r0, r3
 80026e2:	7afb      	ldrb	r3, [r7, #11]
 80026e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	4619      	mov	r1, r3
 80026ec:	893b      	ldrh	r3, [r7, #8]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	47a0      	blx	r4
 80026f2:	4603      	mov	r3, r0
 80026f4:	e00d      	b.n	8002712 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	695c      	ldr	r4, [r3, #20]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	7b1b      	ldrb	r3, [r3, #12]
 80026fe:	4618      	mov	r0, r3
 8002700:	7afb      	ldrb	r3, [r7, #11]
 8002702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4619      	mov	r1, r3
 800270a:	893b      	ldrh	r3, [r7, #8]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	47a0      	blx	r4
 8002710:	4603      	mov	r3, r0
  }
}
 8002712:	4618      	mov	r0, r3
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}

0800271a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800271a:	b590      	push	{r4, r7, lr}
 800271c:	b087      	sub	sp, #28
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	461a      	mov	r2, r3
 8002726:	460b      	mov	r3, r1
 8002728:	72fb      	strb	r3, [r7, #11]
 800272a:	4613      	mov	r3, r2
 800272c:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10e      	bne.n	8002758 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	691c      	ldr	r4, [r3, #16]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	7b1b      	ldrb	r3, [r3, #12]
 8002742:	4618      	mov	r0, r3
 8002744:	7afb      	ldrb	r3, [r7, #11]
 8002746:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800274a:	b2db      	uxtb	r3, r3
 800274c:	4619      	mov	r1, r3
 800274e:	893b      	ldrh	r3, [r7, #8]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	47a0      	blx	r4
 8002754:	4603      	mov	r3, r0
 8002756:	e00d      	b.n	8002774 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	691c      	ldr	r4, [r3, #16]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	7b1b      	ldrb	r3, [r3, #12]
 8002760:	4618      	mov	r0, r3
 8002762:	7afb      	ldrb	r3, [r7, #11]
 8002764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002768:	b2db      	uxtb	r3, r3
 800276a:	4619      	mov	r1, r3
 800276c:	893b      	ldrh	r3, [r7, #8]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	47a0      	blx	r4
 8002772:	4603      	mov	r3, r0
  }
}
 8002774:	4618      	mov	r0, r3
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	bd90      	pop	{r4, r7, pc}

0800277c <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	461a      	mov	r2, r3
 8002788:	460b      	mov	r3, r1
 800278a:	72fb      	strb	r3, [r7, #11]
 800278c:	4613      	mov	r3, r2
 800278e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	685c      	ldr	r4, [r3, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	68d8      	ldr	r0, [r3, #12]
 8002798:	893b      	ldrh	r3, [r7, #8]
 800279a:	7af9      	ldrb	r1, [r7, #11]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	47a0      	blx	r4
 80027a0:	6178      	str	r0, [r7, #20]

  return ret;
 80027a2:	697b      	ldr	r3, [r7, #20]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	371c      	adds	r7, #28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd90      	pop	{r4, r7, pc}

080027ac <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	461a      	mov	r2, r3
 80027b8:	460b      	mov	r3, r1
 80027ba:	72fb      	strb	r3, [r7, #11]
 80027bc:	4613      	mov	r3, r2
 80027be:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681c      	ldr	r4, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	68d8      	ldr	r0, [r3, #12]
 80027c8:	893b      	ldrh	r3, [r7, #8]
 80027ca:	7af9      	ldrb	r1, [r7, #11]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	47a0      	blx	r4
 80027d0:	6178      	str	r0, [r7, #20]

  return ret;
 80027d2:	697b      	ldr	r3, [r7, #20]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	371c      	adds	r7, #28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd90      	pop	{r4, r7, pc}

080027dc <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80027e8:	f107 0208 	add.w	r2, r7, #8
 80027ec:	2301      	movs	r3, #1
 80027ee:	2120      	movs	r1, #32
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ffc3 	bl	800277c <hts221_read_reg>
 80027f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10f      	bne.n	800281e <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	b2da      	uxtb	r2, r3
 8002806:	7a3b      	ldrb	r3, [r7, #8]
 8002808:	f362 0301 	bfi	r3, r2, #0, #2
 800280c:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800280e:	f107 0208 	add.w	r2, r7, #8
 8002812:	2301      	movs	r3, #1
 8002814:	2120      	movs	r1, #32
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ffc8 	bl	80027ac <hts221_write_reg>
 800281c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800281e:	68fb      	ldr	r3, [r7, #12]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002832:	f107 0208 	add.w	r2, r7, #8
 8002836:	2301      	movs	r3, #1
 8002838:	2120      	movs	r1, #32
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ff9e 	bl	800277c <hts221_read_reg>
 8002840:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8002842:	7a3b      	ldrb	r3, [r7, #8]
 8002844:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b03      	cmp	r3, #3
 800284c:	d81a      	bhi.n	8002884 <hts221_data_rate_get+0x5c>
 800284e:	a201      	add	r2, pc, #4	@ (adr r2, 8002854 <hts221_data_rate_get+0x2c>)
 8002850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002854:	08002865 	.word	0x08002865
 8002858:	0800286d 	.word	0x0800286d
 800285c:	08002875 	.word	0x08002875
 8002860:	0800287d 	.word	0x0800287d
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
      break;
 800286a:	e00f      	b.n	800288c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
      break;
 8002872:	e00b      	b.n	800288c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2202      	movs	r2, #2
 8002878:	701a      	strb	r2, [r3, #0]
      break;
 800287a:	e007      	b.n	800288c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2203      	movs	r2, #3
 8002880:	701a      	strb	r2, [r3, #0]
      break;
 8002882:	e003      	b.n	800288c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2204      	movs	r2, #4
 8002888:	701a      	strb	r2, [r3, #0]
      break;
 800288a:	bf00      	nop
  }

  return ret;
 800288c:	68fb      	ldr	r3, [r7, #12]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop

08002898 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80028a4:	f107 0208 	add.w	r2, r7, #8
 80028a8:	2301      	movs	r3, #1
 80028aa:	2120      	movs	r1, #32
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ff65 	bl	800277c <hts221_read_reg>
 80028b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10f      	bne.n	80028da <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	7a3b      	ldrb	r3, [r7, #8]
 80028c4:	f362 0382 	bfi	r3, r2, #2, #1
 80028c8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80028ca:	f107 0208 	add.w	r2, r7, #8
 80028ce:	2301      	movs	r3, #1
 80028d0:	2120      	movs	r1, #32
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff6a 	bl	80027ac <hts221_write_reg>
 80028d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028da:	68fb      	ldr	r3, [r7, #12]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80028ee:	f107 0208 	add.w	r2, r7, #8
 80028f2:	2302      	movs	r3, #2
 80028f4:	2128      	movs	r1, #40	@ 0x28
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ff40 	bl	800277c <hts221_read_reg>
 80028fc:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80028fe:	7a7b      	ldrb	r3, [r7, #9]
 8002900:	b21a      	sxth	r2, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290c:	b29b      	uxth	r3, r3
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	b29b      	uxth	r3, r3
 8002912:	7a3a      	ldrb	r2, [r7, #8]
 8002914:	4413      	add	r3, r2
 8002916:	b29b      	uxth	r3, r3
 8002918:	b21a      	sxth	r2, r3
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	801a      	strh	r2, [r3, #0]

  return ret;
 800291e:	68fb      	ldr	r3, [r7, #12]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8002932:	f107 0208 	add.w	r2, r7, #8
 8002936:	2302      	movs	r3, #2
 8002938:	212a      	movs	r1, #42	@ 0x2a
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ff1e 	bl	800277c <hts221_read_reg>
 8002940:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002942:	7a7b      	ldrb	r3, [r7, #9]
 8002944:	b21a      	sxth	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002950:	b29b      	uxth	r3, r3
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	b29b      	uxth	r3, r3
 8002956:	7a3a      	ldrb	r2, [r7, #8]
 8002958:	4413      	add	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	b21a      	sxth	r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	801a      	strh	r2, [r3, #0]

  return ret;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8002976:	2301      	movs	r3, #1
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	210f      	movs	r1, #15
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff fefd 	bl	800277c <hts221_read_reg>
 8002982:	60f8      	str	r0, [r7, #12]

  return ret;
 8002984:	68fb      	ldr	r3, [r7, #12]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	460b      	mov	r3, r1
 8002998:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800299a:	f107 0208 	add.w	r2, r7, #8
 800299e:	2301      	movs	r3, #1
 80029a0:	2120      	movs	r1, #32
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff feea 	bl	800277c <hts221_read_reg>
 80029a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10f      	bne.n	80029d0 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	7a3b      	ldrb	r3, [r7, #8]
 80029ba:	f362 13c7 	bfi	r3, r2, #7, #1
 80029be:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80029c0:	f107 0208 	add.w	r2, r7, #8
 80029c4:	2301      	movs	r3, #1
 80029c6:	2120      	movs	r1, #32
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff feef 	bl	80027ac <hts221_write_reg>
 80029ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80029d0:	68fb      	ldr	r3, [r7, #12]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80029e4:	f107 020b 	add.w	r2, r7, #11
 80029e8:	2301      	movs	r3, #1
 80029ea:	2130      	movs	r1, #48	@ 0x30
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff fec5 	bl	800277c <hts221_read_reg>
 80029f2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80029f4:	7afb      	ldrb	r3, [r7, #11]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe f960 	bl	8000cbc <__aeabi_i2f>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fa62 	bl	8000ecc <__aeabi_fdiv>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	601a      	str	r2, [r3, #0]

  return ret;
 8002a10:	68fb      	ldr	r3, [r7, #12]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8002a24:	f107 020b 	add.w	r2, r7, #11
 8002a28:	2301      	movs	r3, #1
 8002a2a:	2131      	movs	r1, #49	@ 0x31
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff fea5 	bl	800277c <hts221_read_reg>
 8002a32:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8002a34:	7afb      	ldrb	r3, [r7, #11]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe f940 	bl	8000cbc <__aeabi_i2f>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fa42 	bl	8000ecc <__aeabi_fdiv>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	601a      	str	r2, [r3, #0]

  return ret;
 8002a50:	68fb      	ldr	r3, [r7, #12]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8002a64:	f107 020f 	add.w	r2, r7, #15
 8002a68:	2301      	movs	r3, #1
 8002a6a:	2132      	movs	r1, #50	@ 0x32
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fe85 	bl	800277c <hts221_read_reg>
 8002a72:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d11d      	bne.n	8002ab6 <hts221_temp_deg_point_0_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002a7a:	f107 0210 	add.w	r2, r7, #16
 8002a7e:	2301      	movs	r3, #1
 8002a80:	2135      	movs	r1, #53	@ 0x35
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fe7a 	bl	800277c <hts221_read_reg>
 8002a88:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8002a8a:	7c3b      	ldrb	r3, [r7, #16]
 8002a8c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe f90d 	bl	8000cbc <__aeabi_i2f>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe fa0f 	bl	8000ecc <__aeabi_fdiv>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002ab6:	697b      	ldr	r3, [r7, #20]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8002aca:	f107 020f 	add.w	r2, r7, #15
 8002ace:	2301      	movs	r3, #1
 8002ad0:	2133      	movs	r1, #51	@ 0x33
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fe52 	bl	800277c <hts221_read_reg>
 8002ad8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d11d      	bne.n	8002b1c <hts221_temp_deg_point_1_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002ae0:	f107 0210 	add.w	r2, r7, #16
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	2135      	movs	r1, #53	@ 0x35
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff fe47 	bl	800277c <hts221_read_reg>
 8002aee:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8002af0:	7c3b      	ldrb	r3, [r7, #16]
 8002af2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	4413      	add	r3, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe f8da 	bl	8000cbc <__aeabi_i2f>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe f9dc 	bl	8000ecc <__aeabi_fdiv>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002b1c:	697b      	ldr	r3, [r7, #20]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8002b30:	f107 0208 	add.w	r2, r7, #8
 8002b34:	2302      	movs	r3, #2
 8002b36:	2136      	movs	r1, #54	@ 0x36
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff fe1f 	bl	800277c <hts221_read_reg>
 8002b3e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002b40:	7a7b      	ldrb	r3, [r7, #9]
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	7a3a      	ldrb	r2, [r7, #8]
 8002b48:	4413      	add	r3, r2
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002b4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe f8b2 	bl	8000cbc <__aeabi_i2f>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	601a      	str	r2, [r3, #0]

  return ret;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8002b72:	f107 0208 	add.w	r2, r7, #8
 8002b76:	2302      	movs	r3, #2
 8002b78:	213a      	movs	r1, #58	@ 0x3a
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fdfe 	bl	800277c <hts221_read_reg>
 8002b80:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002b82:	7a7b      	ldrb	r3, [r7, #9]
 8002b84:	021b      	lsls	r3, r3, #8
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	7a3a      	ldrb	r2, [r7, #8]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002b90:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f891 	bl	8000cbc <__aeabi_i2f>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	601a      	str	r2, [r3, #0]

  return ret;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8002bb4:	f107 0208 	add.w	r2, r7, #8
 8002bb8:	2302      	movs	r3, #2
 8002bba:	213c      	movs	r1, #60	@ 0x3c
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff fddd 	bl	800277c <hts221_read_reg>
 8002bc2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002bc4:	7a7b      	ldrb	r3, [r7, #9]
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	7a3a      	ldrb	r2, [r7, #8]
 8002bcc:	4413      	add	r3, r2
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002bd2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe f870 	bl	8000cbc <__aeabi_i2f>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	601a      	str	r2, [r3, #0]

  return ret;
 8002be2:	68fb      	ldr	r3, [r7, #12]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8002bf6:	f107 0208 	add.w	r2, r7, #8
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	213e      	movs	r1, #62	@ 0x3e
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fdbc 	bl	800277c <hts221_read_reg>
 8002c04:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002c06:	7a7b      	ldrb	r3, [r7, #9]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	7a3a      	ldrb	r2, [r7, #8]
 8002c0e:	4413      	add	r3, r2
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002c14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe f84f 	bl	8000cbc <__aeabi_i2f>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	601a      	str	r2, [r3, #0]

  return ret;
 8002c24:	68fb      	ldr	r3, [r7, #12]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d103      	bne.n	8002c4c <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	e051      	b.n	8002cf0 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	7b1a      	ldrb	r2, [r3, #12]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a1d      	ldr	r2, [pc, #116]	@ (8002cfc <LPS22HH_RegisterBusIO+0xcc>)
 8002c88:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8002d00 <LPS22HH_RegisterBusIO+0xd0>)
 8002c8e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d103      	bne.n	8002cae <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e020      	b.n	8002cf0 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4798      	blx	r3
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 8002cba:	f04f 33ff 	mov.w	r3, #4294967295
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	e016      	b.n	8002cf0 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d112      	bne.n	8002cf0 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10d      	bne.n	8002cf0 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8002cd8:	7afb      	ldrb	r3, [r7, #11]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2110      	movs	r1, #16
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f9db 	bl	800309a <LPS22HH_Write_Reg>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	080033a7 	.word	0x080033a7
 8002d00:	080033dd 	.word	0x080033dd

08002d04 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d108      	bne.n	8002d28 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 faf8 	bl	800330c <LPS22HH_Initialize>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
 8002d26:	e004      	b.n	8002d32 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d111      	bne.n	8002d70 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f87d 	bl	8002e4c <LPS22HH_PRESS_Disable>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8002d58:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5c:	e00d      	b.n	8002d7a <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f919 	bl	8002f96 <LPS22HH_TEMP_Disable>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6e:	e004      	b.n	8002d7a <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3320      	adds	r3, #32
 8002d90:	6839      	ldr	r1, [r7, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fcfd 	bl	8003792 <lps22hh_device_id_get>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002da2:	e000      	b.n	8002da6 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4a07      	ldr	r2, [pc, #28]	@ (8002e00 <LPS22HH_GetCapabilities+0x50>)
 8002de4:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	4a05      	ldr	r2, [pc, #20]	@ (8002e00 <LPS22HH_GetCapabilities+0x50>)
 8002dea:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	43480000 	.word	0x43480000

08002e04 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e014      	b.n	8002e44 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f103 0220 	add.w	r2, r3, #32
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002e26:	4619      	mov	r1, r3
 8002e28:	4610      	mov	r0, r2
 8002e2a:	f000 fb71 	bl	8003510 <lps22hh_data_rate_set>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8002e34:	f04f 33ff 	mov.w	r3, #4294967295
 8002e38:	e004      	b.n	8002e44 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e024      	b.n	8002eac <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d11a      	bne.n	8002ea2 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f103 0220 	add.w	r2, r3, #32
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3333      	adds	r3, #51	@ 0x33
 8002e76:	4619      	mov	r1, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f000 fb97 	bl	80035ac <lps22hh_data_rate_get>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295
 8002e88:	e010      	b.n	8002eac <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3320      	adds	r3, #32
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fb3d 	bl	8003510 <lps22hh_data_rate_set>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8002e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea0:	e004      	b.n	8002eac <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8002ebe:	6839      	ldr	r1, [r7, #0]
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f905 	bl	80030d0 <LPS22HH_GetOutputDataRate>
 8002ec6:	4603      	mov	r3, r0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <LPS22HH_PRESS_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002ee4:	6839      	ldr	r1, [r7, #0]
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f956 	bl	8003198 <LPS22HH_SetOutputDataRate_When_Enabled>
 8002eec:	4603      	mov	r3, r0
 8002eee:	e004      	b.n	8002efa <LPS22HH_PRESS_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002ef0:	6839      	ldr	r1, [r7, #0]
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f9ba 	bl	800326c <LPS22HH_SetOutputDataRate_When_Disabled>
 8002ef8:	4603      	mov	r3, r0
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8002f0c:	f107 030c 	add.w	r3, r7, #12
 8002f10:	2204      	movs	r2, #4
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f004 fdff 	bl	8007b18 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3320      	adds	r3, #32
 8002f1e:	f107 020c 	add.w	r2, r7, #12
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fbe9 	bl	80036fc <lps22hh_pressure_raw_get>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
 8002f34:	e007      	b.n	8002f46 <LPS22HH_PRESS_GetPressure+0x44>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fa9a 	bl	8003472 <lps22hh_from_lsb_to_hpa>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e014      	b.n	8002f8e <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f103 0220 	add.w	r2, r3, #32
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002f70:	4619      	mov	r1, r3
 8002f72:	4610      	mov	r0, r2
 8002f74:	f000 facc 	bl	8003510 <lps22hh_data_rate_set>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f82:	e004      	b.n	8002f8e <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e024      	b.n	8002ff6 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d11a      	bne.n	8002fec <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f103 0220 	add.w	r2, r3, #32
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3333      	adds	r3, #51	@ 0x33
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f000 faf2 	bl	80035ac <lps22hh_data_rate_get>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	e010      	b.n	8002ff6 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3320      	adds	r3, #32
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fa98 	bl	8003510 <lps22hh_data_rate_set>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	e004      	b.n	8002ff6 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8003008:	6839      	ldr	r1, [r7, #0]
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f860 	bl	80030d0 <LPS22HH_GetOutputDataRate>
 8003010:	4603      	mov	r3, r0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800302a:	2b01      	cmp	r3, #1
 800302c:	d105      	bne.n	800303a <LPS22HH_TEMP_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800302e:	6839      	ldr	r1, [r7, #0]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f8b1 	bl	8003198 <LPS22HH_SetOutputDataRate_When_Enabled>
 8003036:	4603      	mov	r3, r0
 8003038:	e004      	b.n	8003044 <LPS22HH_TEMP_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800303a:	6839      	ldr	r1, [r7, #0]
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f915 	bl	800326c <LPS22HH_SetOutputDataRate_When_Disabled>
 8003042:	4603      	mov	r3, r0
  }
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8003056:	f107 030c 	add.w	r3, r7, #12
 800305a:	2202      	movs	r2, #2
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f004 fd5a 	bl	8007b18 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3320      	adds	r3, #32
 8003068:	f107 020c 	add.w	r2, r7, #12
 800306c:	4611      	mov	r1, r2
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fb6d 	bl	800374e <lps22hh_temperature_raw_get>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 800307a:	f04f 33ff 	mov.w	r3, #4294967295
 800307e:	e008      	b.n	8003092 <LPS22HH_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8003080:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fa07 	bl	8003498 <lps22hh_from_lsb_to_celsius>
 800308a:	4602      	mov	r2, r0
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	70fb      	strb	r3, [r7, #3]
 80030a6:	4613      	mov	r3, r2
 80030a8:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f103 0020 	add.w	r0, r3, #32
 80030b0:	1cba      	adds	r2, r7, #2
 80030b2:	78f9      	ldrb	r1, [r7, #3]
 80030b4:	2301      	movs	r3, #1
 80030b6:	f000 f9c4 	bl	8003442 <lps22hh_write_reg>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 80030c0:	f04f 33ff 	mov.w	r3, #4294967295
 80030c4:	e000      	b.n	80030c8 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3320      	adds	r3, #32
 80030e2:	f107 020b 	add.w	r2, r7, #11
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fa5f 	bl	80035ac <lps22hh_data_rate_get>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	e03d      	b.n	8003176 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	2b07      	cmp	r3, #7
 80030fe:	d835      	bhi.n	800316c <LPS22HH_GetOutputDataRate+0x9c>
 8003100:	a201      	add	r2, pc, #4	@ (adr r2, 8003108 <LPS22HH_GetOutputDataRate+0x38>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	08003129 	.word	0x08003129
 800310c:	08003133 	.word	0x08003133
 8003110:	0800313d 	.word	0x0800313d
 8003114:	08003145 	.word	0x08003145
 8003118:	0800314d 	.word	0x0800314d
 800311c:	08003155 	.word	0x08003155
 8003120:	0800315d 	.word	0x0800315d
 8003124:	08003165 	.word	0x08003165
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
      break;
 8003130:	e020      	b.n	8003174 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003138:	601a      	str	r2, [r3, #0]
      break;
 800313a:	e01b      	b.n	8003174 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4a10      	ldr	r2, [pc, #64]	@ (8003180 <LPS22HH_GetOutputDataRate+0xb0>)
 8003140:	601a      	str	r2, [r3, #0]
      break;
 8003142:	e017      	b.n	8003174 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4a0f      	ldr	r2, [pc, #60]	@ (8003184 <LPS22HH_GetOutputDataRate+0xb4>)
 8003148:	601a      	str	r2, [r3, #0]
      break;
 800314a:	e013      	b.n	8003174 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4a0e      	ldr	r2, [pc, #56]	@ (8003188 <LPS22HH_GetOutputDataRate+0xb8>)
 8003150:	601a      	str	r2, [r3, #0]
      break;
 8003152:	e00f      	b.n	8003174 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4a0d      	ldr	r2, [pc, #52]	@ (800318c <LPS22HH_GetOutputDataRate+0xbc>)
 8003158:	601a      	str	r2, [r3, #0]
      break;
 800315a:	e00b      	b.n	8003174 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4a0c      	ldr	r2, [pc, #48]	@ (8003190 <LPS22HH_GetOutputDataRate+0xc0>)
 8003160:	601a      	str	r2, [r3, #0]
      break;
 8003162:	e007      	b.n	8003174 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4a0b      	ldr	r2, [pc, #44]	@ (8003194 <LPS22HH_GetOutputDataRate+0xc4>)
 8003168:	601a      	str	r2, [r3, #0]
      break;
 800316a:	e003      	b.n	8003174 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
 8003170:	60fb      	str	r3, [r7, #12]
      break;
 8003172:	bf00      	nop
  }

  return ret;
 8003174:	68fb      	ldr	r3, [r7, #12]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	41200000 	.word	0x41200000
 8003184:	41c80000 	.word	0x41c80000
 8003188:	42480000 	.word	0x42480000
 800318c:	42960000 	.word	0x42960000
 8003190:	42c80000 	.word	0x42c80000
 8003194:	43480000 	.word	0x43480000

08003198 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80031a2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80031a6:	6838      	ldr	r0, [r7, #0]
 80031a8:	f7fd ff84 	bl	80010b4 <__aeabi_fcmple>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <LPS22HH_SetOutputDataRate_When_Enabled+0x1e>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e02d      	b.n	8003212 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80031b6:	4928      	ldr	r1, [pc, #160]	@ (8003258 <LPS22HH_SetOutputDataRate_When_Enabled+0xc0>)
 80031b8:	6838      	ldr	r0, [r7, #0]
 80031ba:	f7fd ff7b 	bl	80010b4 <__aeabi_fcmple>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <LPS22HH_SetOutputDataRate_When_Enabled+0x30>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e024      	b.n	8003212 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80031c8:	4924      	ldr	r1, [pc, #144]	@ (800325c <LPS22HH_SetOutputDataRate_When_Enabled+0xc4>)
 80031ca:	6838      	ldr	r0, [r7, #0]
 80031cc:	f7fd ff72 	bl	80010b4 <__aeabi_fcmple>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <LPS22HH_SetOutputDataRate_When_Enabled+0x42>
 80031d6:	2303      	movs	r3, #3
 80031d8:	e01b      	b.n	8003212 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80031da:	4921      	ldr	r1, [pc, #132]	@ (8003260 <LPS22HH_SetOutputDataRate_When_Enabled+0xc8>)
 80031dc:	6838      	ldr	r0, [r7, #0]
 80031de:	f7fd ff69 	bl	80010b4 <__aeabi_fcmple>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <LPS22HH_SetOutputDataRate_When_Enabled+0x54>
 80031e8:	2304      	movs	r3, #4
 80031ea:	e012      	b.n	8003212 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80031ec:	491d      	ldr	r1, [pc, #116]	@ (8003264 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>)
 80031ee:	6838      	ldr	r0, [r7, #0]
 80031f0:	f7fd ff60 	bl	80010b4 <__aeabi_fcmple>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <LPS22HH_SetOutputDataRate_When_Enabled+0x66>
 80031fa:	2305      	movs	r3, #5
 80031fc:	e009      	b.n	8003212 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80031fe:	491a      	ldr	r1, [pc, #104]	@ (8003268 <LPS22HH_SetOutputDataRate_When_Enabled+0xd0>)
 8003200:	6838      	ldr	r0, [r7, #0]
 8003202:	f7fd ff57 	bl	80010b4 <__aeabi_fcmple>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <LPS22HH_SetOutputDataRate_When_Enabled+0x78>
 800320c:	2306      	movs	r3, #6
 800320e:	e000      	b.n	8003212 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003210:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8003212:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3320      	adds	r3, #32
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f977 	bl	8003510 <lps22hh_data_rate_set>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <LPS22HH_SetOutputDataRate_When_Enabled+0x96>
  {
    return LPS22HH_ERROR;
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
 800322c:	e00f      	b.n	800324e <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f103 0220 	add.w	r2, r3, #32
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3333      	adds	r3, #51	@ 0x33
 8003238:	4619      	mov	r1, r3
 800323a:	4610      	mov	r0, r2
 800323c:	f000 f9b6 	bl	80035ac <lps22hh_data_rate_get>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <LPS22HH_SetOutputDataRate_When_Enabled+0xb4>
  {
    return LPS22HH_ERROR;
 8003246:	f04f 33ff 	mov.w	r3, #4294967295
 800324a:	e000      	b.n	800324e <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  return LPS22HH_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	41200000 	.word	0x41200000
 800325c:	41c80000 	.word	0x41c80000
 8003260:	42480000 	.word	0x42480000
 8003264:	42960000 	.word	0x42960000
 8003268:	42c80000 	.word	0x42c80000

0800326c <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8003276:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800327a:	6838      	ldr	r0, [r7, #0]
 800327c:	f7fd ff1a 	bl	80010b4 <__aeabi_fcmple>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <LPS22HH_SetOutputDataRate_When_Disabled+0x1e>
 8003286:	2301      	movs	r3, #1
 8003288:	e02d      	b.n	80032e6 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800328a:	491b      	ldr	r1, [pc, #108]	@ (80032f8 <LPS22HH_SetOutputDataRate_When_Disabled+0x8c>)
 800328c:	6838      	ldr	r0, [r7, #0]
 800328e:	f7fd ff11 	bl	80010b4 <__aeabi_fcmple>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <LPS22HH_SetOutputDataRate_When_Disabled+0x30>
 8003298:	2302      	movs	r3, #2
 800329a:	e024      	b.n	80032e6 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800329c:	4917      	ldr	r1, [pc, #92]	@ (80032fc <LPS22HH_SetOutputDataRate_When_Disabled+0x90>)
 800329e:	6838      	ldr	r0, [r7, #0]
 80032a0:	f7fd ff08 	bl	80010b4 <__aeabi_fcmple>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <LPS22HH_SetOutputDataRate_When_Disabled+0x42>
 80032aa:	2303      	movs	r3, #3
 80032ac:	e01b      	b.n	80032e6 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80032ae:	4914      	ldr	r1, [pc, #80]	@ (8003300 <LPS22HH_SetOutputDataRate_When_Disabled+0x94>)
 80032b0:	6838      	ldr	r0, [r7, #0]
 80032b2:	f7fd feff 	bl	80010b4 <__aeabi_fcmple>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <LPS22HH_SetOutputDataRate_When_Disabled+0x54>
 80032bc:	2304      	movs	r3, #4
 80032be:	e012      	b.n	80032e6 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80032c0:	4910      	ldr	r1, [pc, #64]	@ (8003304 <LPS22HH_SetOutputDataRate_When_Disabled+0x98>)
 80032c2:	6838      	ldr	r0, [r7, #0]
 80032c4:	f7fd fef6 	bl	80010b4 <__aeabi_fcmple>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <LPS22HH_SetOutputDataRate_When_Disabled+0x66>
 80032ce:	2305      	movs	r3, #5
 80032d0:	e009      	b.n	80032e6 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80032d2:	490d      	ldr	r1, [pc, #52]	@ (8003308 <LPS22HH_SetOutputDataRate_When_Disabled+0x9c>)
 80032d4:	6838      	ldr	r0, [r7, #0]
 80032d6:	f7fd feed 	bl	80010b4 <__aeabi_fcmple>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <LPS22HH_SetOutputDataRate_When_Disabled+0x78>
 80032e0:	2306      	movs	r3, #6
 80032e2:	e000      	b.n	80032e6 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80032e4:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	41200000 	.word	0x41200000
 80032fc:	41c80000 	.word	0x41c80000
 8003300:	42480000 	.word	0x42480000
 8003304:	42960000 	.word	0x42960000
 8003308:	42c80000 	.word	0x42c80000

0800330c <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d00b      	beq.n	8003334 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3320      	adds	r3, #32
 8003320:	2111      	movs	r1, #17
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fa92 	bl	800384c <lps22hh_i3c_interface_set>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 800332e:	f04f 33ff 	mov.w	r3, #4294967295
 8003332:	e034      	b.n	800339e <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3320      	adds	r3, #32
 8003338:	2110      	movs	r1, #16
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f8e8 	bl	8003510 <lps22hh_data_rate_set>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 8003346:	f04f 33ff 	mov.w	r3, #4294967295
 800334a:	e028      	b.n	800339e <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3320      	adds	r3, #32
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fa54 	bl	8003800 <lps22hh_lp_bandwidth_set>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295
 8003362:	e01c      	b.n	800339e <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3320      	adds	r3, #32
 8003368:	2101      	movs	r1, #1
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f8aa 	bl	80034c4 <lps22hh_block_data_update_set>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 8003376:	f04f 33ff 	mov.w	r3, #4294967295
 800337a:	e010      	b.n	800339e <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3320      	adds	r3, #32
 8003380:	2101      	movs	r1, #1
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fa16 	bl	80037b4 <lps22hh_auto_increment_set>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295
 8003392:	e004      	b.n	800339e <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2203      	movs	r2, #3
 8003398:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22HH_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80033a6:	b590      	push	{r4, r7, lr}
 80033a8:	b087      	sub	sp, #28
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	461a      	mov	r2, r3
 80033b2:	460b      	mov	r3, r1
 80033b4:	72fb      	strb	r3, [r7, #11]
 80033b6:	4613      	mov	r3, r2
 80033b8:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	695c      	ldr	r4, [r3, #20]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	7b1b      	ldrb	r3, [r3, #12]
 80033c6:	4618      	mov	r0, r3
 80033c8:	7afb      	ldrb	r3, [r7, #11]
 80033ca:	b299      	uxth	r1, r3
 80033cc:	893b      	ldrh	r3, [r7, #8]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	47a0      	blx	r4
 80033d2:	4603      	mov	r3, r0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	371c      	adds	r7, #28
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd90      	pop	{r4, r7, pc}

080033dc <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	461a      	mov	r2, r3
 80033e8:	460b      	mov	r3, r1
 80033ea:	72fb      	strb	r3, [r7, #11]
 80033ec:	4613      	mov	r3, r2
 80033ee:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	691c      	ldr	r4, [r3, #16]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	7b1b      	ldrb	r3, [r3, #12]
 80033fc:	4618      	mov	r0, r3
 80033fe:	7afb      	ldrb	r3, [r7, #11]
 8003400:	b299      	uxth	r1, r3
 8003402:	893b      	ldrh	r3, [r7, #8]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	47a0      	blx	r4
 8003408:	4603      	mov	r3, r0
}
 800340a:	4618      	mov	r0, r3
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	bd90      	pop	{r4, r7, pc}

08003412 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003412:	b590      	push	{r4, r7, lr}
 8003414:	b087      	sub	sp, #28
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	461a      	mov	r2, r3
 800341e:	460b      	mov	r3, r1
 8003420:	72fb      	strb	r3, [r7, #11]
 8003422:	4613      	mov	r3, r2
 8003424:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685c      	ldr	r4, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	68d8      	ldr	r0, [r3, #12]
 800342e:	893b      	ldrh	r3, [r7, #8]
 8003430:	7af9      	ldrb	r1, [r7, #11]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	47a0      	blx	r4
 8003436:	6178      	str	r0, [r7, #20]

  return ret;
 8003438:	697b      	ldr	r3, [r7, #20]
}
 800343a:	4618      	mov	r0, r3
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	bd90      	pop	{r4, r7, pc}

08003442 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8003442:	b590      	push	{r4, r7, lr}
 8003444:	b087      	sub	sp, #28
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	461a      	mov	r2, r3
 800344e:	460b      	mov	r3, r1
 8003450:	72fb      	strb	r3, [r7, #11]
 8003452:	4613      	mov	r3, r2
 8003454:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681c      	ldr	r4, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	68d8      	ldr	r0, [r3, #12]
 800345e:	893b      	ldrh	r3, [r7, #8]
 8003460:	7af9      	ldrb	r1, [r7, #11]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	47a0      	blx	r4
 8003466:	6178      	str	r0, [r7, #20]

  return ret;
 8003468:	697b      	ldr	r3, [r7, #20]
}
 800346a:	4618      	mov	r0, r3
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	bd90      	pop	{r4, r7, pc}

08003472 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd fc1a 	bl	8000cb4 <__aeabi_ui2f>
 8003480:	4603      	mov	r3, r0
 8003482:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd fd20 	bl	8000ecc <__aeabi_fdiv>
 800348c:	4603      	mov	r3, r0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 80034a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd fc08 	bl	8000cbc <__aeabi_i2f>
 80034ac:	4603      	mov	r3, r0
 80034ae:	4904      	ldr	r1, [pc, #16]	@ (80034c0 <lps22hh_from_lsb_to_celsius+0x28>)
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fd fd0b 	bl	8000ecc <__aeabi_fdiv>
 80034b6:	4603      	mov	r3, r0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	42c80000 	.word	0x42c80000

080034c4 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80034d0:	f107 0208 	add.w	r2, r7, #8
 80034d4:	2301      	movs	r3, #1
 80034d6:	2110      	movs	r1, #16
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ff9a 	bl	8003412 <lps22hh_read_reg>
 80034de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10f      	bne.n	8003506 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	7a3b      	ldrb	r3, [r7, #8]
 80034f0:	f362 0341 	bfi	r3, r2, #1, #1
 80034f4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80034f6:	f107 0208 	add.w	r2, r7, #8
 80034fa:	2301      	movs	r3, #1
 80034fc:	2110      	movs	r1, #16
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ff9f 	bl	8003442 <lps22hh_write_reg>
 8003504:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003506:	68fb      	ldr	r3, [r7, #12]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800351c:	f107 0210 	add.w	r2, r7, #16
 8003520:	2301      	movs	r3, #1
 8003522:	2110      	movs	r1, #16
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff ff74 	bl	8003412 <lps22hh_read_reg>
 800352a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d107      	bne.n	8003542 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003532:	f107 020c 	add.w	r2, r7, #12
 8003536:	2301      	movs	r3, #1
 8003538:	2111      	movs	r1, #17
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ff69 	bl	8003412 <lps22hh_read_reg>
 8003540:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10f      	bne.n	8003568 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	b2da      	uxtb	r2, r3
 8003550:	7c3b      	ldrb	r3, [r7, #16]
 8003552:	f362 1306 	bfi	r3, r2, #4, #3
 8003556:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003558:	f107 0210 	add.w	r2, r7, #16
 800355c:	2301      	movs	r3, #1
 800355e:	2110      	movs	r1, #16
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ff6e 	bl	8003442 <lps22hh_write_reg>
 8003566:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d119      	bne.n	80035a2 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	b2da      	uxtb	r2, r3
 8003578:	7b3b      	ldrb	r3, [r7, #12]
 800357a:	f362 0341 	bfi	r3, r2, #1, #1
 800357e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	08db      	lsrs	r3, r3, #3
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	b2da      	uxtb	r2, r3
 800358a:	7b3b      	ldrb	r3, [r7, #12]
 800358c:	f362 0300 	bfi	r3, r2, #0, #1
 8003590:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003592:	f107 020c 	add.w	r2, r7, #12
 8003596:	2301      	movs	r3, #1
 8003598:	2111      	movs	r1, #17
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ff51 	bl	8003442 <lps22hh_write_reg>
 80035a0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80035a2:	697b      	ldr	r3, [r7, #20]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80035b6:	f107 0210 	add.w	r2, r7, #16
 80035ba:	2301      	movs	r3, #1
 80035bc:	2110      	movs	r1, #16
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ff27 	bl	8003412 <lps22hh_read_reg>
 80035c4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d107      	bne.n	80035dc <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80035cc:	f107 020c 	add.w	r2, r7, #12
 80035d0:	2301      	movs	r3, #1
 80035d2:	2111      	movs	r1, #17
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff ff1c 	bl	8003412 <lps22hh_read_reg>
 80035da:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 8086 	bne.w	80036f0 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80035e4:	f107 020c 	add.w	r2, r7, #12
 80035e8:	2301      	movs	r3, #1
 80035ea:	2111      	movs	r1, #17
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff ff10 	bl	8003412 <lps22hh_read_reg>
 80035f2:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80035f4:	7b3b      	ldrb	r3, [r7, #12]
 80035f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	011a      	lsls	r2, r3, #4
 80035fe:	7b3b      	ldrb	r3, [r7, #12]
 8003600:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003604:	b2db      	uxtb	r3, r3
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
             ctrl_reg1.odr))
 800360a:	7c3a      	ldrb	r2, [r7, #16]
 800360c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003610:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8003612:	4413      	add	r3, r2
 8003614:	2b15      	cmp	r3, #21
 8003616:	d867      	bhi.n	80036e8 <lps22hh_data_rate_get+0x13c>
 8003618:	a201      	add	r2, pc, #4	@ (adr r2, 8003620 <lps22hh_data_rate_get+0x74>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003679 	.word	0x08003679
 8003624:	08003689 	.word	0x08003689
 8003628:	08003691 	.word	0x08003691
 800362c:	08003699 	.word	0x08003699
 8003630:	080036a1 	.word	0x080036a1
 8003634:	080036a9 	.word	0x080036a9
 8003638:	080036d9 	.word	0x080036d9
 800363c:	080036e1 	.word	0x080036e1
 8003640:	08003681 	.word	0x08003681
 8003644:	080036e9 	.word	0x080036e9
 8003648:	080036e9 	.word	0x080036e9
 800364c:	080036e9 	.word	0x080036e9
 8003650:	080036e9 	.word	0x080036e9
 8003654:	080036e9 	.word	0x080036e9
 8003658:	080036e9 	.word	0x080036e9
 800365c:	080036e9 	.word	0x080036e9
 8003660:	080036e9 	.word	0x080036e9
 8003664:	080036b1 	.word	0x080036b1
 8003668:	080036b9 	.word	0x080036b9
 800366c:	080036c1 	.word	0x080036c1
 8003670:	080036c9 	.word	0x080036c9
 8003674:	080036d1 	.word	0x080036d1
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
        break;
 800367e:	e037      	b.n	80036f0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2208      	movs	r2, #8
 8003684:	701a      	strb	r2, [r3, #0]
        break;
 8003686:	e033      	b.n	80036f0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
        break;
 800368e:	e02f      	b.n	80036f0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2202      	movs	r2, #2
 8003694:	701a      	strb	r2, [r3, #0]
        break;
 8003696:	e02b      	b.n	80036f0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2203      	movs	r2, #3
 800369c:	701a      	strb	r2, [r3, #0]
        break;
 800369e:	e027      	b.n	80036f0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2204      	movs	r2, #4
 80036a4:	701a      	strb	r2, [r3, #0]
        break;
 80036a6:	e023      	b.n	80036f0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2205      	movs	r2, #5
 80036ac:	701a      	strb	r2, [r3, #0]
        break;
 80036ae:	e01f      	b.n	80036f0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2211      	movs	r2, #17
 80036b4:	701a      	strb	r2, [r3, #0]
        break;
 80036b6:	e01b      	b.n	80036f0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2212      	movs	r2, #18
 80036bc:	701a      	strb	r2, [r3, #0]
        break;
 80036be:	e017      	b.n	80036f0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2213      	movs	r2, #19
 80036c4:	701a      	strb	r2, [r3, #0]
        break;
 80036c6:	e013      	b.n	80036f0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2214      	movs	r2, #20
 80036cc:	701a      	strb	r2, [r3, #0]
        break;
 80036ce:	e00f      	b.n	80036f0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2215      	movs	r2, #21
 80036d4:	701a      	strb	r2, [r3, #0]
        break;
 80036d6:	e00b      	b.n	80036f0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2206      	movs	r2, #6
 80036dc:	701a      	strb	r2, [r3, #0]
        break;
 80036de:	e007      	b.n	80036f0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2207      	movs	r2, #7
 80036e4:	701a      	strb	r2, [r3, #0]
        break;
 80036e6:	e003      	b.n	80036f0 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
        break;
 80036ee:	bf00      	nop
    }
  }

  return ret;
 80036f0:	697b      	ldr	r3, [r7, #20]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop

080036fc <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8003706:	f107 0208 	add.w	r2, r7, #8
 800370a:	2303      	movs	r3, #3
 800370c:	2128      	movs	r1, #40	@ 0x28
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff fe7f 	bl	8003412 <lps22hh_read_reg>
 8003714:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8003716:	7abb      	ldrb	r3, [r7, #10]
 8003718:	461a      	mov	r2, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	7a7a      	ldrb	r2, [r7, #9]
 8003726:	441a      	add	r2, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	7a3a      	ldrb	r2, [r7, #8]
 8003734:	441a      	add	r2, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	021a      	lsls	r2, r3, #8
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	601a      	str	r2, [r3, #0]

  return ret;
 8003744:	68fb      	ldr	r3, [r7, #12]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8003758:	f107 0208 	add.w	r2, r7, #8
 800375c:	2302      	movs	r3, #2
 800375e:	212b      	movs	r1, #43	@ 0x2b
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff fe56 	bl	8003412 <lps22hh_read_reg>
 8003766:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8003768:	7a7b      	ldrb	r3, [r7, #9]
 800376a:	b21a      	sxth	r2, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003776:	b29b      	uxth	r3, r3
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	b29b      	uxth	r3, r3
 800377c:	7a3a      	ldrb	r2, [r7, #8]
 800377e:	4413      	add	r3, r2
 8003780:	b29b      	uxth	r3, r3
 8003782:	b21a      	sxth	r2, r3
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	801a      	strh	r2, [r3, #0]

  return ret;
 8003788:	68fb      	ldr	r3, [r7, #12]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800379c:	2301      	movs	r3, #1
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	210f      	movs	r1, #15
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff fe35 	bl	8003412 <lps22hh_read_reg>
 80037a8:	60f8      	str	r0, [r7, #12]

  return ret;
 80037aa:	68fb      	ldr	r3, [r7, #12]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80037c0:	f107 0208 	add.w	r2, r7, #8
 80037c4:	2301      	movs	r3, #1
 80037c6:	2111      	movs	r1, #17
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff fe22 	bl	8003412 <lps22hh_read_reg>
 80037ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10f      	bne.n	80037f6 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	7a3b      	ldrb	r3, [r7, #8]
 80037e0:	f362 1304 	bfi	r3, r2, #4, #1
 80037e4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80037e6:	f107 0208 	add.w	r2, r7, #8
 80037ea:	2301      	movs	r3, #1
 80037ec:	2111      	movs	r1, #17
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff fe27 	bl	8003442 <lps22hh_write_reg>
 80037f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80037f6:	68fb      	ldr	r3, [r7, #12]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800380c:	f107 0208 	add.w	r2, r7, #8
 8003810:	2301      	movs	r3, #1
 8003812:	2110      	movs	r1, #16
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fdfc 	bl	8003412 <lps22hh_read_reg>
 800381a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10f      	bne.n	8003842 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	b2da      	uxtb	r2, r3
 800382a:	7a3b      	ldrb	r3, [r7, #8]
 800382c:	f362 0383 	bfi	r3, r2, #2, #2
 8003830:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003832:	f107 0208 	add.w	r2, r7, #8
 8003836:	2301      	movs	r3, #1
 8003838:	2110      	movs	r1, #16
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff fe01 	bl	8003442 <lps22hh_write_reg>
 8003840:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003842:	68fb      	ldr	r3, [r7, #12]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8003858:	f107 0208 	add.w	r2, r7, #8
 800385c:	2301      	movs	r3, #1
 800385e:	210e      	movs	r1, #14
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff fdd6 	bl	8003412 <lps22hh_read_reg>
 8003866:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	b2da      	uxtb	r2, r3
 8003876:	7a3b      	ldrb	r3, [r7, #8]
 8003878:	f362 0341 	bfi	r3, r2, #1, #1
 800387c:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	b2da      	uxtb	r2, r3
 8003888:	7a3b      	ldrb	r3, [r7, #8]
 800388a:	f362 13c7 	bfi	r3, r2, #7, #1
 800388e:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8003890:	f107 0208 	add.w	r2, r7, #8
 8003894:	2301      	movs	r3, #1
 8003896:	210e      	movs	r1, #14
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff fdd2 	bl	8003442 <lps22hh_write_reg>
 800389e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80038a0:	68fb      	ldr	r3, [r7, #12]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d103      	bne.n	80038c4 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 80038bc:	f04f 33ff 	mov.w	r3, #4294967295
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	e034      	b.n	800392e <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	7b1a      	ldrb	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003938 <STTS751_RegisterBusIO+0x8c>)
 8003900:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a0d      	ldr	r2, [pc, #52]	@ (800393c <STTS751_RegisterBusIO+0x90>)
 8003906:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d004      	beq.n	8003928 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4798      	blx	r3
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	e002      	b.n	800392e <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 8003928:	f04f 33ff 	mov.w	r3, #4294967295
 800392c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800392e:	68fb      	ldr	r3, [r7, #12]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	08003da5 	.word	0x08003da5
 800393c:	08003e13 	.word	0x08003e13

08003940 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800394e:	2b00      	cmp	r3, #0
 8003950:	d127      	bne.n	80039a2 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3320      	adds	r3, #32
 8003956:	2101      	movs	r1, #1
 8003958:	4618      	mov	r0, r3
 800395a:	f000 fc39 	bl	80041d0 <stts751_pin_event_route_set>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8003964:	f04f 33ff 	mov.w	r3, #4294967295
 8003968:	e020      	b.n	80039ac <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003970:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3320      	adds	r3, #32
 8003976:	2103      	movs	r1, #3
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fb9d 	bl	80040b8 <stts751_resolution_set>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8003984:	f04f 33ff 	mov.w	r3, #4294967295
 8003988:	e010      	b.n	80039ac <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3320      	adds	r3, #32
 800398e:	2180      	movs	r1, #128	@ 0x80
 8003990:	4618      	mov	r0, r3
 8003992:	f000 faba 	bl	8003f0a <stts751_temp_data_rate_set>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 800399c:	f04f 33ff 	mov.w	r3, #4294967295
 80039a0:	e004      	b.n	80039ac <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d108      	bne.n	80039d8 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f874 	bl	8003ab4 <STTS751_TEMP_Disable>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
 80039d6:	e004      	b.n	80039e2 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3320      	adds	r3, #32
 80039f8:	f107 020c 	add.w	r2, r7, #12
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fc0c 	bl	800421c <stts751_device_id_get>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 8003a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0e:	e003      	b.n	8003a18 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8003a10:	7b7a      	ldrb	r2, [r7, #13]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2200      	movs	r2, #0
 8003a34:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2200      	movs	r2, #0
 8003a46:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 8003a56:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e010      	b.n	8003aac <STTS751_TEMP_Enable+0x38>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f8b5 	bl	8003c00 <STTS751_TEMP_SetOutputDataRate>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <STTS751_TEMP_Enable+0x2e>
  {
    return STTS751_ERROR;
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa0:	e004      	b.n	8003aac <STTS751_TEMP_Enable+0x38>
  }

  pObj->temp_is_enabled = 1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e01c      	b.n	8003b04 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3334      	adds	r3, #52	@ 0x34
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f81b 	bl	8003b0c <STTS751_TEMP_GetOutputDataRate>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8003adc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae0:	e010      	b.n	8003b04 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3320      	adds	r3, #32
 8003ae6:	2180      	movs	r1, #128	@ 0x80
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fa0e 	bl	8003f0a <stts751_temp_data_rate_set>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295
 8003af8:	e004      	b.n	8003b04 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3320      	adds	r3, #32
 8003b1e:	f107 020b 	add.w	r2, r7, #11
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fa47 	bl	8003fb8 <stts751_temp_data_rate_get>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295
 8003b34:	e060      	b.n	8003bf8 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 8003b36:	7afb      	ldrb	r3, [r7, #11]
 8003b38:	2b90      	cmp	r3, #144	@ 0x90
 8003b3a:	d021      	beq.n	8003b80 <STTS751_TEMP_GetOutputDataRate+0x74>
 8003b3c:	2b90      	cmp	r3, #144	@ 0x90
 8003b3e:	dc56      	bgt.n	8003bee <STTS751_TEMP_GetOutputDataRate+0xe2>
 8003b40:	2b09      	cmp	r3, #9
 8003b42:	dc1b      	bgt.n	8003b7c <STTS751_TEMP_GetOutputDataRate+0x70>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	db52      	blt.n	8003bee <STTS751_TEMP_GetOutputDataRate+0xe2>
 8003b48:	2b09      	cmp	r3, #9
 8003b4a:	d850      	bhi.n	8003bee <STTS751_TEMP_GetOutputDataRate+0xe2>
 8003b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b54 <STTS751_TEMP_GetOutputDataRate+0x48>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b8b 	.word	0x08003b8b
 8003b58:	08003b95 	.word	0x08003b95
 8003b5c:	08003b9f 	.word	0x08003b9f
 8003b60:	08003ba9 	.word	0x08003ba9
 8003b64:	08003bb3 	.word	0x08003bb3
 8003b68:	08003bbd 	.word	0x08003bbd
 8003b6c:	08003bc7 	.word	0x08003bc7
 8003b70:	08003bd1 	.word	0x08003bd1
 8003b74:	08003bdb 	.word	0x08003bdb
 8003b78:	08003be5 	.word	0x08003be5
 8003b7c:	2b80      	cmp	r3, #128	@ 0x80
 8003b7e:	d136      	bne.n	8003bee <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
      break;
 8003b88:	e035      	b.n	8003bf6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	f04f 5276 	mov.w	r2, #1031798784	@ 0x3d800000
 8003b90:	601a      	str	r2, [r3, #0]
      break;
 8003b92:	e030      	b.n	8003bf6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 8003b9a:	601a      	str	r2, [r3, #0]
      break;
 8003b9c:	e02b      	b.n	8003bf6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8003ba4:	601a      	str	r2, [r3, #0]
      break;
 8003ba6:	e026      	b.n	8003bf6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003bae:	601a      	str	r2, [r3, #0]
      break;
 8003bb0:	e021      	b.n	8003bf6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003bb8:	601a      	str	r2, [r3, #0]
      break;
 8003bba:	e01c      	b.n	8003bf6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003bc2:	601a      	str	r2, [r3, #0]
      break;
 8003bc4:	e017      	b.n	8003bf6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003bcc:	601a      	str	r2, [r3, #0]
      break;
 8003bce:	e012      	b.n	8003bf6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8003bd6:	601a      	str	r2, [r3, #0]
      break;
 8003bd8:	e00d      	b.n	8003bf6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 8003be0:	601a      	str	r2, [r3, #0]
      break;
 8003be2:	e008      	b.n	8003bf6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 8003bea:	601a      	str	r2, [r3, #0]
      break;
 8003bec:	e003      	b.n	8003bf6 <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8003bee:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf2:	60fb      	str	r3, [r7, #12]
      break;
 8003bf4:	bf00      	nop
  }

  return ret;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3320      	adds	r3, #32
 8003c0e:	f107 020e 	add.w	r2, r7, #14
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fa75 	bl	8004104 <stts751_resolution_get>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <STTS751_TEMP_SetOutputDataRate+0x26>
  {
    return STTS751_ERROR;
 8003c20:	f04f 33ff 	mov.w	r3, #4294967295
 8003c24:	e09a      	b.n	8003d5c <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8003c26:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8003c2a:	6838      	ldr	r0, [r7, #0]
 8003c2c:	f7fd fa2e 	bl	800108c <__aeabi_fcmpeq>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00e      	beq.n	8003c54 <STTS751_TEMP_SetOutputDataRate+0x54>
 8003c36:	7bbb      	ldrb	r3, [r7, #14]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d10b      	bne.n	8003c54 <STTS751_TEMP_SetOutputDataRate+0x54>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3320      	adds	r3, #32
 8003c40:	2101      	movs	r1, #1
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fa38 	bl	80040b8 <stts751_resolution_set>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <STTS751_TEMP_SetOutputDataRate+0x54>
    {
      return STTS751_ERROR;
 8003c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c52:	e083      	b.n	8003d5c <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8003c54:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8003c58:	6838      	ldr	r0, [r7, #0]
 8003c5a:	f7fd fa17 	bl	800108c <__aeabi_fcmpeq>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d011      	beq.n	8003c88 <STTS751_TEMP_SetOutputDataRate+0x88>
 8003c64:	7bbb      	ldrb	r3, [r7, #14]
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d002      	beq.n	8003c70 <STTS751_TEMP_SetOutputDataRate+0x70>
 8003c6a:	7bbb      	ldrb	r3, [r7, #14]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d10b      	bne.n	8003c88 <STTS751_TEMP_SetOutputDataRate+0x88>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3320      	adds	r3, #32
 8003c74:	2100      	movs	r1, #0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fa1e 	bl	80040b8 <stts751_resolution_set>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <STTS751_TEMP_SetOutputDataRate+0x88>
    {
      return STTS751_ERROR;
 8003c82:	f04f 33ff 	mov.w	r3, #4294967295
 8003c86:	e069      	b.n	8003d5c <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8003c88:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8003c8c:	6838      	ldr	r0, [r7, #0]
 8003c8e:	f7fd fa11 	bl	80010b4 <__aeabi_fcmple>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <STTS751_TEMP_SetOutputDataRate+0x9c>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e050      	b.n	8003d3e <STTS751_TEMP_SetOutputDataRate+0x13e>
 8003c9c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8003ca0:	6838      	ldr	r0, [r7, #0]
 8003ca2:	f7fd fa07 	bl	80010b4 <__aeabi_fcmple>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <STTS751_TEMP_SetOutputDataRate+0xb0>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e046      	b.n	8003d3e <STTS751_TEMP_SetOutputDataRate+0x13e>
 8003cb0:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8003cb4:	6838      	ldr	r0, [r7, #0]
 8003cb6:	f7fd f9fd 	bl	80010b4 <__aeabi_fcmple>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <STTS751_TEMP_SetOutputDataRate+0xc4>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e03c      	b.n	8003d3e <STTS751_TEMP_SetOutputDataRate+0x13e>
 8003cc4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003cc8:	6838      	ldr	r0, [r7, #0]
 8003cca:	f7fd f9f3 	bl	80010b4 <__aeabi_fcmple>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <STTS751_TEMP_SetOutputDataRate+0xd8>
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e032      	b.n	8003d3e <STTS751_TEMP_SetOutputDataRate+0x13e>
 8003cd8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003cdc:	6838      	ldr	r0, [r7, #0]
 8003cde:	f7fd f9e9 	bl	80010b4 <__aeabi_fcmple>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <STTS751_TEMP_SetOutputDataRate+0xec>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	e028      	b.n	8003d3e <STTS751_TEMP_SetOutputDataRate+0x13e>
 8003cec:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003cf0:	6838      	ldr	r0, [r7, #0]
 8003cf2:	f7fd f9df 	bl	80010b4 <__aeabi_fcmple>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <STTS751_TEMP_SetOutputDataRate+0x100>
 8003cfc:	2305      	movs	r3, #5
 8003cfe:	e01e      	b.n	8003d3e <STTS751_TEMP_SetOutputDataRate+0x13e>
 8003d00:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8003d04:	6838      	ldr	r0, [r7, #0]
 8003d06:	f7fd f9d5 	bl	80010b4 <__aeabi_fcmple>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <STTS751_TEMP_SetOutputDataRate+0x114>
 8003d10:	2306      	movs	r3, #6
 8003d12:	e014      	b.n	8003d3e <STTS751_TEMP_SetOutputDataRate+0x13e>
 8003d14:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8003d18:	6838      	ldr	r0, [r7, #0]
 8003d1a:	f7fd f9cb 	bl	80010b4 <__aeabi_fcmple>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <STTS751_TEMP_SetOutputDataRate+0x128>
 8003d24:	2307      	movs	r3, #7
 8003d26:	e00a      	b.n	8003d3e <STTS751_TEMP_SetOutputDataRate+0x13e>
 8003d28:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8003d2c:	6838      	ldr	r0, [r7, #0]
 8003d2e:	f7fd f9c1 	bl	80010b4 <__aeabi_fcmple>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <STTS751_TEMP_SetOutputDataRate+0x13c>
 8003d38:	2308      	movs	r3, #8
 8003d3a:	e000      	b.n	8003d3e <STTS751_TEMP_SetOutputDataRate+0x13e>
 8003d3c:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 8003d3e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3320      	adds	r3, #32
 8003d44:	7bfa      	ldrb	r2, [r7, #15]
 8003d46:	4611      	mov	r1, r2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 f8de 	bl	8003f0a <stts751_temp_data_rate_set>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <STTS751_TEMP_SetOutputDataRate+0x15a>
  {
    return STTS751_ERROR;
 8003d54:	f04f 33ff 	mov.w	r3, #4294967295
 8003d58:	e000      	b.n	8003d5c <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  return STTS751_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3320      	adds	r3, #32
 8003d72:	f107 020e 	add.w	r2, r7, #14
 8003d76:	4611      	mov	r1, r2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 f9fb 	bl	8004174 <stts751_temperature_raw_get>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	e008      	b.n	8003d9c <STTS751_TEMP_GetTemperature+0x38>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8003d8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f8a6 	bl	8003ee0 <stts751_from_lsb_to_celsius>
 8003d94:	4602      	mov	r2, r0
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	601a      	str	r2, [r3, #0]

  return STTS751_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003da4:	b590      	push	{r4, r7, lr}
 8003da6:	b089      	sub	sp, #36	@ 0x24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	607a      	str	r2, [r7, #4]
 8003dae:	461a      	mov	r2, r3
 8003db0:	460b      	mov	r3, r1
 8003db2:	72fb      	strb	r3, [r7, #11]
 8003db4:	4613      	mov	r3, r2
 8003db6:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d11f      	bne.n	8003e08 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	83fb      	strh	r3, [r7, #30]
 8003dcc:	e018      	b.n	8003e00 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	695c      	ldr	r4, [r3, #20]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	7b1b      	ldrb	r3, [r3, #12]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	7afb      	ldrb	r3, [r7, #11]
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	8bfb      	ldrh	r3, [r7, #30]
 8003dde:	4413      	add	r3, r2
 8003de0:	b299      	uxth	r1, r3
 8003de2:	8bfb      	ldrh	r3, [r7, #30]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	441a      	add	r2, r3
 8003de8:	2301      	movs	r3, #1
 8003dea:	47a0      	blx	r4
 8003dec:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8003df4:	f04f 33ff 	mov.w	r3, #4294967295
 8003df8:	e007      	b.n	8003e0a <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8003dfa:	8bfb      	ldrh	r3, [r7, #30]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	83fb      	strh	r3, [r7, #30]
 8003e00:	8bfa      	ldrh	r2, [r7, #30]
 8003e02:	893b      	ldrh	r3, [r7, #8]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d3e2      	bcc.n	8003dce <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8003e08:	69bb      	ldr	r3, [r7, #24]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3724      	adds	r7, #36	@ 0x24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd90      	pop	{r4, r7, pc}

08003e12 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003e12:	b590      	push	{r4, r7, lr}
 8003e14:	b089      	sub	sp, #36	@ 0x24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	460b      	mov	r3, r1
 8003e20:	72fb      	strb	r3, [r7, #11]
 8003e22:	4613      	mov	r3, r2
 8003e24:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d11f      	bne.n	8003e76 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8003e36:	2300      	movs	r3, #0
 8003e38:	83fb      	strh	r3, [r7, #30]
 8003e3a:	e018      	b.n	8003e6e <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	691c      	ldr	r4, [r3, #16]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	7b1b      	ldrb	r3, [r3, #12]
 8003e44:	4618      	mov	r0, r3
 8003e46:	7afb      	ldrb	r3, [r7, #11]
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	8bfb      	ldrh	r3, [r7, #30]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	b299      	uxth	r1, r3
 8003e50:	8bfb      	ldrh	r3, [r7, #30]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	441a      	add	r2, r3
 8003e56:	2301      	movs	r3, #1
 8003e58:	47a0      	blx	r4
 8003e5a:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8003e62:	f04f 33ff 	mov.w	r3, #4294967295
 8003e66:	e007      	b.n	8003e78 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8003e68:	8bfb      	ldrh	r3, [r7, #30]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	83fb      	strh	r3, [r7, #30]
 8003e6e:	8bfa      	ldrh	r2, [r7, #30]
 8003e70:	893b      	ldrh	r3, [r7, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d3e2      	bcc.n	8003e3c <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8003e76:	69bb      	ldr	r3, [r7, #24]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3724      	adds	r7, #36	@ 0x24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd90      	pop	{r4, r7, pc}

08003e80 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	72fb      	strb	r3, [r7, #11]
 8003e90:	4613      	mov	r3, r2
 8003e92:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685c      	ldr	r4, [r3, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68d8      	ldr	r0, [r3, #12]
 8003e9c:	893b      	ldrh	r3, [r7, #8]
 8003e9e:	7af9      	ldrb	r1, [r7, #11]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	47a0      	blx	r4
 8003ea4:	6178      	str	r0, [r7, #20]

  return ret;
 8003ea6:	697b      	ldr	r3, [r7, #20]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd90      	pop	{r4, r7, pc}

08003eb0 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	72fb      	strb	r3, [r7, #11]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681c      	ldr	r4, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68d8      	ldr	r0, [r3, #12]
 8003ecc:	893b      	ldrh	r3, [r7, #8]
 8003ece:	7af9      	ldrb	r1, [r7, #11]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	47a0      	blx	r4
 8003ed4:	6178      	str	r0, [r7, #20]

  return ret;
 8003ed6:	697b      	ldr	r3, [r7, #20]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd90      	pop	{r4, r7, pc}

08003ee0 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8003eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fc fee4 	bl	8000cbc <__aeabi_i2f>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc ffe6 	bl	8000ecc <__aeabi_fdiv>
 8003f00:	4603      	mov	r3, r0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b086      	sub	sp, #24
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	460b      	mov	r3, r1
 8003f14:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8003f16:	23aa      	movs	r3, #170	@ 0xaa
 8003f18:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8003f1a:	f107 020c 	add.w	r2, r7, #12
 8003f1e:	2301      	movs	r3, #1
 8003f20:	2104      	movs	r1, #4
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ffac 	bl	8003e80 <stts751_read_reg>
 8003f28:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10f      	bne.n	8003f50 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	7b3b      	ldrb	r3, [r7, #12]
 8003f3a:	f362 0303 	bfi	r3, r2, #0, #4
 8003f3e:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8003f40:	f107 020c 	add.w	r2, r7, #12
 8003f44:	2301      	movs	r3, #1
 8003f46:	2104      	movs	r1, #4
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ffb1 	bl	8003eb0 <stts751_write_reg>
 8003f4e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d107      	bne.n	8003f66 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8003f56:	f107 0210 	add.w	r2, r7, #16
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	2103      	movs	r1, #3
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ff8e 	bl	8003e80 <stts751_read_reg>
 8003f64:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d111      	bne.n	8003f90 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	09db      	lsrs	r3, r3, #7
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	7c3b      	ldrb	r3, [r7, #16]
 8003f7a:	f362 1386 	bfi	r3, r2, #6, #1
 8003f7e:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8003f80:	f107 0210 	add.w	r2, r7, #16
 8003f84:	2301      	movs	r3, #1
 8003f86:	2103      	movs	r1, #3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff ff91 	bl	8003eb0 <stts751_write_reg>
 8003f8e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <stts751_temp_data_rate_set+0xa2>
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	2b90      	cmp	r3, #144	@ 0x90
 8003f9a:	d107      	bne.n	8003fac <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8003f9c:	f107 020b 	add.w	r2, r7, #11
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	210f      	movs	r1, #15
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ff83 	bl	8003eb0 <stts751_write_reg>
 8003faa:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003fac:	697b      	ldr	r3, [r7, #20]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8003fc2:	f107 0210 	add.w	r2, r7, #16
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	2104      	movs	r1, #4
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff ff58 	bl	8003e80 <stts751_read_reg>
 8003fd0:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d107      	bne.n	8003fe8 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8003fd8:	f107 020c 	add.w	r2, r7, #12
 8003fdc:	2301      	movs	r3, #1
 8003fde:	2103      	movs	r1, #3
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff ff4d 	bl	8003e80 <stts751_read_reg>
 8003fe6:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8003fe8:	7b3b      	ldrb	r3, [r7, #12]
 8003fea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	01db      	lsls	r3, r3, #7
 8003ff2:	7c3a      	ldrb	r2, [r7, #16]
 8003ff4:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	2b90      	cmp	r3, #144	@ 0x90
 8003ffe:	d025      	beq.n	800404c <stts751_temp_data_rate_get+0x94>
 8004000:	2b90      	cmp	r3, #144	@ 0x90
 8004002:	dc4f      	bgt.n	80040a4 <stts751_temp_data_rate_get+0xec>
 8004004:	2b09      	cmp	r3, #9
 8004006:	dc1b      	bgt.n	8004040 <stts751_temp_data_rate_get+0x88>
 8004008:	2b00      	cmp	r3, #0
 800400a:	db4b      	blt.n	80040a4 <stts751_temp_data_rate_get+0xec>
 800400c:	2b09      	cmp	r3, #9
 800400e:	d849      	bhi.n	80040a4 <stts751_temp_data_rate_get+0xec>
 8004010:	a201      	add	r2, pc, #4	@ (adr r2, 8004018 <stts751_temp_data_rate_get+0x60>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	08004055 	.word	0x08004055
 800401c:	0800405d 	.word	0x0800405d
 8004020:	08004065 	.word	0x08004065
 8004024:	0800406d 	.word	0x0800406d
 8004028:	08004075 	.word	0x08004075
 800402c:	0800407d 	.word	0x0800407d
 8004030:	08004085 	.word	0x08004085
 8004034:	0800408d 	.word	0x0800408d
 8004038:	08004095 	.word	0x08004095
 800403c:	0800409d 	.word	0x0800409d
 8004040:	2b80      	cmp	r3, #128	@ 0x80
 8004042:	d12f      	bne.n	80040a4 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2280      	movs	r2, #128	@ 0x80
 8004048:	701a      	strb	r2, [r3, #0]
      break;
 800404a:	e02f      	b.n	80040ac <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2290      	movs	r2, #144	@ 0x90
 8004050:	701a      	strb	r2, [r3, #0]
      break;
 8004052:	e02b      	b.n	80040ac <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2200      	movs	r2, #0
 8004058:	701a      	strb	r2, [r3, #0]
      break;
 800405a:	e027      	b.n	80040ac <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2201      	movs	r2, #1
 8004060:	701a      	strb	r2, [r3, #0]
      break;
 8004062:	e023      	b.n	80040ac <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2202      	movs	r2, #2
 8004068:	701a      	strb	r2, [r3, #0]
      break;
 800406a:	e01f      	b.n	80040ac <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2203      	movs	r2, #3
 8004070:	701a      	strb	r2, [r3, #0]
      break;
 8004072:	e01b      	b.n	80040ac <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2204      	movs	r2, #4
 8004078:	701a      	strb	r2, [r3, #0]
      break;
 800407a:	e017      	b.n	80040ac <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2205      	movs	r2, #5
 8004080:	701a      	strb	r2, [r3, #0]
      break;
 8004082:	e013      	b.n	80040ac <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2206      	movs	r2, #6
 8004088:	701a      	strb	r2, [r3, #0]
      break;
 800408a:	e00f      	b.n	80040ac <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2207      	movs	r2, #7
 8004090:	701a      	strb	r2, [r3, #0]
      break;
 8004092:	e00b      	b.n	80040ac <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2208      	movs	r2, #8
 8004098:	701a      	strb	r2, [r3, #0]
      break;
 800409a:	e007      	b.n	80040ac <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2209      	movs	r2, #9
 80040a0:	701a      	strb	r2, [r3, #0]
      break;
 80040a2:	e003      	b.n	80040ac <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2280      	movs	r2, #128	@ 0x80
 80040a8:	701a      	strb	r2, [r3, #0]
      break;
 80040aa:	bf00      	nop
  }

  return ret;
 80040ac:	697b      	ldr	r3, [r7, #20]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop

080040b8 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 80040c4:	f107 0208 	add.w	r2, r7, #8
 80040c8:	2301      	movs	r3, #1
 80040ca:	2103      	movs	r1, #3
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff fed7 	bl	8003e80 <stts751_read_reg>
 80040d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10f      	bne.n	80040fa <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	7a3b      	ldrb	r3, [r7, #8]
 80040e4:	f362 0383 	bfi	r3, r2, #2, #2
 80040e8:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 80040ea:	f107 0208 	add.w	r2, r7, #8
 80040ee:	2301      	movs	r3, #1
 80040f0:	2103      	movs	r1, #3
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff fedc 	bl	8003eb0 <stts751_write_reg>
 80040f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040fa:	68fb      	ldr	r3, [r7, #12]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800410e:	f107 0208 	add.w	r2, r7, #8
 8004112:	2301      	movs	r3, #1
 8004114:	2103      	movs	r1, #3
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff feb2 	bl	8003e80 <stts751_read_reg>
 800411c:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 800411e:	7a3b      	ldrb	r3, [r7, #8]
 8004120:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b03      	cmp	r3, #3
 8004128:	d81a      	bhi.n	8004160 <stts751_resolution_get+0x5c>
 800412a:	a201      	add	r2, pc, #4	@ (adr r2, 8004130 <stts751_resolution_get+0x2c>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004149 	.word	0x08004149
 8004134:	08004151 	.word	0x08004151
 8004138:	08004141 	.word	0x08004141
 800413c:	08004159 	.word	0x08004159
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2202      	movs	r2, #2
 8004144:	701a      	strb	r2, [r3, #0]
      break;
 8004146:	e00f      	b.n	8004168 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
      break;
 800414e:	e00b      	b.n	8004168 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2201      	movs	r2, #1
 8004154:	701a      	strb	r2, [r3, #0]
      break;
 8004156:	e007      	b.n	8004168 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2203      	movs	r2, #3
 800415c:	701a      	strb	r2, [r3, #0]
      break;
 800415e:	e003      	b.n	8004168 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2202      	movs	r2, #2
 8004164:	701a      	strb	r2, [r3, #0]
      break;
 8004166:	bf00      	nop
  }

  return ret;
 8004168:	68fb      	ldr	r3, [r7, #12]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop

08004174 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 800417e:	f107 0308 	add.w	r3, r7, #8
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	2301      	movs	r3, #1
 8004186:	2100      	movs	r1, #0
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff fe79 	bl	8003e80 <stts751_read_reg>
 800418e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d117      	bne.n	80041c6 <stts751_temperature_raw_get+0x52>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8004196:	f107 0208 	add.w	r2, r7, #8
 800419a:	2301      	movs	r3, #1
 800419c:	2102      	movs	r1, #2
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff fe6e 	bl	8003e80 <stts751_read_reg>
 80041a4:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 80041a6:	7a7b      	ldrb	r3, [r7, #9]
 80041a8:	b21a      	sxth	r2, r3
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	7a3a      	ldrb	r2, [r7, #8]
 80041bc:	4413      	add	r3, r2
 80041be:	b29b      	uxth	r3, r3
 80041c0:	b21a      	sxth	r2, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 80041c6:	68fb      	ldr	r3, [r7, #12]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 80041dc:	f107 0208 	add.w	r2, r7, #8
 80041e0:	2301      	movs	r3, #1
 80041e2:	2103      	movs	r1, #3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fe4b 	bl	8003e80 <stts751_read_reg>
 80041ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10f      	bne.n	8004212 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 80041f2:	78fb      	ldrb	r3, [r7, #3]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	7a3b      	ldrb	r3, [r7, #8]
 80041fc:	f362 13c7 	bfi	r3, r2, #7, #1
 8004200:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8004202:	f107 0208 	add.w	r2, r7, #8
 8004206:	2301      	movs	r3, #1
 8004208:	2103      	movs	r1, #3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff fe50 	bl	8003eb0 <stts751_write_reg>
 8004210:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004212:	68fb      	ldr	r3, [r7, #12]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	2301      	movs	r3, #1
 800422a:	21fd      	movs	r1, #253	@ 0xfd
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff fe27 	bl	8003e80 <stts751_read_reg>
 8004232:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d107      	bne.n	800424a <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	2301      	movs	r3, #1
 8004240:	21fe      	movs	r1, #254	@ 0xfe
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff fe1c 	bl	8003e80 <stts751_read_reg>
 8004248:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	1c9a      	adds	r2, r3, #2
 8004254:	2301      	movs	r3, #1
 8004256:	21ff      	movs	r1, #255	@ 0xff
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff fe11 	bl	8003e80 <stts751_read_reg>
 800425e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8004260:	68fb      	ldr	r3, [r7, #12]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08c      	sub	sp, #48	@ 0x30
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004276:	2300      	movs	r3, #0
 8004278:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800427a:	2301      	movs	r3, #1
 800427c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d07c      	beq.n	8004382 <IKS01A3_ENV_SENSOR_Init+0x116>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b02      	cmp	r3, #2
 800428c:	f200 80b2 	bhi.w	80043f4 <IKS01A3_ENV_SENSOR_Init+0x188>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <IKS01A3_ENV_SENSOR_Init+0x32>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d039      	beq.n	8004310 <IKS01A3_ENV_SENSOR_Init+0xa4>
 800429c:	e0aa      	b.n	80043f4 <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800429e:	6838      	ldr	r0, [r7, #0]
 80042a0:	f000 f976 	bl	8004590 <HTS221_0_Probe>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80042aa:	f04f 33ff 	mov.w	r3, #4294967295
 80042ae:	e0df      	b.n	8004470 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80042b0:	4a71      	ldr	r2, [pc, #452]	@ (8004478 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	4970      	ldr	r1, [pc, #448]	@ (800447c <IKS01A3_ENV_SENSOR_Init+0x210>)
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80042c2:	f107 0108 	add.w	r1, r7, #8
 80042c6:	4610      	mov	r0, r2
 80042c8:	4798      	blx	r3
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80042d0:	f06f 0306 	mvn.w	r3, #6
 80042d4:	e0cc      	b.n	8004470 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80042d6:	7a3b      	ldrb	r3, [r7, #8]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d103      	bne.n	80042e4 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80042e4:	7abb      	ldrb	r3, [r7, #10]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d103      	bne.n	80042f2 <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	f043 0304 	orr.w	r3, r3, #4
 80042f0:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 80042f2:	7a7b      	ldrb	r3, [r7, #9]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d103      	bne.n	8004300 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	f043 0302 	orr.w	r3, r3, #2
 80042fe:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8004300:	7afb      	ldrb	r3, [r7, #11]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d17a      	bne.n	80043fc <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	f043 0308 	orr.w	r3, r3, #8
 800430c:	623b      	str	r3, [r7, #32]
      }
      break;
 800430e:	e075      	b.n	80043fc <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8004310:	6838      	ldr	r0, [r7, #0]
 8004312:	f000 fa07 	bl	8004724 <LPS22HH_0_Probe>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800431c:	f04f 33ff 	mov.w	r3, #4294967295
 8004320:	e0a6      	b.n	8004470 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004322:	4a55      	ldr	r2, [pc, #340]	@ (8004478 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4953      	ldr	r1, [pc, #332]	@ (800447c <IKS01A3_ENV_SENSOR_Init+0x210>)
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004334:	f107 0108 	add.w	r1, r7, #8
 8004338:	4610      	mov	r0, r2
 800433a:	4798      	blx	r3
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004342:	f06f 0306 	mvn.w	r3, #6
 8004346:	e093      	b.n	8004470 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8004348:	7a3b      	ldrb	r3, [r7, #8]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d103      	bne.n	8004356 <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8004356:	7abb      	ldrb	r3, [r7, #10]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d103      	bne.n	8004364 <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	f043 0304 	orr.w	r3, r3, #4
 8004362:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8004364:	7a7b      	ldrb	r3, [r7, #9]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d103      	bne.n	8004372 <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	f043 0302 	orr.w	r3, r3, #2
 8004370:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8004372:	7afb      	ldrb	r3, [r7, #11]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d143      	bne.n	8004400 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	f043 0308 	orr.w	r3, r3, #8
 800437e:	623b      	str	r3, [r7, #32]
      }
      break;
 8004380:	e03e      	b.n	8004400 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8004382:	6838      	ldr	r0, [r7, #0]
 8004384:	f000 fa9a 	bl	80048bc <STTS751_0_Probe>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800438e:	f04f 33ff 	mov.w	r3, #4294967295
 8004392:	e06d      	b.n	8004470 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004394:	4a38      	ldr	r2, [pc, #224]	@ (8004478 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	4937      	ldr	r1, [pc, #220]	@ (800447c <IKS01A3_ENV_SENSOR_Init+0x210>)
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80043a6:	f107 0108 	add.w	r1, r7, #8
 80043aa:	4610      	mov	r0, r2
 80043ac:	4798      	blx	r3
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80043b4:	f06f 0306 	mvn.w	r3, #6
 80043b8:	e05a      	b.n	8004470 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80043ba:	7a3b      	ldrb	r3, [r7, #8]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d103      	bne.n	80043c8 <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80043c8:	7abb      	ldrb	r3, [r7, #10]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d103      	bne.n	80043d6 <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	f043 0304 	orr.w	r3, r3, #4
 80043d4:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 80043d6:	7a7b      	ldrb	r3, [r7, #9]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d103      	bne.n	80043e4 <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	f043 0302 	orr.w	r3, r3, #2
 80043e2:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 80043e4:	7afb      	ldrb	r3, [r7, #11]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d10c      	bne.n	8004404 <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	f043 0308 	orr.w	r3, r3, #8
 80043f0:	623b      	str	r3, [r7, #32]
      }
      break;
 80043f2:	e007      	b.n	8004404 <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80043f4:	f06f 0301 	mvn.w	r3, #1
 80043f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80043fa:	e004      	b.n	8004406 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 80043fc:	bf00      	nop
 80043fe:	e002      	b.n	8004406 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8004400:	bf00      	nop
 8004402:	e000      	b.n	8004406 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8004404:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8004406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800440c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440e:	e02f      	b.n	8004470 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8004410:	2300      	movs	r3, #0
 8004412:	627b      	str	r3, [r7, #36]	@ 0x24
 8004414:	e028      	b.n	8004468 <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441a:	4013      	ands	r3, r2
 800441c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800441e:	429a      	cmp	r2, r3
 8004420:	d11c      	bne.n	800445c <IKS01A3_ENV_SENSOR_Init+0x1f0>
 8004422:	6a3a      	ldr	r2, [r7, #32]
 8004424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004426:	4013      	ands	r3, r2
 8004428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800442a:	429a      	cmp	r2, r3
 800442c:	d116      	bne.n	800445c <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800442e:	4a14      	ldr	r2, [pc, #80]	@ (8004480 <IKS01A3_ENV_SENSOR_Init+0x214>)
 8004430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004436:	4913      	ldr	r1, [pc, #76]	@ (8004484 <IKS01A3_ENV_SENSOR_Init+0x218>)
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	0092      	lsls	r2, r2, #2
 800443c:	4413      	add	r3, r2
 800443e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	490d      	ldr	r1, [pc, #52]	@ (800447c <IKS01A3_ENV_SENSOR_Init+0x210>)
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800444c:	4610      	mov	r0, r2
 800444e:	4798      	blx	r3
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8004456:	f06f 0304 	mvn.w	r3, #4
 800445a:	e009      	b.n	8004470 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 800445c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	3301      	adds	r3, #1
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	2b03      	cmp	r3, #3
 800446c:	d9d3      	bls.n	8004416 <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800446e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004470:	4618      	mov	r0, r3
 8004472:	3730      	adds	r7, #48	@ 0x30
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20000388 	.word	0x20000388
 800447c:	2000034c 	.word	0x2000034c
 8004480:	20000098 	.word	0x20000098
 8004484:	20000358 	.word	0x20000358

08004488 <IKS01A3_ENV_SENSOR_SetOutputDataRate>:
  * @param  Function Environmental sensor function
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d903      	bls.n	80044a2 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800449a:	f06f 0301 	mvn.w	r3, #1
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	e027      	b.n	80044f2 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80044a2:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x74>)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4013      	ands	r3, r2
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d11b      	bne.n	80044ec <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80044b4:	4a12      	ldr	r2, [pc, #72]	@ (8004500 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x78>)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044bc:	4911      	ldr	r1, [pc, #68]	@ (8004504 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x7c>)
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	0092      	lsls	r2, r2, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	490f      	ldr	r1, [pc, #60]	@ (8004508 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x80>)
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4610      	mov	r0, r2
 80044d6:	4798      	blx	r3
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80044de:	f06f 0304 	mvn.w	r3, #4
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e005      	b.n	80044f2 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	e002      	b.n	80044f2 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80044ec:	f06f 0301 	mvn.w	r3, #1
 80044f0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80044f2:	697b      	ldr	r3, [r7, #20]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000394 	.word	0x20000394
 8004500:	20000098 	.word	0x20000098
 8004504:	20000358 	.word	0x20000358
 8004508:	2000034c 	.word	0x2000034c

0800450c <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d903      	bls.n	8004526 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800451e:	f06f 0301 	mvn.w	r3, #1
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e027      	b.n	8004576 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8004526:	4a16      	ldr	r2, [pc, #88]	@ (8004580 <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	429a      	cmp	r2, r3
 8004536:	d11b      	bne.n	8004570 <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8004538:	4a12      	ldr	r2, [pc, #72]	@ (8004584 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004540:	4911      	ldr	r1, [pc, #68]	@ (8004588 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	0092      	lsls	r2, r2, #2
 8004546:	4413      	add	r3, r2
 8004548:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	490f      	ldr	r1, [pc, #60]	@ (800458c <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4610      	mov	r0, r2
 800455a:	4798      	blx	r3
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004562:	f06f 0304 	mvn.w	r3, #4
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	e005      	b.n	8004576 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	e002      	b.n	8004576 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004570:	f06f 0301 	mvn.w	r3, #1
 8004574:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004576:	697b      	ldr	r3, [r7, #20]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20000394 	.word	0x20000394
 8004584:	20000098 	.word	0x20000098
 8004588:	20000358 	.word	0x20000358
 800458c:	2000034c 	.word	0x2000034c

08004590 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b092      	sub	sp, #72	@ 0x48
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8004598:	2300      	movs	r3, #0
 800459a:	647b      	str	r3, [r7, #68]	@ 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800459c:	2300      	movs	r3, #0
 800459e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80045a0:	23bf      	movs	r3, #191	@ 0xbf
 80045a2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 80045a6:	4b51      	ldr	r3, [pc, #324]	@ (80046ec <HTS221_0_Probe+0x15c>)
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80045aa:	4b51      	ldr	r3, [pc, #324]	@ (80046f0 <HTS221_0_Probe+0x160>)
 80045ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80045ae:	4b51      	ldr	r3, [pc, #324]	@ (80046f4 <HTS221_0_Probe+0x164>)
 80045b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80045b2:	4b51      	ldr	r3, [pc, #324]	@ (80046f8 <HTS221_0_Probe+0x168>)
 80045b4:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 80045b6:	4b51      	ldr	r3, [pc, #324]	@ (80046fc <HTS221_0_Probe+0x16c>)
 80045b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80045ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045be:	4619      	mov	r1, r3
 80045c0:	484f      	ldr	r0, [pc, #316]	@ (8004700 <HTS221_0_Probe+0x170>)
 80045c2:	f7fd fd15 	bl	8001ff0 <HTS221_RegisterBusIO>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80045cc:	f06f 0306 	mvn.w	r3, #6
 80045d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045d2:	e085      	b.n	80046e0 <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80045d4:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 80045d8:	4619      	mov	r1, r3
 80045da:	4849      	ldr	r0, [pc, #292]	@ (8004700 <HTS221_0_Probe+0x170>)
 80045dc:	f7fd fd91 	bl	8002102 <HTS221_ReadID>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80045e6:	f06f 0306 	mvn.w	r3, #6
 80045ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ec:	e078      	b.n	80046e0 <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 80045ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045f2:	2bbc      	cmp	r3, #188	@ 0xbc
 80045f4:	d003      	beq.n	80045fe <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80045f6:	f06f 0306 	mvn.w	r3, #6
 80045fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80045fc:	e070      	b.n	80046e0 <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80045fe:	f107 0308 	add.w	r3, r7, #8
 8004602:	4619      	mov	r1, r3
 8004604:	483e      	ldr	r0, [pc, #248]	@ (8004700 <HTS221_0_Probe+0x170>)
 8004606:	f7fd fd93 	bl	8002130 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 800460a:	7a3b      	ldrb	r3, [r7, #8]
 800460c:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800460e:	7a7b      	ldrb	r3, [r7, #9]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 8004614:	7abb      	ldrb	r3, [r7, #10]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800461a:	7afb      	ldrb	r3, [r7, #11]
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8004620:	4a38      	ldr	r2, [pc, #224]	@ (8004704 <HTS221_0_Probe+0x174>)
 8004622:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8004624:	4b38      	ldr	r3, [pc, #224]	@ (8004708 <HTS221_0_Probe+0x178>)
 8004626:	4a36      	ldr	r2, [pc, #216]	@ (8004700 <HTS221_0_Probe+0x170>)
 8004628:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800462a:	4b38      	ldr	r3, [pc, #224]	@ (800470c <HTS221_0_Probe+0x17c>)
 800462c:	4a38      	ldr	r2, [pc, #224]	@ (8004710 <HTS221_0_Probe+0x180>)
 800462e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8004630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004632:	2b00      	cmp	r3, #0
 8004634:	d11d      	bne.n	8004672 <HTS221_0_Probe+0xe2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d018      	beq.n	8004672 <HTS221_0_Probe+0xe2>
 8004640:	7a3b      	ldrb	r3, [r7, #8]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d115      	bne.n	8004672 <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8004646:	4b33      	ldr	r3, [pc, #204]	@ (8004714 <HTS221_0_Probe+0x184>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4a33      	ldr	r2, [pc, #204]	@ (8004718 <HTS221_0_Probe+0x188>)
 800464c:	4933      	ldr	r1, [pc, #204]	@ (800471c <HTS221_0_Probe+0x18c>)
 800464e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8004652:	4b2e      	ldr	r3, [pc, #184]	@ (800470c <HTS221_0_Probe+0x17c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a2b      	ldr	r2, [pc, #172]	@ (8004708 <HTS221_0_Probe+0x178>)
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	4610      	mov	r0, r2
 800465e:	4798      	blx	r3
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004666:	f06f 0304 	mvn.w	r3, #4
 800466a:	647b      	str	r3, [r7, #68]	@ 0x44
 800466c:	e001      	b.n	8004672 <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800466e:	2300      	movs	r3, #0
 8004670:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8004672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004674:	2b00      	cmp	r3, #0
 8004676:	d11d      	bne.n	80046b4 <HTS221_0_Probe+0x124>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d018      	beq.n	80046b4 <HTS221_0_Probe+0x124>
 8004682:	7abb      	ldrb	r3, [r7, #10]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d115      	bne.n	80046b4 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8004688:	4b22      	ldr	r3, [pc, #136]	@ (8004714 <HTS221_0_Probe+0x184>)
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	4a22      	ldr	r2, [pc, #136]	@ (8004718 <HTS221_0_Probe+0x188>)
 800468e:	4924      	ldr	r1, [pc, #144]	@ (8004720 <HTS221_0_Probe+0x190>)
 8004690:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8004694:	4b1d      	ldr	r3, [pc, #116]	@ (800470c <HTS221_0_Probe+0x17c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1b      	ldr	r2, [pc, #108]	@ (8004708 <HTS221_0_Probe+0x178>)
 800469c:	6812      	ldr	r2, [r2, #0]
 800469e:	4610      	mov	r0, r2
 80046a0:	4798      	blx	r3
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80046a8:	f06f 0304 	mvn.w	r3, #4
 80046ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ae:	e001      	b.n	80046b4 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80046b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d107      	bne.n	80046ca <HTS221_0_Probe+0x13a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80046c4:	f06f 0304 	mvn.w	r3, #4
 80046c8:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 80046ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d107      	bne.n	80046e0 <HTS221_0_Probe+0x150>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80046da:	f06f 0304 	mvn.w	r3, #4
 80046de:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 80046e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3748      	adds	r7, #72	@ 0x48
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	08001ba1 	.word	0x08001ba1
 80046f0:	08001c05 	.word	0x08001c05
 80046f4:	08001cb9 	.word	0x08001cb9
 80046f8:	08001c55 	.word	0x08001c55
 80046fc:	08001d1d 	.word	0x08001d1d
 8004700:	200003a0 	.word	0x200003a0
 8004704:	20000394 	.word	0x20000394
 8004708:	2000034c 	.word	0x2000034c
 800470c:	20000388 	.word	0x20000388
 8004710:	20000004 	.word	0x20000004
 8004714:	20000098 	.word	0x20000098
 8004718:	20000358 	.word	0x20000358
 800471c:	20000028 	.word	0x20000028
 8004720:	20000014 	.word	0x20000014

08004724 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b092      	sub	sp, #72	@ 0x48
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800472c:	2300      	movs	r3, #0
 800472e:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8004730:	2300      	movs	r3, #0
 8004732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8004734:	23bb      	movs	r3, #187	@ 0xbb
 8004736:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800473a:	4b52      	ldr	r3, [pc, #328]	@ (8004884 <LPS22HH_0_Probe+0x160>)
 800473c:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800473e:	4b52      	ldr	r3, [pc, #328]	@ (8004888 <LPS22HH_0_Probe+0x164>)
 8004740:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8004742:	4b52      	ldr	r3, [pc, #328]	@ (800488c <LPS22HH_0_Probe+0x168>)
 8004744:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8004746:	4b52      	ldr	r3, [pc, #328]	@ (8004890 <LPS22HH_0_Probe+0x16c>)
 8004748:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800474a:	4b52      	ldr	r3, [pc, #328]	@ (8004894 <LPS22HH_0_Probe+0x170>)
 800474c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800474e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004752:	4619      	mov	r1, r3
 8004754:	4850      	ldr	r0, [pc, #320]	@ (8004898 <LPS22HH_0_Probe+0x174>)
 8004756:	f7fe fa6b 	bl	8002c30 <LPS22HH_RegisterBusIO>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004760:	f06f 0306 	mvn.w	r3, #6
 8004764:	647b      	str	r3, [r7, #68]	@ 0x44
 8004766:	e087      	b.n	8004878 <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8004768:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800476c:	4619      	mov	r1, r3
 800476e:	484a      	ldr	r0, [pc, #296]	@ (8004898 <LPS22HH_0_Probe+0x174>)
 8004770:	f7fe fb07 	bl	8002d82 <LPS22HH_ReadID>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800477a:	f06f 0306 	mvn.w	r3, #6
 800477e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004780:	e07a      	b.n	8004878 <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 8004782:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004786:	2bb3      	cmp	r3, #179	@ 0xb3
 8004788:	d003      	beq.n	8004792 <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800478a:	f06f 0306 	mvn.w	r3, #6
 800478e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004790:	e072      	b.n	8004878 <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8004792:	f107 0308 	add.w	r3, r7, #8
 8004796:	4619      	mov	r1, r3
 8004798:	483f      	ldr	r0, [pc, #252]	@ (8004898 <LPS22HH_0_Probe+0x174>)
 800479a:	f7fe fb09 	bl	8002db0 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 800479e:	7a3b      	ldrb	r3, [r7, #8]
 80047a0:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 80047a2:	7a7b      	ldrb	r3, [r7, #9]
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 80047a8:	7abb      	ldrb	r3, [r7, #10]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 80047ae:	7afb      	ldrb	r3, [r7, #11]
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 80047b4:	4a39      	ldr	r2, [pc, #228]	@ (800489c <LPS22HH_0_Probe+0x178>)
 80047b6:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 80047b8:	4b39      	ldr	r3, [pc, #228]	@ (80048a0 <LPS22HH_0_Probe+0x17c>)
 80047ba:	4a37      	ldr	r2, [pc, #220]	@ (8004898 <LPS22HH_0_Probe+0x174>)
 80047bc:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 80047be:	4b39      	ldr	r3, [pc, #228]	@ (80048a4 <LPS22HH_0_Probe+0x180>)
 80047c0:	4a39      	ldr	r2, [pc, #228]	@ (80048a8 <LPS22HH_0_Probe+0x184>)
 80047c2:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80047c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d11e      	bne.n	8004808 <LPS22HH_0_Probe+0xe4>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d019      	beq.n	8004808 <LPS22HH_0_Probe+0xe4>
 80047d4:	7a3b      	ldrb	r3, [r7, #8]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d116      	bne.n	8004808 <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 80047da:	4b34      	ldr	r3, [pc, #208]	@ (80048ac <LPS22HH_0_Probe+0x188>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4a34      	ldr	r2, [pc, #208]	@ (80048b0 <LPS22HH_0_Probe+0x18c>)
 80047e0:	3304      	adds	r3, #4
 80047e2:	4934      	ldr	r1, [pc, #208]	@ (80048b4 <LPS22HH_0_Probe+0x190>)
 80047e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80047e8:	4b2e      	ldr	r3, [pc, #184]	@ (80048a4 <LPS22HH_0_Probe+0x180>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a2c      	ldr	r2, [pc, #176]	@ (80048a0 <LPS22HH_0_Probe+0x17c>)
 80047f0:	6852      	ldr	r2, [r2, #4]
 80047f2:	4610      	mov	r0, r2
 80047f4:	4798      	blx	r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80047fc:	f06f 0304 	mvn.w	r3, #4
 8004800:	647b      	str	r3, [r7, #68]	@ 0x44
 8004802:	e001      	b.n	8004808 <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004804:	2300      	movs	r3, #0
 8004806:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8004808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800480a:	2b00      	cmp	r3, #0
 800480c:	d11e      	bne.n	800484c <LPS22HH_0_Probe+0x128>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d019      	beq.n	800484c <LPS22HH_0_Probe+0x128>
 8004818:	7a7b      	ldrb	r3, [r7, #9]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d116      	bne.n	800484c <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800481e:	4b23      	ldr	r3, [pc, #140]	@ (80048ac <LPS22HH_0_Probe+0x188>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	4a23      	ldr	r2, [pc, #140]	@ (80048b0 <LPS22HH_0_Probe+0x18c>)
 8004824:	3304      	adds	r3, #4
 8004826:	4924      	ldr	r1, [pc, #144]	@ (80048b8 <LPS22HH_0_Probe+0x194>)
 8004828:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800482c:	4b1d      	ldr	r3, [pc, #116]	@ (80048a4 <LPS22HH_0_Probe+0x180>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1b      	ldr	r2, [pc, #108]	@ (80048a0 <LPS22HH_0_Probe+0x17c>)
 8004834:	6852      	ldr	r2, [r2, #4]
 8004836:	4610      	mov	r0, r2
 8004838:	4798      	blx	r3
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004840:	f06f 0304 	mvn.w	r3, #4
 8004844:	647b      	str	r3, [r7, #68]	@ 0x44
 8004846:	e001      	b.n	800484c <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004848:	2300      	movs	r3, #0
 800484a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800484c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800484e:	2b00      	cmp	r3, #0
 8004850:	d107      	bne.n	8004862 <LPS22HH_0_Probe+0x13e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800485c:	f06f 0304 	mvn.w	r3, #4
 8004860:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8004862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004864:	2b00      	cmp	r3, #0
 8004866:	d107      	bne.n	8004878 <LPS22HH_0_Probe+0x154>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004872:	f06f 0304 	mvn.w	r3, #4
 8004876:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 8004878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800487a:	4618      	mov	r0, r3
 800487c:	3748      	adds	r7, #72	@ 0x48
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	08001ba1 	.word	0x08001ba1
 8004888:	08001c05 	.word	0x08001c05
 800488c:	08001cb9 	.word	0x08001cb9
 8004890:	08001c55 	.word	0x08001c55
 8004894:	08001d1d 	.word	0x08001d1d
 8004898:	200003d4 	.word	0x200003d4
 800489c:	20000394 	.word	0x20000394
 80048a0:	2000034c 	.word	0x2000034c
 80048a4:	20000388 	.word	0x20000388
 80048a8:	2000003c 	.word	0x2000003c
 80048ac:	20000098 	.word	0x20000098
 80048b0:	20000358 	.word	0x20000358
 80048b4:	20000060 	.word	0x20000060
 80048b8:	2000004c 	.word	0x2000004c

080048bc <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b092      	sub	sp, #72	@ 0x48
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 80048c8:	2300      	movs	r3, #0
 80048ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 80048cc:	2395      	movs	r3, #149	@ 0x95
 80048ce:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 80048d2:	4b46      	ldr	r3, [pc, #280]	@ (80049ec <STTS751_0_Probe+0x130>)
 80048d4:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80048d6:	4b46      	ldr	r3, [pc, #280]	@ (80049f0 <STTS751_0_Probe+0x134>)
 80048d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80048da:	4b46      	ldr	r3, [pc, #280]	@ (80049f4 <STTS751_0_Probe+0x138>)
 80048dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80048de:	4b46      	ldr	r3, [pc, #280]	@ (80049f8 <STTS751_0_Probe+0x13c>)
 80048e0:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 80048e2:	4b46      	ldr	r3, [pc, #280]	@ (80049fc <STTS751_0_Probe+0x140>)
 80048e4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 80048e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048ea:	4619      	mov	r1, r3
 80048ec:	4844      	ldr	r0, [pc, #272]	@ (8004a00 <STTS751_0_Probe+0x144>)
 80048ee:	f7fe ffdd 	bl	80038ac <STTS751_RegisterBusIO>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80048f8:	f06f 0306 	mvn.w	r3, #6
 80048fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80048fe:	e070      	b.n	80049e2 <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8004900:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8004904:	4619      	mov	r1, r3
 8004906:	483e      	ldr	r0, [pc, #248]	@ (8004a00 <STTS751_0_Probe+0x144>)
 8004908:	f7ff f86f 	bl	80039ea <STTS751_ReadID>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004912:	f06f 0306 	mvn.w	r3, #6
 8004916:	647b      	str	r3, [r7, #68]	@ 0x44
 8004918:	e063      	b.n	80049e2 <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 800491a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800491e:	2b53      	cmp	r3, #83	@ 0x53
 8004920:	d003      	beq.n	800492a <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004922:	f06f 0306 	mvn.w	r3, #6
 8004926:	647b      	str	r3, [r7, #68]	@ 0x44
 8004928:	e05b      	b.n	80049e2 <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 800492a:	f107 0308 	add.w	r3, r7, #8
 800492e:	4619      	mov	r1, r3
 8004930:	4833      	ldr	r0, [pc, #204]	@ (8004a00 <STTS751_0_Probe+0x144>)
 8004932:	f7ff f875 	bl	8003a20 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8004936:	7a3b      	ldrb	r3, [r7, #8]
 8004938:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 800493a:	7a7b      	ldrb	r3, [r7, #9]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8004940:	7abb      	ldrb	r3, [r7, #10]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8004946:	7afb      	ldrb	r3, [r7, #11]
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 800494c:	4a2d      	ldr	r2, [pc, #180]	@ (8004a04 <STTS751_0_Probe+0x148>)
 800494e:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8004950:	4b2d      	ldr	r3, [pc, #180]	@ (8004a08 <STTS751_0_Probe+0x14c>)
 8004952:	4a2b      	ldr	r2, [pc, #172]	@ (8004a00 <STTS751_0_Probe+0x144>)
 8004954:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8004956:	4b2d      	ldr	r3, [pc, #180]	@ (8004a0c <STTS751_0_Probe+0x150>)
 8004958:	4a2d      	ldr	r2, [pc, #180]	@ (8004a10 <STTS751_0_Probe+0x154>)
 800495a:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800495c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800495e:	2b00      	cmp	r3, #0
 8004960:	d11e      	bne.n	80049a0 <STTS751_0_Probe+0xe4>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d019      	beq.n	80049a0 <STTS751_0_Probe+0xe4>
 800496c:	7a3b      	ldrb	r3, [r7, #8]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d116      	bne.n	80049a0 <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8004972:	4b28      	ldr	r3, [pc, #160]	@ (8004a14 <STTS751_0_Probe+0x158>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4a28      	ldr	r2, [pc, #160]	@ (8004a18 <STTS751_0_Probe+0x15c>)
 8004978:	3308      	adds	r3, #8
 800497a:	4928      	ldr	r1, [pc, #160]	@ (8004a1c <STTS751_0_Probe+0x160>)
 800497c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8004980:	4b22      	ldr	r3, [pc, #136]	@ (8004a0c <STTS751_0_Probe+0x150>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a20      	ldr	r2, [pc, #128]	@ (8004a08 <STTS751_0_Probe+0x14c>)
 8004988:	6892      	ldr	r2, [r2, #8]
 800498a:	4610      	mov	r0, r2
 800498c:	4798      	blx	r3
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004994:	f06f 0304 	mvn.w	r3, #4
 8004998:	647b      	str	r3, [r7, #68]	@ 0x44
 800499a:	e001      	b.n	80049a0 <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800499c:	2300      	movs	r3, #0
 800499e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80049a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d107      	bne.n	80049b6 <STTS751_0_Probe+0xfa>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80049b0:	f06f 0304 	mvn.w	r3, #4
 80049b4:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80049b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d107      	bne.n	80049cc <STTS751_0_Probe+0x110>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80049c6:	f06f 0304 	mvn.w	r3, #4
 80049ca:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 80049cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d107      	bne.n	80049e2 <STTS751_0_Probe+0x126>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80049dc:	f06f 0304 	mvn.w	r3, #4
 80049e0:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 80049e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3748      	adds	r7, #72	@ 0x48
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	08001ba1 	.word	0x08001ba1
 80049f0:	08001c05 	.word	0x08001c05
 80049f4:	08001cb9 	.word	0x08001cb9
 80049f8:	08001c55 	.word	0x08001c55
 80049fc:	08001d1d 	.word	0x08001d1d
 8004a00:	20000408 	.word	0x20000408
 8004a04:	20000394 	.word	0x20000394
 8004a08:	2000034c 	.word	0x2000034c
 8004a0c:	20000388 	.word	0x20000388
 8004a10:	20000074 	.word	0x20000074
 8004a14:	20000098 	.word	0x20000098
 8004a18:	20000358 	.word	0x20000358
 8004a1c:	20000084 	.word	0x20000084

08004a20 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a2a:	2003      	movs	r0, #3
 8004a2c:	f000 f938 	bl	8004ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a30:	2000      	movs	r0, #0
 8004a32:	f000 f80d 	bl	8004a50 <HAL_InitTick>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	71fb      	strb	r3, [r7, #7]
 8004a40:	e001      	b.n	8004a46 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a42:	f7fc ffc9 	bl	80019d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a46:	79fb      	ldrb	r3, [r7, #7]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004a5c:	4b16      	ldr	r3, [pc, #88]	@ (8004ab8 <HAL_InitTick+0x68>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d022      	beq.n	8004aaa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004a64:	4b15      	ldr	r3, [pc, #84]	@ (8004abc <HAL_InitTick+0x6c>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b13      	ldr	r3, [pc, #76]	@ (8004ab8 <HAL_InitTick+0x68>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 f938 	bl	8004cee <HAL_SYSTICK_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10f      	bne.n	8004aa4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b0f      	cmp	r3, #15
 8004a88:	d809      	bhi.n	8004a9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a92:	f000 f910 	bl	8004cb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a96:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac0 <HAL_InitTick+0x70>)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	e007      	b.n	8004aae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	73fb      	strb	r3, [r7, #15]
 8004aa2:	e004      	b.n	8004aae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
 8004aa8:	e001      	b.n	8004aae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	200000c0 	.word	0x200000c0
 8004abc:	20000000 	.word	0x20000000
 8004ac0:	200000bc 	.word	0x200000bc

08004ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ac8:	4b05      	ldr	r3, [pc, #20]	@ (8004ae0 <HAL_IncTick+0x1c>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b05      	ldr	r3, [pc, #20]	@ (8004ae4 <HAL_IncTick+0x20>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	4a03      	ldr	r2, [pc, #12]	@ (8004ae0 <HAL_IncTick+0x1c>)
 8004ad4:	6013      	str	r3, [r2, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000440 	.word	0x20000440
 8004ae4:	200000c0 	.word	0x200000c0

08004ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  return uwTick;
 8004aec:	4b02      	ldr	r3, [pc, #8]	@ (8004af8 <HAL_GetTick+0x10>)
 8004aee:	681b      	ldr	r3, [r3, #0]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	20000440 	.word	0x20000440

08004afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b04:	f7ff fff0 	bl	8004ae8 <HAL_GetTick>
 8004b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d004      	beq.n	8004b20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b16:	4b09      	ldr	r3, [pc, #36]	@ (8004b3c <HAL_Delay+0x40>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b20:	bf00      	nop
 8004b22:	f7ff ffe1 	bl	8004ae8 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d8f7      	bhi.n	8004b22 <HAL_Delay+0x26>
  {
  }
}
 8004b32:	bf00      	nop
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	200000c0 	.word	0x200000c0

08004b40 <__NVIC_SetPriorityGrouping>:
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b50:	4b0c      	ldr	r3, [pc, #48]	@ (8004b84 <__NVIC_SetPriorityGrouping+0x44>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b72:	4a04      	ldr	r2, [pc, #16]	@ (8004b84 <__NVIC_SetPriorityGrouping+0x44>)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	60d3      	str	r3, [r2, #12]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	e000ed00 	.word	0xe000ed00

08004b88 <__NVIC_GetPriorityGrouping>:
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b8c:	4b04      	ldr	r3, [pc, #16]	@ (8004ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	0a1b      	lsrs	r3, r3, #8
 8004b92:	f003 0307 	and.w	r3, r3, #7
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	e000ed00 	.word	0xe000ed00

08004ba4 <__NVIC_SetPriority>:
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	6039      	str	r1, [r7, #0]
 8004bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	db0a      	blt.n	8004bce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	490c      	ldr	r1, [pc, #48]	@ (8004bf0 <__NVIC_SetPriority+0x4c>)
 8004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc2:	0112      	lsls	r2, r2, #4
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004bcc:	e00a      	b.n	8004be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4908      	ldr	r1, [pc, #32]	@ (8004bf4 <__NVIC_SetPriority+0x50>)
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	3b04      	subs	r3, #4
 8004bdc:	0112      	lsls	r2, r2, #4
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	440b      	add	r3, r1
 8004be2:	761a      	strb	r2, [r3, #24]
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	e000e100 	.word	0xe000e100
 8004bf4:	e000ed00 	.word	0xe000ed00

08004bf8 <NVIC_EncodePriority>:
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b089      	sub	sp, #36	@ 0x24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f1c3 0307 	rsb	r3, r3, #7
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	bf28      	it	cs
 8004c16:	2304      	movcs	r3, #4
 8004c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d902      	bls.n	8004c28 <NVIC_EncodePriority+0x30>
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	3b03      	subs	r3, #3
 8004c26:	e000      	b.n	8004c2a <NVIC_EncodePriority+0x32>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43da      	mvns	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	401a      	ands	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c40:	f04f 31ff 	mov.w	r1, #4294967295
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4a:	43d9      	mvns	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c50:	4313      	orrs	r3, r2
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3724      	adds	r7, #36	@ 0x24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <SysTick_Config>:
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c6c:	d301      	bcc.n	8004c72 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e00f      	b.n	8004c92 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c72:	4a0a      	ldr	r2, [pc, #40]	@ (8004c9c <SysTick_Config+0x40>)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c7a:	210f      	movs	r1, #15
 8004c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c80:	f7ff ff90 	bl	8004ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c84:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <SysTick_Config+0x40>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c8a:	4b04      	ldr	r3, [pc, #16]	@ (8004c9c <SysTick_Config+0x40>)
 8004c8c:	2207      	movs	r2, #7
 8004c8e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	e000e010 	.word	0xe000e010

08004ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff ff49 	bl	8004b40 <__NVIC_SetPriorityGrouping>
}
 8004cae:	bf00      	nop
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b086      	sub	sp, #24
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
 8004cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cc8:	f7ff ff5e 	bl	8004b88 <__NVIC_GetPriorityGrouping>
 8004ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68b9      	ldr	r1, [r7, #8]
 8004cd2:	6978      	ldr	r0, [r7, #20]
 8004cd4:	f7ff ff90 	bl	8004bf8 <NVIC_EncodePriority>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff ff5f 	bl	8004ba4 <__NVIC_SetPriority>
}
 8004ce6:	bf00      	nop
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff ffb0 	bl	8004c5c <SysTick_Config>
 8004cfc:	4603      	mov	r3, r0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004d1e:	e160      	b.n	8004fe2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	2101      	movs	r1, #1
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 8152 	beq.w	8004fdc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d005      	beq.n	8004d50 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d130      	bne.n	8004db2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43db      	mvns	r3, r3
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4013      	ands	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8004d86:	2201      	movs	r2, #1
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4013      	ands	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	f003 0201 	and.w	r2, r3, #1
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d017      	beq.n	8004dee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	2203      	movs	r2, #3
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d123      	bne.n	8004e42 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	08da      	lsrs	r2, r3, #3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3208      	adds	r2, #8
 8004e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e06:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	220f      	movs	r2, #15
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	08da      	lsrs	r2, r3, #3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3208      	adds	r2, #8
 8004e3c:	6939      	ldr	r1, [r7, #16]
 8004e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	43db      	mvns	r3, r3
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4013      	ands	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f003 0203 	and.w	r2, r3, #3
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 80ac 	beq.w	8004fdc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e84:	4b5e      	ldr	r3, [pc, #376]	@ (8005000 <HAL_GPIO_Init+0x2f8>)
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	4a5d      	ldr	r2, [pc, #372]	@ (8005000 <HAL_GPIO_Init+0x2f8>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6213      	str	r3, [r2, #32]
 8004e90:	4b5b      	ldr	r3, [pc, #364]	@ (8005000 <HAL_GPIO_Init+0x2f8>)
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e9c:	4a59      	ldr	r2, [pc, #356]	@ (8005004 <HAL_GPIO_Init+0x2fc>)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	089b      	lsrs	r3, r3, #2
 8004ea2:	3302      	adds	r3, #2
 8004ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	220f      	movs	r2, #15
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a51      	ldr	r2, [pc, #324]	@ (8005008 <HAL_GPIO_Init+0x300>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d025      	beq.n	8004f14 <HAL_GPIO_Init+0x20c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a50      	ldr	r2, [pc, #320]	@ (800500c <HAL_GPIO_Init+0x304>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d01f      	beq.n	8004f10 <HAL_GPIO_Init+0x208>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a4f      	ldr	r2, [pc, #316]	@ (8005010 <HAL_GPIO_Init+0x308>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d019      	beq.n	8004f0c <HAL_GPIO_Init+0x204>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a4e      	ldr	r2, [pc, #312]	@ (8005014 <HAL_GPIO_Init+0x30c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d013      	beq.n	8004f08 <HAL_GPIO_Init+0x200>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a4d      	ldr	r2, [pc, #308]	@ (8005018 <HAL_GPIO_Init+0x310>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00d      	beq.n	8004f04 <HAL_GPIO_Init+0x1fc>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a4c      	ldr	r2, [pc, #304]	@ (800501c <HAL_GPIO_Init+0x314>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d007      	beq.n	8004f00 <HAL_GPIO_Init+0x1f8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a4b      	ldr	r2, [pc, #300]	@ (8005020 <HAL_GPIO_Init+0x318>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d101      	bne.n	8004efc <HAL_GPIO_Init+0x1f4>
 8004ef8:	2306      	movs	r3, #6
 8004efa:	e00c      	b.n	8004f16 <HAL_GPIO_Init+0x20e>
 8004efc:	2307      	movs	r3, #7
 8004efe:	e00a      	b.n	8004f16 <HAL_GPIO_Init+0x20e>
 8004f00:	2305      	movs	r3, #5
 8004f02:	e008      	b.n	8004f16 <HAL_GPIO_Init+0x20e>
 8004f04:	2304      	movs	r3, #4
 8004f06:	e006      	b.n	8004f16 <HAL_GPIO_Init+0x20e>
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e004      	b.n	8004f16 <HAL_GPIO_Init+0x20e>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e002      	b.n	8004f16 <HAL_GPIO_Init+0x20e>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <HAL_GPIO_Init+0x20e>
 8004f14:	2300      	movs	r3, #0
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	f002 0203 	and.w	r2, r2, #3
 8004f1c:	0092      	lsls	r2, r2, #2
 8004f1e:	4093      	lsls	r3, r2
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f26:	4937      	ldr	r1, [pc, #220]	@ (8005004 <HAL_GPIO_Init+0x2fc>)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	089b      	lsrs	r3, r3, #2
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f34:	4b3b      	ldr	r3, [pc, #236]	@ (8005024 <HAL_GPIO_Init+0x31c>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4013      	ands	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f58:	4a32      	ldr	r2, [pc, #200]	@ (8005024 <HAL_GPIO_Init+0x31c>)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f5e:	4b31      	ldr	r3, [pc, #196]	@ (8005024 <HAL_GPIO_Init+0x31c>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	43db      	mvns	r3, r3
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f82:	4a28      	ldr	r2, [pc, #160]	@ (8005024 <HAL_GPIO_Init+0x31c>)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f88:	4b26      	ldr	r3, [pc, #152]	@ (8005024 <HAL_GPIO_Init+0x31c>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4013      	ands	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004fac:	4a1d      	ldr	r2, [pc, #116]	@ (8005024 <HAL_GPIO_Init+0x31c>)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8005024 <HAL_GPIO_Init+0x31c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004fd6:	4a13      	ldr	r2, [pc, #76]	@ (8005024 <HAL_GPIO_Init+0x31c>)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f47f ae97 	bne.w	8004d20 <HAL_GPIO_Init+0x18>
  }
}
 8004ff2:	bf00      	nop
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40023800 	.word	0x40023800
 8005004:	40010000 	.word	0x40010000
 8005008:	40020000 	.word	0x40020000
 800500c:	40020400 	.word	0x40020400
 8005010:	40020800 	.word	0x40020800
 8005014:	40020c00 	.word	0x40020c00
 8005018:	40021000 	.word	0x40021000
 800501c:	40021400 	.word	0x40021400
 8005020:	40021800 	.word	0x40021800
 8005024:	40010400 	.word	0x40010400

08005028 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005036:	2300      	movs	r3, #0
 8005038:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800503e:	e0c4      	b.n	80051ca <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8005040:	2201      	movs	r2, #1
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	4013      	ands	r3, r2
 800504c:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80b7 	beq.w	80051c4 <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 8005056:	4a63      	ldr	r2, [pc, #396]	@ (80051e4 <HAL_GPIO_DeInit+0x1bc>)
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	089b      	lsrs	r3, r3, #2
 800505c:	3302      	adds	r3, #2
 800505e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005062:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	220f      	movs	r2, #15
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4013      	ands	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a5b      	ldr	r2, [pc, #364]	@ (80051e8 <HAL_GPIO_DeInit+0x1c0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d025      	beq.n	80050cc <HAL_GPIO_DeInit+0xa4>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a5a      	ldr	r2, [pc, #360]	@ (80051ec <HAL_GPIO_DeInit+0x1c4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d01f      	beq.n	80050c8 <HAL_GPIO_DeInit+0xa0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a59      	ldr	r2, [pc, #356]	@ (80051f0 <HAL_GPIO_DeInit+0x1c8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d019      	beq.n	80050c4 <HAL_GPIO_DeInit+0x9c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a58      	ldr	r2, [pc, #352]	@ (80051f4 <HAL_GPIO_DeInit+0x1cc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <HAL_GPIO_DeInit+0x98>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a57      	ldr	r2, [pc, #348]	@ (80051f8 <HAL_GPIO_DeInit+0x1d0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00d      	beq.n	80050bc <HAL_GPIO_DeInit+0x94>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a56      	ldr	r2, [pc, #344]	@ (80051fc <HAL_GPIO_DeInit+0x1d4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <HAL_GPIO_DeInit+0x90>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a55      	ldr	r2, [pc, #340]	@ (8005200 <HAL_GPIO_DeInit+0x1d8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d101      	bne.n	80050b4 <HAL_GPIO_DeInit+0x8c>
 80050b0:	2306      	movs	r3, #6
 80050b2:	e00c      	b.n	80050ce <HAL_GPIO_DeInit+0xa6>
 80050b4:	2307      	movs	r3, #7
 80050b6:	e00a      	b.n	80050ce <HAL_GPIO_DeInit+0xa6>
 80050b8:	2305      	movs	r3, #5
 80050ba:	e008      	b.n	80050ce <HAL_GPIO_DeInit+0xa6>
 80050bc:	2304      	movs	r3, #4
 80050be:	e006      	b.n	80050ce <HAL_GPIO_DeInit+0xa6>
 80050c0:	2303      	movs	r3, #3
 80050c2:	e004      	b.n	80050ce <HAL_GPIO_DeInit+0xa6>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e002      	b.n	80050ce <HAL_GPIO_DeInit+0xa6>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <HAL_GPIO_DeInit+0xa6>
 80050cc:	2300      	movs	r3, #0
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	f002 0203 	and.w	r2, r2, #3
 80050d4:	0092      	lsls	r2, r2, #2
 80050d6:	4093      	lsls	r3, r2
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d132      	bne.n	8005144 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80050de:	4b49      	ldr	r3, [pc, #292]	@ (8005204 <HAL_GPIO_DeInit+0x1dc>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	43db      	mvns	r3, r3
 80050e6:	4947      	ldr	r1, [pc, #284]	@ (8005204 <HAL_GPIO_DeInit+0x1dc>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80050ec:	4b45      	ldr	r3, [pc, #276]	@ (8005204 <HAL_GPIO_DeInit+0x1dc>)
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	43db      	mvns	r3, r3
 80050f4:	4943      	ldr	r1, [pc, #268]	@ (8005204 <HAL_GPIO_DeInit+0x1dc>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80050fa:	4b42      	ldr	r3, [pc, #264]	@ (8005204 <HAL_GPIO_DeInit+0x1dc>)
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	43db      	mvns	r3, r3
 8005102:	4940      	ldr	r1, [pc, #256]	@ (8005204 <HAL_GPIO_DeInit+0x1dc>)
 8005104:	4013      	ands	r3, r2
 8005106:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005108:	4b3e      	ldr	r3, [pc, #248]	@ (8005204 <HAL_GPIO_DeInit+0x1dc>)
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	43db      	mvns	r3, r3
 8005110:	493c      	ldr	r1, [pc, #240]	@ (8005204 <HAL_GPIO_DeInit+0x1dc>)
 8005112:	4013      	ands	r3, r2
 8005114:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f003 0303 	and.w	r3, r3, #3
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	220f      	movs	r2, #15
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8005126:	4a2f      	ldr	r2, [pc, #188]	@ (80051e4 <HAL_GPIO_DeInit+0x1bc>)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	089b      	lsrs	r3, r3, #2
 800512c:	3302      	adds	r3, #2
 800512e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	43da      	mvns	r2, r3
 8005136:	482b      	ldr	r0, [pc, #172]	@ (80051e4 <HAL_GPIO_DeInit+0x1bc>)
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	089b      	lsrs	r3, r3, #2
 800513c:	400a      	ands	r2, r1
 800513e:	3302      	adds	r3, #2
 8005140:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	2103      	movs	r1, #3
 800514e:	fa01 f303 	lsl.w	r3, r1, r3
 8005152:	43db      	mvns	r3, r3
 8005154:	401a      	ands	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	08da      	lsrs	r2, r3, #3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3208      	adds	r2, #8
 8005162:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	220f      	movs	r2, #15
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	08d2      	lsrs	r2, r2, #3
 800517a:	4019      	ands	r1, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3208      	adds	r2, #8
 8005180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	2103      	movs	r1, #3
 800518e:	fa01 f303 	lsl.w	r3, r1, r3
 8005192:	43db      	mvns	r3, r3
 8005194:	401a      	ands	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	2101      	movs	r1, #1
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	fa01 f303 	lsl.w	r3, r1, r3
 80051a6:	43db      	mvns	r3, r3
 80051a8:	401a      	ands	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	2103      	movs	r1, #3
 80051b8:	fa01 f303 	lsl.w	r3, r1, r3
 80051bc:	43db      	mvns	r3, r3
 80051be:	401a      	ands	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	609a      	str	r2, [r3, #8]
    }

    position++;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	3301      	adds	r3, #1
 80051c8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	fa22 f303 	lsr.w	r3, r2, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f47f af34 	bne.w	8005040 <HAL_GPIO_DeInit+0x18>
  }
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40020000 	.word	0x40020000
 80051ec:	40020400 	.word	0x40020400
 80051f0:	40020800 	.word	0x40020800
 80051f4:	40020c00 	.word	0x40020c00
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40021400 	.word	0x40021400
 8005200:	40021800 	.word	0x40021800
 8005204:	40010400 	.word	0x40010400

08005208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	807b      	strh	r3, [r7, #2]
 8005214:	4613      	mov	r3, r2
 8005216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005218:	787b      	ldrb	r3, [r7, #1]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800521e:	887a      	ldrh	r2, [r7, #2]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8005224:	e003      	b.n	800522e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8005226:	887b      	ldrh	r3, [r7, #2]
 8005228:	041a      	lsls	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	619a      	str	r2, [r3, #24]
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e12b      	b.n	80054a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f95d 	bl	800551e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2224      	movs	r2, #36	@ 0x24
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0201 	bic.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800528a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800529a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800529c:	f001 fdac 	bl	8006df8 <HAL_RCC_GetPCLK1Freq>
 80052a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4a81      	ldr	r2, [pc, #516]	@ (80054ac <HAL_I2C_Init+0x274>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d807      	bhi.n	80052bc <HAL_I2C_Init+0x84>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4a80      	ldr	r2, [pc, #512]	@ (80054b0 <HAL_I2C_Init+0x278>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	bf94      	ite	ls
 80052b4:	2301      	movls	r3, #1
 80052b6:	2300      	movhi	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	e006      	b.n	80052ca <HAL_I2C_Init+0x92>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a7d      	ldr	r2, [pc, #500]	@ (80054b4 <HAL_I2C_Init+0x27c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	bf94      	ite	ls
 80052c4:	2301      	movls	r3, #1
 80052c6:	2300      	movhi	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e0e7      	b.n	80054a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4a78      	ldr	r2, [pc, #480]	@ (80054b8 <HAL_I2C_Init+0x280>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	0c9b      	lsrs	r3, r3, #18
 80052dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	4a6a      	ldr	r2, [pc, #424]	@ (80054ac <HAL_I2C_Init+0x274>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d802      	bhi.n	800530c <HAL_I2C_Init+0xd4>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	3301      	adds	r3, #1
 800530a:	e009      	b.n	8005320 <HAL_I2C_Init+0xe8>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	4a69      	ldr	r2, [pc, #420]	@ (80054bc <HAL_I2C_Init+0x284>)
 8005318:	fba2 2303 	umull	r2, r3, r2, r3
 800531c:	099b      	lsrs	r3, r3, #6
 800531e:	3301      	adds	r3, #1
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	430b      	orrs	r3, r1
 8005326:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005332:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	495c      	ldr	r1, [pc, #368]	@ (80054ac <HAL_I2C_Init+0x274>)
 800533c:	428b      	cmp	r3, r1
 800533e:	d819      	bhi.n	8005374 <HAL_I2C_Init+0x13c>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	1e59      	subs	r1, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	fbb1 f3f3 	udiv	r3, r1, r3
 800534e:	1c59      	adds	r1, r3, #1
 8005350:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005354:	400b      	ands	r3, r1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <HAL_I2C_Init+0x138>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1e59      	subs	r1, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	fbb1 f3f3 	udiv	r3, r1, r3
 8005368:	3301      	adds	r3, #1
 800536a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536e:	e051      	b.n	8005414 <HAL_I2C_Init+0x1dc>
 8005370:	2304      	movs	r3, #4
 8005372:	e04f      	b.n	8005414 <HAL_I2C_Init+0x1dc>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d111      	bne.n	80053a0 <HAL_I2C_Init+0x168>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	1e58      	subs	r0, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6859      	ldr	r1, [r3, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	440b      	add	r3, r1
 800538a:	fbb0 f3f3 	udiv	r3, r0, r3
 800538e:	3301      	adds	r3, #1
 8005390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005394:	2b00      	cmp	r3, #0
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	e012      	b.n	80053c6 <HAL_I2C_Init+0x18e>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1e58      	subs	r0, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6859      	ldr	r1, [r3, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	0099      	lsls	r1, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053b6:	3301      	adds	r3, #1
 80053b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bf0c      	ite	eq
 80053c0:	2301      	moveq	r3, #1
 80053c2:	2300      	movne	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <HAL_I2C_Init+0x196>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e022      	b.n	8005414 <HAL_I2C_Init+0x1dc>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10e      	bne.n	80053f4 <HAL_I2C_Init+0x1bc>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1e58      	subs	r0, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6859      	ldr	r1, [r3, #4]
 80053de:	460b      	mov	r3, r1
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	440b      	add	r3, r1
 80053e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80053e8:	3301      	adds	r3, #1
 80053ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053f2:	e00f      	b.n	8005414 <HAL_I2C_Init+0x1dc>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	1e58      	subs	r0, r3, #1
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6859      	ldr	r1, [r3, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	0099      	lsls	r1, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	fbb0 f3f3 	udiv	r3, r0, r3
 800540a:	3301      	adds	r3, #1
 800540c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005410:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	6809      	ldr	r1, [r1, #0]
 8005418:	4313      	orrs	r3, r2
 800541a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69da      	ldr	r2, [r3, #28]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005442:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6911      	ldr	r1, [r2, #16]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	68d2      	ldr	r2, [r2, #12]
 800544e:	4311      	orrs	r1, r2
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	430b      	orrs	r3, r1
 8005456:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	000186a0 	.word	0x000186a0
 80054b0:	001e847f 	.word	0x001e847f
 80054b4:	003d08ff 	.word	0x003d08ff
 80054b8:	431bde83 	.word	0x431bde83
 80054bc:	10624dd3 	.word	0x10624dd3

080054c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e021      	b.n	8005516 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2224      	movs	r2, #36	@ 0x24
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f820 	bl	8005530 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr

08005530 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr
	...

08005544 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	461a      	mov	r2, r3
 8005552:	4603      	mov	r3, r0
 8005554:	817b      	strh	r3, [r7, #10]
 8005556:	460b      	mov	r3, r1
 8005558:	813b      	strh	r3, [r7, #8]
 800555a:	4613      	mov	r3, r2
 800555c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800555e:	f7ff fac3 	bl	8004ae8 <HAL_GetTick>
 8005562:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b20      	cmp	r3, #32
 800556e:	f040 80d9 	bne.w	8005724 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	2319      	movs	r3, #25
 8005578:	2201      	movs	r2, #1
 800557a:	496d      	ldr	r1, [pc, #436]	@ (8005730 <HAL_I2C_Mem_Write+0x1ec>)
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 fc97 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005588:	2302      	movs	r3, #2
 800558a:	e0cc      	b.n	8005726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_I2C_Mem_Write+0x56>
 8005596:	2302      	movs	r3, #2
 8005598:	e0c5      	b.n	8005726 <HAL_I2C_Mem_Write+0x1e2>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d007      	beq.n	80055c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2221      	movs	r2, #33	@ 0x21
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2240      	movs	r2, #64	@ 0x40
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a3a      	ldr	r2, [r7, #32]
 80055ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4a4d      	ldr	r2, [pc, #308]	@ (8005734 <HAL_I2C_Mem_Write+0x1f0>)
 8005600:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005602:	88f8      	ldrh	r0, [r7, #6]
 8005604:	893a      	ldrh	r2, [r7, #8]
 8005606:	8979      	ldrh	r1, [r7, #10]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	4603      	mov	r3, r0
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 face 	bl	8005bb4 <I2C_RequestMemoryWrite>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d052      	beq.n	80056c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e081      	b.n	8005726 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 fd5c 	bl	80060e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00d      	beq.n	800564e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005636:	2b04      	cmp	r3, #4
 8005638:	d107      	bne.n	800564a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e06b      	b.n	8005726 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	781a      	ldrb	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b04      	cmp	r3, #4
 800568a:	d11b      	bne.n	80056c4 <HAL_I2C_Mem_Write+0x180>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005690:	2b00      	cmp	r3, #0
 8005692:	d017      	beq.n	80056c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005698:	781a      	ldrb	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1aa      	bne.n	8005622 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fd4f 	bl	8006174 <I2C_WaitOnBTFFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00d      	beq.n	80056f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d107      	bne.n	80056f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e016      	b.n	8005726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	e000      	b.n	8005726 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005724:	2302      	movs	r3, #2
  }
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	00100002 	.word	0x00100002
 8005734:	ffff0000 	.word	0xffff0000

08005738 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08c      	sub	sp, #48	@ 0x30
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	4608      	mov	r0, r1
 8005742:	4611      	mov	r1, r2
 8005744:	461a      	mov	r2, r3
 8005746:	4603      	mov	r3, r0
 8005748:	817b      	strh	r3, [r7, #10]
 800574a:	460b      	mov	r3, r1
 800574c:	813b      	strh	r3, [r7, #8]
 800574e:	4613      	mov	r3, r2
 8005750:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005752:	f7ff f9c9 	bl	8004ae8 <HAL_GetTick>
 8005756:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b20      	cmp	r3, #32
 8005762:	f040 8208 	bne.w	8005b76 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	2319      	movs	r3, #25
 800576c:	2201      	movs	r2, #1
 800576e:	497b      	ldr	r1, [pc, #492]	@ (800595c <HAL_I2C_Mem_Read+0x224>)
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fb9d 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800577c:	2302      	movs	r3, #2
 800577e:	e1fb      	b.n	8005b78 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005786:	2b01      	cmp	r3, #1
 8005788:	d101      	bne.n	800578e <HAL_I2C_Mem_Read+0x56>
 800578a:	2302      	movs	r3, #2
 800578c:	e1f4      	b.n	8005b78 <HAL_I2C_Mem_Read+0x440>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d007      	beq.n	80057b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2222      	movs	r2, #34	@ 0x22
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2240      	movs	r2, #64	@ 0x40
 80057d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80057e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005960 <HAL_I2C_Mem_Read+0x228>)
 80057f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057f6:	88f8      	ldrh	r0, [r7, #6]
 80057f8:	893a      	ldrh	r2, [r7, #8]
 80057fa:	8979      	ldrh	r1, [r7, #10]
 80057fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fe:	9301      	str	r3, [sp, #4]
 8005800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	4603      	mov	r3, r0
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 fa6a 	bl	8005ce0 <I2C_RequestMemoryRead>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e1b0      	b.n	8005b78 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	d113      	bne.n	8005846 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800581e:	2300      	movs	r3, #0
 8005820:	623b      	str	r3, [r7, #32]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	623b      	str	r3, [r7, #32]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	623b      	str	r3, [r7, #32]
 8005832:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e184      	b.n	8005b50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800584a:	2b01      	cmp	r3, #1
 800584c:	d11b      	bne.n	8005886 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800585c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	61fb      	str	r3, [r7, #28]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e164      	b.n	8005b50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800588a:	2b02      	cmp	r3, #2
 800588c:	d11b      	bne.n	80058c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800589c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	e144      	b.n	8005b50 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80058dc:	e138      	b.n	8005b50 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	f200 80f1 	bhi.w	8005aca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d123      	bne.n	8005938 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fc85 	bl	8006204 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e139      	b.n	8005b78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005936:	e10b      	b.n	8005b50 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800593c:	2b02      	cmp	r3, #2
 800593e:	d14e      	bne.n	80059de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005946:	2200      	movs	r2, #0
 8005948:	4906      	ldr	r1, [pc, #24]	@ (8005964 <HAL_I2C_Mem_Read+0x22c>)
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 fab0 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d008      	beq.n	8005968 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e10e      	b.n	8005b78 <HAL_I2C_Mem_Read+0x440>
 800595a:	bf00      	nop
 800595c:	00100002 	.word	0x00100002
 8005960:	ffff0000 	.word	0xffff0000
 8005964:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059dc:	e0b8      	b.n	8005b50 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e4:	2200      	movs	r2, #0
 80059e6:	4966      	ldr	r1, [pc, #408]	@ (8005b80 <HAL_I2C_Mem_Read+0x448>)
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fa61 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0bf      	b.n	8005b78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a40:	2200      	movs	r2, #0
 8005a42:	494f      	ldr	r1, [pc, #316]	@ (8005b80 <HAL_I2C_Mem_Read+0x448>)
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fa33 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e091      	b.n	8005b78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ac8:	e042      	b.n	8005b50 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005acc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 fb98 	bl	8006204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e04c      	b.n	8005b78 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d118      	bne.n	8005b50 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f47f aec2 	bne.w	80058de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e000      	b.n	8005b78 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005b76:	2302      	movs	r3, #2
  }
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3728      	adds	r7, #40	@ 0x28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	00010004 	.word	0x00010004

08005b84 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b92:	b2db      	uxtb	r3, r3
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bc80      	pop	{r7}
 8005b9c:	4770      	bx	lr

08005b9e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr

08005bb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	817b      	strh	r3, [r7, #10]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	813b      	strh	r3, [r7, #8]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 f960 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00d      	beq.n	8005c12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c04:	d103      	bne.n	8005c0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e05f      	b.n	8005cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c12:	897b      	ldrh	r3, [r7, #10]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	461a      	mov	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	6a3a      	ldr	r2, [r7, #32]
 8005c26:	492d      	ldr	r1, [pc, #180]	@ (8005cdc <I2C_RequestMemoryWrite+0x128>)
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f9bb 	bl	8005fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e04c      	b.n	8005cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c50:	6a39      	ldr	r1, [r7, #32]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 fa46 	bl	80060e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00d      	beq.n	8005c7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d107      	bne.n	8005c76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e02b      	b.n	8005cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c7a:	88fb      	ldrh	r3, [r7, #6]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d105      	bne.n	8005c8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c80:	893b      	ldrh	r3, [r7, #8]
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	611a      	str	r2, [r3, #16]
 8005c8a:	e021      	b.n	8005cd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c8c:	893b      	ldrh	r3, [r7, #8]
 8005c8e:	0a1b      	lsrs	r3, r3, #8
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c9c:	6a39      	ldr	r1, [r7, #32]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fa20 	bl	80060e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00d      	beq.n	8005cc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d107      	bne.n	8005cc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e005      	b.n	8005cd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cc6:	893b      	ldrh	r3, [r7, #8]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	00010002 	.word	0x00010002

08005ce0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b088      	sub	sp, #32
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	4608      	mov	r0, r1
 8005cea:	4611      	mov	r1, r2
 8005cec:	461a      	mov	r2, r3
 8005cee:	4603      	mov	r3, r0
 8005cf0:	817b      	strh	r3, [r7, #10]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	813b      	strh	r3, [r7, #8]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f8c2 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00d      	beq.n	8005d4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d40:	d103      	bne.n	8005d4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e0aa      	b.n	8005ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d4e:	897b      	ldrh	r3, [r7, #10]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	6a3a      	ldr	r2, [r7, #32]
 8005d62:	4952      	ldr	r1, [pc, #328]	@ (8005eac <I2C_RequestMemoryRead+0x1cc>)
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f91d 	bl	8005fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e097      	b.n	8005ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d8c:	6a39      	ldr	r1, [r7, #32]
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 f9a8 	bl	80060e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00d      	beq.n	8005db6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d107      	bne.n	8005db2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005db0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e076      	b.n	8005ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005db6:	88fb      	ldrh	r3, [r7, #6]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d105      	bne.n	8005dc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dbc:	893b      	ldrh	r3, [r7, #8]
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	611a      	str	r2, [r3, #16]
 8005dc6:	e021      	b.n	8005e0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005dc8:	893b      	ldrh	r3, [r7, #8]
 8005dca:	0a1b      	lsrs	r3, r3, #8
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd8:	6a39      	ldr	r1, [r7, #32]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 f982 	bl	80060e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00d      	beq.n	8005e02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d107      	bne.n	8005dfe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e050      	b.n	8005ea4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e02:	893b      	ldrh	r3, [r7, #8]
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e0e:	6a39      	ldr	r1, [r7, #32]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 f967 	bl	80060e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00d      	beq.n	8005e38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d107      	bne.n	8005e34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e035      	b.n	8005ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f82b 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00d      	beq.n	8005e7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e6e:	d103      	bne.n	8005e78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e013      	b.n	8005ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e7c:	897b      	ldrh	r3, [r7, #10]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f043 0301 	orr.w	r3, r3, #1
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8e:	6a3a      	ldr	r2, [r7, #32]
 8005e90:	4906      	ldr	r1, [pc, #24]	@ (8005eac <I2C_RequestMemoryRead+0x1cc>)
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f886 	bl	8005fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	00010002 	.word	0x00010002

08005eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ec0:	e048      	b.n	8005f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec8:	d044      	beq.n	8005f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eca:	f7fe fe0d 	bl	8004ae8 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d302      	bcc.n	8005ee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d139      	bne.n	8005f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	0c1b      	lsrs	r3, r3, #16
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d10d      	bne.n	8005f06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	43da      	mvns	r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bf0c      	ite	eq
 8005efc:	2301      	moveq	r3, #1
 8005efe:	2300      	movne	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	e00c      	b.n	8005f20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	43da      	mvns	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4013      	ands	r3, r2
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf0c      	ite	eq
 8005f18:	2301      	moveq	r3, #1
 8005f1a:	2300      	movne	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d116      	bne.n	8005f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f40:	f043 0220 	orr.w	r2, r3, #32
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e023      	b.n	8005f9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	0c1b      	lsrs	r3, r3, #16
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d10d      	bne.n	8005f7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	43da      	mvns	r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bf0c      	ite	eq
 8005f70:	2301      	moveq	r3, #1
 8005f72:	2300      	movne	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	e00c      	b.n	8005f94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	43da      	mvns	r2, r3
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4013      	ands	r3, r2
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d093      	beq.n	8005ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fb2:	e071      	b.n	8006098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fc2:	d123      	bne.n	800600c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005fdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff8:	f043 0204 	orr.w	r2, r3, #4
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e067      	b.n	80060dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d041      	beq.n	8006098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006014:	f7fe fd68 	bl	8004ae8 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d136      	bne.n	8006098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	0c1b      	lsrs	r3, r3, #16
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	d10c      	bne.n	800604e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	43da      	mvns	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4013      	ands	r3, r2
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	bf14      	ite	ne
 8006046:	2301      	movne	r3, #1
 8006048:	2300      	moveq	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	e00b      	b.n	8006066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	43da      	mvns	r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	4013      	ands	r3, r2
 800605a:	b29b      	uxth	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	bf14      	ite	ne
 8006060:	2301      	movne	r3, #1
 8006062:	2300      	moveq	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d016      	beq.n	8006098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006084:	f043 0220 	orr.w	r2, r3, #32
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e021      	b.n	80060dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	0c1b      	lsrs	r3, r3, #16
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d10c      	bne.n	80060bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	43da      	mvns	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	4013      	ands	r3, r2
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	bf14      	ite	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	2300      	moveq	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	e00b      	b.n	80060d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	43da      	mvns	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4013      	ands	r3, r2
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bf14      	ite	ne
 80060ce:	2301      	movne	r3, #1
 80060d0:	2300      	moveq	r3, #0
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f47f af6d 	bne.w	8005fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060f0:	e034      	b.n	800615c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f8e3 	bl	80062be <I2C_IsAcknowledgeFailed>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e034      	b.n	800616c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006108:	d028      	beq.n	800615c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610a:	f7fe fced 	bl	8004ae8 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	429a      	cmp	r2, r3
 8006118:	d302      	bcc.n	8006120 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d11d      	bne.n	800615c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800612a:	2b80      	cmp	r3, #128	@ 0x80
 800612c:	d016      	beq.n	800615c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006148:	f043 0220 	orr.w	r2, r3, #32
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e007      	b.n	800616c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006166:	2b80      	cmp	r3, #128	@ 0x80
 8006168:	d1c3      	bne.n	80060f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006180:	e034      	b.n	80061ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f89b 	bl	80062be <I2C_IsAcknowledgeFailed>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e034      	b.n	80061fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d028      	beq.n	80061ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619a:	f7fe fca5 	bl	8004ae8 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d302      	bcc.n	80061b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d11d      	bne.n	80061ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f003 0304 	and.w	r3, r3, #4
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d016      	beq.n	80061ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d8:	f043 0220 	orr.w	r2, r3, #32
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e007      	b.n	80061fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f003 0304 	and.w	r3, r3, #4
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d1c3      	bne.n	8006182 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006210:	e049      	b.n	80062a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	f003 0310 	and.w	r3, r3, #16
 800621c:	2b10      	cmp	r3, #16
 800621e:	d119      	bne.n	8006254 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0210 	mvn.w	r2, #16
 8006228:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e030      	b.n	80062b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006254:	f7fe fc48 	bl	8004ae8 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	429a      	cmp	r2, r3
 8006262:	d302      	bcc.n	800626a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d11d      	bne.n	80062a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006274:	2b40      	cmp	r3, #64	@ 0x40
 8006276:	d016      	beq.n	80062a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006292:	f043 0220 	orr.w	r2, r3, #32
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e007      	b.n	80062b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b0:	2b40      	cmp	r3, #64	@ 0x40
 80062b2:	d1ae      	bne.n	8006212 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d4:	d11b      	bne.n	800630e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80062de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	f043 0204 	orr.w	r2, r3, #4
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr
	...

0800631c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e31d      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800632e:	4b94      	ldr	r3, [pc, #592]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006338:	4b91      	ldr	r3, [pc, #580]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006340:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d07b      	beq.n	8006446 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b08      	cmp	r3, #8
 8006352:	d006      	beq.n	8006362 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b0c      	cmp	r3, #12
 8006358:	d10f      	bne.n	800637a <HAL_RCC_OscConfig+0x5e>
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006360:	d10b      	bne.n	800637a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006362:	4b87      	ldr	r3, [pc, #540]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d06a      	beq.n	8006444 <HAL_RCC_OscConfig+0x128>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d166      	bne.n	8006444 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e2f7      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d106      	bne.n	8006390 <HAL_RCC_OscConfig+0x74>
 8006382:	4b7f      	ldr	r3, [pc, #508]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a7e      	ldr	r2, [pc, #504]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 8006388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e02d      	b.n	80063ec <HAL_RCC_OscConfig+0xd0>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10c      	bne.n	80063b2 <HAL_RCC_OscConfig+0x96>
 8006398:	4b79      	ldr	r3, [pc, #484]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a78      	ldr	r2, [pc, #480]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 800639e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	4b76      	ldr	r3, [pc, #472]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a75      	ldr	r2, [pc, #468]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 80063aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	e01c      	b.n	80063ec <HAL_RCC_OscConfig+0xd0>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2b05      	cmp	r3, #5
 80063b8:	d10c      	bne.n	80063d4 <HAL_RCC_OscConfig+0xb8>
 80063ba:	4b71      	ldr	r3, [pc, #452]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a70      	ldr	r2, [pc, #448]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 80063c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	4b6e      	ldr	r3, [pc, #440]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a6d      	ldr	r2, [pc, #436]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 80063cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	e00b      	b.n	80063ec <HAL_RCC_OscConfig+0xd0>
 80063d4:	4b6a      	ldr	r3, [pc, #424]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a69      	ldr	r2, [pc, #420]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 80063da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	4b67      	ldr	r3, [pc, #412]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a66      	ldr	r2, [pc, #408]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 80063e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d013      	beq.n	800641c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f4:	f7fe fb78 	bl	8004ae8 <HAL_GetTick>
 80063f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063fa:	e008      	b.n	800640e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063fc:	f7fe fb74 	bl	8004ae8 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b64      	cmp	r3, #100	@ 0x64
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e2ad      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800640e:	4b5c      	ldr	r3, [pc, #368]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0f0      	beq.n	80063fc <HAL_RCC_OscConfig+0xe0>
 800641a:	e014      	b.n	8006446 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641c:	f7fe fb64 	bl	8004ae8 <HAL_GetTick>
 8006420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006424:	f7fe fb60 	bl	8004ae8 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b64      	cmp	r3, #100	@ 0x64
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e299      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006436:	4b52      	ldr	r3, [pc, #328]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f0      	bne.n	8006424 <HAL_RCC_OscConfig+0x108>
 8006442:	e000      	b.n	8006446 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d05a      	beq.n	8006508 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b04      	cmp	r3, #4
 8006456:	d005      	beq.n	8006464 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	2b0c      	cmp	r3, #12
 800645c:	d119      	bne.n	8006492 <HAL_RCC_OscConfig+0x176>
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d116      	bne.n	8006492 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006464:	4b46      	ldr	r3, [pc, #280]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_RCC_OscConfig+0x160>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d001      	beq.n	800647c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e276      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800647c:	4b40      	ldr	r3, [pc, #256]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	021b      	lsls	r3, r3, #8
 800648a:	493d      	ldr	r1, [pc, #244]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 800648c:	4313      	orrs	r3, r2
 800648e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006490:	e03a      	b.n	8006508 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d020      	beq.n	80064dc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800649a:	4b3a      	ldr	r3, [pc, #232]	@ (8006584 <HAL_RCC_OscConfig+0x268>)
 800649c:	2201      	movs	r2, #1
 800649e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064a0:	f7fe fb22 	bl	8004ae8 <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064a8:	f7fe fb1e 	bl	8004ae8 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e257      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064ba:	4b31      	ldr	r3, [pc, #196]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0f0      	beq.n	80064a8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c6:	4b2e      	ldr	r3, [pc, #184]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	492a      	ldr	r1, [pc, #168]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	604b      	str	r3, [r1, #4]
 80064da:	e015      	b.n	8006508 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064dc:	4b29      	ldr	r3, [pc, #164]	@ (8006584 <HAL_RCC_OscConfig+0x268>)
 80064de:	2200      	movs	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e2:	f7fe fb01 	bl	8004ae8 <HAL_GetTick>
 80064e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064e8:	e008      	b.n	80064fc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064ea:	f7fe fafd 	bl	8004ae8 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e236      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064fc:	4b20      	ldr	r3, [pc, #128]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f0      	bne.n	80064ea <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0310 	and.w	r3, r3, #16
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 80b8 	beq.w	8006686 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d170      	bne.n	80065fe <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800651c:	4b18      	ldr	r3, [pc, #96]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <HAL_RCC_OscConfig+0x218>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e21a      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a1a      	ldr	r2, [r3, #32]
 8006538:	4b11      	ldr	r3, [pc, #68]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006540:	429a      	cmp	r2, r3
 8006542:	d921      	bls.n	8006588 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fc7d 	bl	8006e48 <RCC_SetFlashLatencyFromMSIRange>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e208      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006558:	4b09      	ldr	r3, [pc, #36]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	4906      	ldr	r1, [pc, #24]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 8006566:	4313      	orrs	r3, r2
 8006568:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800656a:	4b05      	ldr	r3, [pc, #20]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	061b      	lsls	r3, r3, #24
 8006578:	4901      	ldr	r1, [pc, #4]	@ (8006580 <HAL_RCC_OscConfig+0x264>)
 800657a:	4313      	orrs	r3, r2
 800657c:	604b      	str	r3, [r1, #4]
 800657e:	e020      	b.n	80065c2 <HAL_RCC_OscConfig+0x2a6>
 8006580:	40023800 	.word	0x40023800
 8006584:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006588:	4b99      	ldr	r3, [pc, #612]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	4996      	ldr	r1, [pc, #600]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 8006596:	4313      	orrs	r3, r2
 8006598:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800659a:	4b95      	ldr	r3, [pc, #596]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	061b      	lsls	r3, r3, #24
 80065a8:	4991      	ldr	r1, [pc, #580]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fc48 	bl	8006e48 <RCC_SetFlashLatencyFromMSIRange>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e1d3      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	0b5b      	lsrs	r3, r3, #13
 80065c8:	3301      	adds	r3, #1
 80065ca:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80065d2:	4a87      	ldr	r2, [pc, #540]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 80065d4:	6892      	ldr	r2, [r2, #8]
 80065d6:	0912      	lsrs	r2, r2, #4
 80065d8:	f002 020f 	and.w	r2, r2, #15
 80065dc:	4985      	ldr	r1, [pc, #532]	@ (80067f4 <HAL_RCC_OscConfig+0x4d8>)
 80065de:	5c8a      	ldrb	r2, [r1, r2]
 80065e0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80065e2:	4a85      	ldr	r2, [pc, #532]	@ (80067f8 <HAL_RCC_OscConfig+0x4dc>)
 80065e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80065e6:	4b85      	ldr	r3, [pc, #532]	@ (80067fc <HAL_RCC_OscConfig+0x4e0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe fa30 	bl	8004a50 <HAL_InitTick>
 80065f0:	4603      	mov	r3, r0
 80065f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d045      	beq.n	8006686 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	e1b5      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d029      	beq.n	800665a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006606:	4b7e      	ldr	r3, [pc, #504]	@ (8006800 <HAL_RCC_OscConfig+0x4e4>)
 8006608:	2201      	movs	r2, #1
 800660a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660c:	f7fe fa6c 	bl	8004ae8 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006614:	f7fe fa68 	bl	8004ae8 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e1a1      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006626:	4b72      	ldr	r3, [pc, #456]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0f0      	beq.n	8006614 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006632:	4b6f      	ldr	r3, [pc, #444]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	496c      	ldr	r1, [pc, #432]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 8006640:	4313      	orrs	r3, r2
 8006642:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006644:	4b6a      	ldr	r3, [pc, #424]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	061b      	lsls	r3, r3, #24
 8006652:	4967      	ldr	r1, [pc, #412]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 8006654:	4313      	orrs	r3, r2
 8006656:	604b      	str	r3, [r1, #4]
 8006658:	e015      	b.n	8006686 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800665a:	4b69      	ldr	r3, [pc, #420]	@ (8006800 <HAL_RCC_OscConfig+0x4e4>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006660:	f7fe fa42 	bl	8004ae8 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006668:	f7fe fa3e 	bl	8004ae8 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e177      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800667a:	4b5d      	ldr	r3, [pc, #372]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f0      	bne.n	8006668 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0308 	and.w	r3, r3, #8
 800668e:	2b00      	cmp	r3, #0
 8006690:	d030      	beq.n	80066f4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d016      	beq.n	80066c8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800669a:	4b5a      	ldr	r3, [pc, #360]	@ (8006804 <HAL_RCC_OscConfig+0x4e8>)
 800669c:	2201      	movs	r2, #1
 800669e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066a0:	f7fe fa22 	bl	8004ae8 <HAL_GetTick>
 80066a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066a6:	e008      	b.n	80066ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066a8:	f7fe fa1e 	bl	8004ae8 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e157      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066ba:	4b4d      	ldr	r3, [pc, #308]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 80066bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0f0      	beq.n	80066a8 <HAL_RCC_OscConfig+0x38c>
 80066c6:	e015      	b.n	80066f4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066c8:	4b4e      	ldr	r3, [pc, #312]	@ (8006804 <HAL_RCC_OscConfig+0x4e8>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ce:	f7fe fa0b 	bl	8004ae8 <HAL_GetTick>
 80066d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066d4:	e008      	b.n	80066e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066d6:	f7fe fa07 	bl	8004ae8 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e140      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066e8:	4b41      	ldr	r3, [pc, #260]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 80066ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1f0      	bne.n	80066d6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 80b5 	beq.w	800686c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006702:	2300      	movs	r3, #0
 8006704:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006706:	4b3a      	ldr	r3, [pc, #232]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 8006708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10d      	bne.n	800672e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006712:	4b37      	ldr	r3, [pc, #220]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 8006714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006716:	4a36      	ldr	r2, [pc, #216]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 8006718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800671c:	6253      	str	r3, [r2, #36]	@ 0x24
 800671e:	4b34      	ldr	r3, [pc, #208]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 8006720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006726:	60bb      	str	r3, [r7, #8]
 8006728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800672a:	2301      	movs	r3, #1
 800672c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800672e:	4b36      	ldr	r3, [pc, #216]	@ (8006808 <HAL_RCC_OscConfig+0x4ec>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d118      	bne.n	800676c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800673a:	4b33      	ldr	r3, [pc, #204]	@ (8006808 <HAL_RCC_OscConfig+0x4ec>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a32      	ldr	r2, [pc, #200]	@ (8006808 <HAL_RCC_OscConfig+0x4ec>)
 8006740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006746:	f7fe f9cf 	bl	8004ae8 <HAL_GetTick>
 800674a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800674c:	e008      	b.n	8006760 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800674e:	f7fe f9cb 	bl	8004ae8 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b64      	cmp	r3, #100	@ 0x64
 800675a:	d901      	bls.n	8006760 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e104      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006760:	4b29      	ldr	r3, [pc, #164]	@ (8006808 <HAL_RCC_OscConfig+0x4ec>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0f0      	beq.n	800674e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d106      	bne.n	8006782 <HAL_RCC_OscConfig+0x466>
 8006774:	4b1e      	ldr	r3, [pc, #120]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 8006776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006778:	4a1d      	ldr	r2, [pc, #116]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 800677a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800677e:	6353      	str	r3, [r2, #52]	@ 0x34
 8006780:	e02d      	b.n	80067de <HAL_RCC_OscConfig+0x4c2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10c      	bne.n	80067a4 <HAL_RCC_OscConfig+0x488>
 800678a:	4b19      	ldr	r3, [pc, #100]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 800678c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678e:	4a18      	ldr	r2, [pc, #96]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 8006790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006794:	6353      	str	r3, [r2, #52]	@ 0x34
 8006796:	4b16      	ldr	r3, [pc, #88]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 8006798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800679a:	4a15      	ldr	r2, [pc, #84]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 800679c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067a0:	6353      	str	r3, [r2, #52]	@ 0x34
 80067a2:	e01c      	b.n	80067de <HAL_RCC_OscConfig+0x4c2>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	2b05      	cmp	r3, #5
 80067aa:	d10c      	bne.n	80067c6 <HAL_RCC_OscConfig+0x4aa>
 80067ac:	4b10      	ldr	r3, [pc, #64]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 80067ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b0:	4a0f      	ldr	r2, [pc, #60]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 80067b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80067b6:	6353      	str	r3, [r2, #52]	@ 0x34
 80067b8:	4b0d      	ldr	r3, [pc, #52]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 80067ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067bc:	4a0c      	ldr	r2, [pc, #48]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 80067be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067c2:	6353      	str	r3, [r2, #52]	@ 0x34
 80067c4:	e00b      	b.n	80067de <HAL_RCC_OscConfig+0x4c2>
 80067c6:	4b0a      	ldr	r3, [pc, #40]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 80067c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ca:	4a09      	ldr	r2, [pc, #36]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 80067cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067d0:	6353      	str	r3, [r2, #52]	@ 0x34
 80067d2:	4b07      	ldr	r3, [pc, #28]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 80067d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d6:	4a06      	ldr	r2, [pc, #24]	@ (80067f0 <HAL_RCC_OscConfig+0x4d4>)
 80067d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067dc:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d024      	beq.n	8006830 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067e6:	f7fe f97f 	bl	8004ae8 <HAL_GetTick>
 80067ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067ec:	e019      	b.n	8006822 <HAL_RCC_OscConfig+0x506>
 80067ee:	bf00      	nop
 80067f0:	40023800 	.word	0x40023800
 80067f4:	080098a0 	.word	0x080098a0
 80067f8:	20000000 	.word	0x20000000
 80067fc:	200000bc 	.word	0x200000bc
 8006800:	42470020 	.word	0x42470020
 8006804:	42470680 	.word	0x42470680
 8006808:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800680c:	f7fe f96c 	bl	8004ae8 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800681a:	4293      	cmp	r3, r2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e0a3      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006822:	4b54      	ldr	r3, [pc, #336]	@ (8006974 <HAL_RCC_OscConfig+0x658>)
 8006824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0ee      	beq.n	800680c <HAL_RCC_OscConfig+0x4f0>
 800682e:	e014      	b.n	800685a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006830:	f7fe f95a 	bl	8004ae8 <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006836:	e00a      	b.n	800684e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006838:	f7fe f956 	bl	8004ae8 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006846:	4293      	cmp	r3, r2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e08d      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800684e:	4b49      	ldr	r3, [pc, #292]	@ (8006974 <HAL_RCC_OscConfig+0x658>)
 8006850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006852:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1ee      	bne.n	8006838 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800685a:	7ffb      	ldrb	r3, [r7, #31]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d105      	bne.n	800686c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006860:	4b44      	ldr	r3, [pc, #272]	@ (8006974 <HAL_RCC_OscConfig+0x658>)
 8006862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006864:	4a43      	ldr	r2, [pc, #268]	@ (8006974 <HAL_RCC_OscConfig+0x658>)
 8006866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800686a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	d079      	beq.n	8006968 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	2b0c      	cmp	r3, #12
 8006878:	d056      	beq.n	8006928 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687e:	2b02      	cmp	r3, #2
 8006880:	d13b      	bne.n	80068fa <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006882:	4b3d      	ldr	r3, [pc, #244]	@ (8006978 <HAL_RCC_OscConfig+0x65c>)
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006888:	f7fe f92e 	bl	8004ae8 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006890:	f7fe f92a 	bl	8004ae8 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e063      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068a2:	4b34      	ldr	r3, [pc, #208]	@ (8006974 <HAL_RCC_OscConfig+0x658>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1f0      	bne.n	8006890 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068ae:	4b31      	ldr	r3, [pc, #196]	@ (8006974 <HAL_RCC_OscConfig+0x658>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068be:	4319      	orrs	r1, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c4:	430b      	orrs	r3, r1
 80068c6:	492b      	ldr	r1, [pc, #172]	@ (8006974 <HAL_RCC_OscConfig+0x658>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006978 <HAL_RCC_OscConfig+0x65c>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d2:	f7fe f909 	bl	8004ae8 <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068da:	f7fe f905 	bl	8004ae8 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e03e      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068ec:	4b21      	ldr	r3, [pc, #132]	@ (8006974 <HAL_RCC_OscConfig+0x658>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <HAL_RCC_OscConfig+0x5be>
 80068f8:	e036      	b.n	8006968 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068fa:	4b1f      	ldr	r3, [pc, #124]	@ (8006978 <HAL_RCC_OscConfig+0x65c>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006900:	f7fe f8f2 	bl	8004ae8 <HAL_GetTick>
 8006904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006908:	f7fe f8ee 	bl	8004ae8 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e027      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800691a:	4b16      	ldr	r3, [pc, #88]	@ (8006974 <HAL_RCC_OscConfig+0x658>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1f0      	bne.n	8006908 <HAL_RCC_OscConfig+0x5ec>
 8006926:	e01f      	b.n	8006968 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e01a      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006934:	4b0f      	ldr	r3, [pc, #60]	@ (8006974 <HAL_RCC_OscConfig+0x658>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006944:	429a      	cmp	r2, r3
 8006946:	d10d      	bne.n	8006964 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006952:	429a      	cmp	r2, r3
 8006954:	d106      	bne.n	8006964 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006960:	429a      	cmp	r2, r3
 8006962:	d001      	beq.n	8006968 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3720      	adds	r7, #32
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40023800 	.word	0x40023800
 8006978:	42470060 	.word	0x42470060

0800697c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e11a      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006990:	4b8f      	ldr	r3, [pc, #572]	@ (8006bd0 <HAL_RCC_ClockConfig+0x254>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d919      	bls.n	80069d2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d105      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x34>
 80069a4:	4b8a      	ldr	r3, [pc, #552]	@ (8006bd0 <HAL_RCC_ClockConfig+0x254>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a89      	ldr	r2, [pc, #548]	@ (8006bd0 <HAL_RCC_ClockConfig+0x254>)
 80069aa:	f043 0304 	orr.w	r3, r3, #4
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	4b87      	ldr	r3, [pc, #540]	@ (8006bd0 <HAL_RCC_ClockConfig+0x254>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f023 0201 	bic.w	r2, r3, #1
 80069b8:	4985      	ldr	r1, [pc, #532]	@ (8006bd0 <HAL_RCC_ClockConfig+0x254>)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	4313      	orrs	r3, r2
 80069be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c0:	4b83      	ldr	r3, [pc, #524]	@ (8006bd0 <HAL_RCC_ClockConfig+0x254>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d001      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e0f9      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d008      	beq.n	80069f0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069de:	4b7d      	ldr	r3, [pc, #500]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	497a      	ldr	r1, [pc, #488]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 808e 	beq.w	8006b1a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d107      	bne.n	8006a16 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a06:	4b73      	ldr	r3, [pc, #460]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d121      	bne.n	8006a56 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e0d7      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d107      	bne.n	8006a2e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a1e:	4b6d      	ldr	r3, [pc, #436]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d115      	bne.n	8006a56 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e0cb      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d107      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a36:	4b67      	ldr	r3, [pc, #412]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e0bf      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006a46:	4b63      	ldr	r3, [pc, #396]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e0b7      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a56:	4b5f      	ldr	r3, [pc, #380]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f023 0203 	bic.w	r2, r3, #3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	495c      	ldr	r1, [pc, #368]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a68:	f7fe f83e 	bl	8004ae8 <HAL_GetTick>
 8006a6c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d112      	bne.n	8006a9c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a76:	e00a      	b.n	8006a8e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a78:	f7fe f836 	bl	8004ae8 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e09b      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a8e:	4b51      	ldr	r3, [pc, #324]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 030c 	and.w	r3, r3, #12
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d1ee      	bne.n	8006a78 <HAL_RCC_ClockConfig+0xfc>
 8006a9a:	e03e      	b.n	8006b1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d112      	bne.n	8006aca <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006aa4:	e00a      	b.n	8006abc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aa6:	f7fe f81f 	bl	8004ae8 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e084      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006abc:	4b45      	ldr	r3, [pc, #276]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 030c 	and.w	r3, r3, #12
 8006ac4:	2b0c      	cmp	r3, #12
 8006ac6:	d1ee      	bne.n	8006aa6 <HAL_RCC_ClockConfig+0x12a>
 8006ac8:	e027      	b.n	8006b1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d11d      	bne.n	8006b0e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ad2:	e00a      	b.n	8006aea <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ad4:	f7fe f808 	bl	8004ae8 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e06d      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006aea:	4b3a      	ldr	r3, [pc, #232]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 030c 	and.w	r3, r3, #12
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d1ee      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x158>
 8006af6:	e010      	b.n	8006b1a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af8:	f7fd fff6 	bl	8004ae8 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e05b      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006b0e:	4b31      	ldr	r3, [pc, #196]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 030c 	and.w	r3, r3, #12
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1ee      	bne.n	8006af8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8006bd0 <HAL_RCC_ClockConfig+0x254>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d219      	bcs.n	8006b5c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d105      	bne.n	8006b3a <HAL_RCC_ClockConfig+0x1be>
 8006b2e:	4b28      	ldr	r3, [pc, #160]	@ (8006bd0 <HAL_RCC_ClockConfig+0x254>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a27      	ldr	r2, [pc, #156]	@ (8006bd0 <HAL_RCC_ClockConfig+0x254>)
 8006b34:	f043 0304 	orr.w	r3, r3, #4
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	4b25      	ldr	r3, [pc, #148]	@ (8006bd0 <HAL_RCC_ClockConfig+0x254>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f023 0201 	bic.w	r2, r3, #1
 8006b42:	4923      	ldr	r1, [pc, #140]	@ (8006bd0 <HAL_RCC_ClockConfig+0x254>)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b4a:	4b21      	ldr	r3, [pc, #132]	@ (8006bd0 <HAL_RCC_ClockConfig+0x254>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d001      	beq.n	8006b5c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e034      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d008      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b68:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	4917      	ldr	r1, [pc, #92]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d009      	beq.n	8006b9a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b86:	4b13      	ldr	r3, [pc, #76]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	490f      	ldr	r1, [pc, #60]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b9a:	f000 f823 	bl	8006be4 <HAL_RCC_GetSysClockFreq>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd4 <HAL_RCC_ClockConfig+0x258>)
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	091b      	lsrs	r3, r3, #4
 8006ba6:	f003 030f 	and.w	r3, r3, #15
 8006baa:	490b      	ldr	r1, [pc, #44]	@ (8006bd8 <HAL_RCC_ClockConfig+0x25c>)
 8006bac:	5ccb      	ldrb	r3, [r1, r3]
 8006bae:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8006bdc <HAL_RCC_ClockConfig+0x260>)
 8006bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8006be0 <HAL_RCC_ClockConfig+0x264>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fd ff48 	bl	8004a50 <HAL_InitTick>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	72fb      	strb	r3, [r7, #11]

  return status;
 8006bc4:	7afb      	ldrb	r3, [r7, #11]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	40023c00 	.word	0x40023c00
 8006bd4:	40023800 	.word	0x40023800
 8006bd8:	080098a0 	.word	0x080098a0
 8006bdc:	20000000 	.word	0x20000000
 8006be0:	200000bc 	.word	0x200000bc

08006be4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be8:	b092      	sub	sp, #72	@ 0x48
 8006bea:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8006bec:	4b79      	ldr	r3, [pc, #484]	@ (8006dd4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bf4:	f003 030c 	and.w	r3, r3, #12
 8006bf8:	2b0c      	cmp	r3, #12
 8006bfa:	d00d      	beq.n	8006c18 <HAL_RCC_GetSysClockFreq+0x34>
 8006bfc:	2b0c      	cmp	r3, #12
 8006bfe:	f200 80d5 	bhi.w	8006dac <HAL_RCC_GetSysClockFreq+0x1c8>
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d002      	beq.n	8006c0c <HAL_RCC_GetSysClockFreq+0x28>
 8006c06:	2b08      	cmp	r3, #8
 8006c08:	d003      	beq.n	8006c12 <HAL_RCC_GetSysClockFreq+0x2e>
 8006c0a:	e0cf      	b.n	8006dac <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c0c:	4b72      	ldr	r3, [pc, #456]	@ (8006dd8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006c0e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8006c10:	e0da      	b.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006c12:	4b72      	ldr	r3, [pc, #456]	@ (8006ddc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006c14:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8006c16:	e0d7      	b.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1a:	0c9b      	lsrs	r3, r3, #18
 8006c1c:	f003 020f 	and.w	r2, r3, #15
 8006c20:	4b6f      	ldr	r3, [pc, #444]	@ (8006de0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006c22:	5c9b      	ldrb	r3, [r3, r2]
 8006c24:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c28:	0d9b      	lsrs	r3, r3, #22
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	3301      	adds	r3, #1
 8006c30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c32:	4b68      	ldr	r3, [pc, #416]	@ (8006dd4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d05d      	beq.n	8006cfa <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c40:	2200      	movs	r2, #0
 8006c42:	4618      	mov	r0, r3
 8006c44:	4611      	mov	r1, r2
 8006c46:	4604      	mov	r4, r0
 8006c48:	460d      	mov	r5, r1
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	f04f 0000 	mov.w	r0, #0
 8006c52:	f04f 0100 	mov.w	r1, #0
 8006c56:	0159      	lsls	r1, r3, #5
 8006c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c5c:	0150      	lsls	r0, r2, #5
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4621      	mov	r1, r4
 8006c64:	1a51      	subs	r1, r2, r1
 8006c66:	6139      	str	r1, [r7, #16]
 8006c68:	4629      	mov	r1, r5
 8006c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	f04f 0200 	mov.w	r2, #0
 8006c74:	f04f 0300 	mov.w	r3, #0
 8006c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c7c:	4659      	mov	r1, fp
 8006c7e:	018b      	lsls	r3, r1, #6
 8006c80:	4651      	mov	r1, sl
 8006c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c86:	4651      	mov	r1, sl
 8006c88:	018a      	lsls	r2, r1, #6
 8006c8a:	46d4      	mov	ip, sl
 8006c8c:	ebb2 080c 	subs.w	r8, r2, ip
 8006c90:	4659      	mov	r1, fp
 8006c92:	eb63 0901 	sbc.w	r9, r3, r1
 8006c96:	f04f 0200 	mov.w	r2, #0
 8006c9a:	f04f 0300 	mov.w	r3, #0
 8006c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006caa:	4690      	mov	r8, r2
 8006cac:	4699      	mov	r9, r3
 8006cae:	4623      	mov	r3, r4
 8006cb0:	eb18 0303 	adds.w	r3, r8, r3
 8006cb4:	60bb      	str	r3, [r7, #8]
 8006cb6:	462b      	mov	r3, r5
 8006cb8:	eb49 0303 	adc.w	r3, r9, r3
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006cca:	4629      	mov	r1, r5
 8006ccc:	024b      	lsls	r3, r1, #9
 8006cce:	4620      	mov	r0, r4
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8006cd8:	4601      	mov	r1, r0
 8006cda:	024a      	lsls	r2, r1, #9
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006cec:	f7fa fa26 	bl	800113c <__aeabi_uldivmod>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cf8:	e055      	b.n	8006da6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	623b      	str	r3, [r7, #32]
 8006d00:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d02:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d06:	4642      	mov	r2, r8
 8006d08:	464b      	mov	r3, r9
 8006d0a:	f04f 0000 	mov.w	r0, #0
 8006d0e:	f04f 0100 	mov.w	r1, #0
 8006d12:	0159      	lsls	r1, r3, #5
 8006d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d18:	0150      	lsls	r0, r2, #5
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	46c4      	mov	ip, r8
 8006d20:	ebb2 0a0c 	subs.w	sl, r2, ip
 8006d24:	4640      	mov	r0, r8
 8006d26:	4649      	mov	r1, r9
 8006d28:	468c      	mov	ip, r1
 8006d2a:	eb63 0b0c 	sbc.w	fp, r3, ip
 8006d2e:	f04f 0200 	mov.w	r2, #0
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d3a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d3e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d42:	ebb2 040a 	subs.w	r4, r2, sl
 8006d46:	eb63 050b 	sbc.w	r5, r3, fp
 8006d4a:	f04f 0200 	mov.w	r2, #0
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	00eb      	lsls	r3, r5, #3
 8006d54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d58:	00e2      	lsls	r2, r4, #3
 8006d5a:	4614      	mov	r4, r2
 8006d5c:	461d      	mov	r5, r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	18e3      	adds	r3, r4, r3
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	460b      	mov	r3, r1
 8006d66:	eb45 0303 	adc.w	r3, r5, r3
 8006d6a:	607b      	str	r3, [r7, #4]
 8006d6c:	f04f 0200 	mov.w	r2, #0
 8006d70:	f04f 0300 	mov.w	r3, #0
 8006d74:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d78:	4629      	mov	r1, r5
 8006d7a:	028b      	lsls	r3, r1, #10
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	4604      	mov	r4, r0
 8006d82:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8006d86:	4601      	mov	r1, r0
 8006d88:	028a      	lsls	r2, r1, #10
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d90:	2200      	movs	r2, #0
 8006d92:	61bb      	str	r3, [r7, #24]
 8006d94:	61fa      	str	r2, [r7, #28]
 8006d96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d9a:	f7fa f9cf 	bl	800113c <__aeabi_uldivmod>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4613      	mov	r3, r2
 8006da4:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8006da6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006da8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8006daa:	e00d      	b.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006dac:	4b09      	ldr	r3, [pc, #36]	@ (8006dd4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	0b5b      	lsrs	r3, r3, #13
 8006db2:	f003 0307 	and.w	r3, r3, #7
 8006db6:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dba:	3301      	adds	r3, #1
 8006dbc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8006dc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3748      	adds	r7, #72	@ 0x48
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	00f42400 	.word	0x00f42400
 8006ddc:	007a1200 	.word	0x007a1200
 8006de0:	08009894 	.word	0x08009894

08006de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006de8:	4b02      	ldr	r3, [pc, #8]	@ (8006df4 <HAL_RCC_GetHCLKFreq+0x10>)
 8006dea:	681b      	ldr	r3, [r3, #0]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bc80      	pop	{r7}
 8006df2:	4770      	bx	lr
 8006df4:	20000000 	.word	0x20000000

08006df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006dfc:	f7ff fff2 	bl	8006de4 <HAL_RCC_GetHCLKFreq>
 8006e00:	4602      	mov	r2, r0
 8006e02:	4b05      	ldr	r3, [pc, #20]	@ (8006e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	4903      	ldr	r1, [pc, #12]	@ (8006e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e0e:	5ccb      	ldrb	r3, [r1, r3]
 8006e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	080098b0 	.word	0x080098b0

08006e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e24:	f7ff ffde 	bl	8006de4 <HAL_RCC_GetHCLKFreq>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	4b05      	ldr	r3, [pc, #20]	@ (8006e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	0adb      	lsrs	r3, r3, #11
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	4903      	ldr	r1, [pc, #12]	@ (8006e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e36:	5ccb      	ldrb	r3, [r1, r3]
 8006e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	40023800 	.word	0x40023800
 8006e44:	080098b0 	.word	0x080098b0

08006e48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006e50:	2300      	movs	r3, #0
 8006e52:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006e54:	4b29      	ldr	r3, [pc, #164]	@ (8006efc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d12c      	bne.n	8006eba <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006e60:	4b26      	ldr	r3, [pc, #152]	@ (8006efc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d005      	beq.n	8006e78 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006e6c:	4b24      	ldr	r3, [pc, #144]	@ (8006f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	e016      	b.n	8006ea6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e78:	4b20      	ldr	r3, [pc, #128]	@ (8006efc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8006efc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e82:	6253      	str	r3, [r2, #36]	@ 0x24
 8006e84:	4b1d      	ldr	r3, [pc, #116]	@ (8006efc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006e90:	4b1b      	ldr	r3, [pc, #108]	@ (8006f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8006e98:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e9a:	4b18      	ldr	r3, [pc, #96]	@ (8006efc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9e:	4a17      	ldr	r2, [pc, #92]	@ (8006efc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ea4:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8006eac:	d105      	bne.n	8006eba <RCC_SetFlashLatencyFromMSIRange+0x72>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006eb4:	d101      	bne.n	8006eba <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d105      	bne.n	8006ecc <RCC_SetFlashLatencyFromMSIRange+0x84>
 8006ec0:	4b10      	ldr	r3, [pc, #64]	@ (8006f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8006f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ec6:	f043 0304 	orr.w	r3, r3, #4
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8006f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f023 0201 	bic.w	r2, r3, #1
 8006ed4:	490b      	ldr	r1, [pc, #44]	@ (8006f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006edc:	4b09      	ldr	r3, [pc, #36]	@ (8006f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d001      	beq.n	8006eee <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	371c      	adds	r7, #28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bc80      	pop	{r7}
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	40023800 	.word	0x40023800
 8006f00:	40007000 	.word	0x40007000
 8006f04:	40023c00 	.word	0x40023c00

08006f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e07b      	b.n	8007012 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d108      	bne.n	8006f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f2a:	d009      	beq.n	8006f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	61da      	str	r2, [r3, #28]
 8006f32:	e005      	b.n	8006f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fa fd6c 	bl	8001a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc4:	ea42 0103 	orr.w	r1, r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fcc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	0c1b      	lsrs	r3, r3, #16
 8006fde:	f003 0104 	and.w	r1, r3, #4
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe6:	f003 0210 	and.w	r2, r3, #16
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007000:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b088      	sub	sp, #32
 800701e:	af00      	add	r7, sp, #0
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	60b9      	str	r1, [r7, #8]
 8007024:	603b      	str	r3, [r7, #0]
 8007026:	4613      	mov	r3, r2
 8007028:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_SPI_Transmit+0x22>
 8007038:	2302      	movs	r3, #2
 800703a:	e12d      	b.n	8007298 <HAL_SPI_Transmit+0x27e>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007044:	f7fd fd50 	bl	8004ae8 <HAL_GetTick>
 8007048:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b01      	cmp	r3, #1
 8007058:	d002      	beq.n	8007060 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800705a:	2302      	movs	r3, #2
 800705c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800705e:	e116      	b.n	800728e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <HAL_SPI_Transmit+0x52>
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d102      	bne.n	8007072 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007070:	e10d      	b.n	800728e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2203      	movs	r2, #3
 8007076:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	88fa      	ldrh	r2, [r7, #6]
 800708a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	88fa      	ldrh	r2, [r7, #6]
 8007090:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070b8:	d10f      	bne.n	80070da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e4:	2b40      	cmp	r3, #64	@ 0x40
 80070e6:	d007      	beq.n	80070f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007100:	d14f      	bne.n	80071a2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <HAL_SPI_Transmit+0xf6>
 800710a:	8afb      	ldrh	r3, [r7, #22]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d142      	bne.n	8007196 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007114:	881a      	ldrh	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007120:	1c9a      	adds	r2, r3, #2
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007134:	e02f      	b.n	8007196 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f003 0302 	and.w	r3, r3, #2
 8007140:	2b02      	cmp	r3, #2
 8007142:	d112      	bne.n	800716a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007148:	881a      	ldrh	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007154:	1c9a      	adds	r2, r3, #2
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800715e:	b29b      	uxth	r3, r3
 8007160:	3b01      	subs	r3, #1
 8007162:	b29a      	uxth	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007168:	e015      	b.n	8007196 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800716a:	f7fd fcbd 	bl	8004ae8 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d803      	bhi.n	8007182 <HAL_SPI_Transmit+0x168>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007180:	d102      	bne.n	8007188 <HAL_SPI_Transmit+0x16e>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d106      	bne.n	8007196 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007194:	e07b      	b.n	800728e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800719a:	b29b      	uxth	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1ca      	bne.n	8007136 <HAL_SPI_Transmit+0x11c>
 80071a0:	e050      	b.n	8007244 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <HAL_SPI_Transmit+0x196>
 80071aa:	8afb      	ldrh	r3, [r7, #22]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d144      	bne.n	800723a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	7812      	ldrb	r2, [r2, #0]
 80071bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80071d6:	e030      	b.n	800723a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d113      	bne.n	800720e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	330c      	adds	r3, #12
 80071f0:	7812      	ldrb	r2, [r2, #0]
 80071f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007202:	b29b      	uxth	r3, r3
 8007204:	3b01      	subs	r3, #1
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800720c:	e015      	b.n	800723a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800720e:	f7fd fc6b 	bl	8004ae8 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	429a      	cmp	r2, r3
 800721c:	d803      	bhi.n	8007226 <HAL_SPI_Transmit+0x20c>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007224:	d102      	bne.n	800722c <HAL_SPI_Transmit+0x212>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d106      	bne.n	800723a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007238:	e029      	b.n	800728e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1c9      	bne.n	80071d8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 f8b1 	bl	80073b0 <SPI_EndRxTxTransaction>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2220      	movs	r2, #32
 8007258:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10a      	bne.n	8007278 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007262:	2300      	movs	r3, #0
 8007264:	613b      	str	r3, [r7, #16]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	613b      	str	r3, [r7, #16]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	613b      	str	r3, [r7, #16]
 8007276:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	77fb      	strb	r3, [r7, #31]
 8007284:	e003      	b.n	800728e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007296:	7ffb      	ldrb	r3, [r7, #31]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3720      	adds	r7, #32
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	603b      	str	r3, [r7, #0]
 80072ac:	4613      	mov	r3, r2
 80072ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072b0:	f7fd fc1a 	bl	8004ae8 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b8:	1a9b      	subs	r3, r3, r2
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	4413      	add	r3, r2
 80072be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072c0:	f7fd fc12 	bl	8004ae8 <HAL_GetTick>
 80072c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072c6:	4b39      	ldr	r3, [pc, #228]	@ (80073ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	015b      	lsls	r3, r3, #5
 80072cc:	0d1b      	lsrs	r3, r3, #20
 80072ce:	69fa      	ldr	r2, [r7, #28]
 80072d0:	fb02 f303 	mul.w	r3, r2, r3
 80072d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072d6:	e054      	b.n	8007382 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072de:	d050      	beq.n	8007382 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072e0:	f7fd fc02 	bl	8004ae8 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d902      	bls.n	80072f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d13d      	bne.n	8007372 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007304:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800730e:	d111      	bne.n	8007334 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007318:	d004      	beq.n	8007324 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007322:	d107      	bne.n	8007334 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007332:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800733c:	d10f      	bne.n	800735e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800735c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e017      	b.n	80073a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	3b01      	subs	r3, #1
 8007380:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4013      	ands	r3, r2
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	429a      	cmp	r2, r3
 8007390:	bf0c      	ite	eq
 8007392:	2301      	moveq	r3, #1
 8007394:	2300      	movne	r3, #0
 8007396:	b2db      	uxtb	r3, r3
 8007398:	461a      	mov	r2, r3
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	429a      	cmp	r2, r3
 800739e:	d19b      	bne.n	80072d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3720      	adds	r7, #32
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20000000 	.word	0x20000000

080073b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80073bc:	4b1b      	ldr	r3, [pc, #108]	@ (800742c <SPI_EndRxTxTransaction+0x7c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007430 <SPI_EndRxTxTransaction+0x80>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	0d5b      	lsrs	r3, r3, #21
 80073c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80073cc:	fb02 f303 	mul.w	r3, r2, r3
 80073d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073da:	d112      	bne.n	8007402 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	2180      	movs	r1, #128	@ 0x80
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff ff5a 	bl	80072a0 <SPI_WaitFlagStateUntilTimeout>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d016      	beq.n	8007420 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f6:	f043 0220 	orr.w	r2, r3, #32
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e00f      	b.n	8007422 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00a      	beq.n	800741e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	3b01      	subs	r3, #1
 800740c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007418:	2b80      	cmp	r3, #128	@ 0x80
 800741a:	d0f2      	beq.n	8007402 <SPI_EndRxTxTransaction+0x52>
 800741c:	e000      	b.n	8007420 <SPI_EndRxTxTransaction+0x70>
        break;
 800741e:	bf00      	nop
  }

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20000000 	.word	0x20000000
 8007430:	165e9f81 	.word	0x165e9f81

08007434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e042      	b.n	80074cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d106      	bne.n	8007460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7fa fb30 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2224      	movs	r2, #36	@ 0x24
 8007464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f82b 	bl	80074d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800748c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695a      	ldr	r2, [r3, #20]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800749c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	431a      	orrs	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	4313      	orrs	r3, r2
 8007508:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8007514:	f023 030c 	bic.w	r3, r3, #12
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6812      	ldr	r2, [r2, #0]
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	430b      	orrs	r3, r1
 8007520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	699a      	ldr	r2, [r3, #24]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a55      	ldr	r2, [pc, #340]	@ (8007694 <UART_SetConfig+0x1c0>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d103      	bne.n	800754a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007542:	f7ff fc6d 	bl	8006e20 <HAL_RCC_GetPCLK2Freq>
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	e002      	b.n	8007550 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800754a:	f7ff fc55 	bl	8006df8 <HAL_RCC_GetPCLK1Freq>
 800754e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007558:	d14c      	bne.n	80075f4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009a      	lsls	r2, r3, #2
 8007564:	441a      	add	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007570:	4a49      	ldr	r2, [pc, #292]	@ (8007698 <UART_SetConfig+0x1c4>)
 8007572:	fba2 2303 	umull	r2, r3, r2, r3
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	0119      	lsls	r1, r3, #4
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4613      	mov	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	009a      	lsls	r2, r3, #2
 8007584:	441a      	add	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007590:	4b41      	ldr	r3, [pc, #260]	@ (8007698 <UART_SetConfig+0x1c4>)
 8007592:	fba3 0302 	umull	r0, r3, r3, r2
 8007596:	095b      	lsrs	r3, r3, #5
 8007598:	2064      	movs	r0, #100	@ 0x64
 800759a:	fb00 f303 	mul.w	r3, r0, r3
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	3332      	adds	r3, #50	@ 0x32
 80075a4:	4a3c      	ldr	r2, [pc, #240]	@ (8007698 <UART_SetConfig+0x1c4>)
 80075a6:	fba2 2303 	umull	r2, r3, r2, r3
 80075aa:	095b      	lsrs	r3, r3, #5
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80075b2:	4419      	add	r1, r3
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009a      	lsls	r2, r3, #2
 80075be:	441a      	add	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80075ca:	4b33      	ldr	r3, [pc, #204]	@ (8007698 <UART_SetConfig+0x1c4>)
 80075cc:	fba3 0302 	umull	r0, r3, r3, r2
 80075d0:	095b      	lsrs	r3, r3, #5
 80075d2:	2064      	movs	r0, #100	@ 0x64
 80075d4:	fb00 f303 	mul.w	r3, r0, r3
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	3332      	adds	r3, #50	@ 0x32
 80075de:	4a2e      	ldr	r2, [pc, #184]	@ (8007698 <UART_SetConfig+0x1c4>)
 80075e0:	fba2 2303 	umull	r2, r3, r2, r3
 80075e4:	095b      	lsrs	r3, r3, #5
 80075e6:	f003 0207 	and.w	r2, r3, #7
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	440a      	add	r2, r1
 80075f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075f2:	e04a      	b.n	800768a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	4613      	mov	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	009a      	lsls	r2, r3, #2
 80075fe:	441a      	add	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	fbb2 f3f3 	udiv	r3, r2, r3
 800760a:	4a23      	ldr	r2, [pc, #140]	@ (8007698 <UART_SetConfig+0x1c4>)
 800760c:	fba2 2303 	umull	r2, r3, r2, r3
 8007610:	095b      	lsrs	r3, r3, #5
 8007612:	0119      	lsls	r1, r3, #4
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	4613      	mov	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	009a      	lsls	r2, r3, #2
 800761e:	441a      	add	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	fbb2 f2f3 	udiv	r2, r2, r3
 800762a:	4b1b      	ldr	r3, [pc, #108]	@ (8007698 <UART_SetConfig+0x1c4>)
 800762c:	fba3 0302 	umull	r0, r3, r3, r2
 8007630:	095b      	lsrs	r3, r3, #5
 8007632:	2064      	movs	r0, #100	@ 0x64
 8007634:	fb00 f303 	mul.w	r3, r0, r3
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	011b      	lsls	r3, r3, #4
 800763c:	3332      	adds	r3, #50	@ 0x32
 800763e:	4a16      	ldr	r2, [pc, #88]	@ (8007698 <UART_SetConfig+0x1c4>)
 8007640:	fba2 2303 	umull	r2, r3, r2, r3
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800764a:	4419      	add	r1, r3
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009a      	lsls	r2, r3, #2
 8007656:	441a      	add	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007662:	4b0d      	ldr	r3, [pc, #52]	@ (8007698 <UART_SetConfig+0x1c4>)
 8007664:	fba3 0302 	umull	r0, r3, r3, r2
 8007668:	095b      	lsrs	r3, r3, #5
 800766a:	2064      	movs	r0, #100	@ 0x64
 800766c:	fb00 f303 	mul.w	r3, r0, r3
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	3332      	adds	r3, #50	@ 0x32
 8007676:	4a08      	ldr	r2, [pc, #32]	@ (8007698 <UART_SetConfig+0x1c4>)
 8007678:	fba2 2303 	umull	r2, r3, r2, r3
 800767c:	095b      	lsrs	r3, r3, #5
 800767e:	f003 020f 	and.w	r2, r3, #15
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	440a      	add	r2, r1
 8007688:	609a      	str	r2, [r3, #8]
}
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	40013800 	.word	0x40013800
 8007698:	51eb851f 	.word	0x51eb851f

0800769c <std>:
 800769c:	2300      	movs	r3, #0
 800769e:	b510      	push	{r4, lr}
 80076a0:	4604      	mov	r4, r0
 80076a2:	e9c0 3300 	strd	r3, r3, [r0]
 80076a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076aa:	6083      	str	r3, [r0, #8]
 80076ac:	8181      	strh	r1, [r0, #12]
 80076ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80076b0:	81c2      	strh	r2, [r0, #14]
 80076b2:	6183      	str	r3, [r0, #24]
 80076b4:	4619      	mov	r1, r3
 80076b6:	2208      	movs	r2, #8
 80076b8:	305c      	adds	r0, #92	@ 0x5c
 80076ba:	f000 fa2d 	bl	8007b18 <memset>
 80076be:	4b0d      	ldr	r3, [pc, #52]	@ (80076f4 <std+0x58>)
 80076c0:	6224      	str	r4, [r4, #32]
 80076c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80076c4:	4b0c      	ldr	r3, [pc, #48]	@ (80076f8 <std+0x5c>)
 80076c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076c8:	4b0c      	ldr	r3, [pc, #48]	@ (80076fc <std+0x60>)
 80076ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007700 <std+0x64>)
 80076ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80076d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007704 <std+0x68>)
 80076d2:	429c      	cmp	r4, r3
 80076d4:	d006      	beq.n	80076e4 <std+0x48>
 80076d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076da:	4294      	cmp	r4, r2
 80076dc:	d002      	beq.n	80076e4 <std+0x48>
 80076de:	33d0      	adds	r3, #208	@ 0xd0
 80076e0:	429c      	cmp	r4, r3
 80076e2:	d105      	bne.n	80076f0 <std+0x54>
 80076e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ec:	f000 ba8c 	b.w	8007c08 <__retarget_lock_init_recursive>
 80076f0:	bd10      	pop	{r4, pc}
 80076f2:	bf00      	nop
 80076f4:	08007969 	.word	0x08007969
 80076f8:	0800798b 	.word	0x0800798b
 80076fc:	080079c3 	.word	0x080079c3
 8007700:	080079e7 	.word	0x080079e7
 8007704:	20000444 	.word	0x20000444

08007708 <stdio_exit_handler>:
 8007708:	4a02      	ldr	r2, [pc, #8]	@ (8007714 <stdio_exit_handler+0xc>)
 800770a:	4903      	ldr	r1, [pc, #12]	@ (8007718 <stdio_exit_handler+0x10>)
 800770c:	4803      	ldr	r0, [pc, #12]	@ (800771c <stdio_exit_handler+0x14>)
 800770e:	f000 b869 	b.w	80077e4 <_fwalk_sglue>
 8007712:	bf00      	nop
 8007714:	200000c4 	.word	0x200000c4
 8007718:	08008751 	.word	0x08008751
 800771c:	200000d4 	.word	0x200000d4

08007720 <cleanup_stdio>:
 8007720:	6841      	ldr	r1, [r0, #4]
 8007722:	4b0c      	ldr	r3, [pc, #48]	@ (8007754 <cleanup_stdio+0x34>)
 8007724:	b510      	push	{r4, lr}
 8007726:	4299      	cmp	r1, r3
 8007728:	4604      	mov	r4, r0
 800772a:	d001      	beq.n	8007730 <cleanup_stdio+0x10>
 800772c:	f001 f810 	bl	8008750 <_fflush_r>
 8007730:	68a1      	ldr	r1, [r4, #8]
 8007732:	4b09      	ldr	r3, [pc, #36]	@ (8007758 <cleanup_stdio+0x38>)
 8007734:	4299      	cmp	r1, r3
 8007736:	d002      	beq.n	800773e <cleanup_stdio+0x1e>
 8007738:	4620      	mov	r0, r4
 800773a:	f001 f809 	bl	8008750 <_fflush_r>
 800773e:	68e1      	ldr	r1, [r4, #12]
 8007740:	4b06      	ldr	r3, [pc, #24]	@ (800775c <cleanup_stdio+0x3c>)
 8007742:	4299      	cmp	r1, r3
 8007744:	d004      	beq.n	8007750 <cleanup_stdio+0x30>
 8007746:	4620      	mov	r0, r4
 8007748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800774c:	f001 b800 	b.w	8008750 <_fflush_r>
 8007750:	bd10      	pop	{r4, pc}
 8007752:	bf00      	nop
 8007754:	20000444 	.word	0x20000444
 8007758:	200004ac 	.word	0x200004ac
 800775c:	20000514 	.word	0x20000514

08007760 <global_stdio_init.part.0>:
 8007760:	b510      	push	{r4, lr}
 8007762:	4b0b      	ldr	r3, [pc, #44]	@ (8007790 <global_stdio_init.part.0+0x30>)
 8007764:	4c0b      	ldr	r4, [pc, #44]	@ (8007794 <global_stdio_init.part.0+0x34>)
 8007766:	4a0c      	ldr	r2, [pc, #48]	@ (8007798 <global_stdio_init.part.0+0x38>)
 8007768:	4620      	mov	r0, r4
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	2104      	movs	r1, #4
 800776e:	2200      	movs	r2, #0
 8007770:	f7ff ff94 	bl	800769c <std>
 8007774:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007778:	2201      	movs	r2, #1
 800777a:	2109      	movs	r1, #9
 800777c:	f7ff ff8e 	bl	800769c <std>
 8007780:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007784:	2202      	movs	r2, #2
 8007786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800778a:	2112      	movs	r1, #18
 800778c:	f7ff bf86 	b.w	800769c <std>
 8007790:	2000057c 	.word	0x2000057c
 8007794:	20000444 	.word	0x20000444
 8007798:	08007709 	.word	0x08007709

0800779c <__sfp_lock_acquire>:
 800779c:	4801      	ldr	r0, [pc, #4]	@ (80077a4 <__sfp_lock_acquire+0x8>)
 800779e:	f000 ba34 	b.w	8007c0a <__retarget_lock_acquire_recursive>
 80077a2:	bf00      	nop
 80077a4:	20000585 	.word	0x20000585

080077a8 <__sfp_lock_release>:
 80077a8:	4801      	ldr	r0, [pc, #4]	@ (80077b0 <__sfp_lock_release+0x8>)
 80077aa:	f000 ba2f 	b.w	8007c0c <__retarget_lock_release_recursive>
 80077ae:	bf00      	nop
 80077b0:	20000585 	.word	0x20000585

080077b4 <__sinit>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	4604      	mov	r4, r0
 80077b8:	f7ff fff0 	bl	800779c <__sfp_lock_acquire>
 80077bc:	6a23      	ldr	r3, [r4, #32]
 80077be:	b11b      	cbz	r3, 80077c8 <__sinit+0x14>
 80077c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c4:	f7ff bff0 	b.w	80077a8 <__sfp_lock_release>
 80077c8:	4b04      	ldr	r3, [pc, #16]	@ (80077dc <__sinit+0x28>)
 80077ca:	6223      	str	r3, [r4, #32]
 80077cc:	4b04      	ldr	r3, [pc, #16]	@ (80077e0 <__sinit+0x2c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1f5      	bne.n	80077c0 <__sinit+0xc>
 80077d4:	f7ff ffc4 	bl	8007760 <global_stdio_init.part.0>
 80077d8:	e7f2      	b.n	80077c0 <__sinit+0xc>
 80077da:	bf00      	nop
 80077dc:	08007721 	.word	0x08007721
 80077e0:	2000057c 	.word	0x2000057c

080077e4 <_fwalk_sglue>:
 80077e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e8:	4607      	mov	r7, r0
 80077ea:	4688      	mov	r8, r1
 80077ec:	4614      	mov	r4, r2
 80077ee:	2600      	movs	r6, #0
 80077f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077f4:	f1b9 0901 	subs.w	r9, r9, #1
 80077f8:	d505      	bpl.n	8007806 <_fwalk_sglue+0x22>
 80077fa:	6824      	ldr	r4, [r4, #0]
 80077fc:	2c00      	cmp	r4, #0
 80077fe:	d1f7      	bne.n	80077f0 <_fwalk_sglue+0xc>
 8007800:	4630      	mov	r0, r6
 8007802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007806:	89ab      	ldrh	r3, [r5, #12]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d907      	bls.n	800781c <_fwalk_sglue+0x38>
 800780c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007810:	3301      	adds	r3, #1
 8007812:	d003      	beq.n	800781c <_fwalk_sglue+0x38>
 8007814:	4629      	mov	r1, r5
 8007816:	4638      	mov	r0, r7
 8007818:	47c0      	blx	r8
 800781a:	4306      	orrs	r6, r0
 800781c:	3568      	adds	r5, #104	@ 0x68
 800781e:	e7e9      	b.n	80077f4 <_fwalk_sglue+0x10>

08007820 <iprintf>:
 8007820:	b40f      	push	{r0, r1, r2, r3}
 8007822:	b507      	push	{r0, r1, r2, lr}
 8007824:	4906      	ldr	r1, [pc, #24]	@ (8007840 <iprintf+0x20>)
 8007826:	ab04      	add	r3, sp, #16
 8007828:	6808      	ldr	r0, [r1, #0]
 800782a:	f853 2b04 	ldr.w	r2, [r3], #4
 800782e:	6881      	ldr	r1, [r0, #8]
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	f000 fc63 	bl	80080fc <_vfiprintf_r>
 8007836:	b003      	add	sp, #12
 8007838:	f85d eb04 	ldr.w	lr, [sp], #4
 800783c:	b004      	add	sp, #16
 800783e:	4770      	bx	lr
 8007840:	200000d0 	.word	0x200000d0

08007844 <_puts_r>:
 8007844:	6a03      	ldr	r3, [r0, #32]
 8007846:	b570      	push	{r4, r5, r6, lr}
 8007848:	4605      	mov	r5, r0
 800784a:	460e      	mov	r6, r1
 800784c:	6884      	ldr	r4, [r0, #8]
 800784e:	b90b      	cbnz	r3, 8007854 <_puts_r+0x10>
 8007850:	f7ff ffb0 	bl	80077b4 <__sinit>
 8007854:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007856:	07db      	lsls	r3, r3, #31
 8007858:	d405      	bmi.n	8007866 <_puts_r+0x22>
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	0598      	lsls	r0, r3, #22
 800785e:	d402      	bmi.n	8007866 <_puts_r+0x22>
 8007860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007862:	f000 f9d2 	bl	8007c0a <__retarget_lock_acquire_recursive>
 8007866:	89a3      	ldrh	r3, [r4, #12]
 8007868:	0719      	lsls	r1, r3, #28
 800786a:	d502      	bpl.n	8007872 <_puts_r+0x2e>
 800786c:	6923      	ldr	r3, [r4, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d135      	bne.n	80078de <_puts_r+0x9a>
 8007872:	4621      	mov	r1, r4
 8007874:	4628      	mov	r0, r5
 8007876:	f000 f8f9 	bl	8007a6c <__swsetup_r>
 800787a:	b380      	cbz	r0, 80078de <_puts_r+0x9a>
 800787c:	f04f 35ff 	mov.w	r5, #4294967295
 8007880:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007882:	07da      	lsls	r2, r3, #31
 8007884:	d405      	bmi.n	8007892 <_puts_r+0x4e>
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	059b      	lsls	r3, r3, #22
 800788a:	d402      	bmi.n	8007892 <_puts_r+0x4e>
 800788c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800788e:	f000 f9bd 	bl	8007c0c <__retarget_lock_release_recursive>
 8007892:	4628      	mov	r0, r5
 8007894:	bd70      	pop	{r4, r5, r6, pc}
 8007896:	2b00      	cmp	r3, #0
 8007898:	da04      	bge.n	80078a4 <_puts_r+0x60>
 800789a:	69a2      	ldr	r2, [r4, #24]
 800789c:	429a      	cmp	r2, r3
 800789e:	dc17      	bgt.n	80078d0 <_puts_r+0x8c>
 80078a0:	290a      	cmp	r1, #10
 80078a2:	d015      	beq.n	80078d0 <_puts_r+0x8c>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	6022      	str	r2, [r4, #0]
 80078aa:	7019      	strb	r1, [r3, #0]
 80078ac:	68a3      	ldr	r3, [r4, #8]
 80078ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078b2:	3b01      	subs	r3, #1
 80078b4:	60a3      	str	r3, [r4, #8]
 80078b6:	2900      	cmp	r1, #0
 80078b8:	d1ed      	bne.n	8007896 <_puts_r+0x52>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	da11      	bge.n	80078e2 <_puts_r+0x9e>
 80078be:	4622      	mov	r2, r4
 80078c0:	210a      	movs	r1, #10
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f893 	bl	80079ee <__swbuf_r>
 80078c8:	3001      	adds	r0, #1
 80078ca:	d0d7      	beq.n	800787c <_puts_r+0x38>
 80078cc:	250a      	movs	r5, #10
 80078ce:	e7d7      	b.n	8007880 <_puts_r+0x3c>
 80078d0:	4622      	mov	r2, r4
 80078d2:	4628      	mov	r0, r5
 80078d4:	f000 f88b 	bl	80079ee <__swbuf_r>
 80078d8:	3001      	adds	r0, #1
 80078da:	d1e7      	bne.n	80078ac <_puts_r+0x68>
 80078dc:	e7ce      	b.n	800787c <_puts_r+0x38>
 80078de:	3e01      	subs	r6, #1
 80078e0:	e7e4      	b.n	80078ac <_puts_r+0x68>
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	6022      	str	r2, [r4, #0]
 80078e8:	220a      	movs	r2, #10
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	e7ee      	b.n	80078cc <_puts_r+0x88>
	...

080078f0 <puts>:
 80078f0:	4b02      	ldr	r3, [pc, #8]	@ (80078fc <puts+0xc>)
 80078f2:	4601      	mov	r1, r0
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	f7ff bfa5 	b.w	8007844 <_puts_r>
 80078fa:	bf00      	nop
 80078fc:	200000d0 	.word	0x200000d0

08007900 <sniprintf>:
 8007900:	b40c      	push	{r2, r3}
 8007902:	b530      	push	{r4, r5, lr}
 8007904:	4b17      	ldr	r3, [pc, #92]	@ (8007964 <sniprintf+0x64>)
 8007906:	1e0c      	subs	r4, r1, #0
 8007908:	681d      	ldr	r5, [r3, #0]
 800790a:	b09d      	sub	sp, #116	@ 0x74
 800790c:	da08      	bge.n	8007920 <sniprintf+0x20>
 800790e:	238b      	movs	r3, #139	@ 0x8b
 8007910:	f04f 30ff 	mov.w	r0, #4294967295
 8007914:	602b      	str	r3, [r5, #0]
 8007916:	b01d      	add	sp, #116	@ 0x74
 8007918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800791c:	b002      	add	sp, #8
 800791e:	4770      	bx	lr
 8007920:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007924:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007928:	bf0c      	ite	eq
 800792a:	4623      	moveq	r3, r4
 800792c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007930:	9304      	str	r3, [sp, #16]
 8007932:	9307      	str	r3, [sp, #28]
 8007934:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007938:	9002      	str	r0, [sp, #8]
 800793a:	9006      	str	r0, [sp, #24]
 800793c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007940:	4628      	mov	r0, r5
 8007942:	ab21      	add	r3, sp, #132	@ 0x84
 8007944:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007946:	a902      	add	r1, sp, #8
 8007948:	9301      	str	r3, [sp, #4]
 800794a:	f000 fab3 	bl	8007eb4 <_svfiprintf_r>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	bfbc      	itt	lt
 8007952:	238b      	movlt	r3, #139	@ 0x8b
 8007954:	602b      	strlt	r3, [r5, #0]
 8007956:	2c00      	cmp	r4, #0
 8007958:	d0dd      	beq.n	8007916 <sniprintf+0x16>
 800795a:	2200      	movs	r2, #0
 800795c:	9b02      	ldr	r3, [sp, #8]
 800795e:	701a      	strb	r2, [r3, #0]
 8007960:	e7d9      	b.n	8007916 <sniprintf+0x16>
 8007962:	bf00      	nop
 8007964:	200000d0 	.word	0x200000d0

08007968 <__sread>:
 8007968:	b510      	push	{r4, lr}
 800796a:	460c      	mov	r4, r1
 800796c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007970:	f000 f8fc 	bl	8007b6c <_read_r>
 8007974:	2800      	cmp	r0, #0
 8007976:	bfab      	itete	ge
 8007978:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800797a:	89a3      	ldrhlt	r3, [r4, #12]
 800797c:	181b      	addge	r3, r3, r0
 800797e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007982:	bfac      	ite	ge
 8007984:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007986:	81a3      	strhlt	r3, [r4, #12]
 8007988:	bd10      	pop	{r4, pc}

0800798a <__swrite>:
 800798a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800798e:	461f      	mov	r7, r3
 8007990:	898b      	ldrh	r3, [r1, #12]
 8007992:	4605      	mov	r5, r0
 8007994:	05db      	lsls	r3, r3, #23
 8007996:	460c      	mov	r4, r1
 8007998:	4616      	mov	r6, r2
 800799a:	d505      	bpl.n	80079a8 <__swrite+0x1e>
 800799c:	2302      	movs	r3, #2
 800799e:	2200      	movs	r2, #0
 80079a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a4:	f000 f8d0 	bl	8007b48 <_lseek_r>
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	4632      	mov	r2, r6
 80079ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079b0:	81a3      	strh	r3, [r4, #12]
 80079b2:	4628      	mov	r0, r5
 80079b4:	463b      	mov	r3, r7
 80079b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079be:	f000 b8e7 	b.w	8007b90 <_write_r>

080079c2 <__sseek>:
 80079c2:	b510      	push	{r4, lr}
 80079c4:	460c      	mov	r4, r1
 80079c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ca:	f000 f8bd 	bl	8007b48 <_lseek_r>
 80079ce:	1c43      	adds	r3, r0, #1
 80079d0:	89a3      	ldrh	r3, [r4, #12]
 80079d2:	bf15      	itete	ne
 80079d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079de:	81a3      	strheq	r3, [r4, #12]
 80079e0:	bf18      	it	ne
 80079e2:	81a3      	strhne	r3, [r4, #12]
 80079e4:	bd10      	pop	{r4, pc}

080079e6 <__sclose>:
 80079e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ea:	f000 b89d 	b.w	8007b28 <_close_r>

080079ee <__swbuf_r>:
 80079ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f0:	460e      	mov	r6, r1
 80079f2:	4614      	mov	r4, r2
 80079f4:	4605      	mov	r5, r0
 80079f6:	b118      	cbz	r0, 8007a00 <__swbuf_r+0x12>
 80079f8:	6a03      	ldr	r3, [r0, #32]
 80079fa:	b90b      	cbnz	r3, 8007a00 <__swbuf_r+0x12>
 80079fc:	f7ff feda 	bl	80077b4 <__sinit>
 8007a00:	69a3      	ldr	r3, [r4, #24]
 8007a02:	60a3      	str	r3, [r4, #8]
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	071a      	lsls	r2, r3, #28
 8007a08:	d501      	bpl.n	8007a0e <__swbuf_r+0x20>
 8007a0a:	6923      	ldr	r3, [r4, #16]
 8007a0c:	b943      	cbnz	r3, 8007a20 <__swbuf_r+0x32>
 8007a0e:	4621      	mov	r1, r4
 8007a10:	4628      	mov	r0, r5
 8007a12:	f000 f82b 	bl	8007a6c <__swsetup_r>
 8007a16:	b118      	cbz	r0, 8007a20 <__swbuf_r+0x32>
 8007a18:	f04f 37ff 	mov.w	r7, #4294967295
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	6922      	ldr	r2, [r4, #16]
 8007a24:	b2f6      	uxtb	r6, r6
 8007a26:	1a98      	subs	r0, r3, r2
 8007a28:	6963      	ldr	r3, [r4, #20]
 8007a2a:	4637      	mov	r7, r6
 8007a2c:	4283      	cmp	r3, r0
 8007a2e:	dc05      	bgt.n	8007a3c <__swbuf_r+0x4e>
 8007a30:	4621      	mov	r1, r4
 8007a32:	4628      	mov	r0, r5
 8007a34:	f000 fe8c 	bl	8008750 <_fflush_r>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d1ed      	bne.n	8007a18 <__swbuf_r+0x2a>
 8007a3c:	68a3      	ldr	r3, [r4, #8]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	60a3      	str	r3, [r4, #8]
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	6022      	str	r2, [r4, #0]
 8007a48:	701e      	strb	r6, [r3, #0]
 8007a4a:	6962      	ldr	r2, [r4, #20]
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d004      	beq.n	8007a5c <__swbuf_r+0x6e>
 8007a52:	89a3      	ldrh	r3, [r4, #12]
 8007a54:	07db      	lsls	r3, r3, #31
 8007a56:	d5e1      	bpl.n	8007a1c <__swbuf_r+0x2e>
 8007a58:	2e0a      	cmp	r6, #10
 8007a5a:	d1df      	bne.n	8007a1c <__swbuf_r+0x2e>
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f000 fe76 	bl	8008750 <_fflush_r>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d0d9      	beq.n	8007a1c <__swbuf_r+0x2e>
 8007a68:	e7d6      	b.n	8007a18 <__swbuf_r+0x2a>
	...

08007a6c <__swsetup_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4b29      	ldr	r3, [pc, #164]	@ (8007b14 <__swsetup_r+0xa8>)
 8007a70:	4605      	mov	r5, r0
 8007a72:	6818      	ldr	r0, [r3, #0]
 8007a74:	460c      	mov	r4, r1
 8007a76:	b118      	cbz	r0, 8007a80 <__swsetup_r+0x14>
 8007a78:	6a03      	ldr	r3, [r0, #32]
 8007a7a:	b90b      	cbnz	r3, 8007a80 <__swsetup_r+0x14>
 8007a7c:	f7ff fe9a 	bl	80077b4 <__sinit>
 8007a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a84:	0719      	lsls	r1, r3, #28
 8007a86:	d422      	bmi.n	8007ace <__swsetup_r+0x62>
 8007a88:	06da      	lsls	r2, r3, #27
 8007a8a:	d407      	bmi.n	8007a9c <__swsetup_r+0x30>
 8007a8c:	2209      	movs	r2, #9
 8007a8e:	602a      	str	r2, [r5, #0]
 8007a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a94:	f04f 30ff 	mov.w	r0, #4294967295
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	e033      	b.n	8007b04 <__swsetup_r+0x98>
 8007a9c:	0758      	lsls	r0, r3, #29
 8007a9e:	d512      	bpl.n	8007ac6 <__swsetup_r+0x5a>
 8007aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aa2:	b141      	cbz	r1, 8007ab6 <__swsetup_r+0x4a>
 8007aa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007aa8:	4299      	cmp	r1, r3
 8007aaa:	d002      	beq.n	8007ab2 <__swsetup_r+0x46>
 8007aac:	4628      	mov	r0, r5
 8007aae:	f000 f8af 	bl	8007c10 <_free_r>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ab6:	89a3      	ldrh	r3, [r4, #12]
 8007ab8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007abc:	81a3      	strh	r3, [r4, #12]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	6063      	str	r3, [r4, #4]
 8007ac2:	6923      	ldr	r3, [r4, #16]
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	f043 0308 	orr.w	r3, r3, #8
 8007acc:	81a3      	strh	r3, [r4, #12]
 8007ace:	6923      	ldr	r3, [r4, #16]
 8007ad0:	b94b      	cbnz	r3, 8007ae6 <__swsetup_r+0x7a>
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007adc:	d003      	beq.n	8007ae6 <__swsetup_r+0x7a>
 8007ade:	4621      	mov	r1, r4
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f000 fe82 	bl	80087ea <__smakebuf_r>
 8007ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aea:	f013 0201 	ands.w	r2, r3, #1
 8007aee:	d00a      	beq.n	8007b06 <__swsetup_r+0x9a>
 8007af0:	2200      	movs	r2, #0
 8007af2:	60a2      	str	r2, [r4, #8]
 8007af4:	6962      	ldr	r2, [r4, #20]
 8007af6:	4252      	negs	r2, r2
 8007af8:	61a2      	str	r2, [r4, #24]
 8007afa:	6922      	ldr	r2, [r4, #16]
 8007afc:	b942      	cbnz	r2, 8007b10 <__swsetup_r+0xa4>
 8007afe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b02:	d1c5      	bne.n	8007a90 <__swsetup_r+0x24>
 8007b04:	bd38      	pop	{r3, r4, r5, pc}
 8007b06:	0799      	lsls	r1, r3, #30
 8007b08:	bf58      	it	pl
 8007b0a:	6962      	ldrpl	r2, [r4, #20]
 8007b0c:	60a2      	str	r2, [r4, #8]
 8007b0e:	e7f4      	b.n	8007afa <__swsetup_r+0x8e>
 8007b10:	2000      	movs	r0, #0
 8007b12:	e7f7      	b.n	8007b04 <__swsetup_r+0x98>
 8007b14:	200000d0 	.word	0x200000d0

08007b18 <memset>:
 8007b18:	4603      	mov	r3, r0
 8007b1a:	4402      	add	r2, r0
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d100      	bne.n	8007b22 <memset+0xa>
 8007b20:	4770      	bx	lr
 8007b22:	f803 1b01 	strb.w	r1, [r3], #1
 8007b26:	e7f9      	b.n	8007b1c <memset+0x4>

08007b28 <_close_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	4d05      	ldr	r5, [pc, #20]	@ (8007b44 <_close_r+0x1c>)
 8007b2e:	4604      	mov	r4, r0
 8007b30:	4608      	mov	r0, r1
 8007b32:	602b      	str	r3, [r5, #0]
 8007b34:	f7fa f9c9 	bl	8001eca <_close>
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	d102      	bne.n	8007b42 <_close_r+0x1a>
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	b103      	cbz	r3, 8007b42 <_close_r+0x1a>
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	bd38      	pop	{r3, r4, r5, pc}
 8007b44:	20000580 	.word	0x20000580

08007b48 <_lseek_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	2200      	movs	r2, #0
 8007b52:	4d05      	ldr	r5, [pc, #20]	@ (8007b68 <_lseek_r+0x20>)
 8007b54:	602a      	str	r2, [r5, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	f7fa f9db 	bl	8001f12 <_lseek>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_lseek_r+0x1e>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_lseek_r+0x1e>
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	20000580 	.word	0x20000580

08007b6c <_read_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4604      	mov	r4, r0
 8007b70:	4608      	mov	r0, r1
 8007b72:	4611      	mov	r1, r2
 8007b74:	2200      	movs	r2, #0
 8007b76:	4d05      	ldr	r5, [pc, #20]	@ (8007b8c <_read_r+0x20>)
 8007b78:	602a      	str	r2, [r5, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f7fa f96c 	bl	8001e58 <_read>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	d102      	bne.n	8007b8a <_read_r+0x1e>
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	b103      	cbz	r3, 8007b8a <_read_r+0x1e>
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	20000580 	.word	0x20000580

08007b90 <_write_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4604      	mov	r4, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	4611      	mov	r1, r2
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4d05      	ldr	r5, [pc, #20]	@ (8007bb0 <_write_r+0x20>)
 8007b9c:	602a      	str	r2, [r5, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f7fa f977 	bl	8001e92 <_write>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	d102      	bne.n	8007bae <_write_r+0x1e>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	b103      	cbz	r3, 8007bae <_write_r+0x1e>
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	20000580 	.word	0x20000580

08007bb4 <__errno>:
 8007bb4:	4b01      	ldr	r3, [pc, #4]	@ (8007bbc <__errno+0x8>)
 8007bb6:	6818      	ldr	r0, [r3, #0]
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	200000d0 	.word	0x200000d0

08007bc0 <__libc_init_array>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	2600      	movs	r6, #0
 8007bc4:	4d0c      	ldr	r5, [pc, #48]	@ (8007bf8 <__libc_init_array+0x38>)
 8007bc6:	4c0d      	ldr	r4, [pc, #52]	@ (8007bfc <__libc_init_array+0x3c>)
 8007bc8:	1b64      	subs	r4, r4, r5
 8007bca:	10a4      	asrs	r4, r4, #2
 8007bcc:	42a6      	cmp	r6, r4
 8007bce:	d109      	bne.n	8007be4 <__libc_init_array+0x24>
 8007bd0:	f001 fe26 	bl	8009820 <_init>
 8007bd4:	2600      	movs	r6, #0
 8007bd6:	4d0a      	ldr	r5, [pc, #40]	@ (8007c00 <__libc_init_array+0x40>)
 8007bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8007c04 <__libc_init_array+0x44>)
 8007bda:	1b64      	subs	r4, r4, r5
 8007bdc:	10a4      	asrs	r4, r4, #2
 8007bde:	42a6      	cmp	r6, r4
 8007be0:	d105      	bne.n	8007bee <__libc_init_array+0x2e>
 8007be2:	bd70      	pop	{r4, r5, r6, pc}
 8007be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007be8:	4798      	blx	r3
 8007bea:	3601      	adds	r6, #1
 8007bec:	e7ee      	b.n	8007bcc <__libc_init_array+0xc>
 8007bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bf2:	4798      	blx	r3
 8007bf4:	3601      	adds	r6, #1
 8007bf6:	e7f2      	b.n	8007bde <__libc_init_array+0x1e>
 8007bf8:	08009928 	.word	0x08009928
 8007bfc:	08009928 	.word	0x08009928
 8007c00:	08009928 	.word	0x08009928
 8007c04:	0800992c 	.word	0x0800992c

08007c08 <__retarget_lock_init_recursive>:
 8007c08:	4770      	bx	lr

08007c0a <__retarget_lock_acquire_recursive>:
 8007c0a:	4770      	bx	lr

08007c0c <__retarget_lock_release_recursive>:
 8007c0c:	4770      	bx	lr
	...

08007c10 <_free_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4605      	mov	r5, r0
 8007c14:	2900      	cmp	r1, #0
 8007c16:	d040      	beq.n	8007c9a <_free_r+0x8a>
 8007c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c1c:	1f0c      	subs	r4, r1, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	bfb8      	it	lt
 8007c22:	18e4      	addlt	r4, r4, r3
 8007c24:	f000 f8de 	bl	8007de4 <__malloc_lock>
 8007c28:	4a1c      	ldr	r2, [pc, #112]	@ (8007c9c <_free_r+0x8c>)
 8007c2a:	6813      	ldr	r3, [r2, #0]
 8007c2c:	b933      	cbnz	r3, 8007c3c <_free_r+0x2c>
 8007c2e:	6063      	str	r3, [r4, #4]
 8007c30:	6014      	str	r4, [r2, #0]
 8007c32:	4628      	mov	r0, r5
 8007c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c38:	f000 b8da 	b.w	8007df0 <__malloc_unlock>
 8007c3c:	42a3      	cmp	r3, r4
 8007c3e:	d908      	bls.n	8007c52 <_free_r+0x42>
 8007c40:	6820      	ldr	r0, [r4, #0]
 8007c42:	1821      	adds	r1, r4, r0
 8007c44:	428b      	cmp	r3, r1
 8007c46:	bf01      	itttt	eq
 8007c48:	6819      	ldreq	r1, [r3, #0]
 8007c4a:	685b      	ldreq	r3, [r3, #4]
 8007c4c:	1809      	addeq	r1, r1, r0
 8007c4e:	6021      	streq	r1, [r4, #0]
 8007c50:	e7ed      	b.n	8007c2e <_free_r+0x1e>
 8007c52:	461a      	mov	r2, r3
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	b10b      	cbz	r3, 8007c5c <_free_r+0x4c>
 8007c58:	42a3      	cmp	r3, r4
 8007c5a:	d9fa      	bls.n	8007c52 <_free_r+0x42>
 8007c5c:	6811      	ldr	r1, [r2, #0]
 8007c5e:	1850      	adds	r0, r2, r1
 8007c60:	42a0      	cmp	r0, r4
 8007c62:	d10b      	bne.n	8007c7c <_free_r+0x6c>
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	4401      	add	r1, r0
 8007c68:	1850      	adds	r0, r2, r1
 8007c6a:	4283      	cmp	r3, r0
 8007c6c:	6011      	str	r1, [r2, #0]
 8007c6e:	d1e0      	bne.n	8007c32 <_free_r+0x22>
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	4408      	add	r0, r1
 8007c76:	6010      	str	r0, [r2, #0]
 8007c78:	6053      	str	r3, [r2, #4]
 8007c7a:	e7da      	b.n	8007c32 <_free_r+0x22>
 8007c7c:	d902      	bls.n	8007c84 <_free_r+0x74>
 8007c7e:	230c      	movs	r3, #12
 8007c80:	602b      	str	r3, [r5, #0]
 8007c82:	e7d6      	b.n	8007c32 <_free_r+0x22>
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	1821      	adds	r1, r4, r0
 8007c88:	428b      	cmp	r3, r1
 8007c8a:	bf01      	itttt	eq
 8007c8c:	6819      	ldreq	r1, [r3, #0]
 8007c8e:	685b      	ldreq	r3, [r3, #4]
 8007c90:	1809      	addeq	r1, r1, r0
 8007c92:	6021      	streq	r1, [r4, #0]
 8007c94:	6063      	str	r3, [r4, #4]
 8007c96:	6054      	str	r4, [r2, #4]
 8007c98:	e7cb      	b.n	8007c32 <_free_r+0x22>
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	2000058c 	.word	0x2000058c

08007ca0 <sbrk_aligned>:
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	4e0f      	ldr	r6, [pc, #60]	@ (8007ce0 <sbrk_aligned+0x40>)
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	6831      	ldr	r1, [r6, #0]
 8007ca8:	4605      	mov	r5, r0
 8007caa:	b911      	cbnz	r1, 8007cb2 <sbrk_aligned+0x12>
 8007cac:	f000 fe16 	bl	80088dc <_sbrk_r>
 8007cb0:	6030      	str	r0, [r6, #0]
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	f000 fe11 	bl	80088dc <_sbrk_r>
 8007cba:	1c43      	adds	r3, r0, #1
 8007cbc:	d103      	bne.n	8007cc6 <sbrk_aligned+0x26>
 8007cbe:	f04f 34ff 	mov.w	r4, #4294967295
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	bd70      	pop	{r4, r5, r6, pc}
 8007cc6:	1cc4      	adds	r4, r0, #3
 8007cc8:	f024 0403 	bic.w	r4, r4, #3
 8007ccc:	42a0      	cmp	r0, r4
 8007cce:	d0f8      	beq.n	8007cc2 <sbrk_aligned+0x22>
 8007cd0:	1a21      	subs	r1, r4, r0
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f000 fe02 	bl	80088dc <_sbrk_r>
 8007cd8:	3001      	adds	r0, #1
 8007cda:	d1f2      	bne.n	8007cc2 <sbrk_aligned+0x22>
 8007cdc:	e7ef      	b.n	8007cbe <sbrk_aligned+0x1e>
 8007cde:	bf00      	nop
 8007ce0:	20000588 	.word	0x20000588

08007ce4 <_malloc_r>:
 8007ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ce8:	1ccd      	adds	r5, r1, #3
 8007cea:	f025 0503 	bic.w	r5, r5, #3
 8007cee:	3508      	adds	r5, #8
 8007cf0:	2d0c      	cmp	r5, #12
 8007cf2:	bf38      	it	cc
 8007cf4:	250c      	movcc	r5, #12
 8007cf6:	2d00      	cmp	r5, #0
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	db01      	blt.n	8007d00 <_malloc_r+0x1c>
 8007cfc:	42a9      	cmp	r1, r5
 8007cfe:	d904      	bls.n	8007d0a <_malloc_r+0x26>
 8007d00:	230c      	movs	r3, #12
 8007d02:	6033      	str	r3, [r6, #0]
 8007d04:	2000      	movs	r0, #0
 8007d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007de0 <_malloc_r+0xfc>
 8007d0e:	f000 f869 	bl	8007de4 <__malloc_lock>
 8007d12:	f8d8 3000 	ldr.w	r3, [r8]
 8007d16:	461c      	mov	r4, r3
 8007d18:	bb44      	cbnz	r4, 8007d6c <_malloc_r+0x88>
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	f7ff ffbf 	bl	8007ca0 <sbrk_aligned>
 8007d22:	1c43      	adds	r3, r0, #1
 8007d24:	4604      	mov	r4, r0
 8007d26:	d158      	bne.n	8007dda <_malloc_r+0xf6>
 8007d28:	f8d8 4000 	ldr.w	r4, [r8]
 8007d2c:	4627      	mov	r7, r4
 8007d2e:	2f00      	cmp	r7, #0
 8007d30:	d143      	bne.n	8007dba <_malloc_r+0xd6>
 8007d32:	2c00      	cmp	r4, #0
 8007d34:	d04b      	beq.n	8007dce <_malloc_r+0xea>
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	4639      	mov	r1, r7
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	eb04 0903 	add.w	r9, r4, r3
 8007d40:	f000 fdcc 	bl	80088dc <_sbrk_r>
 8007d44:	4581      	cmp	r9, r0
 8007d46:	d142      	bne.n	8007dce <_malloc_r+0xea>
 8007d48:	6821      	ldr	r1, [r4, #0]
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	1a6d      	subs	r5, r5, r1
 8007d4e:	4629      	mov	r1, r5
 8007d50:	f7ff ffa6 	bl	8007ca0 <sbrk_aligned>
 8007d54:	3001      	adds	r0, #1
 8007d56:	d03a      	beq.n	8007dce <_malloc_r+0xea>
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	442b      	add	r3, r5
 8007d5c:	6023      	str	r3, [r4, #0]
 8007d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	bb62      	cbnz	r2, 8007dc0 <_malloc_r+0xdc>
 8007d66:	f8c8 7000 	str.w	r7, [r8]
 8007d6a:	e00f      	b.n	8007d8c <_malloc_r+0xa8>
 8007d6c:	6822      	ldr	r2, [r4, #0]
 8007d6e:	1b52      	subs	r2, r2, r5
 8007d70:	d420      	bmi.n	8007db4 <_malloc_r+0xd0>
 8007d72:	2a0b      	cmp	r2, #11
 8007d74:	d917      	bls.n	8007da6 <_malloc_r+0xc2>
 8007d76:	1961      	adds	r1, r4, r5
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	6025      	str	r5, [r4, #0]
 8007d7c:	bf18      	it	ne
 8007d7e:	6059      	strne	r1, [r3, #4]
 8007d80:	6863      	ldr	r3, [r4, #4]
 8007d82:	bf08      	it	eq
 8007d84:	f8c8 1000 	streq.w	r1, [r8]
 8007d88:	5162      	str	r2, [r4, r5]
 8007d8a:	604b      	str	r3, [r1, #4]
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	f000 f82f 	bl	8007df0 <__malloc_unlock>
 8007d92:	f104 000b 	add.w	r0, r4, #11
 8007d96:	1d23      	adds	r3, r4, #4
 8007d98:	f020 0007 	bic.w	r0, r0, #7
 8007d9c:	1ac2      	subs	r2, r0, r3
 8007d9e:	bf1c      	itt	ne
 8007da0:	1a1b      	subne	r3, r3, r0
 8007da2:	50a3      	strne	r3, [r4, r2]
 8007da4:	e7af      	b.n	8007d06 <_malloc_r+0x22>
 8007da6:	6862      	ldr	r2, [r4, #4]
 8007da8:	42a3      	cmp	r3, r4
 8007daa:	bf0c      	ite	eq
 8007dac:	f8c8 2000 	streq.w	r2, [r8]
 8007db0:	605a      	strne	r2, [r3, #4]
 8007db2:	e7eb      	b.n	8007d8c <_malloc_r+0xa8>
 8007db4:	4623      	mov	r3, r4
 8007db6:	6864      	ldr	r4, [r4, #4]
 8007db8:	e7ae      	b.n	8007d18 <_malloc_r+0x34>
 8007dba:	463c      	mov	r4, r7
 8007dbc:	687f      	ldr	r7, [r7, #4]
 8007dbe:	e7b6      	b.n	8007d2e <_malloc_r+0x4a>
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	42a3      	cmp	r3, r4
 8007dc6:	d1fb      	bne.n	8007dc0 <_malloc_r+0xdc>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	6053      	str	r3, [r2, #4]
 8007dcc:	e7de      	b.n	8007d8c <_malloc_r+0xa8>
 8007dce:	230c      	movs	r3, #12
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	6033      	str	r3, [r6, #0]
 8007dd4:	f000 f80c 	bl	8007df0 <__malloc_unlock>
 8007dd8:	e794      	b.n	8007d04 <_malloc_r+0x20>
 8007dda:	6005      	str	r5, [r0, #0]
 8007ddc:	e7d6      	b.n	8007d8c <_malloc_r+0xa8>
 8007dde:	bf00      	nop
 8007de0:	2000058c 	.word	0x2000058c

08007de4 <__malloc_lock>:
 8007de4:	4801      	ldr	r0, [pc, #4]	@ (8007dec <__malloc_lock+0x8>)
 8007de6:	f7ff bf10 	b.w	8007c0a <__retarget_lock_acquire_recursive>
 8007dea:	bf00      	nop
 8007dec:	20000584 	.word	0x20000584

08007df0 <__malloc_unlock>:
 8007df0:	4801      	ldr	r0, [pc, #4]	@ (8007df8 <__malloc_unlock+0x8>)
 8007df2:	f7ff bf0b 	b.w	8007c0c <__retarget_lock_release_recursive>
 8007df6:	bf00      	nop
 8007df8:	20000584 	.word	0x20000584

08007dfc <__ssputs_r>:
 8007dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e00:	461f      	mov	r7, r3
 8007e02:	688e      	ldr	r6, [r1, #8]
 8007e04:	4682      	mov	sl, r0
 8007e06:	42be      	cmp	r6, r7
 8007e08:	460c      	mov	r4, r1
 8007e0a:	4690      	mov	r8, r2
 8007e0c:	680b      	ldr	r3, [r1, #0]
 8007e0e:	d82d      	bhi.n	8007e6c <__ssputs_r+0x70>
 8007e10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007e18:	d026      	beq.n	8007e68 <__ssputs_r+0x6c>
 8007e1a:	6965      	ldr	r5, [r4, #20]
 8007e1c:	6909      	ldr	r1, [r1, #16]
 8007e1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e22:	eba3 0901 	sub.w	r9, r3, r1
 8007e26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e2a:	1c7b      	adds	r3, r7, #1
 8007e2c:	444b      	add	r3, r9
 8007e2e:	106d      	asrs	r5, r5, #1
 8007e30:	429d      	cmp	r5, r3
 8007e32:	bf38      	it	cc
 8007e34:	461d      	movcc	r5, r3
 8007e36:	0553      	lsls	r3, r2, #21
 8007e38:	d527      	bpl.n	8007e8a <__ssputs_r+0x8e>
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	f7ff ff52 	bl	8007ce4 <_malloc_r>
 8007e40:	4606      	mov	r6, r0
 8007e42:	b360      	cbz	r0, 8007e9e <__ssputs_r+0xa2>
 8007e44:	464a      	mov	r2, r9
 8007e46:	6921      	ldr	r1, [r4, #16]
 8007e48:	f000 fd66 	bl	8008918 <memcpy>
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e56:	81a3      	strh	r3, [r4, #12]
 8007e58:	6126      	str	r6, [r4, #16]
 8007e5a:	444e      	add	r6, r9
 8007e5c:	6026      	str	r6, [r4, #0]
 8007e5e:	463e      	mov	r6, r7
 8007e60:	6165      	str	r5, [r4, #20]
 8007e62:	eba5 0509 	sub.w	r5, r5, r9
 8007e66:	60a5      	str	r5, [r4, #8]
 8007e68:	42be      	cmp	r6, r7
 8007e6a:	d900      	bls.n	8007e6e <__ssputs_r+0x72>
 8007e6c:	463e      	mov	r6, r7
 8007e6e:	4632      	mov	r2, r6
 8007e70:	4641      	mov	r1, r8
 8007e72:	6820      	ldr	r0, [r4, #0]
 8007e74:	f000 fcf5 	bl	8008862 <memmove>
 8007e78:	2000      	movs	r0, #0
 8007e7a:	68a3      	ldr	r3, [r4, #8]
 8007e7c:	1b9b      	subs	r3, r3, r6
 8007e7e:	60a3      	str	r3, [r4, #8]
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	4433      	add	r3, r6
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8a:	462a      	mov	r2, r5
 8007e8c:	f000 fd52 	bl	8008934 <_realloc_r>
 8007e90:	4606      	mov	r6, r0
 8007e92:	2800      	cmp	r0, #0
 8007e94:	d1e0      	bne.n	8007e58 <__ssputs_r+0x5c>
 8007e96:	4650      	mov	r0, sl
 8007e98:	6921      	ldr	r1, [r4, #16]
 8007e9a:	f7ff feb9 	bl	8007c10 <_free_r>
 8007e9e:	230c      	movs	r3, #12
 8007ea0:	f8ca 3000 	str.w	r3, [sl]
 8007ea4:	89a3      	ldrh	r3, [r4, #12]
 8007ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eae:	81a3      	strh	r3, [r4, #12]
 8007eb0:	e7e9      	b.n	8007e86 <__ssputs_r+0x8a>
	...

08007eb4 <_svfiprintf_r>:
 8007eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb8:	4698      	mov	r8, r3
 8007eba:	898b      	ldrh	r3, [r1, #12]
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	061b      	lsls	r3, r3, #24
 8007ec0:	460d      	mov	r5, r1
 8007ec2:	4614      	mov	r4, r2
 8007ec4:	b09d      	sub	sp, #116	@ 0x74
 8007ec6:	d510      	bpl.n	8007eea <_svfiprintf_r+0x36>
 8007ec8:	690b      	ldr	r3, [r1, #16]
 8007eca:	b973      	cbnz	r3, 8007eea <_svfiprintf_r+0x36>
 8007ecc:	2140      	movs	r1, #64	@ 0x40
 8007ece:	f7ff ff09 	bl	8007ce4 <_malloc_r>
 8007ed2:	6028      	str	r0, [r5, #0]
 8007ed4:	6128      	str	r0, [r5, #16]
 8007ed6:	b930      	cbnz	r0, 8007ee6 <_svfiprintf_r+0x32>
 8007ed8:	230c      	movs	r3, #12
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee0:	b01d      	add	sp, #116	@ 0x74
 8007ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee6:	2340      	movs	r3, #64	@ 0x40
 8007ee8:	616b      	str	r3, [r5, #20]
 8007eea:	2300      	movs	r3, #0
 8007eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eee:	2320      	movs	r3, #32
 8007ef0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ef4:	2330      	movs	r3, #48	@ 0x30
 8007ef6:	f04f 0901 	mov.w	r9, #1
 8007efa:	f8cd 800c 	str.w	r8, [sp, #12]
 8007efe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008098 <_svfiprintf_r+0x1e4>
 8007f02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f06:	4623      	mov	r3, r4
 8007f08:	469a      	mov	sl, r3
 8007f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f0e:	b10a      	cbz	r2, 8007f14 <_svfiprintf_r+0x60>
 8007f10:	2a25      	cmp	r2, #37	@ 0x25
 8007f12:	d1f9      	bne.n	8007f08 <_svfiprintf_r+0x54>
 8007f14:	ebba 0b04 	subs.w	fp, sl, r4
 8007f18:	d00b      	beq.n	8007f32 <_svfiprintf_r+0x7e>
 8007f1a:	465b      	mov	r3, fp
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4638      	mov	r0, r7
 8007f22:	f7ff ff6b 	bl	8007dfc <__ssputs_r>
 8007f26:	3001      	adds	r0, #1
 8007f28:	f000 80a7 	beq.w	800807a <_svfiprintf_r+0x1c6>
 8007f2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f2e:	445a      	add	r2, fp
 8007f30:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f32:	f89a 3000 	ldrb.w	r3, [sl]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 809f 	beq.w	800807a <_svfiprintf_r+0x1c6>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f46:	f10a 0a01 	add.w	sl, sl, #1
 8007f4a:	9304      	str	r3, [sp, #16]
 8007f4c:	9307      	str	r3, [sp, #28]
 8007f4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f52:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f54:	4654      	mov	r4, sl
 8007f56:	2205      	movs	r2, #5
 8007f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5c:	484e      	ldr	r0, [pc, #312]	@ (8008098 <_svfiprintf_r+0x1e4>)
 8007f5e:	f000 fccd 	bl	80088fc <memchr>
 8007f62:	9a04      	ldr	r2, [sp, #16]
 8007f64:	b9d8      	cbnz	r0, 8007f9e <_svfiprintf_r+0xea>
 8007f66:	06d0      	lsls	r0, r2, #27
 8007f68:	bf44      	itt	mi
 8007f6a:	2320      	movmi	r3, #32
 8007f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f70:	0711      	lsls	r1, r2, #28
 8007f72:	bf44      	itt	mi
 8007f74:	232b      	movmi	r3, #43	@ 0x2b
 8007f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f80:	d015      	beq.n	8007fae <_svfiprintf_r+0xfa>
 8007f82:	4654      	mov	r4, sl
 8007f84:	2000      	movs	r0, #0
 8007f86:	f04f 0c0a 	mov.w	ip, #10
 8007f8a:	9a07      	ldr	r2, [sp, #28]
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f92:	3b30      	subs	r3, #48	@ 0x30
 8007f94:	2b09      	cmp	r3, #9
 8007f96:	d94b      	bls.n	8008030 <_svfiprintf_r+0x17c>
 8007f98:	b1b0      	cbz	r0, 8007fc8 <_svfiprintf_r+0x114>
 8007f9a:	9207      	str	r2, [sp, #28]
 8007f9c:	e014      	b.n	8007fc8 <_svfiprintf_r+0x114>
 8007f9e:	eba0 0308 	sub.w	r3, r0, r8
 8007fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	46a2      	mov	sl, r4
 8007faa:	9304      	str	r3, [sp, #16]
 8007fac:	e7d2      	b.n	8007f54 <_svfiprintf_r+0xa0>
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	1d19      	adds	r1, r3, #4
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	9103      	str	r1, [sp, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bfbb      	ittet	lt
 8007fba:	425b      	neglt	r3, r3
 8007fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8007fc0:	9307      	strge	r3, [sp, #28]
 8007fc2:	9307      	strlt	r3, [sp, #28]
 8007fc4:	bfb8      	it	lt
 8007fc6:	9204      	strlt	r2, [sp, #16]
 8007fc8:	7823      	ldrb	r3, [r4, #0]
 8007fca:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fcc:	d10a      	bne.n	8007fe4 <_svfiprintf_r+0x130>
 8007fce:	7863      	ldrb	r3, [r4, #1]
 8007fd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fd2:	d132      	bne.n	800803a <_svfiprintf_r+0x186>
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	3402      	adds	r4, #2
 8007fd8:	1d1a      	adds	r2, r3, #4
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	9203      	str	r2, [sp, #12]
 8007fde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fe2:	9305      	str	r3, [sp, #20]
 8007fe4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800809c <_svfiprintf_r+0x1e8>
 8007fe8:	2203      	movs	r2, #3
 8007fea:	4650      	mov	r0, sl
 8007fec:	7821      	ldrb	r1, [r4, #0]
 8007fee:	f000 fc85 	bl	80088fc <memchr>
 8007ff2:	b138      	cbz	r0, 8008004 <_svfiprintf_r+0x150>
 8007ff4:	2240      	movs	r2, #64	@ 0x40
 8007ff6:	9b04      	ldr	r3, [sp, #16]
 8007ff8:	eba0 000a 	sub.w	r0, r0, sl
 8007ffc:	4082      	lsls	r2, r0
 8007ffe:	4313      	orrs	r3, r2
 8008000:	3401      	adds	r4, #1
 8008002:	9304      	str	r3, [sp, #16]
 8008004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008008:	2206      	movs	r2, #6
 800800a:	4825      	ldr	r0, [pc, #148]	@ (80080a0 <_svfiprintf_r+0x1ec>)
 800800c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008010:	f000 fc74 	bl	80088fc <memchr>
 8008014:	2800      	cmp	r0, #0
 8008016:	d036      	beq.n	8008086 <_svfiprintf_r+0x1d2>
 8008018:	4b22      	ldr	r3, [pc, #136]	@ (80080a4 <_svfiprintf_r+0x1f0>)
 800801a:	bb1b      	cbnz	r3, 8008064 <_svfiprintf_r+0x1b0>
 800801c:	9b03      	ldr	r3, [sp, #12]
 800801e:	3307      	adds	r3, #7
 8008020:	f023 0307 	bic.w	r3, r3, #7
 8008024:	3308      	adds	r3, #8
 8008026:	9303      	str	r3, [sp, #12]
 8008028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800802a:	4433      	add	r3, r6
 800802c:	9309      	str	r3, [sp, #36]	@ 0x24
 800802e:	e76a      	b.n	8007f06 <_svfiprintf_r+0x52>
 8008030:	460c      	mov	r4, r1
 8008032:	2001      	movs	r0, #1
 8008034:	fb0c 3202 	mla	r2, ip, r2, r3
 8008038:	e7a8      	b.n	8007f8c <_svfiprintf_r+0xd8>
 800803a:	2300      	movs	r3, #0
 800803c:	f04f 0c0a 	mov.w	ip, #10
 8008040:	4619      	mov	r1, r3
 8008042:	3401      	adds	r4, #1
 8008044:	9305      	str	r3, [sp, #20]
 8008046:	4620      	mov	r0, r4
 8008048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800804c:	3a30      	subs	r2, #48	@ 0x30
 800804e:	2a09      	cmp	r2, #9
 8008050:	d903      	bls.n	800805a <_svfiprintf_r+0x1a6>
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0c6      	beq.n	8007fe4 <_svfiprintf_r+0x130>
 8008056:	9105      	str	r1, [sp, #20]
 8008058:	e7c4      	b.n	8007fe4 <_svfiprintf_r+0x130>
 800805a:	4604      	mov	r4, r0
 800805c:	2301      	movs	r3, #1
 800805e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008062:	e7f0      	b.n	8008046 <_svfiprintf_r+0x192>
 8008064:	ab03      	add	r3, sp, #12
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	462a      	mov	r2, r5
 800806a:	4638      	mov	r0, r7
 800806c:	4b0e      	ldr	r3, [pc, #56]	@ (80080a8 <_svfiprintf_r+0x1f4>)
 800806e:	a904      	add	r1, sp, #16
 8008070:	f3af 8000 	nop.w
 8008074:	1c42      	adds	r2, r0, #1
 8008076:	4606      	mov	r6, r0
 8008078:	d1d6      	bne.n	8008028 <_svfiprintf_r+0x174>
 800807a:	89ab      	ldrh	r3, [r5, #12]
 800807c:	065b      	lsls	r3, r3, #25
 800807e:	f53f af2d 	bmi.w	8007edc <_svfiprintf_r+0x28>
 8008082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008084:	e72c      	b.n	8007ee0 <_svfiprintf_r+0x2c>
 8008086:	ab03      	add	r3, sp, #12
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	462a      	mov	r2, r5
 800808c:	4638      	mov	r0, r7
 800808e:	4b06      	ldr	r3, [pc, #24]	@ (80080a8 <_svfiprintf_r+0x1f4>)
 8008090:	a904      	add	r1, sp, #16
 8008092:	f000 f9bd 	bl	8008410 <_printf_i>
 8008096:	e7ed      	b.n	8008074 <_svfiprintf_r+0x1c0>
 8008098:	080098b8 	.word	0x080098b8
 800809c:	080098be 	.word	0x080098be
 80080a0:	080098c2 	.word	0x080098c2
 80080a4:	00000000 	.word	0x00000000
 80080a8:	08007dfd 	.word	0x08007dfd

080080ac <__sfputc_r>:
 80080ac:	6893      	ldr	r3, [r2, #8]
 80080ae:	b410      	push	{r4}
 80080b0:	3b01      	subs	r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	6093      	str	r3, [r2, #8]
 80080b6:	da07      	bge.n	80080c8 <__sfputc_r+0x1c>
 80080b8:	6994      	ldr	r4, [r2, #24]
 80080ba:	42a3      	cmp	r3, r4
 80080bc:	db01      	blt.n	80080c2 <__sfputc_r+0x16>
 80080be:	290a      	cmp	r1, #10
 80080c0:	d102      	bne.n	80080c8 <__sfputc_r+0x1c>
 80080c2:	bc10      	pop	{r4}
 80080c4:	f7ff bc93 	b.w	80079ee <__swbuf_r>
 80080c8:	6813      	ldr	r3, [r2, #0]
 80080ca:	1c58      	adds	r0, r3, #1
 80080cc:	6010      	str	r0, [r2, #0]
 80080ce:	7019      	strb	r1, [r3, #0]
 80080d0:	4608      	mov	r0, r1
 80080d2:	bc10      	pop	{r4}
 80080d4:	4770      	bx	lr

080080d6 <__sfputs_r>:
 80080d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d8:	4606      	mov	r6, r0
 80080da:	460f      	mov	r7, r1
 80080dc:	4614      	mov	r4, r2
 80080de:	18d5      	adds	r5, r2, r3
 80080e0:	42ac      	cmp	r4, r5
 80080e2:	d101      	bne.n	80080e8 <__sfputs_r+0x12>
 80080e4:	2000      	movs	r0, #0
 80080e6:	e007      	b.n	80080f8 <__sfputs_r+0x22>
 80080e8:	463a      	mov	r2, r7
 80080ea:	4630      	mov	r0, r6
 80080ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f0:	f7ff ffdc 	bl	80080ac <__sfputc_r>
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	d1f3      	bne.n	80080e0 <__sfputs_r+0xa>
 80080f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080fc <_vfiprintf_r>:
 80080fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008100:	460d      	mov	r5, r1
 8008102:	4614      	mov	r4, r2
 8008104:	4698      	mov	r8, r3
 8008106:	4606      	mov	r6, r0
 8008108:	b09d      	sub	sp, #116	@ 0x74
 800810a:	b118      	cbz	r0, 8008114 <_vfiprintf_r+0x18>
 800810c:	6a03      	ldr	r3, [r0, #32]
 800810e:	b90b      	cbnz	r3, 8008114 <_vfiprintf_r+0x18>
 8008110:	f7ff fb50 	bl	80077b4 <__sinit>
 8008114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008116:	07d9      	lsls	r1, r3, #31
 8008118:	d405      	bmi.n	8008126 <_vfiprintf_r+0x2a>
 800811a:	89ab      	ldrh	r3, [r5, #12]
 800811c:	059a      	lsls	r2, r3, #22
 800811e:	d402      	bmi.n	8008126 <_vfiprintf_r+0x2a>
 8008120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008122:	f7ff fd72 	bl	8007c0a <__retarget_lock_acquire_recursive>
 8008126:	89ab      	ldrh	r3, [r5, #12]
 8008128:	071b      	lsls	r3, r3, #28
 800812a:	d501      	bpl.n	8008130 <_vfiprintf_r+0x34>
 800812c:	692b      	ldr	r3, [r5, #16]
 800812e:	b99b      	cbnz	r3, 8008158 <_vfiprintf_r+0x5c>
 8008130:	4629      	mov	r1, r5
 8008132:	4630      	mov	r0, r6
 8008134:	f7ff fc9a 	bl	8007a6c <__swsetup_r>
 8008138:	b170      	cbz	r0, 8008158 <_vfiprintf_r+0x5c>
 800813a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800813c:	07dc      	lsls	r4, r3, #31
 800813e:	d504      	bpl.n	800814a <_vfiprintf_r+0x4e>
 8008140:	f04f 30ff 	mov.w	r0, #4294967295
 8008144:	b01d      	add	sp, #116	@ 0x74
 8008146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814a:	89ab      	ldrh	r3, [r5, #12]
 800814c:	0598      	lsls	r0, r3, #22
 800814e:	d4f7      	bmi.n	8008140 <_vfiprintf_r+0x44>
 8008150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008152:	f7ff fd5b 	bl	8007c0c <__retarget_lock_release_recursive>
 8008156:	e7f3      	b.n	8008140 <_vfiprintf_r+0x44>
 8008158:	2300      	movs	r3, #0
 800815a:	9309      	str	r3, [sp, #36]	@ 0x24
 800815c:	2320      	movs	r3, #32
 800815e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008162:	2330      	movs	r3, #48	@ 0x30
 8008164:	f04f 0901 	mov.w	r9, #1
 8008168:	f8cd 800c 	str.w	r8, [sp, #12]
 800816c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008318 <_vfiprintf_r+0x21c>
 8008170:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008174:	4623      	mov	r3, r4
 8008176:	469a      	mov	sl, r3
 8008178:	f813 2b01 	ldrb.w	r2, [r3], #1
 800817c:	b10a      	cbz	r2, 8008182 <_vfiprintf_r+0x86>
 800817e:	2a25      	cmp	r2, #37	@ 0x25
 8008180:	d1f9      	bne.n	8008176 <_vfiprintf_r+0x7a>
 8008182:	ebba 0b04 	subs.w	fp, sl, r4
 8008186:	d00b      	beq.n	80081a0 <_vfiprintf_r+0xa4>
 8008188:	465b      	mov	r3, fp
 800818a:	4622      	mov	r2, r4
 800818c:	4629      	mov	r1, r5
 800818e:	4630      	mov	r0, r6
 8008190:	f7ff ffa1 	bl	80080d6 <__sfputs_r>
 8008194:	3001      	adds	r0, #1
 8008196:	f000 80a7 	beq.w	80082e8 <_vfiprintf_r+0x1ec>
 800819a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800819c:	445a      	add	r2, fp
 800819e:	9209      	str	r2, [sp, #36]	@ 0x24
 80081a0:	f89a 3000 	ldrb.w	r3, [sl]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 809f 	beq.w	80082e8 <_vfiprintf_r+0x1ec>
 80081aa:	2300      	movs	r3, #0
 80081ac:	f04f 32ff 	mov.w	r2, #4294967295
 80081b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081b4:	f10a 0a01 	add.w	sl, sl, #1
 80081b8:	9304      	str	r3, [sp, #16]
 80081ba:	9307      	str	r3, [sp, #28]
 80081bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80081c2:	4654      	mov	r4, sl
 80081c4:	2205      	movs	r2, #5
 80081c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ca:	4853      	ldr	r0, [pc, #332]	@ (8008318 <_vfiprintf_r+0x21c>)
 80081cc:	f000 fb96 	bl	80088fc <memchr>
 80081d0:	9a04      	ldr	r2, [sp, #16]
 80081d2:	b9d8      	cbnz	r0, 800820c <_vfiprintf_r+0x110>
 80081d4:	06d1      	lsls	r1, r2, #27
 80081d6:	bf44      	itt	mi
 80081d8:	2320      	movmi	r3, #32
 80081da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081de:	0713      	lsls	r3, r2, #28
 80081e0:	bf44      	itt	mi
 80081e2:	232b      	movmi	r3, #43	@ 0x2b
 80081e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081e8:	f89a 3000 	ldrb.w	r3, [sl]
 80081ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ee:	d015      	beq.n	800821c <_vfiprintf_r+0x120>
 80081f0:	4654      	mov	r4, sl
 80081f2:	2000      	movs	r0, #0
 80081f4:	f04f 0c0a 	mov.w	ip, #10
 80081f8:	9a07      	ldr	r2, [sp, #28]
 80081fa:	4621      	mov	r1, r4
 80081fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008200:	3b30      	subs	r3, #48	@ 0x30
 8008202:	2b09      	cmp	r3, #9
 8008204:	d94b      	bls.n	800829e <_vfiprintf_r+0x1a2>
 8008206:	b1b0      	cbz	r0, 8008236 <_vfiprintf_r+0x13a>
 8008208:	9207      	str	r2, [sp, #28]
 800820a:	e014      	b.n	8008236 <_vfiprintf_r+0x13a>
 800820c:	eba0 0308 	sub.w	r3, r0, r8
 8008210:	fa09 f303 	lsl.w	r3, r9, r3
 8008214:	4313      	orrs	r3, r2
 8008216:	46a2      	mov	sl, r4
 8008218:	9304      	str	r3, [sp, #16]
 800821a:	e7d2      	b.n	80081c2 <_vfiprintf_r+0xc6>
 800821c:	9b03      	ldr	r3, [sp, #12]
 800821e:	1d19      	adds	r1, r3, #4
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	9103      	str	r1, [sp, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	bfbb      	ittet	lt
 8008228:	425b      	neglt	r3, r3
 800822a:	f042 0202 	orrlt.w	r2, r2, #2
 800822e:	9307      	strge	r3, [sp, #28]
 8008230:	9307      	strlt	r3, [sp, #28]
 8008232:	bfb8      	it	lt
 8008234:	9204      	strlt	r2, [sp, #16]
 8008236:	7823      	ldrb	r3, [r4, #0]
 8008238:	2b2e      	cmp	r3, #46	@ 0x2e
 800823a:	d10a      	bne.n	8008252 <_vfiprintf_r+0x156>
 800823c:	7863      	ldrb	r3, [r4, #1]
 800823e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008240:	d132      	bne.n	80082a8 <_vfiprintf_r+0x1ac>
 8008242:	9b03      	ldr	r3, [sp, #12]
 8008244:	3402      	adds	r4, #2
 8008246:	1d1a      	adds	r2, r3, #4
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	9203      	str	r2, [sp, #12]
 800824c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008250:	9305      	str	r3, [sp, #20]
 8008252:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800831c <_vfiprintf_r+0x220>
 8008256:	2203      	movs	r2, #3
 8008258:	4650      	mov	r0, sl
 800825a:	7821      	ldrb	r1, [r4, #0]
 800825c:	f000 fb4e 	bl	80088fc <memchr>
 8008260:	b138      	cbz	r0, 8008272 <_vfiprintf_r+0x176>
 8008262:	2240      	movs	r2, #64	@ 0x40
 8008264:	9b04      	ldr	r3, [sp, #16]
 8008266:	eba0 000a 	sub.w	r0, r0, sl
 800826a:	4082      	lsls	r2, r0
 800826c:	4313      	orrs	r3, r2
 800826e:	3401      	adds	r4, #1
 8008270:	9304      	str	r3, [sp, #16]
 8008272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008276:	2206      	movs	r2, #6
 8008278:	4829      	ldr	r0, [pc, #164]	@ (8008320 <_vfiprintf_r+0x224>)
 800827a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800827e:	f000 fb3d 	bl	80088fc <memchr>
 8008282:	2800      	cmp	r0, #0
 8008284:	d03f      	beq.n	8008306 <_vfiprintf_r+0x20a>
 8008286:	4b27      	ldr	r3, [pc, #156]	@ (8008324 <_vfiprintf_r+0x228>)
 8008288:	bb1b      	cbnz	r3, 80082d2 <_vfiprintf_r+0x1d6>
 800828a:	9b03      	ldr	r3, [sp, #12]
 800828c:	3307      	adds	r3, #7
 800828e:	f023 0307 	bic.w	r3, r3, #7
 8008292:	3308      	adds	r3, #8
 8008294:	9303      	str	r3, [sp, #12]
 8008296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008298:	443b      	add	r3, r7
 800829a:	9309      	str	r3, [sp, #36]	@ 0x24
 800829c:	e76a      	b.n	8008174 <_vfiprintf_r+0x78>
 800829e:	460c      	mov	r4, r1
 80082a0:	2001      	movs	r0, #1
 80082a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80082a6:	e7a8      	b.n	80081fa <_vfiprintf_r+0xfe>
 80082a8:	2300      	movs	r3, #0
 80082aa:	f04f 0c0a 	mov.w	ip, #10
 80082ae:	4619      	mov	r1, r3
 80082b0:	3401      	adds	r4, #1
 80082b2:	9305      	str	r3, [sp, #20]
 80082b4:	4620      	mov	r0, r4
 80082b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ba:	3a30      	subs	r2, #48	@ 0x30
 80082bc:	2a09      	cmp	r2, #9
 80082be:	d903      	bls.n	80082c8 <_vfiprintf_r+0x1cc>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0c6      	beq.n	8008252 <_vfiprintf_r+0x156>
 80082c4:	9105      	str	r1, [sp, #20]
 80082c6:	e7c4      	b.n	8008252 <_vfiprintf_r+0x156>
 80082c8:	4604      	mov	r4, r0
 80082ca:	2301      	movs	r3, #1
 80082cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80082d0:	e7f0      	b.n	80082b4 <_vfiprintf_r+0x1b8>
 80082d2:	ab03      	add	r3, sp, #12
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	462a      	mov	r2, r5
 80082d8:	4630      	mov	r0, r6
 80082da:	4b13      	ldr	r3, [pc, #76]	@ (8008328 <_vfiprintf_r+0x22c>)
 80082dc:	a904      	add	r1, sp, #16
 80082de:	f3af 8000 	nop.w
 80082e2:	4607      	mov	r7, r0
 80082e4:	1c78      	adds	r0, r7, #1
 80082e6:	d1d6      	bne.n	8008296 <_vfiprintf_r+0x19a>
 80082e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082ea:	07d9      	lsls	r1, r3, #31
 80082ec:	d405      	bmi.n	80082fa <_vfiprintf_r+0x1fe>
 80082ee:	89ab      	ldrh	r3, [r5, #12]
 80082f0:	059a      	lsls	r2, r3, #22
 80082f2:	d402      	bmi.n	80082fa <_vfiprintf_r+0x1fe>
 80082f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082f6:	f7ff fc89 	bl	8007c0c <__retarget_lock_release_recursive>
 80082fa:	89ab      	ldrh	r3, [r5, #12]
 80082fc:	065b      	lsls	r3, r3, #25
 80082fe:	f53f af1f 	bmi.w	8008140 <_vfiprintf_r+0x44>
 8008302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008304:	e71e      	b.n	8008144 <_vfiprintf_r+0x48>
 8008306:	ab03      	add	r3, sp, #12
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	462a      	mov	r2, r5
 800830c:	4630      	mov	r0, r6
 800830e:	4b06      	ldr	r3, [pc, #24]	@ (8008328 <_vfiprintf_r+0x22c>)
 8008310:	a904      	add	r1, sp, #16
 8008312:	f000 f87d 	bl	8008410 <_printf_i>
 8008316:	e7e4      	b.n	80082e2 <_vfiprintf_r+0x1e6>
 8008318:	080098b8 	.word	0x080098b8
 800831c:	080098be 	.word	0x080098be
 8008320:	080098c2 	.word	0x080098c2
 8008324:	00000000 	.word	0x00000000
 8008328:	080080d7 	.word	0x080080d7

0800832c <_printf_common>:
 800832c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008330:	4616      	mov	r6, r2
 8008332:	4698      	mov	r8, r3
 8008334:	688a      	ldr	r2, [r1, #8]
 8008336:	690b      	ldr	r3, [r1, #16]
 8008338:	4607      	mov	r7, r0
 800833a:	4293      	cmp	r3, r2
 800833c:	bfb8      	it	lt
 800833e:	4613      	movlt	r3, r2
 8008340:	6033      	str	r3, [r6, #0]
 8008342:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008346:	460c      	mov	r4, r1
 8008348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800834c:	b10a      	cbz	r2, 8008352 <_printf_common+0x26>
 800834e:	3301      	adds	r3, #1
 8008350:	6033      	str	r3, [r6, #0]
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	0699      	lsls	r1, r3, #26
 8008356:	bf42      	ittt	mi
 8008358:	6833      	ldrmi	r3, [r6, #0]
 800835a:	3302      	addmi	r3, #2
 800835c:	6033      	strmi	r3, [r6, #0]
 800835e:	6825      	ldr	r5, [r4, #0]
 8008360:	f015 0506 	ands.w	r5, r5, #6
 8008364:	d106      	bne.n	8008374 <_printf_common+0x48>
 8008366:	f104 0a19 	add.w	sl, r4, #25
 800836a:	68e3      	ldr	r3, [r4, #12]
 800836c:	6832      	ldr	r2, [r6, #0]
 800836e:	1a9b      	subs	r3, r3, r2
 8008370:	42ab      	cmp	r3, r5
 8008372:	dc2b      	bgt.n	80083cc <_printf_common+0xa0>
 8008374:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008378:	6822      	ldr	r2, [r4, #0]
 800837a:	3b00      	subs	r3, #0
 800837c:	bf18      	it	ne
 800837e:	2301      	movne	r3, #1
 8008380:	0692      	lsls	r2, r2, #26
 8008382:	d430      	bmi.n	80083e6 <_printf_common+0xba>
 8008384:	4641      	mov	r1, r8
 8008386:	4638      	mov	r0, r7
 8008388:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800838c:	47c8      	blx	r9
 800838e:	3001      	adds	r0, #1
 8008390:	d023      	beq.n	80083da <_printf_common+0xae>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	6922      	ldr	r2, [r4, #16]
 8008396:	f003 0306 	and.w	r3, r3, #6
 800839a:	2b04      	cmp	r3, #4
 800839c:	bf14      	ite	ne
 800839e:	2500      	movne	r5, #0
 80083a0:	6833      	ldreq	r3, [r6, #0]
 80083a2:	f04f 0600 	mov.w	r6, #0
 80083a6:	bf08      	it	eq
 80083a8:	68e5      	ldreq	r5, [r4, #12]
 80083aa:	f104 041a 	add.w	r4, r4, #26
 80083ae:	bf08      	it	eq
 80083b0:	1aed      	subeq	r5, r5, r3
 80083b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80083b6:	bf08      	it	eq
 80083b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083bc:	4293      	cmp	r3, r2
 80083be:	bfc4      	itt	gt
 80083c0:	1a9b      	subgt	r3, r3, r2
 80083c2:	18ed      	addgt	r5, r5, r3
 80083c4:	42b5      	cmp	r5, r6
 80083c6:	d11a      	bne.n	80083fe <_printf_common+0xd2>
 80083c8:	2000      	movs	r0, #0
 80083ca:	e008      	b.n	80083de <_printf_common+0xb2>
 80083cc:	2301      	movs	r3, #1
 80083ce:	4652      	mov	r2, sl
 80083d0:	4641      	mov	r1, r8
 80083d2:	4638      	mov	r0, r7
 80083d4:	47c8      	blx	r9
 80083d6:	3001      	adds	r0, #1
 80083d8:	d103      	bne.n	80083e2 <_printf_common+0xb6>
 80083da:	f04f 30ff 	mov.w	r0, #4294967295
 80083de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e2:	3501      	adds	r5, #1
 80083e4:	e7c1      	b.n	800836a <_printf_common+0x3e>
 80083e6:	2030      	movs	r0, #48	@ 0x30
 80083e8:	18e1      	adds	r1, r4, r3
 80083ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083f4:	4422      	add	r2, r4
 80083f6:	3302      	adds	r3, #2
 80083f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083fc:	e7c2      	b.n	8008384 <_printf_common+0x58>
 80083fe:	2301      	movs	r3, #1
 8008400:	4622      	mov	r2, r4
 8008402:	4641      	mov	r1, r8
 8008404:	4638      	mov	r0, r7
 8008406:	47c8      	blx	r9
 8008408:	3001      	adds	r0, #1
 800840a:	d0e6      	beq.n	80083da <_printf_common+0xae>
 800840c:	3601      	adds	r6, #1
 800840e:	e7d9      	b.n	80083c4 <_printf_common+0x98>

08008410 <_printf_i>:
 8008410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008414:	7e0f      	ldrb	r7, [r1, #24]
 8008416:	4691      	mov	r9, r2
 8008418:	2f78      	cmp	r7, #120	@ 0x78
 800841a:	4680      	mov	r8, r0
 800841c:	460c      	mov	r4, r1
 800841e:	469a      	mov	sl, r3
 8008420:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008422:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008426:	d807      	bhi.n	8008438 <_printf_i+0x28>
 8008428:	2f62      	cmp	r7, #98	@ 0x62
 800842a:	d80a      	bhi.n	8008442 <_printf_i+0x32>
 800842c:	2f00      	cmp	r7, #0
 800842e:	f000 80d3 	beq.w	80085d8 <_printf_i+0x1c8>
 8008432:	2f58      	cmp	r7, #88	@ 0x58
 8008434:	f000 80ba 	beq.w	80085ac <_printf_i+0x19c>
 8008438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800843c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008440:	e03a      	b.n	80084b8 <_printf_i+0xa8>
 8008442:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008446:	2b15      	cmp	r3, #21
 8008448:	d8f6      	bhi.n	8008438 <_printf_i+0x28>
 800844a:	a101      	add	r1, pc, #4	@ (adr r1, 8008450 <_printf_i+0x40>)
 800844c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008450:	080084a9 	.word	0x080084a9
 8008454:	080084bd 	.word	0x080084bd
 8008458:	08008439 	.word	0x08008439
 800845c:	08008439 	.word	0x08008439
 8008460:	08008439 	.word	0x08008439
 8008464:	08008439 	.word	0x08008439
 8008468:	080084bd 	.word	0x080084bd
 800846c:	08008439 	.word	0x08008439
 8008470:	08008439 	.word	0x08008439
 8008474:	08008439 	.word	0x08008439
 8008478:	08008439 	.word	0x08008439
 800847c:	080085bf 	.word	0x080085bf
 8008480:	080084e7 	.word	0x080084e7
 8008484:	08008579 	.word	0x08008579
 8008488:	08008439 	.word	0x08008439
 800848c:	08008439 	.word	0x08008439
 8008490:	080085e1 	.word	0x080085e1
 8008494:	08008439 	.word	0x08008439
 8008498:	080084e7 	.word	0x080084e7
 800849c:	08008439 	.word	0x08008439
 80084a0:	08008439 	.word	0x08008439
 80084a4:	08008581 	.word	0x08008581
 80084a8:	6833      	ldr	r3, [r6, #0]
 80084aa:	1d1a      	adds	r2, r3, #4
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6032      	str	r2, [r6, #0]
 80084b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084b8:	2301      	movs	r3, #1
 80084ba:	e09e      	b.n	80085fa <_printf_i+0x1ea>
 80084bc:	6833      	ldr	r3, [r6, #0]
 80084be:	6820      	ldr	r0, [r4, #0]
 80084c0:	1d19      	adds	r1, r3, #4
 80084c2:	6031      	str	r1, [r6, #0]
 80084c4:	0606      	lsls	r6, r0, #24
 80084c6:	d501      	bpl.n	80084cc <_printf_i+0xbc>
 80084c8:	681d      	ldr	r5, [r3, #0]
 80084ca:	e003      	b.n	80084d4 <_printf_i+0xc4>
 80084cc:	0645      	lsls	r5, r0, #25
 80084ce:	d5fb      	bpl.n	80084c8 <_printf_i+0xb8>
 80084d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	da03      	bge.n	80084e0 <_printf_i+0xd0>
 80084d8:	232d      	movs	r3, #45	@ 0x2d
 80084da:	426d      	negs	r5, r5
 80084dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084e0:	230a      	movs	r3, #10
 80084e2:	4859      	ldr	r0, [pc, #356]	@ (8008648 <_printf_i+0x238>)
 80084e4:	e011      	b.n	800850a <_printf_i+0xfa>
 80084e6:	6821      	ldr	r1, [r4, #0]
 80084e8:	6833      	ldr	r3, [r6, #0]
 80084ea:	0608      	lsls	r0, r1, #24
 80084ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80084f0:	d402      	bmi.n	80084f8 <_printf_i+0xe8>
 80084f2:	0649      	lsls	r1, r1, #25
 80084f4:	bf48      	it	mi
 80084f6:	b2ad      	uxthmi	r5, r5
 80084f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80084fa:	6033      	str	r3, [r6, #0]
 80084fc:	bf14      	ite	ne
 80084fe:	230a      	movne	r3, #10
 8008500:	2308      	moveq	r3, #8
 8008502:	4851      	ldr	r0, [pc, #324]	@ (8008648 <_printf_i+0x238>)
 8008504:	2100      	movs	r1, #0
 8008506:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800850a:	6866      	ldr	r6, [r4, #4]
 800850c:	2e00      	cmp	r6, #0
 800850e:	bfa8      	it	ge
 8008510:	6821      	ldrge	r1, [r4, #0]
 8008512:	60a6      	str	r6, [r4, #8]
 8008514:	bfa4      	itt	ge
 8008516:	f021 0104 	bicge.w	r1, r1, #4
 800851a:	6021      	strge	r1, [r4, #0]
 800851c:	b90d      	cbnz	r5, 8008522 <_printf_i+0x112>
 800851e:	2e00      	cmp	r6, #0
 8008520:	d04b      	beq.n	80085ba <_printf_i+0x1aa>
 8008522:	4616      	mov	r6, r2
 8008524:	fbb5 f1f3 	udiv	r1, r5, r3
 8008528:	fb03 5711 	mls	r7, r3, r1, r5
 800852c:	5dc7      	ldrb	r7, [r0, r7]
 800852e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008532:	462f      	mov	r7, r5
 8008534:	42bb      	cmp	r3, r7
 8008536:	460d      	mov	r5, r1
 8008538:	d9f4      	bls.n	8008524 <_printf_i+0x114>
 800853a:	2b08      	cmp	r3, #8
 800853c:	d10b      	bne.n	8008556 <_printf_i+0x146>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	07df      	lsls	r7, r3, #31
 8008542:	d508      	bpl.n	8008556 <_printf_i+0x146>
 8008544:	6923      	ldr	r3, [r4, #16]
 8008546:	6861      	ldr	r1, [r4, #4]
 8008548:	4299      	cmp	r1, r3
 800854a:	bfde      	ittt	le
 800854c:	2330      	movle	r3, #48	@ 0x30
 800854e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008552:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008556:	1b92      	subs	r2, r2, r6
 8008558:	6122      	str	r2, [r4, #16]
 800855a:	464b      	mov	r3, r9
 800855c:	4621      	mov	r1, r4
 800855e:	4640      	mov	r0, r8
 8008560:	f8cd a000 	str.w	sl, [sp]
 8008564:	aa03      	add	r2, sp, #12
 8008566:	f7ff fee1 	bl	800832c <_printf_common>
 800856a:	3001      	adds	r0, #1
 800856c:	d14a      	bne.n	8008604 <_printf_i+0x1f4>
 800856e:	f04f 30ff 	mov.w	r0, #4294967295
 8008572:	b004      	add	sp, #16
 8008574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	f043 0320 	orr.w	r3, r3, #32
 800857e:	6023      	str	r3, [r4, #0]
 8008580:	2778      	movs	r7, #120	@ 0x78
 8008582:	4832      	ldr	r0, [pc, #200]	@ (800864c <_printf_i+0x23c>)
 8008584:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	6831      	ldr	r1, [r6, #0]
 800858c:	061f      	lsls	r7, r3, #24
 800858e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008592:	d402      	bmi.n	800859a <_printf_i+0x18a>
 8008594:	065f      	lsls	r7, r3, #25
 8008596:	bf48      	it	mi
 8008598:	b2ad      	uxthmi	r5, r5
 800859a:	6031      	str	r1, [r6, #0]
 800859c:	07d9      	lsls	r1, r3, #31
 800859e:	bf44      	itt	mi
 80085a0:	f043 0320 	orrmi.w	r3, r3, #32
 80085a4:	6023      	strmi	r3, [r4, #0]
 80085a6:	b11d      	cbz	r5, 80085b0 <_printf_i+0x1a0>
 80085a8:	2310      	movs	r3, #16
 80085aa:	e7ab      	b.n	8008504 <_printf_i+0xf4>
 80085ac:	4826      	ldr	r0, [pc, #152]	@ (8008648 <_printf_i+0x238>)
 80085ae:	e7e9      	b.n	8008584 <_printf_i+0x174>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	f023 0320 	bic.w	r3, r3, #32
 80085b6:	6023      	str	r3, [r4, #0]
 80085b8:	e7f6      	b.n	80085a8 <_printf_i+0x198>
 80085ba:	4616      	mov	r6, r2
 80085bc:	e7bd      	b.n	800853a <_printf_i+0x12a>
 80085be:	6833      	ldr	r3, [r6, #0]
 80085c0:	6825      	ldr	r5, [r4, #0]
 80085c2:	1d18      	adds	r0, r3, #4
 80085c4:	6961      	ldr	r1, [r4, #20]
 80085c6:	6030      	str	r0, [r6, #0]
 80085c8:	062e      	lsls	r6, r5, #24
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	d501      	bpl.n	80085d2 <_printf_i+0x1c2>
 80085ce:	6019      	str	r1, [r3, #0]
 80085d0:	e002      	b.n	80085d8 <_printf_i+0x1c8>
 80085d2:	0668      	lsls	r0, r5, #25
 80085d4:	d5fb      	bpl.n	80085ce <_printf_i+0x1be>
 80085d6:	8019      	strh	r1, [r3, #0]
 80085d8:	2300      	movs	r3, #0
 80085da:	4616      	mov	r6, r2
 80085dc:	6123      	str	r3, [r4, #16]
 80085de:	e7bc      	b.n	800855a <_printf_i+0x14a>
 80085e0:	6833      	ldr	r3, [r6, #0]
 80085e2:	2100      	movs	r1, #0
 80085e4:	1d1a      	adds	r2, r3, #4
 80085e6:	6032      	str	r2, [r6, #0]
 80085e8:	681e      	ldr	r6, [r3, #0]
 80085ea:	6862      	ldr	r2, [r4, #4]
 80085ec:	4630      	mov	r0, r6
 80085ee:	f000 f985 	bl	80088fc <memchr>
 80085f2:	b108      	cbz	r0, 80085f8 <_printf_i+0x1e8>
 80085f4:	1b80      	subs	r0, r0, r6
 80085f6:	6060      	str	r0, [r4, #4]
 80085f8:	6863      	ldr	r3, [r4, #4]
 80085fa:	6123      	str	r3, [r4, #16]
 80085fc:	2300      	movs	r3, #0
 80085fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008602:	e7aa      	b.n	800855a <_printf_i+0x14a>
 8008604:	4632      	mov	r2, r6
 8008606:	4649      	mov	r1, r9
 8008608:	4640      	mov	r0, r8
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	47d0      	blx	sl
 800860e:	3001      	adds	r0, #1
 8008610:	d0ad      	beq.n	800856e <_printf_i+0x15e>
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	079b      	lsls	r3, r3, #30
 8008616:	d413      	bmi.n	8008640 <_printf_i+0x230>
 8008618:	68e0      	ldr	r0, [r4, #12]
 800861a:	9b03      	ldr	r3, [sp, #12]
 800861c:	4298      	cmp	r0, r3
 800861e:	bfb8      	it	lt
 8008620:	4618      	movlt	r0, r3
 8008622:	e7a6      	b.n	8008572 <_printf_i+0x162>
 8008624:	2301      	movs	r3, #1
 8008626:	4632      	mov	r2, r6
 8008628:	4649      	mov	r1, r9
 800862a:	4640      	mov	r0, r8
 800862c:	47d0      	blx	sl
 800862e:	3001      	adds	r0, #1
 8008630:	d09d      	beq.n	800856e <_printf_i+0x15e>
 8008632:	3501      	adds	r5, #1
 8008634:	68e3      	ldr	r3, [r4, #12]
 8008636:	9903      	ldr	r1, [sp, #12]
 8008638:	1a5b      	subs	r3, r3, r1
 800863a:	42ab      	cmp	r3, r5
 800863c:	dcf2      	bgt.n	8008624 <_printf_i+0x214>
 800863e:	e7eb      	b.n	8008618 <_printf_i+0x208>
 8008640:	2500      	movs	r5, #0
 8008642:	f104 0619 	add.w	r6, r4, #25
 8008646:	e7f5      	b.n	8008634 <_printf_i+0x224>
 8008648:	080098c9 	.word	0x080098c9
 800864c:	080098da 	.word	0x080098da

08008650 <__sflush_r>:
 8008650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008656:	0716      	lsls	r6, r2, #28
 8008658:	4605      	mov	r5, r0
 800865a:	460c      	mov	r4, r1
 800865c:	d454      	bmi.n	8008708 <__sflush_r+0xb8>
 800865e:	684b      	ldr	r3, [r1, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	dc02      	bgt.n	800866a <__sflush_r+0x1a>
 8008664:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008666:	2b00      	cmp	r3, #0
 8008668:	dd48      	ble.n	80086fc <__sflush_r+0xac>
 800866a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800866c:	2e00      	cmp	r6, #0
 800866e:	d045      	beq.n	80086fc <__sflush_r+0xac>
 8008670:	2300      	movs	r3, #0
 8008672:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008676:	682f      	ldr	r7, [r5, #0]
 8008678:	6a21      	ldr	r1, [r4, #32]
 800867a:	602b      	str	r3, [r5, #0]
 800867c:	d030      	beq.n	80086e0 <__sflush_r+0x90>
 800867e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	0759      	lsls	r1, r3, #29
 8008684:	d505      	bpl.n	8008692 <__sflush_r+0x42>
 8008686:	6863      	ldr	r3, [r4, #4]
 8008688:	1ad2      	subs	r2, r2, r3
 800868a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800868c:	b10b      	cbz	r3, 8008692 <__sflush_r+0x42>
 800868e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008690:	1ad2      	subs	r2, r2, r3
 8008692:	2300      	movs	r3, #0
 8008694:	4628      	mov	r0, r5
 8008696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008698:	6a21      	ldr	r1, [r4, #32]
 800869a:	47b0      	blx	r6
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	89a3      	ldrh	r3, [r4, #12]
 80086a0:	d106      	bne.n	80086b0 <__sflush_r+0x60>
 80086a2:	6829      	ldr	r1, [r5, #0]
 80086a4:	291d      	cmp	r1, #29
 80086a6:	d82b      	bhi.n	8008700 <__sflush_r+0xb0>
 80086a8:	4a28      	ldr	r2, [pc, #160]	@ (800874c <__sflush_r+0xfc>)
 80086aa:	410a      	asrs	r2, r1
 80086ac:	07d6      	lsls	r6, r2, #31
 80086ae:	d427      	bmi.n	8008700 <__sflush_r+0xb0>
 80086b0:	2200      	movs	r2, #0
 80086b2:	6062      	str	r2, [r4, #4]
 80086b4:	6922      	ldr	r2, [r4, #16]
 80086b6:	04d9      	lsls	r1, r3, #19
 80086b8:	6022      	str	r2, [r4, #0]
 80086ba:	d504      	bpl.n	80086c6 <__sflush_r+0x76>
 80086bc:	1c42      	adds	r2, r0, #1
 80086be:	d101      	bne.n	80086c4 <__sflush_r+0x74>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	b903      	cbnz	r3, 80086c6 <__sflush_r+0x76>
 80086c4:	6560      	str	r0, [r4, #84]	@ 0x54
 80086c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086c8:	602f      	str	r7, [r5, #0]
 80086ca:	b1b9      	cbz	r1, 80086fc <__sflush_r+0xac>
 80086cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086d0:	4299      	cmp	r1, r3
 80086d2:	d002      	beq.n	80086da <__sflush_r+0x8a>
 80086d4:	4628      	mov	r0, r5
 80086d6:	f7ff fa9b 	bl	8007c10 <_free_r>
 80086da:	2300      	movs	r3, #0
 80086dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80086de:	e00d      	b.n	80086fc <__sflush_r+0xac>
 80086e0:	2301      	movs	r3, #1
 80086e2:	4628      	mov	r0, r5
 80086e4:	47b0      	blx	r6
 80086e6:	4602      	mov	r2, r0
 80086e8:	1c50      	adds	r0, r2, #1
 80086ea:	d1c9      	bne.n	8008680 <__sflush_r+0x30>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0c6      	beq.n	8008680 <__sflush_r+0x30>
 80086f2:	2b1d      	cmp	r3, #29
 80086f4:	d001      	beq.n	80086fa <__sflush_r+0xaa>
 80086f6:	2b16      	cmp	r3, #22
 80086f8:	d11d      	bne.n	8008736 <__sflush_r+0xe6>
 80086fa:	602f      	str	r7, [r5, #0]
 80086fc:	2000      	movs	r0, #0
 80086fe:	e021      	b.n	8008744 <__sflush_r+0xf4>
 8008700:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008704:	b21b      	sxth	r3, r3
 8008706:	e01a      	b.n	800873e <__sflush_r+0xee>
 8008708:	690f      	ldr	r7, [r1, #16]
 800870a:	2f00      	cmp	r7, #0
 800870c:	d0f6      	beq.n	80086fc <__sflush_r+0xac>
 800870e:	0793      	lsls	r3, r2, #30
 8008710:	bf18      	it	ne
 8008712:	2300      	movne	r3, #0
 8008714:	680e      	ldr	r6, [r1, #0]
 8008716:	bf08      	it	eq
 8008718:	694b      	ldreq	r3, [r1, #20]
 800871a:	1bf6      	subs	r6, r6, r7
 800871c:	600f      	str	r7, [r1, #0]
 800871e:	608b      	str	r3, [r1, #8]
 8008720:	2e00      	cmp	r6, #0
 8008722:	ddeb      	ble.n	80086fc <__sflush_r+0xac>
 8008724:	4633      	mov	r3, r6
 8008726:	463a      	mov	r2, r7
 8008728:	4628      	mov	r0, r5
 800872a:	6a21      	ldr	r1, [r4, #32]
 800872c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008730:	47e0      	blx	ip
 8008732:	2800      	cmp	r0, #0
 8008734:	dc07      	bgt.n	8008746 <__sflush_r+0xf6>
 8008736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800873a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800873e:	f04f 30ff 	mov.w	r0, #4294967295
 8008742:	81a3      	strh	r3, [r4, #12]
 8008744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008746:	4407      	add	r7, r0
 8008748:	1a36      	subs	r6, r6, r0
 800874a:	e7e9      	b.n	8008720 <__sflush_r+0xd0>
 800874c:	dfbffffe 	.word	0xdfbffffe

08008750 <_fflush_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	690b      	ldr	r3, [r1, #16]
 8008754:	4605      	mov	r5, r0
 8008756:	460c      	mov	r4, r1
 8008758:	b913      	cbnz	r3, 8008760 <_fflush_r+0x10>
 800875a:	2500      	movs	r5, #0
 800875c:	4628      	mov	r0, r5
 800875e:	bd38      	pop	{r3, r4, r5, pc}
 8008760:	b118      	cbz	r0, 800876a <_fflush_r+0x1a>
 8008762:	6a03      	ldr	r3, [r0, #32]
 8008764:	b90b      	cbnz	r3, 800876a <_fflush_r+0x1a>
 8008766:	f7ff f825 	bl	80077b4 <__sinit>
 800876a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0f3      	beq.n	800875a <_fflush_r+0xa>
 8008772:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008774:	07d0      	lsls	r0, r2, #31
 8008776:	d404      	bmi.n	8008782 <_fflush_r+0x32>
 8008778:	0599      	lsls	r1, r3, #22
 800877a:	d402      	bmi.n	8008782 <_fflush_r+0x32>
 800877c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800877e:	f7ff fa44 	bl	8007c0a <__retarget_lock_acquire_recursive>
 8008782:	4628      	mov	r0, r5
 8008784:	4621      	mov	r1, r4
 8008786:	f7ff ff63 	bl	8008650 <__sflush_r>
 800878a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800878c:	4605      	mov	r5, r0
 800878e:	07da      	lsls	r2, r3, #31
 8008790:	d4e4      	bmi.n	800875c <_fflush_r+0xc>
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	059b      	lsls	r3, r3, #22
 8008796:	d4e1      	bmi.n	800875c <_fflush_r+0xc>
 8008798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800879a:	f7ff fa37 	bl	8007c0c <__retarget_lock_release_recursive>
 800879e:	e7dd      	b.n	800875c <_fflush_r+0xc>

080087a0 <__swhatbuf_r>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	460c      	mov	r4, r1
 80087a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a8:	4615      	mov	r5, r2
 80087aa:	2900      	cmp	r1, #0
 80087ac:	461e      	mov	r6, r3
 80087ae:	b096      	sub	sp, #88	@ 0x58
 80087b0:	da0c      	bge.n	80087cc <__swhatbuf_r+0x2c>
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	2100      	movs	r1, #0
 80087b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80087ba:	bf14      	ite	ne
 80087bc:	2340      	movne	r3, #64	@ 0x40
 80087be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80087c2:	2000      	movs	r0, #0
 80087c4:	6031      	str	r1, [r6, #0]
 80087c6:	602b      	str	r3, [r5, #0]
 80087c8:	b016      	add	sp, #88	@ 0x58
 80087ca:	bd70      	pop	{r4, r5, r6, pc}
 80087cc:	466a      	mov	r2, sp
 80087ce:	f000 f863 	bl	8008898 <_fstat_r>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	dbed      	blt.n	80087b2 <__swhatbuf_r+0x12>
 80087d6:	9901      	ldr	r1, [sp, #4]
 80087d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087e0:	4259      	negs	r1, r3
 80087e2:	4159      	adcs	r1, r3
 80087e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087e8:	e7eb      	b.n	80087c2 <__swhatbuf_r+0x22>

080087ea <__smakebuf_r>:
 80087ea:	898b      	ldrh	r3, [r1, #12]
 80087ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ee:	079d      	lsls	r5, r3, #30
 80087f0:	4606      	mov	r6, r0
 80087f2:	460c      	mov	r4, r1
 80087f4:	d507      	bpl.n	8008806 <__smakebuf_r+0x1c>
 80087f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087fa:	6023      	str	r3, [r4, #0]
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	2301      	movs	r3, #1
 8008800:	6163      	str	r3, [r4, #20]
 8008802:	b003      	add	sp, #12
 8008804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008806:	466a      	mov	r2, sp
 8008808:	ab01      	add	r3, sp, #4
 800880a:	f7ff ffc9 	bl	80087a0 <__swhatbuf_r>
 800880e:	9f00      	ldr	r7, [sp, #0]
 8008810:	4605      	mov	r5, r0
 8008812:	4639      	mov	r1, r7
 8008814:	4630      	mov	r0, r6
 8008816:	f7ff fa65 	bl	8007ce4 <_malloc_r>
 800881a:	b948      	cbnz	r0, 8008830 <__smakebuf_r+0x46>
 800881c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008820:	059a      	lsls	r2, r3, #22
 8008822:	d4ee      	bmi.n	8008802 <__smakebuf_r+0x18>
 8008824:	f023 0303 	bic.w	r3, r3, #3
 8008828:	f043 0302 	orr.w	r3, r3, #2
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	e7e2      	b.n	80087f6 <__smakebuf_r+0xc>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	9b01      	ldr	r3, [sp, #4]
 800883e:	6020      	str	r0, [r4, #0]
 8008840:	b15b      	cbz	r3, 800885a <__smakebuf_r+0x70>
 8008842:	4630      	mov	r0, r6
 8008844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008848:	f000 f838 	bl	80088bc <_isatty_r>
 800884c:	b128      	cbz	r0, 800885a <__smakebuf_r+0x70>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f023 0303 	bic.w	r3, r3, #3
 8008854:	f043 0301 	orr.w	r3, r3, #1
 8008858:	81a3      	strh	r3, [r4, #12]
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	431d      	orrs	r5, r3
 800885e:	81a5      	strh	r5, [r4, #12]
 8008860:	e7cf      	b.n	8008802 <__smakebuf_r+0x18>

08008862 <memmove>:
 8008862:	4288      	cmp	r0, r1
 8008864:	b510      	push	{r4, lr}
 8008866:	eb01 0402 	add.w	r4, r1, r2
 800886a:	d902      	bls.n	8008872 <memmove+0x10>
 800886c:	4284      	cmp	r4, r0
 800886e:	4623      	mov	r3, r4
 8008870:	d807      	bhi.n	8008882 <memmove+0x20>
 8008872:	1e43      	subs	r3, r0, #1
 8008874:	42a1      	cmp	r1, r4
 8008876:	d008      	beq.n	800888a <memmove+0x28>
 8008878:	f811 2b01 	ldrb.w	r2, [r1], #1
 800887c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008880:	e7f8      	b.n	8008874 <memmove+0x12>
 8008882:	4601      	mov	r1, r0
 8008884:	4402      	add	r2, r0
 8008886:	428a      	cmp	r2, r1
 8008888:	d100      	bne.n	800888c <memmove+0x2a>
 800888a:	bd10      	pop	{r4, pc}
 800888c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008890:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008894:	e7f7      	b.n	8008886 <memmove+0x24>
	...

08008898 <_fstat_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	2300      	movs	r3, #0
 800889c:	4d06      	ldr	r5, [pc, #24]	@ (80088b8 <_fstat_r+0x20>)
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	4611      	mov	r1, r2
 80088a4:	602b      	str	r3, [r5, #0]
 80088a6:	f7f9 fb1b 	bl	8001ee0 <_fstat>
 80088aa:	1c43      	adds	r3, r0, #1
 80088ac:	d102      	bne.n	80088b4 <_fstat_r+0x1c>
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	b103      	cbz	r3, 80088b4 <_fstat_r+0x1c>
 80088b2:	6023      	str	r3, [r4, #0]
 80088b4:	bd38      	pop	{r3, r4, r5, pc}
 80088b6:	bf00      	nop
 80088b8:	20000580 	.word	0x20000580

080088bc <_isatty_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	2300      	movs	r3, #0
 80088c0:	4d05      	ldr	r5, [pc, #20]	@ (80088d8 <_isatty_r+0x1c>)
 80088c2:	4604      	mov	r4, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	602b      	str	r3, [r5, #0]
 80088c8:	f7f9 fb19 	bl	8001efe <_isatty>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_isatty_r+0x1a>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_isatty_r+0x1a>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	20000580 	.word	0x20000580

080088dc <_sbrk_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	2300      	movs	r3, #0
 80088e0:	4d05      	ldr	r5, [pc, #20]	@ (80088f8 <_sbrk_r+0x1c>)
 80088e2:	4604      	mov	r4, r0
 80088e4:	4608      	mov	r0, r1
 80088e6:	602b      	str	r3, [r5, #0]
 80088e8:	f7f9 fb20 	bl	8001f2c <_sbrk>
 80088ec:	1c43      	adds	r3, r0, #1
 80088ee:	d102      	bne.n	80088f6 <_sbrk_r+0x1a>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	b103      	cbz	r3, 80088f6 <_sbrk_r+0x1a>
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	20000580 	.word	0x20000580

080088fc <memchr>:
 80088fc:	4603      	mov	r3, r0
 80088fe:	b510      	push	{r4, lr}
 8008900:	b2c9      	uxtb	r1, r1
 8008902:	4402      	add	r2, r0
 8008904:	4293      	cmp	r3, r2
 8008906:	4618      	mov	r0, r3
 8008908:	d101      	bne.n	800890e <memchr+0x12>
 800890a:	2000      	movs	r0, #0
 800890c:	e003      	b.n	8008916 <memchr+0x1a>
 800890e:	7804      	ldrb	r4, [r0, #0]
 8008910:	3301      	adds	r3, #1
 8008912:	428c      	cmp	r4, r1
 8008914:	d1f6      	bne.n	8008904 <memchr+0x8>
 8008916:	bd10      	pop	{r4, pc}

08008918 <memcpy>:
 8008918:	440a      	add	r2, r1
 800891a:	4291      	cmp	r1, r2
 800891c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008920:	d100      	bne.n	8008924 <memcpy+0xc>
 8008922:	4770      	bx	lr
 8008924:	b510      	push	{r4, lr}
 8008926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800892a:	4291      	cmp	r1, r2
 800892c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008930:	d1f9      	bne.n	8008926 <memcpy+0xe>
 8008932:	bd10      	pop	{r4, pc}

08008934 <_realloc_r>:
 8008934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008938:	4680      	mov	r8, r0
 800893a:	4615      	mov	r5, r2
 800893c:	460c      	mov	r4, r1
 800893e:	b921      	cbnz	r1, 800894a <_realloc_r+0x16>
 8008940:	4611      	mov	r1, r2
 8008942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008946:	f7ff b9cd 	b.w	8007ce4 <_malloc_r>
 800894a:	b92a      	cbnz	r2, 8008958 <_realloc_r+0x24>
 800894c:	f7ff f960 	bl	8007c10 <_free_r>
 8008950:	2400      	movs	r4, #0
 8008952:	4620      	mov	r0, r4
 8008954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008958:	f000 f81a 	bl	8008990 <_malloc_usable_size_r>
 800895c:	4285      	cmp	r5, r0
 800895e:	4606      	mov	r6, r0
 8008960:	d802      	bhi.n	8008968 <_realloc_r+0x34>
 8008962:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008966:	d8f4      	bhi.n	8008952 <_realloc_r+0x1e>
 8008968:	4629      	mov	r1, r5
 800896a:	4640      	mov	r0, r8
 800896c:	f7ff f9ba 	bl	8007ce4 <_malloc_r>
 8008970:	4607      	mov	r7, r0
 8008972:	2800      	cmp	r0, #0
 8008974:	d0ec      	beq.n	8008950 <_realloc_r+0x1c>
 8008976:	42b5      	cmp	r5, r6
 8008978:	462a      	mov	r2, r5
 800897a:	4621      	mov	r1, r4
 800897c:	bf28      	it	cs
 800897e:	4632      	movcs	r2, r6
 8008980:	f7ff ffca 	bl	8008918 <memcpy>
 8008984:	4621      	mov	r1, r4
 8008986:	4640      	mov	r0, r8
 8008988:	f7ff f942 	bl	8007c10 <_free_r>
 800898c:	463c      	mov	r4, r7
 800898e:	e7e0      	b.n	8008952 <_realloc_r+0x1e>

08008990 <_malloc_usable_size_r>:
 8008990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008994:	1f18      	subs	r0, r3, #4
 8008996:	2b00      	cmp	r3, #0
 8008998:	bfbc      	itt	lt
 800899a:	580b      	ldrlt	r3, [r1, r0]
 800899c:	18c0      	addlt	r0, r0, r3
 800899e:	4770      	bx	lr

080089a0 <pow>:
 80089a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089a4:	4614      	mov	r4, r2
 80089a6:	461d      	mov	r5, r3
 80089a8:	4680      	mov	r8, r0
 80089aa:	4689      	mov	r9, r1
 80089ac:	f000 f898 	bl	8008ae0 <__ieee754_pow>
 80089b0:	4622      	mov	r2, r4
 80089b2:	4606      	mov	r6, r0
 80089b4:	460f      	mov	r7, r1
 80089b6:	462b      	mov	r3, r5
 80089b8:	4620      	mov	r0, r4
 80089ba:	4629      	mov	r1, r5
 80089bc:	f7f8 f836 	bl	8000a2c <__aeabi_dcmpun>
 80089c0:	bbc8      	cbnz	r0, 8008a36 <pow+0x96>
 80089c2:	2200      	movs	r2, #0
 80089c4:	2300      	movs	r3, #0
 80089c6:	4640      	mov	r0, r8
 80089c8:	4649      	mov	r1, r9
 80089ca:	f7f7 fffd 	bl	80009c8 <__aeabi_dcmpeq>
 80089ce:	b1b8      	cbz	r0, 8008a00 <pow+0x60>
 80089d0:	2200      	movs	r2, #0
 80089d2:	2300      	movs	r3, #0
 80089d4:	4620      	mov	r0, r4
 80089d6:	4629      	mov	r1, r5
 80089d8:	f7f7 fff6 	bl	80009c8 <__aeabi_dcmpeq>
 80089dc:	2800      	cmp	r0, #0
 80089de:	d141      	bne.n	8008a64 <pow+0xc4>
 80089e0:	4620      	mov	r0, r4
 80089e2:	4629      	mov	r1, r5
 80089e4:	f000 f844 	bl	8008a70 <finite>
 80089e8:	b328      	cbz	r0, 8008a36 <pow+0x96>
 80089ea:	2200      	movs	r2, #0
 80089ec:	2300      	movs	r3, #0
 80089ee:	4620      	mov	r0, r4
 80089f0:	4629      	mov	r1, r5
 80089f2:	f7f7 fff3 	bl	80009dc <__aeabi_dcmplt>
 80089f6:	b1f0      	cbz	r0, 8008a36 <pow+0x96>
 80089f8:	f7ff f8dc 	bl	8007bb4 <__errno>
 80089fc:	2322      	movs	r3, #34	@ 0x22
 80089fe:	e019      	b.n	8008a34 <pow+0x94>
 8008a00:	4630      	mov	r0, r6
 8008a02:	4639      	mov	r1, r7
 8008a04:	f000 f834 	bl	8008a70 <finite>
 8008a08:	b9c8      	cbnz	r0, 8008a3e <pow+0x9e>
 8008a0a:	4640      	mov	r0, r8
 8008a0c:	4649      	mov	r1, r9
 8008a0e:	f000 f82f 	bl	8008a70 <finite>
 8008a12:	b1a0      	cbz	r0, 8008a3e <pow+0x9e>
 8008a14:	4620      	mov	r0, r4
 8008a16:	4629      	mov	r1, r5
 8008a18:	f000 f82a 	bl	8008a70 <finite>
 8008a1c:	b178      	cbz	r0, 8008a3e <pow+0x9e>
 8008a1e:	4632      	mov	r2, r6
 8008a20:	463b      	mov	r3, r7
 8008a22:	4630      	mov	r0, r6
 8008a24:	4639      	mov	r1, r7
 8008a26:	f7f8 f801 	bl	8000a2c <__aeabi_dcmpun>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d0e4      	beq.n	80089f8 <pow+0x58>
 8008a2e:	f7ff f8c1 	bl	8007bb4 <__errno>
 8008a32:	2321      	movs	r3, #33	@ 0x21
 8008a34:	6003      	str	r3, [r0, #0]
 8008a36:	4630      	mov	r0, r6
 8008a38:	4639      	mov	r1, r7
 8008a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2300      	movs	r3, #0
 8008a42:	4630      	mov	r0, r6
 8008a44:	4639      	mov	r1, r7
 8008a46:	f7f7 ffbf 	bl	80009c8 <__aeabi_dcmpeq>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d0f3      	beq.n	8008a36 <pow+0x96>
 8008a4e:	4640      	mov	r0, r8
 8008a50:	4649      	mov	r1, r9
 8008a52:	f000 f80d 	bl	8008a70 <finite>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d0ed      	beq.n	8008a36 <pow+0x96>
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f000 f807 	bl	8008a70 <finite>
 8008a62:	e7c8      	b.n	80089f6 <pow+0x56>
 8008a64:	2600      	movs	r6, #0
 8008a66:	4f01      	ldr	r7, [pc, #4]	@ (8008a6c <pow+0xcc>)
 8008a68:	e7e5      	b.n	8008a36 <pow+0x96>
 8008a6a:	bf00      	nop
 8008a6c:	3ff00000 	.word	0x3ff00000

08008a70 <finite>:
 8008a70:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8008a74:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008a78:	0fc0      	lsrs	r0, r0, #31
 8008a7a:	4770      	bx	lr

08008a7c <trunc>:
 8008a7c:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
 8008a80:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8008a84:	f2a5 34ff 	subw	r4, r5, #1023	@ 0x3ff
 8008a88:	2c13      	cmp	r4, #19
 8008a8a:	4683      	mov	fp, r0
 8008a8c:	468c      	mov	ip, r1
 8008a8e:	dc13      	bgt.n	8008ab8 <trunc+0x3c>
 8008a90:	2c00      	cmp	r4, #0
 8008a92:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8008a96:	da06      	bge.n	8008aa6 <trunc+0x2a>
 8008a98:	2200      	movs	r2, #0
 8008a9a:	46ac      	mov	ip, r5
 8008a9c:	4693      	mov	fp, r2
 8008a9e:	4658      	mov	r0, fp
 8008aa0:	4661      	mov	r1, ip
 8008aa2:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8008adc <trunc+0x60>)
 8008aaa:	4123      	asrs	r3, r4
 8008aac:	400b      	ands	r3, r1
 8008aae:	ea43 0105 	orr.w	r1, r3, r5
 8008ab2:	4683      	mov	fp, r0
 8008ab4:	468c      	mov	ip, r1
 8008ab6:	e7f2      	b.n	8008a9e <trunc+0x22>
 8008ab8:	2c33      	cmp	r4, #51	@ 0x33
 8008aba:	dd07      	ble.n	8008acc <trunc+0x50>
 8008abc:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 8008ac0:	d1ed      	bne.n	8008a9e <trunc+0x22>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	f7f7 fb61 	bl	800018c <__adddf3>
 8008aca:	e7f2      	b.n	8008ab2 <trunc+0x36>
 8008acc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad0:	f2a5 4513 	subw	r5, r5, #1043	@ 0x413
 8008ad4:	40eb      	lsrs	r3, r5
 8008ad6:	ea20 0003 	bic.w	r0, r0, r3
 8008ada:	e7ea      	b.n	8008ab2 <trunc+0x36>
 8008adc:	fff00000 	.word	0xfff00000

08008ae0 <__ieee754_pow>:
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	b091      	sub	sp, #68	@ 0x44
 8008ae6:	e9cd 2300 	strd	r2, r3, [sp]
 8008aea:	468b      	mov	fp, r1
 8008aec:	e9dd 1800 	ldrd	r1, r8, [sp]
 8008af0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8008af4:	4682      	mov	sl, r0
 8008af6:	ea57 0001 	orrs.w	r0, r7, r1
 8008afa:	d112      	bne.n	8008b22 <__ieee754_pow+0x42>
 8008afc:	4653      	mov	r3, sl
 8008afe:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8008b02:	18db      	adds	r3, r3, r3
 8008b04:	4152      	adcs	r2, r2
 8008b06:	4298      	cmp	r0, r3
 8008b08:	4b91      	ldr	r3, [pc, #580]	@ (8008d50 <__ieee754_pow+0x270>)
 8008b0a:	4193      	sbcs	r3, r2
 8008b0c:	f080 84ce 	bcs.w	80094ac <__ieee754_pow+0x9cc>
 8008b10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b14:	4650      	mov	r0, sl
 8008b16:	4659      	mov	r1, fp
 8008b18:	f7f7 fb38 	bl	800018c <__adddf3>
 8008b1c:	b011      	add	sp, #68	@ 0x44
 8008b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b22:	4b8c      	ldr	r3, [pc, #560]	@ (8008d54 <__ieee754_pow+0x274>)
 8008b24:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8008b28:	429e      	cmp	r6, r3
 8008b2a:	465d      	mov	r5, fp
 8008b2c:	46d1      	mov	r9, sl
 8008b2e:	d807      	bhi.n	8008b40 <__ieee754_pow+0x60>
 8008b30:	d102      	bne.n	8008b38 <__ieee754_pow+0x58>
 8008b32:	f1ba 0f00 	cmp.w	sl, #0
 8008b36:	d1eb      	bne.n	8008b10 <__ieee754_pow+0x30>
 8008b38:	429f      	cmp	r7, r3
 8008b3a:	d801      	bhi.n	8008b40 <__ieee754_pow+0x60>
 8008b3c:	d10f      	bne.n	8008b5e <__ieee754_pow+0x7e>
 8008b3e:	b171      	cbz	r1, 8008b5e <__ieee754_pow+0x7e>
 8008b40:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008b44:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008b48:	ea55 0509 	orrs.w	r5, r5, r9
 8008b4c:	d1e0      	bne.n	8008b10 <__ieee754_pow+0x30>
 8008b4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b52:	18db      	adds	r3, r3, r3
 8008b54:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008b58:	4152      	adcs	r2, r2
 8008b5a:	429d      	cmp	r5, r3
 8008b5c:	e7d4      	b.n	8008b08 <__ieee754_pow+0x28>
 8008b5e:	2d00      	cmp	r5, #0
 8008b60:	4633      	mov	r3, r6
 8008b62:	da39      	bge.n	8008bd8 <__ieee754_pow+0xf8>
 8008b64:	4a7c      	ldr	r2, [pc, #496]	@ (8008d58 <__ieee754_pow+0x278>)
 8008b66:	4297      	cmp	r7, r2
 8008b68:	d84e      	bhi.n	8008c08 <__ieee754_pow+0x128>
 8008b6a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008b6e:	4297      	cmp	r7, r2
 8008b70:	f240 84ab 	bls.w	80094ca <__ieee754_pow+0x9ea>
 8008b74:	153a      	asrs	r2, r7, #20
 8008b76:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008b7a:	2a14      	cmp	r2, #20
 8008b7c:	dd0f      	ble.n	8008b9e <__ieee754_pow+0xbe>
 8008b7e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008b82:	fa21 f402 	lsr.w	r4, r1, r2
 8008b86:	fa04 f202 	lsl.w	r2, r4, r2
 8008b8a:	428a      	cmp	r2, r1
 8008b8c:	f040 849d 	bne.w	80094ca <__ieee754_pow+0x9ea>
 8008b90:	f004 0401 	and.w	r4, r4, #1
 8008b94:	f1c4 0402 	rsb	r4, r4, #2
 8008b98:	2900      	cmp	r1, #0
 8008b9a:	d15a      	bne.n	8008c52 <__ieee754_pow+0x172>
 8008b9c:	e00e      	b.n	8008bbc <__ieee754_pow+0xdc>
 8008b9e:	2900      	cmp	r1, #0
 8008ba0:	d156      	bne.n	8008c50 <__ieee754_pow+0x170>
 8008ba2:	f1c2 0214 	rsb	r2, r2, #20
 8008ba6:	fa47 f402 	asr.w	r4, r7, r2
 8008baa:	fa04 f202 	lsl.w	r2, r4, r2
 8008bae:	42ba      	cmp	r2, r7
 8008bb0:	f040 8488 	bne.w	80094c4 <__ieee754_pow+0x9e4>
 8008bb4:	f004 0401 	and.w	r4, r4, #1
 8008bb8:	f1c4 0402 	rsb	r4, r4, #2
 8008bbc:	4a67      	ldr	r2, [pc, #412]	@ (8008d5c <__ieee754_pow+0x27c>)
 8008bbe:	4297      	cmp	r7, r2
 8008bc0:	d130      	bne.n	8008c24 <__ieee754_pow+0x144>
 8008bc2:	f1b8 0f00 	cmp.w	r8, #0
 8008bc6:	f280 8479 	bge.w	80094bc <__ieee754_pow+0x9dc>
 8008bca:	4652      	mov	r2, sl
 8008bcc:	465b      	mov	r3, fp
 8008bce:	2000      	movs	r0, #0
 8008bd0:	4962      	ldr	r1, [pc, #392]	@ (8008d5c <__ieee754_pow+0x27c>)
 8008bd2:	f7f7 fdbb 	bl	800074c <__aeabi_ddiv>
 8008bd6:	e7a1      	b.n	8008b1c <__ieee754_pow+0x3c>
 8008bd8:	2400      	movs	r4, #0
 8008bda:	2900      	cmp	r1, #0
 8008bdc:	d139      	bne.n	8008c52 <__ieee754_pow+0x172>
 8008bde:	4a5d      	ldr	r2, [pc, #372]	@ (8008d54 <__ieee754_pow+0x274>)
 8008be0:	4297      	cmp	r7, r2
 8008be2:	d1eb      	bne.n	8008bbc <__ieee754_pow+0xdc>
 8008be4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8008be8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8008bec:	ea53 0309 	orrs.w	r3, r3, r9
 8008bf0:	f000 845c 	beq.w	80094ac <__ieee754_pow+0x9cc>
 8008bf4:	4b5a      	ldr	r3, [pc, #360]	@ (8008d60 <__ieee754_pow+0x280>)
 8008bf6:	429e      	cmp	r6, r3
 8008bf8:	d908      	bls.n	8008c0c <__ieee754_pow+0x12c>
 8008bfa:	f1b8 0f00 	cmp.w	r8, #0
 8008bfe:	f2c0 8459 	blt.w	80094b4 <__ieee754_pow+0x9d4>
 8008c02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c06:	e789      	b.n	8008b1c <__ieee754_pow+0x3c>
 8008c08:	2402      	movs	r4, #2
 8008c0a:	e7e6      	b.n	8008bda <__ieee754_pow+0xfa>
 8008c0c:	f1b8 0f00 	cmp.w	r8, #0
 8008c10:	f04f 0000 	mov.w	r0, #0
 8008c14:	f04f 0100 	mov.w	r1, #0
 8008c18:	da80      	bge.n	8008b1c <__ieee754_pow+0x3c>
 8008c1a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008c1e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008c22:	e77b      	b.n	8008b1c <__ieee754_pow+0x3c>
 8008c24:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8008c28:	d106      	bne.n	8008c38 <__ieee754_pow+0x158>
 8008c2a:	4652      	mov	r2, sl
 8008c2c:	465b      	mov	r3, fp
 8008c2e:	4650      	mov	r0, sl
 8008c30:	4659      	mov	r1, fp
 8008c32:	f7f7 fc61 	bl	80004f8 <__aeabi_dmul>
 8008c36:	e771      	b.n	8008b1c <__ieee754_pow+0x3c>
 8008c38:	4a4a      	ldr	r2, [pc, #296]	@ (8008d64 <__ieee754_pow+0x284>)
 8008c3a:	4590      	cmp	r8, r2
 8008c3c:	d109      	bne.n	8008c52 <__ieee754_pow+0x172>
 8008c3e:	2d00      	cmp	r5, #0
 8008c40:	db07      	blt.n	8008c52 <__ieee754_pow+0x172>
 8008c42:	4650      	mov	r0, sl
 8008c44:	4659      	mov	r1, fp
 8008c46:	b011      	add	sp, #68	@ 0x44
 8008c48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	f000 bd12 	b.w	8009674 <__ieee754_sqrt>
 8008c50:	2400      	movs	r4, #0
 8008c52:	4650      	mov	r0, sl
 8008c54:	4659      	mov	r1, fp
 8008c56:	9302      	str	r3, [sp, #8]
 8008c58:	f000 fc6a 	bl	8009530 <fabs>
 8008c5c:	9b02      	ldr	r3, [sp, #8]
 8008c5e:	f1b9 0f00 	cmp.w	r9, #0
 8008c62:	d127      	bne.n	8008cb4 <__ieee754_pow+0x1d4>
 8008c64:	4a3d      	ldr	r2, [pc, #244]	@ (8008d5c <__ieee754_pow+0x27c>)
 8008c66:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8008c6a:	4594      	cmp	ip, r2
 8008c6c:	d000      	beq.n	8008c70 <__ieee754_pow+0x190>
 8008c6e:	bb0e      	cbnz	r6, 8008cb4 <__ieee754_pow+0x1d4>
 8008c70:	f1b8 0f00 	cmp.w	r8, #0
 8008c74:	da05      	bge.n	8008c82 <__ieee754_pow+0x1a2>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	4937      	ldr	r1, [pc, #220]	@ (8008d5c <__ieee754_pow+0x27c>)
 8008c7e:	f7f7 fd65 	bl	800074c <__aeabi_ddiv>
 8008c82:	2d00      	cmp	r5, #0
 8008c84:	f6bf af4a 	bge.w	8008b1c <__ieee754_pow+0x3c>
 8008c88:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8008c8c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8008c90:	4326      	orrs	r6, r4
 8008c92:	d108      	bne.n	8008ca6 <__ieee754_pow+0x1c6>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	f7f7 fa74 	bl	8000188 <__aeabi_dsub>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	e795      	b.n	8008bd2 <__ieee754_pow+0xf2>
 8008ca6:	2c01      	cmp	r4, #1
 8008ca8:	f47f af38 	bne.w	8008b1c <__ieee754_pow+0x3c>
 8008cac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	e733      	b.n	8008b1c <__ieee754_pow+0x3c>
 8008cb4:	0fea      	lsrs	r2, r5, #31
 8008cb6:	3a01      	subs	r2, #1
 8008cb8:	ea52 0c04 	orrs.w	ip, r2, r4
 8008cbc:	d102      	bne.n	8008cc4 <__ieee754_pow+0x1e4>
 8008cbe:	4652      	mov	r2, sl
 8008cc0:	465b      	mov	r3, fp
 8008cc2:	e7e9      	b.n	8008c98 <__ieee754_pow+0x1b8>
 8008cc4:	f04f 0900 	mov.w	r9, #0
 8008cc8:	3c01      	subs	r4, #1
 8008cca:	4314      	orrs	r4, r2
 8008ccc:	bf14      	ite	ne
 8008cce:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8008d5c <__ieee754_pow+0x27c>
 8008cd2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8008d68 <__ieee754_pow+0x288>
 8008cd6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8008cda:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8008cde:	f240 8107 	bls.w	8008ef0 <__ieee754_pow+0x410>
 8008ce2:	4b22      	ldr	r3, [pc, #136]	@ (8008d6c <__ieee754_pow+0x28c>)
 8008ce4:	429f      	cmp	r7, r3
 8008ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8008d60 <__ieee754_pow+0x280>)
 8008ce8:	d913      	bls.n	8008d12 <__ieee754_pow+0x232>
 8008cea:	429e      	cmp	r6, r3
 8008cec:	d808      	bhi.n	8008d00 <__ieee754_pow+0x220>
 8008cee:	f1b8 0f00 	cmp.w	r8, #0
 8008cf2:	da08      	bge.n	8008d06 <__ieee754_pow+0x226>
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	b011      	add	sp, #68	@ 0x44
 8008cf8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfc:	f000 bcb4 	b.w	8009668 <__math_oflow>
 8008d00:	f1b8 0f00 	cmp.w	r8, #0
 8008d04:	dcf6      	bgt.n	8008cf4 <__ieee754_pow+0x214>
 8008d06:	2000      	movs	r0, #0
 8008d08:	b011      	add	sp, #68	@ 0x44
 8008d0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0e:	f000 bca6 	b.w	800965e <__math_uflow>
 8008d12:	429e      	cmp	r6, r3
 8008d14:	d20c      	bcs.n	8008d30 <__ieee754_pow+0x250>
 8008d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f7f7 fe5d 	bl	80009dc <__aeabi_dcmplt>
 8008d22:	3800      	subs	r0, #0
 8008d24:	bf18      	it	ne
 8008d26:	2001      	movne	r0, #1
 8008d28:	f1b8 0f00 	cmp.w	r8, #0
 8008d2c:	daec      	bge.n	8008d08 <__ieee754_pow+0x228>
 8008d2e:	e7e2      	b.n	8008cf6 <__ieee754_pow+0x216>
 8008d30:	4b0a      	ldr	r3, [pc, #40]	@ (8008d5c <__ieee754_pow+0x27c>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	429e      	cmp	r6, r3
 8008d36:	d91b      	bls.n	8008d70 <__ieee754_pow+0x290>
 8008d38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f7f7 fe4d 	bl	80009dc <__aeabi_dcmplt>
 8008d42:	3800      	subs	r0, #0
 8008d44:	bf18      	it	ne
 8008d46:	2001      	movne	r0, #1
 8008d48:	f1b8 0f00 	cmp.w	r8, #0
 8008d4c:	dcd3      	bgt.n	8008cf6 <__ieee754_pow+0x216>
 8008d4e:	e7db      	b.n	8008d08 <__ieee754_pow+0x228>
 8008d50:	fff00000 	.word	0xfff00000
 8008d54:	7ff00000 	.word	0x7ff00000
 8008d58:	433fffff 	.word	0x433fffff
 8008d5c:	3ff00000 	.word	0x3ff00000
 8008d60:	3fefffff 	.word	0x3fefffff
 8008d64:	3fe00000 	.word	0x3fe00000
 8008d68:	bff00000 	.word	0xbff00000
 8008d6c:	43f00000 	.word	0x43f00000
 8008d70:	4b5b      	ldr	r3, [pc, #364]	@ (8008ee0 <__ieee754_pow+0x400>)
 8008d72:	f7f7 fa09 	bl	8000188 <__aeabi_dsub>
 8008d76:	a352      	add	r3, pc, #328	@ (adr r3, 8008ec0 <__ieee754_pow+0x3e0>)
 8008d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	460d      	mov	r5, r1
 8008d80:	f7f7 fbba 	bl	80004f8 <__aeabi_dmul>
 8008d84:	a350      	add	r3, pc, #320	@ (adr r3, 8008ec8 <__ieee754_pow+0x3e8>)
 8008d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	460f      	mov	r7, r1
 8008d8e:	4620      	mov	r0, r4
 8008d90:	4629      	mov	r1, r5
 8008d92:	f7f7 fbb1 	bl	80004f8 <__aeabi_dmul>
 8008d96:	2200      	movs	r2, #0
 8008d98:	4682      	mov	sl, r0
 8008d9a:	468b      	mov	fp, r1
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4b50      	ldr	r3, [pc, #320]	@ (8008ee4 <__ieee754_pow+0x404>)
 8008da2:	f7f7 fba9 	bl	80004f8 <__aeabi_dmul>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	a149      	add	r1, pc, #292	@ (adr r1, 8008ed0 <__ieee754_pow+0x3f0>)
 8008dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008db0:	f7f7 f9ea 	bl	8000188 <__aeabi_dsub>
 8008db4:	4622      	mov	r2, r4
 8008db6:	462b      	mov	r3, r5
 8008db8:	f7f7 fb9e 	bl	80004f8 <__aeabi_dmul>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	4949      	ldr	r1, [pc, #292]	@ (8008ee8 <__ieee754_pow+0x408>)
 8008dc4:	f7f7 f9e0 	bl	8000188 <__aeabi_dsub>
 8008dc8:	4622      	mov	r2, r4
 8008dca:	4680      	mov	r8, r0
 8008dcc:	4689      	mov	r9, r1
 8008dce:	462b      	mov	r3, r5
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	f7f7 fb90 	bl	80004f8 <__aeabi_dmul>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4640      	mov	r0, r8
 8008dde:	4649      	mov	r1, r9
 8008de0:	f7f7 fb8a 	bl	80004f8 <__aeabi_dmul>
 8008de4:	a33c      	add	r3, pc, #240	@ (adr r3, 8008ed8 <__ieee754_pow+0x3f8>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7f7 fb85 	bl	80004f8 <__aeabi_dmul>
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	4650      	mov	r0, sl
 8008df4:	4659      	mov	r1, fp
 8008df6:	f7f7 f9c7 	bl	8000188 <__aeabi_dsub>
 8008dfa:	2400      	movs	r4, #0
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4680      	mov	r8, r0
 8008e02:	4689      	mov	r9, r1
 8008e04:	4630      	mov	r0, r6
 8008e06:	4639      	mov	r1, r7
 8008e08:	f7f7 f9c0 	bl	800018c <__adddf3>
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	463b      	mov	r3, r7
 8008e10:	4620      	mov	r0, r4
 8008e12:	460d      	mov	r5, r1
 8008e14:	f7f7 f9b8 	bl	8000188 <__aeabi_dsub>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4640      	mov	r0, r8
 8008e1e:	4649      	mov	r1, r9
 8008e20:	f7f7 f9b2 	bl	8000188 <__aeabi_dsub>
 8008e24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9304      	str	r3, [sp, #16]
 8008e30:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008e34:	4606      	mov	r6, r0
 8008e36:	460f      	mov	r7, r1
 8008e38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e3c:	4652      	mov	r2, sl
 8008e3e:	465b      	mov	r3, fp
 8008e40:	f7f7 f9a2 	bl	8000188 <__aeabi_dsub>
 8008e44:	4622      	mov	r2, r4
 8008e46:	462b      	mov	r3, r5
 8008e48:	f7f7 fb56 	bl	80004f8 <__aeabi_dmul>
 8008e4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e50:	4680      	mov	r8, r0
 8008e52:	4689      	mov	r9, r1
 8008e54:	4630      	mov	r0, r6
 8008e56:	4639      	mov	r1, r7
 8008e58:	f7f7 fb4e 	bl	80004f8 <__aeabi_dmul>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4640      	mov	r0, r8
 8008e62:	4649      	mov	r1, r9
 8008e64:	f7f7 f992 	bl	800018c <__adddf3>
 8008e68:	4652      	mov	r2, sl
 8008e6a:	465b      	mov	r3, fp
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	460f      	mov	r7, r1
 8008e70:	4620      	mov	r0, r4
 8008e72:	4629      	mov	r1, r5
 8008e74:	f7f7 fb40 	bl	80004f8 <__aeabi_dmul>
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	4680      	mov	r8, r0
 8008e7e:	4689      	mov	r9, r1
 8008e80:	4630      	mov	r0, r6
 8008e82:	4639      	mov	r1, r7
 8008e84:	f7f7 f982 	bl	800018c <__adddf3>
 8008e88:	4b18      	ldr	r3, [pc, #96]	@ (8008eec <__ieee754_pow+0x40c>)
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4299      	cmp	r1, r3
 8008e8e:	460d      	mov	r5, r1
 8008e90:	468a      	mov	sl, r1
 8008e92:	468b      	mov	fp, r1
 8008e94:	f340 82e0 	ble.w	8009458 <__ieee754_pow+0x978>
 8008e98:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008e9c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008ea0:	4303      	orrs	r3, r0
 8008ea2:	f000 81df 	beq.w	8009264 <__ieee754_pow+0x784>
 8008ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2300      	movs	r3, #0
 8008eae:	f7f7 fd95 	bl	80009dc <__aeabi_dcmplt>
 8008eb2:	3800      	subs	r0, #0
 8008eb4:	bf18      	it	ne
 8008eb6:	2001      	movne	r0, #1
 8008eb8:	e71d      	b.n	8008cf6 <__ieee754_pow+0x216>
 8008eba:	bf00      	nop
 8008ebc:	f3af 8000 	nop.w
 8008ec0:	60000000 	.word	0x60000000
 8008ec4:	3ff71547 	.word	0x3ff71547
 8008ec8:	f85ddf44 	.word	0xf85ddf44
 8008ecc:	3e54ae0b 	.word	0x3e54ae0b
 8008ed0:	55555555 	.word	0x55555555
 8008ed4:	3fd55555 	.word	0x3fd55555
 8008ed8:	652b82fe 	.word	0x652b82fe
 8008edc:	3ff71547 	.word	0x3ff71547
 8008ee0:	3ff00000 	.word	0x3ff00000
 8008ee4:	3fd00000 	.word	0x3fd00000
 8008ee8:	3fe00000 	.word	0x3fe00000
 8008eec:	408fffff 	.word	0x408fffff
 8008ef0:	4ad3      	ldr	r2, [pc, #844]	@ (8009240 <__ieee754_pow+0x760>)
 8008ef2:	402a      	ands	r2, r5
 8008ef4:	2a00      	cmp	r2, #0
 8008ef6:	f040 817a 	bne.w	80091ee <__ieee754_pow+0x70e>
 8008efa:	4bd2      	ldr	r3, [pc, #840]	@ (8009244 <__ieee754_pow+0x764>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	f7f7 fafb 	bl	80004f8 <__aeabi_dmul>
 8008f02:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8008f06:	460b      	mov	r3, r1
 8008f08:	151a      	asrs	r2, r3, #20
 8008f0a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008f0e:	4422      	add	r2, r4
 8008f10:	920a      	str	r2, [sp, #40]	@ 0x28
 8008f12:	4acd      	ldr	r2, [pc, #820]	@ (8009248 <__ieee754_pow+0x768>)
 8008f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f18:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008f22:	dd08      	ble.n	8008f36 <__ieee754_pow+0x456>
 8008f24:	4ac9      	ldr	r2, [pc, #804]	@ (800924c <__ieee754_pow+0x76c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	f340 8163 	ble.w	80091f2 <__ieee754_pow+0x712>
 8008f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f2e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008f32:	3301      	adds	r3, #1
 8008f34:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f36:	2600      	movs	r6, #0
 8008f38:	00f3      	lsls	r3, r6, #3
 8008f3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f3c:	4bc4      	ldr	r3, [pc, #784]	@ (8009250 <__ieee754_pow+0x770>)
 8008f3e:	4629      	mov	r1, r5
 8008f40:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008f4e:	4623      	mov	r3, r4
 8008f50:	4682      	mov	sl, r0
 8008f52:	f7f7 f919 	bl	8000188 <__aeabi_dsub>
 8008f56:	4652      	mov	r2, sl
 8008f58:	462b      	mov	r3, r5
 8008f5a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008f5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f62:	f7f7 f913 	bl	800018c <__adddf3>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	49b9      	ldr	r1, [pc, #740]	@ (8009254 <__ieee754_pow+0x774>)
 8008f6e:	f7f7 fbed 	bl	800074c <__aeabi_ddiv>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f7e:	f7f7 fabb 	bl	80004f8 <__aeabi_dmul>
 8008f82:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008f86:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008f8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	2200      	movs	r2, #0
 8008f92:	46ab      	mov	fp, r5
 8008f94:	106d      	asrs	r5, r5, #1
 8008f96:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008f9a:	9304      	str	r3, [sp, #16]
 8008f9c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008fa0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008fa4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008fa8:	4640      	mov	r0, r8
 8008faa:	4649      	mov	r1, r9
 8008fac:	4614      	mov	r4, r2
 8008fae:	461d      	mov	r5, r3
 8008fb0:	f7f7 faa2 	bl	80004f8 <__aeabi_dmul>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fbc:	f7f7 f8e4 	bl	8000188 <__aeabi_dsub>
 8008fc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008fc4:	4606      	mov	r6, r0
 8008fc6:	460f      	mov	r7, r1
 8008fc8:	4620      	mov	r0, r4
 8008fca:	4629      	mov	r1, r5
 8008fcc:	f7f7 f8dc 	bl	8000188 <__aeabi_dsub>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4650      	mov	r0, sl
 8008fd6:	4659      	mov	r1, fp
 8008fd8:	f7f7 f8d6 	bl	8000188 <__aeabi_dsub>
 8008fdc:	4642      	mov	r2, r8
 8008fde:	464b      	mov	r3, r9
 8008fe0:	f7f7 fa8a 	bl	80004f8 <__aeabi_dmul>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4630      	mov	r0, r6
 8008fea:	4639      	mov	r1, r7
 8008fec:	f7f7 f8cc 	bl	8000188 <__aeabi_dsub>
 8008ff0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008ff4:	f7f7 fa80 	bl	80004f8 <__aeabi_dmul>
 8008ff8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ffc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009000:	4610      	mov	r0, r2
 8009002:	4619      	mov	r1, r3
 8009004:	f7f7 fa78 	bl	80004f8 <__aeabi_dmul>
 8009008:	a37b      	add	r3, pc, #492	@ (adr r3, 80091f8 <__ieee754_pow+0x718>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	4604      	mov	r4, r0
 8009010:	460d      	mov	r5, r1
 8009012:	f7f7 fa71 	bl	80004f8 <__aeabi_dmul>
 8009016:	a37a      	add	r3, pc, #488	@ (adr r3, 8009200 <__ieee754_pow+0x720>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f7f7 f8b6 	bl	800018c <__adddf3>
 8009020:	4622      	mov	r2, r4
 8009022:	462b      	mov	r3, r5
 8009024:	f7f7 fa68 	bl	80004f8 <__aeabi_dmul>
 8009028:	a377      	add	r3, pc, #476	@ (adr r3, 8009208 <__ieee754_pow+0x728>)
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	f7f7 f8ad 	bl	800018c <__adddf3>
 8009032:	4622      	mov	r2, r4
 8009034:	462b      	mov	r3, r5
 8009036:	f7f7 fa5f 	bl	80004f8 <__aeabi_dmul>
 800903a:	a375      	add	r3, pc, #468	@ (adr r3, 8009210 <__ieee754_pow+0x730>)
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	f7f7 f8a4 	bl	800018c <__adddf3>
 8009044:	4622      	mov	r2, r4
 8009046:	462b      	mov	r3, r5
 8009048:	f7f7 fa56 	bl	80004f8 <__aeabi_dmul>
 800904c:	a372      	add	r3, pc, #456	@ (adr r3, 8009218 <__ieee754_pow+0x738>)
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	f7f7 f89b 	bl	800018c <__adddf3>
 8009056:	4622      	mov	r2, r4
 8009058:	462b      	mov	r3, r5
 800905a:	f7f7 fa4d 	bl	80004f8 <__aeabi_dmul>
 800905e:	a370      	add	r3, pc, #448	@ (adr r3, 8009220 <__ieee754_pow+0x740>)
 8009060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009064:	f7f7 f892 	bl	800018c <__adddf3>
 8009068:	4622      	mov	r2, r4
 800906a:	4606      	mov	r6, r0
 800906c:	460f      	mov	r7, r1
 800906e:	462b      	mov	r3, r5
 8009070:	4620      	mov	r0, r4
 8009072:	4629      	mov	r1, r5
 8009074:	f7f7 fa40 	bl	80004f8 <__aeabi_dmul>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4630      	mov	r0, r6
 800907e:	4639      	mov	r1, r7
 8009080:	f7f7 fa3a 	bl	80004f8 <__aeabi_dmul>
 8009084:	4604      	mov	r4, r0
 8009086:	460d      	mov	r5, r1
 8009088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800908c:	4642      	mov	r2, r8
 800908e:	464b      	mov	r3, r9
 8009090:	f7f7 f87c 	bl	800018c <__adddf3>
 8009094:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009098:	f7f7 fa2e 	bl	80004f8 <__aeabi_dmul>
 800909c:	4622      	mov	r2, r4
 800909e:	462b      	mov	r3, r5
 80090a0:	f7f7 f874 	bl	800018c <__adddf3>
 80090a4:	4642      	mov	r2, r8
 80090a6:	4682      	mov	sl, r0
 80090a8:	468b      	mov	fp, r1
 80090aa:	464b      	mov	r3, r9
 80090ac:	4640      	mov	r0, r8
 80090ae:	4649      	mov	r1, r9
 80090b0:	f7f7 fa22 	bl	80004f8 <__aeabi_dmul>
 80090b4:	2200      	movs	r2, #0
 80090b6:	4b68      	ldr	r3, [pc, #416]	@ (8009258 <__ieee754_pow+0x778>)
 80090b8:	4606      	mov	r6, r0
 80090ba:	460f      	mov	r7, r1
 80090bc:	f7f7 f866 	bl	800018c <__adddf3>
 80090c0:	4652      	mov	r2, sl
 80090c2:	465b      	mov	r3, fp
 80090c4:	f7f7 f862 	bl	800018c <__adddf3>
 80090c8:	2400      	movs	r4, #0
 80090ca:	460d      	mov	r5, r1
 80090cc:	4622      	mov	r2, r4
 80090ce:	460b      	mov	r3, r1
 80090d0:	4640      	mov	r0, r8
 80090d2:	4649      	mov	r1, r9
 80090d4:	f7f7 fa10 	bl	80004f8 <__aeabi_dmul>
 80090d8:	2200      	movs	r2, #0
 80090da:	4680      	mov	r8, r0
 80090dc:	4689      	mov	r9, r1
 80090de:	4620      	mov	r0, r4
 80090e0:	4629      	mov	r1, r5
 80090e2:	4b5d      	ldr	r3, [pc, #372]	@ (8009258 <__ieee754_pow+0x778>)
 80090e4:	f7f7 f850 	bl	8000188 <__aeabi_dsub>
 80090e8:	4632      	mov	r2, r6
 80090ea:	463b      	mov	r3, r7
 80090ec:	f7f7 f84c 	bl	8000188 <__aeabi_dsub>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4650      	mov	r0, sl
 80090f6:	4659      	mov	r1, fp
 80090f8:	f7f7 f846 	bl	8000188 <__aeabi_dsub>
 80090fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009100:	f7f7 f9fa 	bl	80004f8 <__aeabi_dmul>
 8009104:	4622      	mov	r2, r4
 8009106:	4606      	mov	r6, r0
 8009108:	460f      	mov	r7, r1
 800910a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800910e:	462b      	mov	r3, r5
 8009110:	f7f7 f9f2 	bl	80004f8 <__aeabi_dmul>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4630      	mov	r0, r6
 800911a:	4639      	mov	r1, r7
 800911c:	f7f7 f836 	bl	800018c <__adddf3>
 8009120:	2400      	movs	r4, #0
 8009122:	4606      	mov	r6, r0
 8009124:	460f      	mov	r7, r1
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4640      	mov	r0, r8
 800912c:	4649      	mov	r1, r9
 800912e:	f7f7 f82d 	bl	800018c <__adddf3>
 8009132:	a33d      	add	r3, pc, #244	@ (adr r3, 8009228 <__ieee754_pow+0x748>)
 8009134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009138:	4620      	mov	r0, r4
 800913a:	460d      	mov	r5, r1
 800913c:	f7f7 f9dc 	bl	80004f8 <__aeabi_dmul>
 8009140:	4642      	mov	r2, r8
 8009142:	464b      	mov	r3, r9
 8009144:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009148:	4620      	mov	r0, r4
 800914a:	4629      	mov	r1, r5
 800914c:	f7f7 f81c 	bl	8000188 <__aeabi_dsub>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4630      	mov	r0, r6
 8009156:	4639      	mov	r1, r7
 8009158:	f7f7 f816 	bl	8000188 <__aeabi_dsub>
 800915c:	a334      	add	r3, pc, #208	@ (adr r3, 8009230 <__ieee754_pow+0x750>)
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	f7f7 f9c9 	bl	80004f8 <__aeabi_dmul>
 8009166:	a334      	add	r3, pc, #208	@ (adr r3, 8009238 <__ieee754_pow+0x758>)
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	4606      	mov	r6, r0
 800916e:	460f      	mov	r7, r1
 8009170:	4620      	mov	r0, r4
 8009172:	4629      	mov	r1, r5
 8009174:	f7f7 f9c0 	bl	80004f8 <__aeabi_dmul>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4630      	mov	r0, r6
 800917e:	4639      	mov	r1, r7
 8009180:	f7f7 f804 	bl	800018c <__adddf3>
 8009184:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009186:	4b35      	ldr	r3, [pc, #212]	@ (800925c <__ieee754_pow+0x77c>)
 8009188:	2400      	movs	r4, #0
 800918a:	4413      	add	r3, r2
 800918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009190:	f7f6 fffc 	bl	800018c <__adddf3>
 8009194:	4682      	mov	sl, r0
 8009196:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009198:	468b      	mov	fp, r1
 800919a:	f7f7 f943 	bl	8000424 <__aeabi_i2d>
 800919e:	4606      	mov	r6, r0
 80091a0:	460f      	mov	r7, r1
 80091a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80091a4:	4b2e      	ldr	r3, [pc, #184]	@ (8009260 <__ieee754_pow+0x780>)
 80091a6:	4413      	add	r3, r2
 80091a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091ac:	4652      	mov	r2, sl
 80091ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091b2:	465b      	mov	r3, fp
 80091b4:	f7f6 ffea 	bl	800018c <__adddf3>
 80091b8:	4642      	mov	r2, r8
 80091ba:	464b      	mov	r3, r9
 80091bc:	f7f6 ffe6 	bl	800018c <__adddf3>
 80091c0:	4632      	mov	r2, r6
 80091c2:	463b      	mov	r3, r7
 80091c4:	f7f6 ffe2 	bl	800018c <__adddf3>
 80091c8:	4632      	mov	r2, r6
 80091ca:	463b      	mov	r3, r7
 80091cc:	4620      	mov	r0, r4
 80091ce:	460d      	mov	r5, r1
 80091d0:	f7f6 ffda 	bl	8000188 <__aeabi_dsub>
 80091d4:	4642      	mov	r2, r8
 80091d6:	464b      	mov	r3, r9
 80091d8:	f7f6 ffd6 	bl	8000188 <__aeabi_dsub>
 80091dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091e0:	f7f6 ffd2 	bl	8000188 <__aeabi_dsub>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4650      	mov	r0, sl
 80091ea:	4659      	mov	r1, fp
 80091ec:	e618      	b.n	8008e20 <__ieee754_pow+0x340>
 80091ee:	2400      	movs	r4, #0
 80091f0:	e68a      	b.n	8008f08 <__ieee754_pow+0x428>
 80091f2:	2601      	movs	r6, #1
 80091f4:	e6a0      	b.n	8008f38 <__ieee754_pow+0x458>
 80091f6:	bf00      	nop
 80091f8:	4a454eef 	.word	0x4a454eef
 80091fc:	3fca7e28 	.word	0x3fca7e28
 8009200:	93c9db65 	.word	0x93c9db65
 8009204:	3fcd864a 	.word	0x3fcd864a
 8009208:	a91d4101 	.word	0xa91d4101
 800920c:	3fd17460 	.word	0x3fd17460
 8009210:	518f264d 	.word	0x518f264d
 8009214:	3fd55555 	.word	0x3fd55555
 8009218:	db6fabff 	.word	0xdb6fabff
 800921c:	3fdb6db6 	.word	0x3fdb6db6
 8009220:	33333303 	.word	0x33333303
 8009224:	3fe33333 	.word	0x3fe33333
 8009228:	e0000000 	.word	0xe0000000
 800922c:	3feec709 	.word	0x3feec709
 8009230:	dc3a03fd 	.word	0xdc3a03fd
 8009234:	3feec709 	.word	0x3feec709
 8009238:	145b01f5 	.word	0x145b01f5
 800923c:	be3e2fe0 	.word	0xbe3e2fe0
 8009240:	7ff00000 	.word	0x7ff00000
 8009244:	43400000 	.word	0x43400000
 8009248:	0003988e 	.word	0x0003988e
 800924c:	000bb679 	.word	0x000bb679
 8009250:	08009910 	.word	0x08009910
 8009254:	3ff00000 	.word	0x3ff00000
 8009258:	40080000 	.word	0x40080000
 800925c:	080098f0 	.word	0x080098f0
 8009260:	08009900 	.word	0x08009900
 8009264:	a39a      	add	r3, pc, #616	@ (adr r3, 80094d0 <__ieee754_pow+0x9f0>)
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	4630      	mov	r0, r6
 800926c:	4639      	mov	r1, r7
 800926e:	f7f6 ff8d 	bl	800018c <__adddf3>
 8009272:	4642      	mov	r2, r8
 8009274:	e9cd 0100 	strd	r0, r1, [sp]
 8009278:	464b      	mov	r3, r9
 800927a:	4620      	mov	r0, r4
 800927c:	4629      	mov	r1, r5
 800927e:	f7f6 ff83 	bl	8000188 <__aeabi_dsub>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	e9dd 0100 	ldrd	r0, r1, [sp]
 800928a:	f7f7 fbc5 	bl	8000a18 <__aeabi_dcmpgt>
 800928e:	2800      	cmp	r0, #0
 8009290:	f47f ae09 	bne.w	8008ea6 <__ieee754_pow+0x3c6>
 8009294:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009298:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800929c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80092a0:	fa43 fa0a 	asr.w	sl, r3, sl
 80092a4:	44da      	add	sl, fp
 80092a6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80092aa:	489b      	ldr	r0, [pc, #620]	@ (8009518 <__ieee754_pow+0xa38>)
 80092ac:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80092b0:	4108      	asrs	r0, r1
 80092b2:	ea00 030a 	and.w	r3, r0, sl
 80092b6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80092ba:	f1c1 0114 	rsb	r1, r1, #20
 80092be:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80092c2:	4640      	mov	r0, r8
 80092c4:	fa4a fa01 	asr.w	sl, sl, r1
 80092c8:	f1bb 0f00 	cmp.w	fp, #0
 80092cc:	4649      	mov	r1, r9
 80092ce:	f04f 0200 	mov.w	r2, #0
 80092d2:	bfb8      	it	lt
 80092d4:	f1ca 0a00 	rsblt	sl, sl, #0
 80092d8:	f7f6 ff56 	bl	8000188 <__aeabi_dsub>
 80092dc:	4680      	mov	r8, r0
 80092de:	4689      	mov	r9, r1
 80092e0:	2400      	movs	r4, #0
 80092e2:	4632      	mov	r2, r6
 80092e4:	463b      	mov	r3, r7
 80092e6:	4640      	mov	r0, r8
 80092e8:	4649      	mov	r1, r9
 80092ea:	f7f6 ff4f 	bl	800018c <__adddf3>
 80092ee:	a37a      	add	r3, pc, #488	@ (adr r3, 80094d8 <__ieee754_pow+0x9f8>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	4620      	mov	r0, r4
 80092f6:	460d      	mov	r5, r1
 80092f8:	f7f7 f8fe 	bl	80004f8 <__aeabi_dmul>
 80092fc:	4642      	mov	r2, r8
 80092fe:	464b      	mov	r3, r9
 8009300:	e9cd 0100 	strd	r0, r1, [sp]
 8009304:	4620      	mov	r0, r4
 8009306:	4629      	mov	r1, r5
 8009308:	f7f6 ff3e 	bl	8000188 <__aeabi_dsub>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4630      	mov	r0, r6
 8009312:	4639      	mov	r1, r7
 8009314:	f7f6 ff38 	bl	8000188 <__aeabi_dsub>
 8009318:	a371      	add	r3, pc, #452	@ (adr r3, 80094e0 <__ieee754_pow+0xa00>)
 800931a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931e:	f7f7 f8eb 	bl	80004f8 <__aeabi_dmul>
 8009322:	a371      	add	r3, pc, #452	@ (adr r3, 80094e8 <__ieee754_pow+0xa08>)
 8009324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009328:	4680      	mov	r8, r0
 800932a:	4689      	mov	r9, r1
 800932c:	4620      	mov	r0, r4
 800932e:	4629      	mov	r1, r5
 8009330:	f7f7 f8e2 	bl	80004f8 <__aeabi_dmul>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4640      	mov	r0, r8
 800933a:	4649      	mov	r1, r9
 800933c:	f7f6 ff26 	bl	800018c <__adddf3>
 8009340:	4604      	mov	r4, r0
 8009342:	460d      	mov	r5, r1
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	e9dd 0100 	ldrd	r0, r1, [sp]
 800934c:	f7f6 ff1e 	bl	800018c <__adddf3>
 8009350:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009354:	4680      	mov	r8, r0
 8009356:	4689      	mov	r9, r1
 8009358:	f7f6 ff16 	bl	8000188 <__aeabi_dsub>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	4620      	mov	r0, r4
 8009362:	4629      	mov	r1, r5
 8009364:	f7f6 ff10 	bl	8000188 <__aeabi_dsub>
 8009368:	4642      	mov	r2, r8
 800936a:	4606      	mov	r6, r0
 800936c:	460f      	mov	r7, r1
 800936e:	464b      	mov	r3, r9
 8009370:	4640      	mov	r0, r8
 8009372:	4649      	mov	r1, r9
 8009374:	f7f7 f8c0 	bl	80004f8 <__aeabi_dmul>
 8009378:	a35d      	add	r3, pc, #372	@ (adr r3, 80094f0 <__ieee754_pow+0xa10>)
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	4604      	mov	r4, r0
 8009380:	460d      	mov	r5, r1
 8009382:	f7f7 f8b9 	bl	80004f8 <__aeabi_dmul>
 8009386:	a35c      	add	r3, pc, #368	@ (adr r3, 80094f8 <__ieee754_pow+0xa18>)
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	f7f6 fefc 	bl	8000188 <__aeabi_dsub>
 8009390:	4622      	mov	r2, r4
 8009392:	462b      	mov	r3, r5
 8009394:	f7f7 f8b0 	bl	80004f8 <__aeabi_dmul>
 8009398:	a359      	add	r3, pc, #356	@ (adr r3, 8009500 <__ieee754_pow+0xa20>)
 800939a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939e:	f7f6 fef5 	bl	800018c <__adddf3>
 80093a2:	4622      	mov	r2, r4
 80093a4:	462b      	mov	r3, r5
 80093a6:	f7f7 f8a7 	bl	80004f8 <__aeabi_dmul>
 80093aa:	a357      	add	r3, pc, #348	@ (adr r3, 8009508 <__ieee754_pow+0xa28>)
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	f7f6 feea 	bl	8000188 <__aeabi_dsub>
 80093b4:	4622      	mov	r2, r4
 80093b6:	462b      	mov	r3, r5
 80093b8:	f7f7 f89e 	bl	80004f8 <__aeabi_dmul>
 80093bc:	a354      	add	r3, pc, #336	@ (adr r3, 8009510 <__ieee754_pow+0xa30>)
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	f7f6 fee3 	bl	800018c <__adddf3>
 80093c6:	4622      	mov	r2, r4
 80093c8:	462b      	mov	r3, r5
 80093ca:	f7f7 f895 	bl	80004f8 <__aeabi_dmul>
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	4640      	mov	r0, r8
 80093d4:	4649      	mov	r1, r9
 80093d6:	f7f6 fed7 	bl	8000188 <__aeabi_dsub>
 80093da:	4604      	mov	r4, r0
 80093dc:	460d      	mov	r5, r1
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	4640      	mov	r0, r8
 80093e4:	4649      	mov	r1, r9
 80093e6:	f7f7 f887 	bl	80004f8 <__aeabi_dmul>
 80093ea:	2200      	movs	r2, #0
 80093ec:	e9cd 0100 	strd	r0, r1, [sp]
 80093f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80093f4:	4620      	mov	r0, r4
 80093f6:	4629      	mov	r1, r5
 80093f8:	f7f6 fec6 	bl	8000188 <__aeabi_dsub>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009404:	f7f7 f9a2 	bl	800074c <__aeabi_ddiv>
 8009408:	4632      	mov	r2, r6
 800940a:	4604      	mov	r4, r0
 800940c:	460d      	mov	r5, r1
 800940e:	463b      	mov	r3, r7
 8009410:	4640      	mov	r0, r8
 8009412:	4649      	mov	r1, r9
 8009414:	f7f7 f870 	bl	80004f8 <__aeabi_dmul>
 8009418:	4632      	mov	r2, r6
 800941a:	463b      	mov	r3, r7
 800941c:	f7f6 feb6 	bl	800018c <__adddf3>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4620      	mov	r0, r4
 8009426:	4629      	mov	r1, r5
 8009428:	f7f6 feae 	bl	8000188 <__aeabi_dsub>
 800942c:	4642      	mov	r2, r8
 800942e:	464b      	mov	r3, r9
 8009430:	f7f6 feaa 	bl	8000188 <__aeabi_dsub>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	2000      	movs	r0, #0
 800943a:	4938      	ldr	r1, [pc, #224]	@ (800951c <__ieee754_pow+0xa3c>)
 800943c:	f7f6 fea4 	bl	8000188 <__aeabi_dsub>
 8009440:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009444:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8009448:	da2e      	bge.n	80094a8 <__ieee754_pow+0x9c8>
 800944a:	4652      	mov	r2, sl
 800944c:	f000 f874 	bl	8009538 <scalbn>
 8009450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009454:	f7ff bbed 	b.w	8008c32 <__ieee754_pow+0x152>
 8009458:	4c31      	ldr	r4, [pc, #196]	@ (8009520 <__ieee754_pow+0xa40>)
 800945a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800945e:	42a3      	cmp	r3, r4
 8009460:	d91a      	bls.n	8009498 <__ieee754_pow+0x9b8>
 8009462:	4b30      	ldr	r3, [pc, #192]	@ (8009524 <__ieee754_pow+0xa44>)
 8009464:	440b      	add	r3, r1
 8009466:	4303      	orrs	r3, r0
 8009468:	d009      	beq.n	800947e <__ieee754_pow+0x99e>
 800946a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800946e:	2200      	movs	r2, #0
 8009470:	2300      	movs	r3, #0
 8009472:	f7f7 fab3 	bl	80009dc <__aeabi_dcmplt>
 8009476:	3800      	subs	r0, #0
 8009478:	bf18      	it	ne
 800947a:	2001      	movne	r0, #1
 800947c:	e444      	b.n	8008d08 <__ieee754_pow+0x228>
 800947e:	4642      	mov	r2, r8
 8009480:	464b      	mov	r3, r9
 8009482:	f7f6 fe81 	bl	8000188 <__aeabi_dsub>
 8009486:	4632      	mov	r2, r6
 8009488:	463b      	mov	r3, r7
 800948a:	f7f7 fabb 	bl	8000a04 <__aeabi_dcmpge>
 800948e:	2800      	cmp	r0, #0
 8009490:	d1eb      	bne.n	800946a <__ieee754_pow+0x98a>
 8009492:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8009528 <__ieee754_pow+0xa48>
 8009496:	e6fd      	b.n	8009294 <__ieee754_pow+0x7b4>
 8009498:	469a      	mov	sl, r3
 800949a:	4b24      	ldr	r3, [pc, #144]	@ (800952c <__ieee754_pow+0xa4c>)
 800949c:	459a      	cmp	sl, r3
 800949e:	f63f aef9 	bhi.w	8009294 <__ieee754_pow+0x7b4>
 80094a2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80094a6:	e71b      	b.n	80092e0 <__ieee754_pow+0x800>
 80094a8:	4621      	mov	r1, r4
 80094aa:	e7d1      	b.n	8009450 <__ieee754_pow+0x970>
 80094ac:	2000      	movs	r0, #0
 80094ae:	491b      	ldr	r1, [pc, #108]	@ (800951c <__ieee754_pow+0xa3c>)
 80094b0:	f7ff bb34 	b.w	8008b1c <__ieee754_pow+0x3c>
 80094b4:	2000      	movs	r0, #0
 80094b6:	2100      	movs	r1, #0
 80094b8:	f7ff bb30 	b.w	8008b1c <__ieee754_pow+0x3c>
 80094bc:	4650      	mov	r0, sl
 80094be:	4659      	mov	r1, fp
 80094c0:	f7ff bb2c 	b.w	8008b1c <__ieee754_pow+0x3c>
 80094c4:	460c      	mov	r4, r1
 80094c6:	f7ff bb79 	b.w	8008bbc <__ieee754_pow+0xdc>
 80094ca:	2400      	movs	r4, #0
 80094cc:	f7ff bb64 	b.w	8008b98 <__ieee754_pow+0xb8>
 80094d0:	652b82fe 	.word	0x652b82fe
 80094d4:	3c971547 	.word	0x3c971547
 80094d8:	00000000 	.word	0x00000000
 80094dc:	3fe62e43 	.word	0x3fe62e43
 80094e0:	fefa39ef 	.word	0xfefa39ef
 80094e4:	3fe62e42 	.word	0x3fe62e42
 80094e8:	0ca86c39 	.word	0x0ca86c39
 80094ec:	be205c61 	.word	0xbe205c61
 80094f0:	72bea4d0 	.word	0x72bea4d0
 80094f4:	3e663769 	.word	0x3e663769
 80094f8:	c5d26bf1 	.word	0xc5d26bf1
 80094fc:	3ebbbd41 	.word	0x3ebbbd41
 8009500:	af25de2c 	.word	0xaf25de2c
 8009504:	3f11566a 	.word	0x3f11566a
 8009508:	16bebd93 	.word	0x16bebd93
 800950c:	3f66c16c 	.word	0x3f66c16c
 8009510:	5555553e 	.word	0x5555553e
 8009514:	3fc55555 	.word	0x3fc55555
 8009518:	fff00000 	.word	0xfff00000
 800951c:	3ff00000 	.word	0x3ff00000
 8009520:	4090cbff 	.word	0x4090cbff
 8009524:	3f6f3400 	.word	0x3f6f3400
 8009528:	4090cc00 	.word	0x4090cc00
 800952c:	3fe00000 	.word	0x3fe00000

08009530 <fabs>:
 8009530:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009534:	4619      	mov	r1, r3
 8009536:	4770      	bx	lr

08009538 <scalbn>:
 8009538:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800953c:	4616      	mov	r6, r2
 800953e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009542:	4683      	mov	fp, r0
 8009544:	468c      	mov	ip, r1
 8009546:	460b      	mov	r3, r1
 8009548:	b982      	cbnz	r2, 800956c <scalbn+0x34>
 800954a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800954e:	4303      	orrs	r3, r0
 8009550:	d039      	beq.n	80095c6 <scalbn+0x8e>
 8009552:	4b2f      	ldr	r3, [pc, #188]	@ (8009610 <scalbn+0xd8>)
 8009554:	2200      	movs	r2, #0
 8009556:	f7f6 ffcf 	bl	80004f8 <__aeabi_dmul>
 800955a:	4b2e      	ldr	r3, [pc, #184]	@ (8009614 <scalbn+0xdc>)
 800955c:	4683      	mov	fp, r0
 800955e:	429e      	cmp	r6, r3
 8009560:	468c      	mov	ip, r1
 8009562:	da0d      	bge.n	8009580 <scalbn+0x48>
 8009564:	a326      	add	r3, pc, #152	@ (adr r3, 8009600 <scalbn+0xc8>)
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	e01b      	b.n	80095a4 <scalbn+0x6c>
 800956c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8009570:	42ba      	cmp	r2, r7
 8009572:	d109      	bne.n	8009588 <scalbn+0x50>
 8009574:	4602      	mov	r2, r0
 8009576:	f7f6 fe09 	bl	800018c <__adddf3>
 800957a:	4683      	mov	fp, r0
 800957c:	468c      	mov	ip, r1
 800957e:	e022      	b.n	80095c6 <scalbn+0x8e>
 8009580:	460b      	mov	r3, r1
 8009582:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009586:	3a36      	subs	r2, #54	@ 0x36
 8009588:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800958c:	428e      	cmp	r6, r1
 800958e:	dd0c      	ble.n	80095aa <scalbn+0x72>
 8009590:	a31d      	add	r3, pc, #116	@ (adr r3, 8009608 <scalbn+0xd0>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	461c      	mov	r4, r3
 8009598:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800959c:	f361 74df 	bfi	r4, r1, #31, #1
 80095a0:	4621      	mov	r1, r4
 80095a2:	481d      	ldr	r0, [pc, #116]	@ (8009618 <scalbn+0xe0>)
 80095a4:	f7f6 ffa8 	bl	80004f8 <__aeabi_dmul>
 80095a8:	e7e7      	b.n	800957a <scalbn+0x42>
 80095aa:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80095ae:	4432      	add	r2, r6
 80095b0:	428a      	cmp	r2, r1
 80095b2:	dced      	bgt.n	8009590 <scalbn+0x58>
 80095b4:	2a00      	cmp	r2, #0
 80095b6:	dd0a      	ble.n	80095ce <scalbn+0x96>
 80095b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80095bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80095c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80095c4:	46ac      	mov	ip, r5
 80095c6:	4658      	mov	r0, fp
 80095c8:	4661      	mov	r1, ip
 80095ca:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80095ce:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80095d2:	da09      	bge.n	80095e8 <scalbn+0xb0>
 80095d4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80095d8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80095dc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80095e0:	480e      	ldr	r0, [pc, #56]	@ (800961c <scalbn+0xe4>)
 80095e2:	f041 011f 	orr.w	r1, r1, #31
 80095e6:	e7bd      	b.n	8009564 <scalbn+0x2c>
 80095e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80095ec:	3236      	adds	r2, #54	@ 0x36
 80095ee:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80095f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80095f6:	4658      	mov	r0, fp
 80095f8:	4629      	mov	r1, r5
 80095fa:	2200      	movs	r2, #0
 80095fc:	4b08      	ldr	r3, [pc, #32]	@ (8009620 <scalbn+0xe8>)
 80095fe:	e7d1      	b.n	80095a4 <scalbn+0x6c>
 8009600:	c2f8f359 	.word	0xc2f8f359
 8009604:	01a56e1f 	.word	0x01a56e1f
 8009608:	8800759c 	.word	0x8800759c
 800960c:	7e37e43c 	.word	0x7e37e43c
 8009610:	43500000 	.word	0x43500000
 8009614:	ffff3cb0 	.word	0xffff3cb0
 8009618:	8800759c 	.word	0x8800759c
 800961c:	c2f8f359 	.word	0xc2f8f359
 8009620:	3c900000 	.word	0x3c900000

08009624 <with_errno>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	4604      	mov	r4, r0
 8009628:	460d      	mov	r5, r1
 800962a:	4616      	mov	r6, r2
 800962c:	f7fe fac2 	bl	8007bb4 <__errno>
 8009630:	4629      	mov	r1, r5
 8009632:	6006      	str	r6, [r0, #0]
 8009634:	4620      	mov	r0, r4
 8009636:	bd70      	pop	{r4, r5, r6, pc}

08009638 <xflow>:
 8009638:	b513      	push	{r0, r1, r4, lr}
 800963a:	4604      	mov	r4, r0
 800963c:	4619      	mov	r1, r3
 800963e:	4610      	mov	r0, r2
 8009640:	b10c      	cbz	r4, 8009646 <xflow+0xe>
 8009642:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009646:	e9cd 2300 	strd	r2, r3, [sp]
 800964a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800964e:	f7f6 ff53 	bl	80004f8 <__aeabi_dmul>
 8009652:	2222      	movs	r2, #34	@ 0x22
 8009654:	b002      	add	sp, #8
 8009656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800965a:	f7ff bfe3 	b.w	8009624 <with_errno>

0800965e <__math_uflow>:
 800965e:	2200      	movs	r2, #0
 8009660:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009664:	f7ff bfe8 	b.w	8009638 <xflow>

08009668 <__math_oflow>:
 8009668:	2200      	movs	r2, #0
 800966a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800966e:	f7ff bfe3 	b.w	8009638 <xflow>
	...

08009674 <__ieee754_sqrt>:
 8009674:	4a67      	ldr	r2, [pc, #412]	@ (8009814 <__ieee754_sqrt+0x1a0>)
 8009676:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967a:	438a      	bics	r2, r1
 800967c:	4606      	mov	r6, r0
 800967e:	460f      	mov	r7, r1
 8009680:	460b      	mov	r3, r1
 8009682:	4604      	mov	r4, r0
 8009684:	d10e      	bne.n	80096a4 <__ieee754_sqrt+0x30>
 8009686:	4602      	mov	r2, r0
 8009688:	f7f6 ff36 	bl	80004f8 <__aeabi_dmul>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	4630      	mov	r0, r6
 8009692:	4639      	mov	r1, r7
 8009694:	f7f6 fd7a 	bl	800018c <__adddf3>
 8009698:	4606      	mov	r6, r0
 800969a:	460f      	mov	r7, r1
 800969c:	4630      	mov	r0, r6
 800969e:	4639      	mov	r1, r7
 80096a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a4:	2900      	cmp	r1, #0
 80096a6:	dc0c      	bgt.n	80096c2 <__ieee754_sqrt+0x4e>
 80096a8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80096ac:	4302      	orrs	r2, r0
 80096ae:	d0f5      	beq.n	800969c <__ieee754_sqrt+0x28>
 80096b0:	b189      	cbz	r1, 80096d6 <__ieee754_sqrt+0x62>
 80096b2:	4602      	mov	r2, r0
 80096b4:	f7f6 fd68 	bl	8000188 <__aeabi_dsub>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	f7f7 f846 	bl	800074c <__aeabi_ddiv>
 80096c0:	e7ea      	b.n	8009698 <__ieee754_sqrt+0x24>
 80096c2:	150a      	asrs	r2, r1, #20
 80096c4:	d115      	bne.n	80096f2 <__ieee754_sqrt+0x7e>
 80096c6:	2100      	movs	r1, #0
 80096c8:	e009      	b.n	80096de <__ieee754_sqrt+0x6a>
 80096ca:	0ae3      	lsrs	r3, r4, #11
 80096cc:	3a15      	subs	r2, #21
 80096ce:	0564      	lsls	r4, r4, #21
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d0fa      	beq.n	80096ca <__ieee754_sqrt+0x56>
 80096d4:	e7f7      	b.n	80096c6 <__ieee754_sqrt+0x52>
 80096d6:	460a      	mov	r2, r1
 80096d8:	e7fa      	b.n	80096d0 <__ieee754_sqrt+0x5c>
 80096da:	005b      	lsls	r3, r3, #1
 80096dc:	3101      	adds	r1, #1
 80096de:	02d8      	lsls	r0, r3, #11
 80096e0:	d5fb      	bpl.n	80096da <__ieee754_sqrt+0x66>
 80096e2:	1e48      	subs	r0, r1, #1
 80096e4:	1a12      	subs	r2, r2, r0
 80096e6:	f1c1 0020 	rsb	r0, r1, #32
 80096ea:	fa24 f000 	lsr.w	r0, r4, r0
 80096ee:	4303      	orrs	r3, r0
 80096f0:	408c      	lsls	r4, r1
 80096f2:	2600      	movs	r6, #0
 80096f4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80096f8:	2116      	movs	r1, #22
 80096fa:	07d2      	lsls	r2, r2, #31
 80096fc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009700:	4632      	mov	r2, r6
 8009702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800970a:	bf5c      	itt	pl
 800970c:	005b      	lslpl	r3, r3, #1
 800970e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009712:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009716:	bf58      	it	pl
 8009718:	0064      	lslpl	r4, r4, #1
 800971a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800971e:	107f      	asrs	r7, r7, #1
 8009720:	0064      	lsls	r4, r4, #1
 8009722:	1815      	adds	r5, r2, r0
 8009724:	429d      	cmp	r5, r3
 8009726:	bfde      	ittt	le
 8009728:	182a      	addle	r2, r5, r0
 800972a:	1b5b      	suble	r3, r3, r5
 800972c:	1836      	addle	r6, r6, r0
 800972e:	0fe5      	lsrs	r5, r4, #31
 8009730:	3901      	subs	r1, #1
 8009732:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009736:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800973a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800973e:	d1f0      	bne.n	8009722 <__ieee754_sqrt+0xae>
 8009740:	460d      	mov	r5, r1
 8009742:	f04f 0a20 	mov.w	sl, #32
 8009746:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800974a:	429a      	cmp	r2, r3
 800974c:	eb01 0c00 	add.w	ip, r1, r0
 8009750:	db02      	blt.n	8009758 <__ieee754_sqrt+0xe4>
 8009752:	d113      	bne.n	800977c <__ieee754_sqrt+0x108>
 8009754:	45a4      	cmp	ip, r4
 8009756:	d811      	bhi.n	800977c <__ieee754_sqrt+0x108>
 8009758:	f1bc 0f00 	cmp.w	ip, #0
 800975c:	eb0c 0100 	add.w	r1, ip, r0
 8009760:	da42      	bge.n	80097e8 <__ieee754_sqrt+0x174>
 8009762:	2900      	cmp	r1, #0
 8009764:	db40      	blt.n	80097e8 <__ieee754_sqrt+0x174>
 8009766:	f102 0e01 	add.w	lr, r2, #1
 800976a:	1a9b      	subs	r3, r3, r2
 800976c:	4672      	mov	r2, lr
 800976e:	45a4      	cmp	ip, r4
 8009770:	bf88      	it	hi
 8009772:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009776:	eba4 040c 	sub.w	r4, r4, ip
 800977a:	4405      	add	r5, r0
 800977c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009780:	f1ba 0a01 	subs.w	sl, sl, #1
 8009784:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009788:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800978c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009790:	d1db      	bne.n	800974a <__ieee754_sqrt+0xd6>
 8009792:	431c      	orrs	r4, r3
 8009794:	d01a      	beq.n	80097cc <__ieee754_sqrt+0x158>
 8009796:	4c20      	ldr	r4, [pc, #128]	@ (8009818 <__ieee754_sqrt+0x1a4>)
 8009798:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800981c <__ieee754_sqrt+0x1a8>
 800979c:	e9d4 0100 	ldrd	r0, r1, [r4]
 80097a0:	e9db 2300 	ldrd	r2, r3, [fp]
 80097a4:	f7f6 fcf0 	bl	8000188 <__aeabi_dsub>
 80097a8:	e9d4 8900 	ldrd	r8, r9, [r4]
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	4640      	mov	r0, r8
 80097b2:	4649      	mov	r1, r9
 80097b4:	f7f7 f91c 	bl	80009f0 <__aeabi_dcmple>
 80097b8:	b140      	cbz	r0, 80097cc <__ieee754_sqrt+0x158>
 80097ba:	e9d4 0100 	ldrd	r0, r1, [r4]
 80097be:	e9db 2300 	ldrd	r2, r3, [fp]
 80097c2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80097c6:	d111      	bne.n	80097ec <__ieee754_sqrt+0x178>
 80097c8:	4655      	mov	r5, sl
 80097ca:	3601      	adds	r6, #1
 80097cc:	1072      	asrs	r2, r6, #1
 80097ce:	086b      	lsrs	r3, r5, #1
 80097d0:	07f1      	lsls	r1, r6, #31
 80097d2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80097d6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80097da:	bf48      	it	mi
 80097dc:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80097e0:	4618      	mov	r0, r3
 80097e2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80097e6:	e757      	b.n	8009698 <__ieee754_sqrt+0x24>
 80097e8:	4696      	mov	lr, r2
 80097ea:	e7be      	b.n	800976a <__ieee754_sqrt+0xf6>
 80097ec:	f7f6 fcce 	bl	800018c <__adddf3>
 80097f0:	e9d4 8900 	ldrd	r8, r9, [r4]
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	4640      	mov	r0, r8
 80097fa:	4649      	mov	r1, r9
 80097fc:	f7f7 f8ee 	bl	80009dc <__aeabi_dcmplt>
 8009800:	b120      	cbz	r0, 800980c <__ieee754_sqrt+0x198>
 8009802:	1ca8      	adds	r0, r5, #2
 8009804:	bf08      	it	eq
 8009806:	3601      	addeq	r6, #1
 8009808:	3502      	adds	r5, #2
 800980a:	e7df      	b.n	80097cc <__ieee754_sqrt+0x158>
 800980c:	1c6b      	adds	r3, r5, #1
 800980e:	f023 0501 	bic.w	r5, r3, #1
 8009812:	e7db      	b.n	80097cc <__ieee754_sqrt+0x158>
 8009814:	7ff00000 	.word	0x7ff00000
 8009818:	20000128 	.word	0x20000128
 800981c:	20000120 	.word	0x20000120

08009820 <_init>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	bf00      	nop
 8009824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009826:	bc08      	pop	{r3}
 8009828:	469e      	mov	lr, r3
 800982a:	4770      	bx	lr

0800982c <_fini>:
 800982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982e:	bf00      	nop
 8009830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009832:	bc08      	pop	{r3}
 8009834:	469e      	mov	lr, r3
 8009836:	4770      	bx	lr
