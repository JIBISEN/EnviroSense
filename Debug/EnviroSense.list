
EnviroSense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d30  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08013e70  08013e70  00014e70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014068  08014068  00016208  2**0
                  CONTENTS
  4 .ARM          00000008  08014068  08014068  00015068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014070  08014070  00016208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014070  08014070  00015070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014074  08014074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  08014078  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000208  08014280  00016208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c0  08014280  000167c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00016208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038981  00000000  00000000  00016231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f41  00000000  00000000  0004ebb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000032b0  00000000  00000000  00053af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002724  00000000  00000000  00056da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7c0  00000000  00000000  000594cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ae57  00000000  00000000  00075c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab530  00000000  00000000  000a0ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c013  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ea18  00000000  00000000  0014c058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015aa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000208 	.word	0x20000208
 800015c:	00000000 	.word	0x00000000
 8000160:	08013e58 	.word	0x08013e58

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000020c 	.word	0x2000020c
 800017c:	08013e58 	.word	0x08013e58

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	@ 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_fmul>:
 8000d64:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d72:	ea92 0f0c 	teqne	r2, ip
 8000d76:	ea93 0f0c 	teqne	r3, ip
 8000d7a:	d06f      	beq.n	8000e5c <__aeabi_fmul+0xf8>
 8000d7c:	441a      	add	r2, r3
 8000d7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d82:	0240      	lsls	r0, r0, #9
 8000d84:	bf18      	it	ne
 8000d86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8a:	d01e      	beq.n	8000dca <__aeabi_fmul+0x66>
 8000d8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d98:	fba0 3101 	umull	r3, r1, r0, r1
 8000d9c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000da0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000da4:	bf3e      	ittt	cc
 8000da6:	0049      	lslcc	r1, r1, #1
 8000da8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	ea40 0001 	orr.w	r0, r0, r1
 8000db2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000db6:	2afd      	cmp	r2, #253	@ 0xfd
 8000db8:	d81d      	bhi.n	8000df6 <__aeabi_fmul+0x92>
 8000dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc2:	bf08      	it	eq
 8000dc4:	f020 0001 	biceq.w	r0, r0, #1
 8000dc8:	4770      	bx	lr
 8000dca:	f090 0f00 	teq	r0, #0
 8000dce:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dd2:	bf08      	it	eq
 8000dd4:	0249      	lsleq	r1, r1, #9
 8000dd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dde:	3a7f      	subs	r2, #127	@ 0x7f
 8000de0:	bfc2      	ittt	gt
 8000de2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000de6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dea:	4770      	bxgt	lr
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	3a01      	subs	r2, #1
 8000df6:	dc5d      	bgt.n	8000eb4 <__aeabi_fmul+0x150>
 8000df8:	f112 0f19 	cmn.w	r2, #25
 8000dfc:	bfdc      	itt	le
 8000dfe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e02:	4770      	bxle	lr
 8000e04:	f1c2 0200 	rsb	r2, r2, #0
 8000e08:	0041      	lsls	r1, r0, #1
 8000e0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e0e:	f1c2 0220 	rsb	r2, r2, #32
 8000e12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1a:	f140 0000 	adc.w	r0, r0, #0
 8000e1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e22:	bf08      	it	eq
 8000e24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e28:	4770      	bx	lr
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xce>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xe6>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e78f      	b.n	8000d7c <__aeabi_fmul+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	bf18      	it	ne
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d00a      	beq.n	8000e82 <__aeabi_fmul+0x11e>
 8000e6c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e70:	bf18      	it	ne
 8000e72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e76:	d1d8      	bne.n	8000e2a <__aeabi_fmul+0xc6>
 8000e78:	ea80 0001 	eor.w	r0, r0, r1
 8000e7c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	bf17      	itett	ne
 8000e88:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e8c:	4608      	moveq	r0, r1
 8000e8e:	f091 0f00 	teqne	r1, #0
 8000e92:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e96:	d014      	beq.n	8000ec2 <__aeabi_fmul+0x15e>
 8000e98:	ea92 0f0c 	teq	r2, ip
 8000e9c:	d101      	bne.n	8000ea2 <__aeabi_fmul+0x13e>
 8000e9e:	0242      	lsls	r2, r0, #9
 8000ea0:	d10f      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000ea2:	ea93 0f0c 	teq	r3, ip
 8000ea6:	d103      	bne.n	8000eb0 <__aeabi_fmul+0x14c>
 8000ea8:	024b      	lsls	r3, r1, #9
 8000eaa:	bf18      	it	ne
 8000eac:	4608      	movne	r0, r1
 8000eae:	d108      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000eb0:	ea80 0001 	eor.w	r0, r0, r1
 8000eb4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ebc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ec0:	4770      	bx	lr
 8000ec2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ec6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eca:	4770      	bx	lr

08000ecc <__aeabi_fdiv>:
 8000ecc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ed0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed4:	bf1e      	ittt	ne
 8000ed6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eda:	ea92 0f0c 	teqne	r2, ip
 8000ede:	ea93 0f0c 	teqne	r3, ip
 8000ee2:	d069      	beq.n	8000fb8 <__aeabi_fdiv+0xec>
 8000ee4:	eba2 0203 	sub.w	r2, r2, r3
 8000ee8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eec:	0249      	lsls	r1, r1, #9
 8000eee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef2:	d037      	beq.n	8000f64 <__aeabi_fdiv+0x98>
 8000ef4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ef8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000efc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f00:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f04:	428b      	cmp	r3, r1
 8000f06:	bf38      	it	cc
 8000f08:	005b      	lslcc	r3, r3, #1
 8000f0a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f0e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f12:	428b      	cmp	r3, r1
 8000f14:	bf24      	itt	cs
 8000f16:	1a5b      	subcs	r3, r3, r1
 8000f18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f2e:	bf24      	itt	cs
 8000f30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	bf18      	it	ne
 8000f4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f4e:	d1e0      	bne.n	8000f12 <__aeabi_fdiv+0x46>
 8000f50:	2afd      	cmp	r2, #253	@ 0xfd
 8000f52:	f63f af50 	bhi.w	8000df6 <__aeabi_fmul+0x92>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f5c:	bf08      	it	eq
 8000f5e:	f020 0001 	biceq.w	r0, r0, #1
 8000f62:	4770      	bx	lr
 8000f64:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f6c:	327f      	adds	r2, #127	@ 0x7f
 8000f6e:	bfc2      	ittt	gt
 8000f70:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f78:	4770      	bxgt	lr
 8000f7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	3a01      	subs	r2, #1
 8000f84:	e737      	b.n	8000df6 <__aeabi_fmul+0x92>
 8000f86:	f092 0f00 	teq	r2, #0
 8000f8a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0040      	lsleq	r0, r0, #1
 8000f92:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f96:	3a01      	subeq	r2, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xc2>
 8000f9a:	ea40 000c 	orr.w	r0, r0, ip
 8000f9e:	f093 0f00 	teq	r3, #0
 8000fa2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0049      	lsleq	r1, r1, #1
 8000faa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fae:	3b01      	subeq	r3, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xda>
 8000fb2:	ea41 010c 	orr.w	r1, r1, ip
 8000fb6:	e795      	b.n	8000ee4 <__aeabi_fdiv+0x18>
 8000fb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fbc:	ea92 0f0c 	teq	r2, ip
 8000fc0:	d108      	bne.n	8000fd4 <__aeabi_fdiv+0x108>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	f47f af7d 	bne.w	8000ec2 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	f47f af70 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e776      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fd4:	ea93 0f0c 	teq	r3, ip
 8000fd8:	d104      	bne.n	8000fe4 <__aeabi_fdiv+0x118>
 8000fda:	024b      	lsls	r3, r1, #9
 8000fdc:	f43f af4c 	beq.w	8000e78 <__aeabi_fmul+0x114>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e76e      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fe4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fe8:	bf18      	it	ne
 8000fea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fee:	d1ca      	bne.n	8000f86 <__aeabi_fdiv+0xba>
 8000ff0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ff4:	f47f af5c 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000ff8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ffc:	f47f af3c 	bne.w	8000e78 <__aeabi_fmul+0x114>
 8001000:	e75f      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8001002:	bf00      	nop

08001004 <__gesf2>:
 8001004:	f04f 3cff 	mov.w	ip, #4294967295
 8001008:	e006      	b.n	8001018 <__cmpsf2+0x4>
 800100a:	bf00      	nop

0800100c <__lesf2>:
 800100c:	f04f 0c01 	mov.w	ip, #1
 8001010:	e002      	b.n	8001018 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__cmpsf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	f84d cd04 	str.w	ip, [sp, #-4]!
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	bf18      	it	ne
 800102a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800102e:	d011      	beq.n	8001054 <__cmpsf2+0x40>
 8001030:	b001      	add	sp, #4
 8001032:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001036:	bf18      	it	ne
 8001038:	ea90 0f01 	teqne	r0, r1
 800103c:	bf58      	it	pl
 800103e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001042:	bf88      	it	hi
 8001044:	17c8      	asrhi	r0, r1, #31
 8001046:	bf38      	it	cc
 8001048:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800104c:	bf18      	it	ne
 800104e:	f040 0001 	orrne.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001058:	d102      	bne.n	8001060 <__cmpsf2+0x4c>
 800105a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800105e:	d105      	bne.n	800106c <__cmpsf2+0x58>
 8001060:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001064:	d1e4      	bne.n	8001030 <__cmpsf2+0x1c>
 8001066:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106a:	d0e1      	beq.n	8001030 <__cmpsf2+0x1c>
 800106c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <__aeabi_cfrcmple>:
 8001074:	4684      	mov	ip, r0
 8001076:	4608      	mov	r0, r1
 8001078:	4661      	mov	r1, ip
 800107a:	e7ff      	b.n	800107c <__aeabi_cfcmpeq>

0800107c <__aeabi_cfcmpeq>:
 800107c:	b50f      	push	{r0, r1, r2, r3, lr}
 800107e:	f7ff ffc9 	bl	8001014 <__cmpsf2>
 8001082:	2800      	cmp	r0, #0
 8001084:	bf48      	it	mi
 8001086:	f110 0f00 	cmnmi.w	r0, #0
 800108a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800108c <__aeabi_fcmpeq>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff fff4 	bl	800107c <__aeabi_cfcmpeq>
 8001094:	bf0c      	ite	eq
 8001096:	2001      	moveq	r0, #1
 8001098:	2000      	movne	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmplt>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffea 	bl	800107c <__aeabi_cfcmpeq>
 80010a8:	bf34      	ite	cc
 80010aa:	2001      	movcc	r0, #1
 80010ac:	2000      	movcs	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmple>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffe0 	bl	800107c <__aeabi_cfcmpeq>
 80010bc:	bf94      	ite	ls
 80010be:	2001      	movls	r0, #1
 80010c0:	2000      	movhi	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_fcmpge>:
 80010c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010cc:	f7ff ffd2 	bl	8001074 <__aeabi_cfrcmple>
 80010d0:	bf94      	ite	ls
 80010d2:	2001      	movls	r0, #1
 80010d4:	2000      	movhi	r0, #0
 80010d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010da:	bf00      	nop

080010dc <__aeabi_fcmpgt>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff ffc8 	bl	8001074 <__aeabi_cfrcmple>
 80010e4:	bf34      	ite	cc
 80010e6:	2001      	movcc	r0, #1
 80010e8:	2000      	movcs	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_f2iz>:
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010f8:	d30f      	bcc.n	800111a <__aeabi_f2iz+0x2a>
 80010fa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001102:	d90d      	bls.n	8001120 <__aeabi_f2iz+0x30>
 8001104:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001108:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800110c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001110:	fa23 f002 	lsr.w	r0, r3, r2
 8001114:	bf18      	it	ne
 8001116:	4240      	negne	r0, r0
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr
 8001120:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001124:	d101      	bne.n	800112a <__aeabi_f2iz+0x3a>
 8001126:	0242      	lsls	r2, r0, #9
 8001128:	d105      	bne.n	8001136 <__aeabi_f2iz+0x46>
 800112a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800112e:	bf08      	it	eq
 8001130:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2uiz>:
 800113c:	0042      	lsls	r2, r0, #1
 800113e:	d20e      	bcs.n	800115e <__aeabi_f2uiz+0x22>
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30b      	bcc.n	800115e <__aeabi_f2uiz+0x22>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d409      	bmi.n	8001164 <__aeabi_f2uiz+0x28>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	fa23 f002 	lsr.w	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2uiz+0x32>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d102      	bne.n	8001174 <__aeabi_f2uiz+0x38>
 800116e:	f04f 30ff 	mov.w	r0, #4294967295
 8001172:	4770      	bx	lr
 8001174:	f04f 0000 	mov.w	r0, #0
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <__aeabi_uldivmod>:
 800117c:	b953      	cbnz	r3, 8001194 <__aeabi_uldivmod+0x18>
 800117e:	b94a      	cbnz	r2, 8001194 <__aeabi_uldivmod+0x18>
 8001180:	2900      	cmp	r1, #0
 8001182:	bf08      	it	eq
 8001184:	2800      	cmpeq	r0, #0
 8001186:	bf1c      	itt	ne
 8001188:	f04f 31ff 	movne.w	r1, #4294967295
 800118c:	f04f 30ff 	movne.w	r0, #4294967295
 8001190:	f000 b968 	b.w	8001464 <__aeabi_idiv0>
 8001194:	f1ad 0c08 	sub.w	ip, sp, #8
 8001198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800119c:	f000 f806 	bl	80011ac <__udivmoddi4>
 80011a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011a8:	b004      	add	sp, #16
 80011aa:	4770      	bx	lr

080011ac <__udivmoddi4>:
 80011ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b0:	9d08      	ldr	r5, [sp, #32]
 80011b2:	460c      	mov	r4, r1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d14e      	bne.n	8001256 <__udivmoddi4+0xaa>
 80011b8:	4694      	mov	ip, r2
 80011ba:	458c      	cmp	ip, r1
 80011bc:	4686      	mov	lr, r0
 80011be:	fab2 f282 	clz	r2, r2
 80011c2:	d962      	bls.n	800128a <__udivmoddi4+0xde>
 80011c4:	b14a      	cbz	r2, 80011da <__udivmoddi4+0x2e>
 80011c6:	f1c2 0320 	rsb	r3, r2, #32
 80011ca:	4091      	lsls	r1, r2
 80011cc:	fa20 f303 	lsr.w	r3, r0, r3
 80011d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011d4:	4319      	orrs	r1, r3
 80011d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80011da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011de:	fbb1 f4f7 	udiv	r4, r1, r7
 80011e2:	fb07 1114 	mls	r1, r7, r4, r1
 80011e6:	fa1f f68c 	uxth.w	r6, ip
 80011ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011f2:	fb04 f106 	mul.w	r1, r4, r6
 80011f6:	4299      	cmp	r1, r3
 80011f8:	d90a      	bls.n	8001210 <__udivmoddi4+0x64>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8001202:	f080 8110 	bcs.w	8001426 <__udivmoddi4+0x27a>
 8001206:	4299      	cmp	r1, r3
 8001208:	f240 810d 	bls.w	8001426 <__udivmoddi4+0x27a>
 800120c:	3c02      	subs	r4, #2
 800120e:	4463      	add	r3, ip
 8001210:	1a59      	subs	r1, r3, r1
 8001212:	fbb1 f0f7 	udiv	r0, r1, r7
 8001216:	fb07 1110 	mls	r1, r7, r0, r1
 800121a:	fb00 f606 	mul.w	r6, r0, r6
 800121e:	fa1f f38e 	uxth.w	r3, lr
 8001222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001226:	429e      	cmp	r6, r3
 8001228:	d90a      	bls.n	8001240 <__udivmoddi4+0x94>
 800122a:	eb1c 0303 	adds.w	r3, ip, r3
 800122e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001232:	f080 80fa 	bcs.w	800142a <__udivmoddi4+0x27e>
 8001236:	429e      	cmp	r6, r3
 8001238:	f240 80f7 	bls.w	800142a <__udivmoddi4+0x27e>
 800123c:	4463      	add	r3, ip
 800123e:	3802      	subs	r0, #2
 8001240:	2100      	movs	r1, #0
 8001242:	1b9b      	subs	r3, r3, r6
 8001244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001248:	b11d      	cbz	r5, 8001252 <__udivmoddi4+0xa6>
 800124a:	40d3      	lsrs	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	e9c5 3200 	strd	r3, r2, [r5]
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	428b      	cmp	r3, r1
 8001258:	d905      	bls.n	8001266 <__udivmoddi4+0xba>
 800125a:	b10d      	cbz	r5, 8001260 <__udivmoddi4+0xb4>
 800125c:	e9c5 0100 	strd	r0, r1, [r5]
 8001260:	2100      	movs	r1, #0
 8001262:	4608      	mov	r0, r1
 8001264:	e7f5      	b.n	8001252 <__udivmoddi4+0xa6>
 8001266:	fab3 f183 	clz	r1, r3
 800126a:	2900      	cmp	r1, #0
 800126c:	d146      	bne.n	80012fc <__udivmoddi4+0x150>
 800126e:	42a3      	cmp	r3, r4
 8001270:	d302      	bcc.n	8001278 <__udivmoddi4+0xcc>
 8001272:	4290      	cmp	r0, r2
 8001274:	f0c0 80ee 	bcc.w	8001454 <__udivmoddi4+0x2a8>
 8001278:	1a86      	subs	r6, r0, r2
 800127a:	eb64 0303 	sbc.w	r3, r4, r3
 800127e:	2001      	movs	r0, #1
 8001280:	2d00      	cmp	r5, #0
 8001282:	d0e6      	beq.n	8001252 <__udivmoddi4+0xa6>
 8001284:	e9c5 6300 	strd	r6, r3, [r5]
 8001288:	e7e3      	b.n	8001252 <__udivmoddi4+0xa6>
 800128a:	2a00      	cmp	r2, #0
 800128c:	f040 808f 	bne.w	80013ae <__udivmoddi4+0x202>
 8001290:	eba1 040c 	sub.w	r4, r1, ip
 8001294:	2101      	movs	r1, #1
 8001296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800129a:	fa1f f78c 	uxth.w	r7, ip
 800129e:	fbb4 f6f8 	udiv	r6, r4, r8
 80012a2:	fb08 4416 	mls	r4, r8, r6, r4
 80012a6:	fb07 f006 	mul.w	r0, r7, r6
 80012aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d908      	bls.n	80012c8 <__udivmoddi4+0x11c>
 80012b6:	eb1c 0303 	adds.w	r3, ip, r3
 80012ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80012be:	d202      	bcs.n	80012c6 <__udivmoddi4+0x11a>
 80012c0:	4298      	cmp	r0, r3
 80012c2:	f200 80cb 	bhi.w	800145c <__udivmoddi4+0x2b0>
 80012c6:	4626      	mov	r6, r4
 80012c8:	1a1c      	subs	r4, r3, r0
 80012ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80012ce:	fb08 4410 	mls	r4, r8, r0, r4
 80012d2:	fb00 f707 	mul.w	r7, r0, r7
 80012d6:	fa1f f38e 	uxth.w	r3, lr
 80012da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012de:	429f      	cmp	r7, r3
 80012e0:	d908      	bls.n	80012f4 <__udivmoddi4+0x148>
 80012e2:	eb1c 0303 	adds.w	r3, ip, r3
 80012e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80012ea:	d202      	bcs.n	80012f2 <__udivmoddi4+0x146>
 80012ec:	429f      	cmp	r7, r3
 80012ee:	f200 80ae 	bhi.w	800144e <__udivmoddi4+0x2a2>
 80012f2:	4620      	mov	r0, r4
 80012f4:	1bdb      	subs	r3, r3, r7
 80012f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012fa:	e7a5      	b.n	8001248 <__udivmoddi4+0x9c>
 80012fc:	f1c1 0720 	rsb	r7, r1, #32
 8001300:	408b      	lsls	r3, r1
 8001302:	fa22 fc07 	lsr.w	ip, r2, r7
 8001306:	ea4c 0c03 	orr.w	ip, ip, r3
 800130a:	fa24 f607 	lsr.w	r6, r4, r7
 800130e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001312:	fbb6 f8f9 	udiv	r8, r6, r9
 8001316:	fa1f fe8c 	uxth.w	lr, ip
 800131a:	fb09 6618 	mls	r6, r9, r8, r6
 800131e:	fa20 f307 	lsr.w	r3, r0, r7
 8001322:	408c      	lsls	r4, r1
 8001324:	fa00 fa01 	lsl.w	sl, r0, r1
 8001328:	fb08 f00e 	mul.w	r0, r8, lr
 800132c:	431c      	orrs	r4, r3
 800132e:	0c23      	lsrs	r3, r4, #16
 8001330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001334:	4298      	cmp	r0, r3
 8001336:	fa02 f201 	lsl.w	r2, r2, r1
 800133a:	d90a      	bls.n	8001352 <__udivmoddi4+0x1a6>
 800133c:	eb1c 0303 	adds.w	r3, ip, r3
 8001340:	f108 36ff 	add.w	r6, r8, #4294967295
 8001344:	f080 8081 	bcs.w	800144a <__udivmoddi4+0x29e>
 8001348:	4298      	cmp	r0, r3
 800134a:	d97e      	bls.n	800144a <__udivmoddi4+0x29e>
 800134c:	f1a8 0802 	sub.w	r8, r8, #2
 8001350:	4463      	add	r3, ip
 8001352:	1a1e      	subs	r6, r3, r0
 8001354:	fbb6 f3f9 	udiv	r3, r6, r9
 8001358:	fb09 6613 	mls	r6, r9, r3, r6
 800135c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001360:	b2a4      	uxth	r4, r4
 8001362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001366:	45a6      	cmp	lr, r4
 8001368:	d908      	bls.n	800137c <__udivmoddi4+0x1d0>
 800136a:	eb1c 0404 	adds.w	r4, ip, r4
 800136e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001372:	d266      	bcs.n	8001442 <__udivmoddi4+0x296>
 8001374:	45a6      	cmp	lr, r4
 8001376:	d964      	bls.n	8001442 <__udivmoddi4+0x296>
 8001378:	3b02      	subs	r3, #2
 800137a:	4464      	add	r4, ip
 800137c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001380:	fba0 8302 	umull	r8, r3, r0, r2
 8001384:	eba4 040e 	sub.w	r4, r4, lr
 8001388:	429c      	cmp	r4, r3
 800138a:	46c6      	mov	lr, r8
 800138c:	461e      	mov	r6, r3
 800138e:	d350      	bcc.n	8001432 <__udivmoddi4+0x286>
 8001390:	d04d      	beq.n	800142e <__udivmoddi4+0x282>
 8001392:	b155      	cbz	r5, 80013aa <__udivmoddi4+0x1fe>
 8001394:	ebba 030e 	subs.w	r3, sl, lr
 8001398:	eb64 0406 	sbc.w	r4, r4, r6
 800139c:	fa04 f707 	lsl.w	r7, r4, r7
 80013a0:	40cb      	lsrs	r3, r1
 80013a2:	431f      	orrs	r7, r3
 80013a4:	40cc      	lsrs	r4, r1
 80013a6:	e9c5 7400 	strd	r7, r4, [r5]
 80013aa:	2100      	movs	r1, #0
 80013ac:	e751      	b.n	8001252 <__udivmoddi4+0xa6>
 80013ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80013b2:	f1c2 0320 	rsb	r3, r2, #32
 80013b6:	40d9      	lsrs	r1, r3
 80013b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013bc:	fa20 f303 	lsr.w	r3, r0, r3
 80013c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80013c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80013c8:	fb08 1110 	mls	r1, r8, r0, r1
 80013cc:	4094      	lsls	r4, r2
 80013ce:	431c      	orrs	r4, r3
 80013d0:	fa1f f78c 	uxth.w	r7, ip
 80013d4:	0c23      	lsrs	r3, r4, #16
 80013d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013da:	fb00 f107 	mul.w	r1, r0, r7
 80013de:	4299      	cmp	r1, r3
 80013e0:	d908      	bls.n	80013f4 <__udivmoddi4+0x248>
 80013e2:	eb1c 0303 	adds.w	r3, ip, r3
 80013e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013ea:	d22c      	bcs.n	8001446 <__udivmoddi4+0x29a>
 80013ec:	4299      	cmp	r1, r3
 80013ee:	d92a      	bls.n	8001446 <__udivmoddi4+0x29a>
 80013f0:	3802      	subs	r0, #2
 80013f2:	4463      	add	r3, ip
 80013f4:	1a5b      	subs	r3, r3, r1
 80013f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80013fa:	fb08 3311 	mls	r3, r8, r1, r3
 80013fe:	b2a4      	uxth	r4, r4
 8001400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001404:	fb01 f307 	mul.w	r3, r1, r7
 8001408:	42a3      	cmp	r3, r4
 800140a:	d908      	bls.n	800141e <__udivmoddi4+0x272>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f101 36ff 	add.w	r6, r1, #4294967295
 8001414:	d213      	bcs.n	800143e <__udivmoddi4+0x292>
 8001416:	42a3      	cmp	r3, r4
 8001418:	d911      	bls.n	800143e <__udivmoddi4+0x292>
 800141a:	3902      	subs	r1, #2
 800141c:	4464      	add	r4, ip
 800141e:	1ae4      	subs	r4, r4, r3
 8001420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001424:	e73b      	b.n	800129e <__udivmoddi4+0xf2>
 8001426:	4604      	mov	r4, r0
 8001428:	e6f2      	b.n	8001210 <__udivmoddi4+0x64>
 800142a:	4608      	mov	r0, r1
 800142c:	e708      	b.n	8001240 <__udivmoddi4+0x94>
 800142e:	45c2      	cmp	sl, r8
 8001430:	d2af      	bcs.n	8001392 <__udivmoddi4+0x1e6>
 8001432:	ebb8 0e02 	subs.w	lr, r8, r2
 8001436:	eb63 060c 	sbc.w	r6, r3, ip
 800143a:	3801      	subs	r0, #1
 800143c:	e7a9      	b.n	8001392 <__udivmoddi4+0x1e6>
 800143e:	4631      	mov	r1, r6
 8001440:	e7ed      	b.n	800141e <__udivmoddi4+0x272>
 8001442:	4603      	mov	r3, r0
 8001444:	e79a      	b.n	800137c <__udivmoddi4+0x1d0>
 8001446:	4630      	mov	r0, r6
 8001448:	e7d4      	b.n	80013f4 <__udivmoddi4+0x248>
 800144a:	46b0      	mov	r8, r6
 800144c:	e781      	b.n	8001352 <__udivmoddi4+0x1a6>
 800144e:	4463      	add	r3, ip
 8001450:	3802      	subs	r0, #2
 8001452:	e74f      	b.n	80012f4 <__udivmoddi4+0x148>
 8001454:	4606      	mov	r6, r0
 8001456:	4623      	mov	r3, r4
 8001458:	4608      	mov	r0, r1
 800145a:	e711      	b.n	8001280 <__udivmoddi4+0xd4>
 800145c:	3e02      	subs	r6, #2
 800145e:	4463      	add	r3, ip
 8001460:	e732      	b.n	80012c8 <__udivmoddi4+0x11c>
 8001462:	bf00      	nop

08001464 <__aeabi_idiv0>:
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <GestionLed>:

# include <stdio.h>
#include <main.h>

void GestionLed(int LedState)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

	switch(LedState)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b05      	cmp	r3, #5
 8001474:	f200 80bb 	bhi.w	80015ee <GestionLed+0x186>
 8001478:	a201      	add	r2, pc, #4	@ (adr r2, 8001480 <GestionLed+0x18>)
 800147a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147e:	bf00      	nop
 8001480:	08001499 	.word	0x08001499
 8001484:	080014d1 	.word	0x080014d1
 8001488:	08001509 	.word	0x08001509
 800148c:	08001541 	.word	0x08001541
 8001490:	0800157b 	.word	0x0800157b
 8001494:	080015b5 	.word	0x080015b5
	{
	case 0:// Affichage de la temperature
		  HAL_GPIO_TogglePin(GPIOB,L0_Pin);
 8001498:	2102      	movs	r1, #2
 800149a:	4857      	ldr	r0, [pc, #348]	@ (80015f8 <GestionLed+0x190>)
 800149c:	f00b fca4 	bl	800cde8 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2104      	movs	r1, #4
 80014a4:	4854      	ldr	r0, [pc, #336]	@ (80015f8 <GestionLed+0x190>)
 80014a6:	f00b fc87 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014b0:	4851      	ldr	r0, [pc, #324]	@ (80015f8 <GestionLed+0x190>)
 80014b2:	f00b fc81 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014bc:	484e      	ldr	r0, [pc, #312]	@ (80015f8 <GestionLed+0x190>)
 80014be:	f00b fc7b 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014c8:	484b      	ldr	r0, [pc, #300]	@ (80015f8 <GestionLed+0x190>)
 80014ca:	f00b fc75 	bl	800cdb8 <HAL_GPIO_WritePin>
	break;
 80014ce:	e08e      	b.n	80015ee <GestionLed+0x186>

	case 1:// Affichage de la consigne
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2102      	movs	r1, #2
 80014d4:	4848      	ldr	r0, [pc, #288]	@ (80015f8 <GestionLed+0x190>)
 80014d6:	f00b fc6f 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(GPIOB,L1_Pin);
 80014da:	2104      	movs	r1, #4
 80014dc:	4846      	ldr	r0, [pc, #280]	@ (80015f8 <GestionLed+0x190>)
 80014de:	f00b fc83 	bl	800cde8 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014e8:	4843      	ldr	r0, [pc, #268]	@ (80015f8 <GestionLed+0x190>)
 80014ea:	f00b fc65 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014f4:	4840      	ldr	r0, [pc, #256]	@ (80015f8 <GestionLed+0x190>)
 80014f6:	f00b fc5f 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001500:	483d      	ldr	r0, [pc, #244]	@ (80015f8 <GestionLed+0x190>)
 8001502:	f00b fc59 	bl	800cdb8 <HAL_GPIO_WritePin>
	break;
 8001506:	e072      	b.n	80015ee <GestionLed+0x186>

	case 2:// Affichage de l'alarme temp
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2102      	movs	r1, #2
 800150c:	483a      	ldr	r0, [pc, #232]	@ (80015f8 <GestionLed+0x190>)
 800150e:	f00b fc53 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2104      	movs	r1, #4
 8001516:	4838      	ldr	r0, [pc, #224]	@ (80015f8 <GestionLed+0x190>)
 8001518:	f00b fc4e 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(GPIOB,L2_Pin);
 800151c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001520:	4835      	ldr	r0, [pc, #212]	@ (80015f8 <GestionLed+0x190>)
 8001522:	f00b fc61 	bl	800cde8 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800152c:	4832      	ldr	r0, [pc, #200]	@ (80015f8 <GestionLed+0x190>)
 800152e:	f00b fc43 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001538:	482f      	ldr	r0, [pc, #188]	@ (80015f8 <GestionLed+0x190>)
 800153a:	f00b fc3d 	bl	800cdb8 <HAL_GPIO_WritePin>
	break;
 800153e:	e056      	b.n	80015ee <GestionLed+0x186>

	case 3:// Affichage de l'alarm accel
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2102      	movs	r1, #2
 8001544:	482c      	ldr	r0, [pc, #176]	@ (80015f8 <GestionLed+0x190>)
 8001546:	f00b fc37 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2104      	movs	r1, #4
 800154e:	482a      	ldr	r0, [pc, #168]	@ (80015f8 <GestionLed+0x190>)
 8001550:	f00b fc32 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800155a:	4827      	ldr	r0, [pc, #156]	@ (80015f8 <GestionLed+0x190>)
 800155c:	f00b fc2c 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001566:	4824      	ldr	r0, [pc, #144]	@ (80015f8 <GestionLed+0x190>)
 8001568:	f00b fc26 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001572:	4821      	ldr	r0, [pc, #132]	@ (80015f8 <GestionLed+0x190>)
 8001574:	f00b fc20 	bl	800cdb8 <HAL_GPIO_WritePin>
	break;
 8001578:	e039      	b.n	80015ee <GestionLed+0x186>

	case 4:// Extinction des leds
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2102      	movs	r1, #2
 800157e:	481e      	ldr	r0, [pc, #120]	@ (80015f8 <GestionLed+0x190>)
 8001580:	f00b fc1a 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2104      	movs	r1, #4
 8001588:	481b      	ldr	r0, [pc, #108]	@ (80015f8 <GestionLed+0x190>)
 800158a:	f00b fc15 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001594:	4818      	ldr	r0, [pc, #96]	@ (80015f8 <GestionLed+0x190>)
 8001596:	f00b fc0f 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015a0:	4815      	ldr	r0, [pc, #84]	@ (80015f8 <GestionLed+0x190>)
 80015a2:	f00b fc09 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015ac:	4812      	ldr	r0, [pc, #72]	@ (80015f8 <GestionLed+0x190>)
 80015ae:	f00b fc03 	bl	800cdb8 <HAL_GPIO_WritePin>
	break;
 80015b2:	e01c      	b.n	80015ee <GestionLed+0x186>

	case 5:// Extinction des leds
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2102      	movs	r1, #2
 80015b8:	480f      	ldr	r0, [pc, #60]	@ (80015f8 <GestionLed+0x190>)
 80015ba:	f00b fbfd 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 1);
 80015be:	2201      	movs	r2, #1
 80015c0:	2104      	movs	r1, #4
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <GestionLed+0x190>)
 80015c4:	f00b fbf8 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015ce:	480a      	ldr	r0, [pc, #40]	@ (80015f8 <GestionLed+0x190>)
 80015d0:	f00b fbf2 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 1);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015da:	4807      	ldr	r0, [pc, #28]	@ (80015f8 <GestionLed+0x190>)
 80015dc:	f00b fbec 	bl	800cdb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015e6:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <GestionLed+0x190>)
 80015e8:	f00b fbe6 	bl	800cdb8 <HAL_GPIO_WritePin>
	break;
 80015ec:	bf00      	nop

	}
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40020400 	.word	0x40020400

080015fc <TIM6_IRQ>:
  uint32_t out_int;
  uint32_t out_dec;
} displayFloatToInt_t;

void TIM6_IRQ(void)	//Interruption du timer 6 à 1 seconde
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
	if(flag_irq){
 8001600:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <TIM6_IRQ+0x24>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <TIM6_IRQ+0x14>
		flag_irq = 0;
 8001608:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <TIM6_IRQ+0x24>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
	}else{
		flag_irq = 1;
	}

}
 800160e:	e002      	b.n	8001616 <TIM6_IRQ+0x1a>
		flag_irq = 1;
 8001610:	4b03      	ldr	r3, [pc, #12]	@ (8001620 <TIM6_IRQ+0x24>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	2000041c 	.word	0x2000041c

08001624 <TIM7_IRQ>:
void TIM7_IRQ(void)//Interruption du timer 7 à 1/2 seconde
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
		display_cons();
 8001628:	f000 f900 	bl	800182c <display_cons>
		flag_irq = 0;
 800162c:	4b02      	ldr	r3, [pc, #8]	@ (8001638 <TIM7_IRQ+0x14>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000041c 	.word	0x2000041c

0800163c <ACCEL_IRQ>:

void ACCEL_IRQ(void)//Interruprion de l'accel
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
	flag_irq2 = 1;
 8001640:	4b03      	ldr	r3, [pc, #12]	@ (8001650 <ACCEL_IRQ+0x14>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	2000041d 	.word	0x2000041d

08001654 <floatToInt>:
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8001654:	b5b0      	push	{r4, r5, r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  if(in >= 0.0f)
 8001660:	f04f 0100 	mov.w	r1, #0
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff fd2f 	bl	80010c8 <__aeabi_fcmpge>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <floatToInt+0x24>
  {
    out_value->sign = 0;
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e006      	b.n	8001686 <floatToInt+0x32>
  }else
  {
    out_value->sign = 1;
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
    in = -in;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001684:	60fb      	str	r3, [r7, #12]
  }

  in = in + (0.5 / pow(10, dec_prec));
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f7fe fede 	bl	8000448 <__aeabi_f2d>
 800168c:	4604      	mov	r4, r0
 800168e:	460d      	mov	r5, r1
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7fe fec7 	bl	8000424 <__aeabi_i2d>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	f04f 0000 	mov.w	r0, #0
 800169e:	492a      	ldr	r1, [pc, #168]	@ (8001748 <floatToInt+0xf4>)
 80016a0:	f011 fc9a 	bl	8012fd8 <pow>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	f04f 0000 	mov.w	r0, #0
 80016ac:	4927      	ldr	r1, [pc, #156]	@ (800174c <floatToInt+0xf8>)
 80016ae:	f7ff f84d 	bl	800074c <__aeabi_ddiv>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7fe fd67 	bl	800018c <__adddf3>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff f9ef 	bl	8000aa8 <__aeabi_d2f>
 80016ca:	4603      	mov	r3, r0
 80016cc:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7ff fd0e 	bl	80010f0 <__aeabi_f2iz>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fae7 	bl	8000cb4 <__aeabi_ui2f>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4619      	mov	r1, r3
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7ff fa30 	bl	8000b50 <__aeabi_fsub>
 80016f0:	4603      	mov	r3, r0
 80016f2:	60fb      	str	r3, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f7fe fea7 	bl	8000448 <__aeabi_f2d>
 80016fa:	4604      	mov	r4, r0
 80016fc:	460d      	mov	r5, r1
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7fe fe90 	bl	8000424 <__aeabi_i2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	f04f 0000 	mov.w	r0, #0
 800170c:	490e      	ldr	r1, [pc, #56]	@ (8001748 <floatToInt+0xf4>)
 800170e:	f011 fc63 	bl	8012fd8 <pow>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4620      	mov	r0, r4
 8001718:	4629      	mov	r1, r5
 800171a:	f7fe feed 	bl	80004f8 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f011 fcc5 	bl	80130b4 <trunc>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f7ff f991 	bl	8000a58 <__aeabi_d2iz>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	609a      	str	r2, [r3, #8]
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bdb0      	pop	{r4, r5, r7, pc}
 8001746:	bf00      	nop
 8001748:	40240000 	.word	0x40240000
 800174c:	3fe00000 	.word	0x3fe00000

08001750 <Conf_TEMP>:
/*Fonction d'initialisation du capteur de temperature */
int Conf_TEMP(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	 if(IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE) != BSP_ERROR_NONE)
 8001754:	2101      	movs	r1, #1
 8001756:	2002      	movs	r0, #2
 8001758:	f009 fa6e 	bl	800ac38 <IKS01A3_ENV_SENSOR_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <Conf_TEMP+0x16>
	 {
		 return 1;
 8001762:	2301      	movs	r3, #1
 8001764:	e00b      	b.n	800177e <Conf_TEMP+0x2e>
	 }
	 if(IKS01A3_ENV_SENSOR_SetOutputDataRate(IKS01A3_STTS751_0, ENV_TEMPERATURE, 4.0f) != BSP_ERROR_NONE)
 8001766:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800176a:	2101      	movs	r1, #1
 800176c:	2002      	movs	r0, #2
 800176e:	f009 fb71 	bl	800ae54 <IKS01A3_ENV_SENSOR_SetOutputDataRate>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <Conf_TEMP+0x2c>
	 {
		 return 1;
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <Conf_TEMP+0x2e>
	 }
	return 0;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <Aquire_temp>:

void Aquire_temp(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &Temperature);
 8001788:	4a09      	ldr	r2, [pc, #36]	@ (80017b0 <Aquire_temp+0x2c>)
 800178a:	2101      	movs	r1, #1
 800178c:	2002      	movs	r0, #2
 800178e:	f009 fba3 	bl	800aed8 <IKS01A3_ENV_SENSOR_GetValue>
	comp.temp = Temperature*100;
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <Aquire_temp+0x2c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4907      	ldr	r1, [pc, #28]	@ (80017b4 <Aquire_temp+0x30>)
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fae3 	bl	8000d64 <__aeabi_fmul>
 800179e:	4603      	mov	r3, r0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fccb 	bl	800113c <__aeabi_f2uiz>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4a03      	ldr	r2, [pc, #12]	@ (80017b8 <Aquire_temp+0x34>)
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000418 	.word	0x20000418
 80017b4:	42c80000 	.word	0x42c80000
 80017b8:	20000424 	.word	0x20000424

080017bc <display_temp>:
/*Fonction d'affichage de la temperature sur les 7 segments*/
void display_temp(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
	displayFloatToInt_t out_value;
	floatToInt(Temperature, &out_value, 2);
 80017c2:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <display_temp+0x64>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	1d39      	adds	r1, r7, #4
 80017c8:	2202      	movs	r2, #2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff42 	bl	8001654 <floatToInt>
	sprintf(buff, "%d", (int)out_value.out_int);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4913      	ldr	r1, [pc, #76]	@ (8001824 <display_temp+0x68>)
 80017d6:	4814      	ldr	r0, [pc, #80]	@ (8001828 <display_temp+0x6c>)
 80017d8:	f010 fbc2 	bl	8011f60 <siprintf>
	MAX7219_DisplayChar('1',buff[0]);
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <display_temp+0x6c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	2031      	movs	r0, #49	@ 0x31
 80017e4:	f000 fce7 	bl	80021b6 <MAX7219_DisplayChar>
	MAX7219_DisplayChar1('2',buff[1]);
 80017e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <display_temp+0x6c>)
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	4619      	mov	r1, r3
 80017ee:	2032      	movs	r0, #50	@ 0x32
 80017f0:	f000 fcf8 	bl	80021e4 <MAX7219_DisplayChar1>
	sprintf(buff, "%d", (int)out_value.out_dec);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	461a      	mov	r2, r3
 80017f8:	490a      	ldr	r1, [pc, #40]	@ (8001824 <display_temp+0x68>)
 80017fa:	480b      	ldr	r0, [pc, #44]	@ (8001828 <display_temp+0x6c>)
 80017fc:	f010 fbb0 	bl	8011f60 <siprintf>
	MAX7219_DisplayChar('3',buff[0]);
 8001800:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <display_temp+0x6c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	2033      	movs	r0, #51	@ 0x33
 8001808:	f000 fcd5 	bl	80021b6 <MAX7219_DisplayChar>
	MAX7219_DisplayChar('4',buff[1]);
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <display_temp+0x6c>)
 800180e:	785b      	ldrb	r3, [r3, #1]
 8001810:	4619      	mov	r1, r3
 8001812:	2034      	movs	r0, #52	@ 0x34
 8001814:	f000 fccf 	bl	80021b6 <MAX7219_DisplayChar>
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000418 	.word	0x20000418
 8001824:	08013e70 	.word	0x08013e70
 8001828:	20000420 	.word	0x20000420

0800182c <display_cons>:
/*Fonction d'affichage de la temperature sur les 7 segments*/
void display_cons(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
	GestionLed(Aff_Cons);
 8001832:	2001      	movs	r0, #1
 8001834:	f7ff fe18 	bl	8001468 <GestionLed>
	char buff[4];
	uint32_t cons;
	cons = Aquire_cons();
 8001838:	f000 f822 	bl	8001880 <Aquire_cons>
 800183c:	6078      	str	r0, [r7, #4]
	sprintf(buff, "%4ld", cons);
 800183e:	463b      	mov	r3, r7
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	490e      	ldr	r1, [pc, #56]	@ (800187c <display_cons+0x50>)
 8001844:	4618      	mov	r0, r3
 8001846:	f010 fb8b 	bl	8011f60 <siprintf>
	MAX7219_DisplayChar('1',buff[0]);
 800184a:	783b      	ldrb	r3, [r7, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	2031      	movs	r0, #49	@ 0x31
 8001850:	f000 fcb1 	bl	80021b6 <MAX7219_DisplayChar>
	MAX7219_DisplayChar1('2',buff[1]);
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	4619      	mov	r1, r3
 8001858:	2032      	movs	r0, #50	@ 0x32
 800185a:	f000 fcc3 	bl	80021e4 <MAX7219_DisplayChar1>
	MAX7219_DisplayChar('3',buff[2]);
 800185e:	78bb      	ldrb	r3, [r7, #2]
 8001860:	4619      	mov	r1, r3
 8001862:	2033      	movs	r0, #51	@ 0x33
 8001864:	f000 fca7 	bl	80021b6 <MAX7219_DisplayChar>
	MAX7219_DisplayChar('4',buff[3]);
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	4619      	mov	r1, r3
 800186c:	2034      	movs	r0, #52	@ 0x34
 800186e:	f000 fca2 	bl	80021b6 <MAX7219_DisplayChar>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	08013e74 	.word	0x08013e74

08001880 <Aquire_cons>:
	snprintf(dataOut1, MAX_BUF_SIZE, "Temperature: %c%d.%02d degC ", ((out_value.sign > 0) ? '-' : '+'), (int)out_value.out_int, (int)out_value.out_dec);
	printf("%s \r\n", dataOut1);
}
/*Fonction pour recuperer la valeur sur l'ADC*/
uint32_t Aquire_cons(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
	uint32_t Consigne = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc);
 800188a:	480b      	ldr	r0, [pc, #44]	@ (80018b8 <Aquire_cons+0x38>)
 800188c:	f00a fb54 	bl	800bf38 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1000);
 8001890:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001894:	4808      	ldr	r0, [pc, #32]	@ (80018b8 <Aquire_cons+0x38>)
 8001896:	f00a fbdb 	bl	800c050 <HAL_ADC_PollForConversion>
	Consigne = HAL_ADC_GetValue(&hadc);
 800189a:	4807      	ldr	r0, [pc, #28]	@ (80018b8 <Aquire_cons+0x38>)
 800189c:	f00a fc68 	bl	800c170 <HAL_ADC_GetValue>
 80018a0:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc);
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <Aquire_cons+0x38>)
 80018a4:	f00a fba8 	bl	800bff8 <HAL_ADC_Stop>
	comp.cons = Consigne;
 80018a8:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <Aquire_cons+0x3c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6053      	str	r3, [r2, #4]
	return Consigne;
 80018ae:	687b      	ldr	r3, [r7, #4]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000224 	.word	0x20000224
 80018bc:	20000424 	.word	0x20000424

080018c0 <motor>:

void motor(int MotorState)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	if(MotorState){
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00c      	beq.n	80018e8 <motor+0x28>

		TIM3->PSC = 32000;
 80018ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <motor+0x40>)
 80018d0:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80018d4:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 1000;
 80018d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <motor+0x40>)
 80018d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018dc:	62da      	str	r2, [r3, #44]	@ 0x2c
		HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);
 80018de:	2100      	movs	r1, #0
 80018e0:	4808      	ldr	r0, [pc, #32]	@ (8001904 <motor+0x44>)
 80018e2:	f00f f971 	bl	8010bc8 <HAL_TIM_PWM_Start_IT>
	else{
		GestionLed(All_Off);
		HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_1);
		//printf("Motor Disable \n\r");
	}
}
 80018e6:	e006      	b.n	80018f6 <motor+0x36>
		GestionLed(All_Off);
 80018e8:	2004      	movs	r0, #4
 80018ea:	f7ff fdbd 	bl	8001468 <GestionLed>
		HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_1);
 80018ee:	2100      	movs	r1, #0
 80018f0:	4804      	ldr	r0, [pc, #16]	@ (8001904 <motor+0x44>)
 80018f2:	f00f fa4b 	bl	8010d8c <HAL_TIM_PWM_Stop_IT>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40000400 	.word	0x40000400
 8001904:	20000310 	.word	0x20000310

08001908 <buzzer>:

void buzzer (int BuzzerState)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if(BuzzerState)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00e      	beq.n	8001934 <buzzer+0x2c>
	{
		GestionLed(Aff_AlarmAccel);
 8001916:	2003      	movs	r0, #3
 8001918:	f7ff fda6 	bl	8001468 <GestionLed>
		TIM3->PSC = 31;
 800191c:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <buzzer+0x44>)
 800191e:	221f      	movs	r2, #31
 8001920:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 2278;
 8001922:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <buzzer+0x44>)
 8001924:	f640 02e6 	movw	r2, #2278	@ 0x8e6
 8001928:	62da      	str	r2, [r3, #44]	@ 0x2c
		HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);
 800192a:	2104      	movs	r1, #4
 800192c:	4808      	ldr	r0, [pc, #32]	@ (8001950 <buzzer+0x48>)
 800192e:	f00f f94b 	bl	8010bc8 <HAL_TIM_PWM_Start_IT>
	}
	else{
		GestionLed(All_Off);
		HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_2);
	}
}
 8001932:	e006      	b.n	8001942 <buzzer+0x3a>
		GestionLed(All_Off);
 8001934:	2004      	movs	r0, #4
 8001936:	f7ff fd97 	bl	8001468 <GestionLed>
		HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_2);
 800193a:	2104      	movs	r1, #4
 800193c:	4804      	ldr	r0, [pc, #16]	@ (8001950 <buzzer+0x48>)
 800193e:	f00f fa25 	bl	8010d8c <HAL_TIM_PWM_Stop_IT>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40000400 	.word	0x40000400
 8001950:	20000310 	.word	0x20000310

08001954 <Conf_ACCEL>:

int Conf_ACCEL(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	  if(IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO) != BSP_ERROR_NONE)
 8001958:	2102      	movs	r1, #2
 800195a:	2001      	movs	r0, #1
 800195c:	f009 fd46 	bl	800b3ec <IKS01A3_MOTION_SENSOR_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d004      	beq.n	8001970 <Conf_ACCEL+0x1c>
	  {
	 	  printf("Pb of SENSOR_Init\n\r");
 8001966:	4817      	ldr	r0, [pc, #92]	@ (80019c4 <Conf_ACCEL+0x70>)
 8001968:	f010 fa8a 	bl	8011e80 <iprintf>
	 	  return 1;
 800196c:	2301      	movs	r3, #1
 800196e:	e026      	b.n	80019be <Conf_ACCEL+0x6a>
	  }

	  if(IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE)
 8001970:	2202      	movs	r2, #2
 8001972:	2102      	movs	r1, #2
 8001974:	2001      	movs	r0, #1
 8001976:	f009 fe79 	bl	800b66c <IKS01A3_MOTION_SENSOR_SetFullScale>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d004      	beq.n	800198a <Conf_ACCEL+0x36>
	   {
	  	  printf("Pb of SENSOR_SetFullScale\n\r");
 8001980:	4811      	ldr	r0, [pc, #68]	@ (80019c8 <Conf_ACCEL+0x74>)
 8001982:	f010 fa7d 	bl	8011e80 <iprintf>
	  	  return 1;
 8001986:	2301      	movs	r3, #1
 8001988:	e019      	b.n	80019be <Conf_ACCEL+0x6a>
	   }

	  if(IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, 200.0) != BSP_ERROR_NONE)
 800198a:	4a10      	ldr	r2, [pc, #64]	@ (80019cc <Conf_ACCEL+0x78>)
 800198c:	2102      	movs	r1, #2
 800198e:	2001      	movs	r0, #1
 8001990:	f009 fe28 	bl	800b5e4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <Conf_ACCEL+0x50>
	   {
	  	  printf("Pb of accelerometer SENSOR_SetOutputDataRate\n\r");
 800199a:	480d      	ldr	r0, [pc, #52]	@ (80019d0 <Conf_ACCEL+0x7c>)
 800199c:	f010 fa70 	bl	8011e80 <iprintf>
	  	  return 1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e00c      	b.n	80019be <Conf_ACCEL+0x6a>
	   }

	  if(IKS01A3_MOTION_SENSOR_Enable_6D_Orientation(IKS01A3_LIS2DW12_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 80019a4:	2100      	movs	r1, #0
 80019a6:	2001      	movs	r0, #1
 80019a8:	f00a f8b4 	bl	800bb14 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <Conf_ACCEL+0x68>
		{
		  printf("Pb of accelerometer SENSOR_SetOutputDataRate\n\r");
 80019b2:	4807      	ldr	r0, [pc, #28]	@ (80019d0 <Conf_ACCEL+0x7c>)
 80019b4:	f010 fa64 	bl	8011e80 <iprintf>
		  return 1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <Conf_ACCEL+0x6a>
		}
return 0;
 80019bc:	2300      	movs	r3, #0

}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	08013ea4 	.word	0x08013ea4
 80019c8:	08013eb8 	.word	0x08013eb8
 80019cc:	43480000 	.word	0x43480000
 80019d0:	08013ed4 	.word	0x08013ed4

080019d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d8:	f00a f8d8 	bl	800bb8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019dc:	f000 f87c 	bl	8001ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e0:	f000 fabc 	bl	8001f5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019e4:	f000 fa90 	bl	8001f08 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80019e8:	f000 f91c 	bl	8001c24 <MX_SPI1_Init>
  MX_ADC_Init();
 80019ec:	f000 f8c2 	bl	8001b74 <MX_ADC_Init>
  MX_TIM3_Init();
 80019f0:	f000 f99a 	bl	8001d28 <MX_TIM3_Init>
  MX_TIM6_Init();
 80019f4:	f000 fa1c 	bl	8001e30 <MX_TIM6_Init>
  MX_TIM7_Init();
 80019f8:	f000 fa50 	bl	8001e9c <MX_TIM7_Init>
  MX_TIM2_Init();
 80019fc:	f000 f948 	bl	8001c90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("PROJET EnviroSense !!! \r\n");
 8001a00:	482b      	ldr	r0, [pc, #172]	@ (8001ab0 <main+0xdc>)
 8001a02:	f010 faa5 	bl	8011f50 <puts>
  MAX7219_Init();
 8001a06:	f000 fb81 	bl	800210c <MAX7219_Init>
  MAX7219_DisplayTestStart();
 8001a0a:	f000 fb9c 	bl	8002146 <MAX7219_DisplayTestStart>
  HAL_Delay(2000);
 8001a0e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a12:	f00a f929 	bl	800bc68 <HAL_Delay>
  MAX7219_DisplayTestStop();
 8001a16:	f000 fb9e 	bl	8002156 <MAX7219_DisplayTestStop>
  printf("Display test finished \r\n");
 8001a1a:	4826      	ldr	r0, [pc, #152]	@ (8001ab4 <main+0xe0>)
 8001a1c:	f010 fa98 	bl	8011f50 <puts>
  Conf_TEMP();
 8001a20:	f7ff fe96 	bl	8001750 <Conf_TEMP>
  Conf_ACCEL();
 8001a24:	f7ff ff96 	bl	8001954 <Conf_ACCEL>
  if(HAL_TIM_Base_Start_IT(&htim6)!= HAL_OK)
 8001a28:	4823      	ldr	r0, [pc, #140]	@ (8001ab8 <main+0xe4>)
 8001a2a:	f00f f80d 	bl	8010a48 <HAL_TIM_Base_Start_IT>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <main+0x64>
  {
    Error_Handler();
 8001a34:	f000 fb4e 	bl	80020d4 <Error_Handler>
  }
  printf("Timer 6 enabled\r\n");
 8001a38:	4820      	ldr	r0, [pc, #128]	@ (8001abc <main+0xe8>)
 8001a3a:	f010 fa89 	bl	8011f50 <puts>

  HAL_TIM_Base_Start_IT(&htim3);
 8001a3e:	4820      	ldr	r0, [pc, #128]	@ (8001ac0 <main+0xec>)
 8001a40:	f00f f802 	bl	8010a48 <HAL_TIM_Base_Start_IT>
  Aquire_cons();
 8001a44:	f7ff ff1c 	bl	8001880 <Aquire_cons>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Aquire_temp();	//Aquisition de la temperature
 8001a48:	f7ff fe9c 	bl	8001784 <Aquire_temp>

	  if(flag_irq ==1) //On test le flag du timer 6
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac4 <main+0xf0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d117      	bne.n	8001a84 <main+0xb0>
	  {
		  display_temp();	//Affichage de la température sur les afficheurs 7 segments
 8001a54:	f7ff feb2 	bl	80017bc <display_temp>
		  if(comp.cons < comp.temp){
 8001a58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <main+0xf4>)
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <main+0xf4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d209      	bcs.n	8001a78 <main+0xa4>
			  printf("consigne < temperature !! \r\n");
 8001a64:	4819      	ldr	r0, [pc, #100]	@ (8001acc <main+0xf8>)
 8001a66:	f010 fa73 	bl	8011f50 <puts>
			  GestionLed(Aff_AlarmTemp);
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f7ff fcfc 	bl	8001468 <GestionLed>
			  motor(1);//On active le moteur
 8001a70:	2001      	movs	r0, #1
 8001a72:	f7ff ff25 	bl	80018c0 <motor>
 8001a76:	e005      	b.n	8001a84 <main+0xb0>
		  }
		  else{
			  GestionLed(Aff_Temp);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff fcf5 	bl	8001468 <GestionLed>
			 motor(0);//On eteind le moteur
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff ff1e 	bl	80018c0 <motor>
		  }
	  }
	  if(flag_irq2 ==1)//On test le flag de l'interruption de l'accel
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <main+0xfc>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d1dd      	bne.n	8001a48 <main+0x74>
	  {
		  flag_irq2 = 0;
 8001a8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <main+0xfc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
		  printf("je buzzz !! \r\n");
 8001a92:	4810      	ldr	r0, [pc, #64]	@ (8001ad4 <main+0x100>)
 8001a94:	f010 fa5c 	bl	8011f50 <puts>
		  buzzer (1);// On buzzz
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff ff35 	bl	8001908 <buzzer>
		  HAL_Delay(1000); //On attend 1 seconde
 8001a9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aa2:	f00a f8e1 	bl	800bc68 <HAL_Delay>
		  buzzer(0);//On eteind le buzzer
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff ff2e 	bl	8001908 <buzzer>
	  Aquire_temp();	//Aquisition de la temperature
 8001aac:	e7cc      	b.n	8001a48 <main+0x74>
 8001aae:	bf00      	nop
 8001ab0:	08013f04 	.word	0x08013f04
 8001ab4:	08013f20 	.word	0x08013f20
 8001ab8:	20000350 	.word	0x20000350
 8001abc:	08013f38 	.word	0x08013f38
 8001ac0:	20000310 	.word	0x20000310
 8001ac4:	2000041c 	.word	0x2000041c
 8001ac8:	20000424 	.word	0x20000424
 8001acc:	08013f4c 	.word	0x08013f4c
 8001ad0:	2000041d 	.word	0x2000041d
 8001ad4:	08013f68 	.word	0x08013f68

08001ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b092      	sub	sp, #72	@ 0x48
 8001adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	2234      	movs	r2, #52	@ 0x34
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f010 fb32 	bl	8012150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aec:	463b      	mov	r3, r7
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afa:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <SystemClock_Config+0x98>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001b02:	4a1b      	ldr	r2, [pc, #108]	@ (8001b70 <SystemClock_Config+0x98>)
 8001b04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b08:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b12:	2310      	movs	r3, #16
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b16:	2302      	movs	r3, #2
 8001b18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001b1e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001b22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001b24:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001b28:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00d febe 	bl	800f8b0 <HAL_RCC_OscConfig>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b3a:	f000 facb 	bl	80020d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b3e:	230f      	movs	r3, #15
 8001b40:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b42:	2303      	movs	r3, #3
 8001b44:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b52:	463b      	mov	r3, r7
 8001b54:	2101      	movs	r1, #1
 8001b56:	4618      	mov	r0, r3
 8001b58:	f00e f9da 	bl	800ff10 <HAL_RCC_ClockConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b62:	f000 fab7 	bl	80020d4 <Error_Handler>
  }
}
 8001b66:	bf00      	nop
 8001b68:	3748      	adds	r7, #72	@ 0x48
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40007000 	.word	0x40007000

08001b74 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001b84:	4b25      	ldr	r3, [pc, #148]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001b86:	4a26      	ldr	r2, [pc, #152]	@ (8001c20 <MX_ADC_Init+0xac>)
 8001b88:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b8a:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001b90:	4b22      	ldr	r3, [pc, #136]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b96:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001bae:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001bba:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8001bc2:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001bd2:	2210      	movs	r2, #16
 8001bd4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001be4:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001be6:	f00a f861 	bl	800bcac <HAL_ADC_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001bf0:	f000 fa70 	bl	80020d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <MX_ADC_Init+0xa8>)
 8001c06:	f00a fabf 	bl	800c188 <HAL_ADC_ConfigChannel>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001c10:	f000 fa60 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000224 	.word	0x20000224
 8001c20:	40012400 	.word	0x40012400

08001c24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c28:	4b17      	ldr	r3, [pc, #92]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c2a:	4a18      	ldr	r2, [pc, #96]	@ (8001c8c <MX_SPI1_Init+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c2e:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c36:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c42:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c56:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c62:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c68:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c70:	220a      	movs	r2, #10
 8001c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c74:	4804      	ldr	r0, [pc, #16]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c76:	f00e fc11 	bl	801049c <HAL_SPI_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c80:	f000 fa28 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000278 	.word	0x20000278
 8001c8c:	40013000 	.word	0x40013000

08001c90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cac:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <MX_TIM2_Init+0x94>)
 8001cae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <MX_TIM2_Init+0x94>)
 8001cb6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001cba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbc:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <MX_TIM2_Init+0x94>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8001cc2:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <MX_TIM2_Init+0x94>)
 8001cc4:	22c8      	movs	r2, #200	@ 0xc8
 8001cc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc8:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <MX_TIM2_Init+0x94>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <MX_TIM2_Init+0x94>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cd4:	4813      	ldr	r0, [pc, #76]	@ (8001d24 <MX_TIM2_Init+0x94>)
 8001cd6:	f00e fe77 	bl	80109c8 <HAL_TIM_Base_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ce0:	f000 f9f8 	bl	80020d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cea:	f107 0308 	add.w	r3, r7, #8
 8001cee:	4619      	mov	r1, r3
 8001cf0:	480c      	ldr	r0, [pc, #48]	@ (8001d24 <MX_TIM2_Init+0x94>)
 8001cf2:	f00f fa73 	bl	80111dc <HAL_TIM_ConfigClockSource>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001cfc:	f000 f9ea 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d00:	2300      	movs	r3, #0
 8001d02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d08:	463b      	mov	r3, r7
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <MX_TIM2_Init+0x94>)
 8001d0e:	f00f fd71 	bl	80117f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d18:	f000 f9dc 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d1c:	bf00      	nop
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200002d0 	.word	0x200002d0

08001d28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	@ 0x28
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2e:	f107 0318 	add.w	r3, r7, #24
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d46:	463b      	mov	r3, r7
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d52:	4b35      	ldr	r3, [pc, #212]	@ (8001e28 <MX_TIM3_Init+0x100>)
 8001d54:	4a35      	ldr	r2, [pc, #212]	@ (8001e2c <MX_TIM3_Init+0x104>)
 8001d56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000;
 8001d58:	4b33      	ldr	r3, [pc, #204]	@ (8001e28 <MX_TIM3_Init+0x100>)
 8001d5a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001d5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d60:	4b31      	ldr	r3, [pc, #196]	@ (8001e28 <MX_TIM3_Init+0x100>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001d66:	4b30      	ldr	r3, [pc, #192]	@ (8001e28 <MX_TIM3_Init+0x100>)
 8001d68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e28 <MX_TIM3_Init+0x100>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d74:	4b2c      	ldr	r3, [pc, #176]	@ (8001e28 <MX_TIM3_Init+0x100>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d7a:	482b      	ldr	r0, [pc, #172]	@ (8001e28 <MX_TIM3_Init+0x100>)
 8001d7c:	f00e fe24 	bl	80109c8 <HAL_TIM_Base_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001d86:	f000 f9a5 	bl	80020d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d8e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d90:	f107 0318 	add.w	r3, r7, #24
 8001d94:	4619      	mov	r1, r3
 8001d96:	4824      	ldr	r0, [pc, #144]	@ (8001e28 <MX_TIM3_Init+0x100>)
 8001d98:	f00f fa20 	bl	80111dc <HAL_TIM_ConfigClockSource>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001da2:	f000 f997 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001da6:	4820      	ldr	r0, [pc, #128]	@ (8001e28 <MX_TIM3_Init+0x100>)
 8001da8:	f00e fec6 	bl	8010b38 <HAL_TIM_PWM_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001db2:	f000 f98f 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4818      	ldr	r0, [pc, #96]	@ (8001e28 <MX_TIM3_Init+0x100>)
 8001dc6:	f00f fd15 	bl	80117f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001dd0:	f000 f980 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd4:	2360      	movs	r3, #96	@ 0x60
 8001dd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001dd8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001ddc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de6:	463b      	mov	r3, r7
 8001de8:	2200      	movs	r2, #0
 8001dea:	4619      	mov	r1, r3
 8001dec:	480e      	ldr	r0, [pc, #56]	@ (8001e28 <MX_TIM3_Init+0x100>)
 8001dee:	f00f f933 	bl	8011058 <HAL_TIM_PWM_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001df8:	f000 f96c 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.Pulse = 1319;
 8001dfc:	f240 5327 	movw	r3, #1319	@ 0x527
 8001e00:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e02:	463b      	mov	r3, r7
 8001e04:	2204      	movs	r2, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4807      	ldr	r0, [pc, #28]	@ (8001e28 <MX_TIM3_Init+0x100>)
 8001e0a:	f00f f925 	bl	8011058 <HAL_TIM_PWM_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001e14:	f000 f95e 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e18:	4803      	ldr	r0, [pc, #12]	@ (8001e28 <MX_TIM3_Init+0x100>)
 8001e1a:	f000 fb9f 	bl	800255c <HAL_TIM_MspPostInit>

}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	@ 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000310 	.word	0x20000310
 8001e2c:	40000400 	.word	0x40000400

08001e30 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e36:	463b      	mov	r3, r7
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <MX_TIM6_Init+0x64>)
 8001e40:	4a15      	ldr	r2, [pc, #84]	@ (8001e98 <MX_TIM6_Init+0x68>)
 8001e42:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000;
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <MX_TIM6_Init+0x64>)
 8001e46:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001e4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <MX_TIM6_Init+0x64>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <MX_TIM6_Init+0x64>)
 8001e54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e58:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e94 <MX_TIM6_Init+0x64>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e60:	480c      	ldr	r0, [pc, #48]	@ (8001e94 <MX_TIM6_Init+0x64>)
 8001e62:	f00e fdb1 	bl	80109c8 <HAL_TIM_Base_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e6c:	f000 f932 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e78:	463b      	mov	r3, r7
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	@ (8001e94 <MX_TIM6_Init+0x64>)
 8001e7e:	f00f fcb9 	bl	80117f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e88:	f000 f924 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000350 	.word	0x20000350
 8001e98:	40001000 	.word	0x40001000

08001e9c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001eaa:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <MX_TIM7_Init+0x64>)
 8001eac:	4a15      	ldr	r2, [pc, #84]	@ (8001f04 <MX_TIM7_Init+0x68>)
 8001eae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32000;
 8001eb0:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <MX_TIM7_Init+0x64>)
 8001eb2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001eb6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <MX_TIM7_Init+0x64>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <MX_TIM7_Init+0x64>)
 8001ec0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ec4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <MX_TIM7_Init+0x64>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ecc:	480c      	ldr	r0, [pc, #48]	@ (8001f00 <MX_TIM7_Init+0x64>)
 8001ece:	f00e fd7b 	bl	80109c8 <HAL_TIM_Base_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001ed8:	f000 f8fc 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <MX_TIM7_Init+0x64>)
 8001eea:	f00f fc83 	bl	80117f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001ef4:	f000 f8ee 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000390 	.word	0x20000390
 8001f04:	40001400 	.word	0x40001400

08001f08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	@ (8001f58 <MX_USART2_UART_Init+0x50>)
 8001f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f12:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f2e:	220c      	movs	r2, #12
 8001f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f32:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f38:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f3e:	4805      	ldr	r0, [pc, #20]	@ (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f40:	f00f fcb6 	bl	80118b0 <HAL_UART_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f4a:	f000 f8c3 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200003d0 	.word	0x200003d0
 8001f58:	40004400 	.word	0x40004400

08001f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	@ 0x28
 8001f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	4b4b      	ldr	r3, [pc, #300]	@ (80020a0 <MX_GPIO_Init+0x144>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4a4a      	ldr	r2, [pc, #296]	@ (80020a0 <MX_GPIO_Init+0x144>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	61d3      	str	r3, [r2, #28]
 8001f7e:	4b48      	ldr	r3, [pc, #288]	@ (80020a0 <MX_GPIO_Init+0x144>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f8a:	4b45      	ldr	r3, [pc, #276]	@ (80020a0 <MX_GPIO_Init+0x144>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a44      	ldr	r2, [pc, #272]	@ (80020a0 <MX_GPIO_Init+0x144>)
 8001f90:	f043 0320 	orr.w	r3, r3, #32
 8001f94:	61d3      	str	r3, [r2, #28]
 8001f96:	4b42      	ldr	r3, [pc, #264]	@ (80020a0 <MX_GPIO_Init+0x144>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80020a0 <MX_GPIO_Init+0x144>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4a3e      	ldr	r2, [pc, #248]	@ (80020a0 <MX_GPIO_Init+0x144>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	61d3      	str	r3, [r2, #28]
 8001fae:	4b3c      	ldr	r3, [pc, #240]	@ (80020a0 <MX_GPIO_Init+0x144>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	4b39      	ldr	r3, [pc, #228]	@ (80020a0 <MX_GPIO_Init+0x144>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a38      	ldr	r2, [pc, #224]	@ (80020a0 <MX_GPIO_Init+0x144>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	61d3      	str	r3, [r2, #28]
 8001fc6:	4b36      	ldr	r3, [pc, #216]	@ (80020a0 <MX_GPIO_Init+0x144>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L0_Pin|L1_Pin|L2_Pin|L3_Pin
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f641 4106 	movw	r1, #7174	@ 0x1c06
 8001fd8:	4832      	ldr	r0, [pc, #200]	@ (80020a4 <MX_GPIO_Init+0x148>)
 8001fda:	f00a feed 	bl	800cdb8 <HAL_GPIO_WritePin>
                          |L4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fe4:	4830      	ldr	r0, [pc, #192]	@ (80020a8 <MX_GPIO_Init+0x14c>)
 8001fe6:	f00a fee7 	bl	800cdb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	482a      	ldr	r0, [pc, #168]	@ (80020ac <MX_GPIO_Init+0x150>)
 8002002:	f00a fc59 	bl	800c8b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Accel_INT_Pin */
  GPIO_InitStruct.Pin = Accel_INT_Pin;
 8002006:	2301      	movs	r3, #1
 8002008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800200a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800200e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Accel_INT_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	4822      	ldr	r0, [pc, #136]	@ (80020a4 <MX_GPIO_Init+0x148>)
 800201c:	f00a fc4c 	bl	800c8b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : L0_Pin L1_Pin L2_Pin L3_Pin
                           L4_Pin */
  GPIO_InitStruct.Pin = L0_Pin|L1_Pin|L2_Pin|L3_Pin
 8002020:	f641 4306 	movw	r3, #7174	@ 0x1c06
 8002024:	617b      	str	r3, [r7, #20]
                          |L4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	4619      	mov	r1, r3
 8002038:	481a      	ldr	r0, [pc, #104]	@ (80020a4 <MX_GPIO_Init+0x148>)
 800203a:	f00a fc3d 	bl	800c8b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800203e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002044:	2301      	movs	r3, #1
 8002046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	4619      	mov	r1, r3
 8002056:	4814      	ldr	r0, [pc, #80]	@ (80020a8 <MX_GPIO_Init+0x14c>)
 8002058:	f00a fc2e 	bl	800c8b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800205c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002062:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	480d      	ldr	r0, [pc, #52]	@ (80020a8 <MX_GPIO_Init+0x14c>)
 8002074:	f00a fc20 	bl	800c8b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	2006      	movs	r0, #6
 800207e:	f00a fb88 	bl	800c792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002082:	2006      	movs	r0, #6
 8002084:	f00a fba1 	bl	800c7ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	2028      	movs	r0, #40	@ 0x28
 800208e:	f00a fb80 	bl	800c792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002092:	2028      	movs	r0, #40	@ 0x28
 8002094:	f00a fb99 	bl	800c7ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002098:	bf00      	nop
 800209a:	3728      	adds	r7, #40	@ 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020400 	.word	0x40020400
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40020800 	.word	0x40020800

080020b0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 80020b8:	1d39      	adds	r1, r7, #4
 80020ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020be:	2201      	movs	r2, #1
 80020c0:	4803      	ldr	r0, [pc, #12]	@ (80020d0 <__io_putchar+0x20>)
 80020c2:	f00f fc45 	bl	8011950 <HAL_UART_Transmit>
	//ITM_SendChar(ch);
	return(ch);
 80020c6:	687b      	ldr	r3, [r7, #4]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200003d0 	.word	0x200003d0

080020d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq(); //Modif pour eviter le freeze
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <Error_Handler+0x4>

080020dc <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020e6:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <SPI_CS_High+0x14>)
 80020e8:	f00a fe66 	bl	800cdb8 <HAL_GPIO_WritePin>
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40020000 	.word	0x40020000

080020f4 <SPI_CS_Low>:

 void SPI_CS_Low()
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020fe:	4802      	ldr	r0, [pc, #8]	@ (8002108 <SPI_CS_Low+0x14>)
 8002100:	f00a fe5a 	bl	800cdb8 <HAL_GPIO_WritePin>
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40020000 	.word	0x40020000

0800210c <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 8002110:	2107      	movs	r1, #7
 8002112:	200b      	movs	r0, #11
 8002114:	f000 f8ca 	bl	80022ac <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8002118:	2100      	movs	r1, #0
 800211a:	2009      	movs	r0, #9
 800211c:	f000 f8c6 	bl	80022ac <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 8002120:	f000 f809 	bl	8002136 <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8002124:	f000 f817 	bl	8002156 <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8002128:	f000 f82f 	bl	800218a <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 800212c:	200f      	movs	r0, #15
 800212e:	f000 f81a 	bl	8002166 <MAX7219_SetBrightness>
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}

08002136 <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 800213a:	2101      	movs	r1, #1
 800213c:	200c      	movs	r0, #12
 800213e:	f000 f8b5 	bl	80022ac <MAX7219_Write>
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}

08002146 <MAX7219_DisplayTestStart>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStart (void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 1);                 // put MAX7219 into "display test" mode
 800214a:	2101      	movs	r1, #1
 800214c:	200f      	movs	r0, #15
 800214e:	f000 f8ad 	bl	80022ac <MAX7219_Write>
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}

08002156 <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 800215a:	2100      	movs	r1, #0
 800215c:	200f      	movs	r0, #15
 800215e:	f000 f8a5 	bl	80022ac <MAX7219_Write>
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}

08002166 <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	4619      	mov	r1, r3
 800217c:	200a      	movs	r0, #10
 800217e:	f000 f895 	bl	80022ac <MAX7219_Write>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 8002190:	2300      	movs	r3, #0
 8002192:	71fb      	strb	r3, [r7, #7]
 8002194:	e007      	b.n	80021a6 <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f886 	bl	80022ac <MAX7219_Write>
  for (i=0; i < 8; i++)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	3301      	adds	r3, #1
 80021a4:	71fb      	strb	r3, [r7, #7]
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b07      	cmp	r3, #7
 80021aa:	d9f4      	bls.n	8002196 <MAX7219_Clear+0xc>
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <MAX7219_DisplayChar>:
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar (char digit, char character)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	460a      	mov	r2, r1
 80021c0:	71fb      	strb	r3, [r7, #7]
 80021c2:	4613      	mov	r3, r2
 80021c4:	71bb      	strb	r3, [r7, #6]
  MAX7219_Write(digit, MAX7219_LookupCode(character));
 80021c6:	79bb      	ldrb	r3, [r7, #6]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f823 	bl	8002214 <MAX7219_LookupCode>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f868 	bl	80022ac <MAX7219_Write>
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <MAX7219_DisplayChar1>:

void MAX7219_DisplayChar1 (char digit, char character)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	460a      	mov	r2, r1
 80021ee:	71fb      	strb	r3, [r7, #7]
 80021f0:	4613      	mov	r3, r2
 80021f2:	71bb      	strb	r3, [r7, #6]
  MAX7219_Write(digit, MAX7219_LookupCode1(character));
 80021f4:	79bb      	ldrb	r3, [r7, #6]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f832 	bl	8002260 <MAX7219_LookupCode1>
 80021fc:	4603      	mov	r3, r0
 80021fe:	461a      	mov	r2, r3
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f000 f851 	bl	80022ac <MAX7219_Write>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <MAX7219_LookupCode>:
* Arguments  : character to display
* Returns    : segment code
*********************************************************************************************************
*/
static unsigned char MAX7219_LookupCode (char character)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	e00f      	b.n	8002244 <MAX7219_LookupCode+0x30>
    if (character == MAX7219_Font[i].ascii)
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	4a0d      	ldr	r2, [pc, #52]	@ (800225c <MAX7219_LookupCode+0x48>)
 8002228:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800222c:	79fa      	ldrb	r2, [r7, #7]
 800222e:	429a      	cmp	r2, r3
 8002230:	d105      	bne.n	800223e <MAX7219_LookupCode+0x2a>
      return MAX7219_Font[i].segs;                    // return segments code
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	4a09      	ldr	r2, [pc, #36]	@ (800225c <MAX7219_LookupCode+0x48>)
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	785b      	ldrb	r3, [r3, #1]
 800223c:	e009      	b.n	8002252 <MAX7219_LookupCode+0x3e>
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	3301      	adds	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	4a05      	ldr	r2, [pc, #20]	@ (800225c <MAX7219_LookupCode+0x48>)
 8002248:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1e9      	bne.n	8002224 <MAX7219_LookupCode+0x10>
  return 0;                                           // code not found, return null (blank)
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	08013f90 	.word	0x08013f90

08002260 <MAX7219_LookupCode1>:

static unsigned char MAX7219_LookupCode1 (char character)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font1[i].ascii1; i++)             // scan font table for ascii code
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	e00f      	b.n	8002290 <MAX7219_LookupCode1+0x30>
    if (character == MAX7219_Font1[i].ascii1)
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	4a0d      	ldr	r2, [pc, #52]	@ (80022a8 <MAX7219_LookupCode1+0x48>)
 8002274:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002278:	79fa      	ldrb	r2, [r7, #7]
 800227a:	429a      	cmp	r2, r3
 800227c:	d105      	bne.n	800228a <MAX7219_LookupCode1+0x2a>
      return MAX7219_Font1[i].segs1;                    // return segments code
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	4a09      	ldr	r2, [pc, #36]	@ (80022a8 <MAX7219_LookupCode1+0x48>)
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	785b      	ldrb	r3, [r3, #1]
 8002288:	e009      	b.n	800229e <MAX7219_LookupCode1+0x3e>
  for (i = 0; MAX7219_Font1[i].ascii1; i++)             // scan font table for ascii code
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	3301      	adds	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	4a05      	ldr	r2, [pc, #20]	@ (80022a8 <MAX7219_LookupCode1+0x48>)
 8002294:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1e9      	bne.n	8002270 <MAX7219_LookupCode1+0x10>
  return 0;                                           // code not found, return null (blank)
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	08013fcc 	.word	0x08013fcc

080022ac <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	460a      	mov	r2, r1
 80022b6:	71fb      	strb	r3, [r7, #7]
 80022b8:	4613      	mov	r3, r2
 80022ba:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 80022bc:	f7ff ff1a 	bl	80020f4 <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f80c 	bl	80022e0 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 80022c8:	79bb      	ldrb	r3, [r7, #6]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f808 	bl	80022e0 <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 80022d0:	f7ff ff04 	bl	80020dc <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 80022d4:	f7ff ff0e 	bl	80020f4 <SPI_CS_Low>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 80022ea:	1df9      	adds	r1, r7, #7
 80022ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022f0:	2201      	movs	r2, #1
 80022f2:	4803      	ldr	r0, [pc, #12]	@ (8002300 <MAX7219_SendByte+0x20>)
 80022f4:	f00e f95b 	bl	80105ae <HAL_SPI_Transmit>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000278 	.word	0x20000278

08002304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800230a:	4b15      	ldr	r3, [pc, #84]	@ (8002360 <HAL_MspInit+0x5c>)
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	4a14      	ldr	r2, [pc, #80]	@ (8002360 <HAL_MspInit+0x5c>)
 8002310:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002314:	6253      	str	r3, [r2, #36]	@ 0x24
 8002316:	4b12      	ldr	r3, [pc, #72]	@ (8002360 <HAL_MspInit+0x5c>)
 8002318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	4b0f      	ldr	r3, [pc, #60]	@ (8002360 <HAL_MspInit+0x5c>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a0e      	ldr	r2, [pc, #56]	@ (8002360 <HAL_MspInit+0x5c>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <HAL_MspInit+0x5c>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_MspInit+0x5c>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	4a08      	ldr	r2, [pc, #32]	@ (8002360 <HAL_MspInit+0x5c>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002344:	6253      	str	r3, [r2, #36]	@ 0x24
 8002346:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_MspInit+0x5c>)
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002352:	2007      	movs	r0, #7
 8002354:	f00a fa12 	bl	800c77c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	@ 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a15      	ldr	r2, [pc, #84]	@ (80023d8 <HAL_ADC_MspInit+0x74>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d123      	bne.n	80023ce <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <HAL_ADC_MspInit+0x78>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4a14      	ldr	r2, [pc, #80]	@ (80023dc <HAL_ADC_MspInit+0x78>)
 800238c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <HAL_ADC_MspInit+0x78>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239e:	4b0f      	ldr	r3, [pc, #60]	@ (80023dc <HAL_ADC_MspInit+0x78>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	4a0e      	ldr	r2, [pc, #56]	@ (80023dc <HAL_ADC_MspInit+0x78>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	61d3      	str	r3, [r2, #28]
 80023aa:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <HAL_ADC_MspInit+0x78>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023b6:	2301      	movs	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ba:	2303      	movs	r3, #3
 80023bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	4619      	mov	r1, r3
 80023c8:	4805      	ldr	r0, [pc, #20]	@ (80023e0 <HAL_ADC_MspInit+0x7c>)
 80023ca:	f00a fa75 	bl	800c8b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023ce:	bf00      	nop
 80023d0:	3728      	adds	r7, #40	@ 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40012400 	.word	0x40012400
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020000 	.word	0x40020000

080023e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	@ 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a17      	ldr	r2, [pc, #92]	@ (8002460 <HAL_SPI_MspInit+0x7c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d127      	bne.n	8002456 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002406:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <HAL_SPI_MspInit+0x80>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a16      	ldr	r2, [pc, #88]	@ (8002464 <HAL_SPI_MspInit+0x80>)
 800240c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	4b14      	ldr	r3, [pc, #80]	@ (8002464 <HAL_SPI_MspInit+0x80>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <HAL_SPI_MspInit+0x80>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a10      	ldr	r2, [pc, #64]	@ (8002464 <HAL_SPI_MspInit+0x80>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	61d3      	str	r3, [r2, #28]
 800242a:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <HAL_SPI_MspInit+0x80>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002436:	23e0      	movs	r3, #224	@ 0xe0
 8002438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002442:	2303      	movs	r3, #3
 8002444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002446:	2305      	movs	r3, #5
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	4805      	ldr	r0, [pc, #20]	@ (8002468 <HAL_SPI_MspInit+0x84>)
 8002452:	f00a fa31 	bl	800c8b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002456:	bf00      	nop
 8002458:	3728      	adds	r7, #40	@ 0x28
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40013000 	.word	0x40013000
 8002464:	40023800 	.word	0x40023800
 8002468:	40020000 	.word	0x40020000

0800246c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800247c:	d114      	bne.n	80024a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800247e:	4b33      	ldr	r3, [pc, #204]	@ (800254c <HAL_TIM_Base_MspInit+0xe0>)
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	4a32      	ldr	r2, [pc, #200]	@ (800254c <HAL_TIM_Base_MspInit+0xe0>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6253      	str	r3, [r2, #36]	@ 0x24
 800248a:	4b30      	ldr	r3, [pc, #192]	@ (800254c <HAL_TIM_Base_MspInit+0xe0>)
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2100      	movs	r1, #0
 800249a:	201c      	movs	r0, #28
 800249c:	f00a f979 	bl	800c792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024a0:	201c      	movs	r0, #28
 80024a2:	f00a f992 	bl	800c7ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80024a6:	e04c      	b.n	8002542 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <HAL_TIM_Base_MspInit+0xe4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d114      	bne.n	80024dc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024b2:	4b26      	ldr	r3, [pc, #152]	@ (800254c <HAL_TIM_Base_MspInit+0xe0>)
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	4a25      	ldr	r2, [pc, #148]	@ (800254c <HAL_TIM_Base_MspInit+0xe0>)
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	6253      	str	r3, [r2, #36]	@ 0x24
 80024be:	4b23      	ldr	r3, [pc, #140]	@ (800254c <HAL_TIM_Base_MspInit+0xe0>)
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	201d      	movs	r0, #29
 80024d0:	f00a f95f 	bl	800c792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024d4:	201d      	movs	r0, #29
 80024d6:	f00a f978 	bl	800c7ca <HAL_NVIC_EnableIRQ>
}
 80024da:	e032      	b.n	8002542 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002554 <HAL_TIM_Base_MspInit+0xe8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d114      	bne.n	8002510 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80024e6:	4b19      	ldr	r3, [pc, #100]	@ (800254c <HAL_TIM_Base_MspInit+0xe0>)
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	4a18      	ldr	r2, [pc, #96]	@ (800254c <HAL_TIM_Base_MspInit+0xe0>)
 80024ec:	f043 0310 	orr.w	r3, r3, #16
 80024f0:	6253      	str	r3, [r2, #36]	@ 0x24
 80024f2:	4b16      	ldr	r3, [pc, #88]	@ (800254c <HAL_TIM_Base_MspInit+0xe0>)
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2100      	movs	r1, #0
 8002502:	202b      	movs	r0, #43	@ 0x2b
 8002504:	f00a f945 	bl	800c792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002508:	202b      	movs	r0, #43	@ 0x2b
 800250a:	f00a f95e 	bl	800c7ca <HAL_NVIC_EnableIRQ>
}
 800250e:	e018      	b.n	8002542 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a10      	ldr	r2, [pc, #64]	@ (8002558 <HAL_TIM_Base_MspInit+0xec>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d113      	bne.n	8002542 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800251a:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <HAL_TIM_Base_MspInit+0xe0>)
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	4a0b      	ldr	r2, [pc, #44]	@ (800254c <HAL_TIM_Base_MspInit+0xe0>)
 8002520:	f043 0320 	orr.w	r3, r3, #32
 8002524:	6253      	str	r3, [r2, #36]	@ 0x24
 8002526:	4b09      	ldr	r3, [pc, #36]	@ (800254c <HAL_TIM_Base_MspInit+0xe0>)
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 1);
 8002532:	2201      	movs	r2, #1
 8002534:	2100      	movs	r1, #0
 8002536:	202c      	movs	r0, #44	@ 0x2c
 8002538:	f00a f92b 	bl	800c792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800253c:	202c      	movs	r0, #44	@ 0x2c
 800253e:	f00a f944 	bl	800c7ca <HAL_NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40000400 	.word	0x40000400
 8002554:	40001000 	.word	0x40001000
 8002558:	40001400 	.word	0x40001400

0800255c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	@ 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1f      	ldr	r2, [pc, #124]	@ (80025f8 <HAL_TIM_MspPostInit+0x9c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d137      	bne.n	80025ee <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800257e:	4b1f      	ldr	r3, [pc, #124]	@ (80025fc <HAL_TIM_MspPostInit+0xa0>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4a1e      	ldr	r2, [pc, #120]	@ (80025fc <HAL_TIM_MspPostInit+0xa0>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	61d3      	str	r3, [r2, #28]
 800258a:	4b1c      	ldr	r3, [pc, #112]	@ (80025fc <HAL_TIM_MspPostInit+0xa0>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002596:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <HAL_TIM_MspPostInit+0xa0>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	4a18      	ldr	r2, [pc, #96]	@ (80025fc <HAL_TIM_MspPostInit+0xa0>)
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	61d3      	str	r3, [r2, #28]
 80025a2:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <HAL_TIM_MspPostInit+0xa0>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzz_Pin;
 80025ae:	2380      	movs	r3, #128	@ 0x80
 80025b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ba:	2300      	movs	r3, #0
 80025bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025be:	2302      	movs	r3, #2
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Buzz_GPIO_Port, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	480d      	ldr	r0, [pc, #52]	@ (8002600 <HAL_TIM_MspPostInit+0xa4>)
 80025ca:	f00a f975 	bl	800c8b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025ce:	2310      	movs	r3, #16
 80025d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025de:	2302      	movs	r3, #2
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	4619      	mov	r1, r3
 80025e8:	4806      	ldr	r0, [pc, #24]	@ (8002604 <HAL_TIM_MspPostInit+0xa8>)
 80025ea:	f00a f965 	bl	800c8b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025ee:	bf00      	nop
 80025f0:	3728      	adds	r7, #40	@ 0x28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40000400 	.word	0x40000400
 80025fc:	40023800 	.word	0x40023800
 8002600:	40020800 	.word	0x40020800
 8002604:	40020400 	.word	0x40020400

08002608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	@ 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a17      	ldr	r2, [pc, #92]	@ (8002684 <HAL_UART_MspInit+0x7c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d127      	bne.n	800267a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800262a:	4b17      	ldr	r3, [pc, #92]	@ (8002688 <HAL_UART_MspInit+0x80>)
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	4a16      	ldr	r2, [pc, #88]	@ (8002688 <HAL_UART_MspInit+0x80>)
 8002630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002634:	6253      	str	r3, [r2, #36]	@ 0x24
 8002636:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <HAL_UART_MspInit+0x80>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <HAL_UART_MspInit+0x80>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	4a10      	ldr	r2, [pc, #64]	@ (8002688 <HAL_UART_MspInit+0x80>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	61d3      	str	r3, [r2, #28]
 800264e:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <HAL_UART_MspInit+0x80>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800265a:	230c      	movs	r3, #12
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800266a:	2307      	movs	r3, #7
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	4805      	ldr	r0, [pc, #20]	@ (800268c <HAL_UART_MspInit+0x84>)
 8002676:	f00a f91f 	bl	800c8b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800267a:	bf00      	nop
 800267c:	3728      	adds	r7, #40	@ 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40004400 	.word	0x40004400
 8002688:	40023800 	.word	0x40023800
 800268c:	40020000 	.word	0x40020000

08002690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <NMI_Handler+0x4>

08002698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <HardFault_Handler+0x4>

080026a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <MemManage_Handler+0x4>

080026a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <BusFault_Handler+0x4>

080026b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <UsageFault_Handler+0x4>

080026b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e0:	f009 faa6 	bl	800bc30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accel_INT_Pin);
 80026ec:	2001      	movs	r0, #1
 80026ee:	f00a fb95 	bl	800ce1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  printf("INT Accel !! \r\n");
 80026f2:	4803      	ldr	r0, [pc, #12]	@ (8002700 <EXTI0_IRQHandler+0x18>)
 80026f4:	f00f fc2c 	bl	8011f50 <puts>
  ACCEL_IRQ();
 80026f8:	f7fe ffa0 	bl	800163c <ACCEL_IRQ>
  /* USER CODE END EXTI0_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	08013f78 	.word	0x08013f78

08002704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002708:	4802      	ldr	r0, [pc, #8]	@ (8002714 <TIM2_IRQHandler+0x10>)
 800270a:	f00e fbc9 	bl	8010ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200002d0 	.word	0x200002d0

08002718 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800271c:	4802      	ldr	r0, [pc, #8]	@ (8002728 <TIM3_IRQHandler+0x10>)
 800271e:	f00e fbbf 	bl	8010ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000310 	.word	0x20000310

0800272c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002730:	4802      	ldr	r0, [pc, #8]	@ (800273c <I2C1_EV_IRQHandler+0x10>)
 8002732:	f00b f845 	bl	800d7c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000430 	.word	0x20000430

08002740 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002744:	4802      	ldr	r0, [pc, #8]	@ (8002750 <I2C1_ER_IRQHandler+0x10>)
 8002746:	f00b f98e 	bl	800da66 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000430 	.word	0x20000430

08002754 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002758:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800275c:	f00a fb5e 	bl	800ce1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002760:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002764:	f00a fb5a 	bl	800ce1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002768:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800276c:	f00a fb56 	bl	800ce1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}

08002774 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002778:	4803      	ldr	r0, [pc, #12]	@ (8002788 <TIM6_IRQHandler+0x14>)
 800277a:	f00e fb91 	bl	8010ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  //buzzer (0);
  TIM6_IRQ();
 800277e:	f7fe ff3d 	bl	80015fc <TIM6_IRQ>
  //printf("T6\r\n");
  /* USER CODE END TIM6_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000350 	.word	0x20000350

0800278c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002790:	4803      	ldr	r0, [pc, #12]	@ (80027a0 <TIM7_IRQHandler+0x14>)
 8002792:	f00e fb85 	bl	8010ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
	TIM7_IRQ();
 8002796:	f7fe ff45 	bl	8001624 <TIM7_IRQ>
	//printf("T7\r\n");
  /* USER CODE END TIM7_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000390 	.word	0x20000390

080027a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_11){
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027b4:	d131      	bne.n	800281a <HAL_GPIO_EXTI_Callback+0x76>
		if(!debounce_flag1){
 80027b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <HAL_GPIO_EXTI_Callback+0x80>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d12c      	bne.n	800281a <HAL_GPIO_EXTI_Callback+0x76>
			debounce_flag1 = 1;
 80027c0:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <HAL_GPIO_EXTI_Callback+0x80>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
			printf("BTN1\r\n");
 80027c6:	4818      	ldr	r0, [pc, #96]	@ (8002828 <HAL_GPIO_EXTI_Callback+0x84>)
 80027c8:	f00f fbc2 	bl	8011f50 <puts>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80027cc:	4b17      	ldr	r3, [pc, #92]	@ (800282c <HAL_GPIO_EXTI_Callback+0x88>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2200      	movs	r2, #0
 80027d2:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Start_IT(&htim2);
 80027d4:	4815      	ldr	r0, [pc, #84]	@ (800282c <HAL_GPIO_EXTI_Callback+0x88>)
 80027d6:	f00e f937 	bl	8010a48 <HAL_TIM_Base_Start_IT>
			if (bp1_state){
 80027da:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <HAL_GPIO_EXTI_Callback+0x8c>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00d      	beq.n	8002800 <HAL_GPIO_EXTI_Callback+0x5c>
				bp1_state = 0;
 80027e4:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <HAL_GPIO_EXTI_Callback+0x8c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 80027ea:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <HAL_GPIO_EXTI_Callback+0x90>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Base_Start_IT(&htim6);
 80027f2:	4810      	ldr	r0, [pc, #64]	@ (8002834 <HAL_GPIO_EXTI_Callback+0x90>)
 80027f4:	f00e f928 	bl	8010a48 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Stop_IT(&htim7);
 80027f8:	480f      	ldr	r0, [pc, #60]	@ (8002838 <HAL_GPIO_EXTI_Callback+0x94>)
 80027fa:	f00e f977 	bl	8010aec <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Start_IT(&htim7);
				HAL_TIM_Base_Stop_IT(&htim6);
				bp1_state = 1;
			}
		}}
}
 80027fe:	e00c      	b.n	800281a <HAL_GPIO_EXTI_Callback+0x76>
				__HAL_TIM_SET_COUNTER(&htim7, 0);
 8002800:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <HAL_GPIO_EXTI_Callback+0x94>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2200      	movs	r2, #0
 8002806:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Base_Start_IT(&htim7);
 8002808:	480b      	ldr	r0, [pc, #44]	@ (8002838 <HAL_GPIO_EXTI_Callback+0x94>)
 800280a:	f00e f91d 	bl	8010a48 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Stop_IT(&htim6);
 800280e:	4809      	ldr	r0, [pc, #36]	@ (8002834 <HAL_GPIO_EXTI_Callback+0x90>)
 8002810:	f00e f96c 	bl	8010aec <HAL_TIM_Base_Stop_IT>
				bp1_state = 1;
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	2000042d 	.word	0x2000042d
 8002828:	08013f88 	.word	0x08013f88
 800282c:	200002d0 	.word	0x200002d0
 8002830:	2000042c 	.word	0x2000042c
 8002834:	20000350 	.word	0x20000350
 8002838:	20000390 	.word	0x20000390

0800283c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2){
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800284c:	d10a      	bne.n	8002864 <HAL_TIM_PeriodElapsedCallback+0x28>

        if (debounce_flag1)
 800284e:	4b07      	ldr	r3, [pc, #28]	@ (800286c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_TIM_PeriodElapsedCallback+0x22>
        {
            debounce_flag1 = 0;
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
        }
        HAL_TIM_Base_Stop_IT(&htim2); // Stop the timer
 800285e:	4804      	ldr	r0, [pc, #16]	@ (8002870 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002860:	f00e f944 	bl	8010aec <HAL_TIM_Base_Stop_IT>
    }
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	2000042d 	.word	0x2000042d
 8002870:	200002d0 	.word	0x200002d0

08002874 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800287e:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <BSP_I2C1_Init+0x58>)
 8002880:	4a13      	ldr	r2, [pc, #76]	@ (80028d0 <BSP_I2C1_Init+0x5c>)
 8002882:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002884:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <BSP_I2C1_Init+0x60>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	4912      	ldr	r1, [pc, #72]	@ (80028d4 <BSP_I2C1_Init+0x60>)
 800288c:	600a      	str	r2, [r1, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d117      	bne.n	80028c2 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002892:	480e      	ldr	r0, [pc, #56]	@ (80028cc <BSP_I2C1_Init+0x58>)
 8002894:	f00b f9e4 	bl	800dc60 <HAL_I2C_GetState>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d111      	bne.n	80028c2 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800289e:	480b      	ldr	r0, [pc, #44]	@ (80028cc <BSP_I2C1_Init+0x58>)
 80028a0:	f000 f8e2 	bl	8002a68 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10b      	bne.n	80028c2 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80028aa:	4808      	ldr	r0, [pc, #32]	@ (80028cc <BSP_I2C1_Init+0x58>)
 80028ac:	f000 f8a8 	bl	8002a00 <MX_I2C1_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80028b6:	f06f 0307 	mvn.w	r3, #7
 80028ba:	607b      	str	r3, [r7, #4]
 80028bc:	e001      	b.n	80028c2 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80028c2:	687b      	ldr	r3, [r7, #4]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000430 	.word	0x20000430
 80028d0:	40005400 	.word	0x40005400
 80028d4:	20000484 	.word	0x20000484

080028d8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80028e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002920 <BSP_I2C1_DeInit+0x48>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d014      	beq.n	8002914 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80028ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002920 <BSP_I2C1_DeInit+0x48>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002920 <BSP_I2C1_DeInit+0x48>)
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <BSP_I2C1_DeInit+0x48>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10b      	bne.n	8002914 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80028fc:	4809      	ldr	r0, [pc, #36]	@ (8002924 <BSP_I2C1_DeInit+0x4c>)
 80028fe:	f000 f909 	bl	8002b14 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002902:	4808      	ldr	r0, [pc, #32]	@ (8002924 <BSP_I2C1_DeInit+0x4c>)
 8002904:	f00a fbe6 	bl	800d0d4 <HAL_I2C_DeInit>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800290e:	f06f 0307 	mvn.w	r3, #7
 8002912:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002914:	687b      	ldr	r3, [r7, #4]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000484 	.word	0x20000484
 8002924:	20000430 	.word	0x20000430

08002928 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	@ 0x28
 800292c:	af04      	add	r7, sp, #16
 800292e:	60ba      	str	r2, [r7, #8]
 8002930:	461a      	mov	r2, r3
 8002932:	4603      	mov	r3, r0
 8002934:	81fb      	strh	r3, [r7, #14]
 8002936:	460b      	mov	r3, r1
 8002938:	81bb      	strh	r3, [r7, #12]
 800293a:	4613      	mov	r3, r2
 800293c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002942:	89ba      	ldrh	r2, [r7, #12]
 8002944:	89f9      	ldrh	r1, [r7, #14]
 8002946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800294a:	9302      	str	r3, [sp, #8]
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	2301      	movs	r3, #1
 8002956:	480c      	ldr	r0, [pc, #48]	@ (8002988 <BSP_I2C1_WriteReg+0x60>)
 8002958:	f00a fc12 	bl	800d180 <HAL_I2C_Mem_Write>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00c      	beq.n	800297c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002962:	4809      	ldr	r0, [pc, #36]	@ (8002988 <BSP_I2C1_WriteReg+0x60>)
 8002964:	f00b f989 	bl	800dc7a <HAL_I2C_GetError>
 8002968:	4603      	mov	r3, r0
 800296a:	2b04      	cmp	r3, #4
 800296c:	d103      	bne.n	8002976 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800296e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	e002      	b.n	800297c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002976:	f06f 0303 	mvn.w	r3, #3
 800297a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800297c:	697b      	ldr	r3, [r7, #20]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000430 	.word	0x20000430

0800298c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	@ 0x28
 8002990:	af04      	add	r7, sp, #16
 8002992:	60ba      	str	r2, [r7, #8]
 8002994:	461a      	mov	r2, r3
 8002996:	4603      	mov	r3, r0
 8002998:	81fb      	strh	r3, [r7, #14]
 800299a:	460b      	mov	r3, r1
 800299c:	81bb      	strh	r3, [r7, #12]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80029a6:	89ba      	ldrh	r2, [r7, #12]
 80029a8:	89f9      	ldrh	r1, [r7, #14]
 80029aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ae:	9302      	str	r3, [sp, #8]
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2301      	movs	r3, #1
 80029ba:	480c      	ldr	r0, [pc, #48]	@ (80029ec <BSP_I2C1_ReadReg+0x60>)
 80029bc:	f00a fcda 	bl	800d374 <HAL_I2C_Mem_Read>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00c      	beq.n	80029e0 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80029c6:	4809      	ldr	r0, [pc, #36]	@ (80029ec <BSP_I2C1_ReadReg+0x60>)
 80029c8:	f00b f957 	bl	800dc7a <HAL_I2C_GetError>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d103      	bne.n	80029da <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80029d2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	e002      	b.n	80029e0 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80029da:	f06f 0303 	mvn.w	r3, #3
 80029de:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80029e0:	697b      	ldr	r3, [r7, #20]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000430 	.word	0x20000430

080029f0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80029f4:	f009 f92e 	bl	800bc54 <HAL_GetTick>
 80029f8:	4603      	mov	r3, r0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a14      	ldr	r2, [pc, #80]	@ (8002a60 <MX_I2C1_Init+0x60>)
 8002a10:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a13      	ldr	r2, [pc, #76]	@ (8002a64 <MX_I2C1_Init+0x64>)
 8002a16:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a2a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f00a fa01 	bl	800ce4c <HAL_I2C_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40005400 	.word	0x40005400
 8002a64:	00061a80 	.word	0x00061a80

08002a68 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	@ 0x28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a70:	4b26      	ldr	r3, [pc, #152]	@ (8002b0c <I2C1_MspInit+0xa4>)
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	4a25      	ldr	r2, [pc, #148]	@ (8002b0c <I2C1_MspInit+0xa4>)
 8002a76:	f043 0302 	orr.w	r3, r3, #2
 8002a7a:	61d3      	str	r3, [r2, #28]
 8002a7c:	4b23      	ldr	r3, [pc, #140]	@ (8002b0c <I2C1_MspInit+0xa4>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002a88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a8e:	2312      	movs	r3, #18
 8002a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a96:	2303      	movs	r3, #3
 8002a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002a9e:	f107 0314 	add.w	r3, r7, #20
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	481a      	ldr	r0, [pc, #104]	@ (8002b10 <I2C1_MspInit+0xa8>)
 8002aa6:	f009 ff07 	bl	800c8b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002aaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ab0:	2312      	movs	r3, #18
 8002ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002abc:	2304      	movs	r3, #4
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4812      	ldr	r0, [pc, #72]	@ (8002b10 <I2C1_MspInit+0xa8>)
 8002ac8:	f009 fef6 	bl	800c8b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002acc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b0c <I2C1_MspInit+0xa4>)
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	4a0e      	ldr	r2, [pc, #56]	@ (8002b0c <I2C1_MspInit+0xa4>)
 8002ad2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ad6:	6253      	str	r3, [r2, #36]	@ 0x24
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <I2C1_MspInit+0xa4>)
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	201f      	movs	r0, #31
 8002aea:	f009 fe52 	bl	800c792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002aee:	201f      	movs	r0, #31
 8002af0:	f009 fe6b 	bl	800c7ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002af4:	2200      	movs	r2, #0
 8002af6:	2100      	movs	r1, #0
 8002af8:	2020      	movs	r0, #32
 8002afa:	f009 fe4a 	bl	800c792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002afe:	2020      	movs	r0, #32
 8002b00:	f009 fe63 	bl	800c7ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002b04:	bf00      	nop
 8002b06:	3728      	adds	r7, #40	@ 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020400 	.word	0x40020400

08002b14 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <I2C1_MspDeInit+0x3c>)
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	4a0b      	ldr	r2, [pc, #44]	@ (8002b50 <I2C1_MspDeInit+0x3c>)
 8002b22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b26:	6253      	str	r3, [r2, #36]	@ 0x24

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002b28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b2c:	4809      	ldr	r0, [pc, #36]	@ (8002b54 <I2C1_MspDeInit+0x40>)
 8002b2e:	f00a f853 	bl	800cbd8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002b32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b36:	4807      	ldr	r0, [pc, #28]	@ (8002b54 <I2C1_MspDeInit+0x40>)
 8002b38:	f00a f84e 	bl	800cbd8 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002b3c:	201f      	movs	r0, #31
 8002b3e:	f009 fe52 	bl	800c7e6 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002b42:	2020      	movs	r0, #32
 8002b44:	f009 fe4f 	bl	800c7e6 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40020400 	.word	0x40020400

08002b58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e00a      	b.n	8002b80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b6a:	f3af 8000 	nop.w
 8002b6e:	4601      	mov	r1, r0
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	60ba      	str	r2, [r7, #8]
 8002b76:	b2ca      	uxtb	r2, r1
 8002b78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	dbf0      	blt.n	8002b6a <_read+0x12>
  }

  return len;
 8002b88:	687b      	ldr	r3, [r7, #4]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	e009      	b.n	8002bb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	60ba      	str	r2, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fa7f 	bl	80020b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	dbf1      	blt.n	8002ba4 <_write+0x12>
  }
  return len;
 8002bc0:	687b      	ldr	r3, [r7, #4]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <_close>:

int _close(int file)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bf0:	605a      	str	r2, [r3, #4]
  return 0;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <_isatty>:

int _isatty(int file)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c06:	2301      	movs	r3, #1
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b085      	sub	sp, #20
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
	...

08002c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c34:	4a14      	ldr	r2, [pc, #80]	@ (8002c88 <_sbrk+0x5c>)
 8002c36:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <_sbrk+0x60>)
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c40:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <_sbrk+0x64>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c48:	4b11      	ldr	r3, [pc, #68]	@ (8002c90 <_sbrk+0x64>)
 8002c4a:	4a12      	ldr	r2, [pc, #72]	@ (8002c94 <_sbrk+0x68>)
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c4e:	4b10      	ldr	r3, [pc, #64]	@ (8002c90 <_sbrk+0x64>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d207      	bcs.n	8002c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c5c:	f00f fac6 	bl	80121ec <__errno>
 8002c60:	4603      	mov	r3, r0
 8002c62:	220c      	movs	r2, #12
 8002c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c66:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6a:	e009      	b.n	8002c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c6c:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <_sbrk+0x64>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c72:	4b07      	ldr	r3, [pc, #28]	@ (8002c90 <_sbrk+0x64>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	4a05      	ldr	r2, [pc, #20]	@ (8002c90 <_sbrk+0x64>)
 8002c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20014000 	.word	0x20014000
 8002c8c:	00000400 	.word	0x00000400
 8002c90:	20000488 	.word	0x20000488
 8002c94:	200007c0 	.word	0x200007c0

08002c98 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ca4:	f7ff fff8 	bl	8002c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca8:	480b      	ldr	r0, [pc, #44]	@ (8002cd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002caa:	490c      	ldr	r1, [pc, #48]	@ (8002cdc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cac:	4a0c      	ldr	r2, [pc, #48]	@ (8002ce0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb0:	e002      	b.n	8002cb8 <LoopCopyDataInit>

08002cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb6:	3304      	adds	r3, #4

08002cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cbc:	d3f9      	bcc.n	8002cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cbe:	4a09      	ldr	r2, [pc, #36]	@ (8002ce4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002cc0:	4c09      	ldr	r4, [pc, #36]	@ (8002ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc4:	e001      	b.n	8002cca <LoopFillZerobss>

08002cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc8:	3204      	adds	r2, #4

08002cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ccc:	d3fb      	bcc.n	8002cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cce:	f00f fa93 	bl	80121f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cd2:	f7fe fe7f 	bl	80019d4 <main>
  bx lr
 8002cd6:	4770      	bx	lr
  ldr r0, =_sdata
 8002cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cdc:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002ce0:	08014078 	.word	0x08014078
  ldr r2, =_sbss
 8002ce4:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002ce8:	200007c0 	.word	0x200007c0

08002cec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cec:	e7fe      	b.n	8002cec <ADC1_IRQHandler>
	...

08002cf0 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d103      	bne.n	8002d08 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e034      	b.n	8002d72 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	7b1a      	ldrb	r2, [r3, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	699a      	ldr	r2, [r3, #24]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a0e      	ldr	r2, [pc, #56]	@ (8002d7c <HTS221_RegisterBusIO+0x8c>)
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a0d      	ldr	r2, [pc, #52]	@ (8002d80 <HTS221_RegisterBusIO+0x90>)
 8002d4a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4798      	blx	r3
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	e002      	b.n	8002d72 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8002d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d70:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	080033b9 	.word	0x080033b9
 8002d80:	0800341b 	.word	0x0800341b

08002d84 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d108      	bne.n	8002da8 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa9e 	bl	80032d8 <HTS221_Initialize>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
 8002da6:	e004      	b.n	8002db2 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d111      	bne.n	8002df0 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f87e 	bl	8002ece <HTS221_HUM_Disable>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8002dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ddc:	e00d      	b.n	8002dfa <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f95f 	bl	80030a2 <HTS221_TEMP_Disable>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
 8002dee:	e004      	b.n	8002dfa <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3320      	adds	r3, #32
 8002e10:	6839      	ldr	r1, [r7, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fc2a 	bl	800366c <hts221_device_id_get>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e22:	e000      	b.n	8002e26 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2200      	movs	r2, #0
 8002e44:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2200      	movs	r2, #0
 8002e56:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	4a09      	ldr	r2, [pc, #36]	@ (8002e80 <HTS221_GetCapabilities+0x50>)
 8002e5c:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	4a07      	ldr	r2, [pc, #28]	@ (8002e80 <HTS221_GetCapabilities+0x50>)
 8002e62:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	41480000 	.word	0x41480000

08002e84 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e015      	b.n	8002ec6 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10b      	bne.n	8002ebc <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3320      	adds	r3, #32
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fbef 	bl	800368e <hts221_power_on_set>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8002eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eba:	e004      	b.n	8002ec6 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e015      	b.n	8002f10 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10b      	bne.n	8002f06 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3320      	adds	r3, #32
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fbca 	bl	800368e <hts221_power_on_set>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002f00:	f04f 33ff 	mov.w	r3, #4294967295
 8002f04:	e004      	b.n	8002f10 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002f22:	6839      	ldr	r1, [r7, #0]
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f965 	bl	80031f4 <HTS221_GetOutputDataRate>
 8002f2a:	4603      	mov	r3, r0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002f3e:	6839      	ldr	r1, [r7, #0]
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f99b 	bl	800327c <HTS221_SetOutputDataRate>
 8002f46:	4603      	mov	r3, r0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3320      	adds	r3, #32
 8002f5e:	f107 020c 	add.w	r2, r7, #12
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fc5e 	bl	8003826 <hts221_hum_adc_point_0_get>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
 8002f74:	e069      	b.n	800304a <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f103 0220 	add.w	r2, r3, #32
 8002f7c:	f107 030c 	add.w	r3, r7, #12
 8002f80:	3304      	adds	r3, #4
 8002f82:	4619      	mov	r1, r3
 8002f84:	4610      	mov	r0, r2
 8002f86:	f000 fba8 	bl	80036da <hts221_hum_rh_point_0_get>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8002f90:	f04f 33ff 	mov.w	r3, #4294967295
 8002f94:	e059      	b.n	800304a <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f103 0220 	add.w	r2, r3, #32
 8002f9c:	f107 030c 	add.w	r3, r7, #12
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	f000 fc5f 	bl	8003868 <hts221_hum_adc_point_1_get>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	e049      	b.n	800304a <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f103 0220 	add.w	r2, r3, #32
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f000 fba8 	bl	800371a <hts221_hum_rh_point_1_get>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8002fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd4:	e039      	b.n	800304a <HTS221_HUM_GetHumidity+0xfa>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3320      	adds	r3, #32
 8002fde:	f107 021c 	add.w	r2, r7, #28
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fafd 	bl	80035e4 <hts221_humidity_raw_get>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff4:	e029      	b.n	800304a <HTS221_HUM_GetHumidity+0xfa>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002ff6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fe5e 	bl	8000cbc <__aeabi_i2f>
 8003000:	4602      	mov	r2, r0
 8003002:	f107 030c 	add.w	r3, r7, #12
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f000 f991 	bl	8003330 <Linear_Interpolation>
 800300e:	4602      	mov	r2, r0
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f04f 0100 	mov.w	r1, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe f83f 	bl	80010a0 <__aeabi_fcmplt>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HTS221_HUM_GetHumidity+0xe0>
  {
    *Value = 0.0f;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4907      	ldr	r1, [pc, #28]	@ (8003054 <HTS221_HUM_GetHumidity+0x104>)
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe f850 	bl	80010dc <__aeabi_fcmpgt>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HTS221_HUM_GetHumidity+0xf8>
  {
    *Value = 100.0f;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	4a03      	ldr	r2, [pc, #12]	@ (8003054 <HTS221_HUM_GetHumidity+0x104>)
 8003046:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	42c80000 	.word	0x42c80000

08003058 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	e015      	b.n	800309a <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3320      	adds	r3, #32
 800307c:	2101      	movs	r1, #1
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fb05 	bl	800368e <hts221_power_on_set>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
 800308e:	e004      	b.n	800309a <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e015      	b.n	80030e4 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3320      	adds	r3, #32
 80030c6:	2100      	movs	r1, #0
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fae0 	bl	800368e <hts221_power_on_set>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	e004      	b.n	80030e4 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80030f6:	6839      	ldr	r1, [r7, #0]
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f87b 	bl	80031f4 <HTS221_GetOutputDataRate>
 80030fe:	4603      	mov	r3, r0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003112:	6839      	ldr	r1, [r7, #0]
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f8b1 	bl	800327c <HTS221_SetOutputDataRate>
 800311a:	4603      	mov	r3, r0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3320      	adds	r3, #32
 8003132:	f107 020c 	add.w	r2, r7, #12
 8003136:	4611      	mov	r1, r2
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fbb6 	bl	80038aa <hts221_temp_adc_point_0_get>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003144:	f04f 33ff 	mov.w	r3, #4294967295
 8003148:	e04f      	b.n	80031ea <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f103 0220 	add.w	r2, r3, #32
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	3304      	adds	r3, #4
 8003156:	4619      	mov	r1, r3
 8003158:	4610      	mov	r0, r2
 800315a:	f000 fafe 	bl	800375a <hts221_temp_deg_point_0_get>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8003164:	f04f 33ff 	mov.w	r3, #4294967295
 8003168:	e03f      	b.n	80031ea <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f103 0220 	add.w	r2, r3, #32
 8003170:	f107 030c 	add.w	r3, r7, #12
 8003174:	3308      	adds	r3, #8
 8003176:	4619      	mov	r1, r3
 8003178:	4610      	mov	r0, r2
 800317a:	f000 fbb7 	bl	80038ec <hts221_temp_adc_point_1_get>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
 8003188:	e02f      	b.n	80031ea <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f103 0220 	add.w	r2, r3, #32
 8003190:	f107 030c 	add.w	r3, r7, #12
 8003194:	330c      	adds	r3, #12
 8003196:	4619      	mov	r1, r3
 8003198:	4610      	mov	r0, r2
 800319a:	f000 fb11 	bl	80037c0 <hts221_temp_deg_point_1_get>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80031a4:	f04f 33ff 	mov.w	r3, #4294967295
 80031a8:	e01f      	b.n	80031ea <HTS221_TEMP_GetTemperature+0xc6>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 80031aa:	2300      	movs	r3, #0
 80031ac:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3320      	adds	r3, #32
 80031b2:	f107 021c 	add.w	r2, r7, #28
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fa35 	bl	8003628 <hts221_temperature_raw_get>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80031c4:	f04f 33ff 	mov.w	r3, #4294967295
 80031c8:	e00f      	b.n	80031ea <HTS221_TEMP_GetTemperature+0xc6>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80031ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd fd74 	bl	8000cbc <__aeabi_i2f>
 80031d4:	4602      	mov	r2, r0
 80031d6:	f107 030c 	add.w	r3, r7, #12
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f8a7 	bl	8003330 <Linear_Interpolation>
 80031e2:	4602      	mov	r2, r0
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3320      	adds	r3, #32
 8003206:	f107 020b 	add.w	r2, r7, #11
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f000 f98b 	bl	8003528 <hts221_data_rate_get>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003218:	f04f 33ff 	mov.w	r3, #4294967295
 800321c:	e025      	b.n	800326a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800321e:	7afb      	ldrb	r3, [r7, #11]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d81d      	bhi.n	8003260 <HTS221_GetOutputDataRate+0x6c>
 8003224:	a201      	add	r2, pc, #4	@ (adr r2, 800322c <HTS221_GetOutputDataRate+0x38>)
 8003226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322a:	bf00      	nop
 800322c:	0800323d 	.word	0x0800323d
 8003230:	08003247 	.word	0x08003247
 8003234:	08003251 	.word	0x08003251
 8003238:	08003259 	.word	0x08003259
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
      break;
 8003244:	e010      	b.n	8003268 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800324c:	601a      	str	r2, [r3, #0]
      break;
 800324e:	e00b      	b.n	8003268 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4a08      	ldr	r2, [pc, #32]	@ (8003274 <HTS221_GetOutputDataRate+0x80>)
 8003254:	601a      	str	r2, [r3, #0]
      break;
 8003256:	e007      	b.n	8003268 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4a07      	ldr	r2, [pc, #28]	@ (8003278 <HTS221_GetOutputDataRate+0x84>)
 800325c:	601a      	str	r2, [r3, #0]
      break;
 800325e:	e003      	b.n	8003268 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
 8003264:	60fb      	str	r3, [r7, #12]
      break;
 8003266:	bf00      	nop
  }

  return ret;
 8003268:	68fb      	ldr	r3, [r7, #12]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40e00000 	.word	0x40e00000
 8003278:	41480000 	.word	0x41480000

0800327c <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003286:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800328a:	6838      	ldr	r0, [r7, #0]
 800328c:	f7fd ff12 	bl	80010b4 <__aeabi_fcmple>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HTS221_SetOutputDataRate+0x1e>
 8003296:	2301      	movs	r3, #1
 8003298:	e009      	b.n	80032ae <HTS221_SetOutputDataRate+0x32>
 800329a:	490e      	ldr	r1, [pc, #56]	@ (80032d4 <HTS221_SetOutputDataRate+0x58>)
 800329c:	6838      	ldr	r0, [r7, #0]
 800329e:	f7fd ff09 	bl	80010b4 <__aeabi_fcmple>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HTS221_SetOutputDataRate+0x30>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e000      	b.n	80032ae <HTS221_SetOutputDataRate+0x32>
 80032ac:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80032ae:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3320      	adds	r3, #32
 80032b4:	7bfa      	ldrb	r2, [r7, #15]
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 f90f 	bl	80034dc <hts221_data_rate_set>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HTS221_SetOutputDataRate+0x4e>
  {
    return HTS221_ERROR;
 80032c4:	f04f 33ff 	mov.w	r3, #4294967295
 80032c8:	e000      	b.n	80032cc <HTS221_SetOutputDataRate+0x50>
  }

  return HTS221_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40e00000 	.word	0x40e00000

080032d8 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3320      	adds	r3, #32
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f9d1 	bl	800368e <hts221_power_on_set>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295
 80032f6:	e017      	b.n	8003328 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3320      	adds	r3, #32
 80032fc:	2101      	movs	r1, #1
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f94a 	bl	8003598 <hts221_block_data_update_set>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295
 800330e:	e00b      	b.n	8003328 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003310:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ffb1 	bl	800327c <HTS221_SetOutputDataRate>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003320:	f04f 33ff 	mov.w	r3, #4294967295
 8003324:	e000      	b.n	8003328 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003330:	b5b0      	push	{r4, r5, r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4619      	mov	r1, r3
 8003344:	4610      	mov	r0, r2
 8003346:	f7fd fc03 	bl	8000b50 <__aeabi_fsub>
 800334a:	4603      	mov	r3, r0
 800334c:	6839      	ldr	r1, [r7, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd fd08 	bl	8000d64 <__aeabi_fmul>
 8003354:	4603      	mov	r3, r0
 8003356:	461c      	mov	r4, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4619      	mov	r1, r3
 8003362:	4610      	mov	r0, r2
 8003364:	f7fd fcfe 	bl	8000d64 <__aeabi_fmul>
 8003368:	4603      	mov	r3, r0
 800336a:	461d      	mov	r5, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f7fd fcf4 	bl	8000d64 <__aeabi_fmul>
 800337c:	4603      	mov	r3, r0
 800337e:	4619      	mov	r1, r3
 8003380:	4628      	mov	r0, r5
 8003382:	f7fd fbe5 	bl	8000b50 <__aeabi_fsub>
 8003386:	4603      	mov	r3, r0
 8003388:	4619      	mov	r1, r3
 800338a:	4620      	mov	r0, r4
 800338c:	f7fd fbe2 	bl	8000b54 <__addsf3>
 8003390:	4603      	mov	r3, r0
 8003392:	461c      	mov	r4, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	4610      	mov	r0, r2
 80033a0:	f7fd fbd6 	bl	8000b50 <__aeabi_fsub>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4619      	mov	r1, r3
 80033a8:	4620      	mov	r0, r4
 80033aa:	f7fd fd8f 	bl	8000ecc <__aeabi_fdiv>
 80033ae:	4603      	mov	r3, r0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bdb0      	pop	{r4, r5, r7, pc}

080033b8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	461a      	mov	r2, r3
 80033c4:	460b      	mov	r3, r1
 80033c6:	72fb      	strb	r3, [r7, #11]
 80033c8:	4613      	mov	r3, r2
 80033ca:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10e      	bne.n	80033f6 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	695c      	ldr	r4, [r3, #20]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	7b1b      	ldrb	r3, [r3, #12]
 80033e0:	4618      	mov	r0, r3
 80033e2:	7afb      	ldrb	r3, [r7, #11]
 80033e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	4619      	mov	r1, r3
 80033ec:	893b      	ldrh	r3, [r7, #8]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	47a0      	blx	r4
 80033f2:	4603      	mov	r3, r0
 80033f4:	e00d      	b.n	8003412 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	695c      	ldr	r4, [r3, #20]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	7b1b      	ldrb	r3, [r3, #12]
 80033fe:	4618      	mov	r0, r3
 8003400:	7afb      	ldrb	r3, [r7, #11]
 8003402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003406:	b2db      	uxtb	r3, r3
 8003408:	4619      	mov	r1, r3
 800340a:	893b      	ldrh	r3, [r7, #8]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	47a0      	blx	r4
 8003410:	4603      	mov	r3, r0
  }
}
 8003412:	4618      	mov	r0, r3
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	bd90      	pop	{r4, r7, pc}

0800341a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800341a:	b590      	push	{r4, r7, lr}
 800341c:	b087      	sub	sp, #28
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	461a      	mov	r2, r3
 8003426:	460b      	mov	r3, r1
 8003428:	72fb      	strb	r3, [r7, #11]
 800342a:	4613      	mov	r3, r2
 800342c:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	691c      	ldr	r4, [r3, #16]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	7b1b      	ldrb	r3, [r3, #12]
 8003442:	4618      	mov	r0, r3
 8003444:	7afb      	ldrb	r3, [r7, #11]
 8003446:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800344a:	b2db      	uxtb	r3, r3
 800344c:	4619      	mov	r1, r3
 800344e:	893b      	ldrh	r3, [r7, #8]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	47a0      	blx	r4
 8003454:	4603      	mov	r3, r0
 8003456:	e00d      	b.n	8003474 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	691c      	ldr	r4, [r3, #16]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	7b1b      	ldrb	r3, [r3, #12]
 8003460:	4618      	mov	r0, r3
 8003462:	7afb      	ldrb	r3, [r7, #11]
 8003464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003468:	b2db      	uxtb	r3, r3
 800346a:	4619      	mov	r1, r3
 800346c:	893b      	ldrh	r3, [r7, #8]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	47a0      	blx	r4
 8003472:	4603      	mov	r3, r0
  }
}
 8003474:	4618      	mov	r0, r3
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	bd90      	pop	{r4, r7, pc}

0800347c <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800347c:	b590      	push	{r4, r7, lr}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	461a      	mov	r2, r3
 8003488:	460b      	mov	r3, r1
 800348a:	72fb      	strb	r3, [r7, #11]
 800348c:	4613      	mov	r3, r2
 800348e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685c      	ldr	r4, [r3, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	68d8      	ldr	r0, [r3, #12]
 8003498:	893b      	ldrh	r3, [r7, #8]
 800349a:	7af9      	ldrb	r1, [r7, #11]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	47a0      	blx	r4
 80034a0:	6178      	str	r0, [r7, #20]

  return ret;
 80034a2:	697b      	ldr	r3, [r7, #20]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	371c      	adds	r7, #28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd90      	pop	{r4, r7, pc}

080034ac <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	461a      	mov	r2, r3
 80034b8:	460b      	mov	r3, r1
 80034ba:	72fb      	strb	r3, [r7, #11]
 80034bc:	4613      	mov	r3, r2
 80034be:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681c      	ldr	r4, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	68d8      	ldr	r0, [r3, #12]
 80034c8:	893b      	ldrh	r3, [r7, #8]
 80034ca:	7af9      	ldrb	r1, [r7, #11]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	47a0      	blx	r4
 80034d0:	6178      	str	r0, [r7, #20]

  return ret;
 80034d2:	697b      	ldr	r3, [r7, #20]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd90      	pop	{r4, r7, pc}

080034dc <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80034e8:	f107 0208 	add.w	r2, r7, #8
 80034ec:	2301      	movs	r3, #1
 80034ee:	2120      	movs	r1, #32
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff ffc3 	bl	800347c <hts221_read_reg>
 80034f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10f      	bne.n	800351e <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	b2da      	uxtb	r2, r3
 8003506:	7a3b      	ldrb	r3, [r7, #8]
 8003508:	f362 0301 	bfi	r3, r2, #0, #2
 800350c:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800350e:	f107 0208 	add.w	r2, r7, #8
 8003512:	2301      	movs	r3, #1
 8003514:	2120      	movs	r1, #32
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ffc8 	bl	80034ac <hts221_write_reg>
 800351c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800351e:	68fb      	ldr	r3, [r7, #12]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003532:	f107 0208 	add.w	r2, r7, #8
 8003536:	2301      	movs	r3, #1
 8003538:	2120      	movs	r1, #32
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ff9e 	bl	800347c <hts221_read_reg>
 8003540:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003542:	7a3b      	ldrb	r3, [r7, #8]
 8003544:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b03      	cmp	r3, #3
 800354c:	d81a      	bhi.n	8003584 <hts221_data_rate_get+0x5c>
 800354e:	a201      	add	r2, pc, #4	@ (adr r2, 8003554 <hts221_data_rate_get+0x2c>)
 8003550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003554:	08003565 	.word	0x08003565
 8003558:	0800356d 	.word	0x0800356d
 800355c:	08003575 	.word	0x08003575
 8003560:	0800357d 	.word	0x0800357d
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
      break;
 800356a:	e00f      	b.n	800358c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
      break;
 8003572:	e00b      	b.n	800358c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2202      	movs	r2, #2
 8003578:	701a      	strb	r2, [r3, #0]
      break;
 800357a:	e007      	b.n	800358c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2203      	movs	r2, #3
 8003580:	701a      	strb	r2, [r3, #0]
      break;
 8003582:	e003      	b.n	800358c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2204      	movs	r2, #4
 8003588:	701a      	strb	r2, [r3, #0]
      break;
 800358a:	bf00      	nop
  }

  return ret;
 800358c:	68fb      	ldr	r3, [r7, #12]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop

08003598 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80035a4:	f107 0208 	add.w	r2, r7, #8
 80035a8:	2301      	movs	r3, #1
 80035aa:	2120      	movs	r1, #32
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff65 	bl	800347c <hts221_read_reg>
 80035b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10f      	bne.n	80035da <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	7a3b      	ldrb	r3, [r7, #8]
 80035c4:	f362 0382 	bfi	r3, r2, #2, #1
 80035c8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80035ca:	f107 0208 	add.w	r2, r7, #8
 80035ce:	2301      	movs	r3, #1
 80035d0:	2120      	movs	r1, #32
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ff6a 	bl	80034ac <hts221_write_reg>
 80035d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80035da:	68fb      	ldr	r3, [r7, #12]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80035ee:	f107 0208 	add.w	r2, r7, #8
 80035f2:	2302      	movs	r3, #2
 80035f4:	2128      	movs	r1, #40	@ 0x28
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff ff40 	bl	800347c <hts221_read_reg>
 80035fc:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80035fe:	7a7b      	ldrb	r3, [r7, #9]
 8003600:	b21a      	sxth	r2, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800360c:	b29b      	uxth	r3, r3
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	b29b      	uxth	r3, r3
 8003612:	7a3a      	ldrb	r2, [r7, #8]
 8003614:	4413      	add	r3, r2
 8003616:	b29b      	uxth	r3, r3
 8003618:	b21a      	sxth	r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	801a      	strh	r2, [r3, #0]

  return ret;
 800361e:	68fb      	ldr	r3, [r7, #12]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003632:	f107 0208 	add.w	r2, r7, #8
 8003636:	2302      	movs	r3, #2
 8003638:	212a      	movs	r1, #42	@ 0x2a
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff ff1e 	bl	800347c <hts221_read_reg>
 8003640:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003642:	7a7b      	ldrb	r3, [r7, #9]
 8003644:	b21a      	sxth	r2, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003650:	b29b      	uxth	r3, r3
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	b29b      	uxth	r3, r3
 8003656:	7a3a      	ldrb	r2, [r7, #8]
 8003658:	4413      	add	r3, r2
 800365a:	b29b      	uxth	r3, r3
 800365c:	b21a      	sxth	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	801a      	strh	r2, [r3, #0]

  return ret;
 8003662:	68fb      	ldr	r3, [r7, #12]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8003676:	2301      	movs	r3, #1
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	210f      	movs	r1, #15
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fefd 	bl	800347c <hts221_read_reg>
 8003682:	60f8      	str	r0, [r7, #12]

  return ret;
 8003684:	68fb      	ldr	r3, [r7, #12]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	460b      	mov	r3, r1
 8003698:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800369a:	f107 0208 	add.w	r2, r7, #8
 800369e:	2301      	movs	r3, #1
 80036a0:	2120      	movs	r1, #32
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff feea 	bl	800347c <hts221_read_reg>
 80036a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10f      	bne.n	80036d0 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	7a3b      	ldrb	r3, [r7, #8]
 80036ba:	f362 13c7 	bfi	r3, r2, #7, #1
 80036be:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80036c0:	f107 0208 	add.w	r2, r7, #8
 80036c4:	2301      	movs	r3, #1
 80036c6:	2120      	movs	r1, #32
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff feef 	bl	80034ac <hts221_write_reg>
 80036ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80036d0:	68fb      	ldr	r3, [r7, #12]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80036e4:	f107 020b 	add.w	r2, r7, #11
 80036e8:	2301      	movs	r3, #1
 80036ea:	2130      	movs	r1, #48	@ 0x30
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff fec5 	bl	800347c <hts221_read_reg>
 80036f2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80036f4:	7afb      	ldrb	r3, [r7, #11]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fae0 	bl	8000cbc <__aeabi_i2f>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003702:	4618      	mov	r0, r3
 8003704:	f7fd fbe2 	bl	8000ecc <__aeabi_fdiv>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	601a      	str	r2, [r3, #0]

  return ret;
 8003710:	68fb      	ldr	r3, [r7, #12]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003724:	f107 020b 	add.w	r2, r7, #11
 8003728:	2301      	movs	r3, #1
 800372a:	2131      	movs	r1, #49	@ 0x31
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff fea5 	bl	800347c <hts221_read_reg>
 8003732:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003734:	7afb      	ldrb	r3, [r7, #11]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd fac0 	bl	8000cbc <__aeabi_i2f>
 800373c:	4603      	mov	r3, r0
 800373e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003742:	4618      	mov	r0, r3
 8003744:	f7fd fbc2 	bl	8000ecc <__aeabi_fdiv>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	601a      	str	r2, [r3, #0]

  return ret;
 8003750:	68fb      	ldr	r3, [r7, #12]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b086      	sub	sp, #24
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003764:	f107 020f 	add.w	r2, r7, #15
 8003768:	2301      	movs	r3, #1
 800376a:	2132      	movs	r1, #50	@ 0x32
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff fe85 	bl	800347c <hts221_read_reg>
 8003772:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d11d      	bne.n	80037b6 <hts221_temp_deg_point_0_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800377a:	f107 0210 	add.w	r2, r7, #16
 800377e:	2301      	movs	r3, #1
 8003780:	2135      	movs	r1, #53	@ 0x35
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff fe7a 	bl	800347c <hts221_read_reg>
 8003788:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 800378a:	7c3b      	ldrb	r3, [r7, #16]
 800378c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003790:	b2db      	uxtb	r3, r3
 8003792:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	4413      	add	r3, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f7fd fa8d 	bl	8000cbc <__aeabi_i2f>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fd fb8f 	bl	8000ecc <__aeabi_fdiv>
 80037ae:	4603      	mov	r3, r0
 80037b0:	461a      	mov	r2, r3
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80037b6:	697b      	ldr	r3, [r7, #20]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80037ca:	f107 020f 	add.w	r2, r7, #15
 80037ce:	2301      	movs	r3, #1
 80037d0:	2133      	movs	r1, #51	@ 0x33
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff fe52 	bl	800347c <hts221_read_reg>
 80037d8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d11d      	bne.n	800381c <hts221_temp_deg_point_1_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80037e0:	f107 0210 	add.w	r2, r7, #16
 80037e4:	2301      	movs	r3, #1
 80037e6:	2135      	movs	r1, #53	@ 0x35
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff fe47 	bl	800347c <hts221_read_reg>
 80037ee:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80037f0:	7c3b      	ldrb	r3, [r7, #16]
 80037f2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80037fa:	7cfb      	ldrb	r3, [r7, #19]
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	4413      	add	r3, r2
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd fa5a 	bl	8000cbc <__aeabi_i2f>
 8003808:	4603      	mov	r3, r0
 800380a:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd fb5c 	bl	8000ecc <__aeabi_fdiv>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800381c:	697b      	ldr	r3, [r7, #20]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003830:	f107 0208 	add.w	r2, r7, #8
 8003834:	2302      	movs	r3, #2
 8003836:	2136      	movs	r1, #54	@ 0x36
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff fe1f 	bl	800347c <hts221_read_reg>
 800383e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003840:	7a7b      	ldrb	r3, [r7, #9]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	b29b      	uxth	r3, r3
 8003846:	7a3a      	ldrb	r2, [r7, #8]
 8003848:	4413      	add	r3, r2
 800384a:	b29b      	uxth	r3, r3
 800384c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800384e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fd fa32 	bl	8000cbc <__aeabi_i2f>
 8003858:	4602      	mov	r2, r0
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	601a      	str	r2, [r3, #0]

  return ret;
 800385e:	68fb      	ldr	r3, [r7, #12]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003872:	f107 0208 	add.w	r2, r7, #8
 8003876:	2302      	movs	r3, #2
 8003878:	213a      	movs	r1, #58	@ 0x3a
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff fdfe 	bl	800347c <hts221_read_reg>
 8003880:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003882:	7a7b      	ldrb	r3, [r7, #9]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	b29b      	uxth	r3, r3
 8003888:	7a3a      	ldrb	r2, [r7, #8]
 800388a:	4413      	add	r3, r2
 800388c:	b29b      	uxth	r3, r3
 800388e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003890:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd fa11 	bl	8000cbc <__aeabi_i2f>
 800389a:	4602      	mov	r2, r0
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	601a      	str	r2, [r3, #0]

  return ret;
 80038a0:	68fb      	ldr	r3, [r7, #12]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80038b4:	f107 0208 	add.w	r2, r7, #8
 80038b8:	2302      	movs	r3, #2
 80038ba:	213c      	movs	r1, #60	@ 0x3c
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fddd 	bl	800347c <hts221_read_reg>
 80038c2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80038c4:	7a7b      	ldrb	r3, [r7, #9]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	7a3a      	ldrb	r2, [r7, #8]
 80038cc:	4413      	add	r3, r2
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80038d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd f9f0 	bl	8000cbc <__aeabi_i2f>
 80038dc:	4602      	mov	r2, r0
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	601a      	str	r2, [r3, #0]

  return ret;
 80038e2:	68fb      	ldr	r3, [r7, #12]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80038f6:	f107 0208 	add.w	r2, r7, #8
 80038fa:	2302      	movs	r3, #2
 80038fc:	213e      	movs	r1, #62	@ 0x3e
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff fdbc 	bl	800347c <hts221_read_reg>
 8003904:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003906:	7a7b      	ldrb	r3, [r7, #9]
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	b29b      	uxth	r3, r3
 800390c:	7a3a      	ldrb	r2, [r7, #8]
 800390e:	4413      	add	r3, r2
 8003910:	b29b      	uxth	r3, r3
 8003912:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003914:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003918:	4618      	mov	r0, r3
 800391a:	f7fd f9cf 	bl	8000cbc <__aeabi_i2f>
 800391e:	4602      	mov	r2, r0
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	601a      	str	r2, [r3, #0]

  return ret;
 8003924:	68fb      	ldr	r3, [r7, #12]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d103      	bne.n	800394c <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8003944:	f04f 33ff 	mov.w	r3, #4294967295
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e051      	b.n	80039f0 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	7b1a      	ldrb	r2, [r3, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a1d      	ldr	r2, [pc, #116]	@ (80039fc <LIS2DW12_RegisterBusIO+0xcc>)
 8003988:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a1c      	ldr	r2, [pc, #112]	@ (8003a00 <LIS2DW12_RegisterBusIO+0xd0>)
 800398e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	69da      	ldr	r2, [r3, #28]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d103      	bne.n	80039ae <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 80039a6:	f04f 33ff 	mov.w	r3, #4294967295
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e020      	b.n	80039f0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4798      	blx	r3
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e016      	b.n	80039f0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d112      	bne.n	80039f0 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10d      	bne.n	80039f0 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 80039d4:	2305      	movs	r3, #5
 80039d6:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 80039d8:	7afb      	ldrb	r3, [r7, #11]
 80039da:	461a      	mov	r2, r3
 80039dc:	2121      	movs	r1, #33	@ 0x21
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fcbf 	bl	8004362 <LIS2DW12_Write_Reg>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295
 80039ee:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80039f0:	68fb      	ldr	r3, [r7, #12]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	08004725 	.word	0x08004725
 8003a00:	0800475b 	.word	0x0800475b

08003a04 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3320      	adds	r3, #32
 8003a10:	2101      	movs	r1, #1
 8003a12:	4618      	mov	r0, r3
 8003a14:	f001 f9e1 	bl	8004dda <lis2dw12_auto_increment_set>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	e04b      	b.n	8003abc <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3320      	adds	r3, #32
 8003a28:	2101      	movs	r1, #1
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 f8f8 	bl	8004c20 <lis2dw12_block_data_update_set>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3a:	e03f      	b.n	8003abc <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3320      	adds	r3, #32
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 fa90 	bl	8004f68 <lis2dw12_fifo_mode_set>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8003a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a52:	e033      	b.n	8003abc <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3320      	adds	r3, #32
 8003a58:	2104      	movs	r1, #4
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fec8 	bl	80047f0 <lis2dw12_power_mode_set>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6a:	e027      	b.n	8003abc <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a15      	ldr	r2, [pc, #84]	@ (8003ac4 <LIS2DW12_Init+0xc0>)
 8003a70:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3320      	adds	r3, #32
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 ffb9 	bl	8004a00 <lis2dw12_data_rate_set>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8003a94:	f04f 33ff 	mov.w	r3, #4294967295
 8003a98:	e010      	b.n	8003abc <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3320      	adds	r3, #32
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 f8e3 	bl	8004c6c <lis2dw12_full_scale_set>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8003aac:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab0:	e004      	b.n	8003abc <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	42c80000 	.word	0x42c80000

08003ac8 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f884 	bl	8003bde <LIS2DW12_ACC_Disable>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8003adc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae0:	e010      	b.n	8003b04 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->is_initialized = 0;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3320      	adds	r3, #32
 8003b1a:	6839      	ldr	r1, [r7, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f001 f94b 	bl	8004db8 <lis2dw12_device_id_get>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8003b28:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2c:	e000      	b.n	8003b30 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2200      	movs	r2, #0
 8003b52:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2200      	movs	r2, #0
 8003b58:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2210      	movs	r2, #16
 8003b64:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4a06      	ldr	r2, [pc, #24]	@ (8003b90 <LIS2DW12_GetCapabilities+0x58>)
 8003b78:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	44c80000 	.word	0x44c80000

08003b94 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e015      	b.n	8003bd6 <LIS2DW12_ACC_Enable+0x42>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fc3a 	bl	8004434 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <LIS2DW12_ACC_Enable+0x38>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bca:	e004      	b.n	8003bd6 <LIS2DW12_ACC_Enable+0x42>
  }

  pObj->acc_is_enabled = 1;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e010      	b.n	8003c16 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3320      	adds	r3, #32
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 ff00 	bl	8004a00 <lis2dw12_data_rate_set>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8003c06:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0a:	e004      	b.n	8003c16 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3320      	adds	r3, #32
 8003c32:	f107 020b 	add.w	r2, r7, #11
 8003c36:	4611      	mov	r1, r2
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f001 f83d 	bl	8004cb8 <lis2dw12_full_scale_get>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295
 8003c48:	e080      	b.n	8003d4c <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3320      	adds	r3, #32
 8003c4e:	f107 020a 	add.w	r2, r7, #10
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fe19 	bl	800488c <lis2dw12_power_mode_get>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8003c60:	f04f 33ff 	mov.w	r3, #4294967295
 8003c64:	e072      	b.n	8003d4c <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8003c66:	7abb      	ldrb	r3, [r7, #10]
 8003c68:	2b1b      	cmp	r3, #27
 8003c6a:	bf8c      	ite	hi
 8003c6c:	2201      	movhi	r2, #1
 8003c6e:	2200      	movls	r2, #0
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	2a00      	cmp	r2, #0
 8003c74:	d162      	bne.n	8003d3c <LIS2DW12_ACC_GetSensitivity+0x11c>
 8003c76:	2201      	movs	r2, #1
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8003c7e:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bf14      	ite	ne
 8003c86:	2301      	movne	r3, #1
 8003c88:	2300      	moveq	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d12f      	bne.n	8003cf0 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8003c90:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d04c      	beq.n	8003d3c <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8003ca2:	7afb      	ldrb	r3, [r7, #11]
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d81b      	bhi.n	8003ce0 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8003ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003cc9 	.word	0x08003cc9
 8003cb8:	08003cd1 	.word	0x08003cd1
 8003cbc:	08003cd9 	.word	0x08003cd9
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	4a24      	ldr	r2, [pc, #144]	@ (8003d54 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003cc4:	601a      	str	r2, [r3, #0]
          break;
 8003cc6:	e012      	b.n	8003cee <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	4a23      	ldr	r2, [pc, #140]	@ (8003d58 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003ccc:	601a      	str	r2, [r3, #0]
          break;
 8003cce:	e00e      	b.n	8003cee <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4a22      	ldr	r2, [pc, #136]	@ (8003d5c <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8003cd4:	601a      	str	r2, [r3, #0]
          break;
 8003cd6:	e00a      	b.n	8003cee <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	4a21      	ldr	r2, [pc, #132]	@ (8003d60 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8003cdc:	601a      	str	r2, [r3, #0]
          break;
 8003cde:	e006      	b.n	8003cee <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	4a20      	ldr	r2, [pc, #128]	@ (8003d64 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003ce4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cea:	60fb      	str	r3, [r7, #12]
          break;
 8003cec:	bf00      	nop
      }
      break;
 8003cee:	e02c      	b.n	8003d4a <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8003cf0:	7afb      	ldrb	r3, [r7, #11]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d81a      	bhi.n	8003d2c <LIS2DW12_ACC_GetSensitivity+0x10c>
 8003cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cfc <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d0d 	.word	0x08003d0d
 8003d00:	08003d15 	.word	0x08003d15
 8003d04:	08003d1d 	.word	0x08003d1d
 8003d08:	08003d25 	.word	0x08003d25
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	4a16      	ldr	r2, [pc, #88]	@ (8003d68 <LIS2DW12_ACC_GetSensitivity+0x148>)
 8003d10:	601a      	str	r2, [r3, #0]
          break;
 8003d12:	e012      	b.n	8003d3a <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	4a15      	ldr	r2, [pc, #84]	@ (8003d6c <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8003d18:	601a      	str	r2, [r3, #0]
          break;
 8003d1a:	e00e      	b.n	8003d3a <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d54 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003d20:	601a      	str	r2, [r3, #0]
          break;
 8003d22:	e00a      	b.n	8003d3a <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	4a0c      	ldr	r2, [pc, #48]	@ (8003d58 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003d28:	601a      	str	r2, [r3, #0]
          break;
 8003d2a:	e006      	b.n	8003d3a <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d64 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003d30:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003d32:	f04f 33ff 	mov.w	r3, #4294967295
 8003d36:	60fb      	str	r3, [r7, #12]
          break;
 8003d38:	bf00      	nop
      }
      break;
 8003d3a:	e006      	b.n	8003d4a <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4a09      	ldr	r2, [pc, #36]	@ (8003d64 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003d40:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003d42:	f04f 33ff 	mov.w	r3, #4294967295
 8003d46:	60fb      	str	r3, [r7, #12]
      break;
 8003d48:	bf00      	nop
  }

  return ret;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	3f79db23 	.word	0x3f79db23
 8003d58:	3ff9db23 	.word	0x3ff9db23
 8003d5c:	4079db23 	.word	0x4079db23
 8003d60:	40f9db23 	.word	0x40f9db23
 8003d64:	bf800000 	.word	0xbf800000
 8003d68:	3e79db23 	.word	0x3e79db23
 8003d6c:	3ef9db23 	.word	0x3ef9db23

08003d70 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3320      	adds	r3, #32
 8003d82:	f107 020b 	add.w	r2, r7, #11
 8003d86:	4611      	mov	r1, r2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fe7f 	bl	8004a8c <lis2dw12_data_rate_get>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295
 8003d98:	e14f      	b.n	800403a <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3320      	adds	r3, #32
 8003d9e:	f107 020a 	add.w	r2, r7, #10
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fd71 	bl	800488c <lis2dw12_power_mode_get>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
 8003db4:	e141      	b.n	800403a <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8003db6:	7afb      	ldrb	r3, [r7, #11]
 8003db8:	2b32      	cmp	r3, #50	@ 0x32
 8003dba:	f200 8136 	bhi.w	800402a <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8003dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc4 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003e91 	.word	0x08003e91
 8003dc8:	08003e9b 	.word	0x08003e9b
 8003dcc:	08003ef5 	.word	0x08003ef5
 8003dd0:	08003efd 	.word	0x08003efd
 8003dd4:	08003f05 	.word	0x08003f05
 8003dd8:	08003f0d 	.word	0x08003f0d
 8003ddc:	08003f15 	.word	0x08003f15
 8003de0:	08003f1d 	.word	0x08003f1d
 8003de4:	08003f77 	.word	0x08003f77
 8003de8:	08003fd1 	.word	0x08003fd1
 8003dec:	0800402b 	.word	0x0800402b
 8003df0:	0800402b 	.word	0x0800402b
 8003df4:	0800402b 	.word	0x0800402b
 8003df8:	0800402b 	.word	0x0800402b
 8003dfc:	0800402b 	.word	0x0800402b
 8003e00:	0800402b 	.word	0x0800402b
 8003e04:	0800402b 	.word	0x0800402b
 8003e08:	0800402b 	.word	0x0800402b
 8003e0c:	08003e91 	.word	0x08003e91
 8003e10:	0800402b 	.word	0x0800402b
 8003e14:	0800402b 	.word	0x0800402b
 8003e18:	0800402b 	.word	0x0800402b
 8003e1c:	0800402b 	.word	0x0800402b
 8003e20:	0800402b 	.word	0x0800402b
 8003e24:	0800402b 	.word	0x0800402b
 8003e28:	0800402b 	.word	0x0800402b
 8003e2c:	0800402b 	.word	0x0800402b
 8003e30:	0800402b 	.word	0x0800402b
 8003e34:	0800402b 	.word	0x0800402b
 8003e38:	0800402b 	.word	0x0800402b
 8003e3c:	0800402b 	.word	0x0800402b
 8003e40:	0800402b 	.word	0x0800402b
 8003e44:	0800402b 	.word	0x0800402b
 8003e48:	0800402b 	.word	0x0800402b
 8003e4c:	0800402b 	.word	0x0800402b
 8003e50:	0800402b 	.word	0x0800402b
 8003e54:	0800402b 	.word	0x0800402b
 8003e58:	0800402b 	.word	0x0800402b
 8003e5c:	0800402b 	.word	0x0800402b
 8003e60:	0800402b 	.word	0x0800402b
 8003e64:	0800402b 	.word	0x0800402b
 8003e68:	0800402b 	.word	0x0800402b
 8003e6c:	0800402b 	.word	0x0800402b
 8003e70:	0800402b 	.word	0x0800402b
 8003e74:	0800402b 	.word	0x0800402b
 8003e78:	0800402b 	.word	0x0800402b
 8003e7c:	0800402b 	.word	0x0800402b
 8003e80:	0800402b 	.word	0x0800402b
 8003e84:	0800402b 	.word	0x0800402b
 8003e88:	0800402b 	.word	0x0800402b
 8003e8c:	08003e91 	.word	0x08003e91
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
      break;
 8003e98:	e0ce      	b.n	8004038 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8003e9a:	7abb      	ldrb	r3, [r7, #10]
 8003e9c:	2b1b      	cmp	r3, #27
 8003e9e:	bf8c      	ite	hi
 8003ea0:	2201      	movhi	r2, #1
 8003ea2:	2200      	movls	r2, #0
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	2a00      	cmp	r2, #0
 8003ea8:	d11c      	bne.n	8003ee4 <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8003eaa:	2201      	movs	r2, #1
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003eb4:	2a00      	cmp	r2, #0
 8003eb6:	bf14      	ite	ne
 8003eb8:	2201      	movne	r2, #1
 8003eba:	2200      	moveq	r2, #0
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d10c      	bne.n	8003edc <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8003ec2:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bf14      	ite	ne
 8003eca:	2301      	movne	r3, #1
 8003ecc:	2300      	moveq	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4a5b      	ldr	r2, [pc, #364]	@ (8004044 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003ed8:	601a      	str	r2, [r3, #0]
          break;
 8003eda:	e00a      	b.n	8003ef2 <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	4a5a      	ldr	r2, [pc, #360]	@ (8004048 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 8003ee0:	601a      	str	r2, [r3, #0]
          break;
 8003ee2:	e006      	b.n	8003ef2 <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4a59      	ldr	r2, [pc, #356]	@ (800404c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003ee8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003eea:	f04f 33ff 	mov.w	r3, #4294967295
 8003eee:	60fb      	str	r3, [r7, #12]
          break;
 8003ef0:	bf00      	nop
      }
      break;
 8003ef2:	e0a1      	b.n	8004038 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	4a53      	ldr	r2, [pc, #332]	@ (8004044 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003ef8:	601a      	str	r2, [r3, #0]
      break;
 8003efa:	e09d      	b.n	8004038 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	4a54      	ldr	r2, [pc, #336]	@ (8004050 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8003f00:	601a      	str	r2, [r3, #0]
      break;
 8003f02:	e099      	b.n	8004038 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	4a53      	ldr	r2, [pc, #332]	@ (8004054 <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8003f08:	601a      	str	r2, [r3, #0]
      break;
 8003f0a:	e095      	b.n	8004038 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	4a52      	ldr	r2, [pc, #328]	@ (8004058 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8003f10:	601a      	str	r2, [r3, #0]
      break;
 8003f12:	e091      	b.n	8004038 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	4a51      	ldr	r2, [pc, #324]	@ (800405c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003f18:	601a      	str	r2, [r3, #0]
      break;
 8003f1a:	e08d      	b.n	8004038 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8003f1c:	7abb      	ldrb	r3, [r7, #10]
 8003f1e:	2b1b      	cmp	r3, #27
 8003f20:	bf8c      	ite	hi
 8003f22:	2201      	movhi	r2, #1
 8003f24:	2200      	movls	r2, #0
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	2a00      	cmp	r2, #0
 8003f2a:	d11c      	bne.n	8003f66 <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003f36:	2a00      	cmp	r2, #0
 8003f38:	bf14      	ite	ne
 8003f3a:	2201      	movne	r2, #1
 8003f3c:	2200      	moveq	r2, #0
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	2a00      	cmp	r2, #0
 8003f42:	d10c      	bne.n	8003f5e <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8003f44:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf14      	ite	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	2300      	moveq	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	4a41      	ldr	r2, [pc, #260]	@ (8004060 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8003f5a:	601a      	str	r2, [r3, #0]
          break;
 8003f5c:	e00a      	b.n	8003f74 <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	4a3e      	ldr	r2, [pc, #248]	@ (800405c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003f62:	601a      	str	r2, [r3, #0]
          break;
 8003f64:	e006      	b.n	8003f74 <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	4a38      	ldr	r2, [pc, #224]	@ (800404c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003f6a:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f70:	60fb      	str	r3, [r7, #12]
          break;
 8003f72:	bf00      	nop
      }
      break;
 8003f74:	e060      	b.n	8004038 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8003f76:	7abb      	ldrb	r3, [r7, #10]
 8003f78:	2b1b      	cmp	r3, #27
 8003f7a:	bf8c      	ite	hi
 8003f7c:	2201      	movhi	r2, #1
 8003f7e:	2200      	movls	r2, #0
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	2a00      	cmp	r2, #0
 8003f84:	d11c      	bne.n	8003fc0 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 8003f86:	2201      	movs	r2, #1
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003f90:	2a00      	cmp	r2, #0
 8003f92:	bf14      	ite	ne
 8003f94:	2201      	movne	r2, #1
 8003f96:	2200      	moveq	r2, #0
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	2a00      	cmp	r2, #0
 8003f9c:	d10c      	bne.n	8003fb8 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 8003f9e:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	bf14      	ite	ne
 8003fa6:	2301      	movne	r3, #1
 8003fa8:	2300      	moveq	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8004064 <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8003fb4:	601a      	str	r2, [r3, #0]
          break;
 8003fb6:	e00a      	b.n	8003fce <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	4a28      	ldr	r2, [pc, #160]	@ (800405c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003fbc:	601a      	str	r2, [r3, #0]
          break;
 8003fbe:	e006      	b.n	8003fce <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	4a22      	ldr	r2, [pc, #136]	@ (800404c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003fc4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fca:	60fb      	str	r3, [r7, #12]
          break;
 8003fcc:	bf00      	nop
      }
      break;
 8003fce:	e033      	b.n	8004038 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8003fd0:	7abb      	ldrb	r3, [r7, #10]
 8003fd2:	2b1b      	cmp	r3, #27
 8003fd4:	bf8c      	ite	hi
 8003fd6:	2201      	movhi	r2, #1
 8003fd8:	2200      	movls	r2, #0
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	2a00      	cmp	r2, #0
 8003fde:	d11c      	bne.n	800401a <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003fea:	2a00      	cmp	r2, #0
 8003fec:	bf14      	ite	ne
 8003fee:	2201      	movne	r2, #1
 8003ff0:	2200      	moveq	r2, #0
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	2a00      	cmp	r2, #0
 8003ff6:	d10c      	bne.n	8004012 <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 8003ff8:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf14      	ite	ne
 8004000:	2301      	movne	r3, #1
 8004002:	2300      	moveq	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	4a16      	ldr	r2, [pc, #88]	@ (8004068 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 800400e:	601a      	str	r2, [r3, #0]
          break;
 8004010:	e00a      	b.n	8004028 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	4a11      	ldr	r2, [pc, #68]	@ (800405c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8004016:	601a      	str	r2, [r3, #0]
          break;
 8004018:	e006      	b.n	8004028 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	4a0b      	ldr	r2, [pc, #44]	@ (800404c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800401e:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8004020:	f04f 33ff 	mov.w	r3, #4294967295
 8004024:	60fb      	str	r3, [r7, #12]
          break;
 8004026:	bf00      	nop
      }
      break;
 8004028:	e006      	b.n	8004038 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	4a07      	ldr	r2, [pc, #28]	@ (800404c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800402e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8004030:	f04f 33ff 	mov.w	r3, #4294967295
 8004034:	60fb      	str	r3, [r7, #12]
      break;
 8004036:	bf00      	nop
  }

  return ret;
 8004038:	68fb      	ldr	r3, [r7, #12]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	41480000 	.word	0x41480000
 8004048:	3fcccccd 	.word	0x3fcccccd
 800404c:	bf800000 	.word	0xbf800000
 8004050:	41c80000 	.word	0x41c80000
 8004054:	42480000 	.word	0x42480000
 8004058:	42c80000 	.word	0x42c80000
 800405c:	43480000 	.word	0x43480000
 8004060:	43c80000 	.word	0x43c80000
 8004064:	44480000 	.word	0x44480000
 8004068:	44c80000 	.word	0x44c80000

0800406c <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8004076:	2300      	movs	r3, #0
 8004078:	2200      	movs	r2, #0
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f805 	bl	800408c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8004082:	4603      	mov	r3, r0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	4611      	mov	r1, r2
 8004098:	461a      	mov	r2, r3
 800409a:	460b      	mov	r3, r1
 800409c:	71fb      	strb	r3, [r7, #7]
 800409e:	4613      	mov	r3, r2
 80040a0:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d107      	bne.n	80040bc <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x30>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80040ac:	79bb      	ldrb	r3, [r7, #6]
 80040ae:	79fa      	ldrb	r2, [r7, #7]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f9be 	bl	8004434 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80040b8:	4603      	mov	r3, r0
 80040ba:	e006      	b.n	80040ca <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x3e>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80040bc:	79bb      	ldrb	r3, [r7, #6]
 80040be:	79fa      	ldrb	r2, [r7, #7]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fab8 	bl	8004638 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80040c8:	4603      	mov	r3, r0
  }
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3320      	adds	r3, #32
 80040e6:	f107 020b 	add.w	r2, r7, #11
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fde3 	bl	8004cb8 <lis2dw12_full_scale_get>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80040f8:	f04f 33ff 	mov.w	r3, #4294967295
 80040fc:	e027      	b.n	800414e <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80040fe:	7afb      	ldrb	r3, [r7, #11]
 8004100:	2b03      	cmp	r3, #3
 8004102:	d81b      	bhi.n	800413c <LIS2DW12_ACC_GetFullScale+0x68>
 8004104:	a201      	add	r2, pc, #4	@ (adr r2, 800410c <LIS2DW12_ACC_GetFullScale+0x38>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	0800411d 	.word	0x0800411d
 8004110:	08004125 	.word	0x08004125
 8004114:	0800412d 	.word	0x0800412d
 8004118:	08004135 	.word	0x08004135
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2202      	movs	r2, #2
 8004120:	601a      	str	r2, [r3, #0]
      break;
 8004122:	e013      	b.n	800414c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2204      	movs	r2, #4
 8004128:	601a      	str	r2, [r3, #0]
      break;
 800412a:	e00f      	b.n	800414c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2208      	movs	r2, #8
 8004130:	601a      	str	r2, [r3, #0]
      break;
 8004132:	e00b      	b.n	800414c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2210      	movs	r2, #16
 8004138:	601a      	str	r2, [r3, #0]
      break;
 800413a:	e007      	b.n	800414c <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f04f 32ff 	mov.w	r2, #4294967295
 8004142:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8004144:	f04f 33ff 	mov.w	r3, #4294967295
 8004148:	60fb      	str	r3, [r7, #12]
      break;
 800414a:	bf00      	nop
  }

  return ret;
 800414c:	68fb      	ldr	r3, [r7, #12]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop

08004158 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b02      	cmp	r3, #2
 8004166:	dd0b      	ble.n	8004180 <LIS2DW12_ACC_SetFullScale+0x28>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b04      	cmp	r3, #4
 800416c:	dd06      	ble.n	800417c <LIS2DW12_ACC_SetFullScale+0x24>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b08      	cmp	r3, #8
 8004172:	dc01      	bgt.n	8004178 <LIS2DW12_ACC_SetFullScale+0x20>
 8004174:	2302      	movs	r3, #2
 8004176:	e004      	b.n	8004182 <LIS2DW12_ACC_SetFullScale+0x2a>
 8004178:	2303      	movs	r3, #3
 800417a:	e002      	b.n	8004182 <LIS2DW12_ACC_SetFullScale+0x2a>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <LIS2DW12_ACC_SetFullScale+0x2a>
 8004180:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8004182:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3320      	adds	r3, #32
 8004188:	7bfa      	ldrb	r2, [r7, #15]
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fd6d 	bl	8004c6c <lis2dw12_full_scale_set>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8004198:	f04f 33ff 	mov.w	r3, #4294967295
 800419c:	e000      	b.n	80041a0 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3320      	adds	r3, #32
 80041ba:	f107 020b 	add.w	r2, r7, #11
 80041be:	4611      	mov	r1, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fb63 	bl	800488c <lis2dw12_power_mode_get>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80041cc:	f04f 33ff 	mov.w	r3, #4294967295
 80041d0:	e068      	b.n	80042a4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3320      	adds	r3, #32
 80041d6:	f107 020c 	add.w	r2, r7, #12
 80041da:	4611      	mov	r1, r2
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fda3 	bl	8004d28 <lis2dw12_acceleration_raw_get>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80041e8:	f04f 33ff 	mov.w	r3, #4294967295
 80041ec:	e05a      	b.n	80042a4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 80041ee:	7afb      	ldrb	r3, [r7, #11]
 80041f0:	2b1b      	cmp	r3, #27
 80041f2:	bf8c      	ite	hi
 80041f4:	2201      	movhi	r2, #1
 80041f6:	2200      	movls	r2, #0
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	2a00      	cmp	r2, #0
 80041fc:	d14d      	bne.n	800429a <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80041fe:	2201      	movs	r2, #1
 8004200:	409a      	lsls	r2, r3
 8004202:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8004206:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 800420a:	2b00      	cmp	r3, #0
 800420c:	bf14      	ite	ne
 800420e:	2301      	movne	r3, #1
 8004210:	2300      	moveq	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d124      	bne.n	8004262 <LIS2DW12_ACC_GetAxesRaw+0xba>
 8004218:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d037      	beq.n	800429a <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 800422a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	da00      	bge.n	8004234 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 8004232:	330f      	adds	r3, #15
 8004234:	111b      	asrs	r3, r3, #4
 8004236:	b21a      	sxth	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800423c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004240:	2b00      	cmp	r3, #0
 8004242:	da00      	bge.n	8004246 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8004244:	330f      	adds	r3, #15
 8004246:	111b      	asrs	r3, r3, #4
 8004248:	b21a      	sxth	r2, r3
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800424e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	da00      	bge.n	8004258 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8004256:	330f      	adds	r3, #15
 8004258:	111b      	asrs	r3, r3, #4
 800425a:	b21a      	sxth	r2, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	809a      	strh	r2, [r3, #4]
      break;
 8004260:	e01f      	b.n	80042a2 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8004262:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	da00      	bge.n	800426c <LIS2DW12_ACC_GetAxesRaw+0xc4>
 800426a:	3303      	adds	r3, #3
 800426c:	109b      	asrs	r3, r3, #2
 800426e:	b21a      	sxth	r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8004274:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004278:	2b00      	cmp	r3, #0
 800427a:	da00      	bge.n	800427e <LIS2DW12_ACC_GetAxesRaw+0xd6>
 800427c:	3303      	adds	r3, #3
 800427e:	109b      	asrs	r3, r3, #2
 8004280:	b21a      	sxth	r2, r3
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8004286:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	da00      	bge.n	8004290 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 800428e:	3303      	adds	r3, #3
 8004290:	109b      	asrs	r3, r3, #2
 8004292:	b21a      	sxth	r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	809a      	strh	r2, [r3, #4]
      break;
 8004298:	e003      	b.n	80042a2 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	617b      	str	r3, [r7, #20]
      break;
 80042a0:	bf00      	nop
  }

  return ret;
 80042a2:	697b      	ldr	r3, [r7, #20]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80042bc:	f107 0310 	add.w	r3, r7, #16
 80042c0:	4619      	mov	r1, r3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ff70 	bl	80041a8 <LIS2DW12_ACC_GetAxesRaw>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	e042      	b.n	800435a <LIS2DW12_ACC_GetAxes+0xae>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80042d4:	f107 030c 	add.w	r3, r7, #12
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff fca0 	bl	8003c20 <LIS2DW12_ACC_GetSensitivity>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	e036      	b.n	800435a <LIS2DW12_ACC_GetAxes+0xae>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80042ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fc fce3 	bl	8000cbc <__aeabi_i2f>
 80042f6:	4602      	mov	r2, r0
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4619      	mov	r1, r3
 80042fc:	4610      	mov	r0, r2
 80042fe:	f7fc fd31 	bl	8000d64 <__aeabi_fmul>
 8004302:	4603      	mov	r3, r0
 8004304:	4618      	mov	r0, r3
 8004306:	f7fc fef3 	bl	80010f0 <__aeabi_f2iz>
 800430a:	4602      	mov	r2, r0
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8004310:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004314:	4618      	mov	r0, r3
 8004316:	f7fc fcd1 	bl	8000cbc <__aeabi_i2f>
 800431a:	4602      	mov	r2, r0
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4619      	mov	r1, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f7fc fd1f 	bl	8000d64 <__aeabi_fmul>
 8004326:	4603      	mov	r3, r0
 8004328:	4618      	mov	r0, r3
 800432a:	f7fc fee1 	bl	80010f0 <__aeabi_f2iz>
 800432e:	4602      	mov	r2, r0
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8004334:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004338:	4618      	mov	r0, r3
 800433a:	f7fc fcbf 	bl	8000cbc <__aeabi_i2f>
 800433e:	4602      	mov	r2, r0
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f7fc fd0d 	bl	8000d64 <__aeabi_fmul>
 800434a:	4603      	mov	r3, r0
 800434c:	4618      	mov	r0, r3
 800434e:	f7fc fecf 	bl	80010f0 <__aeabi_f2iz>
 8004352:	4602      	mov	r2, r0
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	460b      	mov	r3, r1
 800436c:	70fb      	strb	r3, [r7, #3]
 800436e:	4613      	mov	r3, r2
 8004370:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f103 0020 	add.w	r0, r3, #32
 8004378:	1cba      	adds	r2, r7, #2
 800437a:	78f9      	ldrb	r1, [r7, #3]
 800437c:	2301      	movs	r3, #1
 800437e:	f000 fa1f 	bl	80047c0 <lis2dw12_write_reg>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8004388:	f04f 33ff 	mov.w	r3, #4294967295
 800438c:	e000      	b.n	8004390 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <LIS2DW12_ACC_Enable_6D_Orientation>:
  * @brief  Enable 6D orientation detection
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable_6D_Orientation(LIS2DW12_Object_t *pObj)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  int32_t ret = LIS2DW12_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]
  lis2dw12_ctrl4_int1_pad_ctrl_t val;

  /* Output Data Rate selection */
  if (LIS2DW12_ACC_SetOutputDataRate(pObj, 200.0f) != LIS2DW12_OK)
 80043a4:	4922      	ldr	r1, [pc, #136]	@ (8004430 <LIS2DW12_ACC_Enable_6D_Orientation+0x98>)
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fe60 	bl	800406c <LIS2DW12_ACC_SetOutputDataRate>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <LIS2DW12_ACC_Enable_6D_Orientation+0x20>
  {
    return LIS2DW12_ERROR;
 80043b2:	f04f 33ff 	mov.w	r3, #4294967295
 80043b6:	e036      	b.n	8004426 <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  /* Full scale selection */
  if (LIS2DW12_ACC_SetFullScale(pObj, 2) != LIS2DW12_OK)
 80043b8:	2102      	movs	r1, #2
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff fecc 	bl	8004158 <LIS2DW12_ACC_SetFullScale>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <LIS2DW12_ACC_Enable_6D_Orientation+0x34>
  {
    return LIS2DW12_ERROR;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ca:	e02c      	b.n	8004426 <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  /* 6D orientation threshold. */
  if (lis2dw12_6d_threshold_set(&(pObj->Ctx), 2) != LIS2DW12_OK) /* 60 degrees */
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3320      	adds	r3, #32
 80043d0:	2102      	movs	r1, #2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fda2 	bl	8004f1c <lis2dw12_6d_threshold_set>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <LIS2DW12_ACC_Enable_6D_Orientation+0x4c>
  {
    return LIS2DW12_ERROR;
 80043de:	f04f 33ff 	mov.w	r3, #4294967295
 80043e2:	e020      	b.n	8004426 <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  /* Enable 6D orientation event on INT1 pin */
  if (lis2dw12_pin_int1_route_get(&(pObj->Ctx), &val) != LIS2DW12_OK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3320      	adds	r3, #32
 80043e8:	f107 0208 	add.w	r2, r7, #8
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fd83 	bl	8004efa <lis2dw12_pin_int1_route_get>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <LIS2DW12_ACC_Enable_6D_Orientation+0x68>
  {
    return LIS2DW12_ERROR;
 80043fa:	f04f 33ff 	mov.w	r3, #4294967295
 80043fe:	e012      	b.n	8004426 <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  val.int1_6d = PROPERTY_ENABLE;
 8004400:	7a3b      	ldrb	r3, [r7, #8]
 8004402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004406:	723b      	strb	r3, [r7, #8]

  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3320      	adds	r3, #32
 800440c:	f107 0208 	add.w	r2, r7, #8
 8004410:	4611      	mov	r1, r2
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fd07 	bl	8004e26 <lis2dw12_pin_int1_route_set>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <LIS2DW12_ACC_Enable_6D_Orientation+0x8c>
  {
    return LIS2DW12_ERROR;
 800441e:	f04f 33ff 	mov.w	r3, #4294967295
 8004422:	e000      	b.n	8004426 <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  return ret;
 8004424:	68fb      	ldr	r3, [r7, #12]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	43480000 	.word	0x43480000

08004434 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	4611      	mov	r1, r2
 8004440:	461a      	mov	r2, r3
 8004442:	460b      	mov	r3, r1
 8004444:	71fb      	strb	r3, [r7, #7]
 8004446:	4613      	mov	r3, r2
 8004448:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	3b01      	subs	r3, #1
 800444e:	2b03      	cmp	r3, #3
 8004450:	d80a      	bhi.n	8004468 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8004452:	a201      	add	r2, pc, #4	@ (adr r2, 8004458 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8004454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004458:	08004491 	.word	0x08004491
 800445c:	080044b9 	.word	0x080044b9
 8004460:	080044e1 	.word	0x080044e1
 8004464:	08004509 	.word	0x08004509
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8004468:	79bb      	ldrb	r3, [r7, #6]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d002      	beq.n	8004474 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 800446e:	2304      	movs	r3, #4
 8004470:	75fb      	strb	r3, [r7, #23]
          break;
 8004472:	e002      	b.n	800447a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004474:	2314      	movs	r3, #20
 8004476:	75fb      	strb	r3, [r7, #23]
          break;
 8004478:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 800447a:	4967      	ldr	r1, [pc, #412]	@ (8004618 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 800447c:	68b8      	ldr	r0, [r7, #8]
 800447e:	f7fc fe0f 	bl	80010a0 <__aeabi_fcmplt>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d100      	bne.n	800448a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x56>
      {
        Odr = 12.5f;
      }
      break;
 8004488:	e052      	b.n	8004530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 12.5f;
 800448a:	4b63      	ldr	r3, [pc, #396]	@ (8004618 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 800448c:	60bb      	str	r3, [r7, #8]
      break;
 800448e:	e04f      	b.n	8004530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8004490:	79bb      	ldrb	r3, [r7, #6]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d002      	beq.n	800449c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x68>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8004496:	2303      	movs	r3, #3
 8004498:	75fb      	strb	r3, [r7, #23]
          break;
 800449a:	e002      	b.n	80044a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 800449c:	2313      	movs	r3, #19
 800449e:	75fb      	strb	r3, [r7, #23]
          break;
 80044a0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80044a2:	495e      	ldr	r1, [pc, #376]	@ (800461c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80044a4:	68b8      	ldr	r0, [r7, #8]
 80044a6:	f7fc fe19 	bl	80010dc <__aeabi_fcmpgt>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d100      	bne.n	80044b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x7e>
      {
        Odr = 200.0f;
      }
      break;
 80044b0:	e03e      	b.n	8004530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 80044b2:	4b5a      	ldr	r3, [pc, #360]	@ (800461c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80044b4:	60bb      	str	r3, [r7, #8]
      break;
 80044b6:	e03b      	b.n	8004530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80044b8:	79bb      	ldrb	r3, [r7, #6]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d002      	beq.n	80044c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x90>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80044be:	2302      	movs	r3, #2
 80044c0:	75fb      	strb	r3, [r7, #23]
          break;
 80044c2:	e002      	b.n	80044ca <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x96>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80044c4:	2312      	movs	r3, #18
 80044c6:	75fb      	strb	r3, [r7, #23]
          break;
 80044c8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80044ca:	4954      	ldr	r1, [pc, #336]	@ (800461c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80044cc:	68b8      	ldr	r0, [r7, #8]
 80044ce:	f7fc fe05 	bl	80010dc <__aeabi_fcmpgt>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d100      	bne.n	80044da <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xa6>
      {
        Odr = 200.0f;
      }
      break;
 80044d8:	e02a      	b.n	8004530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 80044da:	4b50      	ldr	r3, [pc, #320]	@ (800461c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80044dc:	60bb      	str	r3, [r7, #8]
      break;
 80044de:	e027      	b.n	8004530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 80044e0:	79bb      	ldrb	r3, [r7, #6]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d002      	beq.n	80044ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb8>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
          break;
 80044ea:	e002      	b.n	80044f2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xbe>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80044ec:	2311      	movs	r3, #17
 80044ee:	75fb      	strb	r3, [r7, #23]
          break;
 80044f0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80044f2:	494a      	ldr	r1, [pc, #296]	@ (800461c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80044f4:	68b8      	ldr	r0, [r7, #8]
 80044f6:	f7fc fdf1 	bl	80010dc <__aeabi_fcmpgt>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d100      	bne.n	8004502 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xce>
      {
        Odr = 200.0f;
      }
      break;
 8004500:	e016      	b.n	8004530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 8004502:	4b46      	ldr	r3, [pc, #280]	@ (800461c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004504:	60bb      	str	r3, [r7, #8]
      break;
 8004506:	e013      	b.n	8004530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8004508:	79bb      	ldrb	r3, [r7, #6]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d002      	beq.n	8004514 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xe0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 800450e:	2300      	movs	r3, #0
 8004510:	75fb      	strb	r3, [r7, #23]
          break;
 8004512:	e002      	b.n	800451a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xe6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004514:	2310      	movs	r3, #16
 8004516:	75fb      	strb	r3, [r7, #23]
          break;
 8004518:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800451a:	4940      	ldr	r1, [pc, #256]	@ (800461c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 800451c:	68b8      	ldr	r0, [r7, #8]
 800451e:	f7fc fddd 	bl	80010dc <__aeabi_fcmpgt>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d100      	bne.n	800452a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
      {
        Odr = 200.0f;
      }
      break;
 8004528:	e001      	b.n	800452e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfa>
        Odr = 200.0f;
 800452a:	4b3c      	ldr	r3, [pc, #240]	@ (800461c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 800452c:	60bb      	str	r3, [r7, #8]
      break;
 800452e:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8004530:	493b      	ldr	r1, [pc, #236]	@ (8004620 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1ec>)
 8004532:	68b8      	ldr	r0, [r7, #8]
 8004534:	f7fc fdbe 	bl	80010b4 <__aeabi_fcmple>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
 800453e:	2301      	movs	r3, #1
 8004540:	e03f      	b.n	80045c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004542:	4935      	ldr	r1, [pc, #212]	@ (8004618 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 8004544:	68b8      	ldr	r0, [r7, #8]
 8004546:	f7fc fdb5 	bl	80010b4 <__aeabi_fcmple>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004550:	2302      	movs	r3, #2
 8004552:	e036      	b.n	80045c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004554:	4933      	ldr	r1, [pc, #204]	@ (8004624 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f0>)
 8004556:	68b8      	ldr	r0, [r7, #8]
 8004558:	f7fc fdac 	bl	80010b4 <__aeabi_fcmple>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x132>
 8004562:	2303      	movs	r3, #3
 8004564:	e02d      	b.n	80045c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004566:	4930      	ldr	r1, [pc, #192]	@ (8004628 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f4>)
 8004568:	68b8      	ldr	r0, [r7, #8]
 800456a:	f7fc fda3 	bl	80010b4 <__aeabi_fcmple>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x144>
 8004574:	2304      	movs	r3, #4
 8004576:	e024      	b.n	80045c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004578:	492c      	ldr	r1, [pc, #176]	@ (800462c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>)
 800457a:	68b8      	ldr	r0, [r7, #8]
 800457c:	f7fc fd9a 	bl	80010b4 <__aeabi_fcmple>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x156>
 8004586:	2305      	movs	r3, #5
 8004588:	e01b      	b.n	80045c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 800458a:	4924      	ldr	r1, [pc, #144]	@ (800461c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 800458c:	68b8      	ldr	r0, [r7, #8]
 800458e:	f7fc fd91 	bl	80010b4 <__aeabi_fcmple>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8004598:	2306      	movs	r3, #6
 800459a:	e012      	b.n	80045c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 800459c:	4924      	ldr	r1, [pc, #144]	@ (8004630 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1fc>)
 800459e:	68b8      	ldr	r0, [r7, #8]
 80045a0:	f7fc fd88 	bl	80010b4 <__aeabi_fcmple>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17a>
 80045aa:	2307      	movs	r3, #7
 80045ac:	e009      	b.n	80045c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80045ae:	4921      	ldr	r1, [pc, #132]	@ (8004634 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x200>)
 80045b0:	68b8      	ldr	r0, [r7, #8]
 80045b2:	f7fc fd7f 	bl	80010b4 <__aeabi_fcmple>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18c>
 80045bc:	2308      	movs	r3, #8
 80045be:	e000      	b.n	80045c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80045c0:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 80045c2:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3320      	adds	r3, #32
 80045c8:	7dba      	ldrb	r2, [r7, #22]
 80045ca:	4611      	mov	r1, r2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fa17 	bl	8004a00 <lis2dw12_data_rate_set>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
  {
    return LIS2DW12_ERROR;
 80045d8:	f04f 33ff 	mov.w	r3, #4294967295
 80045dc:	e018      	b.n	8004610 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1dc>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3320      	adds	r3, #32
 80045e2:	7dfa      	ldrb	r2, [r7, #23]
 80045e4:	4611      	mov	r1, r2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f902 	bl	80047f0 <lis2dw12_power_mode_set>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c4>
  {
    return LIS2DW12_ERROR;
 80045f2:	f04f 33ff 	mov.w	r3, #4294967295
 80045f6:	e00b      	b.n	8004610 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1dc>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	79fa      	ldrb	r2, [r7, #7]
 8004602:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	79ba      	ldrb	r2, [r7, #6]
 800460a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return LIS2DW12_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	41480000 	.word	0x41480000
 800461c:	43480000 	.word	0x43480000
 8004620:	3fcccccd 	.word	0x3fcccccd
 8004624:	41c80000 	.word	0x41c80000
 8004628:	42480000 	.word	0x42480000
 800462c:	42c80000 	.word	0x42c80000
 8004630:	43c80000 	.word	0x43c80000
 8004634:	44480000 	.word	0x44480000

08004638 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	4611      	mov	r1, r2
 8004644:	461a      	mov	r2, r3
 8004646:	460b      	mov	r3, r1
 8004648:	71fb      	strb	r3, [r7, #7]
 800464a:	4613      	mov	r3, r2
 800464c:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	79fa      	ldrb	r2, [r7, #7]
 8004652:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	79ba      	ldrb	r2, [r7, #6]
 800465a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 800465e:	4928      	ldr	r1, [pc, #160]	@ (8004700 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 8004660:	68b8      	ldr	r0, [r7, #8]
 8004662:	f7fc fd27 	bl	80010b4 <__aeabi_fcmple>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x38>
 800466c:	4b24      	ldr	r3, [pc, #144]	@ (8004700 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 800466e:	e03f      	b.n	80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=   25.0f) ?   25.0f
 8004670:	4924      	ldr	r1, [pc, #144]	@ (8004704 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 8004672:	68b8      	ldr	r0, [r7, #8]
 8004674:	f7fc fd1e 	bl	80010b4 <__aeabi_fcmple>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x4a>
 800467e:	4b21      	ldr	r3, [pc, #132]	@ (8004704 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 8004680:	e036      	b.n	80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=   50.0f) ?   50.0f
 8004682:	4921      	ldr	r1, [pc, #132]	@ (8004708 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8004684:	68b8      	ldr	r0, [r7, #8]
 8004686:	f7fc fd15 	bl	80010b4 <__aeabi_fcmple>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x5c>
 8004690:	4b1d      	ldr	r3, [pc, #116]	@ (8004708 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8004692:	e02d      	b.n	80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  100.0f) ?  100.0f
 8004694:	491d      	ldr	r1, [pc, #116]	@ (800470c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8004696:	68b8      	ldr	r0, [r7, #8]
 8004698:	f7fc fd0c 	bl	80010b4 <__aeabi_fcmple>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 80046a2:	4b1a      	ldr	r3, [pc, #104]	@ (800470c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 80046a4:	e024      	b.n	80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  200.0f) ?  200.0f
 80046a6:	491a      	ldr	r1, [pc, #104]	@ (8004710 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 80046a8:	68b8      	ldr	r0, [r7, #8]
 80046aa:	f7fc fd03 	bl	80010b4 <__aeabi_fcmple>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
 80046b4:	4b16      	ldr	r3, [pc, #88]	@ (8004710 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 80046b6:	e01b      	b.n	80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  400.0f) ?  400.0f
 80046b8:	4916      	ldr	r1, [pc, #88]	@ (8004714 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 80046ba:	68b8      	ldr	r0, [r7, #8]
 80046bc:	f7fc fcfa 	bl	80010b4 <__aeabi_fcmple>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 80046c6:	4b13      	ldr	r3, [pc, #76]	@ (8004714 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 80046c8:	e012      	b.n	80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  800.0f) ?  800.0f
 80046ca:	4913      	ldr	r1, [pc, #76]	@ (8004718 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 80046cc:	68b8      	ldr	r0, [r7, #8]
 80046ce:	f7fc fcf1 	bl	80010b4 <__aeabi_fcmple>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa4>
 80046d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004718 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 80046da:	e009      	b.n	80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  :                    1600.0f;
 80046dc:	490f      	ldr	r1, [pc, #60]	@ (800471c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 80046de:	68b8      	ldr	r0, [r7, #8]
 80046e0:	f7fc fce8 	bl	80010b4 <__aeabi_fcmple>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb6>
 80046ea:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 80046ec:	e000      	b.n	80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
 80046ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	6353      	str	r3, [r2, #52]	@ 0x34

  return LIS2DW12_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	3fcccccd 	.word	0x3fcccccd
 8004704:	41480000 	.word	0x41480000
 8004708:	41c80000 	.word	0x41c80000
 800470c:	42480000 	.word	0x42480000
 8004710:	42c80000 	.word	0x42c80000
 8004714:	43480000 	.word	0x43480000
 8004718:	43c80000 	.word	0x43c80000
 800471c:	44480000 	.word	0x44480000
 8004720:	44c80000 	.word	0x44c80000

08004724 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004724:	b590      	push	{r4, r7, lr}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	607a      	str	r2, [r7, #4]
 800472e:	461a      	mov	r2, r3
 8004730:	460b      	mov	r3, r1
 8004732:	72fb      	strb	r3, [r7, #11]
 8004734:	4613      	mov	r3, r2
 8004736:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	695c      	ldr	r4, [r3, #20]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	7b1b      	ldrb	r3, [r3, #12]
 8004744:	4618      	mov	r0, r3
 8004746:	7afb      	ldrb	r3, [r7, #11]
 8004748:	b299      	uxth	r1, r3
 800474a:	893b      	ldrh	r3, [r7, #8]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	47a0      	blx	r4
 8004750:	4603      	mov	r3, r0
}
 8004752:	4618      	mov	r0, r3
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	bd90      	pop	{r4, r7, pc}

0800475a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800475a:	b590      	push	{r4, r7, lr}
 800475c:	b087      	sub	sp, #28
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	461a      	mov	r2, r3
 8004766:	460b      	mov	r3, r1
 8004768:	72fb      	strb	r3, [r7, #11]
 800476a:	4613      	mov	r3, r2
 800476c:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	691c      	ldr	r4, [r3, #16]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	7b1b      	ldrb	r3, [r3, #12]
 800477a:	4618      	mov	r0, r3
 800477c:	7afb      	ldrb	r3, [r7, #11]
 800477e:	b299      	uxth	r1, r3
 8004780:	893b      	ldrh	r3, [r7, #8]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	47a0      	blx	r4
 8004786:	4603      	mov	r3, r0
}
 8004788:	4618      	mov	r0, r3
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	bd90      	pop	{r4, r7, pc}

08004790 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004790:	b590      	push	{r4, r7, lr}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	607a      	str	r2, [r7, #4]
 800479a:	461a      	mov	r2, r3
 800479c:	460b      	mov	r3, r1
 800479e:	72fb      	strb	r3, [r7, #11]
 80047a0:	4613      	mov	r3, r2
 80047a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	685c      	ldr	r4, [r3, #4]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	68d8      	ldr	r0, [r3, #12]
 80047ac:	893b      	ldrh	r3, [r7, #8]
 80047ae:	7af9      	ldrb	r1, [r7, #11]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	47a0      	blx	r4
 80047b4:	6178      	str	r0, [r7, #20]

  return ret;
 80047b6:	697b      	ldr	r3, [r7, #20]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd90      	pop	{r4, r7, pc}

080047c0 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	461a      	mov	r2, r3
 80047cc:	460b      	mov	r3, r1
 80047ce:	72fb      	strb	r3, [r7, #11]
 80047d0:	4613      	mov	r3, r2
 80047d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681c      	ldr	r4, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68d8      	ldr	r0, [r3, #12]
 80047dc:	893b      	ldrh	r3, [r7, #8]
 80047de:	7af9      	ldrb	r1, [r7, #11]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	47a0      	blx	r4
 80047e4:	6178      	str	r0, [r7, #20]

  return ret;
 80047e6:	697b      	ldr	r3, [r7, #20]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd90      	pop	{r4, r7, pc}

080047f0 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80047fc:	f107 0210 	add.w	r2, r7, #16
 8004800:	2301      	movs	r3, #1
 8004802:	2120      	movs	r1, #32
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff ffc3 	bl	8004790 <lis2dw12_read_reg>
 800480a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d118      	bne.n	8004844 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	089b      	lsrs	r3, r3, #2
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	b2da      	uxtb	r2, r3
 800481c:	7c3b      	ldrb	r3, [r7, #16]
 800481e:	f362 0383 	bfi	r3, r2, #2, #2
 8004822:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	b2da      	uxtb	r2, r3
 800482c:	7c3b      	ldrb	r3, [r7, #16]
 800482e:	f362 0301 	bfi	r3, r2, #0, #2
 8004832:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004834:	f107 0210 	add.w	r2, r7, #16
 8004838:	2301      	movs	r3, #1
 800483a:	2120      	movs	r1, #32
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff ffbf 	bl	80047c0 <lis2dw12_write_reg>
 8004842:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d107      	bne.n	800485a <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800484a:	f107 020c 	add.w	r2, r7, #12
 800484e:	2301      	movs	r3, #1
 8004850:	2125      	movs	r1, #37	@ 0x25
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ff9c 	bl	8004790 <lis2dw12_read_reg>
 8004858:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d110      	bne.n	8004882 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	b2da      	uxtb	r2, r3
 800486a:	7b3b      	ldrb	r3, [r7, #12]
 800486c:	f362 0382 	bfi	r3, r2, #2, #1
 8004870:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004872:	f107 020c 	add.w	r2, r7, #12
 8004876:	2301      	movs	r3, #1
 8004878:	2125      	movs	r1, #37	@ 0x25
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff ffa0 	bl	80047c0 <lis2dw12_write_reg>
 8004880:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004882:	697b      	ldr	r3, [r7, #20]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004896:	f107 0210 	add.w	r2, r7, #16
 800489a:	2301      	movs	r3, #1
 800489c:	2120      	movs	r1, #32
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff ff76 	bl	8004790 <lis2dw12_read_reg>
 80048a4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f040 80a3 	bne.w	80049f4 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80048ae:	f107 020c 	add.w	r2, r7, #12
 80048b2:	2301      	movs	r3, #1
 80048b4:	2125      	movs	r1, #37	@ 0x25
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff ff6a 	bl	8004790 <lis2dw12_read_reg>
 80048bc:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80048be:	7b3b      	ldrb	r3, [r7, #12]
 80048c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	011a      	lsls	r2, r3, #4
 80048c8:	7c3b      	ldrb	r3, [r7, #16]
 80048ca:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
             ctrl1.lp_mode))
 80048d4:	7c3a      	ldrb	r2, [r7, #16]
 80048d6:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80048da:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80048dc:	4413      	add	r3, r2
 80048de:	2b1b      	cmp	r3, #27
 80048e0:	f200 8084 	bhi.w	80049ec <lis2dw12_power_mode_get+0x160>
 80048e4:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <lis2dw12_power_mode_get+0x60>)
 80048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ea:	bf00      	nop
 80048ec:	0800497d 	.word	0x0800497d
 80048f0:	08004975 	.word	0x08004975
 80048f4:	0800496d 	.word	0x0800496d
 80048f8:	08004965 	.word	0x08004965
 80048fc:	0800495d 	.word	0x0800495d
 8004900:	080049ed 	.word	0x080049ed
 8004904:	080049ed 	.word	0x080049ed
 8004908:	080049ed 	.word	0x080049ed
 800490c:	0800499d 	.word	0x0800499d
 8004910:	08004995 	.word	0x08004995
 8004914:	0800498d 	.word	0x0800498d
 8004918:	08004985 	.word	0x08004985
 800491c:	080049ed 	.word	0x080049ed
 8004920:	080049ed 	.word	0x080049ed
 8004924:	080049ed 	.word	0x080049ed
 8004928:	080049ed 	.word	0x080049ed
 800492c:	080049c5 	.word	0x080049c5
 8004930:	080049bd 	.word	0x080049bd
 8004934:	080049b5 	.word	0x080049b5
 8004938:	080049ad 	.word	0x080049ad
 800493c:	080049a5 	.word	0x080049a5
 8004940:	080049ed 	.word	0x080049ed
 8004944:	080049ed 	.word	0x080049ed
 8004948:	080049ed 	.word	0x080049ed
 800494c:	080049e5 	.word	0x080049e5
 8004950:	080049dd 	.word	0x080049dd
 8004954:	080049d5 	.word	0x080049d5
 8004958:	080049cd 	.word	0x080049cd
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2204      	movs	r2, #4
 8004960:	701a      	strb	r2, [r3, #0]
        break;
 8004962:	e047      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2203      	movs	r2, #3
 8004968:	701a      	strb	r2, [r3, #0]
        break;
 800496a:	e043      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2202      	movs	r2, #2
 8004970:	701a      	strb	r2, [r3, #0]
        break;
 8004972:	e03f      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	2201      	movs	r2, #1
 8004978:	701a      	strb	r2, [r3, #0]
        break;
 800497a:	e03b      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
        break;
 8004982:	e037      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	220b      	movs	r2, #11
 8004988:	701a      	strb	r2, [r3, #0]
        break;
 800498a:	e033      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	220a      	movs	r2, #10
 8004990:	701a      	strb	r2, [r3, #0]
        break;
 8004992:	e02f      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2209      	movs	r2, #9
 8004998:	701a      	strb	r2, [r3, #0]
        break;
 800499a:	e02b      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2208      	movs	r2, #8
 80049a0:	701a      	strb	r2, [r3, #0]
        break;
 80049a2:	e027      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2214      	movs	r2, #20
 80049a8:	701a      	strb	r2, [r3, #0]
        break;
 80049aa:	e023      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2213      	movs	r2, #19
 80049b0:	701a      	strb	r2, [r3, #0]
        break;
 80049b2:	e01f      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2212      	movs	r2, #18
 80049b8:	701a      	strb	r2, [r3, #0]
        break;
 80049ba:	e01b      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2211      	movs	r2, #17
 80049c0:	701a      	strb	r2, [r3, #0]
        break;
 80049c2:	e017      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2210      	movs	r2, #16
 80049c8:	701a      	strb	r2, [r3, #0]
        break;
 80049ca:	e013      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	221b      	movs	r2, #27
 80049d0:	701a      	strb	r2, [r3, #0]
        break;
 80049d2:	e00f      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	221a      	movs	r2, #26
 80049d8:	701a      	strb	r2, [r3, #0]
        break;
 80049da:	e00b      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2219      	movs	r2, #25
 80049e0:	701a      	strb	r2, [r3, #0]
        break;
 80049e2:	e007      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2218      	movs	r2, #24
 80049e8:	701a      	strb	r2, [r3, #0]
        break;
 80049ea:	e003      	b.n	80049f4 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2204      	movs	r2, #4
 80049f0:	701a      	strb	r2, [r3, #0]
        break;
 80049f2:	bf00      	nop
    }
  }

  return ret;
 80049f4:	697b      	ldr	r3, [r7, #20]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop

08004a00 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004a0c:	f107 0210 	add.w	r2, r7, #16
 8004a10:	2301      	movs	r3, #1
 8004a12:	2120      	movs	r1, #32
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff febb 	bl	8004790 <lis2dw12_read_reg>
 8004a1a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10f      	bne.n	8004a42 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	7c3b      	ldrb	r3, [r7, #16]
 8004a2c:	f362 1307 	bfi	r3, r2, #4, #4
 8004a30:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004a32:	f107 0210 	add.w	r2, r7, #16
 8004a36:	2301      	movs	r3, #1
 8004a38:	2120      	movs	r1, #32
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff fec0 	bl	80047c0 <lis2dw12_write_reg>
 8004a40:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d107      	bne.n	8004a58 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004a48:	f107 020c 	add.w	r2, r7, #12
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	2122      	movs	r1, #34	@ 0x22
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff fe9d 	bl	8004790 <lis2dw12_read_reg>
 8004a56:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d110      	bne.n	8004a80 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	7b3b      	ldrb	r3, [r7, #12]
 8004a6a:	f362 0301 	bfi	r3, r2, #0, #2
 8004a6e:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004a70:	f107 020c 	add.w	r2, r7, #12
 8004a74:	2301      	movs	r3, #1
 8004a76:	2122      	movs	r1, #34	@ 0x22
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff fea1 	bl	80047c0 <lis2dw12_write_reg>
 8004a7e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004a80:	697b      	ldr	r3, [r7, #20]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004a96:	f107 0210 	add.w	r2, r7, #16
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	2120      	movs	r1, #32
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff fe76 	bl	8004790 <lis2dw12_read_reg>
 8004aa4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f040 80b3 	bne.w	8004c14 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004aae:	f107 020c 	add.w	r2, r7, #12
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	2122      	movs	r1, #34	@ 0x22
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff fe6a 	bl	8004790 <lis2dw12_read_reg>
 8004abc:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8004abe:	7b3b      	ldrb	r3, [r7, #12]
 8004ac0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	7c3a      	ldrb	r2, [r7, #16]
 8004aca:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	2b32      	cmp	r3, #50	@ 0x32
 8004ad4:	f200 809a 	bhi.w	8004c0c <lis2dw12_data_rate_get+0x180>
 8004ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae0 <lis2dw12_data_rate_get+0x54>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004bad 	.word	0x08004bad
 8004ae4:	08004bb5 	.word	0x08004bb5
 8004ae8:	08004bbd 	.word	0x08004bbd
 8004aec:	08004bc5 	.word	0x08004bc5
 8004af0:	08004bcd 	.word	0x08004bcd
 8004af4:	08004bd5 	.word	0x08004bd5
 8004af8:	08004bdd 	.word	0x08004bdd
 8004afc:	08004be5 	.word	0x08004be5
 8004b00:	08004bed 	.word	0x08004bed
 8004b04:	08004bf5 	.word	0x08004bf5
 8004b08:	08004c0d 	.word	0x08004c0d
 8004b0c:	08004c0d 	.word	0x08004c0d
 8004b10:	08004c0d 	.word	0x08004c0d
 8004b14:	08004c0d 	.word	0x08004c0d
 8004b18:	08004c0d 	.word	0x08004c0d
 8004b1c:	08004c0d 	.word	0x08004c0d
 8004b20:	08004c0d 	.word	0x08004c0d
 8004b24:	08004c0d 	.word	0x08004c0d
 8004b28:	08004c05 	.word	0x08004c05
 8004b2c:	08004c0d 	.word	0x08004c0d
 8004b30:	08004c0d 	.word	0x08004c0d
 8004b34:	08004c0d 	.word	0x08004c0d
 8004b38:	08004c0d 	.word	0x08004c0d
 8004b3c:	08004c0d 	.word	0x08004c0d
 8004b40:	08004c0d 	.word	0x08004c0d
 8004b44:	08004c0d 	.word	0x08004c0d
 8004b48:	08004c0d 	.word	0x08004c0d
 8004b4c:	08004c0d 	.word	0x08004c0d
 8004b50:	08004c0d 	.word	0x08004c0d
 8004b54:	08004c0d 	.word	0x08004c0d
 8004b58:	08004c0d 	.word	0x08004c0d
 8004b5c:	08004c0d 	.word	0x08004c0d
 8004b60:	08004c0d 	.word	0x08004c0d
 8004b64:	08004c0d 	.word	0x08004c0d
 8004b68:	08004c0d 	.word	0x08004c0d
 8004b6c:	08004c0d 	.word	0x08004c0d
 8004b70:	08004c0d 	.word	0x08004c0d
 8004b74:	08004c0d 	.word	0x08004c0d
 8004b78:	08004c0d 	.word	0x08004c0d
 8004b7c:	08004c0d 	.word	0x08004c0d
 8004b80:	08004c0d 	.word	0x08004c0d
 8004b84:	08004c0d 	.word	0x08004c0d
 8004b88:	08004c0d 	.word	0x08004c0d
 8004b8c:	08004c0d 	.word	0x08004c0d
 8004b90:	08004c0d 	.word	0x08004c0d
 8004b94:	08004c0d 	.word	0x08004c0d
 8004b98:	08004c0d 	.word	0x08004c0d
 8004b9c:	08004c0d 	.word	0x08004c0d
 8004ba0:	08004c0d 	.word	0x08004c0d
 8004ba4:	08004c0d 	.word	0x08004c0d
 8004ba8:	08004bfd 	.word	0x08004bfd
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
        break;
 8004bb2:	e02f      	b.n	8004c14 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	701a      	strb	r2, [r3, #0]
        break;
 8004bba:	e02b      	b.n	8004c14 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	701a      	strb	r2, [r3, #0]
        break;
 8004bc2:	e027      	b.n	8004c14 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	701a      	strb	r2, [r3, #0]
        break;
 8004bca:	e023      	b.n	8004c14 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2204      	movs	r2, #4
 8004bd0:	701a      	strb	r2, [r3, #0]
        break;
 8004bd2:	e01f      	b.n	8004c14 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2205      	movs	r2, #5
 8004bd8:	701a      	strb	r2, [r3, #0]
        break;
 8004bda:	e01b      	b.n	8004c14 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2206      	movs	r2, #6
 8004be0:	701a      	strb	r2, [r3, #0]
        break;
 8004be2:	e017      	b.n	8004c14 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2207      	movs	r2, #7
 8004be8:	701a      	strb	r2, [r3, #0]
        break;
 8004bea:	e013      	b.n	8004c14 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2208      	movs	r2, #8
 8004bf0:	701a      	strb	r2, [r3, #0]
        break;
 8004bf2:	e00f      	b.n	8004c14 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2209      	movs	r2, #9
 8004bf8:	701a      	strb	r2, [r3, #0]
        break;
 8004bfa:	e00b      	b.n	8004c14 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2232      	movs	r2, #50	@ 0x32
 8004c00:	701a      	strb	r2, [r3, #0]
        break;
 8004c02:	e007      	b.n	8004c14 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2212      	movs	r2, #18
 8004c08:	701a      	strb	r2, [r3, #0]
        break;
 8004c0a:	e003      	b.n	8004c14 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]
        break;
 8004c12:	bf00      	nop
    }
  }

  return ret;
 8004c14:	697b      	ldr	r3, [r7, #20]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop

08004c20 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004c2c:	f107 0208 	add.w	r2, r7, #8
 8004c30:	2301      	movs	r3, #1
 8004c32:	2121      	movs	r1, #33	@ 0x21
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7ff fdab 	bl	8004790 <lis2dw12_read_reg>
 8004c3a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10f      	bne.n	8004c62 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	7a3b      	ldrb	r3, [r7, #8]
 8004c4c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004c50:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004c52:	f107 0208 	add.w	r2, r7, #8
 8004c56:	2301      	movs	r3, #1
 8004c58:	2121      	movs	r1, #33	@ 0x21
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff fdb0 	bl	80047c0 <lis2dw12_write_reg>
 8004c60:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c62:	68fb      	ldr	r3, [r7, #12]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004c78:	f107 0208 	add.w	r2, r7, #8
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	2125      	movs	r1, #37	@ 0x25
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff fd85 	bl	8004790 <lis2dw12_read_reg>
 8004c86:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10f      	bne.n	8004cae <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	7a3b      	ldrb	r3, [r7, #8]
 8004c98:	f362 1305 	bfi	r3, r2, #4, #2
 8004c9c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004c9e:	f107 0208 	add.w	r2, r7, #8
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	2125      	movs	r1, #37	@ 0x25
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff fd8a 	bl	80047c0 <lis2dw12_write_reg>
 8004cac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004cae:	68fb      	ldr	r3, [r7, #12]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004cc2:	f107 0208 	add.w	r2, r7, #8
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	2125      	movs	r1, #37	@ 0x25
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff fd60 	bl	8004790 <lis2dw12_read_reg>
 8004cd0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8004cd2:	7a3b      	ldrb	r3, [r7, #8]
 8004cd4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d81a      	bhi.n	8004d14 <lis2dw12_full_scale_get+0x5c>
 8004cde:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce4 <lis2dw12_full_scale_get+0x2c>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004cf5 	.word	0x08004cf5
 8004ce8:	08004cfd 	.word	0x08004cfd
 8004cec:	08004d05 	.word	0x08004d05
 8004cf0:	08004d0d 	.word	0x08004d0d
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
      break;
 8004cfa:	e00f      	b.n	8004d1c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	701a      	strb	r2, [r3, #0]
      break;
 8004d02:	e00b      	b.n	8004d1c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2202      	movs	r2, #2
 8004d08:	701a      	strb	r2, [r3, #0]
      break;
 8004d0a:	e007      	b.n	8004d1c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2203      	movs	r2, #3
 8004d10:	701a      	strb	r2, [r3, #0]
      break;
 8004d12:	e003      	b.n	8004d1c <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
      break;
 8004d1a:	bf00      	nop
  }

  return ret;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop

08004d28 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8004d32:	f107 020c 	add.w	r2, r7, #12
 8004d36:	2306      	movs	r3, #6
 8004d38:	2128      	movs	r1, #40	@ 0x28
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff fd28 	bl	8004790 <lis2dw12_read_reg>
 8004d40:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004d42:	7b7b      	ldrb	r3, [r7, #13]
 8004d44:	b21a      	sxth	r2, r3
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	7b3a      	ldrb	r2, [r7, #12]
 8004d58:	4413      	add	r3, r2
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	b21a      	sxth	r2, r3
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004d62:	7bfa      	ldrb	r2, [r7, #15]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	3302      	adds	r3, #2
 8004d68:	b212      	sxth	r2, r2
 8004d6a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	3302      	adds	r3, #2
 8004d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	7bba      	ldrb	r2, [r7, #14]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	3302      	adds	r3, #2
 8004d84:	b212      	sxth	r2, r2
 8004d86:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004d88:	7c7a      	ldrb	r2, [r7, #17]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	b212      	sxth	r2, r2
 8004d90:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	3304      	adds	r3, #4
 8004d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	7c3a      	ldrb	r2, [r7, #16]
 8004da2:	4413      	add	r3, r2
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	3304      	adds	r3, #4
 8004daa:	b212      	sxth	r2, r2
 8004dac:	801a      	strh	r2, [r3, #0]

  return ret;
 8004dae:	697b      	ldr	r3, [r7, #20]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	210f      	movs	r1, #15
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff fce1 	bl	8004790 <lis2dw12_read_reg>
 8004dce:	60f8      	str	r0, [r7, #12]

  return ret;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	460b      	mov	r3, r1
 8004de4:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004de6:	f107 0208 	add.w	r2, r7, #8
 8004dea:	2301      	movs	r3, #1
 8004dec:	2121      	movs	r1, #33	@ 0x21
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff fcce 	bl	8004790 <lis2dw12_read_reg>
 8004df4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10f      	bne.n	8004e1c <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	7a3b      	ldrb	r3, [r7, #8]
 8004e06:	f362 0382 	bfi	r3, r2, #2, #1
 8004e0a:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004e0c:	f107 0208 	add.w	r2, r7, #8
 8004e10:	2301      	movs	r3, #1
 8004e12:	2121      	movs	r1, #33	@ 0x21
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff fcd3 	bl	80047c0 <lis2dw12_write_reg>
 8004e1a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b086      	sub	sp, #24
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8004e30:	f107 0210 	add.w	r2, r7, #16
 8004e34:	2301      	movs	r3, #1
 8004e36:	2124      	movs	r1, #36	@ 0x24
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff fca9 	bl	8004790 <lis2dw12_read_reg>
 8004e3e:	6178      	str	r0, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d107      	bne.n	8004e56 <lis2dw12_pin_int1_route_set+0x30>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8004e46:	f107 020c 	add.w	r2, r7, #12
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	213f      	movs	r1, #63	@ 0x3f
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fc9e 	bl	8004790 <lis2dw12_read_reg>
 8004e54:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d13e      	bne.n	8004eda <lis2dw12_pin_int1_route_set+0xb4>
  {
    if ((val->int1_tap |
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004e64:	b2da      	uxtb	r2, r3
         val->int1_ff |
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004e6e:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8004e70:	4313      	orrs	r3, r2
 8004e72:	b2da      	uxtb	r2, r3
         val->int1_wu |
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004e7c:	b2db      	uxtb	r3, r3
         val->int1_ff |
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004e8a:	b2db      	uxtb	r3, r3
         val->int1_wu |
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	b2da      	uxtb	r2, r3
         val->int1_6d |
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004e98:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8004e9e:	7c3b      	ldrb	r3, [r7, #16]
 8004ea0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ea4:	b2db      	uxtb	r3, r3
         val->int1_6d |
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 8004eaa:	7c3b      	ldrb	r3, [r7, #16]
 8004eac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004eb0:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <lis2dw12_pin_int1_route_set+0x9e>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 8004eba:	7b3b      	ldrb	r3, [r7, #12]
 8004ebc:	f043 0320 	orr.w	r3, r3, #32
 8004ec0:	733b      	strb	r3, [r7, #12]
 8004ec2:	e003      	b.n	8004ecc <lis2dw12_pin_int1_route_set+0xa6>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 8004ec4:	7b3b      	ldrb	r3, [r7, #12]
 8004ec6:	f36f 1345 	bfc	r3, #5, #1
 8004eca:	733b      	strb	r3, [r7, #12]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8004ecc:	2301      	movs	r3, #1
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	2123      	movs	r1, #35	@ 0x23
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fc74 	bl	80047c0 <lis2dw12_write_reg>
 8004ed8:	6178      	str	r0, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d107      	bne.n	8004ef0 <lis2dw12_pin_int1_route_set+0xca>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8004ee0:	f107 020c 	add.w	r2, r7, #12
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	213f      	movs	r1, #63	@ 0x3f
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff fc69 	bl	80047c0 <lis2dw12_write_reg>
 8004eee:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004ef0:	697b      	ldr	r3, [r7, #20]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8004f04:	2301      	movs	r3, #1
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	2123      	movs	r1, #35	@ 0x23
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff fc40 	bl	8004790 <lis2dw12_read_reg>
 8004f10:	60f8      	str	r0, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8004f12:	68fb      	ldr	r3, [r7, #12]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <lis2dw12_6d_threshold_set>:
  * @param  val      change the values of 6d_ths in reg TAP_THS_X
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_6d_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	70fb      	strb	r3, [r7, #3]
  lis2dw12_tap_ths_x_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_TAP_THS_X, (uint8_t *) &reg, 1);
 8004f28:	f107 0208 	add.w	r2, r7, #8
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	2130      	movs	r1, #48	@ 0x30
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff fc2d 	bl	8004790 <lis2dw12_read_reg>
 8004f36:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10f      	bne.n	8004f5e <lis2dw12_6d_threshold_set+0x42>
  {
    reg._6d_ths = val;
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	f003 0303 	and.w	r3, r3, #3
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	7a3b      	ldrb	r3, [r7, #8]
 8004f48:	f362 1346 	bfi	r3, r2, #5, #2
 8004f4c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_TAP_THS_X, (uint8_t *) &reg, 1);
 8004f4e:	f107 0208 	add.w	r2, r7, #8
 8004f52:	2301      	movs	r3, #1
 8004f54:	2130      	movs	r1, #48	@ 0x30
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff fc32 	bl	80047c0 <lis2dw12_write_reg>
 8004f5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004f74:	f107 0208 	add.w	r2, r7, #8
 8004f78:	2301      	movs	r3, #1
 8004f7a:	212e      	movs	r1, #46	@ 0x2e
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff fc07 	bl	8004790 <lis2dw12_read_reg>
 8004f82:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10f      	bne.n	8004faa <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	7a3b      	ldrb	r3, [r7, #8]
 8004f94:	f362 1347 	bfi	r3, r2, #5, #3
 8004f98:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004f9a:	f107 0208 	add.w	r2, r7, #8
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	212e      	movs	r1, #46	@ 0x2e
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff fc0c 	bl	80047c0 <lis2dw12_write_reg>
 8004fa8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004faa:	68fb      	ldr	r3, [r7, #12]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d103      	bne.n	8004fd0 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e067      	b.n	80050a0 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	7b1a      	ldrb	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	695a      	ldr	r2, [r3, #20]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a28      	ldr	r2, [pc, #160]	@ (80050ac <LIS2MDL_RegisterBusIO+0xf8>)
 800500c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a27      	ldr	r2, [pc, #156]	@ (80050b0 <LIS2MDL_RegisterBusIO+0xfc>)
 8005012:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 800502a:	f04f 33ff 	mov.w	r3, #4294967295
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	e036      	b.n	80050a0 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4798      	blx	r3
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800503e:	f04f 33ff 	mov.w	r3, #4294967295
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	e02c      	b.n	80050a0 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d028      	beq.n	80050a0 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005054:	2b00      	cmp	r3, #0
 8005056:	d123      	bne.n	80050a0 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d10d      	bne.n	800507c <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8005060:	2334      	movs	r3, #52	@ 0x34
 8005062:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8005064:	7afb      	ldrb	r3, [r7, #11]
 8005066:	461a      	mov	r2, r3
 8005068:	2162      	movs	r1, #98	@ 0x62
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fb16 	bl	800569c <LIS2MDL_Write_Reg>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d014      	beq.n	80050a0 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8005076:	f04f 33ff 	mov.w	r3, #4294967295
 800507a:	e012      	b.n	80050a2 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b03      	cmp	r3, #3
 8005082:	d101      	bne.n	8005088 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	e00c      	b.n	80050a2 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3320      	adds	r3, #32
 800508c:	2101      	movs	r1, #1
 800508e:	4618      	mov	r0, r3
 8005090:	f000 ff67 	bl	8005f62 <lis2mdl_i2c_interface_set>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800509a:	f04f 33ff 	mov.w	r3, #4294967295
 800509e:	e000      	b.n	80050a2 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80050a0:	68fb      	ldr	r3, [r7, #12]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	080056f3 	.word	0x080056f3
 80050b0:	08005775 	.word	0x08005775

080050b4 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d144      	bne.n	800514e <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80050c4:	f107 0208 	add.w	r2, r7, #8
 80050c8:	2301      	movs	r3, #1
 80050ca:	2162      	movs	r1, #98	@ 0x62
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fb92 	bl	80057f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80050d8:	f04f 33ff 	mov.w	r3, #4294967295
 80050dc:	e06c      	b.n	80051b8 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80050de:	f107 020c 	add.w	r2, r7, #12
 80050e2:	2301      	movs	r3, #1
 80050e4:	2160      	movs	r1, #96	@ 0x60
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fb85 	bl	80057f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80050f2:	f04f 33ff 	mov.w	r3, #4294967295
 80050f6:	e05f      	b.n	80051b8 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80050f8:	7a3b      	ldrb	r3, [r7, #8]
 80050fa:	f043 0310 	orr.w	r3, r3, #16
 80050fe:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8005100:	7a3b      	ldrb	r3, [r7, #8]
 8005102:	f36f 0341 	bfc	r3, #1, #1
 8005106:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8005108:	7b3b      	ldrb	r3, [r7, #12]
 800510a:	2202      	movs	r2, #2
 800510c:	f362 0301 	bfi	r3, r2, #0, #2
 8005110:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8005112:	7b3b      	ldrb	r3, [r7, #12]
 8005114:	f043 030c 	orr.w	r3, r3, #12
 8005118:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800511a:	f107 0208 	add.w	r2, r7, #8
 800511e:	2301      	movs	r3, #1
 8005120:	2162      	movs	r1, #98	@ 0x62
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fca6 	bl	8005a74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800512e:	f04f 33ff 	mov.w	r3, #4294967295
 8005132:	e041      	b.n	80051b8 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005134:	f107 020c 	add.w	r2, r7, #12
 8005138:	2301      	movs	r3, #1
 800513a:	2160      	movs	r1, #96	@ 0x60
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fc99 	bl	8005a74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d032      	beq.n	80051ae <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8005148:	f04f 33ff 	mov.w	r3, #4294967295
 800514c:	e034      	b.n	80051b8 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3320      	adds	r3, #32
 8005152:	2101      	movs	r1, #1
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fe5f 	bl	8005e18 <lis2mdl_block_data_update_set>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8005160:	f04f 33ff 	mov.w	r3, #4294967295
 8005164:	e028      	b.n	80051b8 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3320      	adds	r3, #32
 800516a:	2102      	movs	r1, #2
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fdcf 	bl	8005d10 <lis2mdl_operating_mode_set>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8005178:	f04f 33ff 	mov.w	r3, #4294967295
 800517c:	e01c      	b.n	80051b8 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3320      	adds	r3, #32
 8005182:	2103      	movs	r1, #3
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fde9 	bl	8005d5c <lis2mdl_data_rate_set>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8005190:	f04f 33ff 	mov.w	r3, #4294967295
 8005194:	e010      	b.n	80051b8 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3320      	adds	r3, #32
 800519a:	2100      	movs	r1, #0
 800519c:	4618      	mov	r0, r3
 800519e:	f000 feba 	bl	8005f16 <lis2mdl_self_test_set>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80051a8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ac:	e004      	b.n	80051b8 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f8a5 	bl	8005318 <LIS2MDL_MAG_Disable>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80051d4:	f04f 33ff 	mov.w	r3, #4294967295
 80051d8:	e004      	b.n	80051e4 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d10b      	bne.n	8005216 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80051fe:	2301      	movs	r3, #1
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	214f      	movs	r1, #79	@ 0x4f
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 faf6 	bl	80057f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00e      	beq.n	800522e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8005210:	f04f 33ff 	mov.w	r3, #4294967295
 8005214:	e00c      	b.n	8005230 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3320      	adds	r3, #32
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fe69 	bl	8005ef4 <lis2mdl_device_id_get>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8005228:	f04f 33ff 	mov.w	r3, #4294967295
 800522c:	e000      	b.n	8005230 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2200      	movs	r2, #0
 800524c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2201      	movs	r2, #1
 8005252:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2200      	movs	r2, #0
 8005258:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2200      	movs	r2, #0
 800525e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2200      	movs	r2, #0
 8005264:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2232      	movs	r2, #50	@ 0x32
 800526a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	4a04      	ldr	r2, [pc, #16]	@ (8005290 <LIS2MDL_GetCapabilities+0x58>)
 8005280:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	42c80000 	.word	0x42c80000

08005294 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e032      	b.n	8005310 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d11d      	bne.n	80052ee <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80052b2:	f107 020c 	add.w	r2, r7, #12
 80052b6:	2301      	movs	r3, #1
 80052b8:	2160      	movs	r1, #96	@ 0x60
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fa9b 	bl	80057f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80052c6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ca:	e021      	b.n	8005310 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80052cc:	7b3b      	ldrb	r3, [r7, #12]
 80052ce:	f36f 0301 	bfc	r3, #0, #2
 80052d2:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80052d4:	f107 020c 	add.w	r2, r7, #12
 80052d8:	2301      	movs	r3, #1
 80052da:	2160      	movs	r1, #96	@ 0x60
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fbc9 	bl	8005a74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00e      	beq.n	8005306 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80052e8:	f04f 33ff 	mov.w	r3, #4294967295
 80052ec:	e010      	b.n	8005310 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3320      	adds	r3, #32
 80052f2:	2100      	movs	r1, #0
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fd0b 	bl	8005d10 <lis2mdl_operating_mode_set>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8005300:	f04f 33ff 	mov.w	r3, #4294967295
 8005304:	e004      	b.n	8005310 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	e033      	b.n	8005396 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b03      	cmp	r3, #3
 8005334:	d11e      	bne.n	8005374 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005336:	f107 020c 	add.w	r2, r7, #12
 800533a:	2301      	movs	r3, #1
 800533c:	2160      	movs	r1, #96	@ 0x60
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fa59 	bl	80057f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 800534a:	f04f 33ff 	mov.w	r3, #4294967295
 800534e:	e022      	b.n	8005396 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8005350:	7b3b      	ldrb	r3, [r7, #12]
 8005352:	2202      	movs	r2, #2
 8005354:	f362 0301 	bfi	r3, r2, #0, #2
 8005358:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800535a:	f107 020c 	add.w	r2, r7, #12
 800535e:	2301      	movs	r3, #1
 8005360:	2160      	movs	r1, #96	@ 0x60
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fb86 	bl	8005a74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00e      	beq.n	800538c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800536e:	f04f 33ff 	mov.w	r3, #4294967295
 8005372:	e010      	b.n	8005396 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3320      	adds	r3, #32
 8005378:	2102      	movs	r1, #2
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fcc8 	bl	8005d10 <lis2mdl_operating_mode_set>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8005386:	f04f 33ff 	mov.w	r3, #4294967295
 800538a:	e004      	b.n	8005396 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 80053ae:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3320      	adds	r3, #32
 80053ce:	f107 020b 	add.w	r2, r7, #11
 80053d2:	4611      	mov	r1, r2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fce7 	bl	8005da8 <lis2mdl_data_rate_get>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80053e0:	f04f 33ff 	mov.w	r3, #4294967295
 80053e4:	e023      	b.n	800542e <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80053e6:	7afb      	ldrb	r3, [r7, #11]
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d81b      	bhi.n	8005424 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80053ec:	a201      	add	r2, pc, #4	@ (adr r2, 80053f4 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80053ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f2:	bf00      	nop
 80053f4:	08005405 	.word	0x08005405
 80053f8:	0800540d 	.word	0x0800540d
 80053fc:	08005415 	.word	0x08005415
 8005400:	0800541d 	.word	0x0800541d
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	4a0c      	ldr	r2, [pc, #48]	@ (8005438 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8005408:	601a      	str	r2, [r3, #0]
      break;
 800540a:	e00f      	b.n	800542c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	4a0b      	ldr	r2, [pc, #44]	@ (800543c <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8005410:	601a      	str	r2, [r3, #0]
      break;
 8005412:	e00b      	b.n	800542c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	4a0a      	ldr	r2, [pc, #40]	@ (8005440 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8005418:	601a      	str	r2, [r3, #0]
      break;
 800541a:	e007      	b.n	800542c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	4a09      	ldr	r2, [pc, #36]	@ (8005444 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8005420:	601a      	str	r2, [r3, #0]
      break;
 8005422:	e003      	b.n	800542c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8005424:	f04f 33ff 	mov.w	r3, #4294967295
 8005428:	60fb      	str	r3, [r7, #12]
      break;
 800542a:	bf00      	nop
  }

  return ret;
 800542c:	68fb      	ldr	r3, [r7, #12]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	41200000 	.word	0x41200000
 800543c:	41a00000 	.word	0x41a00000
 8005440:	42480000 	.word	0x42480000
 8005444:	42c80000 	.word	0x42c80000

08005448 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8005452:	492a      	ldr	r1, [pc, #168]	@ (80054fc <LIS2MDL_MAG_SetOutputDataRate+0xb4>)
 8005454:	6838      	ldr	r0, [r7, #0]
 8005456:	f7fb fe2d 	bl	80010b4 <__aeabi_fcmple>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <LIS2MDL_MAG_SetOutputDataRate+0x1c>
 8005460:	2300      	movs	r3, #0
 8005462:	e012      	b.n	800548a <LIS2MDL_MAG_SetOutputDataRate+0x42>
 8005464:	4926      	ldr	r1, [pc, #152]	@ (8005500 <LIS2MDL_MAG_SetOutputDataRate+0xb8>)
 8005466:	6838      	ldr	r0, [r7, #0]
 8005468:	f7fb fe24 	bl	80010b4 <__aeabi_fcmple>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <LIS2MDL_MAG_SetOutputDataRate+0x2e>
 8005472:	2301      	movs	r3, #1
 8005474:	e009      	b.n	800548a <LIS2MDL_MAG_SetOutputDataRate+0x42>
 8005476:	4923      	ldr	r1, [pc, #140]	@ (8005504 <LIS2MDL_MAG_SetOutputDataRate+0xbc>)
 8005478:	6838      	ldr	r0, [r7, #0]
 800547a:	f7fb fe1b 	bl	80010b4 <__aeabi_fcmple>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <LIS2MDL_MAG_SetOutputDataRate+0x40>
 8005484:	2302      	movs	r3, #2
 8005486:	e000      	b.n	800548a <LIS2MDL_MAG_SetOutputDataRate+0x42>
 8005488:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 800548a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	2b03      	cmp	r3, #3
 8005492:	d121      	bne.n	80054d8 <LIS2MDL_MAG_SetOutputDataRate+0x90>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005494:	f107 020c 	add.w	r2, r7, #12
 8005498:	2301      	movs	r3, #1
 800549a:	2160      	movs	r1, #96	@ 0x60
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f9aa 	bl	80057f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <LIS2MDL_MAG_SetOutputDataRate+0x66>
    {
      return LIS2MDL_ERROR;
 80054a8:	f04f 33ff 	mov.w	r3, #4294967295
 80054ac:	e022      	b.n	80054f4 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	7b3b      	ldrb	r3, [r7, #12]
 80054b8:	f362 0383 	bfi	r3, r2, #2, #2
 80054bc:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80054be:	f107 020c 	add.w	r2, r7, #12
 80054c2:	2301      	movs	r3, #1
 80054c4:	2160      	movs	r1, #96	@ 0x60
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fad4 	bl	8005a74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00f      	beq.n	80054f2 <LIS2MDL_MAG_SetOutputDataRate+0xaa>
    {
      return LIS2MDL_ERROR;
 80054d2:	f04f 33ff 	mov.w	r3, #4294967295
 80054d6:	e00d      	b.n	80054f4 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3320      	adds	r3, #32
 80054dc:	7bfa      	ldrb	r2, [r7, #15]
 80054de:	4611      	mov	r1, r2
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 fc3b 	bl	8005d5c <lis2mdl_data_rate_set>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <LIS2MDL_MAG_SetOutputDataRate+0xaa>
    {
      return LIS2MDL_ERROR;
 80054ec:	f04f 33ff 	mov.w	r3, #4294967295
 80054f0:	e000      	b.n	80054f4 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }
  }

  return LIS2MDL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	41200000 	.word	0x41200000
 8005500:	41a00000 	.word	0x41a00000
 8005504:	42480000 	.word	0x42480000

08005508 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2232      	movs	r2, #50	@ 0x32
 8005516:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr

0800553a <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3320      	adds	r3, #32
 8005548:	f107 0208 	add.w	r2, r7, #8
 800554c:	4611      	mov	r1, r2
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fc88 	bl	8005e64 <lis2mdl_magnetic_raw_get>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 800555a:	f04f 33ff 	mov.w	r3, #4294967295
 800555e:	e00c      	b.n	800557a <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005560:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005568:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005570:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b088      	sub	sp, #32
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b03      	cmp	r3, #3
 8005592:	d134      	bne.n	80055fe <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8005594:	f107 0218 	add.w	r2, r7, #24
 8005598:	2306      	movs	r3, #6
 800559a:	2168      	movs	r1, #104	@ 0x68
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f92a 	bl	80057f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 80055a8:	f04f 33ff 	mov.w	r3, #4294967295
 80055ac:	e072      	b.n	8005694 <LIS2MDL_MAG_GetAxes+0x112>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 80055ae:	7e7b      	ldrb	r3, [r7, #25]
 80055b0:	b21b      	sxth	r3, r3
 80055b2:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 80055b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	b29b      	uxth	r3, r3
 80055be:	7e3a      	ldrb	r2, [r7, #24]
 80055c0:	4413      	add	r3, r2
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	b21b      	sxth	r3, r3
 80055c6:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80055c8:	7efb      	ldrb	r3, [r7, #27]
 80055ca:	b21b      	sxth	r3, r3
 80055cc:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80055ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	7eba      	ldrb	r2, [r7, #26]
 80055da:	4413      	add	r3, r2
 80055dc:	b29b      	uxth	r3, r3
 80055de:	b21b      	sxth	r3, r3
 80055e0:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80055e2:	7f7b      	ldrb	r3, [r7, #29]
 80055e4:	b21b      	sxth	r3, r3
 80055e6:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80055e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	7f3a      	ldrb	r2, [r7, #28]
 80055f4:	4413      	add	r3, r2
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	b21b      	sxth	r3, r3
 80055fa:	82bb      	strh	r3, [r7, #20]
 80055fc:	e00d      	b.n	800561a <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3320      	adds	r3, #32
 8005602:	f107 0210 	add.w	r2, r7, #16
 8005606:	4611      	mov	r1, r2
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fc2b 	bl	8005e64 <lis2mdl_magnetic_raw_get>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 8005614:	f04f 33ff 	mov.w	r3, #4294967295
 8005618:	e03c      	b.n	8005694 <LIS2MDL_MAG_GetAxes+0x112>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 800561a:	f107 030c 	add.w	r3, r7, #12
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff febc 	bl	800539e <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005626:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800562a:	4618      	mov	r0, r3
 800562c:	f7fb fb46 	bl	8000cbc <__aeabi_i2f>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f7fb fb94 	bl	8000d64 <__aeabi_fmul>
 800563c:	4603      	mov	r3, r0
 800563e:	4618      	mov	r0, r3
 8005640:	f7fb fd56 	bl	80010f0 <__aeabi_f2iz>
 8005644:	4602      	mov	r2, r0
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800564a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800564e:	4618      	mov	r0, r3
 8005650:	f7fb fb34 	bl	8000cbc <__aeabi_i2f>
 8005654:	4602      	mov	r2, r0
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4619      	mov	r1, r3
 800565a:	4610      	mov	r0, r2
 800565c:	f7fb fb82 	bl	8000d64 <__aeabi_fmul>
 8005660:	4603      	mov	r3, r0
 8005662:	4618      	mov	r0, r3
 8005664:	f7fb fd44 	bl	80010f0 <__aeabi_f2iz>
 8005668:	4602      	mov	r2, r0
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800566e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005672:	4618      	mov	r0, r3
 8005674:	f7fb fb22 	bl	8000cbc <__aeabi_i2f>
 8005678:	4602      	mov	r2, r0
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f7fb fb70 	bl	8000d64 <__aeabi_fmul>
 8005684:	4603      	mov	r3, r0
 8005686:	4618      	mov	r0, r3
 8005688:	f7fb fd32 	bl	80010f0 <__aeabi_f2iz>
 800568c:	4602      	mov	r2, r0
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3720      	adds	r7, #32
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	70fb      	strb	r3, [r7, #3]
 80056a8:	4613      	mov	r3, r2
 80056aa:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d10b      	bne.n	80056cc <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 80056b4:	1cba      	adds	r2, r7, #2
 80056b6:	78f9      	ldrb	r1, [r7, #3]
 80056b8:	2301      	movs	r3, #1
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f9da 	bl	8005a74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d010      	beq.n	80056e8 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80056c6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ca:	e00e      	b.n	80056ea <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f103 0020 	add.w	r0, r3, #32
 80056d2:	1cba      	adds	r2, r7, #2
 80056d4:	78f9      	ldrb	r1, [r7, #3]
 80056d6:	2301      	movs	r3, #1
 80056d8:	f000 fb02 	bl	8005ce0 <lis2mdl_write_reg>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80056e2:	f04f 33ff 	mov.w	r3, #4294967295
 80056e6:	e000      	b.n	80056ea <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80056f2:	b590      	push	{r4, r7, lr}
 80056f4:	b087      	sub	sp, #28
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	461a      	mov	r2, r3
 80056fe:	460b      	mov	r3, r1
 8005700:	72fb      	strb	r3, [r7, #11]
 8005702:	4613      	mov	r3, r2
 8005704:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10e      	bne.n	8005730 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	695c      	ldr	r4, [r3, #20]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	7b1b      	ldrb	r3, [r3, #12]
 800571a:	4618      	mov	r0, r3
 800571c:	7afb      	ldrb	r3, [r7, #11]
 800571e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005722:	b2db      	uxtb	r3, r3
 8005724:	4619      	mov	r1, r3
 8005726:	893b      	ldrh	r3, [r7, #8]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	47a0      	blx	r4
 800572c:	4603      	mov	r3, r0
 800572e:	e01d      	b.n	800576c <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b03      	cmp	r3, #3
 8005736:	d10b      	bne.n	8005750 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	695c      	ldr	r4, [r3, #20]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	7b1b      	ldrb	r3, [r3, #12]
 8005740:	4618      	mov	r0, r3
 8005742:	7afb      	ldrb	r3, [r7, #11]
 8005744:	b299      	uxth	r1, r3
 8005746:	893b      	ldrh	r3, [r7, #8]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	47a0      	blx	r4
 800574c:	4603      	mov	r3, r0
 800574e:	e00d      	b.n	800576c <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	695c      	ldr	r4, [r3, #20]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	7b1b      	ldrb	r3, [r3, #12]
 8005758:	4618      	mov	r0, r3
 800575a:	7afb      	ldrb	r3, [r7, #11]
 800575c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005760:	b2db      	uxtb	r3, r3
 8005762:	4619      	mov	r1, r3
 8005764:	893b      	ldrh	r3, [r7, #8]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	47a0      	blx	r4
 800576a:	4603      	mov	r3, r0
  }
}
 800576c:	4618      	mov	r0, r3
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	bd90      	pop	{r4, r7, pc}

08005774 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005774:	b590      	push	{r4, r7, lr}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	607a      	str	r2, [r7, #4]
 800577e:	461a      	mov	r2, r3
 8005780:	460b      	mov	r3, r1
 8005782:	72fb      	strb	r3, [r7, #11]
 8005784:	4613      	mov	r3, r2
 8005786:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10e      	bne.n	80057b2 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	691c      	ldr	r4, [r3, #16]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	7b1b      	ldrb	r3, [r3, #12]
 800579c:	4618      	mov	r0, r3
 800579e:	7afb      	ldrb	r3, [r7, #11]
 80057a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	4619      	mov	r1, r3
 80057a8:	893b      	ldrh	r3, [r7, #8]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	47a0      	blx	r4
 80057ae:	4603      	mov	r3, r0
 80057b0:	e01d      	b.n	80057ee <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d10b      	bne.n	80057d2 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	691c      	ldr	r4, [r3, #16]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	7b1b      	ldrb	r3, [r3, #12]
 80057c2:	4618      	mov	r0, r3
 80057c4:	7afb      	ldrb	r3, [r7, #11]
 80057c6:	b299      	uxth	r1, r3
 80057c8:	893b      	ldrh	r3, [r7, #8]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	47a0      	blx	r4
 80057ce:	4603      	mov	r3, r0
 80057d0:	e00d      	b.n	80057ee <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	691c      	ldr	r4, [r3, #16]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	7b1b      	ldrb	r3, [r3, #12]
 80057da:	4618      	mov	r0, r3
 80057dc:	7afb      	ldrb	r3, [r7, #11]
 80057de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	4619      	mov	r1, r3
 80057e6:	893b      	ldrh	r3, [r7, #8]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	47a0      	blx	r4
 80057ec:	4603      	mov	r3, r0
  }
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd90      	pop	{r4, r7, pc}

080057f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b08c      	sub	sp, #48	@ 0x30
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	461a      	mov	r2, r3
 8005802:	460b      	mov	r3, r1
 8005804:	72fb      	strb	r3, [r7, #11]
 8005806:	4613      	mov	r3, r2
 8005808:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005810:	2340      	movs	r3, #64	@ 0x40
 8005812:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8005816:	2300      	movs	r3, #0
 8005818:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 800581c:	233d      	movs	r3, #61	@ 0x3d
 800581e:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005820:	2315      	movs	r3, #21
 8005822:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8005826:	2316      	movs	r3, #22
 8005828:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 800582c:	2317      	movs	r3, #23
 800582e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8005832:	2314      	movs	r3, #20
 8005834:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005838:	2344      	movs	r3, #68	@ 0x44
 800583a:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 800583c:	2302      	movs	r3, #2
 800583e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8005842:	2339      	movs	r3, #57	@ 0x39
 8005844:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8005848:	2301      	movs	r3, #1
 800584a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800584e:	2329      	movs	r3, #41	@ 0x29
 8005850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005854:	231e      	movs	r3, #30
 8005856:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8005860:	893b      	ldrh	r3, [r7, #8]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005866:	2310      	movs	r3, #16
 8005868:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800586c:	2300      	movs	r3, #0
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005872:	2340      	movs	r3, #64	@ 0x40
 8005874:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f103 0020 	add.w	r0, r3, #32
 800587e:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005882:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005886:	2301      	movs	r3, #1
 8005888:	f000 fa2a 	bl	8005ce0 <lis2mdl_write_reg>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8005892:	f04f 33ff 	mov.w	r3, #4294967295
 8005896:	e0e9      	b.n	8005a6c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f103 0020 	add.w	r0, r3, #32
 800589e:	f107 021f 	add.w	r2, r7, #31
 80058a2:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80058a6:	2301      	movs	r3, #1
 80058a8:	f000 fa1a 	bl	8005ce0 <lis2mdl_write_reg>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 80058b2:	f04f 33ff 	mov.w	r3, #4294967295
 80058b6:	e0d9      	b.n	8005a6c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f103 0020 	add.w	r0, r3, #32
 80058be:	f107 020b 	add.w	r2, r7, #11
 80058c2:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80058c6:	2301      	movs	r3, #1
 80058c8:	f000 fa0a 	bl	8005ce0 <lis2mdl_write_reg>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 80058d2:	f04f 33ff 	mov.w	r3, #4294967295
 80058d6:	e0c9      	b.n	8005a6c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f103 0020 	add.w	r0, r3, #32
 80058de:	f107 021d 	add.w	r2, r7, #29
 80058e2:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80058e6:	2301      	movs	r3, #1
 80058e8:	f000 f9fa 	bl	8005ce0 <lis2mdl_write_reg>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 80058f2:	f04f 33ff 	mov.w	r3, #4294967295
 80058f6:	e0b9      	b.n	8005a6c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f103 0020 	add.w	r0, r3, #32
 80058fe:	f107 021e 	add.w	r2, r7, #30
 8005902:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8005906:	2301      	movs	r3, #1
 8005908:	f000 f9ea 	bl	8005ce0 <lis2mdl_write_reg>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8005912:	f04f 33ff 	mov.w	r3, #4294967295
 8005916:	e0a9      	b.n	8005a6c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f103 0020 	add.w	r0, r3, #32
 800591e:	f107 0220 	add.w	r2, r7, #32
 8005922:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005926:	2301      	movs	r3, #1
 8005928:	f000 f9da 	bl	8005ce0 <lis2mdl_write_reg>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8005932:	f04f 33ff 	mov.w	r3, #4294967295
 8005936:	e099      	b.n	8005a6c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f103 0020 	add.w	r0, r3, #32
 800593e:	f107 021c 	add.w	r2, r7, #28
 8005942:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8005946:	2301      	movs	r3, #1
 8005948:	f000 f9b2 	bl	8005cb0 <lis2mdl_read_reg>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8005952:	f04f 33ff 	mov.w	r3, #4294967295
 8005956:	e089      	b.n	8005a6c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005958:	7f3b      	ldrb	r3, [r7, #28]
 800595a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800595e:	429a      	cmp	r2, r3
 8005960:	d102      	bne.n	8005968 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005962:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005966:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f103 0020 	add.w	r0, r3, #32
 800596e:	f107 021c 	add.w	r2, r7, #28
 8005972:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8005976:	2301      	movs	r3, #1
 8005978:	f000 f9b2 	bl	8005ce0 <lis2mdl_write_reg>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	e071      	b.n	8005a6c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f103 0020 	add.w	r0, r3, #32
 800598e:	f107 0214 	add.w	r2, r7, #20
 8005992:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8005996:	2306      	movs	r3, #6
 8005998:	f000 f98a 	bl	8005cb0 <lis2mdl_read_reg>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 80059a2:	f04f 33ff 	mov.w	r3, #4294967295
 80059a6:	e061      	b.n	8005a6c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f103 0020 	add.w	r0, r3, #32
 80059ae:	f107 021b 	add.w	r2, r7, #27
 80059b2:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80059b6:	2301      	movs	r3, #1
 80059b8:	f000 f97a 	bl	8005cb0 <lis2mdl_read_reg>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 80059c2:	f04f 33ff 	mov.w	r3, #4294967295
 80059c6:	e051      	b.n	8005a6c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 80059c8:	7efa      	ldrb	r2, [r7, #27]
 80059ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80059ce:	4013      	ands	r3, r2
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d1e6      	bne.n	80059a8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f103 0020 	add.w	r0, r3, #32
 80059e0:	f107 021b 	add.w	r2, r7, #27
 80059e4:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 80059e8:	2301      	movs	r3, #1
 80059ea:	f000 f961 	bl	8005cb0 <lis2mdl_read_reg>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 80059f4:	f04f 33ff 	mov.w	r3, #4294967295
 80059f8:	e038      	b.n	8005a6c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 80059fa:	7efa      	ldrb	r2, [r7, #27]
 80059fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a00:	4013      	ands	r3, r2
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d1e6      	bne.n	80059da <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f103 0020 	add.w	r0, r3, #32
 8005a12:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005a16:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f000 f960 	bl	8005ce0 <lis2mdl_write_reg>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8005a26:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2a:	e01f      	b.n	8005a6c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f103 0020 	add.w	r0, r3, #32
 8005a32:	893b      	ldrh	r3, [r7, #8]
 8005a34:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	f000 f939 	bl	8005cb0 <lis2mdl_read_reg>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
 8005a48:	e010      	b.n	8005a6c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f103 0020 	add.w	r0, r3, #32
 8005a50:	f107 0220 	add.w	r2, r7, #32
 8005a54:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f000 f941 	bl	8005ce0 <lis2mdl_write_reg>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8005a64:	f04f 33ff 	mov.w	r3, #4294967295
 8005a68:	e000      	b.n	8005a6c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3730      	adds	r7, #48	@ 0x30
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08c      	sub	sp, #48	@ 0x30
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	607a      	str	r2, [r7, #4]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	460b      	mov	r3, r1
 8005a82:	72fb      	strb	r3, [r7, #11]
 8005a84:	4613      	mov	r3, r2
 8005a86:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005a8e:	2340      	movs	r3, #64	@ 0x40
 8005a90:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8005a9a:	233c      	movs	r3, #60	@ 0x3c
 8005a9c:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005a9e:	2315      	movs	r3, #21
 8005aa0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8005aa4:	2316      	movs	r3, #22
 8005aa6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8005aaa:	2317      	movs	r3, #23
 8005aac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8005ab4:	2314      	movs	r3, #20
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005aba:	2344      	movs	r3, #68	@ 0x44
 8005abc:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005abe:	2339      	movs	r3, #57	@ 0x39
 8005ac0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8005ac4:	2380      	movs	r3, #128	@ 0x80
 8005ac6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005aca:	2329      	movs	r3, #41	@ 0x29
 8005acc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005ad0:	231e      	movs	r3, #30
 8005ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005adc:	2310      	movs	r3, #16
 8005ade:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005ae8:	2340      	movs	r3, #64	@ 0x40
 8005aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005aee:	230e      	movs	r3, #14
 8005af0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f103 0020 	add.w	r0, r3, #32
 8005afa:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005afe:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005b02:	2301      	movs	r3, #1
 8005b04:	f000 f8ec 	bl	8005ce0 <lis2mdl_write_reg>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b12:	e0c9      	b.n	8005ca8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f103 0020 	add.w	r0, r3, #32
 8005b1a:	f107 021f 	add.w	r2, r7, #31
 8005b1e:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005b22:	2301      	movs	r3, #1
 8005b24:	f000 f8dc 	bl	8005ce0 <lis2mdl_write_reg>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8005b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b32:	e0b9      	b.n	8005ca8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f103 0020 	add.w	r0, r3, #32
 8005b3a:	f107 020b 	add.w	r2, r7, #11
 8005b3e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8005b42:	2301      	movs	r3, #1
 8005b44:	f000 f8cc 	bl	8005ce0 <lis2mdl_write_reg>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8005b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b52:	e0a9      	b.n	8005ca8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f103 0020 	add.w	r0, r3, #32
 8005b5a:	f107 021e 	add.w	r2, r7, #30
 8005b5e:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8005b62:	2301      	movs	r3, #1
 8005b64:	f000 f8bc 	bl	8005ce0 <lis2mdl_write_reg>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8005b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b72:	e099      	b.n	8005ca8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f103 0020 	add.w	r0, r3, #32
 8005b7a:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8005b7e:	2301      	movs	r3, #1
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	f000 f8ad 	bl	8005ce0 <lis2mdl_write_reg>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8005b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b90:	e08a      	b.n	8005ca8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f103 0020 	add.w	r0, r3, #32
 8005b98:	f107 021d 	add.w	r2, r7, #29
 8005b9c:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f000 f89d 	bl	8005ce0 <lis2mdl_write_reg>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8005bac:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb0:	e07a      	b.n	8005ca8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f103 0020 	add.w	r0, r3, #32
 8005bb8:	f107 0220 	add.w	r2, r7, #32
 8005bbc:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f000 f88d 	bl	8005ce0 <lis2mdl_write_reg>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd0:	e06a      	b.n	8005ca8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f103 0020 	add.w	r0, r3, #32
 8005bd8:	f107 021c 	add.w	r2, r7, #28
 8005bdc:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005be0:	2301      	movs	r3, #1
 8005be2:	f000 f865 	bl	8005cb0 <lis2mdl_read_reg>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005bec:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf0:	e05a      	b.n	8005ca8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005bf2:	7f3b      	ldrb	r3, [r7, #28]
 8005bf4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d102      	bne.n	8005c02 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c00:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f103 0020 	add.w	r0, r3, #32
 8005c08:	f107 021c 	add.w	r2, r7, #28
 8005c0c:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005c10:	2301      	movs	r3, #1
 8005c12:	f000 f865 	bl	8005ce0 <lis2mdl_write_reg>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8005c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c20:	e042      	b.n	8005ca8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f103 0020 	add.w	r0, r3, #32
 8005c28:	f107 0214 	add.w	r2, r7, #20
 8005c2c:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8005c30:	2306      	movs	r3, #6
 8005c32:	f000 f83d 	bl	8005cb0 <lis2mdl_read_reg>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8005c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c40:	e032      	b.n	8005ca8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f103 0020 	add.w	r0, r3, #32
 8005c48:	f107 021b 	add.w	r2, r7, #27
 8005c4c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8005c50:	2301      	movs	r3, #1
 8005c52:	f000 f82d 	bl	8005cb0 <lis2mdl_read_reg>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8005c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c60:	e022      	b.n	8005ca8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8005c62:	7efa      	ldrb	r2, [r7, #27]
 8005c64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c68:	4013      	ands	r3, r2
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d1e6      	bne.n	8005c42 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f103 0020 	add.w	r0, r3, #32
 8005c7a:	f107 021b 	add.w	r2, r7, #27
 8005c7e:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005c82:	2301      	movs	r3, #1
 8005c84:	f000 f814 	bl	8005cb0 <lis2mdl_read_reg>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c92:	e009      	b.n	8005ca8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8005c94:	7efa      	ldrb	r2, [r7, #27]
 8005c96:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d1e6      	bne.n	8005c74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3730      	adds	r7, #48	@ 0x30
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005cb0:	b590      	push	{r4, r7, lr}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	607a      	str	r2, [r7, #4]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	72fb      	strb	r3, [r7, #11]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	685c      	ldr	r4, [r3, #4]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	68d8      	ldr	r0, [r3, #12]
 8005ccc:	893b      	ldrh	r3, [r7, #8]
 8005cce:	7af9      	ldrb	r1, [r7, #11]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	47a0      	blx	r4
 8005cd4:	6178      	str	r0, [r7, #20]

  return ret;
 8005cd6:	697b      	ldr	r3, [r7, #20]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	371c      	adds	r7, #28
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd90      	pop	{r4, r7, pc}

08005ce0 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005ce0:	b590      	push	{r4, r7, lr}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	607a      	str	r2, [r7, #4]
 8005cea:	461a      	mov	r2, r3
 8005cec:	460b      	mov	r3, r1
 8005cee:	72fb      	strb	r3, [r7, #11]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681c      	ldr	r4, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	68d8      	ldr	r0, [r3, #12]
 8005cfc:	893b      	ldrh	r3, [r7, #8]
 8005cfe:	7af9      	ldrb	r1, [r7, #11]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	47a0      	blx	r4
 8005d04:	6178      	str	r0, [r7, #20]

  return ret;
 8005d06:	697b      	ldr	r3, [r7, #20]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd90      	pop	{r4, r7, pc}

08005d10 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d1c:	f107 0208 	add.w	r2, r7, #8
 8005d20:	2301      	movs	r3, #1
 8005d22:	2160      	movs	r1, #96	@ 0x60
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff ffc3 	bl	8005cb0 <lis2mdl_read_reg>
 8005d2a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10f      	bne.n	8005d52 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	7a3b      	ldrb	r3, [r7, #8]
 8005d3c:	f362 0301 	bfi	r3, r2, #0, #2
 8005d40:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d42:	f107 0208 	add.w	r2, r7, #8
 8005d46:	2301      	movs	r3, #1
 8005d48:	2160      	movs	r1, #96	@ 0x60
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff ffc8 	bl	8005ce0 <lis2mdl_write_reg>
 8005d50:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d52:	68fb      	ldr	r3, [r7, #12]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d68:	f107 0208 	add.w	r2, r7, #8
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	2160      	movs	r1, #96	@ 0x60
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff ff9d 	bl	8005cb0 <lis2mdl_read_reg>
 8005d76:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10f      	bne.n	8005d9e <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	7a3b      	ldrb	r3, [r7, #8]
 8005d88:	f362 0383 	bfi	r3, r2, #2, #2
 8005d8c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d8e:	f107 0208 	add.w	r2, r7, #8
 8005d92:	2301      	movs	r3, #1
 8005d94:	2160      	movs	r1, #96	@ 0x60
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff ffa2 	bl	8005ce0 <lis2mdl_write_reg>
 8005d9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005db2:	f107 0208 	add.w	r2, r7, #8
 8005db6:	2301      	movs	r3, #1
 8005db8:	2160      	movs	r1, #96	@ 0x60
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff ff78 	bl	8005cb0 <lis2mdl_read_reg>
 8005dc0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8005dc2:	7a3b      	ldrb	r3, [r7, #8]
 8005dc4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d81a      	bhi.n	8005e04 <lis2mdl_data_rate_get+0x5c>
 8005dce:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <lis2mdl_data_rate_get+0x2c>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005de5 	.word	0x08005de5
 8005dd8:	08005ded 	.word	0x08005ded
 8005ddc:	08005df5 	.word	0x08005df5
 8005de0:	08005dfd 	.word	0x08005dfd
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]
      break;
 8005dea:	e00f      	b.n	8005e0c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2201      	movs	r2, #1
 8005df0:	701a      	strb	r2, [r3, #0]
      break;
 8005df2:	e00b      	b.n	8005e0c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2202      	movs	r2, #2
 8005df8:	701a      	strb	r2, [r3, #0]
      break;
 8005dfa:	e007      	b.n	8005e0c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2203      	movs	r2, #3
 8005e00:	701a      	strb	r2, [r3, #0]
      break;
 8005e02:	e003      	b.n	8005e0c <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
      break;
 8005e0a:	bf00      	nop
  }

  return ret;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop

08005e18 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005e24:	f107 0208 	add.w	r2, r7, #8
 8005e28:	2301      	movs	r3, #1
 8005e2a:	2162      	movs	r1, #98	@ 0x62
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff ff3f 	bl	8005cb0 <lis2mdl_read_reg>
 8005e32:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10f      	bne.n	8005e5a <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	7a3b      	ldrb	r3, [r7, #8]
 8005e44:	f362 1304 	bfi	r3, r2, #4, #1
 8005e48:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005e4a:	f107 0208 	add.w	r2, r7, #8
 8005e4e:	2301      	movs	r3, #1
 8005e50:	2162      	movs	r1, #98	@ 0x62
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff ff44 	bl	8005ce0 <lis2mdl_write_reg>
 8005e58:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005e6e:	f107 020c 	add.w	r2, r7, #12
 8005e72:	2306      	movs	r3, #6
 8005e74:	2168      	movs	r1, #104	@ 0x68
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff ff1a 	bl	8005cb0 <lis2mdl_read_reg>
 8005e7c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005e7e:	7b7b      	ldrb	r3, [r7, #13]
 8005e80:	b21a      	sxth	r2, r3
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	7b3a      	ldrb	r2, [r7, #12]
 8005e94:	4413      	add	r3, r2
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	b21a      	sxth	r2, r3
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005e9e:	7bfa      	ldrb	r2, [r7, #15]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	b212      	sxth	r2, r2
 8005ea6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	3302      	adds	r3, #2
 8005eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	7bba      	ldrb	r2, [r7, #14]
 8005eb8:	4413      	add	r3, r2
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	b212      	sxth	r2, r2
 8005ec2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005ec4:	7c7a      	ldrb	r2, [r7, #17]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	b212      	sxth	r2, r2
 8005ecc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	021b      	lsls	r3, r3, #8
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	7c3a      	ldrb	r2, [r7, #16]
 8005ede:	4413      	add	r3, r2
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	b212      	sxth	r2, r2
 8005ee8:	801a      	strh	r2, [r3, #0]

  return ret;
 8005eea:	697b      	ldr	r3, [r7, #20]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005efe:	2301      	movs	r3, #1
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	214f      	movs	r1, #79	@ 0x4f
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7ff fed3 	bl	8005cb0 <lis2mdl_read_reg>
 8005f0a:	60f8      	str	r0, [r7, #12]

  return ret;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f22:	f107 0208 	add.w	r2, r7, #8
 8005f26:	2301      	movs	r3, #1
 8005f28:	2162      	movs	r1, #98	@ 0x62
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff fec0 	bl	8005cb0 <lis2mdl_read_reg>
 8005f30:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10f      	bne.n	8005f58 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	7a3b      	ldrb	r3, [r7, #8]
 8005f42:	f362 0341 	bfi	r3, r2, #1, #1
 8005f46:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f48:	f107 0208 	add.w	r2, r7, #8
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	2162      	movs	r1, #98	@ 0x62
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff fec5 	bl	8005ce0 <lis2mdl_write_reg>
 8005f56:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f58:	68fb      	ldr	r3, [r7, #12]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f6e:	f107 0208 	add.w	r2, r7, #8
 8005f72:	2301      	movs	r3, #1
 8005f74:	2162      	movs	r1, #98	@ 0x62
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7ff fe9a 	bl	8005cb0 <lis2mdl_read_reg>
 8005f7c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10f      	bne.n	8005fa4 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	7a3b      	ldrb	r3, [r7, #8]
 8005f8e:	f362 1345 	bfi	r3, r2, #5, #1
 8005f92:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f94:	f107 0208 	add.w	r2, r7, #8
 8005f98:	2301      	movs	r3, #1
 8005f9a:	2162      	movs	r1, #98	@ 0x62
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff fe9f 	bl	8005ce0 <lis2mdl_write_reg>
 8005fa2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d103      	bne.n	8005fcc <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8005fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	e051      	b.n	8006070 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	7b1a      	ldrb	r2, [r3, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	691a      	ldr	r2, [r3, #16]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	695a      	ldr	r2, [r3, #20]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	699a      	ldr	r2, [r3, #24]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a1d      	ldr	r2, [pc, #116]	@ (800607c <LPS22HH_RegisterBusIO+0xcc>)
 8006008:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a1c      	ldr	r2, [pc, #112]	@ (8006080 <LPS22HH_RegisterBusIO+0xd0>)
 800600e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d103      	bne.n	800602e <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8006026:	f04f 33ff 	mov.w	r3, #4294967295
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	e020      	b.n	8006070 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4798      	blx	r3
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 800603a:	f04f 33ff 	mov.w	r3, #4294967295
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	e016      	b.n	8006070 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d112      	bne.n	8006070 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10d      	bne.n	8006070 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8006054:	2301      	movs	r3, #1
 8006056:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8006058:	7afb      	ldrb	r3, [r7, #11]
 800605a:	461a      	mov	r2, r3
 800605c:	2110      	movs	r1, #16
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f9db 	bl	800641a <LPS22HH_Write_Reg>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 800606a:	f04f 33ff 	mov.w	r3, #4294967295
 800606e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006070:	68fb      	ldr	r3, [r7, #12]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	08006727 	.word	0x08006727
 8006080:	0800675d 	.word	0x0800675d

08006084 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006092:	2b00      	cmp	r3, #0
 8006094:	d108      	bne.n	80060a8 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 faf8 	bl	800668c <LPS22HH_Initialize>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 80060a2:	f04f 33ff 	mov.w	r3, #4294967295
 80060a6:	e004      	b.n	80060b2 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d111      	bne.n	80060f0 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f87d 	bl	80061cc <LPS22HH_PRESS_Disable>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 80060d8:	f04f 33ff 	mov.w	r3, #4294967295
 80060dc:	e00d      	b.n	80060fa <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f919 	bl	8006316 <LPS22HH_TEMP_Disable>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 80060ea:	f04f 33ff 	mov.w	r3, #4294967295
 80060ee:	e004      	b.n	80060fa <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3320      	adds	r3, #32
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fcfd 	bl	8006b12 <lps22hh_device_id_get>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 800611e:	f04f 33ff 	mov.w	r3, #4294967295
 8006122:	e000      	b.n	8006126 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2200      	movs	r2, #0
 800613e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2201      	movs	r2, #1
 8006144:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2201      	movs	r2, #1
 800614a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2200      	movs	r2, #0
 8006150:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2200      	movs	r2, #0
 8006156:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	4a07      	ldr	r2, [pc, #28]	@ (8006180 <LPS22HH_GetCapabilities+0x50>)
 8006164:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	4a05      	ldr	r2, [pc, #20]	@ (8006180 <LPS22HH_GetCapabilities+0x50>)
 800616a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr
 8006180:	43480000 	.word	0x43480000

08006184 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	e014      	b.n	80061c4 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f103 0220 	add.w	r2, r3, #32
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80061a6:	4619      	mov	r1, r3
 80061a8:	4610      	mov	r0, r2
 80061aa:	f000 fb71 	bl	8006890 <lps22hh_data_rate_set>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80061b4:	f04f 33ff 	mov.w	r3, #4294967295
 80061b8:	e004      	b.n	80061c4 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	e024      	b.n	800622c <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d11a      	bne.n	8006222 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f103 0220 	add.w	r2, r3, #32
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3333      	adds	r3, #51	@ 0x33
 80061f6:	4619      	mov	r1, r3
 80061f8:	4610      	mov	r0, r2
 80061fa:	f000 fb97 	bl	800692c <lps22hh_data_rate_get>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8006204:	f04f 33ff 	mov.w	r3, #4294967295
 8006208:	e010      	b.n	800622c <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3320      	adds	r3, #32
 800620e:	2100      	movs	r1, #0
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fb3d 	bl	8006890 <lps22hh_data_rate_set>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 800621c:	f04f 33ff 	mov.w	r3, #4294967295
 8006220:	e004      	b.n	800622c <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f905 	bl	8006450 <LPS22HH_GetOutputDataRate>
 8006246:	4603      	mov	r3, r0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006260:	2b01      	cmp	r3, #1
 8006262:	d105      	bne.n	8006270 <LPS22HH_PRESS_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f956 	bl	8006518 <LPS22HH_SetOutputDataRate_When_Enabled>
 800626c:	4603      	mov	r3, r0
 800626e:	e004      	b.n	800627a <LPS22HH_PRESS_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f9ba 	bl	80065ec <LPS22HH_SetOutputDataRate_When_Disabled>
 8006278:	4603      	mov	r3, r0
  }
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800628c:	f107 030c 	add.w	r3, r7, #12
 8006290:	2204      	movs	r2, #4
 8006292:	2100      	movs	r1, #0
 8006294:	4618      	mov	r0, r3
 8006296:	f00b ff5b 	bl	8012150 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	3320      	adds	r3, #32
 800629e:	f107 020c 	add.w	r2, r7, #12
 80062a2:	4611      	mov	r1, r2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fbe9 	bl	8006a7c <lps22hh_pressure_raw_get>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 80062b0:	f04f 33ff 	mov.w	r3, #4294967295
 80062b4:	e007      	b.n	80062c6 <LPS22HH_PRESS_GetPressure+0x44>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fa9a 	bl	80067f2 <lps22hh_from_lsb_to_hpa>
 80062be:	4602      	mov	r2, r0
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	e014      	b.n	800630e <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f103 0220 	add.w	r2, r3, #32
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f000 facc 	bl	8006890 <lps22hh_data_rate_set>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80062fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006302:	e004      	b.n	800630e <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	e024      	b.n	8006376 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006332:	2b00      	cmp	r3, #0
 8006334:	d11a      	bne.n	800636c <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f103 0220 	add.w	r2, r3, #32
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3333      	adds	r3, #51	@ 0x33
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f000 faf2 	bl	800692c <lps22hh_data_rate_get>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 800634e:	f04f 33ff 	mov.w	r3, #4294967295
 8006352:	e010      	b.n	8006376 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3320      	adds	r3, #32
 8006358:	2100      	movs	r1, #0
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fa98 	bl	8006890 <lps22hh_data_rate_set>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8006366:	f04f 33ff 	mov.w	r3, #4294967295
 800636a:	e004      	b.n	8006376 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f860 	bl	8006450 <LPS22HH_GetOutputDataRate>
 8006390:	4603      	mov	r3, r0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d105      	bne.n	80063ba <LPS22HH_TEMP_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f8b1 	bl	8006518 <LPS22HH_SetOutputDataRate_When_Enabled>
 80063b6:	4603      	mov	r3, r0
 80063b8:	e004      	b.n	80063c4 <LPS22HH_TEMP_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f915 	bl	80065ec <LPS22HH_SetOutputDataRate_When_Disabled>
 80063c2:	4603      	mov	r3, r0
  }
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80063d6:	f107 030c 	add.w	r3, r7, #12
 80063da:	2202      	movs	r2, #2
 80063dc:	2100      	movs	r1, #0
 80063de:	4618      	mov	r0, r3
 80063e0:	f00b feb6 	bl	8012150 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3320      	adds	r3, #32
 80063e8:	f107 020c 	add.w	r2, r7, #12
 80063ec:	4611      	mov	r1, r2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fb6d 	bl	8006ace <lps22hh_temperature_raw_get>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 80063fa:	f04f 33ff 	mov.w	r3, #4294967295
 80063fe:	e008      	b.n	8006412 <LPS22HH_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8006400:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fa07 	bl	8006818 <lps22hh_from_lsb_to_celsius>
 800640a:	4602      	mov	r2, r0
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	460b      	mov	r3, r1
 8006424:	70fb      	strb	r3, [r7, #3]
 8006426:	4613      	mov	r3, r2
 8006428:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f103 0020 	add.w	r0, r3, #32
 8006430:	1cba      	adds	r2, r7, #2
 8006432:	78f9      	ldrb	r1, [r7, #3]
 8006434:	2301      	movs	r3, #1
 8006436:	f000 f9c4 	bl	80067c2 <lps22hh_write_reg>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8006440:	f04f 33ff 	mov.w	r3, #4294967295
 8006444:	e000      	b.n	8006448 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3320      	adds	r3, #32
 8006462:	f107 020b 	add.w	r2, r7, #11
 8006466:	4611      	mov	r1, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fa5f 	bl	800692c <lps22hh_data_rate_get>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8006474:	f04f 33ff 	mov.w	r3, #4294967295
 8006478:	e03d      	b.n	80064f6 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 800647a:	7afb      	ldrb	r3, [r7, #11]
 800647c:	2b07      	cmp	r3, #7
 800647e:	d835      	bhi.n	80064ec <LPS22HH_GetOutputDataRate+0x9c>
 8006480:	a201      	add	r2, pc, #4	@ (adr r2, 8006488 <LPS22HH_GetOutputDataRate+0x38>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	080064a9 	.word	0x080064a9
 800648c:	080064b3 	.word	0x080064b3
 8006490:	080064bd 	.word	0x080064bd
 8006494:	080064c5 	.word	0x080064c5
 8006498:	080064cd 	.word	0x080064cd
 800649c:	080064d5 	.word	0x080064d5
 80064a0:	080064dd 	.word	0x080064dd
 80064a4:	080064e5 	.word	0x080064e5
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]
      break;
 80064b0:	e020      	b.n	80064f4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80064b8:	601a      	str	r2, [r3, #0]
      break;
 80064ba:	e01b      	b.n	80064f4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	4a10      	ldr	r2, [pc, #64]	@ (8006500 <LPS22HH_GetOutputDataRate+0xb0>)
 80064c0:	601a      	str	r2, [r3, #0]
      break;
 80064c2:	e017      	b.n	80064f4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006504 <LPS22HH_GetOutputDataRate+0xb4>)
 80064c8:	601a      	str	r2, [r3, #0]
      break;
 80064ca:	e013      	b.n	80064f4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	4a0e      	ldr	r2, [pc, #56]	@ (8006508 <LPS22HH_GetOutputDataRate+0xb8>)
 80064d0:	601a      	str	r2, [r3, #0]
      break;
 80064d2:	e00f      	b.n	80064f4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	4a0d      	ldr	r2, [pc, #52]	@ (800650c <LPS22HH_GetOutputDataRate+0xbc>)
 80064d8:	601a      	str	r2, [r3, #0]
      break;
 80064da:	e00b      	b.n	80064f4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	4a0c      	ldr	r2, [pc, #48]	@ (8006510 <LPS22HH_GetOutputDataRate+0xc0>)
 80064e0:	601a      	str	r2, [r3, #0]
      break;
 80064e2:	e007      	b.n	80064f4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	4a0b      	ldr	r2, [pc, #44]	@ (8006514 <LPS22HH_GetOutputDataRate+0xc4>)
 80064e8:	601a      	str	r2, [r3, #0]
      break;
 80064ea:	e003      	b.n	80064f4 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 80064ec:	f04f 33ff 	mov.w	r3, #4294967295
 80064f0:	60fb      	str	r3, [r7, #12]
      break;
 80064f2:	bf00      	nop
  }

  return ret;
 80064f4:	68fb      	ldr	r3, [r7, #12]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	41200000 	.word	0x41200000
 8006504:	41c80000 	.word	0x41c80000
 8006508:	42480000 	.word	0x42480000
 800650c:	42960000 	.word	0x42960000
 8006510:	42c80000 	.word	0x42c80000
 8006514:	43480000 	.word	0x43480000

08006518 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006522:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006526:	6838      	ldr	r0, [r7, #0]
 8006528:	f7fa fdc4 	bl	80010b4 <__aeabi_fcmple>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <LPS22HH_SetOutputDataRate_When_Enabled+0x1e>
 8006532:	2301      	movs	r3, #1
 8006534:	e02d      	b.n	8006592 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006536:	4928      	ldr	r1, [pc, #160]	@ (80065d8 <LPS22HH_SetOutputDataRate_When_Enabled+0xc0>)
 8006538:	6838      	ldr	r0, [r7, #0]
 800653a:	f7fa fdbb 	bl	80010b4 <__aeabi_fcmple>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <LPS22HH_SetOutputDataRate_When_Enabled+0x30>
 8006544:	2302      	movs	r3, #2
 8006546:	e024      	b.n	8006592 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006548:	4924      	ldr	r1, [pc, #144]	@ (80065dc <LPS22HH_SetOutputDataRate_When_Enabled+0xc4>)
 800654a:	6838      	ldr	r0, [r7, #0]
 800654c:	f7fa fdb2 	bl	80010b4 <__aeabi_fcmple>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <LPS22HH_SetOutputDataRate_When_Enabled+0x42>
 8006556:	2303      	movs	r3, #3
 8006558:	e01b      	b.n	8006592 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800655a:	4921      	ldr	r1, [pc, #132]	@ (80065e0 <LPS22HH_SetOutputDataRate_When_Enabled+0xc8>)
 800655c:	6838      	ldr	r0, [r7, #0]
 800655e:	f7fa fda9 	bl	80010b4 <__aeabi_fcmple>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <LPS22HH_SetOutputDataRate_When_Enabled+0x54>
 8006568:	2304      	movs	r3, #4
 800656a:	e012      	b.n	8006592 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800656c:	491d      	ldr	r1, [pc, #116]	@ (80065e4 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>)
 800656e:	6838      	ldr	r0, [r7, #0]
 8006570:	f7fa fda0 	bl	80010b4 <__aeabi_fcmple>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <LPS22HH_SetOutputDataRate_When_Enabled+0x66>
 800657a:	2305      	movs	r3, #5
 800657c:	e009      	b.n	8006592 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800657e:	491a      	ldr	r1, [pc, #104]	@ (80065e8 <LPS22HH_SetOutputDataRate_When_Enabled+0xd0>)
 8006580:	6838      	ldr	r0, [r7, #0]
 8006582:	f7fa fd97 	bl	80010b4 <__aeabi_fcmple>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <LPS22HH_SetOutputDataRate_When_Enabled+0x78>
 800658c:	2306      	movs	r3, #6
 800658e:	e000      	b.n	8006592 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006590:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8006592:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3320      	adds	r3, #32
 8006598:	7bfa      	ldrb	r2, [r7, #15]
 800659a:	4611      	mov	r1, r2
 800659c:	4618      	mov	r0, r3
 800659e:	f000 f977 	bl	8006890 <lps22hh_data_rate_set>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <LPS22HH_SetOutputDataRate_When_Enabled+0x96>
  {
    return LPS22HH_ERROR;
 80065a8:	f04f 33ff 	mov.w	r3, #4294967295
 80065ac:	e00f      	b.n	80065ce <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f103 0220 	add.w	r2, r3, #32
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3333      	adds	r3, #51	@ 0x33
 80065b8:	4619      	mov	r1, r3
 80065ba:	4610      	mov	r0, r2
 80065bc:	f000 f9b6 	bl	800692c <lps22hh_data_rate_get>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <LPS22HH_SetOutputDataRate_When_Enabled+0xb4>
  {
    return LPS22HH_ERROR;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ca:	e000      	b.n	80065ce <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  return LPS22HH_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	41200000 	.word	0x41200000
 80065dc:	41c80000 	.word	0x41c80000
 80065e0:	42480000 	.word	0x42480000
 80065e4:	42960000 	.word	0x42960000
 80065e8:	42c80000 	.word	0x42c80000

080065ec <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80065f6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80065fa:	6838      	ldr	r0, [r7, #0]
 80065fc:	f7fa fd5a 	bl	80010b4 <__aeabi_fcmple>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <LPS22HH_SetOutputDataRate_When_Disabled+0x1e>
 8006606:	2301      	movs	r3, #1
 8006608:	e02d      	b.n	8006666 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800660a:	491b      	ldr	r1, [pc, #108]	@ (8006678 <LPS22HH_SetOutputDataRate_When_Disabled+0x8c>)
 800660c:	6838      	ldr	r0, [r7, #0]
 800660e:	f7fa fd51 	bl	80010b4 <__aeabi_fcmple>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <LPS22HH_SetOutputDataRate_When_Disabled+0x30>
 8006618:	2302      	movs	r3, #2
 800661a:	e024      	b.n	8006666 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800661c:	4917      	ldr	r1, [pc, #92]	@ (800667c <LPS22HH_SetOutputDataRate_When_Disabled+0x90>)
 800661e:	6838      	ldr	r0, [r7, #0]
 8006620:	f7fa fd48 	bl	80010b4 <__aeabi_fcmple>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <LPS22HH_SetOutputDataRate_When_Disabled+0x42>
 800662a:	2303      	movs	r3, #3
 800662c:	e01b      	b.n	8006666 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800662e:	4914      	ldr	r1, [pc, #80]	@ (8006680 <LPS22HH_SetOutputDataRate_When_Disabled+0x94>)
 8006630:	6838      	ldr	r0, [r7, #0]
 8006632:	f7fa fd3f 	bl	80010b4 <__aeabi_fcmple>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <LPS22HH_SetOutputDataRate_When_Disabled+0x54>
 800663c:	2304      	movs	r3, #4
 800663e:	e012      	b.n	8006666 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006640:	4910      	ldr	r1, [pc, #64]	@ (8006684 <LPS22HH_SetOutputDataRate_When_Disabled+0x98>)
 8006642:	6838      	ldr	r0, [r7, #0]
 8006644:	f7fa fd36 	bl	80010b4 <__aeabi_fcmple>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <LPS22HH_SetOutputDataRate_When_Disabled+0x66>
 800664e:	2305      	movs	r3, #5
 8006650:	e009      	b.n	8006666 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006652:	490d      	ldr	r1, [pc, #52]	@ (8006688 <LPS22HH_SetOutputDataRate_When_Disabled+0x9c>)
 8006654:	6838      	ldr	r0, [r7, #0]
 8006656:	f7fa fd2d 	bl	80010b4 <__aeabi_fcmple>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <LPS22HH_SetOutputDataRate_When_Disabled+0x78>
 8006660:	2306      	movs	r3, #6
 8006662:	e000      	b.n	8006666 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006664:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	41200000 	.word	0x41200000
 800667c:	41c80000 	.word	0x41c80000
 8006680:	42480000 	.word	0x42480000
 8006684:	42960000 	.word	0x42960000
 8006688:	42c80000 	.word	0x42c80000

0800668c <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b03      	cmp	r3, #3
 800669a:	d00b      	beq.n	80066b4 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3320      	adds	r3, #32
 80066a0:	2111      	movs	r1, #17
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 fa92 	bl	8006bcc <lps22hh_i3c_interface_set>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 80066ae:	f04f 33ff 	mov.w	r3, #4294967295
 80066b2:	e034      	b.n	800671e <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3320      	adds	r3, #32
 80066b8:	2110      	movs	r1, #16
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 f8e8 	bl	8006890 <lps22hh_data_rate_set>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 80066c6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ca:	e028      	b.n	800671e <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3320      	adds	r3, #32
 80066d0:	2100      	movs	r1, #0
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fa54 	bl	8006b80 <lps22hh_lp_bandwidth_set>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 80066de:	f04f 33ff 	mov.w	r3, #4294967295
 80066e2:	e01c      	b.n	800671e <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3320      	adds	r3, #32
 80066e8:	2101      	movs	r1, #1
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 f8aa 	bl	8006844 <lps22hh_block_data_update_set>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 80066f6:	f04f 33ff 	mov.w	r3, #4294967295
 80066fa:	e010      	b.n	800671e <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3320      	adds	r3, #32
 8006700:	2101      	movs	r1, #1
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fa16 	bl	8006b34 <lps22hh_auto_increment_set>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d002      	beq.n	8006714 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 800670e:	f04f 33ff 	mov.w	r3, #4294967295
 8006712:	e004      	b.n	800671e <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2203      	movs	r2, #3
 8006718:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22HH_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006726:	b590      	push	{r4, r7, lr}
 8006728:	b087      	sub	sp, #28
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	461a      	mov	r2, r3
 8006732:	460b      	mov	r3, r1
 8006734:	72fb      	strb	r3, [r7, #11]
 8006736:	4613      	mov	r3, r2
 8006738:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	695c      	ldr	r4, [r3, #20]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	7b1b      	ldrb	r3, [r3, #12]
 8006746:	4618      	mov	r0, r3
 8006748:	7afb      	ldrb	r3, [r7, #11]
 800674a:	b299      	uxth	r1, r3
 800674c:	893b      	ldrh	r3, [r7, #8]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	47a0      	blx	r4
 8006752:	4603      	mov	r3, r0
}
 8006754:	4618      	mov	r0, r3
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	bd90      	pop	{r4, r7, pc}

0800675c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800675c:	b590      	push	{r4, r7, lr}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	607a      	str	r2, [r7, #4]
 8006766:	461a      	mov	r2, r3
 8006768:	460b      	mov	r3, r1
 800676a:	72fb      	strb	r3, [r7, #11]
 800676c:	4613      	mov	r3, r2
 800676e:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	691c      	ldr	r4, [r3, #16]
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	7b1b      	ldrb	r3, [r3, #12]
 800677c:	4618      	mov	r0, r3
 800677e:	7afb      	ldrb	r3, [r7, #11]
 8006780:	b299      	uxth	r1, r3
 8006782:	893b      	ldrh	r3, [r7, #8]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	47a0      	blx	r4
 8006788:	4603      	mov	r3, r0
}
 800678a:	4618      	mov	r0, r3
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	bd90      	pop	{r4, r7, pc}

08006792 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8006792:	b590      	push	{r4, r7, lr}
 8006794:	b087      	sub	sp, #28
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	461a      	mov	r2, r3
 800679e:	460b      	mov	r3, r1
 80067a0:	72fb      	strb	r3, [r7, #11]
 80067a2:	4613      	mov	r3, r2
 80067a4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685c      	ldr	r4, [r3, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	68d8      	ldr	r0, [r3, #12]
 80067ae:	893b      	ldrh	r3, [r7, #8]
 80067b0:	7af9      	ldrb	r1, [r7, #11]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	47a0      	blx	r4
 80067b6:	6178      	str	r0, [r7, #20]

  return ret;
 80067b8:	697b      	ldr	r3, [r7, #20]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd90      	pop	{r4, r7, pc}

080067c2 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80067c2:	b590      	push	{r4, r7, lr}
 80067c4:	b087      	sub	sp, #28
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	461a      	mov	r2, r3
 80067ce:	460b      	mov	r3, r1
 80067d0:	72fb      	strb	r3, [r7, #11]
 80067d2:	4613      	mov	r3, r2
 80067d4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681c      	ldr	r4, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	68d8      	ldr	r0, [r3, #12]
 80067de:	893b      	ldrh	r3, [r7, #8]
 80067e0:	7af9      	ldrb	r1, [r7, #11]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	47a0      	blx	r4
 80067e6:	6178      	str	r0, [r7, #20]

  return ret;
 80067e8:	697b      	ldr	r3, [r7, #20]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd90      	pop	{r4, r7, pc}

080067f2 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7fa fa5a 	bl	8000cb4 <__aeabi_ui2f>
 8006800:	4603      	mov	r3, r0
 8006802:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 8006806:	4618      	mov	r0, r3
 8006808:	f7fa fb60 	bl	8000ecc <__aeabi_fdiv>
 800680c:	4603      	mov	r3, r0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8006822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006826:	4618      	mov	r0, r3
 8006828:	f7fa fa48 	bl	8000cbc <__aeabi_i2f>
 800682c:	4603      	mov	r3, r0
 800682e:	4904      	ldr	r1, [pc, #16]	@ (8006840 <lps22hh_from_lsb_to_celsius+0x28>)
 8006830:	4618      	mov	r0, r3
 8006832:	f7fa fb4b 	bl	8000ecc <__aeabi_fdiv>
 8006836:	4603      	mov	r3, r0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	42c80000 	.word	0x42c80000

08006844 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006850:	f107 0208 	add.w	r2, r7, #8
 8006854:	2301      	movs	r3, #1
 8006856:	2110      	movs	r1, #16
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff ff9a 	bl	8006792 <lps22hh_read_reg>
 800685e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10f      	bne.n	8006886 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	b2da      	uxtb	r2, r3
 800686e:	7a3b      	ldrb	r3, [r7, #8]
 8006870:	f362 0341 	bfi	r3, r2, #1, #1
 8006874:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006876:	f107 0208 	add.w	r2, r7, #8
 800687a:	2301      	movs	r3, #1
 800687c:	2110      	movs	r1, #16
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff ff9f 	bl	80067c2 <lps22hh_write_reg>
 8006884:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006886:	68fb      	ldr	r3, [r7, #12]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800689c:	f107 0210 	add.w	r2, r7, #16
 80068a0:	2301      	movs	r3, #1
 80068a2:	2110      	movs	r1, #16
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff ff74 	bl	8006792 <lps22hh_read_reg>
 80068aa:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d107      	bne.n	80068c2 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80068b2:	f107 020c 	add.w	r2, r7, #12
 80068b6:	2301      	movs	r3, #1
 80068b8:	2111      	movs	r1, #17
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff ff69 	bl	8006792 <lps22hh_read_reg>
 80068c0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10f      	bne.n	80068e8 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	7c3b      	ldrb	r3, [r7, #16]
 80068d2:	f362 1306 	bfi	r3, r2, #4, #3
 80068d6:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80068d8:	f107 0210 	add.w	r2, r7, #16
 80068dc:	2301      	movs	r3, #1
 80068de:	2110      	movs	r1, #16
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff ff6e 	bl	80067c2 <lps22hh_write_reg>
 80068e6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d119      	bne.n	8006922 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80068ee:	78fb      	ldrb	r3, [r7, #3]
 80068f0:	091b      	lsrs	r3, r3, #4
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	7b3b      	ldrb	r3, [r7, #12]
 80068fa:	f362 0341 	bfi	r3, r2, #1, #1
 80068fe:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	08db      	lsrs	r3, r3, #3
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	b2da      	uxtb	r2, r3
 800690a:	7b3b      	ldrb	r3, [r7, #12]
 800690c:	f362 0300 	bfi	r3, r2, #0, #1
 8006910:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006912:	f107 020c 	add.w	r2, r7, #12
 8006916:	2301      	movs	r3, #1
 8006918:	2111      	movs	r1, #17
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff ff51 	bl	80067c2 <lps22hh_write_reg>
 8006920:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006922:	697b      	ldr	r3, [r7, #20]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006936:	f107 0210 	add.w	r2, r7, #16
 800693a:	2301      	movs	r3, #1
 800693c:	2110      	movs	r1, #16
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff ff27 	bl	8006792 <lps22hh_read_reg>
 8006944:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d107      	bne.n	800695c <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800694c:	f107 020c 	add.w	r2, r7, #12
 8006950:	2301      	movs	r3, #1
 8006952:	2111      	movs	r1, #17
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff ff1c 	bl	8006792 <lps22hh_read_reg>
 800695a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f040 8086 	bne.w	8006a70 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006964:	f107 020c 	add.w	r2, r7, #12
 8006968:	2301      	movs	r3, #1
 800696a:	2111      	movs	r1, #17
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ff10 	bl	8006792 <lps22hh_read_reg>
 8006972:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8006974:	7b3b      	ldrb	r3, [r7, #12]
 8006976:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800697a:	b2db      	uxtb	r3, r3
 800697c:	011a      	lsls	r2, r3, #4
 800697e:	7b3b      	ldrb	r3, [r7, #12]
 8006980:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006984:	b2db      	uxtb	r3, r3
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	4413      	add	r3, r2
             ctrl_reg1.odr))
 800698a:	7c3a      	ldrb	r2, [r7, #16]
 800698c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8006990:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8006992:	4413      	add	r3, r2
 8006994:	2b15      	cmp	r3, #21
 8006996:	d867      	bhi.n	8006a68 <lps22hh_data_rate_get+0x13c>
 8006998:	a201      	add	r2, pc, #4	@ (adr r2, 80069a0 <lps22hh_data_rate_get+0x74>)
 800699a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699e:	bf00      	nop
 80069a0:	080069f9 	.word	0x080069f9
 80069a4:	08006a09 	.word	0x08006a09
 80069a8:	08006a11 	.word	0x08006a11
 80069ac:	08006a19 	.word	0x08006a19
 80069b0:	08006a21 	.word	0x08006a21
 80069b4:	08006a29 	.word	0x08006a29
 80069b8:	08006a59 	.word	0x08006a59
 80069bc:	08006a61 	.word	0x08006a61
 80069c0:	08006a01 	.word	0x08006a01
 80069c4:	08006a69 	.word	0x08006a69
 80069c8:	08006a69 	.word	0x08006a69
 80069cc:	08006a69 	.word	0x08006a69
 80069d0:	08006a69 	.word	0x08006a69
 80069d4:	08006a69 	.word	0x08006a69
 80069d8:	08006a69 	.word	0x08006a69
 80069dc:	08006a69 	.word	0x08006a69
 80069e0:	08006a69 	.word	0x08006a69
 80069e4:	08006a31 	.word	0x08006a31
 80069e8:	08006a39 	.word	0x08006a39
 80069ec:	08006a41 	.word	0x08006a41
 80069f0:	08006a49 	.word	0x08006a49
 80069f4:	08006a51 	.word	0x08006a51
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2200      	movs	r2, #0
 80069fc:	701a      	strb	r2, [r3, #0]
        break;
 80069fe:	e037      	b.n	8006a70 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2208      	movs	r2, #8
 8006a04:	701a      	strb	r2, [r3, #0]
        break;
 8006a06:	e033      	b.n	8006a70 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	701a      	strb	r2, [r3, #0]
        break;
 8006a0e:	e02f      	b.n	8006a70 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2202      	movs	r2, #2
 8006a14:	701a      	strb	r2, [r3, #0]
        break;
 8006a16:	e02b      	b.n	8006a70 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2203      	movs	r2, #3
 8006a1c:	701a      	strb	r2, [r3, #0]
        break;
 8006a1e:	e027      	b.n	8006a70 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2204      	movs	r2, #4
 8006a24:	701a      	strb	r2, [r3, #0]
        break;
 8006a26:	e023      	b.n	8006a70 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2205      	movs	r2, #5
 8006a2c:	701a      	strb	r2, [r3, #0]
        break;
 8006a2e:	e01f      	b.n	8006a70 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2211      	movs	r2, #17
 8006a34:	701a      	strb	r2, [r3, #0]
        break;
 8006a36:	e01b      	b.n	8006a70 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2212      	movs	r2, #18
 8006a3c:	701a      	strb	r2, [r3, #0]
        break;
 8006a3e:	e017      	b.n	8006a70 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2213      	movs	r2, #19
 8006a44:	701a      	strb	r2, [r3, #0]
        break;
 8006a46:	e013      	b.n	8006a70 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2214      	movs	r2, #20
 8006a4c:	701a      	strb	r2, [r3, #0]
        break;
 8006a4e:	e00f      	b.n	8006a70 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2215      	movs	r2, #21
 8006a54:	701a      	strb	r2, [r3, #0]
        break;
 8006a56:	e00b      	b.n	8006a70 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	2206      	movs	r2, #6
 8006a5c:	701a      	strb	r2, [r3, #0]
        break;
 8006a5e:	e007      	b.n	8006a70 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2207      	movs	r2, #7
 8006a64:	701a      	strb	r2, [r3, #0]
        break;
 8006a66:	e003      	b.n	8006a70 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	701a      	strb	r2, [r3, #0]
        break;
 8006a6e:	bf00      	nop
    }
  }

  return ret;
 8006a70:	697b      	ldr	r3, [r7, #20]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop

08006a7c <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8006a86:	f107 0208 	add.w	r2, r7, #8
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	2128      	movs	r1, #40	@ 0x28
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff fe7f 	bl	8006792 <lps22hh_read_reg>
 8006a94:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006a96:	7abb      	ldrb	r3, [r7, #10]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	021b      	lsls	r3, r3, #8
 8006aa4:	7a7a      	ldrb	r2, [r7, #9]
 8006aa6:	441a      	add	r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	7a3a      	ldrb	r2, [r7, #8]
 8006ab4:	441a      	add	r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	021a      	lsls	r2, r3, #8
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	601a      	str	r2, [r3, #0]

  return ret;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006ad8:	f107 0208 	add.w	r2, r7, #8
 8006adc:	2302      	movs	r3, #2
 8006ade:	212b      	movs	r1, #43	@ 0x2b
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff fe56 	bl	8006792 <lps22hh_read_reg>
 8006ae6:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006ae8:	7a7b      	ldrb	r3, [r7, #9]
 8006aea:	b21a      	sxth	r2, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	7a3a      	ldrb	r2, [r7, #8]
 8006afe:	4413      	add	r3, r2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	b21a      	sxth	r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	801a      	strh	r2, [r3, #0]

  return ret;
 8006b08:	68fb      	ldr	r3, [r7, #12]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	210f      	movs	r1, #15
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff fe35 	bl	8006792 <lps22hh_read_reg>
 8006b28:	60f8      	str	r0, [r7, #12]

  return ret;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006b40:	f107 0208 	add.w	r2, r7, #8
 8006b44:	2301      	movs	r3, #1
 8006b46:	2111      	movs	r1, #17
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff fe22 	bl	8006792 <lps22hh_read_reg>
 8006b4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10f      	bne.n	8006b76 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8006b56:	78fb      	ldrb	r3, [r7, #3]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	7a3b      	ldrb	r3, [r7, #8]
 8006b60:	f362 1304 	bfi	r3, r2, #4, #1
 8006b64:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006b66:	f107 0208 	add.w	r2, r7, #8
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	2111      	movs	r1, #17
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff fe27 	bl	80067c2 <lps22hh_write_reg>
 8006b74:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006b76:	68fb      	ldr	r3, [r7, #12]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006b8c:	f107 0208 	add.w	r2, r7, #8
 8006b90:	2301      	movs	r3, #1
 8006b92:	2110      	movs	r1, #16
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff fdfc 	bl	8006792 <lps22hh_read_reg>
 8006b9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10f      	bne.n	8006bc2 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8006ba2:	78fb      	ldrb	r3, [r7, #3]
 8006ba4:	f003 0303 	and.w	r3, r3, #3
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	7a3b      	ldrb	r3, [r7, #8]
 8006bac:	f362 0383 	bfi	r3, r2, #2, #2
 8006bb0:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006bb2:	f107 0208 	add.w	r2, r7, #8
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	2110      	movs	r1, #16
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff fe01 	bl	80067c2 <lps22hh_write_reg>
 8006bc0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006bd8:	f107 0208 	add.w	r2, r7, #8
 8006bdc:	2301      	movs	r3, #1
 8006bde:	210e      	movs	r1, #14
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff fdd6 	bl	8006792 <lps22hh_read_reg>
 8006be6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d118      	bne.n	8006c20 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	7a3b      	ldrb	r3, [r7, #8]
 8006bf8:	f362 0341 	bfi	r3, r2, #1, #1
 8006bfc:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8006bfe:	78fb      	ldrb	r3, [r7, #3]
 8006c00:	091b      	lsrs	r3, r3, #4
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	7a3b      	ldrb	r3, [r7, #8]
 8006c0a:	f362 13c7 	bfi	r3, r2, #7, #1
 8006c0e:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006c10:	f107 0208 	add.w	r2, r7, #8
 8006c14:	2301      	movs	r3, #1
 8006c16:	210e      	movs	r1, #14
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff fdd2 	bl	80067c2 <lps22hh_write_reg>
 8006c1e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006c20:	68fb      	ldr	r3, [r7, #12]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d103      	bne.n	8006c48 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8006c40:	f04f 33ff 	mov.w	r3, #4294967295
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	e051      	b.n	8006cec <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	7b1a      	ldrb	r2, [r3, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	695a      	ldr	r2, [r3, #20]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	699a      	ldr	r2, [r3, #24]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf8 <LSM6DSO_RegisterBusIO+0xcc>)
 8006c84:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a1c      	ldr	r2, [pc, #112]	@ (8006cfc <LSM6DSO_RegisterBusIO+0xd0>)
 8006c8a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	69da      	ldr	r2, [r3, #28]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d103      	bne.n	8006caa <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8006ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	e020      	b.n	8006cec <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4798      	blx	r3
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8006cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	e016      	b.n	8006cec <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d112      	bne.n	8006cec <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10d      	bne.n	8006cec <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006cd0:	230c      	movs	r3, #12
 8006cd2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8006cd4:	7afb      	ldrb	r3, [r7, #11]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	2112      	movs	r1, #18
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 ff55 	bl	8007b8a <LSM6DSO_Write_Reg>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8006ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cea:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006cec:	68fb      	ldr	r3, [r7, #12]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	080080a1 	.word	0x080080a1
 8006cfc:	080080d7 	.word	0x080080d7

08006d00 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d00b      	beq.n	8006d28 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3320      	adds	r3, #32
 8006d14:	2180      	movs	r1, #128	@ 0x80
 8006d16:	4618      	mov	r0, r3
 8006d18:	f001 feb6 	bl	8008a88 <lsm6dso_i3c_disable_set>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8006d22:	f04f 33ff 	mov.w	r3, #4294967295
 8006d26:	e060      	b.n	8006dea <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3320      	adds	r3, #32
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 fe84 	bl	8008a3c <lsm6dso_auto_increment_set>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8006d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d3e:	e054      	b.n	8006dea <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3320      	adds	r3, #32
 8006d44:	2101      	movs	r1, #1
 8006d46:	4618      	mov	r0, r3
 8006d48:	f001 fd94 	bl	8008874 <lsm6dso_block_data_update_set>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 8006d52:	f04f 33ff 	mov.w	r3, #4294967295
 8006d56:	e048      	b.n	8006dea <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3320      	adds	r3, #32
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f001 ff00 	bl	8008b64 <lsm6dso_fifo_mode_set>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8006d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6e:	e03c      	b.n	8006dea <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2204      	movs	r2, #4
 8006d74:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3320      	adds	r3, #32
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f001 fa52 	bl	8008228 <lsm6dso_xl_data_rate_set>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8006d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d8e:	e02c      	b.n	8006dea <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3320      	adds	r3, #32
 8006d94:	2100      	movs	r1, #0
 8006d96:	4618      	mov	r0, r3
 8006d98:	f001 f9e8 	bl	800816c <lsm6dso_xl_full_scale_set>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8006da2:	f04f 33ff 	mov.w	r3, #4294967295
 8006da6:	e020      	b.n	8006dea <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2204      	movs	r2, #4
 8006dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3320      	adds	r3, #32
 8006db4:	2100      	movs	r1, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 fc00 	bl	80085bc <lsm6dso_gy_data_rate_set>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8006dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc6:	e010      	b.n	8006dea <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3320      	adds	r3, #32
 8006dcc:	2106      	movs	r1, #6
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f001 fb8c 	bl	80084ec <lsm6dso_gy_full_scale_set>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8006dda:	f04f 33ff 	mov.w	r3, #4294967295
 8006dde:	e004      	b.n	8006dea <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f888 	bl	8006f10 <LSM6DSO_ACC_Disable>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8006e06:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0a:	e015      	b.n	8006e38 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fc28 	bl	8007662 <LSM6DSO_GYRO_Disable>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8006e18:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1c:	e00c      	b.n	8006e38 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3320      	adds	r3, #32
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f001 fde2 	bl	8008a1a <lsm6dso_device_id_get>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8006e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e60:	e000      	b.n	8006e64 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2200      	movs	r2, #0
 8006e86:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006e94:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2210      	movs	r2, #16
 8006e9a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	4a07      	ldr	r2, [pc, #28]	@ (8006ec4 <LSM6DSO_GetCapabilities+0x58>)
 8006ea6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	4a06      	ldr	r2, [pc, #24]	@ (8006ec4 <LSM6DSO_GetCapabilities+0x58>)
 8006eac:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	f04f 0200 	mov.w	r2, #0
 8006eb4:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bc80      	pop	{r7}
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	45d02000 	.word	0x45d02000

08006ec8 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d101      	bne.n	8006ede <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	e014      	b.n	8006f08 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f103 0220 	add.w	r2, r3, #32
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006eea:	4619      	mov	r1, r3
 8006eec:	4610      	mov	r0, r2
 8006eee:	f001 f99b 	bl	8008228 <lsm6dso_xl_data_rate_set>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8006efc:	e004      	b.n	8006f08 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	e01f      	b.n	8006f66 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f103 0220 	add.w	r2, r3, #32
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3333      	adds	r3, #51	@ 0x33
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f001 fa72 	bl	800841c <lsm6dso_xl_data_rate_get>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8006f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f42:	e010      	b.n	8006f66 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3320      	adds	r3, #32
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f001 f96c 	bl	8008228 <lsm6dso_xl_data_rate_set>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006f56:	f04f 33ff 	mov.w	r3, #4294967295
 8006f5a:	e004      	b.n	8006f66 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	3320      	adds	r3, #32
 8006f82:	f107 020b 	add.w	r2, r7, #11
 8006f86:	4611      	mov	r1, r2
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 f915 	bl	80081b8 <lsm6dso_xl_full_scale_get>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006f94:	f04f 33ff 	mov.w	r3, #4294967295
 8006f98:	e023      	b.n	8006fe2 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d81b      	bhi.n	8006fd8 <LSM6DSO_ACC_GetSensitivity+0x68>
 8006fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa8 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8006fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	08006fb9 	.word	0x08006fb9
 8006fac:	08006fd1 	.word	0x08006fd1
 8006fb0:	08006fc1 	.word	0x08006fc1
 8006fb4:	08006fc9 	.word	0x08006fc9
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	4a0c      	ldr	r2, [pc, #48]	@ (8006fec <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8006fbc:	601a      	str	r2, [r3, #0]
      break;
 8006fbe:	e00f      	b.n	8006fe0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	4a0b      	ldr	r2, [pc, #44]	@ (8006ff0 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8006fc4:	601a      	str	r2, [r3, #0]
      break;
 8006fc6:	e00b      	b.n	8006fe0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff4 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8006fcc:	601a      	str	r2, [r3, #0]
      break;
 8006fce:	e007      	b.n	8006fe0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	4a09      	ldr	r2, [pc, #36]	@ (8006ff8 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8006fd4:	601a      	str	r2, [r3, #0]
      break;
 8006fd6:	e003      	b.n	8006fe0 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fdc:	60fb      	str	r3, [r7, #12]
      break;
 8006fde:	bf00      	nop
  }

  return ret;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	3d79db23 	.word	0x3d79db23
 8006ff0:	3df9db23 	.word	0x3df9db23
 8006ff4:	3e79db23 	.word	0x3e79db23
 8006ff8:	3ef9db23 	.word	0x3ef9db23

08006ffc <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	3320      	adds	r3, #32
 800700e:	f107 020b 	add.w	r2, r7, #11
 8007012:	4611      	mov	r1, r2
 8007014:	4618      	mov	r0, r3
 8007016:	f001 fa01 	bl	800841c <lsm6dso_xl_data_rate_get>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8007020:	f04f 33ff 	mov.w	r3, #4294967295
 8007024:	e054      	b.n	80070d0 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8007026:	7afb      	ldrb	r3, [r7, #11]
 8007028:	2b0b      	cmp	r3, #11
 800702a:	d84c      	bhi.n	80070c6 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 800702c:	a201      	add	r2, pc, #4	@ (adr r2, 8007034 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007032:	bf00      	nop
 8007034:	08007065 	.word	0x08007065
 8007038:	08007077 	.word	0x08007077
 800703c:	0800707f 	.word	0x0800707f
 8007040:	08007087 	.word	0x08007087
 8007044:	0800708f 	.word	0x0800708f
 8007048:	08007097 	.word	0x08007097
 800704c:	0800709f 	.word	0x0800709f
 8007050:	080070a7 	.word	0x080070a7
 8007054:	080070af 	.word	0x080070af
 8007058:	080070b7 	.word	0x080070b7
 800705c:	080070bf 	.word	0x080070bf
 8007060:	0800706f 	.word	0x0800706f
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	f04f 0200 	mov.w	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
      break;
 800706c:	e02f      	b.n	80070ce <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	4a19      	ldr	r2, [pc, #100]	@ (80070d8 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8007072:	601a      	str	r2, [r3, #0]
      break;
 8007074:	e02b      	b.n	80070ce <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	4a18      	ldr	r2, [pc, #96]	@ (80070dc <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 800707a:	601a      	str	r2, [r3, #0]
      break;
 800707c:	e027      	b.n	80070ce <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	4a17      	ldr	r2, [pc, #92]	@ (80070e0 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8007082:	601a      	str	r2, [r3, #0]
      break;
 8007084:	e023      	b.n	80070ce <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	4a16      	ldr	r2, [pc, #88]	@ (80070e4 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 800708a:	601a      	str	r2, [r3, #0]
      break;
 800708c:	e01f      	b.n	80070ce <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	4a15      	ldr	r2, [pc, #84]	@ (80070e8 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8007092:	601a      	str	r2, [r3, #0]
      break;
 8007094:	e01b      	b.n	80070ce <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	4a14      	ldr	r2, [pc, #80]	@ (80070ec <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 800709a:	601a      	str	r2, [r3, #0]
      break;
 800709c:	e017      	b.n	80070ce <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	4a13      	ldr	r2, [pc, #76]	@ (80070f0 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80070a2:	601a      	str	r2, [r3, #0]
      break;
 80070a4:	e013      	b.n	80070ce <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	4a12      	ldr	r2, [pc, #72]	@ (80070f4 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 80070aa:	601a      	str	r2, [r3, #0]
      break;
 80070ac:	e00f      	b.n	80070ce <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	4a11      	ldr	r2, [pc, #68]	@ (80070f8 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 80070b2:	601a      	str	r2, [r3, #0]
      break;
 80070b4:	e00b      	b.n	80070ce <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	4a10      	ldr	r2, [pc, #64]	@ (80070fc <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80070ba:	601a      	str	r2, [r3, #0]
      break;
 80070bc:	e007      	b.n	80070ce <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	4a0f      	ldr	r2, [pc, #60]	@ (8007100 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80070c2:	601a      	str	r2, [r3, #0]
      break;
 80070c4:	e003      	b.n	80070ce <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80070c6:	f04f 33ff 	mov.w	r3, #4294967295
 80070ca:	60fb      	str	r3, [r7, #12]
      break;
 80070cc:	bf00      	nop
  }

  return ret;
 80070ce:	68fb      	ldr	r3, [r7, #12]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	3fcccccd 	.word	0x3fcccccd
 80070dc:	41480000 	.word	0x41480000
 80070e0:	41d00000 	.word	0x41d00000
 80070e4:	42500000 	.word	0x42500000
 80070e8:	42d00000 	.word	0x42d00000
 80070ec:	43500000 	.word	0x43500000
 80070f0:	43d08000 	.word	0x43d08000
 80070f4:	44504000 	.word	0x44504000
 80070f8:	44d06000 	.word	0x44d06000
 80070fc:	45505000 	.word	0x45505000
 8007100:	45d05800 	.word	0x45d05800

08007104 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 800710e:	2200      	movs	r2, #0
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f806 	bl	8007124 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8007118:	4603      	mov	r3, r0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b08c      	sub	sp, #48	@ 0x30
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	4613      	mov	r3, r2
 8007130:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 800713a:	79fb      	ldrb	r3, [r7, #7]
 800713c:	2b02      	cmp	r3, #2
 800713e:	f000 80e6 	beq.w	800730e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ea>
 8007142:	2b02      	cmp	r3, #2
 8007144:	f300 815d 	bgt.w	8007402 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2de>
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e>
 800714c:	2b01      	cmp	r3, #1
 800714e:	d072      	beq.n	8007236 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
 8007150:	e157      	b.n	8007402 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2de>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f103 0020 	add.w	r0, r3, #32
 8007158:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800715c:	2301      	movs	r3, #1
 800715e:	2114      	movs	r1, #20
 8007160:	f000 ffd4 	bl	800810c <lsm6dso_read_reg>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4c>
      {
        return LSM6DSO_ERROR;
 800716a:	f04f 33ff 	mov.w	r3, #4294967295
 800716e:	e164      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en != 0U)
 8007170:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007174:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d025      	beq.n	80071ca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa6>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007184:	2b01      	cmp	r3, #1
 8007186:	d10b      	bne.n	80071a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3320      	adds	r3, #32
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f001 f84a 	bl	8008228 <lsm6dso_xl_data_rate_set>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
          {
            return LSM6DSO_ERROR;
 800719a:	f04f 33ff 	mov.w	r3, #4294967295
 800719e:	e14c      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 0;
 80071a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071a4:	f36f 13c7 	bfc	r3, #7, #1
 80071a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f103 0020 	add.w	r0, r3, #32
 80071b2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80071b6:	2301      	movs	r3, #1
 80071b8:	2114      	movs	r1, #20
 80071ba:	f000 ffbf 	bl	800813c <lsm6dso_write_reg>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa6>
        {
          return LSM6DSO_ERROR;
 80071c4:	f04f 33ff 	mov.w	r3, #4294967295
 80071c8:	e137      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f103 0020 	add.w	r0, r3, #32
 80071d0:	f107 0220 	add.w	r2, r7, #32
 80071d4:	2301      	movs	r3, #1
 80071d6:	2115      	movs	r1, #21
 80071d8:	f000 ff98 	bl	800810c <lsm6dso_read_reg>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc4>
      {
        return LSM6DSO_ERROR;
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295
 80071e6:	e128      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode != 0U)
 80071e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071ec:	f003 0310 	and.w	r3, r3, #16
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d014      	beq.n	8007220 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfc>
      {
        val2.xl_hm_mode = 0U;
 80071f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071fa:	f36f 1304 	bfc	r3, #4, #1
 80071fe:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f103 0020 	add.w	r0, r3, #32
 8007208:	f107 0220 	add.w	r2, r7, #32
 800720c:	2301      	movs	r3, #1
 800720e:	2115      	movs	r1, #21
 8007210:	f000 ff94 	bl	800813c <lsm6dso_write_reg>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfc>
        {
          return LSM6DSO_ERROR;
 800721a:	f04f 33ff 	mov.w	r3, #4294967295
 800721e:	e10c      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8007220:	4988      	ldr	r1, [pc, #544]	@ (8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 8007222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007224:	f7f9 ff3c 	bl	80010a0 <__aeabi_fcmplt>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d100      	bne.n	8007230 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x10c>
      {
        newOdr = 12.5f;
      }
      break;
 800722e:	e0ec      	b.n	800740a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 12.5f;
 8007230:	4b84      	ldr	r3, [pc, #528]	@ (8007444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 8007232:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007234:	e0e9      	b.n	800740a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f103 0020 	add.w	r0, r3, #32
 800723c:	f107 021c 	add.w	r2, r7, #28
 8007240:	2301      	movs	r3, #1
 8007242:	2114      	movs	r1, #20
 8007244:	f000 ff62 	bl	800810c <lsm6dso_read_reg>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x130>
      {
        return LSM6DSO_ERROR;
 800724e:	f04f 33ff 	mov.w	r3, #4294967295
 8007252:	e0f2      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en != 0U)
 8007254:	7f3b      	ldrb	r3, [r7, #28]
 8007256:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	d023      	beq.n	80072a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007266:	2b01      	cmp	r3, #1
 8007268:	d10b      	bne.n	8007282 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3320      	adds	r3, #32
 800726e:	2100      	movs	r1, #0
 8007270:	4618      	mov	r0, r3
 8007272:	f000 ffd9 	bl	8008228 <lsm6dso_xl_data_rate_set>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
          {
            return LSM6DSO_ERROR;
 800727c:	f04f 33ff 	mov.w	r3, #4294967295
 8007280:	e0db      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 0;
 8007282:	7f3b      	ldrb	r3, [r7, #28]
 8007284:	f36f 13c7 	bfc	r3, #7, #1
 8007288:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f103 0020 	add.w	r0, r3, #32
 8007290:	f107 021c 	add.w	r2, r7, #28
 8007294:	2301      	movs	r3, #1
 8007296:	2114      	movs	r1, #20
 8007298:	f000 ff50 	bl	800813c <lsm6dso_write_reg>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
        {
          return LSM6DSO_ERROR;
 80072a2:	f04f 33ff 	mov.w	r3, #4294967295
 80072a6:	e0c8      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f103 0020 	add.w	r0, r3, #32
 80072ae:	f107 0218 	add.w	r2, r7, #24
 80072b2:	2301      	movs	r3, #1
 80072b4:	2115      	movs	r1, #21
 80072b6:	f000 ff29 	bl	800810c <lsm6dso_read_reg>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a2>
      {
        return LSM6DSO_ERROR;
 80072c0:	f04f 33ff 	mov.w	r3, #4294967295
 80072c4:	e0b9      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode == 0U)
 80072c6:	7e3b      	ldrb	r3, [r7, #24]
 80072c8:	f003 0310 	and.w	r3, r3, #16
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d112      	bne.n	80072f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
      {
        val2.xl_hm_mode = 1U;
 80072d2:	7e3b      	ldrb	r3, [r7, #24]
 80072d4:	f043 0310 	orr.w	r3, r3, #16
 80072d8:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f103 0020 	add.w	r0, r3, #32
 80072e0:	f107 0218 	add.w	r2, r7, #24
 80072e4:	2301      	movs	r3, #1
 80072e6:	2115      	movs	r1, #21
 80072e8:	f000 ff28 	bl	800813c <lsm6dso_write_reg>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
        {
          return LSM6DSO_ERROR;
 80072f2:	f04f 33ff 	mov.w	r3, #4294967295
 80072f6:	e0a0      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80072f8:	4953      	ldr	r1, [pc, #332]	@ (8007448 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 80072fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072fc:	f7f9 feee 	bl	80010dc <__aeabi_fcmpgt>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d100      	bne.n	8007308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e4>
      {
        newOdr = 208.0f;
      }
      break;
 8007306:	e080      	b.n	800740a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 208.0f;
 8007308:	4b4f      	ldr	r3, [pc, #316]	@ (8007448 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 800730a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800730c:	e07d      	b.n	800740a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f103 0020 	add.w	r0, r3, #32
 8007314:	f107 0210 	add.w	r2, r7, #16
 8007318:	2301      	movs	r3, #1
 800731a:	2115      	movs	r1, #21
 800731c:	f000 fef6 	bl	800810c <lsm6dso_read_reg>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
      {
        return LSM6DSO_ERROR;
 8007326:	f04f 33ff 	mov.w	r3, #4294967295
 800732a:	e086      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode != 0U)
 800732c:	7c3b      	ldrb	r3, [r7, #16]
 800732e:	f003 0310 	and.w	r3, r3, #16
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d012      	beq.n	800735e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23a>
      {
        val2.xl_hm_mode = 0U;
 8007338:	7c3b      	ldrb	r3, [r7, #16]
 800733a:	f36f 1304 	bfc	r3, #4, #1
 800733e:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f103 0020 	add.w	r0, r3, #32
 8007346:	f107 0210 	add.w	r2, r7, #16
 800734a:	2301      	movs	r3, #1
 800734c:	2115      	movs	r1, #21
 800734e:	f000 fef5 	bl	800813c <lsm6dso_write_reg>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23a>
        {
          return LSM6DSO_ERROR;
 8007358:	f04f 33ff 	mov.w	r3, #4294967295
 800735c:	e06d      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007364:	2b01      	cmp	r3, #1
 8007366:	d108      	bne.n	800737a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x256>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f97a 	bl	8007662 <LSM6DSO_GYRO_Disable>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x256>
        {
          return LSM6DSO_ERROR;
 8007374:	f04f 33ff 	mov.w	r3, #4294967295
 8007378:	e05f      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f103 0020 	add.w	r0, r3, #32
 8007380:	f107 0214 	add.w	r2, r7, #20
 8007384:	2301      	movs	r3, #1
 8007386:	2114      	movs	r1, #20
 8007388:	f000 fec0 	bl	800810c <lsm6dso_read_reg>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x274>
      {
        return LSM6DSO_ERROR;
 8007392:	f04f 33ff 	mov.w	r3, #4294967295
 8007396:	e050      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en == 0U)
 8007398:	7d3b      	ldrb	r3, [r7, #20]
 800739a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d123      	bne.n	80073ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2c8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d10b      	bne.n	80073c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a2>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3320      	adds	r3, #32
 80073b2:	2100      	movs	r1, #0
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 ff37 	bl	8008228 <lsm6dso_xl_data_rate_set>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a2>
          {
            return LSM6DSO_ERROR;
 80073c0:	f04f 33ff 	mov.w	r3, #4294967295
 80073c4:	e039      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 1U;
 80073c6:	7d3b      	ldrb	r3, [r7, #20]
 80073c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073cc:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f103 0020 	add.w	r0, r3, #32
 80073d4:	f107 0214 	add.w	r2, r7, #20
 80073d8:	2301      	movs	r3, #1
 80073da:	2114      	movs	r1, #20
 80073dc:	f000 feae 	bl	800813c <lsm6dso_write_reg>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2c8>
        {
          return LSM6DSO_ERROR;
 80073e6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ea:	e026      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80073ec:	4916      	ldr	r1, [pc, #88]	@ (8007448 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 80073ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073f0:	f7f9 fe74 	bl	80010dc <__aeabi_fcmpgt>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d100      	bne.n	80073fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
      {
        newOdr = 208.0f;
      }
      break;
 80073fa:	e006      	b.n	800740a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 208.0f;
 80073fc:	4b12      	ldr	r3, [pc, #72]	@ (8007448 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 80073fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007400:	e003      	b.n	800740a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
    }
    default:
      ret = LSM6DSO_ERROR;
 8007402:	f04f 33ff 	mov.w	r3, #4294967295
 8007406:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8007408:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800740a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007410:	d102      	bne.n	8007418 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
  {
    return LSM6DSO_ERROR;
 8007412:	f04f 33ff 	mov.w	r3, #4294967295
 8007416:	e010      	b.n	800743a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
  }

  if (pObj->acc_is_enabled == 1U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800741e:	2b01      	cmp	r3, #1
 8007420:	d105      	bne.n	800742e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8007422:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 fc49 	bl	8007cbc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800742a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800742c:	e004      	b.n	8007438 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x314>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800742e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 fccb 	bl	8007dcc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8007436:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 8007438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800743a:	4618      	mov	r0, r3
 800743c:	3730      	adds	r7, #48	@ 0x30
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	41480000 	.word	0x41480000
 8007448:	43500000 	.word	0x43500000

0800744c <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3320      	adds	r3, #32
 800745e:	f107 020b 	add.w	r2, r7, #11
 8007462:	4611      	mov	r1, r2
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fea7 	bl	80081b8 <lsm6dso_xl_full_scale_get>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8007470:	f04f 33ff 	mov.w	r3, #4294967295
 8007474:	e023      	b.n	80074be <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8007476:	7afb      	ldrb	r3, [r7, #11]
 8007478:	2b03      	cmp	r3, #3
 800747a:	d81b      	bhi.n	80074b4 <LSM6DSO_ACC_GetFullScale+0x68>
 800747c:	a201      	add	r2, pc, #4	@ (adr r2, 8007484 <LSM6DSO_ACC_GetFullScale+0x38>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	08007495 	.word	0x08007495
 8007488:	080074ad 	.word	0x080074ad
 800748c:	0800749d 	.word	0x0800749d
 8007490:	080074a5 	.word	0x080074a5
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	2202      	movs	r2, #2
 8007498:	601a      	str	r2, [r3, #0]
      break;
 800749a:	e00f      	b.n	80074bc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2204      	movs	r2, #4
 80074a0:	601a      	str	r2, [r3, #0]
      break;
 80074a2:	e00b      	b.n	80074bc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2208      	movs	r2, #8
 80074a8:	601a      	str	r2, [r3, #0]
      break;
 80074aa:	e007      	b.n	80074bc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2210      	movs	r2, #16
 80074b0:	601a      	str	r2, [r3, #0]
      break;
 80074b2:	e003      	b.n	80074bc <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80074b4:	f04f 33ff 	mov.w	r3, #4294967295
 80074b8:	60fb      	str	r3, [r7, #12]
      break;
 80074ba:	bf00      	nop
  }

  return ret;
 80074bc:	68fb      	ldr	r3, [r7, #12]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop

080074c8 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	dd0b      	ble.n	80074f0 <LSM6DSO_ACC_SetFullScale+0x28>
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	2b04      	cmp	r3, #4
 80074dc:	dd06      	ble.n	80074ec <LSM6DSO_ACC_SetFullScale+0x24>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	dc01      	bgt.n	80074e8 <LSM6DSO_ACC_SetFullScale+0x20>
 80074e4:	2303      	movs	r3, #3
 80074e6:	e004      	b.n	80074f2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80074e8:	2301      	movs	r3, #1
 80074ea:	e002      	b.n	80074f2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80074ec:	2302      	movs	r3, #2
 80074ee:	e000      	b.n	80074f2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80074f0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80074f2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3320      	adds	r3, #32
 80074f8:	7bfa      	ldrb	r2, [r7, #15]
 80074fa:	4611      	mov	r1, r2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 fe35 	bl	800816c <lsm6dso_xl_full_scale_set>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8007508:	f04f 33ff 	mov.w	r3, #4294967295
 800750c:	e000      	b.n	8007510 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3320      	adds	r3, #32
 8007526:	f107 0208 	add.w	r2, r7, #8
 800752a:	4611      	mov	r1, r2
 800752c:	4618      	mov	r0, r3
 800752e:	f001 fa0f 	bl	8008950 <lsm6dso_acceleration_raw_get>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8007538:	f04f 33ff 	mov.w	r3, #4294967295
 800753c:	e00c      	b.n	8007558 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800753e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007546:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800754e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800756a:	f04f 0300 	mov.w	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3320      	adds	r3, #32
 8007574:	f107 0210 	add.w	r2, r7, #16
 8007578:	4611      	mov	r1, r2
 800757a:	4618      	mov	r0, r3
 800757c:	f001 f9e8 	bl	8008950 <lsm6dso_acceleration_raw_get>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8007586:	f04f 33ff 	mov.w	r3, #4294967295
 800758a:	e042      	b.n	8007612 <LSM6DSO_ACC_GetAxes+0xb2>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800758c:	f107 030c 	add.w	r3, r7, #12
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff fcec 	bl	8006f70 <LSM6DSO_ACC_GetSensitivity>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800759e:	f04f 33ff 	mov.w	r3, #4294967295
 80075a2:	e036      	b.n	8007612 <LSM6DSO_ACC_GetAxes+0xb2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80075a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7f9 fb87 	bl	8000cbc <__aeabi_i2f>
 80075ae:	4602      	mov	r2, r0
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4619      	mov	r1, r3
 80075b4:	4610      	mov	r0, r2
 80075b6:	f7f9 fbd5 	bl	8000d64 <__aeabi_fmul>
 80075ba:	4603      	mov	r3, r0
 80075bc:	4618      	mov	r0, r3
 80075be:	f7f9 fd97 	bl	80010f0 <__aeabi_f2iz>
 80075c2:	4602      	mov	r2, r0
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80075c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7f9 fb75 	bl	8000cbc <__aeabi_i2f>
 80075d2:	4602      	mov	r2, r0
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4619      	mov	r1, r3
 80075d8:	4610      	mov	r0, r2
 80075da:	f7f9 fbc3 	bl	8000d64 <__aeabi_fmul>
 80075de:	4603      	mov	r3, r0
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7f9 fd85 	bl	80010f0 <__aeabi_f2iz>
 80075e6:	4602      	mov	r2, r0
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80075ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7f9 fb63 	bl	8000cbc <__aeabi_i2f>
 80075f6:	4602      	mov	r2, r0
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4619      	mov	r1, r3
 80075fc:	4610      	mov	r0, r2
 80075fe:	f7f9 fbb1 	bl	8000d64 <__aeabi_fmul>
 8007602:	4603      	mov	r3, r0
 8007604:	4618      	mov	r0, r3
 8007606:	f7f9 fd73 	bl	80010f0 <__aeabi_f2iz>
 800760a:	4602      	mov	r2, r0
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	e014      	b.n	800765a <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f103 0220 	add.w	r2, r3, #32
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800763c:	4619      	mov	r1, r3
 800763e:	4610      	mov	r0, r2
 8007640:	f000 ffbc 	bl	80085bc <lsm6dso_gy_data_rate_set>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800764a:	f04f 33ff 	mov.w	r3, #4294967295
 800764e:	e004      	b.n	800765a <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	e01f      	b.n	80076b8 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f103 0220 	add.w	r2, r3, #32
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3334      	adds	r3, #52	@ 0x34
 8007682:	4619      	mov	r1, r3
 8007684:	4610      	mov	r0, r2
 8007686:	f001 f893 	bl	80087b0 <lsm6dso_gy_data_rate_get>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8007690:	f04f 33ff 	mov.w	r3, #4294967295
 8007694:	e010      	b.n	80076b8 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3320      	adds	r3, #32
 800769a:	2100      	movs	r1, #0
 800769c:	4618      	mov	r0, r3
 800769e:	f000 ff8d 	bl	80085bc <lsm6dso_gy_data_rate_set>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80076a8:	f04f 33ff 	mov.w	r3, #4294967295
 80076ac:	e004      	b.n	80076b8 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3320      	adds	r3, #32
 80076d2:	f107 020b 	add.w	r2, r7, #11
 80076d6:	4611      	mov	r1, r2
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 ff2d 	bl	8008538 <lsm6dso_gy_full_scale_get>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80076e4:	f04f 33ff 	mov.w	r3, #4294967295
 80076e8:	e02d      	b.n	8007746 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80076ea:	7afb      	ldrb	r3, [r7, #11]
 80076ec:	2b06      	cmp	r3, #6
 80076ee:	d825      	bhi.n	800773c <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80076f0:	a201      	add	r2, pc, #4	@ (adr r2, 80076f8 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80076f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f6:	bf00      	nop
 80076f8:	0800771d 	.word	0x0800771d
 80076fc:	08007715 	.word	0x08007715
 8007700:	08007725 	.word	0x08007725
 8007704:	0800773d 	.word	0x0800773d
 8007708:	0800772d 	.word	0x0800772d
 800770c:	0800773d 	.word	0x0800773d
 8007710:	08007735 	.word	0x08007735
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	4a0e      	ldr	r2, [pc, #56]	@ (8007750 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8007718:	601a      	str	r2, [r3, #0]
      break;
 800771a:	e013      	b.n	8007744 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	4a0d      	ldr	r2, [pc, #52]	@ (8007754 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8007720:	601a      	str	r2, [r3, #0]
      break;
 8007722:	e00f      	b.n	8007744 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	4a0c      	ldr	r2, [pc, #48]	@ (8007758 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8007728:	601a      	str	r2, [r3, #0]
      break;
 800772a:	e00b      	b.n	8007744 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	4a0b      	ldr	r2, [pc, #44]	@ (800775c <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8007730:	601a      	str	r2, [r3, #0]
      break;
 8007732:	e007      	b.n	8007744 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	4a0a      	ldr	r2, [pc, #40]	@ (8007760 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8007738:	601a      	str	r2, [r3, #0]
      break;
 800773a:	e003      	b.n	8007744 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 800773c:	f04f 33ff 	mov.w	r3, #4294967295
 8007740:	60fb      	str	r3, [r7, #12]
      break;
 8007742:	bf00      	nop
  }

  return ret;
 8007744:	68fb      	ldr	r3, [r7, #12]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	408c0000 	.word	0x408c0000
 8007754:	410c0000 	.word	0x410c0000
 8007758:	418c0000 	.word	0x418c0000
 800775c:	420c0000 	.word	0x420c0000
 8007760:	428c0000 	.word	0x428c0000

08007764 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3320      	adds	r3, #32
 8007776:	f107 020b 	add.w	r2, r7, #11
 800777a:	4611      	mov	r1, r2
 800777c:	4618      	mov	r0, r3
 800777e:	f001 f817 	bl	80087b0 <lsm6dso_gy_data_rate_get>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8007788:	f04f 33ff 	mov.w	r3, #4294967295
 800778c:	e04e      	b.n	800782c <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800778e:	7afb      	ldrb	r3, [r7, #11]
 8007790:	2b0a      	cmp	r3, #10
 8007792:	d846      	bhi.n	8007822 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8007794:	a201      	add	r2, pc, #4	@ (adr r2, 800779c <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8007796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779a:	bf00      	nop
 800779c:	080077c9 	.word	0x080077c9
 80077a0:	080077d3 	.word	0x080077d3
 80077a4:	080077db 	.word	0x080077db
 80077a8:	080077e3 	.word	0x080077e3
 80077ac:	080077eb 	.word	0x080077eb
 80077b0:	080077f3 	.word	0x080077f3
 80077b4:	080077fb 	.word	0x080077fb
 80077b8:	08007803 	.word	0x08007803
 80077bc:	0800780b 	.word	0x0800780b
 80077c0:	08007813 	.word	0x08007813
 80077c4:	0800781b 	.word	0x0800781b
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	f04f 0200 	mov.w	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]
      break;
 80077d0:	e02b      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	4a17      	ldr	r2, [pc, #92]	@ (8007834 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 80077d6:	601a      	str	r2, [r3, #0]
      break;
 80077d8:	e027      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	4a16      	ldr	r2, [pc, #88]	@ (8007838 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 80077de:	601a      	str	r2, [r3, #0]
      break;
 80077e0:	e023      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	4a15      	ldr	r2, [pc, #84]	@ (800783c <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 80077e6:	601a      	str	r2, [r3, #0]
      break;
 80077e8:	e01f      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	4a14      	ldr	r2, [pc, #80]	@ (8007840 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 80077ee:	601a      	str	r2, [r3, #0]
      break;
 80077f0:	e01b      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	4a13      	ldr	r2, [pc, #76]	@ (8007844 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 80077f6:	601a      	str	r2, [r3, #0]
      break;
 80077f8:	e017      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	4a12      	ldr	r2, [pc, #72]	@ (8007848 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 80077fe:	601a      	str	r2, [r3, #0]
      break;
 8007800:	e013      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	4a11      	ldr	r2, [pc, #68]	@ (800784c <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8007806:	601a      	str	r2, [r3, #0]
      break;
 8007808:	e00f      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	4a10      	ldr	r2, [pc, #64]	@ (8007850 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 800780e:	601a      	str	r2, [r3, #0]
      break;
 8007810:	e00b      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	4a0f      	ldr	r2, [pc, #60]	@ (8007854 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8007816:	601a      	str	r2, [r3, #0]
      break;
 8007818:	e007      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	4a0e      	ldr	r2, [pc, #56]	@ (8007858 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 800781e:	601a      	str	r2, [r3, #0]
      break;
 8007820:	e003      	b.n	800782a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8007822:	f04f 33ff 	mov.w	r3, #4294967295
 8007826:	60fb      	str	r3, [r7, #12]
      break;
 8007828:	bf00      	nop
  }

  return ret;
 800782a:	68fb      	ldr	r3, [r7, #12]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	41480000 	.word	0x41480000
 8007838:	41d00000 	.word	0x41d00000
 800783c:	42500000 	.word	0x42500000
 8007840:	42d00000 	.word	0x42d00000
 8007844:	43500000 	.word	0x43500000
 8007848:	43d08000 	.word	0x43d08000
 800784c:	44504000 	.word	0x44504000
 8007850:	44d06000 	.word	0x44d06000
 8007854:	45505000 	.word	0x45505000
 8007858:	45d05800 	.word	0x45d05800

0800785c <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8007866:	2200      	movs	r2, #0
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f806 	bl	800787c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8007870:	4603      	mov	r3, r0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	4613      	mov	r3, r2
 8007888:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x22>
 8007898:	2b01      	cmp	r3, #1
 800789a:	d028      	beq.n	80078ee <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x72>
 800789c:	e05a      	b.n	8007954 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f103 0020 	add.w	r0, r3, #32
 80078a4:	f107 0214 	add.w	r2, r7, #20
 80078a8:	2301      	movs	r3, #1
 80078aa:	2116      	movs	r1, #22
 80078ac:	f000 fc2e 	bl	800810c <lsm6dso_read_reg>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d002      	beq.n	80078bc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x40>
      {
        return LSM6DSO_ERROR;
 80078b6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ba:	e068      	b.n	800798e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
      }

      if (val1.g_hm_mode != 0U)
 80078bc:	7d3b      	ldrb	r3, [r7, #20]
 80078be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d049      	beq.n	800795c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe0>
      {
        val1.g_hm_mode = 0U;
 80078c8:	7d3b      	ldrb	r3, [r7, #20]
 80078ca:	f36f 13c7 	bfc	r3, #7, #1
 80078ce:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f103 0020 	add.w	r0, r3, #32
 80078d6:	f107 0214 	add.w	r2, r7, #20
 80078da:	2301      	movs	r3, #1
 80078dc:	2116      	movs	r1, #22
 80078de:	f000 fc2d 	bl	800813c <lsm6dso_write_reg>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d039      	beq.n	800795c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe0>
        {
          return LSM6DSO_ERROR;
 80078e8:	f04f 33ff 	mov.w	r3, #4294967295
 80078ec:	e04f      	b.n	800798e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f103 0020 	add.w	r0, r3, #32
 80078f4:	f107 0210 	add.w	r2, r7, #16
 80078f8:	2301      	movs	r3, #1
 80078fa:	2116      	movs	r1, #22
 80078fc:	f000 fc06 	bl	800810c <lsm6dso_read_reg>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x90>
      {
        return LSM6DSO_ERROR;
 8007906:	f04f 33ff 	mov.w	r3, #4294967295
 800790a:	e040      	b.n	800798e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
      }

      if (val1.g_hm_mode == 0U)
 800790c:	7c3b      	ldrb	r3, [r7, #16]
 800790e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d112      	bne.n	800793e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc2>
      {
        val1.g_hm_mode = 1U;
 8007918:	7c3b      	ldrb	r3, [r7, #16]
 800791a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800791e:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f103 0020 	add.w	r0, r3, #32
 8007926:	f107 0210 	add.w	r2, r7, #16
 800792a:	2301      	movs	r3, #1
 800792c:	2116      	movs	r1, #22
 800792e:	f000 fc05 	bl	800813c <lsm6dso_write_reg>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc2>
        {
          return LSM6DSO_ERROR;
 8007938:	f04f 33ff 	mov.w	r3, #4294967295
 800793c:	e027      	b.n	800798e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800793e:	4916      	ldr	r1, [pc, #88]	@ (8007998 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>)
 8007940:	69b8      	ldr	r0, [r7, #24]
 8007942:	f7f9 fbcb 	bl	80010dc <__aeabi_fcmpgt>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d100      	bne.n	800794e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd2>
      {
        newOdr = 208.0f;
      }
      break;
 800794c:	e007      	b.n	800795e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
        newOdr = 208.0f;
 800794e:	4b12      	ldr	r3, [pc, #72]	@ (8007998 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>)
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	e004      	b.n	800795e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
    }
    default:
      ret = LSM6DSO_ERROR;
 8007954:	f04f 33ff 	mov.w	r3, #4294967295
 8007958:	61fb      	str	r3, [r7, #28]
      break;
 800795a:	e000      	b.n	800795e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
      break;
 800795c:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007964:	d102      	bne.n	800796c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf0>
  {
    return LSM6DSO_ERROR;
 8007966:	f04f 33ff 	mov.w	r3, #4294967295
 800796a:	e010      	b.n	800798e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
  }

  if (pObj->gyro_is_enabled == 1U)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007972:	2b01      	cmp	r3, #1
 8007974:	d105      	bne.n	8007982 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x106>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8007976:	69b9      	ldr	r1, [r7, #24]
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 faa3 	bl	8007ec4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800797e:	61f8      	str	r0, [r7, #28]
 8007980:	e004      	b.n	800798c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x110>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8007982:	69b9      	ldr	r1, [r7, #24]
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 fb19 	bl	8007fbc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 800798a:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800798c:	69fb      	ldr	r3, [r7, #28]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3720      	adds	r7, #32
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	43500000 	.word	0x43500000

0800799c <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	3320      	adds	r3, #32
 80079ae:	f107 020b 	add.w	r2, r7, #11
 80079b2:	4611      	mov	r1, r2
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 fdbf 	bl	8008538 <lsm6dso_gy_full_scale_get>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80079c0:	f04f 33ff 	mov.w	r3, #4294967295
 80079c4:	e030      	b.n	8007a28 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80079c6:	7afb      	ldrb	r3, [r7, #11]
 80079c8:	2b06      	cmp	r3, #6
 80079ca:	d828      	bhi.n	8007a1e <LSM6DSO_GYRO_GetFullScale+0x82>
 80079cc:	a201      	add	r2, pc, #4	@ (adr r2, 80079d4 <LSM6DSO_GYRO_GetFullScale+0x38>)
 80079ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d2:	bf00      	nop
 80079d4:	080079f9 	.word	0x080079f9
 80079d8:	080079f1 	.word	0x080079f1
 80079dc:	08007a01 	.word	0x08007a01
 80079e0:	08007a1f 	.word	0x08007a1f
 80079e4:	08007a0b 	.word	0x08007a0b
 80079e8:	08007a1f 	.word	0x08007a1f
 80079ec:	08007a15 	.word	0x08007a15
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	227d      	movs	r2, #125	@ 0x7d
 80079f4:	601a      	str	r2, [r3, #0]
      break;
 80079f6:	e016      	b.n	8007a26 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	22fa      	movs	r2, #250	@ 0xfa
 80079fc:	601a      	str	r2, [r3, #0]
      break;
 80079fe:	e012      	b.n	8007a26 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8007a06:	601a      	str	r2, [r3, #0]
      break;
 8007a08:	e00d      	b.n	8007a26 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007a10:	601a      	str	r2, [r3, #0]
      break;
 8007a12:	e008      	b.n	8007a26 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007a1a:	601a      	str	r2, [r3, #0]
      break;
 8007a1c:	e003      	b.n	8007a26 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8007a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a22:	60fb      	str	r3, [r7, #12]
      break;
 8007a24:	bf00      	nop
  }

  return ret;
 8007a26:	68fb      	ldr	r3, [r7, #12]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b7d      	cmp	r3, #125	@ 0x7d
 8007a3e:	dd12      	ble.n	8007a66 <LSM6DSO_GYRO_SetFullScale+0x36>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2bfa      	cmp	r3, #250	@ 0xfa
 8007a44:	dd0d      	ble.n	8007a62 <LSM6DSO_GYRO_SetFullScale+0x32>
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007a4c:	dd07      	ble.n	8007a5e <LSM6DSO_GYRO_SetFullScale+0x2e>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a54:	dc01      	bgt.n	8007a5a <LSM6DSO_GYRO_SetFullScale+0x2a>
 8007a56:	2304      	movs	r3, #4
 8007a58:	e006      	b.n	8007a68 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007a5a:	2306      	movs	r3, #6
 8007a5c:	e004      	b.n	8007a68 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e002      	b.n	8007a68 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007a62:	2300      	movs	r3, #0
 8007a64:	e000      	b.n	8007a68 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007a66:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8007a68:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3320      	adds	r3, #32
 8007a6e:	7bfa      	ldrb	r2, [r7, #15]
 8007a70:	4611      	mov	r1, r2
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 fd3a 	bl	80084ec <lsm6dso_gy_full_scale_set>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8007a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a82:	e000      	b.n	8007a86 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b084      	sub	sp, #16
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3320      	adds	r3, #32
 8007a9c:	f107 0208 	add.w	r2, r7, #8
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 ff0c 	bl	80088c0 <lsm6dso_angular_rate_raw_get>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8007aae:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab2:	e00c      	b.n	8007ace <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007ab4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007abc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007ac4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b086      	sub	sp, #24
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3320      	adds	r3, #32
 8007ae4:	f107 0210 	add.w	r2, r7, #16
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fee8 	bl	80088c0 <lsm6dso_angular_rate_raw_get>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d002      	beq.n	8007afc <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8007af6:	f04f 33ff 	mov.w	r3, #4294967295
 8007afa:	e042      	b.n	8007b82 <LSM6DSO_GYRO_GetAxes+0xac>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8007afc:	f107 030c 	add.w	r3, r7, #12
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7ff fddc 	bl	80076c0 <LSM6DSO_GYRO_GetSensitivity>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8007b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b12:	e036      	b.n	8007b82 <LSM6DSO_GYRO_GetAxes+0xac>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007b14:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7f9 f8cf 	bl	8000cbc <__aeabi_i2f>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4619      	mov	r1, r3
 8007b24:	4610      	mov	r0, r2
 8007b26:	f7f9 f91d 	bl	8000d64 <__aeabi_fmul>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7f9 fadf 	bl	80010f0 <__aeabi_f2iz>
 8007b32:	4602      	mov	r2, r0
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007b38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7f9 f8bd 	bl	8000cbc <__aeabi_i2f>
 8007b42:	4602      	mov	r2, r0
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4619      	mov	r1, r3
 8007b48:	4610      	mov	r0, r2
 8007b4a:	f7f9 f90b 	bl	8000d64 <__aeabi_fmul>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7f9 facd 	bl	80010f0 <__aeabi_f2iz>
 8007b56:	4602      	mov	r2, r0
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007b5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7f9 f8ab 	bl	8000cbc <__aeabi_i2f>
 8007b66:	4602      	mov	r2, r0
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	f7f9 f8f9 	bl	8000d64 <__aeabi_fmul>
 8007b72:	4603      	mov	r3, r0
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7f9 fabb 	bl	80010f0 <__aeabi_f2iz>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70fb      	strb	r3, [r7, #3]
 8007b96:	4613      	mov	r3, r2
 8007b98:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f103 0020 	add.w	r0, r3, #32
 8007ba0:	1cba      	adds	r2, r7, #2
 8007ba2:	78f9      	ldrb	r1, [r7, #3]
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f000 fac9 	bl	800813c <lsm6dso_write_reg>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8007bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb4:	e000      	b.n	8007bb8 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <LSM6DSO_ACC_Enable_6D_Orientation>:
  * @param  pObj the device pObj
  * @param  IntPin interrupt pin line to be used
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable_6D_Orientation(LSM6DSO_Object_t *pObj, LSM6DSO_SensorIntPin_t IntPin)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO_OK;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61fb      	str	r3, [r7, #28]
  lsm6dso_pin_int1_route_t val1;
  lsm6dso_pin_int2_route_t val2;

  /* Output Data Rate selection */
  if (LSM6DSO_ACC_SetOutputDataRate(pObj, 417.0f) != LSM6DSO_OK)
 8007bd0:	4939      	ldr	r1, [pc, #228]	@ (8007cb8 <LSM6DSO_ACC_Enable_6D_Orientation+0xf8>)
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff fa96 	bl	8007104 <LSM6DSO_ACC_SetOutputDataRate>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d002      	beq.n	8007be4 <LSM6DSO_ACC_Enable_6D_Orientation+0x24>
  {
    return LSM6DSO_ERROR;
 8007bde:	f04f 33ff 	mov.w	r3, #4294967295
 8007be2:	e065      	b.n	8007cb0 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
  }

  /* Full scale selection */
  if (LSM6DSO_ACC_SetFullScale(pObj, 2) != LSM6DSO_OK)
 8007be4:	2102      	movs	r1, #2
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff fc6e 	bl	80074c8 <LSM6DSO_ACC_SetFullScale>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <LSM6DSO_ACC_Enable_6D_Orientation+0x38>
  {
    return LSM6DSO_ERROR;
 8007bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf6:	e05b      	b.n	8007cb0 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
  }

  /* 6D orientation enabled. */
  if (lsm6dso_6d_threshold_set(&(pObj->Ctx), LSM6DSO_DEG_60) != LSM6DSO_OK)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3320      	adds	r3, #32
 8007bfc:	2102      	movs	r1, #2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 ff8a 	bl	8008b18 <lsm6dso_6d_threshold_set>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <LSM6DSO_ACC_Enable_6D_Orientation+0x50>
  {
    return LSM6DSO_ERROR;
 8007c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c0e:	e04f      	b.n	8007cb0 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
  }

  /* Enable 6D orientation event on either INT1 or INT2 pin */
  switch (IntPin)
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <LSM6DSO_ACC_Enable_6D_Orientation+0x5c>
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d021      	beq.n	8007c5e <LSM6DSO_ACC_Enable_6D_Orientation+0x9e>
 8007c1a:	e041      	b.n	8007ca0 <LSM6DSO_ACC_Enable_6D_Orientation+0xe0>
  {
    case LSM6DSO_INT1_PIN:
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3320      	adds	r3, #32
 8007c20:	f107 0214 	add.w	r2, r7, #20
 8007c24:	4611      	mov	r1, r2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f001 fbd8 	bl	80093dc <lsm6dso_pin_int1_route_get>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <LSM6DSO_ACC_Enable_6D_Orientation+0x78>
      {
        return LSM6DSO_ERROR;
 8007c32:	f04f 33ff 	mov.w	r3, #4294967295
 8007c36:	e03b      	b.n	8007cb0 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      }

      val1.six_d = PROPERTY_ENABLE;
 8007c38:	7d7b      	ldrb	r3, [r7, #21]
 8007c3a:	f043 0308 	orr.w	r3, r3, #8
 8007c3e:	757b      	strb	r3, [r7, #21]

      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f103 0020 	add.w	r0, r3, #32
 8007c46:	f107 0314 	add.w	r3, r7, #20
 8007c4a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007c4e:	f001 f81f 	bl	8008c90 <lsm6dso_pin_int1_route_set>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d027      	beq.n	8007ca8 <LSM6DSO_ACC_Enable_6D_Orientation+0xe8>
      {
        return LSM6DSO_ERROR;
 8007c58:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5c:	e028      	b.n	8007cb0 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      }
      break;

    case LSM6DSO_INT2_PIN:
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	3320      	adds	r3, #32
 8007c62:	f107 020c 	add.w	r2, r7, #12
 8007c66:	2100      	movs	r1, #0
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f002 f919 	bl	8009ea0 <lsm6dso_pin_int2_route_get>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <LSM6DSO_ACC_Enable_6D_Orientation+0xba>
      {
        return LSM6DSO_ERROR;
 8007c74:	f04f 33ff 	mov.w	r3, #4294967295
 8007c78:	e01a      	b.n	8007cb0 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      }

      val2.six_d = PROPERTY_ENABLE;
 8007c7a:	7b7b      	ldrb	r3, [r7, #13]
 8007c7c:	f043 0302 	orr.w	r3, r3, #2
 8007c80:	737b      	strb	r3, [r7, #13]

      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f103 0020 	add.w	r0, r3, #32
 8007c88:	f107 030c 	add.w	r3, r7, #12
 8007c8c:	cb0c      	ldmia	r3, {r2, r3}
 8007c8e:	2100      	movs	r1, #0
 8007c90:	f001 fd94 	bl	80097bc <lsm6dso_pin_int2_route_set>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d008      	beq.n	8007cac <LSM6DSO_ACC_Enable_6D_Orientation+0xec>
      {
        return LSM6DSO_ERROR;
 8007c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c9e:	e007      	b.n	8007cb0 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      }
      break;

    default:
      ret = LSM6DSO_ERROR;
 8007ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca4:	61fb      	str	r3, [r7, #28]
      break;
 8007ca6:	e002      	b.n	8007cae <LSM6DSO_ACC_Enable_6D_Orientation+0xee>
      break;
 8007ca8:	bf00      	nop
 8007caa:	e000      	b.n	8007cae <LSM6DSO_ACC_Enable_6D_Orientation+0xee>
      break;
 8007cac:	bf00      	nop
  }

  return ret;
 8007cae:	69fb      	ldr	r3, [r7, #28]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3720      	adds	r7, #32
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	43d08000 	.word	0x43d08000

08007cbc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007cc6:	4937      	ldr	r1, [pc, #220]	@ (8007da4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>)
 8007cc8:	6838      	ldr	r0, [r7, #0]
 8007cca:	f7f9 f9f3 	bl	80010b4 <__aeabi_fcmple>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x1c>
 8007cd4:	230b      	movs	r3, #11
 8007cd6:	e051      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007cd8:	4933      	ldr	r1, [pc, #204]	@ (8007da8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xec>)
 8007cda:	6838      	ldr	r0, [r7, #0]
 8007cdc:	f7f9 f9ea 	bl	80010b4 <__aeabi_fcmple>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x2e>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e048      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007cea:	4930      	ldr	r1, [pc, #192]	@ (8007dac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf0>)
 8007cec:	6838      	ldr	r0, [r7, #0]
 8007cee:	f7f9 f9e1 	bl	80010b4 <__aeabi_fcmple>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x40>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e03f      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007cfc:	492c      	ldr	r1, [pc, #176]	@ (8007db0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf4>)
 8007cfe:	6838      	ldr	r0, [r7, #0]
 8007d00:	f7f9 f9d8 	bl	80010b4 <__aeabi_fcmple>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x52>
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e036      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d0e:	4929      	ldr	r1, [pc, #164]	@ (8007db4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf8>)
 8007d10:	6838      	ldr	r0, [r7, #0]
 8007d12:	f7f9 f9cf 	bl	80010b4 <__aeabi_fcmple>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8007d1c:	2304      	movs	r3, #4
 8007d1e:	e02d      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d20:	4925      	ldr	r1, [pc, #148]	@ (8007db8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xfc>)
 8007d22:	6838      	ldr	r0, [r7, #0]
 8007d24:	f7f9 f9c6 	bl	80010b4 <__aeabi_fcmple>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x76>
 8007d2e:	2305      	movs	r3, #5
 8007d30:	e024      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d32:	4922      	ldr	r1, [pc, #136]	@ (8007dbc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x100>)
 8007d34:	6838      	ldr	r0, [r7, #0]
 8007d36:	f7f9 f9bd 	bl	80010b4 <__aeabi_fcmple>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x88>
 8007d40:	2306      	movs	r3, #6
 8007d42:	e01b      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d44:	491e      	ldr	r1, [pc, #120]	@ (8007dc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x104>)
 8007d46:	6838      	ldr	r0, [r7, #0]
 8007d48:	f7f9 f9b4 	bl	80010b4 <__aeabi_fcmple>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x9a>
 8007d52:	2307      	movs	r3, #7
 8007d54:	e012      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d56:	491b      	ldr	r1, [pc, #108]	@ (8007dc4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>)
 8007d58:	6838      	ldr	r0, [r7, #0]
 8007d5a:	f7f9 f9ab 	bl	80010b4 <__aeabi_fcmple>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8007d64:	2308      	movs	r3, #8
 8007d66:	e009      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d68:	4917      	ldr	r1, [pc, #92]	@ (8007dc8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x10c>)
 8007d6a:	6838      	ldr	r0, [r7, #0]
 8007d6c:	f7f9 f9a2 	bl	80010b4 <__aeabi_fcmple>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbe>
 8007d76:	2309      	movs	r3, #9
 8007d78:	e000      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d7a:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8007d7c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	3320      	adds	r3, #32
 8007d82:	7bfa      	ldrb	r2, [r7, #15]
 8007d84:	4611      	mov	r1, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fa4e 	bl	8008228 <lsm6dso_xl_data_rate_set>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xdc>
  {
    return LSM6DSO_ERROR;
 8007d92:	f04f 33ff 	mov.w	r3, #4294967295
 8007d96:	e000      	b.n	8007d9a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xde>
  }

  return LSM6DSO_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	3fcccccd 	.word	0x3fcccccd
 8007da8:	41480000 	.word	0x41480000
 8007dac:	41d00000 	.word	0x41d00000
 8007db0:	42500000 	.word	0x42500000
 8007db4:	42d00000 	.word	0x42d00000
 8007db8:	43500000 	.word	0x43500000
 8007dbc:	43d08000 	.word	0x43d08000
 8007dc0:	44504000 	.word	0x44504000
 8007dc4:	44d06000 	.word	0x44d06000
 8007dc8:	45505000 	.word	0x45505000

08007dcc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007dd6:	4931      	ldr	r1, [pc, #196]	@ (8007e9c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8007dd8:	6838      	ldr	r0, [r7, #0]
 8007dda:	f7f9 f96b 	bl	80010b4 <__aeabi_fcmple>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x1c>
 8007de4:	230b      	movs	r3, #11
 8007de6:	e051      	b.n	8007e8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007de8:	492d      	ldr	r1, [pc, #180]	@ (8007ea0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8007dea:	6838      	ldr	r0, [r7, #0]
 8007dec:	f7f9 f962 	bl	80010b4 <__aeabi_fcmple>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e048      	b.n	8007e8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007dfa:	492a      	ldr	r1, [pc, #168]	@ (8007ea4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8007dfc:	6838      	ldr	r0, [r7, #0]
 8007dfe:	f7f9 f959 	bl	80010b4 <__aeabi_fcmple>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x40>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e03f      	b.n	8007e8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e0c:	4926      	ldr	r1, [pc, #152]	@ (8007ea8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 8007e0e:	6838      	ldr	r0, [r7, #0]
 8007e10:	f7f9 f950 	bl	80010b4 <__aeabi_fcmple>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x52>
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e036      	b.n	8007e8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e1e:	4923      	ldr	r1, [pc, #140]	@ (8007eac <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 8007e20:	6838      	ldr	r0, [r7, #0]
 8007e22:	f7f9 f947 	bl	80010b4 <__aeabi_fcmple>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007e2c:	2304      	movs	r3, #4
 8007e2e:	e02d      	b.n	8007e8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e30:	491f      	ldr	r1, [pc, #124]	@ (8007eb0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 8007e32:	6838      	ldr	r0, [r7, #0]
 8007e34:	f7f9 f93e 	bl	80010b4 <__aeabi_fcmple>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x76>
 8007e3e:	2305      	movs	r3, #5
 8007e40:	e024      	b.n	8007e8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e42:	491c      	ldr	r1, [pc, #112]	@ (8007eb4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>)
 8007e44:	6838      	ldr	r0, [r7, #0]
 8007e46:	f7f9 f935 	bl	80010b4 <__aeabi_fcmple>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x88>
 8007e50:	2306      	movs	r3, #6
 8007e52:	e01b      	b.n	8007e8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e54:	4918      	ldr	r1, [pc, #96]	@ (8007eb8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8007e56:	6838      	ldr	r0, [r7, #0]
 8007e58:	f7f9 f92c 	bl	80010b4 <__aeabi_fcmple>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8007e62:	2307      	movs	r3, #7
 8007e64:	e012      	b.n	8007e8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e66:	4915      	ldr	r1, [pc, #84]	@ (8007ebc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8007e68:	6838      	ldr	r0, [r7, #0]
 8007e6a:	f7f9 f923 	bl	80010b4 <__aeabi_fcmple>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8007e74:	2308      	movs	r3, #8
 8007e76:	e009      	b.n	8007e8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e78:	4911      	ldr	r1, [pc, #68]	@ (8007ec0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8007e7a:	6838      	ldr	r0, [r7, #0]
 8007e7c:	f7f9 f91a 	bl	80010b4 <__aeabi_fcmple>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8007e86:	2309      	movs	r3, #9
 8007e88:	e000      	b.n	8007e8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e8a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	3fcccccd 	.word	0x3fcccccd
 8007ea0:	41480000 	.word	0x41480000
 8007ea4:	41d00000 	.word	0x41d00000
 8007ea8:	42500000 	.word	0x42500000
 8007eac:	42d00000 	.word	0x42d00000
 8007eb0:	43500000 	.word	0x43500000
 8007eb4:	43d08000 	.word	0x43d08000
 8007eb8:	44504000 	.word	0x44504000
 8007ebc:	44d06000 	.word	0x44d06000
 8007ec0:	45505000 	.word	0x45505000

08007ec4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007ece:	4932      	ldr	r1, [pc, #200]	@ (8007f98 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>)
 8007ed0:	6838      	ldr	r0, [r7, #0]
 8007ed2:	f7f9 f8ef 	bl	80010b4 <__aeabi_fcmple>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d001      	beq.n	8007ee0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x1c>
 8007edc:	2301      	movs	r3, #1
 8007ede:	e048      	b.n	8007f72 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007ee0:	492e      	ldr	r1, [pc, #184]	@ (8007f9c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd8>)
 8007ee2:	6838      	ldr	r0, [r7, #0]
 8007ee4:	f7f9 f8e6 	bl	80010b4 <__aeabi_fcmple>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x2e>
 8007eee:	2302      	movs	r3, #2
 8007ef0:	e03f      	b.n	8007f72 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007ef2:	492b      	ldr	r1, [pc, #172]	@ (8007fa0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xdc>)
 8007ef4:	6838      	ldr	r0, [r7, #0]
 8007ef6:	f7f9 f8dd 	bl	80010b4 <__aeabi_fcmple>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x40>
 8007f00:	2303      	movs	r3, #3
 8007f02:	e036      	b.n	8007f72 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007f04:	4927      	ldr	r1, [pc, #156]	@ (8007fa4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe0>)
 8007f06:	6838      	ldr	r0, [r7, #0]
 8007f08:	f7f9 f8d4 	bl	80010b4 <__aeabi_fcmple>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x52>
 8007f12:	2304      	movs	r3, #4
 8007f14:	e02d      	b.n	8007f72 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007f16:	4924      	ldr	r1, [pc, #144]	@ (8007fa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe4>)
 8007f18:	6838      	ldr	r0, [r7, #0]
 8007f1a:	f7f9 f8cb 	bl	80010b4 <__aeabi_fcmple>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8007f24:	2305      	movs	r3, #5
 8007f26:	e024      	b.n	8007f72 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007f28:	4920      	ldr	r1, [pc, #128]	@ (8007fac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe8>)
 8007f2a:	6838      	ldr	r0, [r7, #0]
 8007f2c:	f7f9 f8c2 	bl	80010b4 <__aeabi_fcmple>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x76>
 8007f36:	2306      	movs	r3, #6
 8007f38:	e01b      	b.n	8007f72 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007f3a:	491d      	ldr	r1, [pc, #116]	@ (8007fb0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xec>)
 8007f3c:	6838      	ldr	r0, [r7, #0]
 8007f3e:	f7f9 f8b9 	bl	80010b4 <__aeabi_fcmple>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x88>
 8007f48:	2307      	movs	r3, #7
 8007f4a:	e012      	b.n	8007f72 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007f4c:	4919      	ldr	r1, [pc, #100]	@ (8007fb4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>)
 8007f4e:	6838      	ldr	r0, [r7, #0]
 8007f50:	f7f9 f8b0 	bl	80010b4 <__aeabi_fcmple>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9a>
 8007f5a:	2308      	movs	r3, #8
 8007f5c:	e009      	b.n	8007f72 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007f5e:	4916      	ldr	r1, [pc, #88]	@ (8007fb8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf4>)
 8007f60:	6838      	ldr	r0, [r7, #0]
 8007f62:	f7f9 f8a7 	bl	80010b4 <__aeabi_fcmple>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xac>
 8007f6c:	2309      	movs	r3, #9
 8007f6e:	e000      	b.n	8007f72 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007f70:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007f72:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3320      	adds	r3, #32
 8007f78:	7bfa      	ldrb	r2, [r7, #15]
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 fb1d 	bl	80085bc <lsm6dso_gy_data_rate_set>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xca>
  {
    return LSM6DSO_ERROR;
 8007f88:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8c:	e000      	b.n	8007f90 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xcc>
  }

  return LSM6DSO_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	41480000 	.word	0x41480000
 8007f9c:	41d00000 	.word	0x41d00000
 8007fa0:	42500000 	.word	0x42500000
 8007fa4:	42d00000 	.word	0x42d00000
 8007fa8:	43500000 	.word	0x43500000
 8007fac:	43d08000 	.word	0x43d08000
 8007fb0:	44504000 	.word	0x44504000
 8007fb4:	44d06000 	.word	0x44d06000
 8007fb8:	45505000 	.word	0x45505000

08007fbc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007fc6:	492d      	ldr	r1, [pc, #180]	@ (800807c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc0>)
 8007fc8:	6838      	ldr	r0, [r7, #0]
 8007fca:	f7f9 f873 	bl	80010b4 <__aeabi_fcmple>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x1c>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e048      	b.n	800806a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007fd8:	4929      	ldr	r1, [pc, #164]	@ (8008080 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc4>)
 8007fda:	6838      	ldr	r0, [r7, #0]
 8007fdc:	f7f9 f86a 	bl	80010b4 <__aeabi_fcmple>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x2e>
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e03f      	b.n	800806a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007fea:	4926      	ldr	r1, [pc, #152]	@ (8008084 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc8>)
 8007fec:	6838      	ldr	r0, [r7, #0]
 8007fee:	f7f9 f861 	bl	80010b4 <__aeabi_fcmple>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x40>
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e036      	b.n	800806a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007ffc:	4922      	ldr	r1, [pc, #136]	@ (8008088 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xcc>)
 8007ffe:	6838      	ldr	r0, [r7, #0]
 8008000:	f7f9 f858 	bl	80010b4 <__aeabi_fcmple>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x52>
 800800a:	2304      	movs	r3, #4
 800800c:	e02d      	b.n	800806a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 800800e:	491f      	ldr	r1, [pc, #124]	@ (800808c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd0>)
 8008010:	6838      	ldr	r0, [r7, #0]
 8008012:	f7f9 f84f 	bl	80010b4 <__aeabi_fcmple>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800801c:	2305      	movs	r3, #5
 800801e:	e024      	b.n	800806a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008020:	491b      	ldr	r1, [pc, #108]	@ (8008090 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>)
 8008022:	6838      	ldr	r0, [r7, #0]
 8008024:	f7f9 f846 	bl	80010b4 <__aeabi_fcmple>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x76>
 800802e:	2306      	movs	r3, #6
 8008030:	e01b      	b.n	800806a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008032:	4918      	ldr	r1, [pc, #96]	@ (8008094 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd8>)
 8008034:	6838      	ldr	r0, [r7, #0]
 8008036:	f7f9 f83d 	bl	80010b4 <__aeabi_fcmple>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8008040:	2307      	movs	r3, #7
 8008042:	e012      	b.n	800806a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008044:	4914      	ldr	r1, [pc, #80]	@ (8008098 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xdc>)
 8008046:	6838      	ldr	r0, [r7, #0]
 8008048:	f7f9 f834 	bl	80010b4 <__aeabi_fcmple>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9a>
 8008052:	2308      	movs	r3, #8
 8008054:	e009      	b.n	800806a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008056:	4911      	ldr	r1, [pc, #68]	@ (800809c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe0>)
 8008058:	6838      	ldr	r0, [r7, #0]
 800805a:	f7f9 f82b 	bl	80010b4 <__aeabi_fcmple>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xac>
 8008064:	2309      	movs	r3, #9
 8008066:	e000      	b.n	800806a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008068:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	41480000 	.word	0x41480000
 8008080:	41d00000 	.word	0x41d00000
 8008084:	42500000 	.word	0x42500000
 8008088:	42d00000 	.word	0x42d00000
 800808c:	43500000 	.word	0x43500000
 8008090:	43d08000 	.word	0x43d08000
 8008094:	44504000 	.word	0x44504000
 8008098:	44d06000 	.word	0x44d06000
 800809c:	45505000 	.word	0x45505000

080080a0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80080a0:	b590      	push	{r4, r7, lr}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	607a      	str	r2, [r7, #4]
 80080aa:	461a      	mov	r2, r3
 80080ac:	460b      	mov	r3, r1
 80080ae:	72fb      	strb	r3, [r7, #11]
 80080b0:	4613      	mov	r3, r2
 80080b2:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	695c      	ldr	r4, [r3, #20]
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	7b1b      	ldrb	r3, [r3, #12]
 80080c0:	4618      	mov	r0, r3
 80080c2:	7afb      	ldrb	r3, [r7, #11]
 80080c4:	b299      	uxth	r1, r3
 80080c6:	893b      	ldrh	r3, [r7, #8]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	47a0      	blx	r4
 80080cc:	4603      	mov	r3, r0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd90      	pop	{r4, r7, pc}

080080d6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80080d6:	b590      	push	{r4, r7, lr}
 80080d8:	b087      	sub	sp, #28
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	461a      	mov	r2, r3
 80080e2:	460b      	mov	r3, r1
 80080e4:	72fb      	strb	r3, [r7, #11]
 80080e6:	4613      	mov	r3, r2
 80080e8:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	691c      	ldr	r4, [r3, #16]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	7b1b      	ldrb	r3, [r3, #12]
 80080f6:	4618      	mov	r0, r3
 80080f8:	7afb      	ldrb	r3, [r7, #11]
 80080fa:	b299      	uxth	r1, r3
 80080fc:	893b      	ldrh	r3, [r7, #8]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	47a0      	blx	r4
 8008102:	4603      	mov	r3, r0
}
 8008104:	4618      	mov	r0, r3
 8008106:	371c      	adds	r7, #28
 8008108:	46bd      	mov	sp, r7
 800810a:	bd90      	pop	{r4, r7, pc}

0800810c <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800810c:	b590      	push	{r4, r7, lr}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	461a      	mov	r2, r3
 8008118:	460b      	mov	r3, r1
 800811a:	72fb      	strb	r3, [r7, #11]
 800811c:	4613      	mov	r3, r2
 800811e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	685c      	ldr	r4, [r3, #4]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	68d8      	ldr	r0, [r3, #12]
 8008128:	893b      	ldrh	r3, [r7, #8]
 800812a:	7af9      	ldrb	r1, [r7, #11]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	47a0      	blx	r4
 8008130:	6178      	str	r0, [r7, #20]

  return ret;
 8008132:	697b      	ldr	r3, [r7, #20]
}
 8008134:	4618      	mov	r0, r3
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	bd90      	pop	{r4, r7, pc}

0800813c <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800813c:	b590      	push	{r4, r7, lr}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	607a      	str	r2, [r7, #4]
 8008146:	461a      	mov	r2, r3
 8008148:	460b      	mov	r3, r1
 800814a:	72fb      	strb	r3, [r7, #11]
 800814c:	4613      	mov	r3, r2
 800814e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681c      	ldr	r4, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	68d8      	ldr	r0, [r3, #12]
 8008158:	893b      	ldrh	r3, [r7, #8]
 800815a:	7af9      	ldrb	r1, [r7, #11]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	47a0      	blx	r4
 8008160:	6178      	str	r0, [r7, #20]

  return ret;
 8008162:	697b      	ldr	r3, [r7, #20]
}
 8008164:	4618      	mov	r0, r3
 8008166:	371c      	adds	r7, #28
 8008168:	46bd      	mov	sp, r7
 800816a:	bd90      	pop	{r4, r7, pc}

0800816c <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008178:	f107 0208 	add.w	r2, r7, #8
 800817c:	2301      	movs	r3, #1
 800817e:	2110      	movs	r1, #16
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7ff ffc3 	bl	800810c <lsm6dso_read_reg>
 8008186:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10f      	bne.n	80081ae <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	f003 0303 	and.w	r3, r3, #3
 8008194:	b2da      	uxtb	r2, r3
 8008196:	7a3b      	ldrb	r3, [r7, #8]
 8008198:	f362 0383 	bfi	r3, r2, #2, #2
 800819c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800819e:	f107 0208 	add.w	r2, r7, #8
 80081a2:	2301      	movs	r3, #1
 80081a4:	2110      	movs	r1, #16
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff ffc8 	bl	800813c <lsm6dso_write_reg>
 80081ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80081ae:	68fb      	ldr	r3, [r7, #12]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80081c2:	f107 0208 	add.w	r2, r7, #8
 80081c6:	2301      	movs	r3, #1
 80081c8:	2110      	movs	r1, #16
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7ff ff9e 	bl	800810c <lsm6dso_read_reg>
 80081d0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80081d2:	7a3b      	ldrb	r3, [r7, #8]
 80081d4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d81a      	bhi.n	8008214 <lsm6dso_xl_full_scale_get+0x5c>
 80081de:	a201      	add	r2, pc, #4	@ (adr r2, 80081e4 <lsm6dso_xl_full_scale_get+0x2c>)
 80081e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e4:	080081f5 	.word	0x080081f5
 80081e8:	080081fd 	.word	0x080081fd
 80081ec:	08008205 	.word	0x08008205
 80081f0:	0800820d 	.word	0x0800820d
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2200      	movs	r2, #0
 80081f8:	701a      	strb	r2, [r3, #0]
      break;
 80081fa:	e00f      	b.n	800821c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2201      	movs	r2, #1
 8008200:	701a      	strb	r2, [r3, #0]
      break;
 8008202:	e00b      	b.n	800821c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2202      	movs	r2, #2
 8008208:	701a      	strb	r2, [r3, #0]
      break;
 800820a:	e007      	b.n	800821c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2203      	movs	r2, #3
 8008210:	701a      	strb	r2, [r3, #0]
      break;
 8008212:	e003      	b.n	800821c <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2200      	movs	r2, #0
 8008218:	701a      	strb	r2, [r3, #0]
      break;
 800821a:	bf00      	nop
  }

  return ret;
 800821c:	68fb      	ldr	r3, [r7, #12]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop

08008228 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8008234:	78fb      	ldrb	r3, [r7, #3]
 8008236:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8008238:	f107 030c 	add.w	r3, r7, #12
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fcb6 	bl	8008bb0 <lsm6dso_fsm_enable_get>
 8008244:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <lsm6dso_xl_data_rate_set+0x28>
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	e0e0      	b.n	8008412 <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008250:	7b3b      	ldrb	r3, [r7, #12]
 8008252:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008256:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8008258:	7b3b      	ldrb	r3, [r7, #12]
 800825a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800825e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008260:	4313      	orrs	r3, r2
 8008262:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8008264:	7b3b      	ldrb	r3, [r7, #12]
 8008266:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800826a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 800826c:	4313      	orrs	r3, r2
 800826e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008270:	7b3b      	ldrb	r3, [r7, #12]
 8008272:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008276:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8008278:	4313      	orrs	r3, r2
 800827a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800827c:	7b3b      	ldrb	r3, [r7, #12]
 800827e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008282:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008284:	4313      	orrs	r3, r2
 8008286:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8008288:	7b3b      	ldrb	r3, [r7, #12]
 800828a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800828e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8008290:	4313      	orrs	r3, r2
 8008292:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8008294:	7b3b      	ldrb	r3, [r7, #12]
 8008296:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800829a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800829c:	4313      	orrs	r3, r2
 800829e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80082a0:	7b3b      	ldrb	r3, [r7, #12]
 80082a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80082a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80082a8:	4313      	orrs	r3, r2
 80082aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80082ac:	7b7b      	ldrb	r3, [r7, #13]
 80082ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80082b2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80082b4:	4313      	orrs	r3, r2
 80082b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80082b8:	7b7b      	ldrb	r3, [r7, #13]
 80082ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80082be:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80082c0:	4313      	orrs	r3, r2
 80082c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80082c4:	7b7b      	ldrb	r3, [r7, #13]
 80082c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80082ca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80082cc:	4313      	orrs	r3, r2
 80082ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80082d0:	7b7b      	ldrb	r3, [r7, #13]
 80082d2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80082d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80082d8:	4313      	orrs	r3, r2
 80082da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80082dc:	7b7b      	ldrb	r3, [r7, #13]
 80082de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80082e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80082e4:	4313      	orrs	r3, r2
 80082e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80082e8:	7b7b      	ldrb	r3, [r7, #13]
 80082ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80082ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80082f0:	4313      	orrs	r3, r2
 80082f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80082f4:	7b7b      	ldrb	r3, [r7, #13]
 80082f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80082fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80082fc:	4313      	orrs	r3, r2
 80082fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8008300:	7b7b      	ldrb	r3, [r7, #13]
 8008302:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008306:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8008308:	4313      	orrs	r3, r2
 800830a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800830c:	2b01      	cmp	r3, #1
 800830e:	d164      	bne.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8008310:	f107 030b 	add.w	r3, r7, #11
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fc6c 	bl	8008bf4 <lsm6dso_fsm_data_rate_get>
 800831c:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <lsm6dso_xl_data_rate_set+0x100>
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	e074      	b.n	8008412 <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8008328:	7afb      	ldrb	r3, [r7, #11]
 800832a:	2b03      	cmp	r3, #3
 800832c:	d852      	bhi.n	80083d4 <lsm6dso_xl_data_rate_set+0x1ac>
 800832e:	a201      	add	r2, pc, #4	@ (adr r2, 8008334 <lsm6dso_xl_data_rate_set+0x10c>)
 8008330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008334:	08008345 	.word	0x08008345
 8008338:	08008357 	.word	0x08008357
 800833c:	08008375 	.word	0x08008375
 8008340:	0800839f 	.word	0x0800839f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8008344:	78fb      	ldrb	r3, [r7, #3]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d102      	bne.n	8008350 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 800834a:	2301      	movs	r3, #1
 800834c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800834e:	e044      	b.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	75fb      	strb	r3, [r7, #23]
        break;
 8008354:	e041      	b.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8008356:	78fb      	ldrb	r3, [r7, #3]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d102      	bne.n	8008362 <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 800835c:	2302      	movs	r3, #2
 800835e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8008360:	e03b      	b.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8008362:	78fb      	ldrb	r3, [r7, #3]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d102      	bne.n	800836e <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8008368:	2302      	movs	r3, #2
 800836a:	75fb      	strb	r3, [r7, #23]
        break;
 800836c:	e035      	b.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800836e:	78fb      	ldrb	r3, [r7, #3]
 8008370:	75fb      	strb	r3, [r7, #23]
        break;
 8008372:	e032      	b.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8008374:	78fb      	ldrb	r3, [r7, #3]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d102      	bne.n	8008380 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800837a:	2303      	movs	r3, #3
 800837c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800837e:	e02c      	b.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d102      	bne.n	800838c <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8008386:	2303      	movs	r3, #3
 8008388:	75fb      	strb	r3, [r7, #23]
        break;
 800838a:	e026      	b.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 800838c:	78fb      	ldrb	r3, [r7, #3]
 800838e:	2b02      	cmp	r3, #2
 8008390:	d102      	bne.n	8008398 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8008392:	2303      	movs	r3, #3
 8008394:	75fb      	strb	r3, [r7, #23]
        break;
 8008396:	e020      	b.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	75fb      	strb	r3, [r7, #23]
        break;
 800839c:	e01d      	b.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d102      	bne.n	80083aa <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80083a4:	2304      	movs	r3, #4
 80083a6:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80083a8:	e017      	b.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80083aa:	78fb      	ldrb	r3, [r7, #3]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d102      	bne.n	80083b6 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80083b0:	2304      	movs	r3, #4
 80083b2:	75fb      	strb	r3, [r7, #23]
        break;
 80083b4:	e011      	b.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80083b6:	78fb      	ldrb	r3, [r7, #3]
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d102      	bne.n	80083c2 <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80083bc:	2304      	movs	r3, #4
 80083be:	75fb      	strb	r3, [r7, #23]
        break;
 80083c0:	e00b      	b.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 80083c2:	78fb      	ldrb	r3, [r7, #3]
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d102      	bne.n	80083ce <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80083c8:	2304      	movs	r3, #4
 80083ca:	75fb      	strb	r3, [r7, #23]
        break;
 80083cc:	e005      	b.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	75fb      	strb	r3, [r7, #23]
        break;
 80083d2:	e002      	b.n	80083da <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 80083d4:	78fb      	ldrb	r3, [r7, #3]
 80083d6:	75fb      	strb	r3, [r7, #23]
        break;
 80083d8:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80083da:	f107 0208 	add.w	r2, r7, #8
 80083de:	2301      	movs	r3, #1
 80083e0:	2110      	movs	r1, #16
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff fe92 	bl	800810c <lsm6dso_read_reg>
 80083e8:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	7a3b      	ldrb	r3, [r7, #8]
 80083f4:	f362 1307 	bfi	r3, r2, #4, #4
 80083f8:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80083fa:	f107 0208 	add.w	r2, r7, #8
 80083fe:	2301      	movs	r3, #1
 8008400:	2110      	movs	r1, #16
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7ff fe9a 	bl	800813c <lsm6dso_write_reg>
 8008408:	4602      	mov	r2, r0
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	4413      	add	r3, r2
 800840e:	613b      	str	r3, [r7, #16]

  return ret;
 8008410:	693b      	ldr	r3, [r7, #16]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3718      	adds	r7, #24
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop

0800841c <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008426:	f107 0208 	add.w	r2, r7, #8
 800842a:	2301      	movs	r3, #1
 800842c:	2110      	movs	r1, #16
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7ff fe6c 	bl	800810c <lsm6dso_read_reg>
 8008434:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8008436:	7a3b      	ldrb	r3, [r7, #8]
 8008438:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b0b      	cmp	r3, #11
 8008440:	d84a      	bhi.n	80084d8 <lsm6dso_xl_data_rate_get+0xbc>
 8008442:	a201      	add	r2, pc, #4	@ (adr r2, 8008448 <lsm6dso_xl_data_rate_get+0x2c>)
 8008444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008448:	08008479 	.word	0x08008479
 800844c:	08008481 	.word	0x08008481
 8008450:	08008489 	.word	0x08008489
 8008454:	08008491 	.word	0x08008491
 8008458:	08008499 	.word	0x08008499
 800845c:	080084a1 	.word	0x080084a1
 8008460:	080084a9 	.word	0x080084a9
 8008464:	080084b1 	.word	0x080084b1
 8008468:	080084b9 	.word	0x080084b9
 800846c:	080084c1 	.word	0x080084c1
 8008470:	080084c9 	.word	0x080084c9
 8008474:	080084d1 	.word	0x080084d1
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2200      	movs	r2, #0
 800847c:	701a      	strb	r2, [r3, #0]
      break;
 800847e:	e02f      	b.n	80084e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2201      	movs	r2, #1
 8008484:	701a      	strb	r2, [r3, #0]
      break;
 8008486:	e02b      	b.n	80084e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2202      	movs	r2, #2
 800848c:	701a      	strb	r2, [r3, #0]
      break;
 800848e:	e027      	b.n	80084e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2203      	movs	r2, #3
 8008494:	701a      	strb	r2, [r3, #0]
      break;
 8008496:	e023      	b.n	80084e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2204      	movs	r2, #4
 800849c:	701a      	strb	r2, [r3, #0]
      break;
 800849e:	e01f      	b.n	80084e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2205      	movs	r2, #5
 80084a4:	701a      	strb	r2, [r3, #0]
      break;
 80084a6:	e01b      	b.n	80084e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2206      	movs	r2, #6
 80084ac:	701a      	strb	r2, [r3, #0]
      break;
 80084ae:	e017      	b.n	80084e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2207      	movs	r2, #7
 80084b4:	701a      	strb	r2, [r3, #0]
      break;
 80084b6:	e013      	b.n	80084e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	2208      	movs	r2, #8
 80084bc:	701a      	strb	r2, [r3, #0]
      break;
 80084be:	e00f      	b.n	80084e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2209      	movs	r2, #9
 80084c4:	701a      	strb	r2, [r3, #0]
      break;
 80084c6:	e00b      	b.n	80084e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	220a      	movs	r2, #10
 80084cc:	701a      	strb	r2, [r3, #0]
      break;
 80084ce:	e007      	b.n	80084e0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	220b      	movs	r2, #11
 80084d4:	701a      	strb	r2, [r3, #0]
      break;
 80084d6:	e003      	b.n	80084e0 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2200      	movs	r2, #0
 80084dc:	701a      	strb	r2, [r3, #0]
      break;
 80084de:	bf00      	nop
  }

  return ret;
 80084e0:	68fb      	ldr	r3, [r7, #12]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop

080084ec <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80084f8:	f107 0208 	add.w	r2, r7, #8
 80084fc:	2301      	movs	r3, #1
 80084fe:	2111      	movs	r1, #17
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7ff fe03 	bl	800810c <lsm6dso_read_reg>
 8008506:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10f      	bne.n	800852e <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	f003 0307 	and.w	r3, r3, #7
 8008514:	b2da      	uxtb	r2, r3
 8008516:	7a3b      	ldrb	r3, [r7, #8]
 8008518:	f362 0343 	bfi	r3, r2, #1, #3
 800851c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800851e:	f107 0208 	add.w	r2, r7, #8
 8008522:	2301      	movs	r3, #1
 8008524:	2111      	movs	r1, #17
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff fe08 	bl	800813c <lsm6dso_write_reg>
 800852c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800852e:	68fb      	ldr	r3, [r7, #12]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008542:	f107 0208 	add.w	r2, r7, #8
 8008546:	2301      	movs	r3, #1
 8008548:	2111      	movs	r1, #17
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7ff fdde 	bl	800810c <lsm6dso_read_reg>
 8008550:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8008552:	7a3b      	ldrb	r3, [r7, #8]
 8008554:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b06      	cmp	r3, #6
 800855c:	d824      	bhi.n	80085a8 <lsm6dso_gy_full_scale_get+0x70>
 800855e:	a201      	add	r2, pc, #4	@ (adr r2, 8008564 <lsm6dso_gy_full_scale_get+0x2c>)
 8008560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008564:	08008581 	.word	0x08008581
 8008568:	08008589 	.word	0x08008589
 800856c:	08008591 	.word	0x08008591
 8008570:	080085a9 	.word	0x080085a9
 8008574:	08008599 	.word	0x08008599
 8008578:	080085a9 	.word	0x080085a9
 800857c:	080085a1 	.word	0x080085a1
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2200      	movs	r2, #0
 8008584:	701a      	strb	r2, [r3, #0]
      break;
 8008586:	e013      	b.n	80085b0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2201      	movs	r2, #1
 800858c:	701a      	strb	r2, [r3, #0]
      break;
 800858e:	e00f      	b.n	80085b0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2202      	movs	r2, #2
 8008594:	701a      	strb	r2, [r3, #0]
      break;
 8008596:	e00b      	b.n	80085b0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2204      	movs	r2, #4
 800859c:	701a      	strb	r2, [r3, #0]
      break;
 800859e:	e007      	b.n	80085b0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2206      	movs	r2, #6
 80085a4:	701a      	strb	r2, [r3, #0]
      break;
 80085a6:	e003      	b.n	80085b0 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2200      	movs	r2, #0
 80085ac:	701a      	strb	r2, [r3, #0]
      break;
 80085ae:	bf00      	nop
  }

  return ret;
 80085b0:	68fb      	ldr	r3, [r7, #12]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop

080085bc <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 80085c8:	78fb      	ldrb	r3, [r7, #3]
 80085ca:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80085cc:	f107 030c 	add.w	r3, r7, #12
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 faec 	bl	8008bb0 <lsm6dso_fsm_enable_get>
 80085d8:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <lsm6dso_gy_data_rate_set+0x28>
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	e0e0      	b.n	80087a6 <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80085e4:	7b3b      	ldrb	r3, [r7, #12]
 80085e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80085ea:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80085ec:	7b3b      	ldrb	r3, [r7, #12]
 80085ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80085f2:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80085f4:	4313      	orrs	r3, r2
 80085f6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80085f8:	7b3b      	ldrb	r3, [r7, #12]
 80085fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80085fe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8008600:	4313      	orrs	r3, r2
 8008602:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008604:	7b3b      	ldrb	r3, [r7, #12]
 8008606:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800860a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800860c:	4313      	orrs	r3, r2
 800860e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8008610:	7b3b      	ldrb	r3, [r7, #12]
 8008612:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008616:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008618:	4313      	orrs	r3, r2
 800861a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800861c:	7b3b      	ldrb	r3, [r7, #12]
 800861e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008622:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8008624:	4313      	orrs	r3, r2
 8008626:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8008628:	7b3b      	ldrb	r3, [r7, #12]
 800862a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800862e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8008630:	4313      	orrs	r3, r2
 8008632:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8008634:	7b3b      	ldrb	r3, [r7, #12]
 8008636:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800863a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800863c:	4313      	orrs	r3, r2
 800863e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8008640:	7b7b      	ldrb	r3, [r7, #13]
 8008642:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008646:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8008648:	4313      	orrs	r3, r2
 800864a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800864c:	7b7b      	ldrb	r3, [r7, #13]
 800864e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008652:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8008654:	4313      	orrs	r3, r2
 8008656:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8008658:	7b7b      	ldrb	r3, [r7, #13]
 800865a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800865e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8008660:	4313      	orrs	r3, r2
 8008662:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8008664:	7b7b      	ldrb	r3, [r7, #13]
 8008666:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800866a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800866c:	4313      	orrs	r3, r2
 800866e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8008670:	7b7b      	ldrb	r3, [r7, #13]
 8008672:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008676:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8008678:	4313      	orrs	r3, r2
 800867a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800867c:	7b7b      	ldrb	r3, [r7, #13]
 800867e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008682:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8008684:	4313      	orrs	r3, r2
 8008686:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8008688:	7b7b      	ldrb	r3, [r7, #13]
 800868a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800868e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8008690:	4313      	orrs	r3, r2
 8008692:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8008694:	7b7b      	ldrb	r3, [r7, #13]
 8008696:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800869a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800869c:	4313      	orrs	r3, r2
 800869e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d164      	bne.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80086a4:	f107 030b 	add.w	r3, r7, #11
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 faa2 	bl	8008bf4 <lsm6dso_fsm_data_rate_get>
 80086b0:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <lsm6dso_gy_data_rate_set+0x100>
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	e074      	b.n	80087a6 <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 80086bc:	7afb      	ldrb	r3, [r7, #11]
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d852      	bhi.n	8008768 <lsm6dso_gy_data_rate_set+0x1ac>
 80086c2:	a201      	add	r2, pc, #4	@ (adr r2, 80086c8 <lsm6dso_gy_data_rate_set+0x10c>)
 80086c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c8:	080086d9 	.word	0x080086d9
 80086cc:	080086eb 	.word	0x080086eb
 80086d0:	08008709 	.word	0x08008709
 80086d4:	08008733 	.word	0x08008733
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d102      	bne.n	80086e4 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80086de:	2301      	movs	r3, #1
 80086e0:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80086e2:	e044      	b.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80086e4:	78fb      	ldrb	r3, [r7, #3]
 80086e6:	75fb      	strb	r3, [r7, #23]
        break;
 80086e8:	e041      	b.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80086ea:	78fb      	ldrb	r3, [r7, #3]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80086f0:	2302      	movs	r3, #2
 80086f2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80086f4:	e03b      	b.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d102      	bne.n	8008702 <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80086fc:	2302      	movs	r3, #2
 80086fe:	75fb      	strb	r3, [r7, #23]
        break;
 8008700:	e035      	b.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	75fb      	strb	r3, [r7, #23]
        break;
 8008706:	e032      	b.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8008708:	78fb      	ldrb	r3, [r7, #3]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d102      	bne.n	8008714 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800870e:	2303      	movs	r3, #3
 8008710:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8008712:	e02c      	b.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d102      	bne.n	8008720 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800871a:	2303      	movs	r3, #3
 800871c:	75fb      	strb	r3, [r7, #23]
        break;
 800871e:	e026      	b.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d102      	bne.n	800872c <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008726:	2303      	movs	r3, #3
 8008728:	75fb      	strb	r3, [r7, #23]
        break;
 800872a:	e020      	b.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800872c:	78fb      	ldrb	r3, [r7, #3]
 800872e:	75fb      	strb	r3, [r7, #23]
        break;
 8008730:	e01d      	b.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8008732:	78fb      	ldrb	r3, [r7, #3]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d102      	bne.n	800873e <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008738:	2304      	movs	r3, #4
 800873a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800873c:	e017      	b.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800873e:	78fb      	ldrb	r3, [r7, #3]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d102      	bne.n	800874a <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008744:	2304      	movs	r3, #4
 8008746:	75fb      	strb	r3, [r7, #23]
        break;
 8008748:	e011      	b.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 800874a:	78fb      	ldrb	r3, [r7, #3]
 800874c:	2b02      	cmp	r3, #2
 800874e:	d102      	bne.n	8008756 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008750:	2304      	movs	r3, #4
 8008752:	75fb      	strb	r3, [r7, #23]
        break;
 8008754:	e00b      	b.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8008756:	78fb      	ldrb	r3, [r7, #3]
 8008758:	2b03      	cmp	r3, #3
 800875a:	d102      	bne.n	8008762 <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800875c:	2304      	movs	r3, #4
 800875e:	75fb      	strb	r3, [r7, #23]
        break;
 8008760:	e005      	b.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8008762:	78fb      	ldrb	r3, [r7, #3]
 8008764:	75fb      	strb	r3, [r7, #23]
        break;
 8008766:	e002      	b.n	800876e <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	75fb      	strb	r3, [r7, #23]
        break;
 800876c:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800876e:	f107 0208 	add.w	r2, r7, #8
 8008772:	2301      	movs	r3, #1
 8008774:	2111      	movs	r1, #17
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7ff fcc8 	bl	800810c <lsm6dso_read_reg>
 800877c:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	f003 030f 	and.w	r3, r3, #15
 8008784:	b2da      	uxtb	r2, r3
 8008786:	7a3b      	ldrb	r3, [r7, #8]
 8008788:	f362 1307 	bfi	r3, r2, #4, #4
 800878c:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800878e:	f107 0208 	add.w	r2, r7, #8
 8008792:	2301      	movs	r3, #1
 8008794:	2111      	movs	r1, #17
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7ff fcd0 	bl	800813c <lsm6dso_write_reg>
 800879c:	4602      	mov	r2, r0
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	4413      	add	r3, r2
 80087a2:	613b      	str	r3, [r7, #16]

  return ret;
 80087a4:	693b      	ldr	r3, [r7, #16]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3718      	adds	r7, #24
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop

080087b0 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80087ba:	f107 0208 	add.w	r2, r7, #8
 80087be:	2301      	movs	r3, #1
 80087c0:	2111      	movs	r1, #17
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff fca2 	bl	800810c <lsm6dso_read_reg>
 80087c8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80087ca:	7a3b      	ldrb	r3, [r7, #8]
 80087cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b0a      	cmp	r3, #10
 80087d4:	d844      	bhi.n	8008860 <lsm6dso_gy_data_rate_get+0xb0>
 80087d6:	a201      	add	r2, pc, #4	@ (adr r2, 80087dc <lsm6dso_gy_data_rate_get+0x2c>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	08008809 	.word	0x08008809
 80087e0:	08008811 	.word	0x08008811
 80087e4:	08008819 	.word	0x08008819
 80087e8:	08008821 	.word	0x08008821
 80087ec:	08008829 	.word	0x08008829
 80087f0:	08008831 	.word	0x08008831
 80087f4:	08008839 	.word	0x08008839
 80087f8:	08008841 	.word	0x08008841
 80087fc:	08008849 	.word	0x08008849
 8008800:	08008851 	.word	0x08008851
 8008804:	08008859 	.word	0x08008859
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2200      	movs	r2, #0
 800880c:	701a      	strb	r2, [r3, #0]
      break;
 800880e:	e02b      	b.n	8008868 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2201      	movs	r2, #1
 8008814:	701a      	strb	r2, [r3, #0]
      break;
 8008816:	e027      	b.n	8008868 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2202      	movs	r2, #2
 800881c:	701a      	strb	r2, [r3, #0]
      break;
 800881e:	e023      	b.n	8008868 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2203      	movs	r2, #3
 8008824:	701a      	strb	r2, [r3, #0]
      break;
 8008826:	e01f      	b.n	8008868 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2204      	movs	r2, #4
 800882c:	701a      	strb	r2, [r3, #0]
      break;
 800882e:	e01b      	b.n	8008868 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2205      	movs	r2, #5
 8008834:	701a      	strb	r2, [r3, #0]
      break;
 8008836:	e017      	b.n	8008868 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	2206      	movs	r2, #6
 800883c:	701a      	strb	r2, [r3, #0]
      break;
 800883e:	e013      	b.n	8008868 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2207      	movs	r2, #7
 8008844:	701a      	strb	r2, [r3, #0]
      break;
 8008846:	e00f      	b.n	8008868 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	2208      	movs	r2, #8
 800884c:	701a      	strb	r2, [r3, #0]
      break;
 800884e:	e00b      	b.n	8008868 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	2209      	movs	r2, #9
 8008854:	701a      	strb	r2, [r3, #0]
      break;
 8008856:	e007      	b.n	8008868 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	220a      	movs	r2, #10
 800885c:	701a      	strb	r2, [r3, #0]
      break;
 800885e:	e003      	b.n	8008868 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	2200      	movs	r2, #0
 8008864:	701a      	strb	r2, [r3, #0]
      break;
 8008866:	bf00      	nop
  }

  return ret;
 8008868:	68fb      	ldr	r3, [r7, #12]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop

08008874 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008880:	f107 0208 	add.w	r2, r7, #8
 8008884:	2301      	movs	r3, #1
 8008886:	2112      	movs	r1, #18
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff fc3f 	bl	800810c <lsm6dso_read_reg>
 800888e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10f      	bne.n	80088b6 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8008896:	78fb      	ldrb	r3, [r7, #3]
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	b2da      	uxtb	r2, r3
 800889e:	7a3b      	ldrb	r3, [r7, #8]
 80088a0:	f362 1386 	bfi	r3, r2, #6, #1
 80088a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80088a6:	f107 0208 	add.w	r2, r7, #8
 80088aa:	2301      	movs	r3, #1
 80088ac:	2112      	movs	r1, #18
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7ff fc44 	bl	800813c <lsm6dso_write_reg>
 80088b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80088b6:	68fb      	ldr	r3, [r7, #12]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80088ca:	f107 020c 	add.w	r2, r7, #12
 80088ce:	2306      	movs	r3, #6
 80088d0:	2122      	movs	r1, #34	@ 0x22
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7ff fc1a 	bl	800810c <lsm6dso_read_reg>
 80088d8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80088da:	7b7b      	ldrb	r3, [r7, #13]
 80088dc:	b21a      	sxth	r2, r3
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	021b      	lsls	r3, r3, #8
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	7b3a      	ldrb	r2, [r7, #12]
 80088f0:	4413      	add	r3, r2
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	b21a      	sxth	r2, r3
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80088fa:	7bfa      	ldrb	r2, [r7, #15]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	3302      	adds	r3, #2
 8008900:	b212      	sxth	r2, r2
 8008902:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	3302      	adds	r3, #2
 8008908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800890c:	b29b      	uxth	r3, r3
 800890e:	021b      	lsls	r3, r3, #8
 8008910:	b29b      	uxth	r3, r3
 8008912:	7bba      	ldrb	r2, [r7, #14]
 8008914:	4413      	add	r3, r2
 8008916:	b29a      	uxth	r2, r3
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	3302      	adds	r3, #2
 800891c:	b212      	sxth	r2, r2
 800891e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008920:	7c7a      	ldrb	r2, [r7, #17]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	3304      	adds	r3, #4
 8008926:	b212      	sxth	r2, r2
 8008928:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	3304      	adds	r3, #4
 800892e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008932:	b29b      	uxth	r3, r3
 8008934:	021b      	lsls	r3, r3, #8
 8008936:	b29b      	uxth	r3, r3
 8008938:	7c3a      	ldrb	r2, [r7, #16]
 800893a:	4413      	add	r3, r2
 800893c:	b29a      	uxth	r2, r3
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	3304      	adds	r3, #4
 8008942:	b212      	sxth	r2, r2
 8008944:	801a      	strh	r2, [r3, #0]

  return ret;
 8008946:	697b      	ldr	r3, [r7, #20]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3718      	adds	r7, #24
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 800895a:	f107 020c 	add.w	r2, r7, #12
 800895e:	2306      	movs	r3, #6
 8008960:	2128      	movs	r1, #40	@ 0x28
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff fbd2 	bl	800810c <lsm6dso_read_reg>
 8008968:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800896a:	7b7b      	ldrb	r3, [r7, #13]
 800896c:	b21a      	sxth	r2, r3
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008978:	b29b      	uxth	r3, r3
 800897a:	021b      	lsls	r3, r3, #8
 800897c:	b29b      	uxth	r3, r3
 800897e:	7b3a      	ldrb	r2, [r7, #12]
 8008980:	4413      	add	r3, r2
 8008982:	b29b      	uxth	r3, r3
 8008984:	b21a      	sxth	r2, r3
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800898a:	7bfa      	ldrb	r2, [r7, #15]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	3302      	adds	r3, #2
 8008990:	b212      	sxth	r2, r2
 8008992:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	3302      	adds	r3, #2
 8008998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800899c:	b29b      	uxth	r3, r3
 800899e:	021b      	lsls	r3, r3, #8
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	7bba      	ldrb	r2, [r7, #14]
 80089a4:	4413      	add	r3, r2
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	3302      	adds	r3, #2
 80089ac:	b212      	sxth	r2, r2
 80089ae:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80089b0:	7c7a      	ldrb	r2, [r7, #17]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	3304      	adds	r3, #4
 80089b6:	b212      	sxth	r2, r2
 80089b8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	3304      	adds	r3, #4
 80089be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	021b      	lsls	r3, r3, #8
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	7c3a      	ldrb	r2, [r7, #16]
 80089ca:	4413      	add	r3, r2
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	3304      	adds	r3, #4
 80089d2:	b212      	sxth	r2, r2
 80089d4:	801a      	strh	r2, [r3, #0]

  return ret;
 80089d6:	697b      	ldr	r3, [r7, #20]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 80089ec:	2300      	movs	r3, #0
 80089ee:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	7a3b      	ldrb	r3, [r7, #8]
 80089fa:	f362 1387 	bfi	r3, r2, #6, #2
 80089fe:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8008a00:	f107 0208 	add.w	r2, r7, #8
 8008a04:	2301      	movs	r3, #1
 8008a06:	2101      	movs	r1, #1
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff fb97 	bl	800813c <lsm6dso_write_reg>
 8008a0e:	60f8      	str	r0, [r7, #12]

  return ret;
 8008a10:	68fb      	ldr	r3, [r7, #12]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8008a24:	2301      	movs	r3, #1
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	210f      	movs	r1, #15
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7ff fb6e 	bl	800810c <lsm6dso_read_reg>
 8008a30:	60f8      	str	r0, [r7, #12]

  return ret;
 8008a32:	68fb      	ldr	r3, [r7, #12]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008a48:	f107 0208 	add.w	r2, r7, #8
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	2112      	movs	r1, #18
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7ff fb5b 	bl	800810c <lsm6dso_read_reg>
 8008a56:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10f      	bne.n	8008a7e <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8008a5e:	78fb      	ldrb	r3, [r7, #3]
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	7a3b      	ldrb	r3, [r7, #8]
 8008a68:	f362 0382 	bfi	r3, r2, #2, #1
 8008a6c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008a6e:	f107 0208 	add.w	r2, r7, #8
 8008a72:	2301      	movs	r3, #1
 8008a74:	2112      	movs	r1, #18
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff fb60 	bl	800813c <lsm6dso_write_reg>
 8008a7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8008a94:	f107 020c 	add.w	r2, r7, #12
 8008a98:	2301      	movs	r3, #1
 8008a9a:	2118      	movs	r1, #24
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff fb35 	bl	800810c <lsm6dso_read_reg>
 8008aa2:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8008aa4:	78fb      	ldrb	r3, [r7, #3]
 8008aa6:	09db      	lsrs	r3, r3, #7
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	7b3b      	ldrb	r3, [r7, #12]
 8008ab2:	f362 0341 	bfi	r3, r2, #1, #1
 8008ab6:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8008ab8:	f107 020c 	add.w	r2, r7, #12
 8008abc:	2301      	movs	r3, #1
 8008abe:	2118      	movs	r1, #24
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff fb3b 	bl	800813c <lsm6dso_write_reg>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	4413      	add	r3, r2
 8008acc:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <lsm6dso_i3c_disable_set+0x50>
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	e01b      	b.n	8008b10 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8008ad8:	f107 0210 	add.w	r2, r7, #16
 8008adc:	2301      	movs	r3, #1
 8008ade:	2162      	movs	r1, #98	@ 0x62
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff fb13 	bl	800810c <lsm6dso_read_reg>
 8008ae6:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	f003 0303 	and.w	r3, r3, #3
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	7c3b      	ldrb	r3, [r7, #16]
 8008af2:	f362 03c4 	bfi	r3, r2, #3, #2
 8008af6:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8008af8:	f107 0210 	add.w	r2, r7, #16
 8008afc:	2301      	movs	r3, #1
 8008afe:	2162      	movs	r1, #98	@ 0x62
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff fb1b 	bl	800813c <lsm6dso_write_reg>
 8008b06:	4602      	mov	r2, r0
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	617b      	str	r3, [r7, #20]

  return ret;
 8008b0e:	697b      	ldr	r3, [r7, #20]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3718      	adds	r7, #24
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <lsm6dso_6d_threshold_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_6d_threshold_set(stmdev_ctx_t *ctx,
                                 lsm6dso_sixd_ths_t val)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  lsm6dso_tap_ths_6d_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t *)&reg, 1);
 8008b24:	f107 0208 	add.w	r2, r7, #8
 8008b28:	2301      	movs	r3, #1
 8008b2a:	2159      	movs	r1, #89	@ 0x59
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff faed 	bl	800810c <lsm6dso_read_reg>
 8008b32:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10f      	bne.n	8008b5a <lsm6dso_6d_threshold_set+0x42>
  {
    reg.sixd_ths = (uint8_t)val;
 8008b3a:	78fb      	ldrb	r3, [r7, #3]
 8008b3c:	f003 0303 	and.w	r3, r3, #3
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	7a3b      	ldrb	r3, [r7, #8]
 8008b44:	f362 1346 	bfi	r3, r2, #5, #2
 8008b48:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t *)&reg, 1);
 8008b4a:	f107 0208 	add.w	r2, r7, #8
 8008b4e:	2301      	movs	r3, #1
 8008b50:	2159      	movs	r1, #89	@ 0x59
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7ff faf2 	bl	800813c <lsm6dso_write_reg>
 8008b58:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8008b70:	f107 0208 	add.w	r2, r7, #8
 8008b74:	2301      	movs	r3, #1
 8008b76:	210a      	movs	r1, #10
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7ff fac7 	bl	800810c <lsm6dso_read_reg>
 8008b7e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10f      	bne.n	8008ba6 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8008b86:	78fb      	ldrb	r3, [r7, #3]
 8008b88:	f003 0307 	and.w	r3, r3, #7
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	7a3b      	ldrb	r3, [r7, #8]
 8008b90:	f362 0302 	bfi	r3, r2, #0, #3
 8008b94:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8008b96:	f107 0208 	add.w	r2, r7, #8
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	210a      	movs	r1, #10
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff facc 	bl	800813c <lsm6dso_write_reg>
 8008ba4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8008bba:	2102      	movs	r1, #2
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff ff0f 	bl	80089e0 <lsm6dso_mem_bank_set>
 8008bc2:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	2146      	movs	r1, #70	@ 0x46
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7ff fa9e 	bl	800810c <lsm6dso_read_reg>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008bd8:	2100      	movs	r1, #0
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7ff ff00 	bl	80089e0 <lsm6dso_mem_bank_set>
 8008be0:	4602      	mov	r2, r0
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	4413      	add	r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]

  return ret;
 8008be8:	68fb      	ldr	r3, [r7, #12]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8008bfe:	2102      	movs	r1, #2
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff feed 	bl	80089e0 <lsm6dso_mem_bank_set>
 8008c06:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <lsm6dso_fsm_data_rate_get+0x1e>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	e03a      	b.n	8008c88 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8008c12:	f107 0208 	add.w	r2, r7, #8
 8008c16:	2301      	movs	r3, #1
 8008c18:	215f      	movs	r1, #95	@ 0x5f
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7ff fa76 	bl	800810c <lsm6dso_read_reg>
 8008c20:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d125      	bne.n	8008c74 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8008c28:	7a3b      	ldrb	r3, [r7, #8]
 8008c2a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	d81b      	bhi.n	8008c6c <lsm6dso_fsm_data_rate_get+0x78>
 8008c34:	a201      	add	r2, pc, #4	@ (adr r2, 8008c3c <lsm6dso_fsm_data_rate_get+0x48>)
 8008c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3a:	bf00      	nop
 8008c3c:	08008c4d 	.word	0x08008c4d
 8008c40:	08008c55 	.word	0x08008c55
 8008c44:	08008c5d 	.word	0x08008c5d
 8008c48:	08008c65 	.word	0x08008c65
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	701a      	strb	r2, [r3, #0]
      break;
 8008c52:	e010      	b.n	8008c76 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2201      	movs	r2, #1
 8008c58:	701a      	strb	r2, [r3, #0]
      break;
 8008c5a:	e00c      	b.n	8008c76 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	701a      	strb	r2, [r3, #0]
      break;
 8008c62:	e008      	b.n	8008c76 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2203      	movs	r2, #3
 8008c68:	701a      	strb	r2, [r3, #0]
      break;
 8008c6a:	e004      	b.n	8008c76 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	701a      	strb	r2, [r3, #0]
      break;
 8008c72:	e000      	b.n	8008c76 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8008c74:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008c76:	2100      	movs	r1, #0
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff feb1 	bl	80089e0 <lsm6dso_mem_bank_set>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4413      	add	r3, r2
 8008c84:	60fb      	str	r3, [r7, #12]

  return ret;
 8008c86:	68fb      	ldr	r3, [r7, #12]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <lsm6dso_pin_int1_route_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t val)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b090      	sub	sp, #64	@ 0x40
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	1d3b      	adds	r3, r7, #4
 8008c9a:	e883 0006 	stmia.w	r3, {r1, r2}
  lsm6dso_pin_int2_route_t  pin_int2_route;
  lsm6dso_emb_func_int1_t   emb_func_int1;
  lsm6dso_fsm_int1_a_t      fsm_int1_a;
  lsm6dso_fsm_int1_b_t      fsm_int1_b;
  lsm6dso_int1_ctrl_t       int1_ctrl = {0};
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  /* INT1_CTRL */
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8008ca4:	793b      	ldrb	r3, [r7, #4]
 8008ca6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008cb0:	f362 0300 	bfi	r3, r2, #0, #1
 8008cb4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 8008cb8:	793b      	ldrb	r3, [r7, #4]
 8008cba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008cc4:	f362 0341 	bfi	r3, r2, #1, #1
 8008cc8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_boot      = val.boot;
 8008ccc:	793b      	ldrb	r3, [r7, #4]
 8008cce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008cd8:	f362 0382 	bfi	r3, r2, #2, #1
 8008cdc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 8008ce0:	793b      	ldrb	r3, [r7, #4]
 8008ce2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008ce6:	b2da      	uxtb	r2, r3
 8008ce8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008cec:	f362 03c3 	bfi	r3, r2, #3, #1
 8008cf0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 8008cf4:	793b      	ldrb	r3, [r7, #4]
 8008cf6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d00:	f362 1304 	bfi	r3, r2, #4, #1
 8008d04:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_full = val.fifo_full;
 8008d08:	793b      	ldrb	r3, [r7, #4]
 8008d0a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d14:	f362 1345 	bfi	r3, r2, #5, #1
 8008d18:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 8008d1c:	793b      	ldrb	r3, [r7, #4]
 8008d1e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008d22:	b2da      	uxtb	r2, r3
 8008d24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d28:	f362 1386 	bfi	r3, r2, #6, #1
 8008d2c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.den_drdy_flag  = val.den_flag;
 8008d30:	797b      	ldrb	r3, [r7, #5]
 8008d32:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d3c:	f362 13c7 	bfi	r3, r2, #7, #1
 8008d40:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  ret = lsm6dso_write_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8008d44:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8008d48:	2301      	movs	r3, #1
 8008d4a:	210d      	movs	r1, #13
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f7ff f9f5 	bl	800813c <lsm6dso_write_reg>
 8008d52:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <lsm6dso_pin_int1_route_set+0xce>
 8008d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d5c:	e33a      	b.n	80093d4 <lsm6dso_pin_int1_route_set+0x744>

  /* DRDY for temperature and/or timestamp */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8008d5e:	f107 0210 	add.w	r2, r7, #16
 8008d62:	2301      	movs	r3, #1
 8008d64:	2113      	movs	r1, #19
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f7ff f9d0 	bl	800810c <lsm6dso_read_reg>
 8008d6c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <lsm6dso_pin_int1_route_set+0xe8>
 8008d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d76:	e32d      	b.n	80093d4 <lsm6dso_pin_int1_route_set+0x744>

  if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8008d78:	793b      	ldrb	r3, [r7, #4]
 8008d7a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	797b      	ldrb	r3, [r7, #5]
 8008d82:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d004      	beq.n	8008d9a <lsm6dso_pin_int1_route_set+0x10a>
  {
    ctrl4_c.int2_on_int1 = PROPERTY_ENABLE;
 8008d90:	7c3b      	ldrb	r3, [r7, #16]
 8008d92:	f043 0320 	orr.w	r3, r3, #32
 8008d96:	743b      	strb	r3, [r7, #16]
 8008d98:	e003      	b.n	8008da2 <lsm6dso_pin_int1_route_set+0x112>
  }
  else
  {
    ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8008d9a:	7c3b      	ldrb	r3, [r7, #16]
 8008d9c:	f36f 1345 	bfc	r3, #5, #1
 8008da0:	743b      	strb	r3, [r7, #16]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8008da2:	f107 0210 	add.w	r2, r7, #16
 8008da6:	2301      	movs	r3, #1
 8008da8:	2113      	movs	r1, #19
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7ff f9c6 	bl	800813c <lsm6dso_write_reg>
 8008db0:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <lsm6dso_pin_int1_route_set+0x12c>
 8008db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dba:	e30b      	b.n	80093d4 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8008dbc:	f107 0220 	add.w	r2, r7, #32
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	210e      	movs	r1, #14
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f7ff f9a1 	bl	800810c <lsm6dso_read_reg>
 8008dca:	63f8      	str	r0, [r7, #60]	@ 0x3c
  int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8008dcc:	793b      	ldrb	r3, [r7, #4]
 8008dce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008dd8:	f362 0382 	bfi	r3, r2, #2, #1
 8008ddc:	f887 3020 	strb.w	r3, [r7, #32]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8008de0:	f107 0220 	add.w	r2, r7, #32
 8008de4:	2301      	movs	r3, #1
 8008de6:	210e      	movs	r1, #14
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f7ff f9a7 	bl	800813c <lsm6dso_write_reg>
 8008dee:	4602      	mov	r2, r0
 8008df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008df2:	4413      	add	r3, r2
 8008df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <lsm6dso_pin_int1_route_set+0x170>
 8008dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dfe:	e2e9      	b.n	80093d4 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8008e00:	f107 0218 	add.w	r2, r7, #24
 8008e04:	2301      	movs	r3, #1
 8008e06:	215f      	movs	r1, #95	@ 0x5f
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f7ff f97f 	bl	800810c <lsm6dso_read_reg>
 8008e0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  md2_cfg.int2_timestamp = val.timestamp;
 8008e10:	797b      	ldrb	r3, [r7, #5]
 8008e12:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	7e3b      	ldrb	r3, [r7, #24]
 8008e1a:	f362 0300 	bfi	r3, r2, #0, #1
 8008e1e:	763b      	strb	r3, [r7, #24]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8008e20:	f107 0218 	add.w	r2, r7, #24
 8008e24:	2301      	movs	r3, #1
 8008e26:	215f      	movs	r1, #95	@ 0x5f
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f7ff f987 	bl	800813c <lsm6dso_write_reg>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e32:	4413      	add	r3, r2
 8008e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <lsm6dso_pin_int1_route_set+0x1b0>
 8008e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e3e:	e2c9      	b.n	80093d4 <lsm6dso_pin_int1_route_set+0x744>

  /* emmbedded and FSM events */
  emb_func_int1.not_used_01 = 0;
 8008e40:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008e44:	f36f 0302 	bfc	r3, #0, #3
 8008e48:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_step_detector = val.step_detector;
 8008e4c:	79bb      	ldrb	r3, [r7, #6]
 8008e4e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008e58:	f362 03c3 	bfi	r3, r2, #3, #1
 8008e5c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_tilt          = val.tilt;
 8008e60:	79bb      	ldrb	r3, [r7, #6]
 8008e62:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008e6c:	f362 1304 	bfi	r3, r2, #4, #1
 8008e70:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 8008e74:	79bb      	ldrb	r3, [r7, #6]
 8008e76:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008e80:	f362 1345 	bfi	r3, r2, #5, #1
 8008e84:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.not_used_02 = 0;
 8008e88:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008e8c:	f36f 1386 	bfc	r3, #6, #1
 8008e90:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 8008e94:	79bb      	ldrb	r3, [r7, #6]
 8008e96:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008ea0:	f362 13c7 	bfi	r3, r2, #7, #1
 8008ea4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8008ea8:	79bb      	ldrb	r3, [r7, #6]
 8008eaa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008eb4:	f362 0300 	bfi	r3, r2, #0, #1
 8008eb8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm2 = val.fsm2;
 8008ebc:	79bb      	ldrb	r3, [r7, #6]
 8008ebe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008ec2:	b2da      	uxtb	r2, r3
 8008ec4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008ec8:	f362 0341 	bfi	r3, r2, #1, #1
 8008ecc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm3 = val.fsm3;
 8008ed0:	79bb      	ldrb	r3, [r7, #6]
 8008ed2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008edc:	f362 0382 	bfi	r3, r2, #2, #1
 8008ee0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm4 = val.fsm4;
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008eea:	b2da      	uxtb	r2, r3
 8008eec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008ef0:	f362 03c3 	bfi	r3, r2, #3, #1
 8008ef4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm5 = val.fsm5;
 8008ef8:	79fb      	ldrb	r3, [r7, #7]
 8008efa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f04:	f362 1304 	bfi	r3, r2, #4, #1
 8008f08:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm6 = val.fsm6;
 8008f0c:	79fb      	ldrb	r3, [r7, #7]
 8008f0e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f18:	f362 1345 	bfi	r3, r2, #5, #1
 8008f1c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm7 = val.fsm7;
 8008f20:	79fb      	ldrb	r3, [r7, #7]
 8008f22:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008f26:	b2da      	uxtb	r2, r3
 8008f28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f2c:	f362 1386 	bfi	r3, r2, #6, #1
 8008f30:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm8 = val.fsm8;
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f40:	f362 13c7 	bfi	r3, r2, #7, #1
 8008f44:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008f4e:	b2da      	uxtb	r2, r3
 8008f50:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008f54:	f362 0300 	bfi	r3, r2, #0, #1
 8008f58:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm10 = val.fsm10;
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
 8008f5e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008f68:	f362 0341 	bfi	r3, r2, #1, #1
 8008f6c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm11 = val.fsm11;
 8008f70:	79fb      	ldrb	r3, [r7, #7]
 8008f72:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008f7c:	f362 0382 	bfi	r3, r2, #2, #1
 8008f80:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm12 = val.fsm12;
 8008f84:	7a3b      	ldrb	r3, [r7, #8]
 8008f86:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008f8a:	b2da      	uxtb	r2, r3
 8008f8c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008f90:	f362 03c3 	bfi	r3, r2, #3, #1
 8008f94:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm13 = val.fsm13;
 8008f98:	7a3b      	ldrb	r3, [r7, #8]
 8008f9a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fa4:	f362 1304 	bfi	r3, r2, #4, #1
 8008fa8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm14 = val.fsm14;
 8008fac:	7a3b      	ldrb	r3, [r7, #8]
 8008fae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fb8:	f362 1345 	bfi	r3, r2, #5, #1
 8008fbc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm15 = val.fsm15;
 8008fc0:	7a3b      	ldrb	r3, [r7, #8]
 8008fc2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fcc:	f362 1386 	bfi	r3, r2, #6, #1
 8008fd0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm16 = val.fsm16;
 8008fd4:	7a3b      	ldrb	r3, [r7, #8]
 8008fd6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fe0:	f362 13c7 	bfi	r3, r2, #7, #1
 8008fe4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8008fe8:	2102      	movs	r1, #2
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f7ff fcf8 	bl	80089e0 <lsm6dso_mem_bank_set>
 8008ff0:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <lsm6dso_pin_int1_route_set+0x36c>
 8008ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ffa:	e1eb      	b.n	80093d4 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 8008ffc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8009000:	2301      	movs	r3, #1
 8009002:	210a      	movs	r1, #10
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f7ff f899 	bl	800813c <lsm6dso_write_reg>
 800900a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 800900c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009010:	2301      	movs	r3, #1
 8009012:	210b      	movs	r1, #11
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f7ff f891 	bl	800813c <lsm6dso_write_reg>
 800901a:	4602      	mov	r2, r0
 800901c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800901e:	4413      	add	r3, r2
 8009020:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 8009022:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8009026:	2301      	movs	r3, #1
 8009028:	210c      	movs	r1, #12
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f7ff f886 	bl	800813c <lsm6dso_write_reg>
 8009030:	4602      	mov	r2, r0
 8009032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009034:	4413      	add	r3, r2
 8009036:	63fb      	str	r3, [r7, #60]	@ 0x3c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009038:	2100      	movs	r1, #0
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f7ff fcd0 	bl	80089e0 <lsm6dso_mem_bank_set>
 8009040:	4602      	mov	r2, r0
 8009042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009044:	4413      	add	r3, r2
 8009046:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8009048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <lsm6dso_pin_int1_route_set+0x3c2>
 800904e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009050:	e1c0      	b.n	80093d4 <lsm6dso_pin_int1_route_set+0x744>

  /* MD1_CFG */
  md1_cfg.int1_shub         = val.sh_endop;
 8009052:	797b      	ldrb	r3, [r7, #5]
 8009054:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009058:	b2da      	uxtb	r2, r3
 800905a:	7d3b      	ldrb	r3, [r7, #20]
 800905c:	f362 0300 	bfi	r3, r2, #0, #1
 8009060:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_6d           = val.six_d;
 8009062:	797b      	ldrb	r3, [r7, #5]
 8009064:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009068:	b2da      	uxtb	r2, r3
 800906a:	7d3b      	ldrb	r3, [r7, #20]
 800906c:	f362 0382 	bfi	r3, r2, #2, #1
 8009070:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_double_tap   = val.double_tap;
 8009072:	797b      	ldrb	r3, [r7, #5]
 8009074:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009078:	b2da      	uxtb	r2, r3
 800907a:	7d3b      	ldrb	r3, [r7, #20]
 800907c:	f362 03c3 	bfi	r3, r2, #3, #1
 8009080:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_ff           = val.free_fall;
 8009082:	797b      	ldrb	r3, [r7, #5]
 8009084:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009088:	b2da      	uxtb	r2, r3
 800908a:	7d3b      	ldrb	r3, [r7, #20]
 800908c:	f362 1304 	bfi	r3, r2, #4, #1
 8009090:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_wu           = val.wake_up;
 8009092:	797b      	ldrb	r3, [r7, #5]
 8009094:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009098:	b2da      	uxtb	r2, r3
 800909a:	7d3b      	ldrb	r3, [r7, #20]
 800909c:	f362 1345 	bfi	r3, r2, #5, #1
 80090a0:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_single_tap   = val.single_tap;
 80090a2:	797b      	ldrb	r3, [r7, #5]
 80090a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	7d3b      	ldrb	r3, [r7, #20]
 80090ac:	f362 1386 	bfi	r3, r2, #6, #1
 80090b0:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_sleep_change = val.sleep_change;
 80090b2:	79bb      	ldrb	r3, [r7, #6]
 80090b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	7d3b      	ldrb	r3, [r7, #20]
 80090bc:	f362 13c7 	bfi	r3, r2, #7, #1
 80090c0:	753b      	strb	r3, [r7, #20]

  if ((emb_func_int1.int1_fsm_lc
 80090c2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80090c6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80090ca:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_sig_mot
 80090cc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80090d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	4313      	orrs	r3, r2
 80090d8:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_step_detector
 80090da:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80090de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	4313      	orrs	r3, r2
 80090e6:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_tilt
 80090e8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80090ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	4313      	orrs	r3, r2
 80090f4:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm1
 80090f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80090fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	4313      	orrs	r3, r2
 8009102:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm2
 8009104:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009108:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800910c:	b2db      	uxtb	r3, r3
 800910e:	4313      	orrs	r3, r2
 8009110:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm3
 8009112:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009116:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800911a:	b2db      	uxtb	r3, r3
 800911c:	4313      	orrs	r3, r2
 800911e:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm4
 8009120:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009124:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009128:	b2db      	uxtb	r3, r3
 800912a:	4313      	orrs	r3, r2
 800912c:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm5
 800912e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009132:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009136:	b2db      	uxtb	r3, r3
 8009138:	4313      	orrs	r3, r2
 800913a:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm6
 800913c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009140:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009144:	b2db      	uxtb	r3, r3
 8009146:	4313      	orrs	r3, r2
 8009148:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm7
 800914a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800914e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009152:	b2db      	uxtb	r3, r3
 8009154:	4313      	orrs	r3, r2
 8009156:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm8
 8009158:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800915c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009160:	b2db      	uxtb	r3, r3
 8009162:	4313      	orrs	r3, r2
 8009164:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm9
 8009166:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800916a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800916e:	b2db      	uxtb	r3, r3
 8009170:	4313      	orrs	r3, r2
 8009172:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm10
 8009174:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009178:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800917c:	b2db      	uxtb	r3, r3
 800917e:	4313      	orrs	r3, r2
 8009180:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm11
 8009182:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009186:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800918a:	b2db      	uxtb	r3, r3
 800918c:	4313      	orrs	r3, r2
 800918e:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm12
 8009190:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009194:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009198:	b2db      	uxtb	r3, r3
 800919a:	4313      	orrs	r3, r2
 800919c:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm13
 800919e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	4313      	orrs	r3, r2
 80091aa:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm14
 80091ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	4313      	orrs	r3, r2
 80091b8:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm15
 80091ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091be:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	4313      	orrs	r3, r2
 80091c6:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 80091c8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	4313      	orrs	r3, r2
 80091d4:	b2db      	uxtb	r3, r3
  if ((emb_func_int1.int1_fsm_lc
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d004      	beq.n	80091e4 <lsm6dso_pin_int1_route_set+0x554>
  {
    md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 80091da:	7d3b      	ldrb	r3, [r7, #20]
 80091dc:	f043 0302 	orr.w	r3, r3, #2
 80091e0:	753b      	strb	r3, [r7, #20]
 80091e2:	e003      	b.n	80091ec <lsm6dso_pin_int1_route_set+0x55c>
  }
  else
  {
    md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 80091e4:	7d3b      	ldrb	r3, [r7, #20]
 80091e6:	f36f 0341 	bfc	r3, #1, #1
 80091ea:	753b      	strb	r3, [r7, #20]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80091ec:	f107 0214 	add.w	r2, r7, #20
 80091f0:	2301      	movs	r3, #1
 80091f2:	215e      	movs	r1, #94	@ 0x5e
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7fe ffa1 	bl	800813c <lsm6dso_write_reg>
 80091fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80091fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <lsm6dso_pin_int1_route_set+0x576>
 8009202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009204:	e0e6      	b.n	80093d4 <lsm6dso_pin_int1_route_set+0x744>

  /* set interrupts_enable = 1 in TAP_CFG2 if it is the case */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8009206:	f107 021c 	add.w	r2, r7, #28
 800920a:	2301      	movs	r3, #1
 800920c:	2158      	movs	r1, #88	@ 0x58
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f7fe ff7c 	bl	800810c <lsm6dso_read_reg>
 8009214:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_pin_int2_route_get(ctx, NULL, &pin_int2_route);
 8009216:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800921a:	461a      	mov	r2, r3
 800921c:	2100      	movs	r1, #0
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 fe3e 	bl	8009ea0 <lsm6dso_pin_int2_route_get>
 8009224:	4602      	mov	r2, r0
 8009226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009228:	4413      	add	r3, r2
 800922a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800922c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <lsm6dso_pin_int1_route_set+0x5a6>
 8009232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009234:	e0ce      	b.n	80093d4 <lsm6dso_pin_int1_route_set+0x744>

  if ((pin_int2_route.fifo_bdr
 8009236:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800923a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800923e:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_g
 8009240:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009244:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009248:	b2db      	uxtb	r3, r3
 800924a:	4313      	orrs	r3, r2
 800924c:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_temp
 800924e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009252:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009256:	b2db      	uxtb	r3, r3
 8009258:	4313      	orrs	r3, r2
 800925a:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_xl
 800925c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009260:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009264:	b2db      	uxtb	r3, r3
 8009266:	4313      	orrs	r3, r2
 8009268:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_full
 800926a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800926e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009272:	b2db      	uxtb	r3, r3
 8009274:	4313      	orrs	r3, r2
 8009276:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_ovr
 8009278:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800927c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009280:	b2db      	uxtb	r3, r3
 8009282:	4313      	orrs	r3, r2
 8009284:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_th
 8009286:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800928a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800928e:	b2db      	uxtb	r3, r3
 8009290:	4313      	orrs	r3, r2
 8009292:	b2da      	uxtb	r2, r3
       | pin_int2_route.six_d
 8009294:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009298:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800929c:	b2db      	uxtb	r3, r3
 800929e:	4313      	orrs	r3, r2
 80092a0:	b2da      	uxtb	r2, r3
       | pin_int2_route.double_tap
 80092a2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80092a6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	4313      	orrs	r3, r2
 80092ae:	b2da      	uxtb	r2, r3
       | pin_int2_route.free_fall
 80092b0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80092b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	4313      	orrs	r3, r2
 80092bc:	b2da      	uxtb	r2, r3
       | pin_int2_route.wake_up
 80092be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80092c2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	4313      	orrs	r3, r2
 80092ca:	b2da      	uxtb	r2, r3
       | pin_int2_route.single_tap
 80092cc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80092d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	4313      	orrs	r3, r2
 80092d8:	b2da      	uxtb	r2, r3
       | pin_int2_route.sleep_change
 80092da:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80092de:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	4313      	orrs	r3, r2
 80092e6:	b2da      	uxtb	r2, r3
       | int1_ctrl.den_drdy_flag
 80092e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80092ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	4313      	orrs	r3, r2
 80092f4:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_boot
 80092f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80092fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	4313      	orrs	r3, r2
 8009302:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_cnt_bdr
 8009304:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009308:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800930c:	b2db      	uxtb	r3, r3
 800930e:	4313      	orrs	r3, r2
 8009310:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_g
 8009312:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009316:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800931a:	b2db      	uxtb	r3, r3
 800931c:	4313      	orrs	r3, r2
 800931e:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_xl
 8009320:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009324:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009328:	b2db      	uxtb	r3, r3
 800932a:	4313      	orrs	r3, r2
 800932c:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_full
 800932e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009332:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009336:	b2db      	uxtb	r3, r3
 8009338:	4313      	orrs	r3, r2
 800933a:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_ovr
 800933c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009340:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009344:	b2db      	uxtb	r3, r3
 8009346:	4313      	orrs	r3, r2
 8009348:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_th
 800934a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800934e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009352:	b2db      	uxtb	r3, r3
 8009354:	4313      	orrs	r3, r2
 8009356:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_shub
 8009358:	7d3b      	ldrb	r3, [r7, #20]
 800935a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4313      	orrs	r3, r2
 8009362:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_6d
 8009364:	7d3b      	ldrb	r3, [r7, #20]
 8009366:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800936a:	b2db      	uxtb	r3, r3
 800936c:	4313      	orrs	r3, r2
 800936e:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_double_tap
 8009370:	7d3b      	ldrb	r3, [r7, #20]
 8009372:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009376:	b2db      	uxtb	r3, r3
 8009378:	4313      	orrs	r3, r2
 800937a:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_ff
 800937c:	7d3b      	ldrb	r3, [r7, #20]
 800937e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009382:	b2db      	uxtb	r3, r3
 8009384:	4313      	orrs	r3, r2
 8009386:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_wu
 8009388:	7d3b      	ldrb	r3, [r7, #20]
 800938a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800938e:	b2db      	uxtb	r3, r3
 8009390:	4313      	orrs	r3, r2
 8009392:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_single_tap
 8009394:	7d3b      	ldrb	r3, [r7, #20]
 8009396:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800939a:	b2db      	uxtb	r3, r3
 800939c:	4313      	orrs	r3, r2
 800939e:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 80093a0:	7d3b      	ldrb	r3, [r7, #20]
 80093a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	4313      	orrs	r3, r2
 80093aa:	b2db      	uxtb	r3, r3
  if ((pin_int2_route.fifo_bdr
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d004      	beq.n	80093ba <lsm6dso_pin_int1_route_set+0x72a>
  {
    tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 80093b0:	7f3b      	ldrb	r3, [r7, #28]
 80093b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093b6:	773b      	strb	r3, [r7, #28]
 80093b8:	e003      	b.n	80093c2 <lsm6dso_pin_int1_route_set+0x732>
  }
  else
  {
    tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 80093ba:	7f3b      	ldrb	r3, [r7, #28]
 80093bc:	f36f 13c7 	bfc	r3, #7, #1
 80093c0:	773b      	strb	r3, [r7, #28]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 80093c2:	f107 021c 	add.w	r2, r7, #28
 80093c6:	2301      	movs	r3, #1
 80093c8:	2158      	movs	r1, #88	@ 0x58
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f7fe feb6 	bl	800813c <lsm6dso_write_reg>
 80093d0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  return ret;
 80093d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3740      	adds	r7, #64	@ 0x40
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <lsm6dso_pin_int1_route_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t *val)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b08c      	sub	sp, #48	@ 0x30
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  lsm6dso_md2_cfg_t         md2_cfg;
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80093e6:	2102      	movs	r1, #2
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7ff faf9 	bl	80089e0 <lsm6dso_mem_bank_set>
 80093ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 80093f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <lsm6dso_pin_int1_route_get+0x1e>
 80093f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f8:	e1dc      	b.n	80097b4 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 80093fa:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80093fe:	2301      	movs	r3, #1
 8009400:	210a      	movs	r1, #10
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7fe fe82 	bl	800810c <lsm6dso_read_reg>
 8009408:	62f8      	str	r0, [r7, #44]	@ 0x2c
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 800940a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800940e:	2301      	movs	r3, #1
 8009410:	210b      	movs	r1, #11
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7fe fe7a 	bl	800810c <lsm6dso_read_reg>
 8009418:	4602      	mov	r2, r0
 800941a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800941c:	4413      	add	r3, r2
 800941e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 8009420:	f107 0220 	add.w	r2, r7, #32
 8009424:	2301      	movs	r3, #1
 8009426:	210c      	movs	r1, #12
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f7fe fe6f 	bl	800810c <lsm6dso_read_reg>
 800942e:	4602      	mov	r2, r0
 8009430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009432:	4413      	add	r3, r2
 8009434:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009436:	2100      	movs	r1, #0
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff fad1 	bl	80089e0 <lsm6dso_mem_bank_set>
 800943e:	4602      	mov	r2, r0
 8009440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009442:	4413      	add	r3, r2
 8009444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8009446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <lsm6dso_pin_int1_route_get+0x74>
 800944c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944e:	e1b1      	b.n	80097b4 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8009450:	f107 021c 	add.w	r2, r7, #28
 8009454:	2301      	movs	r3, #1
 8009456:	210d      	movs	r1, #13
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7fe fe57 	bl	800810c <lsm6dso_read_reg>
 800945e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8009460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <lsm6dso_pin_int1_route_get+0x8e>
 8009466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009468:	e1a4      	b.n	80097b4 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800946a:	f107 0210 	add.w	r2, r7, #16
 800946e:	2301      	movs	r3, #1
 8009470:	215e      	movs	r1, #94	@ 0x5e
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7fe fe4a 	bl	800810c <lsm6dso_read_reg>
 8009478:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 800947a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <lsm6dso_pin_int1_route_get+0xa8>
 8009480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009482:	e197      	b.n	80097b4 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8009484:	f107 020c 	add.w	r2, r7, #12
 8009488:	2301      	movs	r3, #1
 800948a:	2113      	movs	r1, #19
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7fe fe3d 	bl	800810c <lsm6dso_read_reg>
 8009492:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8009494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009496:	2b00      	cmp	r3, #0
 8009498:	d001      	beq.n	800949e <lsm6dso_pin_int1_route_get+0xc2>
 800949a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949c:	e18a      	b.n	80097b4 <lsm6dso_pin_int1_route_get+0x3d8>

  if (ctrl4_c.int2_on_int1 == PROPERTY_ENABLE)
 800949e:	7b3b      	ldrb	r3, [r7, #12]
 80094a0:	f003 0320 	and.w	r3, r3, #32
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d025      	beq.n	80094f6 <lsm6dso_pin_int1_route_get+0x11a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 80094aa:	f107 0218 	add.w	r2, r7, #24
 80094ae:	2301      	movs	r3, #1
 80094b0:	210e      	movs	r1, #14
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7fe fe2a 	bl	800810c <lsm6dso_read_reg>
 80094b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 80094ba:	7e3b      	ldrb	r3, [r7, #24]
 80094bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80094c0:	b2d9      	uxtb	r1, r3
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	7813      	ldrb	r3, [r2, #0]
 80094c6:	f361 0382 	bfi	r3, r1, #2, #1
 80094ca:	7013      	strb	r3, [r2, #0]

    ret += lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80094cc:	f107 0214 	add.w	r2, r7, #20
 80094d0:	2301      	movs	r3, #1
 80094d2:	215f      	movs	r1, #95	@ 0x5f
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7fe fe19 	bl	800810c <lsm6dso_read_reg>
 80094da:	4602      	mov	r2, r0
 80094dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094de:	4413      	add	r3, r2
 80094e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    val->timestamp = md2_cfg.int2_timestamp;
 80094e2:	7d3b      	ldrb	r3, [r7, #20]
 80094e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80094e8:	b2d9      	uxtb	r1, r3
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	7853      	ldrb	r3, [r2, #1]
 80094ee:	f361 0382 	bfi	r3, r1, #2, #1
 80094f2:	7053      	strb	r3, [r2, #1]
 80094f4:	e009      	b.n	800950a <lsm6dso_pin_int1_route_get+0x12e>
  }
  else
  {
    val->drdy_temp = PROPERTY_DISABLE;
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	7813      	ldrb	r3, [r2, #0]
 80094fa:	f36f 0382 	bfc	r3, #2, #1
 80094fe:	7013      	strb	r3, [r2, #0]
    val->timestamp = PROPERTY_DISABLE;
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	7853      	ldrb	r3, [r2, #1]
 8009504:	f36f 0382 	bfc	r3, #2, #1
 8009508:	7053      	strb	r3, [r2, #1]
  }
  if (ret != 0) { return ret; }
 800950a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800950c:	2b00      	cmp	r3, #0
 800950e:	d001      	beq.n	8009514 <lsm6dso_pin_int1_route_get+0x138>
 8009510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009512:	e14f      	b.n	80097b4 <lsm6dso_pin_int1_route_get+0x3d8>

  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8009514:	7f3b      	ldrb	r3, [r7, #28]
 8009516:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800951a:	b2d9      	uxtb	r1, r3
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	7813      	ldrb	r3, [r2, #0]
 8009520:	f361 0300 	bfi	r3, r1, #0, #1
 8009524:	7013      	strb	r3, [r2, #0]
  val->drdy_g    = int1_ctrl.int1_drdy_g;
 8009526:	7f3b      	ldrb	r3, [r7, #28]
 8009528:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800952c:	b2d9      	uxtb	r1, r3
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	7813      	ldrb	r3, [r2, #0]
 8009532:	f361 0341 	bfi	r3, r1, #1, #1
 8009536:	7013      	strb	r3, [r2, #0]
  val->boot      = int1_ctrl.int1_boot;
 8009538:	7f3b      	ldrb	r3, [r7, #28]
 800953a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800953e:	b2d9      	uxtb	r1, r3
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	7813      	ldrb	r3, [r2, #0]
 8009544:	f361 03c3 	bfi	r3, r1, #3, #1
 8009548:	7013      	strb	r3, [r2, #0]
  val->fifo_th   = int1_ctrl.int1_fifo_th;
 800954a:	7f3b      	ldrb	r3, [r7, #28]
 800954c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009550:	b2d9      	uxtb	r1, r3
 8009552:	683a      	ldr	r2, [r7, #0]
 8009554:	7813      	ldrb	r3, [r2, #0]
 8009556:	f361 1304 	bfi	r3, r1, #4, #1
 800955a:	7013      	strb	r3, [r2, #0]
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
 800955c:	7f3b      	ldrb	r3, [r7, #28]
 800955e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009562:	b2d9      	uxtb	r1, r3
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	7813      	ldrb	r3, [r2, #0]
 8009568:	f361 1345 	bfi	r3, r1, #5, #1
 800956c:	7013      	strb	r3, [r2, #0]
  val->fifo_full = int1_ctrl.int1_fifo_full;
 800956e:	7f3b      	ldrb	r3, [r7, #28]
 8009570:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009574:	b2d9      	uxtb	r1, r3
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	7813      	ldrb	r3, [r2, #0]
 800957a:	f361 1386 	bfi	r3, r1, #6, #1
 800957e:	7013      	strb	r3, [r2, #0]
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
 8009580:	7f3b      	ldrb	r3, [r7, #28]
 8009582:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009586:	b2d9      	uxtb	r1, r3
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	7813      	ldrb	r3, [r2, #0]
 800958c:	f361 13c7 	bfi	r3, r1, #7, #1
 8009590:	7013      	strb	r3, [r2, #0]
  val->den_flag  = int1_ctrl.den_drdy_flag;
 8009592:	7f3b      	ldrb	r3, [r7, #28]
 8009594:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009598:	b2d9      	uxtb	r1, r3
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	7853      	ldrb	r3, [r2, #1]
 800959e:	f361 0300 	bfi	r3, r1, #0, #1
 80095a2:	7053      	strb	r3, [r2, #1]
  val->sh_endop     = md1_cfg.int1_shub;
 80095a4:	7c3b      	ldrb	r3, [r7, #16]
 80095a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80095aa:	b2d9      	uxtb	r1, r3
 80095ac:	683a      	ldr	r2, [r7, #0]
 80095ae:	7853      	ldrb	r3, [r2, #1]
 80095b0:	f361 0341 	bfi	r3, r1, #1, #1
 80095b4:	7053      	strb	r3, [r2, #1]
  val->six_d        = md1_cfg.int1_6d;
 80095b6:	7c3b      	ldrb	r3, [r7, #16]
 80095b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80095bc:	b2d9      	uxtb	r1, r3
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	7853      	ldrb	r3, [r2, #1]
 80095c2:	f361 03c3 	bfi	r3, r1, #3, #1
 80095c6:	7053      	strb	r3, [r2, #1]
  val->double_tap   = md1_cfg.int1_double_tap;
 80095c8:	7c3b      	ldrb	r3, [r7, #16]
 80095ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80095ce:	b2d9      	uxtb	r1, r3
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	7853      	ldrb	r3, [r2, #1]
 80095d4:	f361 1304 	bfi	r3, r1, #4, #1
 80095d8:	7053      	strb	r3, [r2, #1]
  val->free_fall    = md1_cfg.int1_ff;
 80095da:	7c3b      	ldrb	r3, [r7, #16]
 80095dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80095e0:	b2d9      	uxtb	r1, r3
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	7853      	ldrb	r3, [r2, #1]
 80095e6:	f361 1345 	bfi	r3, r1, #5, #1
 80095ea:	7053      	strb	r3, [r2, #1]
  val->wake_up      = md1_cfg.int1_wu;
 80095ec:	7c3b      	ldrb	r3, [r7, #16]
 80095ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80095f2:	b2d9      	uxtb	r1, r3
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	7853      	ldrb	r3, [r2, #1]
 80095f8:	f361 1386 	bfi	r3, r1, #6, #1
 80095fc:	7053      	strb	r3, [r2, #1]
  val->single_tap   = md1_cfg.int1_single_tap;
 80095fe:	7c3b      	ldrb	r3, [r7, #16]
 8009600:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009604:	b2d9      	uxtb	r1, r3
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	7853      	ldrb	r3, [r2, #1]
 800960a:	f361 13c7 	bfi	r3, r1, #7, #1
 800960e:	7053      	strb	r3, [r2, #1]
  val->sleep_change = md1_cfg.int1_sleep_change;
 8009610:	7c3b      	ldrb	r3, [r7, #16]
 8009612:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009616:	b2d9      	uxtb	r1, r3
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	7893      	ldrb	r3, [r2, #2]
 800961c:	f361 0300 	bfi	r3, r1, #0, #1
 8009620:	7093      	strb	r3, [r2, #2]
  val->step_detector = emb_func_int1.int1_step_detector;
 8009622:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009626:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800962a:	b2d9      	uxtb	r1, r3
 800962c:	683a      	ldr	r2, [r7, #0]
 800962e:	7893      	ldrb	r3, [r2, #2]
 8009630:	f361 0341 	bfi	r3, r1, #1, #1
 8009634:	7093      	strb	r3, [r2, #2]
  val->tilt          = emb_func_int1.int1_tilt;
 8009636:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800963a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800963e:	b2d9      	uxtb	r1, r3
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	7893      	ldrb	r3, [r2, #2]
 8009644:	f361 0382 	bfi	r3, r1, #2, #1
 8009648:	7093      	strb	r3, [r2, #2]
  val->sig_mot       = emb_func_int1.int1_sig_mot;
 800964a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800964e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009652:	b2d9      	uxtb	r1, r3
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	7893      	ldrb	r3, [r2, #2]
 8009658:	f361 03c3 	bfi	r3, r1, #3, #1
 800965c:	7093      	strb	r3, [r2, #2]
  val->fsm_lc        = emb_func_int1.int1_fsm_lc;
 800965e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009662:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009666:	b2d9      	uxtb	r1, r3
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	7893      	ldrb	r3, [r2, #2]
 800966c:	f361 1304 	bfi	r3, r1, #4, #1
 8009670:	7093      	strb	r3, [r2, #2]
  val->fsm1 = fsm_int1_a.int1_fsm1;
 8009672:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009676:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800967a:	b2d9      	uxtb	r1, r3
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	7893      	ldrb	r3, [r2, #2]
 8009680:	f361 1345 	bfi	r3, r1, #5, #1
 8009684:	7093      	strb	r3, [r2, #2]
  val->fsm2 = fsm_int1_a.int1_fsm2;
 8009686:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800968a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800968e:	b2d9      	uxtb	r1, r3
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	7893      	ldrb	r3, [r2, #2]
 8009694:	f361 1386 	bfi	r3, r1, #6, #1
 8009698:	7093      	strb	r3, [r2, #2]
  val->fsm3 = fsm_int1_a.int1_fsm3;
 800969a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800969e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80096a2:	b2d9      	uxtb	r1, r3
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	7893      	ldrb	r3, [r2, #2]
 80096a8:	f361 13c7 	bfi	r3, r1, #7, #1
 80096ac:	7093      	strb	r3, [r2, #2]
  val->fsm4 = fsm_int1_a.int1_fsm4;
 80096ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80096b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80096b6:	b2d9      	uxtb	r1, r3
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	78d3      	ldrb	r3, [r2, #3]
 80096bc:	f361 0300 	bfi	r3, r1, #0, #1
 80096c0:	70d3      	strb	r3, [r2, #3]
  val->fsm5 = fsm_int1_a.int1_fsm5;
 80096c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80096c6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80096ca:	b2d9      	uxtb	r1, r3
 80096cc:	683a      	ldr	r2, [r7, #0]
 80096ce:	78d3      	ldrb	r3, [r2, #3]
 80096d0:	f361 0341 	bfi	r3, r1, #1, #1
 80096d4:	70d3      	strb	r3, [r2, #3]
  val->fsm6 = fsm_int1_a.int1_fsm6;
 80096d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80096da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80096de:	b2d9      	uxtb	r1, r3
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	78d3      	ldrb	r3, [r2, #3]
 80096e4:	f361 0382 	bfi	r3, r1, #2, #1
 80096e8:	70d3      	strb	r3, [r2, #3]
  val->fsm7 = fsm_int1_a.int1_fsm7;
 80096ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80096ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80096f2:	b2d9      	uxtb	r1, r3
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	78d3      	ldrb	r3, [r2, #3]
 80096f8:	f361 03c3 	bfi	r3, r1, #3, #1
 80096fc:	70d3      	strb	r3, [r2, #3]
  val->fsm8 = fsm_int1_a.int1_fsm8;
 80096fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009702:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009706:	b2d9      	uxtb	r1, r3
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	78d3      	ldrb	r3, [r2, #3]
 800970c:	f361 1304 	bfi	r3, r1, #4, #1
 8009710:	70d3      	strb	r3, [r2, #3]
  val->fsm9  = fsm_int1_b.int1_fsm9;
 8009712:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009716:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800971a:	b2d9      	uxtb	r1, r3
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	78d3      	ldrb	r3, [r2, #3]
 8009720:	f361 1345 	bfi	r3, r1, #5, #1
 8009724:	70d3      	strb	r3, [r2, #3]
  val->fsm10 = fsm_int1_b.int1_fsm10;
 8009726:	f897 3020 	ldrb.w	r3, [r7, #32]
 800972a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800972e:	b2d9      	uxtb	r1, r3
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	78d3      	ldrb	r3, [r2, #3]
 8009734:	f361 1386 	bfi	r3, r1, #6, #1
 8009738:	70d3      	strb	r3, [r2, #3]
  val->fsm11 = fsm_int1_b.int1_fsm11;
 800973a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800973e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009742:	b2d9      	uxtb	r1, r3
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	78d3      	ldrb	r3, [r2, #3]
 8009748:	f361 13c7 	bfi	r3, r1, #7, #1
 800974c:	70d3      	strb	r3, [r2, #3]
  val->fsm12 = fsm_int1_b.int1_fsm12;
 800974e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009752:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009756:	b2d9      	uxtb	r1, r3
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	7913      	ldrb	r3, [r2, #4]
 800975c:	f361 0300 	bfi	r3, r1, #0, #1
 8009760:	7113      	strb	r3, [r2, #4]
  val->fsm13 = fsm_int1_b.int1_fsm13;
 8009762:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009766:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800976a:	b2d9      	uxtb	r1, r3
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	7913      	ldrb	r3, [r2, #4]
 8009770:	f361 0341 	bfi	r3, r1, #1, #1
 8009774:	7113      	strb	r3, [r2, #4]
  val->fsm14 = fsm_int1_b.int1_fsm14;
 8009776:	f897 3020 	ldrb.w	r3, [r7, #32]
 800977a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800977e:	b2d9      	uxtb	r1, r3
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	7913      	ldrb	r3, [r2, #4]
 8009784:	f361 0382 	bfi	r3, r1, #2, #1
 8009788:	7113      	strb	r3, [r2, #4]
  val->fsm15 = fsm_int1_b.int1_fsm15;
 800978a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800978e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009792:	b2d9      	uxtb	r1, r3
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	7913      	ldrb	r3, [r2, #4]
 8009798:	f361 03c3 	bfi	r3, r1, #3, #1
 800979c:	7113      	strb	r3, [r2, #4]
  val->fsm16 = fsm_int1_b.int1_fsm16;
 800979e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80097a6:	b2d9      	uxtb	r1, r3
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	7913      	ldrb	r3, [r2, #4]
 80097ac:	f361 1304 	bfi	r3, r1, #4, #1
 80097b0:	7113      	strb	r3, [r2, #4]

  return ret;
 80097b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3730      	adds	r7, #48	@ 0x30
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <lsm6dso_pin_int2_route_set>:
  *
  */
int32_t lsm6dso_pin_int2_route_set(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t val)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b090      	sub	sp, #64	@ 0x40
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	4639      	mov	r1, r7
 80097c8:	e881 000c 	stmia.w	r1, {r2, r3}
  lsm6dso_tap_cfg2_t       tap_cfg2;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                  ret;
  ret = 0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (aux_ctx != NULL)
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d01f      	beq.n	8009816 <lsm6dso_pin_int2_route_set+0x5a>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS, (uint8_t *)&int_ois, 1);
 80097d6:	f107 0214 	add.w	r2, r7, #20
 80097da:	2301      	movs	r3, #1
 80097dc:	216f      	movs	r1, #111	@ 0x6f
 80097de:	68b8      	ldr	r0, [r7, #8]
 80097e0:	f7fe fc94 	bl	800810c <lsm6dso_read_reg>
 80097e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    int_ois.int2_drdy_ois = val.drdy_ois;
 80097e6:	783b      	ldrb	r3, [r7, #0]
 80097e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80097ec:	b2da      	uxtb	r2, r3
 80097ee:	7d3b      	ldrb	r3, [r7, #20]
 80097f0:	f362 13c7 	bfi	r3, r2, #7, #1
 80097f4:	753b      	strb	r3, [r7, #20]
    ret += lsm6dso_write_reg(aux_ctx, LSM6DSO_INT_OIS, (uint8_t *)&int_ois, 1);
 80097f6:	f107 0214 	add.w	r2, r7, #20
 80097fa:	2301      	movs	r3, #1
 80097fc:	216f      	movs	r1, #111	@ 0x6f
 80097fe:	68b8      	ldr	r0, [r7, #8]
 8009800:	f7fe fc9c 	bl	800813c <lsm6dso_write_reg>
 8009804:	4602      	mov	r2, r0
 8009806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009808:	4413      	add	r3, r2
 800980a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 800980c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <lsm6dso_pin_int2_route_set+0x5a>
 8009812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009814:	e340      	b.n	8009e98 <lsm6dso_pin_int2_route_set+0x6dc>
  }

  if (ctx != NULL)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 833c 	beq.w	8009e96 <lsm6dso_pin_int2_route_set+0x6da>
  {
    int2_ctrl.int2_drdy_xl   = val.drdy_xl;
 800981e:	783b      	ldrb	r3, [r7, #0]
 8009820:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009824:	b2da      	uxtb	r2, r3
 8009826:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800982a:	f362 0300 	bfi	r3, r2, #0, #1
 800982e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_drdy_g    = val.drdy_g;
 8009832:	783b      	ldrb	r3, [r7, #0]
 8009834:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009838:	b2da      	uxtb	r2, r3
 800983a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800983e:	f362 0341 	bfi	r3, r2, #1, #1
 8009842:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8009846:	783b      	ldrb	r3, [r7, #0]
 8009848:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800984c:	b2da      	uxtb	r2, r3
 800984e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009852:	f362 0382 	bfi	r3, r2, #2, #1
 8009856:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_th   = val.fifo_th;
 800985a:	783b      	ldrb	r3, [r7, #0]
 800985c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009860:	b2da      	uxtb	r2, r3
 8009862:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009866:	f362 03c3 	bfi	r3, r2, #3, #1
 800986a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_ovr  = val.fifo_ovr;
 800986e:	783b      	ldrb	r3, [r7, #0]
 8009870:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009874:	b2da      	uxtb	r2, r3
 8009876:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800987a:	f362 1304 	bfi	r3, r2, #4, #1
 800987e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_full = val.fifo_full;
 8009882:	783b      	ldrb	r3, [r7, #0]
 8009884:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009888:	b2da      	uxtb	r2, r3
 800988a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800988e:	f362 1345 	bfi	r3, r2, #5, #1
 8009892:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_cnt_bdr   = val.fifo_bdr;
 8009896:	783b      	ldrb	r3, [r7, #0]
 8009898:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800989c:	b2da      	uxtb	r2, r3
 800989e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098a2:	f362 1386 	bfi	r3, r2, #6, #1
 80098a6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.not_used_01    = 0;
 80098aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098ae:	f36f 13c7 	bfc	r3, #7, #1
 80098b2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    ret = lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 80098b6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80098ba:	2301      	movs	r3, #1
 80098bc:	210e      	movs	r1, #14
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f7fe fc3c 	bl	800813c <lsm6dso_write_reg>
 80098c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 80098c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <lsm6dso_pin_int2_route_set+0x114>
 80098cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ce:	e2e3      	b.n	8009e98 <lsm6dso_pin_int2_route_set+0x6dc>

    md2_cfg.int2_timestamp    = val.timestamp;
 80098d0:	787b      	ldrb	r3, [r7, #1]
 80098d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80098d6:	b2da      	uxtb	r2, r3
 80098d8:	7f3b      	ldrb	r3, [r7, #28]
 80098da:	f362 0300 	bfi	r3, r2, #0, #1
 80098de:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_6d           = val.six_d;
 80098e0:	787b      	ldrb	r3, [r7, #1]
 80098e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	7f3b      	ldrb	r3, [r7, #28]
 80098ea:	f362 0382 	bfi	r3, r2, #2, #1
 80098ee:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_double_tap   = val.double_tap;
 80098f0:	787b      	ldrb	r3, [r7, #1]
 80098f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	7f3b      	ldrb	r3, [r7, #28]
 80098fa:	f362 03c3 	bfi	r3, r2, #3, #1
 80098fe:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_ff           = val.free_fall;
 8009900:	787b      	ldrb	r3, [r7, #1]
 8009902:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009906:	b2da      	uxtb	r2, r3
 8009908:	7f3b      	ldrb	r3, [r7, #28]
 800990a:	f362 1304 	bfi	r3, r2, #4, #1
 800990e:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_wu           = val.wake_up;
 8009910:	787b      	ldrb	r3, [r7, #1]
 8009912:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009916:	b2da      	uxtb	r2, r3
 8009918:	7f3b      	ldrb	r3, [r7, #28]
 800991a:	f362 1345 	bfi	r3, r2, #5, #1
 800991e:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_single_tap   = val.single_tap;
 8009920:	787b      	ldrb	r3, [r7, #1]
 8009922:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009926:	b2da      	uxtb	r2, r3
 8009928:	7f3b      	ldrb	r3, [r7, #28]
 800992a:	f362 1386 	bfi	r3, r2, #6, #1
 800992e:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_sleep_change = val.sleep_change;
 8009930:	787b      	ldrb	r3, [r7, #1]
 8009932:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009936:	b2da      	uxtb	r2, r3
 8009938:	7f3b      	ldrb	r3, [r7, #28]
 800993a:	f362 13c7 	bfi	r3, r2, #7, #1
 800993e:	773b      	strb	r3, [r7, #28]
    emb_func_int2.not_used_01 = 0;
 8009940:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009944:	f36f 0302 	bfc	r3, #0, #3
 8009948:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2. int2_step_detector = val.step_detector;
 800994c:	787b      	ldrb	r3, [r7, #1]
 800994e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009952:	b2da      	uxtb	r2, r3
 8009954:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009958:	f362 03c3 	bfi	r3, r2, #3, #1
 800995c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_tilt           = val.tilt;
 8009960:	78bb      	ldrb	r3, [r7, #2]
 8009962:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009966:	b2da      	uxtb	r2, r3
 8009968:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800996c:	f362 1304 	bfi	r3, r2, #4, #1
 8009970:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_sig_mot        = val.sig_mot;
 8009974:	78bb      	ldrb	r3, [r7, #2]
 8009976:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800997a:	b2da      	uxtb	r2, r3
 800997c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009980:	f362 1345 	bfi	r3, r2, #5, #1
 8009984:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.not_used_02 = 0;
 8009988:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800998c:	f36f 1386 	bfc	r3, #6, #1
 8009990:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_fsm_lc         = val.fsm_lc;
 8009994:	78bb      	ldrb	r3, [r7, #2]
 8009996:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800999a:	b2da      	uxtb	r2, r3
 800999c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80099a0:	f362 13c7 	bfi	r3, r2, #7, #1
 80099a4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    fsm_int2_a.int2_fsm1 = val.fsm1;
 80099a8:	78bb      	ldrb	r3, [r7, #2]
 80099aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80099b4:	f362 0300 	bfi	r3, r2, #0, #1
 80099b8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm2 = val.fsm2;
 80099bc:	78bb      	ldrb	r3, [r7, #2]
 80099be:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80099c8:	f362 0341 	bfi	r3, r2, #1, #1
 80099cc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm3 = val.fsm3;
 80099d0:	78bb      	ldrb	r3, [r7, #2]
 80099d2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80099dc:	f362 0382 	bfi	r3, r2, #2, #1
 80099e0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm4 = val.fsm4;
 80099e4:	78bb      	ldrb	r3, [r7, #2]
 80099e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80099f0:	f362 03c3 	bfi	r3, r2, #3, #1
 80099f4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm5 = val.fsm5;
 80099f8:	78bb      	ldrb	r3, [r7, #2]
 80099fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a04:	f362 1304 	bfi	r3, r2, #4, #1
 8009a08:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm6 = val.fsm6;
 8009a0c:	78fb      	ldrb	r3, [r7, #3]
 8009a0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009a12:	b2da      	uxtb	r2, r3
 8009a14:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a18:	f362 1345 	bfi	r3, r2, #5, #1
 8009a1c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm7 = val.fsm7;
 8009a20:	78fb      	ldrb	r3, [r7, #3]
 8009a22:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a2c:	f362 1386 	bfi	r3, r2, #6, #1
 8009a30:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm8 = val.fsm8;
 8009a34:	78fb      	ldrb	r3, [r7, #3]
 8009a36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a40:	f362 13c7 	bfi	r3, r2, #7, #1
 8009a44:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009a54:	f362 0300 	bfi	r3, r2, #0, #1
 8009a58:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm10 = val.fsm10;
 8009a5c:	78fb      	ldrb	r3, [r7, #3]
 8009a5e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009a68:	f362 0341 	bfi	r3, r2, #1, #1
 8009a6c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm11 = val.fsm11;
 8009a70:	78fb      	ldrb	r3, [r7, #3]
 8009a72:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009a76:	b2da      	uxtb	r2, r3
 8009a78:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009a7c:	f362 0382 	bfi	r3, r2, #2, #1
 8009a80:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm12 = val.fsm12;
 8009a84:	78fb      	ldrb	r3, [r7, #3]
 8009a86:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009a90:	f362 03c3 	bfi	r3, r2, #3, #1
 8009a94:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm13 = val.fsm13;
 8009a98:	78fb      	ldrb	r3, [r7, #3]
 8009a9a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009aa4:	f362 1304 	bfi	r3, r2, #4, #1
 8009aa8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm14 = val.fsm14;
 8009aac:	793b      	ldrb	r3, [r7, #4]
 8009aae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ab8:	f362 1345 	bfi	r3, r2, #5, #1
 8009abc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm15 = val.fsm15;
 8009ac0:	793b      	ldrb	r3, [r7, #4]
 8009ac2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009acc:	f362 1386 	bfi	r3, r2, #6, #1
 8009ad0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm16 = val.fsm16;
 8009ad4:	793b      	ldrb	r3, [r7, #4]
 8009ad6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ae0:	f362 13c7 	bfi	r3, r2, #7, #1
 8009ae4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8009ae8:	f107 0218 	add.w	r2, r7, #24
 8009aec:	2301      	movs	r3, #1
 8009aee:	2113      	movs	r1, #19
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f7fe fb0b 	bl	800810c <lsm6dso_read_reg>
 8009af6:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8009af8:	783b      	ldrb	r3, [r7, #0]
 8009afa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	787b      	ldrb	r3, [r7, #1]
 8009b02:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d003      	beq.n	8009b18 <lsm6dso_pin_int2_route_set+0x35c>
    {
      ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8009b10:	7e3b      	ldrb	r3, [r7, #24]
 8009b12:	f36f 1345 	bfc	r3, #5, #1
 8009b16:	763b      	strb	r3, [r7, #24]
    }

    ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8009b18:	f107 0218 	add.w	r2, r7, #24
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	2113      	movs	r1, #19
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f7fe fb0b 	bl	800813c <lsm6dso_write_reg>
 8009b26:	4602      	mov	r2, r0
 8009b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b2a:	4413      	add	r3, r2
 8009b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8009b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <lsm6dso_pin_int2_route_set+0x37c>
 8009b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b36:	e1af      	b.n	8009e98 <lsm6dso_pin_int2_route_set+0x6dc>

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8009b38:	2102      	movs	r1, #2
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f7fe ff50 	bl	80089e0 <lsm6dso_mem_bank_set>
 8009b40:	63f8      	str	r0, [r7, #60]	@ 0x3c

    ret += lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT2, (uint8_t *)&emb_func_int2, 1);
 8009b42:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8009b46:	2301      	movs	r3, #1
 8009b48:	210e      	movs	r1, #14
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f7fe faf6 	bl	800813c <lsm6dso_write_reg>
 8009b50:	4602      	mov	r2, r0
 8009b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b54:	4413      	add	r3, r2
 8009b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_A, (uint8_t *)&fsm_int2_a, 1);
 8009b58:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	210f      	movs	r1, #15
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f7fe faeb 	bl	800813c <lsm6dso_write_reg>
 8009b66:	4602      	mov	r2, r0
 8009b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b6a:	4413      	add	r3, r2
 8009b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_B, (uint8_t *)&fsm_int2_b, 1);
 8009b6e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8009b72:	2301      	movs	r3, #1
 8009b74:	2110      	movs	r1, #16
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f7fe fae0 	bl	800813c <lsm6dso_write_reg>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b80:	4413      	add	r3, r2
 8009b82:	63fb      	str	r3, [r7, #60]	@ 0x3c

    ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009b84:	2100      	movs	r1, #0
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f7fe ff2a 	bl	80089e0 <lsm6dso_mem_bank_set>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b90:	4413      	add	r3, r2
 8009b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8009b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <lsm6dso_pin_int2_route_set+0x3e2>
 8009b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b9c:	e17c      	b.n	8009e98 <lsm6dso_pin_int2_route_set+0x6dc>

    if ((emb_func_int2.int2_fsm_lc
 8009b9e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009ba2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009ba6:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_sig_mot
 8009ba8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009bac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_step_detector
 8009bb6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009bba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_tilt
 8009bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009bc8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm1
 8009bd2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009bd6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm2
 8009be0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009be4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	4313      	orrs	r3, r2
 8009bec:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm3
 8009bee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009bf2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm4
 8009bfc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	4313      	orrs	r3, r2
 8009c08:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm5
 8009c0a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c0e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	4313      	orrs	r3, r2
 8009c16:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm6
 8009c18:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	4313      	orrs	r3, r2
 8009c24:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm7
 8009c26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	4313      	orrs	r3, r2
 8009c32:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm8
 8009c34:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c38:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm9
 8009c42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm10
 8009c50:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c54:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm11
 8009c5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c62:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm12
 8009c6c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c70:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	4313      	orrs	r3, r2
 8009c78:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm13
 8009c7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c7e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	4313      	orrs	r3, r2
 8009c86:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm14
 8009c88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c8c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	4313      	orrs	r3, r2
 8009c94:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm15
 8009c96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c9a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm16) != PROPERTY_DISABLE)
 8009ca4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ca8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	b2db      	uxtb	r3, r3
    if ((emb_func_int2.int2_fsm_lc
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d004      	beq.n	8009cc0 <lsm6dso_pin_int2_route_set+0x504>
    {
      md2_cfg.int2_emb_func = PROPERTY_ENABLE;
 8009cb6:	7f3b      	ldrb	r3, [r7, #28]
 8009cb8:	f043 0302 	orr.w	r3, r3, #2
 8009cbc:	773b      	strb	r3, [r7, #28]
 8009cbe:	e003      	b.n	8009cc8 <lsm6dso_pin_int2_route_set+0x50c>
    }
    else
    {
      md2_cfg.int2_emb_func = PROPERTY_DISABLE;
 8009cc0:	7f3b      	ldrb	r3, [r7, #28]
 8009cc2:	f36f 0341 	bfc	r3, #1, #1
 8009cc6:	773b      	strb	r3, [r7, #28]
    }

    ret = lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8009cc8:	f107 021c 	add.w	r2, r7, #28
 8009ccc:	2301      	movs	r3, #1
 8009cce:	215f      	movs	r1, #95	@ 0x5f
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f7fe fa33 	bl	800813c <lsm6dso_write_reg>
 8009cd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8009cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <lsm6dso_pin_int2_route_set+0x526>
 8009cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce0:	e0da      	b.n	8009e98 <lsm6dso_pin_int2_route_set+0x6dc>

    ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8009ce2:	f107 0220 	add.w	r2, r7, #32
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	2158      	movs	r1, #88	@ 0x58
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f7fe fa0e 	bl	800810c <lsm6dso_read_reg>
 8009cf0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    ret += lsm6dso_pin_int1_route_get(ctx, &pin_int1_route);
 8009cf2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f7ff fb6f 	bl	80093dc <lsm6dso_pin_int1_route_get>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d02:	4413      	add	r3, r2
 8009d04:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if ((val.fifo_bdr
 8009d06:	783b      	ldrb	r3, [r7, #0]
 8009d08:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009d0c:	b2da      	uxtb	r2, r3
         | val.drdy_g
 8009d0e:	783b      	ldrb	r3, [r7, #0]
 8009d10:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	4313      	orrs	r3, r2
 8009d18:	b2da      	uxtb	r2, r3
         | val.drdy_temp
 8009d1a:	783b      	ldrb	r3, [r7, #0]
 8009d1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	4313      	orrs	r3, r2
 8009d24:	b2da      	uxtb	r2, r3
         | val.drdy_xl
 8009d26:	783b      	ldrb	r3, [r7, #0]
 8009d28:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	b2da      	uxtb	r2, r3
         | val.fifo_full
 8009d32:	783b      	ldrb	r3, [r7, #0]
 8009d34:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	b2da      	uxtb	r2, r3
         | val.fifo_ovr
 8009d3e:	783b      	ldrb	r3, [r7, #0]
 8009d40:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	4313      	orrs	r3, r2
 8009d48:	b2da      	uxtb	r2, r3
         | val.fifo_th
 8009d4a:	783b      	ldrb	r3, [r7, #0]
 8009d4c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	4313      	orrs	r3, r2
 8009d54:	b2da      	uxtb	r2, r3
         | val.six_d
 8009d56:	787b      	ldrb	r3, [r7, #1]
 8009d58:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	b2da      	uxtb	r2, r3
         | val.double_tap
 8009d62:	787b      	ldrb	r3, [r7, #1]
 8009d64:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	b2da      	uxtb	r2, r3
         | val.free_fall
 8009d6e:	787b      	ldrb	r3, [r7, #1]
 8009d70:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	4313      	orrs	r3, r2
 8009d78:	b2da      	uxtb	r2, r3
         | val.wake_up
 8009d7a:	787b      	ldrb	r3, [r7, #1]
 8009d7c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	4313      	orrs	r3, r2
 8009d84:	b2da      	uxtb	r2, r3
         | val.single_tap
 8009d86:	787b      	ldrb	r3, [r7, #1]
 8009d88:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	b2da      	uxtb	r2, r3
         | val.sleep_change
 8009d92:	787b      	ldrb	r3, [r7, #1]
 8009d94:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	b2da      	uxtb	r2, r3
         | pin_int1_route.den_flag
 8009d9e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009da2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	4313      	orrs	r3, r2
 8009daa:	b2da      	uxtb	r2, r3
         | pin_int1_route.boot
 8009dac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009db0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	4313      	orrs	r3, r2
 8009db8:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_bdr
 8009dba:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009dbe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	b2da      	uxtb	r2, r3
         | pin_int1_route.drdy_g
 8009dc8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009dcc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	b2da      	uxtb	r2, r3
         | pin_int1_route.drdy_xl
 8009dd6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009dda:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	4313      	orrs	r3, r2
 8009de2:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_full
 8009de4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009de8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	4313      	orrs	r3, r2
 8009df0:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_ovr
 8009df2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009df6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_th
 8009e00:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009e04:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	b2da      	uxtb	r2, r3
         | pin_int1_route.six_d
 8009e0e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009e12:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	b2da      	uxtb	r2, r3
         | pin_int1_route.double_tap
 8009e1c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009e20:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	4313      	orrs	r3, r2
 8009e28:	b2da      	uxtb	r2, r3
         | pin_int1_route.free_fall
 8009e2a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009e2e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	4313      	orrs	r3, r2
 8009e36:	b2da      	uxtb	r2, r3
         | pin_int1_route.wake_up
 8009e38:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009e3c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	4313      	orrs	r3, r2
 8009e44:	b2da      	uxtb	r2, r3
         | pin_int1_route.single_tap
 8009e46:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009e4a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	4313      	orrs	r3, r2
 8009e52:	b2da      	uxtb	r2, r3
         | pin_int1_route.sleep_change) != PROPERTY_DISABLE)
 8009e54:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009e58:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	b2db      	uxtb	r3, r3
    if ((val.fifo_bdr
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d006      	beq.n	8009e74 <lsm6dso_pin_int2_route_set+0x6b8>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8009e66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e6e:	f887 3020 	strb.w	r3, [r7, #32]
 8009e72:	e005      	b.n	8009e80 <lsm6dso_pin_int2_route_set+0x6c4>
    }
    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 8009e74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e78:	f36f 13c7 	bfc	r3, #7, #1
 8009e7c:	f887 3020 	strb.w	r3, [r7, #32]
    }

    ret += lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8009e80:	f107 0220 	add.w	r2, r7, #32
 8009e84:	2301      	movs	r3, #1
 8009e86:	2158      	movs	r1, #88	@ 0x58
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f7fe f957 	bl	800813c <lsm6dso_write_reg>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e92:	4413      	add	r3, r2
 8009e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return ret;
 8009e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3740      	adds	r7, #64	@ 0x40
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <lsm6dso_pin_int2_route_get>:
  *
  */
int32_t lsm6dso_pin_int2_route_get(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t *val)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08c      	sub	sp, #48	@ 0x30
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
  lsm6dso_int2_ctrl_t      int2_ctrl;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                   ret;
  ret = 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (aux_ctx != NULL)
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d010      	beq.n	8009ed8 <lsm6dso_pin_int2_route_get+0x38>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS,
 8009eb6:	f107 0210 	add.w	r2, r7, #16
 8009eba:	2301      	movs	r3, #1
 8009ebc:	216f      	movs	r1, #111	@ 0x6f
 8009ebe:	68b8      	ldr	r0, [r7, #8]
 8009ec0:	f7fe f924 	bl	800810c <lsm6dso_read_reg>
 8009ec4:	62f8      	str	r0, [r7, #44]	@ 0x2c
                           (uint8_t *)&int_ois, 1);
    val->drdy_ois = int_ois.int2_drdy_ois;
 8009ec6:	7c3b      	ldrb	r3, [r7, #16]
 8009ec8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009ecc:	b2d9      	uxtb	r1, r3
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	7813      	ldrb	r3, [r2, #0]
 8009ed2:	f361 0300 	bfi	r3, r1, #0, #1
 8009ed6:	7013      	strb	r3, [r2, #0]
  }

  if (ctx != NULL)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 81c7 	beq.w	800a26e <lsm6dso_pin_int2_route_get+0x3ce>
  {
    if (ret == 0)
 8009ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d104      	bne.n	8009ef0 <lsm6dso_pin_int2_route_get+0x50>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8009ee6:	2102      	movs	r1, #2
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f7fe fd79 	bl	80089e0 <lsm6dso_mem_bank_set>
 8009eee:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 8009ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d107      	bne.n	8009f06 <lsm6dso_pin_int2_route_get+0x66>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT2,
 8009ef6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8009efa:	2301      	movs	r3, #1
 8009efc:	210e      	movs	r1, #14
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f7fe f904 	bl	800810c <lsm6dso_read_reg>
 8009f04:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 8009f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d107      	bne.n	8009f1c <lsm6dso_pin_int2_route_get+0x7c>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_A,
 8009f0c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8009f10:	2301      	movs	r3, #1
 8009f12:	210f      	movs	r1, #15
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f7fe f8f9 	bl	800810c <lsm6dso_read_reg>
 8009f1a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 8009f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d107      	bne.n	8009f32 <lsm6dso_pin_int2_route_get+0x92>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_B,
 8009f22:	f107 0220 	add.w	r2, r7, #32
 8009f26:	2301      	movs	r3, #1
 8009f28:	2110      	movs	r1, #16
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f7fe f8ee 	bl	800810c <lsm6dso_read_reg>
 8009f30:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 8009f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d104      	bne.n	8009f42 <lsm6dso_pin_int2_route_get+0xa2>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009f38:	2100      	movs	r1, #0
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f7fe fd50 	bl	80089e0 <lsm6dso_mem_bank_set>
 8009f40:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 8009f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d107      	bne.n	8009f58 <lsm6dso_pin_int2_route_get+0xb8>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 8009f48:	f107 021c 	add.w	r2, r7, #28
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	210e      	movs	r1, #14
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f7fe f8db 	bl	800810c <lsm6dso_read_reg>
 8009f56:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 8009f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d107      	bne.n	8009f6e <lsm6dso_pin_int2_route_get+0xce>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG,
 8009f5e:	f107 0218 	add.w	r2, r7, #24
 8009f62:	2301      	movs	r3, #1
 8009f64:	215f      	movs	r1, #95	@ 0x5f
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f7fe f8d0 	bl	800810c <lsm6dso_read_reg>
 8009f6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 8009f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d107      	bne.n	8009f84 <lsm6dso_pin_int2_route_get+0xe4>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8009f74:	f107 0214 	add.w	r2, r7, #20
 8009f78:	2301      	movs	r3, #1
 8009f7a:	2113      	movs	r1, #19
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f7fe f8c5 	bl	800810c <lsm6dso_read_reg>
 8009f82:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 8009f84:	7d3b      	ldrb	r3, [r7, #20]
 8009f86:	f003 0320 	and.w	r3, r3, #32
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d128      	bne.n	8009fe2 <lsm6dso_pin_int2_route_get+0x142>
    {
      if (ret == 0)
 8009f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d110      	bne.n	8009fb8 <lsm6dso_pin_int2_route_get+0x118>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 8009f96:	f107 021c 	add.w	r2, r7, #28
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	210e      	movs	r1, #14
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f7fe f8b4 	bl	800810c <lsm6dso_read_reg>
 8009fa4:	62f8      	str	r0, [r7, #44]	@ 0x2c
                               (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8009fa6:	7f3b      	ldrb	r3, [r7, #28]
 8009fa8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009fac:	b2d9      	uxtb	r1, r3
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	7813      	ldrb	r3, [r2, #0]
 8009fb2:	f361 03c3 	bfi	r3, r1, #3, #1
 8009fb6:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 8009fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d11b      	bne.n	8009ff6 <lsm6dso_pin_int2_route_get+0x156>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8009fbe:	f107 0218 	add.w	r2, r7, #24
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	215f      	movs	r1, #95	@ 0x5f
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f7fe f8a0 	bl	800810c <lsm6dso_read_reg>
 8009fcc:	62f8      	str	r0, [r7, #44]	@ 0x2c
        val->timestamp = md2_cfg.int2_timestamp;
 8009fce:	7e3b      	ldrb	r3, [r7, #24]
 8009fd0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009fd4:	b2d9      	uxtb	r1, r3
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	7853      	ldrb	r3, [r2, #1]
 8009fda:	f361 0300 	bfi	r3, r1, #0, #1
 8009fde:	7053      	strb	r3, [r2, #1]
 8009fe0:	e009      	b.n	8009ff6 <lsm6dso_pin_int2_route_get+0x156>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	7813      	ldrb	r3, [r2, #0]
 8009fe6:	f36f 03c3 	bfc	r3, #3, #1
 8009fea:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	7853      	ldrb	r3, [r2, #1]
 8009ff0:	f36f 0300 	bfc	r3, #0, #1
 8009ff4:	7053      	strb	r3, [r2, #1]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8009ff6:	7f3b      	ldrb	r3, [r7, #28]
 8009ff8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009ffc:	b2d9      	uxtb	r1, r3
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	7813      	ldrb	r3, [r2, #0]
 800a002:	f361 0341 	bfi	r3, r1, #1, #1
 800a006:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 800a008:	7f3b      	ldrb	r3, [r7, #28]
 800a00a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a00e:	b2d9      	uxtb	r1, r3
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	7813      	ldrb	r3, [r2, #0]
 800a014:	f361 0382 	bfi	r3, r1, #2, #1
 800a018:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 800a01a:	7f3b      	ldrb	r3, [r7, #28]
 800a01c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a020:	b2d9      	uxtb	r1, r3
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	7813      	ldrb	r3, [r2, #0]
 800a026:	f361 03c3 	bfi	r3, r1, #3, #1
 800a02a:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 800a02c:	7f3b      	ldrb	r3, [r7, #28]
 800a02e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a032:	b2d9      	uxtb	r1, r3
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	7813      	ldrb	r3, [r2, #0]
 800a038:	f361 1304 	bfi	r3, r1, #4, #1
 800a03c:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 800a03e:	7f3b      	ldrb	r3, [r7, #28]
 800a040:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a044:	b2d9      	uxtb	r1, r3
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	7813      	ldrb	r3, [r2, #0]
 800a04a:	f361 1345 	bfi	r3, r1, #5, #1
 800a04e:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 800a050:	7f3b      	ldrb	r3, [r7, #28]
 800a052:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a056:	b2d9      	uxtb	r1, r3
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	7813      	ldrb	r3, [r2, #0]
 800a05c:	f361 1386 	bfi	r3, r1, #6, #1
 800a060:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 800a062:	7f3b      	ldrb	r3, [r7, #28]
 800a064:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a068:	b2d9      	uxtb	r1, r3
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	7813      	ldrb	r3, [r2, #0]
 800a06e:	f361 13c7 	bfi	r3, r1, #7, #1
 800a072:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 800a074:	7e3b      	ldrb	r3, [r7, #24]
 800a076:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a07a:	b2d9      	uxtb	r1, r3
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	7853      	ldrb	r3, [r2, #1]
 800a080:	f361 0300 	bfi	r3, r1, #0, #1
 800a084:	7053      	strb	r3, [r2, #1]
    val->six_d        = md2_cfg.int2_6d;
 800a086:	7e3b      	ldrb	r3, [r7, #24]
 800a088:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a08c:	b2d9      	uxtb	r1, r3
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	7853      	ldrb	r3, [r2, #1]
 800a092:	f361 0341 	bfi	r3, r1, #1, #1
 800a096:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 800a098:	7e3b      	ldrb	r3, [r7, #24]
 800a09a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a09e:	b2d9      	uxtb	r1, r3
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	7853      	ldrb	r3, [r2, #1]
 800a0a4:	f361 0382 	bfi	r3, r1, #2, #1
 800a0a8:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 800a0aa:	7e3b      	ldrb	r3, [r7, #24]
 800a0ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a0b0:	b2d9      	uxtb	r1, r3
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	7853      	ldrb	r3, [r2, #1]
 800a0b6:	f361 03c3 	bfi	r3, r1, #3, #1
 800a0ba:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 800a0bc:	7e3b      	ldrb	r3, [r7, #24]
 800a0be:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a0c2:	b2d9      	uxtb	r1, r3
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	7853      	ldrb	r3, [r2, #1]
 800a0c8:	f361 1304 	bfi	r3, r1, #4, #1
 800a0cc:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 800a0ce:	7e3b      	ldrb	r3, [r7, #24]
 800a0d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a0d4:	b2d9      	uxtb	r1, r3
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	7853      	ldrb	r3, [r2, #1]
 800a0da:	f361 1345 	bfi	r3, r1, #5, #1
 800a0de:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 800a0e0:	7e3b      	ldrb	r3, [r7, #24]
 800a0e2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a0e6:	b2d9      	uxtb	r1, r3
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	7853      	ldrb	r3, [r2, #1]
 800a0ec:	f361 1386 	bfi	r3, r1, #6, #1
 800a0f0:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 800a0f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a0f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a0fa:	b2d9      	uxtb	r1, r3
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	7853      	ldrb	r3, [r2, #1]
 800a100:	f361 13c7 	bfi	r3, r1, #7, #1
 800a104:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 800a106:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a10a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a10e:	b2d9      	uxtb	r1, r3
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	7893      	ldrb	r3, [r2, #2]
 800a114:	f361 0300 	bfi	r3, r1, #0, #1
 800a118:	7093      	strb	r3, [r2, #2]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 800a11a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a11e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a122:	b2d9      	uxtb	r1, r3
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	7893      	ldrb	r3, [r2, #2]
 800a128:	f361 0382 	bfi	r3, r1, #2, #1
 800a12c:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 800a12e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a132:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a136:	b2d9      	uxtb	r1, r3
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	7893      	ldrb	r3, [r2, #2]
 800a13c:	f361 03c3 	bfi	r3, r1, #3, #1
 800a140:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 800a142:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a146:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a14a:	b2d9      	uxtb	r1, r3
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	7893      	ldrb	r3, [r2, #2]
 800a150:	f361 1304 	bfi	r3, r1, #4, #1
 800a154:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 800a156:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a15a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a15e:	b2d9      	uxtb	r1, r3
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	7893      	ldrb	r3, [r2, #2]
 800a164:	f361 1345 	bfi	r3, r1, #5, #1
 800a168:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 800a16a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a16e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a172:	b2d9      	uxtb	r1, r3
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	7893      	ldrb	r3, [r2, #2]
 800a178:	f361 1386 	bfi	r3, r1, #6, #1
 800a17c:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 800a17e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a182:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a186:	b2d9      	uxtb	r1, r3
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	7893      	ldrb	r3, [r2, #2]
 800a18c:	f361 13c7 	bfi	r3, r1, #7, #1
 800a190:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 800a192:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a196:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a19a:	b2d9      	uxtb	r1, r3
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	78d3      	ldrb	r3, [r2, #3]
 800a1a0:	f361 0300 	bfi	r3, r1, #0, #1
 800a1a4:	70d3      	strb	r3, [r2, #3]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 800a1a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a1ae:	b2d9      	uxtb	r1, r3
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	78d3      	ldrb	r3, [r2, #3]
 800a1b4:	f361 0341 	bfi	r3, r1, #1, #1
 800a1b8:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 800a1ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a1c2:	b2d9      	uxtb	r1, r3
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	78d3      	ldrb	r3, [r2, #3]
 800a1c8:	f361 0382 	bfi	r3, r1, #2, #1
 800a1cc:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 800a1ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a1d6:	b2d9      	uxtb	r1, r3
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	78d3      	ldrb	r3, [r2, #3]
 800a1dc:	f361 03c3 	bfi	r3, r1, #3, #1
 800a1e0:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 800a1e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a1ea:	b2d9      	uxtb	r1, r3
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	78d3      	ldrb	r3, [r2, #3]
 800a1f0:	f361 1304 	bfi	r3, r1, #4, #1
 800a1f4:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 800a1f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a1fe:	b2d9      	uxtb	r1, r3
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	78d3      	ldrb	r3, [r2, #3]
 800a204:	f361 1345 	bfi	r3, r1, #5, #1
 800a208:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 800a20a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a20e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a212:	b2d9      	uxtb	r1, r3
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	78d3      	ldrb	r3, [r2, #3]
 800a218:	f361 1386 	bfi	r3, r1, #6, #1
 800a21c:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 800a21e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a222:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a226:	b2d9      	uxtb	r1, r3
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	78d3      	ldrb	r3, [r2, #3]
 800a22c:	f361 13c7 	bfi	r3, r1, #7, #1
 800a230:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 800a232:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a236:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a23a:	b2d9      	uxtb	r1, r3
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	7913      	ldrb	r3, [r2, #4]
 800a240:	f361 0300 	bfi	r3, r1, #0, #1
 800a244:	7113      	strb	r3, [r2, #4]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 800a246:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a24a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a24e:	b2d9      	uxtb	r1, r3
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	7913      	ldrb	r3, [r2, #4]
 800a254:	f361 0341 	bfi	r3, r1, #1, #1
 800a258:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 800a25a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a25e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a262:	b2d9      	uxtb	r1, r3
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	7913      	ldrb	r3, [r2, #4]
 800a268:	f361 0382 	bfi	r3, r1, #2, #1
 800a26c:	7113      	strb	r3, [r2, #4]
  }

  return ret;
 800a26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a270:	4618      	mov	r0, r3
 800a272:	3730      	adds	r7, #48	@ 0x30
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d103      	bne.n	800a290 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 800a288:	f04f 33ff 	mov.w	r3, #4294967295
 800a28c:	60fb      	str	r3, [r7, #12]
 800a28e:	e034      	b.n	800a2fa <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	7b1a      	ldrb	r2, [r3, #12]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	691a      	ldr	r2, [r3, #16]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	695a      	ldr	r2, [r3, #20]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	699a      	ldr	r2, [r3, #24]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a0e      	ldr	r2, [pc, #56]	@ (800a304 <STTS751_RegisterBusIO+0x8c>)
 800a2cc:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a0d      	ldr	r2, [pc, #52]	@ (800a308 <STTS751_RegisterBusIO+0x90>)
 800a2d2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	69da      	ldr	r2, [r3, #28]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d004      	beq.n	800a2f4 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4798      	blx	r3
 800a2f0:	60f8      	str	r0, [r7, #12]
 800a2f2:	e002      	b.n	800a2fa <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 800a2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2f8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	0800a771 	.word	0x0800a771
 800a308:	0800a7df 	.word	0x0800a7df

0800a30c <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d127      	bne.n	800a36e <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	3320      	adds	r3, #32
 800a322:	2101      	movs	r1, #1
 800a324:	4618      	mov	r0, r3
 800a326:	f000 fc39 	bl	800ab9c <stts751_pin_event_route_set>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 800a330:	f04f 33ff 	mov.w	r3, #4294967295
 800a334:	e020      	b.n	800a378 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a33c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	3320      	adds	r3, #32
 800a342:	2103      	movs	r1, #3
 800a344:	4618      	mov	r0, r3
 800a346:	f000 fb9d 	bl	800aa84 <stts751_resolution_set>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 800a350:	f04f 33ff 	mov.w	r3, #4294967295
 800a354:	e010      	b.n	800a378 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	3320      	adds	r3, #32
 800a35a:	2180      	movs	r1, #128	@ 0x80
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 faba 	bl	800a8d6 <stts751_temp_data_rate_set>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 800a368:	f04f 33ff 	mov.w	r3, #4294967295
 800a36c:	e004      	b.n	800a378 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d108      	bne.n	800a3a4 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f874 	bl	800a480 <STTS751_TEMP_Disable>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d002      	beq.n	800a3a4 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 800a39e:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a2:	e004      	b.n	800a3ae <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b084      	sub	sp, #16
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	3320      	adds	r3, #32
 800a3c4:	f107 020c 	add.w	r2, r7, #12
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f000 fc0c 	bl	800abe8 <stts751_device_id_get>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d002      	beq.n	800a3dc <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 800a3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3da:	e003      	b.n	800a3e4 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 800a3dc:	7b7a      	ldrb	r2, [r7, #13]
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	2200      	movs	r2, #0
 800a400:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2201      	movs	r2, #1
 800a406:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	2200      	movs	r2, #0
 800a40c:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2200      	movs	r2, #0
 800a412:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	f04f 0200 	mov.w	r2, #0
 800a41a:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 800a422:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	f04f 0200 	mov.w	r2, #0
 800a42a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	f04f 0200 	mov.w	r2, #0
 800a432:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bc80      	pop	{r7}
 800a43e:	4770      	bx	lr

0800a440 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d101      	bne.n	800a456 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	e010      	b.n	800a478 <STTS751_TEMP_Enable+0x38>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 f8b5 	bl	800a5cc <STTS751_TEMP_SetOutputDataRate>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <STTS751_TEMP_Enable+0x2e>
  {
    return STTS751_ERROR;
 800a468:	f04f 33ff 	mov.w	r3, #4294967295
 800a46c:	e004      	b.n	800a478 <STTS751_TEMP_Enable+0x38>
  }

  pObj->temp_is_enabled = 1;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	e01c      	b.n	800a4d0 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	3334      	adds	r3, #52	@ 0x34
 800a49a:	4619      	mov	r1, r3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 f81b 	bl	800a4d8 <STTS751_TEMP_GetOutputDataRate>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d002      	beq.n	800a4ae <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 800a4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ac:	e010      	b.n	800a4d0 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	3320      	adds	r3, #32
 800a4b2:	2180      	movs	r1, #128	@ 0x80
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 fa0e 	bl	800a8d6 <stts751_temp_data_rate_set>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 800a4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c4:	e004      	b.n	800a4d0 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	3320      	adds	r3, #32
 800a4ea:	f107 020b 	add.w	r2, r7, #11
 800a4ee:	4611      	mov	r1, r2
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f000 fa47 	bl	800a984 <stts751_temp_data_rate_get>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d002      	beq.n	800a502 <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 800a4fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a500:	e060      	b.n	800a5c4 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 800a502:	7afb      	ldrb	r3, [r7, #11]
 800a504:	2b90      	cmp	r3, #144	@ 0x90
 800a506:	d021      	beq.n	800a54c <STTS751_TEMP_GetOutputDataRate+0x74>
 800a508:	2b90      	cmp	r3, #144	@ 0x90
 800a50a:	dc56      	bgt.n	800a5ba <STTS751_TEMP_GetOutputDataRate+0xe2>
 800a50c:	2b09      	cmp	r3, #9
 800a50e:	dc1b      	bgt.n	800a548 <STTS751_TEMP_GetOutputDataRate+0x70>
 800a510:	2b00      	cmp	r3, #0
 800a512:	db52      	blt.n	800a5ba <STTS751_TEMP_GetOutputDataRate+0xe2>
 800a514:	2b09      	cmp	r3, #9
 800a516:	d850      	bhi.n	800a5ba <STTS751_TEMP_GetOutputDataRate+0xe2>
 800a518:	a201      	add	r2, pc, #4	@ (adr r2, 800a520 <STTS751_TEMP_GetOutputDataRate+0x48>)
 800a51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51e:	bf00      	nop
 800a520:	0800a557 	.word	0x0800a557
 800a524:	0800a561 	.word	0x0800a561
 800a528:	0800a56b 	.word	0x0800a56b
 800a52c:	0800a575 	.word	0x0800a575
 800a530:	0800a57f 	.word	0x0800a57f
 800a534:	0800a589 	.word	0x0800a589
 800a538:	0800a593 	.word	0x0800a593
 800a53c:	0800a59d 	.word	0x0800a59d
 800a540:	0800a5a7 	.word	0x0800a5a7
 800a544:	0800a5b1 	.word	0x0800a5b1
 800a548:	2b80      	cmp	r3, #128	@ 0x80
 800a54a:	d136      	bne.n	800a5ba <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	f04f 0200 	mov.w	r2, #0
 800a552:	601a      	str	r2, [r3, #0]
      break;
 800a554:	e035      	b.n	800a5c2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	f04f 5276 	mov.w	r2, #1031798784	@ 0x3d800000
 800a55c:	601a      	str	r2, [r3, #0]
      break;
 800a55e:	e030      	b.n	800a5c2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 800a566:	601a      	str	r2, [r3, #0]
      break;
 800a568:	e02b      	b.n	800a5c2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800a570:	601a      	str	r2, [r3, #0]
      break;
 800a572:	e026      	b.n	800a5c2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800a57a:	601a      	str	r2, [r3, #0]
      break;
 800a57c:	e021      	b.n	800a5c2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a584:	601a      	str	r2, [r3, #0]
      break;
 800a586:	e01c      	b.n	800a5c2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a58e:	601a      	str	r2, [r3, #0]
      break;
 800a590:	e017      	b.n	800a5c2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800a598:	601a      	str	r2, [r3, #0]
      break;
 800a59a:	e012      	b.n	800a5c2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800a5a2:	601a      	str	r2, [r3, #0]
      break;
 800a5a4:	e00d      	b.n	800a5c2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 800a5ac:	601a      	str	r2, [r3, #0]
      break;
 800a5ae:	e008      	b.n	800a5c2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 800a5b6:	601a      	str	r2, [r3, #0]
      break;
 800a5b8:	e003      	b.n	800a5c2 <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 800a5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a5be:	60fb      	str	r3, [r7, #12]
      break;
 800a5c0:	bf00      	nop
  }

  return ret;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	3320      	adds	r3, #32
 800a5da:	f107 020e 	add.w	r2, r7, #14
 800a5de:	4611      	mov	r1, r2
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 fa75 	bl	800aad0 <stts751_resolution_get>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d002      	beq.n	800a5f2 <STTS751_TEMP_SetOutputDataRate+0x26>
  {
    return STTS751_ERROR;
 800a5ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f0:	e09a      	b.n	800a728 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 800a5f2:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800a5f6:	6838      	ldr	r0, [r7, #0]
 800a5f8:	f7f6 fd48 	bl	800108c <__aeabi_fcmpeq>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00e      	beq.n	800a620 <STTS751_TEMP_SetOutputDataRate+0x54>
 800a602:	7bbb      	ldrb	r3, [r7, #14]
 800a604:	2b03      	cmp	r3, #3
 800a606:	d10b      	bne.n	800a620 <STTS751_TEMP_SetOutputDataRate+0x54>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	3320      	adds	r3, #32
 800a60c:	2101      	movs	r1, #1
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 fa38 	bl	800aa84 <stts751_resolution_set>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d002      	beq.n	800a620 <STTS751_TEMP_SetOutputDataRate+0x54>
    {
      return STTS751_ERROR;
 800a61a:	f04f 33ff 	mov.w	r3, #4294967295
 800a61e:	e083      	b.n	800a728 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 800a620:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 800a624:	6838      	ldr	r0, [r7, #0]
 800a626:	f7f6 fd31 	bl	800108c <__aeabi_fcmpeq>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d011      	beq.n	800a654 <STTS751_TEMP_SetOutputDataRate+0x88>
 800a630:	7bbb      	ldrb	r3, [r7, #14]
 800a632:	2b03      	cmp	r3, #3
 800a634:	d002      	beq.n	800a63c <STTS751_TEMP_SetOutputDataRate+0x70>
 800a636:	7bbb      	ldrb	r3, [r7, #14]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d10b      	bne.n	800a654 <STTS751_TEMP_SetOutputDataRate+0x88>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	3320      	adds	r3, #32
 800a640:	2100      	movs	r1, #0
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fa1e 	bl	800aa84 <stts751_resolution_set>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d002      	beq.n	800a654 <STTS751_TEMP_SetOutputDataRate+0x88>
    {
      return STTS751_ERROR;
 800a64e:	f04f 33ff 	mov.w	r3, #4294967295
 800a652:	e069      	b.n	800a728 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 800a654:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800a658:	6838      	ldr	r0, [r7, #0]
 800a65a:	f7f6 fd2b 	bl	80010b4 <__aeabi_fcmple>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <STTS751_TEMP_SetOutputDataRate+0x9c>
 800a664:	2300      	movs	r3, #0
 800a666:	e050      	b.n	800a70a <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a668:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800a66c:	6838      	ldr	r0, [r7, #0]
 800a66e:	f7f6 fd21 	bl	80010b4 <__aeabi_fcmple>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <STTS751_TEMP_SetOutputDataRate+0xb0>
 800a678:	2301      	movs	r3, #1
 800a67a:	e046      	b.n	800a70a <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a67c:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800a680:	6838      	ldr	r0, [r7, #0]
 800a682:	f7f6 fd17 	bl	80010b4 <__aeabi_fcmple>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <STTS751_TEMP_SetOutputDataRate+0xc4>
 800a68c:	2302      	movs	r3, #2
 800a68e:	e03c      	b.n	800a70a <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a690:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800a694:	6838      	ldr	r0, [r7, #0]
 800a696:	f7f6 fd0d 	bl	80010b4 <__aeabi_fcmple>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <STTS751_TEMP_SetOutputDataRate+0xd8>
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	e032      	b.n	800a70a <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a6a4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800a6a8:	6838      	ldr	r0, [r7, #0]
 800a6aa:	f7f6 fd03 	bl	80010b4 <__aeabi_fcmple>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d001      	beq.n	800a6b8 <STTS751_TEMP_SetOutputDataRate+0xec>
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	e028      	b.n	800a70a <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a6b8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a6bc:	6838      	ldr	r0, [r7, #0]
 800a6be:	f7f6 fcf9 	bl	80010b4 <__aeabi_fcmple>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <STTS751_TEMP_SetOutputDataRate+0x100>
 800a6c8:	2305      	movs	r3, #5
 800a6ca:	e01e      	b.n	800a70a <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a6cc:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800a6d0:	6838      	ldr	r0, [r7, #0]
 800a6d2:	f7f6 fcef 	bl	80010b4 <__aeabi_fcmple>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <STTS751_TEMP_SetOutputDataRate+0x114>
 800a6dc:	2306      	movs	r3, #6
 800a6de:	e014      	b.n	800a70a <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a6e0:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800a6e4:	6838      	ldr	r0, [r7, #0]
 800a6e6:	f7f6 fce5 	bl	80010b4 <__aeabi_fcmple>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <STTS751_TEMP_SetOutputDataRate+0x128>
 800a6f0:	2307      	movs	r3, #7
 800a6f2:	e00a      	b.n	800a70a <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a6f4:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800a6f8:	6838      	ldr	r0, [r7, #0]
 800a6fa:	f7f6 fcdb 	bl	80010b4 <__aeabi_fcmple>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <STTS751_TEMP_SetOutputDataRate+0x13c>
 800a704:	2308      	movs	r3, #8
 800a706:	e000      	b.n	800a70a <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a708:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 800a70a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3320      	adds	r3, #32
 800a710:	7bfa      	ldrb	r2, [r7, #15]
 800a712:	4611      	mov	r1, r2
 800a714:	4618      	mov	r0, r3
 800a716:	f000 f8de 	bl	800a8d6 <stts751_temp_data_rate_set>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d002      	beq.n	800a726 <STTS751_TEMP_SetOutputDataRate+0x15a>
  {
    return STTS751_ERROR;
 800a720:	f04f 33ff 	mov.w	r3, #4294967295
 800a724:	e000      	b.n	800a728 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  return STTS751_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	3320      	adds	r3, #32
 800a73e:	f107 020e 	add.w	r2, r7, #14
 800a742:	4611      	mov	r1, r2
 800a744:	4618      	mov	r0, r3
 800a746:	f000 f9fb 	bl	800ab40 <stts751_temperature_raw_get>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d002      	beq.n	800a756 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 800a750:	f04f 33ff 	mov.w	r3, #4294967295
 800a754:	e008      	b.n	800a768 <STTS751_TEMP_GetTemperature+0x38>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 800a756:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f000 f8a6 	bl	800a8ac <stts751_from_lsb_to_celsius>
 800a760:	4602      	mov	r2, r0
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	601a      	str	r2, [r3, #0]

  return STTS751_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a770:	b590      	push	{r4, r7, lr}
 800a772:	b089      	sub	sp, #36	@ 0x24
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	607a      	str	r2, [r7, #4]
 800a77a:	461a      	mov	r2, r3
 800a77c:	460b      	mov	r3, r1
 800a77e:	72fb      	strb	r3, [r7, #11]
 800a780:	4613      	mov	r3, r2
 800a782:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 800a784:	2300      	movs	r3, #0
 800a786:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d11f      	bne.n	800a7d4 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a794:	2300      	movs	r3, #0
 800a796:	83fb      	strh	r3, [r7, #30]
 800a798:	e018      	b.n	800a7cc <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	695c      	ldr	r4, [r3, #20]
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	7b1b      	ldrb	r3, [r3, #12]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	7afb      	ldrb	r3, [r7, #11]
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	8bfb      	ldrh	r3, [r7, #30]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	b299      	uxth	r1, r3
 800a7ae:	8bfb      	ldrh	r3, [r7, #30]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	441a      	add	r2, r3
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	47a0      	blx	r4
 800a7b8:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 800a7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c4:	e007      	b.n	800a7d6 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a7c6:	8bfb      	ldrh	r3, [r7, #30]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	83fb      	strh	r3, [r7, #30]
 800a7cc:	8bfa      	ldrh	r2, [r7, #30]
 800a7ce:	893b      	ldrh	r3, [r7, #8]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d3e2      	bcc.n	800a79a <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a7d4:	69bb      	ldr	r3, [r7, #24]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3724      	adds	r7, #36	@ 0x24
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd90      	pop	{r4, r7, pc}

0800a7de <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a7de:	b590      	push	{r4, r7, lr}
 800a7e0:	b089      	sub	sp, #36	@ 0x24
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	60f8      	str	r0, [r7, #12]
 800a7e6:	607a      	str	r2, [r7, #4]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	72fb      	strb	r3, [r7, #11]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d11f      	bne.n	800a842 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a802:	2300      	movs	r3, #0
 800a804:	83fb      	strh	r3, [r7, #30]
 800a806:	e018      	b.n	800a83a <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	691c      	ldr	r4, [r3, #16]
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	7b1b      	ldrb	r3, [r3, #12]
 800a810:	4618      	mov	r0, r3
 800a812:	7afb      	ldrb	r3, [r7, #11]
 800a814:	b29a      	uxth	r2, r3
 800a816:	8bfb      	ldrh	r3, [r7, #30]
 800a818:	4413      	add	r3, r2
 800a81a:	b299      	uxth	r1, r3
 800a81c:	8bfb      	ldrh	r3, [r7, #30]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	441a      	add	r2, r3
 800a822:	2301      	movs	r3, #1
 800a824:	47a0      	blx	r4
 800a826:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d002      	beq.n	800a834 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 800a82e:	f04f 33ff 	mov.w	r3, #4294967295
 800a832:	e007      	b.n	800a844 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a834:	8bfb      	ldrh	r3, [r7, #30]
 800a836:	3301      	adds	r3, #1
 800a838:	83fb      	strh	r3, [r7, #30]
 800a83a:	8bfa      	ldrh	r2, [r7, #30]
 800a83c:	893b      	ldrh	r3, [r7, #8]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d3e2      	bcc.n	800a808 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a842:	69bb      	ldr	r3, [r7, #24]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3724      	adds	r7, #36	@ 0x24
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd90      	pop	{r4, r7, pc}

0800a84c <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800a84c:	b590      	push	{r4, r7, lr}
 800a84e:	b087      	sub	sp, #28
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	607a      	str	r2, [r7, #4]
 800a856:	461a      	mov	r2, r3
 800a858:	460b      	mov	r3, r1
 800a85a:	72fb      	strb	r3, [r7, #11]
 800a85c:	4613      	mov	r3, r2
 800a85e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	685c      	ldr	r4, [r3, #4]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	68d8      	ldr	r0, [r3, #12]
 800a868:	893b      	ldrh	r3, [r7, #8]
 800a86a:	7af9      	ldrb	r1, [r7, #11]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	47a0      	blx	r4
 800a870:	6178      	str	r0, [r7, #20]

  return ret;
 800a872:	697b      	ldr	r3, [r7, #20]
}
 800a874:	4618      	mov	r0, r3
 800a876:	371c      	adds	r7, #28
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd90      	pop	{r4, r7, pc}

0800a87c <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800a87c:	b590      	push	{r4, r7, lr}
 800a87e:	b087      	sub	sp, #28
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	607a      	str	r2, [r7, #4]
 800a886:	461a      	mov	r2, r3
 800a888:	460b      	mov	r3, r1
 800a88a:	72fb      	strb	r3, [r7, #11]
 800a88c:	4613      	mov	r3, r2
 800a88e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681c      	ldr	r4, [r3, #0]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	68d8      	ldr	r0, [r3, #12]
 800a898:	893b      	ldrh	r3, [r7, #8]
 800a89a:	7af9      	ldrb	r1, [r7, #11]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	47a0      	blx	r4
 800a8a0:	6178      	str	r0, [r7, #20]

  return ret;
 800a8a2:	697b      	ldr	r3, [r7, #20]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	371c      	adds	r7, #28
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd90      	pop	{r4, r7, pc}

0800a8ac <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 800a8b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7f6 f9fe 	bl	8000cbc <__aeabi_i2f>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7f6 fb00 	bl	8000ecc <__aeabi_fdiv>
 800a8cc:	4603      	mov	r3, r0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b086      	sub	sp, #24
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	460b      	mov	r3, r1
 800a8e0:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 800a8e2:	23aa      	movs	r3, #170	@ 0xaa
 800a8e4:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800a8e6:	f107 020c 	add.w	r2, r7, #12
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	2104      	movs	r1, #4
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7ff ffac 	bl	800a84c <stts751_read_reg>
 800a8f4:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10f      	bne.n	800a91c <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 800a8fc:	78fb      	ldrb	r3, [r7, #3]
 800a8fe:	f003 030f 	and.w	r3, r3, #15
 800a902:	b2da      	uxtb	r2, r3
 800a904:	7b3b      	ldrb	r3, [r7, #12]
 800a906:	f362 0303 	bfi	r3, r2, #0, #4
 800a90a:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 800a90c:	f107 020c 	add.w	r2, r7, #12
 800a910:	2301      	movs	r3, #1
 800a912:	2104      	movs	r1, #4
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f7ff ffb1 	bl	800a87c <stts751_write_reg>
 800a91a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d107      	bne.n	800a932 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800a922:	f107 0210 	add.w	r2, r7, #16
 800a926:	2301      	movs	r3, #1
 800a928:	2103      	movs	r1, #3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7ff ff8e 	bl	800a84c <stts751_read_reg>
 800a930:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d111      	bne.n	800a95c <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 800a938:	78fb      	ldrb	r3, [r7, #3]
 800a93a:	09db      	lsrs	r3, r3, #7
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	b2da      	uxtb	r2, r3
 800a944:	7c3b      	ldrb	r3, [r7, #16]
 800a946:	f362 1386 	bfi	r3, r2, #6, #1
 800a94a:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 800a94c:	f107 0210 	add.w	r2, r7, #16
 800a950:	2301      	movs	r3, #1
 800a952:	2103      	movs	r1, #3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f7ff ff91 	bl	800a87c <stts751_write_reg>
 800a95a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10a      	bne.n	800a978 <stts751_temp_data_rate_set+0xa2>
 800a962:	78fb      	ldrb	r3, [r7, #3]
 800a964:	2b90      	cmp	r3, #144	@ 0x90
 800a966:	d107      	bne.n	800a978 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 800a968:	f107 020b 	add.w	r2, r7, #11
 800a96c:	2301      	movs	r3, #1
 800a96e:	210f      	movs	r1, #15
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f7ff ff83 	bl	800a87c <stts751_write_reg>
 800a976:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800a978:	697b      	ldr	r3, [r7, #20]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800a98e:	f107 0210 	add.w	r2, r7, #16
 800a992:	2301      	movs	r3, #1
 800a994:	2104      	movs	r1, #4
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7ff ff58 	bl	800a84c <stts751_read_reg>
 800a99c:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d107      	bne.n	800a9b4 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800a9a4:	f107 020c 	add.w	r2, r7, #12
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	2103      	movs	r1, #3
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7ff ff4d 	bl	800a84c <stts751_read_reg>
 800a9b2:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 800a9b4:	7b3b      	ldrb	r3, [r7, #12]
 800a9b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	01db      	lsls	r3, r3, #7
 800a9be:	7c3a      	ldrb	r2, [r7, #16]
 800a9c0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800a9c4:	b2d2      	uxtb	r2, r2
 800a9c6:	4413      	add	r3, r2
 800a9c8:	2b90      	cmp	r3, #144	@ 0x90
 800a9ca:	d025      	beq.n	800aa18 <stts751_temp_data_rate_get+0x94>
 800a9cc:	2b90      	cmp	r3, #144	@ 0x90
 800a9ce:	dc4f      	bgt.n	800aa70 <stts751_temp_data_rate_get+0xec>
 800a9d0:	2b09      	cmp	r3, #9
 800a9d2:	dc1b      	bgt.n	800aa0c <stts751_temp_data_rate_get+0x88>
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	db4b      	blt.n	800aa70 <stts751_temp_data_rate_get+0xec>
 800a9d8:	2b09      	cmp	r3, #9
 800a9da:	d849      	bhi.n	800aa70 <stts751_temp_data_rate_get+0xec>
 800a9dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a9e4 <stts751_temp_data_rate_get+0x60>)
 800a9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e2:	bf00      	nop
 800a9e4:	0800aa21 	.word	0x0800aa21
 800a9e8:	0800aa29 	.word	0x0800aa29
 800a9ec:	0800aa31 	.word	0x0800aa31
 800a9f0:	0800aa39 	.word	0x0800aa39
 800a9f4:	0800aa41 	.word	0x0800aa41
 800a9f8:	0800aa49 	.word	0x0800aa49
 800a9fc:	0800aa51 	.word	0x0800aa51
 800aa00:	0800aa59 	.word	0x0800aa59
 800aa04:	0800aa61 	.word	0x0800aa61
 800aa08:	0800aa69 	.word	0x0800aa69
 800aa0c:	2b80      	cmp	r3, #128	@ 0x80
 800aa0e:	d12f      	bne.n	800aa70 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	2280      	movs	r2, #128	@ 0x80
 800aa14:	701a      	strb	r2, [r3, #0]
      break;
 800aa16:	e02f      	b.n	800aa78 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	2290      	movs	r2, #144	@ 0x90
 800aa1c:	701a      	strb	r2, [r3, #0]
      break;
 800aa1e:	e02b      	b.n	800aa78 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2200      	movs	r2, #0
 800aa24:	701a      	strb	r2, [r3, #0]
      break;
 800aa26:	e027      	b.n	800aa78 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	701a      	strb	r2, [r3, #0]
      break;
 800aa2e:	e023      	b.n	800aa78 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	2202      	movs	r2, #2
 800aa34:	701a      	strb	r2, [r3, #0]
      break;
 800aa36:	e01f      	b.n	800aa78 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	2203      	movs	r2, #3
 800aa3c:	701a      	strb	r2, [r3, #0]
      break;
 800aa3e:	e01b      	b.n	800aa78 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	2204      	movs	r2, #4
 800aa44:	701a      	strb	r2, [r3, #0]
      break;
 800aa46:	e017      	b.n	800aa78 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	2205      	movs	r2, #5
 800aa4c:	701a      	strb	r2, [r3, #0]
      break;
 800aa4e:	e013      	b.n	800aa78 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2206      	movs	r2, #6
 800aa54:	701a      	strb	r2, [r3, #0]
      break;
 800aa56:	e00f      	b.n	800aa78 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	2207      	movs	r2, #7
 800aa5c:	701a      	strb	r2, [r3, #0]
      break;
 800aa5e:	e00b      	b.n	800aa78 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2208      	movs	r2, #8
 800aa64:	701a      	strb	r2, [r3, #0]
      break;
 800aa66:	e007      	b.n	800aa78 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	2209      	movs	r2, #9
 800aa6c:	701a      	strb	r2, [r3, #0]
      break;
 800aa6e:	e003      	b.n	800aa78 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2280      	movs	r2, #128	@ 0x80
 800aa74:	701a      	strb	r2, [r3, #0]
      break;
 800aa76:	bf00      	nop
  }

  return ret;
 800aa78:	697b      	ldr	r3, [r7, #20]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop

0800aa84 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800aa90:	f107 0208 	add.w	r2, r7, #8
 800aa94:	2301      	movs	r3, #1
 800aa96:	2103      	movs	r1, #3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7ff fed7 	bl	800a84c <stts751_read_reg>
 800aa9e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d10f      	bne.n	800aac6 <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 800aaa6:	78fb      	ldrb	r3, [r7, #3]
 800aaa8:	f003 0303 	and.w	r3, r3, #3
 800aaac:	b2da      	uxtb	r2, r3
 800aaae:	7a3b      	ldrb	r3, [r7, #8]
 800aab0:	f362 0383 	bfi	r3, r2, #2, #2
 800aab4:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800aab6:	f107 0208 	add.w	r2, r7, #8
 800aaba:	2301      	movs	r3, #1
 800aabc:	2103      	movs	r1, #3
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7ff fedc 	bl	800a87c <stts751_write_reg>
 800aac4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800aac6:	68fb      	ldr	r3, [r7, #12]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800aada:	f107 0208 	add.w	r2, r7, #8
 800aade:	2301      	movs	r3, #1
 800aae0:	2103      	movs	r1, #3
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f7ff feb2 	bl	800a84c <stts751_read_reg>
 800aae8:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 800aaea:	7a3b      	ldrb	r3, [r7, #8]
 800aaec:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b03      	cmp	r3, #3
 800aaf4:	d81a      	bhi.n	800ab2c <stts751_resolution_get+0x5c>
 800aaf6:	a201      	add	r2, pc, #4	@ (adr r2, 800aafc <stts751_resolution_get+0x2c>)
 800aaf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafc:	0800ab15 	.word	0x0800ab15
 800ab00:	0800ab1d 	.word	0x0800ab1d
 800ab04:	0800ab0d 	.word	0x0800ab0d
 800ab08:	0800ab25 	.word	0x0800ab25
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	701a      	strb	r2, [r3, #0]
      break;
 800ab12:	e00f      	b.n	800ab34 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	2200      	movs	r2, #0
 800ab18:	701a      	strb	r2, [r3, #0]
      break;
 800ab1a:	e00b      	b.n	800ab34 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	701a      	strb	r2, [r3, #0]
      break;
 800ab22:	e007      	b.n	800ab34 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	2203      	movs	r2, #3
 800ab28:	701a      	strb	r2, [r3, #0]
      break;
 800ab2a:	e003      	b.n	800ab34 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	2202      	movs	r2, #2
 800ab30:	701a      	strb	r2, [r3, #0]
      break;
 800ab32:	bf00      	nop
  }

  return ret;
 800ab34:	68fb      	ldr	r3, [r7, #12]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop

0800ab40 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 800ab4a:	f107 0308 	add.w	r3, r7, #8
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	2301      	movs	r3, #1
 800ab52:	2100      	movs	r1, #0
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff fe79 	bl	800a84c <stts751_read_reg>
 800ab5a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d117      	bne.n	800ab92 <stts751_temperature_raw_get+0x52>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 800ab62:	f107 0208 	add.w	r2, r7, #8
 800ab66:	2301      	movs	r3, #1
 800ab68:	2102      	movs	r1, #2
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff fe6e 	bl	800a84c <stts751_read_reg>
 800ab70:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 800ab72:	7a7b      	ldrb	r3, [r7, #9]
 800ab74:	b21a      	sxth	r2, r3
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	021b      	lsls	r3, r3, #8
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	7a3a      	ldrb	r2, [r7, #8]
 800ab88:	4413      	add	r3, r2
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	b21a      	sxth	r2, r3
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800ab92:	68fb      	ldr	r3, [r7, #12]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	460b      	mov	r3, r1
 800aba6:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 800aba8:	f107 0208 	add.w	r2, r7, #8
 800abac:	2301      	movs	r3, #1
 800abae:	2103      	movs	r1, #3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff fe4b 	bl	800a84c <stts751_read_reg>
 800abb6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10f      	bne.n	800abde <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 800abbe:	78fb      	ldrb	r3, [r7, #3]
 800abc0:	f003 0301 	and.w	r3, r3, #1
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	7a3b      	ldrb	r3, [r7, #8]
 800abc8:	f362 13c7 	bfi	r3, r2, #7, #1
 800abcc:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 800abce:	f107 0208 	add.w	r2, r7, #8
 800abd2:	2301      	movs	r3, #1
 800abd4:	2103      	movs	r1, #3
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f7ff fe50 	bl	800a87c <stts751_write_reg>
 800abdc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800abde:	68fb      	ldr	r3, [r7, #12]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 800abf2:	683a      	ldr	r2, [r7, #0]
 800abf4:	2301      	movs	r3, #1
 800abf6:	21fd      	movs	r1, #253	@ 0xfd
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f7ff fe27 	bl	800a84c <stts751_read_reg>
 800abfe:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d107      	bne.n	800ac16 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	1c5a      	adds	r2, r3, #1
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	21fe      	movs	r1, #254	@ 0xfe
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7ff fe1c 	bl	800a84c <stts751_read_reg>
 800ac14:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d107      	bne.n	800ac2c <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	1c9a      	adds	r2, r3, #2
 800ac20:	2301      	movs	r3, #1
 800ac22:	21ff      	movs	r1, #255	@ 0xff
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7ff fe11 	bl	800a84c <stts751_read_reg>
 800ac2a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
	...

0800ac38 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b08c      	sub	sp, #48	@ 0x30
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800ac42:	2300      	movs	r3, #0
 800ac44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800ac46:	2301      	movs	r3, #1
 800ac48:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d07c      	beq.n	800ad4e <IKS01A3_ENV_SENSOR_Init+0x116>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	f200 80b2 	bhi.w	800adc0 <IKS01A3_ENV_SENSOR_Init+0x188>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d003      	beq.n	800ac6a <IKS01A3_ENV_SENSOR_Init+0x32>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d039      	beq.n	800acdc <IKS01A3_ENV_SENSOR_Init+0xa4>
 800ac68:	e0aa      	b.n	800adc0 <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800ac6a:	6838      	ldr	r0, [r7, #0]
 800ac6c:	f000 f976 	bl	800af5c <HTS221_0_Probe>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d002      	beq.n	800ac7c <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800ac76:	f04f 33ff 	mov.w	r3, #4294967295
 800ac7a:	e0df      	b.n	800ae3c <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800ac7c:	4a71      	ldr	r2, [pc, #452]	@ (800ae44 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	4970      	ldr	r1, [pc, #448]	@ (800ae48 <IKS01A3_ENV_SENSOR_Init+0x210>)
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ac8e:	f107 0108 	add.w	r1, r7, #8
 800ac92:	4610      	mov	r0, r2
 800ac94:	4798      	blx	r3
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ac9c:	f06f 0306 	mvn.w	r3, #6
 800aca0:	e0cc      	b.n	800ae3c <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800aca2:	7a3b      	ldrb	r3, [r7, #8]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d103      	bne.n	800acb0 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 800aca8:	6a3b      	ldr	r3, [r7, #32]
 800acaa:	f043 0301 	orr.w	r3, r3, #1
 800acae:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800acb0:	7abb      	ldrb	r3, [r7, #10]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d103      	bne.n	800acbe <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800acb6:	6a3b      	ldr	r3, [r7, #32]
 800acb8:	f043 0304 	orr.w	r3, r3, #4
 800acbc:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800acbe:	7a7b      	ldrb	r3, [r7, #9]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d103      	bne.n	800accc <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800acc4:	6a3b      	ldr	r3, [r7, #32]
 800acc6:	f043 0302 	orr.w	r3, r3, #2
 800acca:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800accc:	7afb      	ldrb	r3, [r7, #11]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d17a      	bne.n	800adc8 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800acd2:	6a3b      	ldr	r3, [r7, #32]
 800acd4:	f043 0308 	orr.w	r3, r3, #8
 800acd8:	623b      	str	r3, [r7, #32]
      }
      break;
 800acda:	e075      	b.n	800adc8 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 800acdc:	6838      	ldr	r0, [r7, #0]
 800acde:	f000 fa07 	bl	800b0f0 <LPS22HH_0_Probe>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800ace8:	f04f 33ff 	mov.w	r3, #4294967295
 800acec:	e0a6      	b.n	800ae3c <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800acee:	4a55      	ldr	r2, [pc, #340]	@ (800ae44 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	4953      	ldr	r1, [pc, #332]	@ (800ae48 <IKS01A3_ENV_SENSOR_Init+0x210>)
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ad00:	f107 0108 	add.w	r1, r7, #8
 800ad04:	4610      	mov	r0, r2
 800ad06:	4798      	blx	r3
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d002      	beq.n	800ad14 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ad0e:	f06f 0306 	mvn.w	r3, #6
 800ad12:	e093      	b.n	800ae3c <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800ad14:	7a3b      	ldrb	r3, [r7, #8]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d103      	bne.n	800ad22 <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800ad1a:	6a3b      	ldr	r3, [r7, #32]
 800ad1c:	f043 0301 	orr.w	r3, r3, #1
 800ad20:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800ad22:	7abb      	ldrb	r3, [r7, #10]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d103      	bne.n	800ad30 <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800ad28:	6a3b      	ldr	r3, [r7, #32]
 800ad2a:	f043 0304 	orr.w	r3, r3, #4
 800ad2e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ad30:	7a7b      	ldrb	r3, [r7, #9]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d103      	bne.n	800ad3e <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	f043 0302 	orr.w	r3, r3, #2
 800ad3c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800ad3e:	7afb      	ldrb	r3, [r7, #11]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d143      	bne.n	800adcc <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800ad44:	6a3b      	ldr	r3, [r7, #32]
 800ad46:	f043 0308 	orr.w	r3, r3, #8
 800ad4a:	623b      	str	r3, [r7, #32]
      }
      break;
 800ad4c:	e03e      	b.n	800adcc <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 800ad4e:	6838      	ldr	r0, [r7, #0]
 800ad50:	f000 fa9a 	bl	800b288 <STTS751_0_Probe>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d002      	beq.n	800ad60 <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800ad5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad5e:	e06d      	b.n	800ae3c <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800ad60:	4a38      	ldr	r2, [pc, #224]	@ (800ae44 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	4937      	ldr	r1, [pc, #220]	@ (800ae48 <IKS01A3_ENV_SENSOR_Init+0x210>)
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ad72:	f107 0108 	add.w	r1, r7, #8
 800ad76:	4610      	mov	r0, r2
 800ad78:	4798      	blx	r3
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d002      	beq.n	800ad86 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ad80:	f06f 0306 	mvn.w	r3, #6
 800ad84:	e05a      	b.n	800ae3c <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800ad86:	7a3b      	ldrb	r3, [r7, #8]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d103      	bne.n	800ad94 <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	f043 0301 	orr.w	r3, r3, #1
 800ad92:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800ad94:	7abb      	ldrb	r3, [r7, #10]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d103      	bne.n	800ada2 <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	f043 0304 	orr.w	r3, r3, #4
 800ada0:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ada2:	7a7b      	ldrb	r3, [r7, #9]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d103      	bne.n	800adb0 <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 800ada8:	6a3b      	ldr	r3, [r7, #32]
 800adaa:	f043 0302 	orr.w	r3, r3, #2
 800adae:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800adb0:	7afb      	ldrb	r3, [r7, #11]
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d10c      	bne.n	800add0 <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800adb6:	6a3b      	ldr	r3, [r7, #32]
 800adb8:	f043 0308 	orr.w	r3, r3, #8
 800adbc:	623b      	str	r3, [r7, #32]
      }
      break;
 800adbe:	e007      	b.n	800add0 <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800adc0:	f06f 0301 	mvn.w	r3, #1
 800adc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800adc6:	e004      	b.n	800add2 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 800adc8:	bf00      	nop
 800adca:	e002      	b.n	800add2 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 800adcc:	bf00      	nop
 800adce:	e000      	b.n	800add2 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 800add0:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800add2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add4:	2b00      	cmp	r3, #0
 800add6:	d001      	beq.n	800addc <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800add8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adda:	e02f      	b.n	800ae3c <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 800addc:	2300      	movs	r3, #0
 800adde:	627b      	str	r3, [r7, #36]	@ 0x24
 800ade0:	e028      	b.n	800ae34 <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade6:	4013      	ands	r3, r2
 800ade8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adea:	429a      	cmp	r2, r3
 800adec:	d11c      	bne.n	800ae28 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 800adee:	6a3a      	ldr	r2, [r7, #32]
 800adf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf2:	4013      	ands	r3, r2
 800adf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d116      	bne.n	800ae28 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800adfa:	4a14      	ldr	r2, [pc, #80]	@ (800ae4c <IKS01A3_ENV_SENSOR_Init+0x214>)
 800adfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae02:	4913      	ldr	r1, [pc, #76]	@ (800ae50 <IKS01A3_ENV_SENSOR_Init+0x218>)
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	0092      	lsls	r2, r2, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	490d      	ldr	r1, [pc, #52]	@ (800ae48 <IKS01A3_ENV_SENSOR_Init+0x210>)
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ae18:	4610      	mov	r0, r2
 800ae1a:	4798      	blx	r3
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d002      	beq.n	800ae28 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800ae22:	f06f 0304 	mvn.w	r3, #4
 800ae26:	e009      	b.n	800ae3c <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 800ae28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae2a:	005b      	lsls	r3, r3, #1
 800ae2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae30:	3301      	adds	r3, #1
 800ae32:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	d9d3      	bls.n	800ade2 <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800ae3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3730      	adds	r7, #48	@ 0x30
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	200004c8 	.word	0x200004c8
 800ae48:	2000048c 	.word	0x2000048c
 800ae4c:	20000158 	.word	0x20000158
 800ae50:	20000498 	.word	0x20000498

0800ae54 <IKS01A3_ENV_SENSOR_SetOutputDataRate>:
  * @param  Function Environmental sensor function
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d903      	bls.n	800ae6e <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ae66:	f06f 0301 	mvn.w	r3, #1
 800ae6a:	617b      	str	r3, [r7, #20]
 800ae6c:	e027      	b.n	800aebe <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800ae6e:	4a16      	ldr	r2, [pc, #88]	@ (800aec8 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x74>)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	4013      	ands	r3, r2
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d11b      	bne.n	800aeb8 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800ae80:	4a12      	ldr	r2, [pc, #72]	@ (800aecc <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x78>)
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae88:	4911      	ldr	r1, [pc, #68]	@ (800aed0 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x7c>)
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	0092      	lsls	r2, r2, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	490f      	ldr	r1, [pc, #60]	@ (800aed4 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x80>)
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	4610      	mov	r0, r2
 800aea2:	4798      	blx	r3
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d003      	beq.n	800aeb2 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aeaa:	f06f 0304 	mvn.w	r3, #4
 800aeae:	617b      	str	r3, [r7, #20]
 800aeb0:	e005      	b.n	800aebe <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	617b      	str	r3, [r7, #20]
 800aeb6:	e002      	b.n	800aebe <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800aeb8:	f06f 0301 	mvn.w	r3, #1
 800aebc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800aebe:	697b      	ldr	r3, [r7, #20]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3718      	adds	r7, #24
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	200004d4 	.word	0x200004d4
 800aecc:	20000158 	.word	0x20000158
 800aed0:	20000498 	.word	0x20000498
 800aed4:	2000048c 	.word	0x2000048c

0800aed8 <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d903      	bls.n	800aef2 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800aeea:	f06f 0301 	mvn.w	r3, #1
 800aeee:	617b      	str	r3, [r7, #20]
 800aef0:	e027      	b.n	800af42 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800aef2:	4a16      	ldr	r2, [pc, #88]	@ (800af4c <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	4013      	ands	r3, r2
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	429a      	cmp	r2, r3
 800af02:	d11b      	bne.n	800af3c <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800af04:	4a12      	ldr	r2, [pc, #72]	@ (800af50 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af0c:	4911      	ldr	r1, [pc, #68]	@ (800af54 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	0092      	lsls	r2, r2, #2
 800af12:	4413      	add	r3, r2
 800af14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	490f      	ldr	r1, [pc, #60]	@ (800af58 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	4610      	mov	r0, r2
 800af26:	4798      	blx	r3
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d003      	beq.n	800af36 <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800af2e:	f06f 0304 	mvn.w	r3, #4
 800af32:	617b      	str	r3, [r7, #20]
 800af34:	e005      	b.n	800af42 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800af36:	2300      	movs	r3, #0
 800af38:	617b      	str	r3, [r7, #20]
 800af3a:	e002      	b.n	800af42 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800af3c:	f06f 0301 	mvn.w	r3, #1
 800af40:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800af42:	697b      	ldr	r3, [r7, #20]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3718      	adds	r7, #24
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	200004d4 	.word	0x200004d4
 800af50:	20000158 	.word	0x20000158
 800af54:	20000498 	.word	0x20000498
 800af58:	2000048c 	.word	0x2000048c

0800af5c <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b092      	sub	sp, #72	@ 0x48
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800af64:	2300      	movs	r3, #0
 800af66:	647b      	str	r3, [r7, #68]	@ 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800af68:	2300      	movs	r3, #0
 800af6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800af6c:	23bf      	movs	r3, #191	@ 0xbf
 800af6e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800af72:	4b51      	ldr	r3, [pc, #324]	@ (800b0b8 <HTS221_0_Probe+0x15c>)
 800af74:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800af76:	4b51      	ldr	r3, [pc, #324]	@ (800b0bc <HTS221_0_Probe+0x160>)
 800af78:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800af7a:	4b51      	ldr	r3, [pc, #324]	@ (800b0c0 <HTS221_0_Probe+0x164>)
 800af7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800af7e:	4b51      	ldr	r3, [pc, #324]	@ (800b0c4 <HTS221_0_Probe+0x168>)
 800af80:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800af82:	4b51      	ldr	r3, [pc, #324]	@ (800b0c8 <HTS221_0_Probe+0x16c>)
 800af84:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800af86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af8a:	4619      	mov	r1, r3
 800af8c:	484f      	ldr	r0, [pc, #316]	@ (800b0cc <HTS221_0_Probe+0x170>)
 800af8e:	f7f7 feaf 	bl	8002cf0 <HTS221_RegisterBusIO>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d003      	beq.n	800afa0 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800af98:	f06f 0306 	mvn.w	r3, #6
 800af9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af9e:	e085      	b.n	800b0ac <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800afa0:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800afa4:	4619      	mov	r1, r3
 800afa6:	4849      	ldr	r0, [pc, #292]	@ (800b0cc <HTS221_0_Probe+0x170>)
 800afa8:	f7f7 ff2b 	bl	8002e02 <HTS221_ReadID>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d003      	beq.n	800afba <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800afb2:	f06f 0306 	mvn.w	r3, #6
 800afb6:	647b      	str	r3, [r7, #68]	@ 0x44
 800afb8:	e078      	b.n	800b0ac <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 800afba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800afbe:	2bbc      	cmp	r3, #188	@ 0xbc
 800afc0:	d003      	beq.n	800afca <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800afc2:	f06f 0306 	mvn.w	r3, #6
 800afc6:	647b      	str	r3, [r7, #68]	@ 0x44
 800afc8:	e070      	b.n	800b0ac <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800afca:	f107 0308 	add.w	r3, r7, #8
 800afce:	4619      	mov	r1, r3
 800afd0:	483e      	ldr	r0, [pc, #248]	@ (800b0cc <HTS221_0_Probe+0x170>)
 800afd2:	f7f7 ff2d 	bl	8002e30 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 800afd6:	7a3b      	ldrb	r3, [r7, #8]
 800afd8:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800afda:	7a7b      	ldrb	r3, [r7, #9]
 800afdc:	005b      	lsls	r3, r3, #1
 800afde:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800afe0:	7abb      	ldrb	r3, [r7, #10]
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800afe6:	7afb      	ldrb	r3, [r7, #11]
 800afe8:	00db      	lsls	r3, r3, #3
 800afea:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 800afec:	4a38      	ldr	r2, [pc, #224]	@ (800b0d0 <HTS221_0_Probe+0x174>)
 800afee:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 800aff0:	4b38      	ldr	r3, [pc, #224]	@ (800b0d4 <HTS221_0_Probe+0x178>)
 800aff2:	4a36      	ldr	r2, [pc, #216]	@ (800b0cc <HTS221_0_Probe+0x170>)
 800aff4:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800aff6:	4b38      	ldr	r3, [pc, #224]	@ (800b0d8 <HTS221_0_Probe+0x17c>)
 800aff8:	4a38      	ldr	r2, [pc, #224]	@ (800b0dc <HTS221_0_Probe+0x180>)
 800affa:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800affc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800affe:	2b00      	cmp	r3, #0
 800b000:	d11d      	bne.n	800b03e <HTS221_0_Probe+0xe2>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d018      	beq.n	800b03e <HTS221_0_Probe+0xe2>
 800b00c:	7a3b      	ldrb	r3, [r7, #8]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d115      	bne.n	800b03e <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800b012:	4b33      	ldr	r3, [pc, #204]	@ (800b0e0 <HTS221_0_Probe+0x184>)
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	4a33      	ldr	r2, [pc, #204]	@ (800b0e4 <HTS221_0_Probe+0x188>)
 800b018:	4933      	ldr	r1, [pc, #204]	@ (800b0e8 <HTS221_0_Probe+0x18c>)
 800b01a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800b01e:	4b2e      	ldr	r3, [pc, #184]	@ (800b0d8 <HTS221_0_Probe+0x17c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a2b      	ldr	r2, [pc, #172]	@ (800b0d4 <HTS221_0_Probe+0x178>)
 800b026:	6812      	ldr	r2, [r2, #0]
 800b028:	4610      	mov	r0, r2
 800b02a:	4798      	blx	r3
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d003      	beq.n	800b03a <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b032:	f06f 0304 	mvn.w	r3, #4
 800b036:	647b      	str	r3, [r7, #68]	@ 0x44
 800b038:	e001      	b.n	800b03e <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b03a:	2300      	movs	r3, #0
 800b03c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800b03e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b040:	2b00      	cmp	r3, #0
 800b042:	d11d      	bne.n	800b080 <HTS221_0_Probe+0x124>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f003 0304 	and.w	r3, r3, #4
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d018      	beq.n	800b080 <HTS221_0_Probe+0x124>
 800b04e:	7abb      	ldrb	r3, [r7, #10]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d115      	bne.n	800b080 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800b054:	4b22      	ldr	r3, [pc, #136]	@ (800b0e0 <HTS221_0_Probe+0x184>)
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	4a22      	ldr	r2, [pc, #136]	@ (800b0e4 <HTS221_0_Probe+0x188>)
 800b05a:	4924      	ldr	r1, [pc, #144]	@ (800b0ec <HTS221_0_Probe+0x190>)
 800b05c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800b060:	4b1d      	ldr	r3, [pc, #116]	@ (800b0d8 <HTS221_0_Probe+0x17c>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a1b      	ldr	r2, [pc, #108]	@ (800b0d4 <HTS221_0_Probe+0x178>)
 800b068:	6812      	ldr	r2, [r2, #0]
 800b06a:	4610      	mov	r0, r2
 800b06c:	4798      	blx	r3
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d003      	beq.n	800b07c <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b074:	f06f 0304 	mvn.w	r3, #4
 800b078:	647b      	str	r3, [r7, #68]	@ 0x44
 800b07a:	e001      	b.n	800b080 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b07c:	2300      	movs	r3, #0
 800b07e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b082:	2b00      	cmp	r3, #0
 800b084:	d107      	bne.n	800b096 <HTS221_0_Probe+0x13a>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f003 0302 	and.w	r3, r3, #2
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b090:	f06f 0304 	mvn.w	r3, #4
 800b094:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d107      	bne.n	800b0ac <HTS221_0_Probe+0x150>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f003 0308 	and.w	r3, r3, #8
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d002      	beq.n	800b0ac <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0a6:	f06f 0304 	mvn.w	r3, #4
 800b0aa:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b0ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3748      	adds	r7, #72	@ 0x48
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	08002875 	.word	0x08002875
 800b0bc:	080028d9 	.word	0x080028d9
 800b0c0:	0800298d 	.word	0x0800298d
 800b0c4:	08002929 	.word	0x08002929
 800b0c8:	080029f1 	.word	0x080029f1
 800b0cc:	200004e0 	.word	0x200004e0
 800b0d0:	200004d4 	.word	0x200004d4
 800b0d4:	2000048c 	.word	0x2000048c
 800b0d8:	200004c8 	.word	0x200004c8
 800b0dc:	20000004 	.word	0x20000004
 800b0e0:	20000158 	.word	0x20000158
 800b0e4:	20000498 	.word	0x20000498
 800b0e8:	20000028 	.word	0x20000028
 800b0ec:	20000014 	.word	0x20000014

0800b0f0 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b092      	sub	sp, #72	@ 0x48
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 800b100:	23bb      	movs	r3, #187	@ 0xbb
 800b102:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b106:	4b52      	ldr	r3, [pc, #328]	@ (800b250 <LPS22HH_0_Probe+0x160>)
 800b108:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b10a:	4b52      	ldr	r3, [pc, #328]	@ (800b254 <LPS22HH_0_Probe+0x164>)
 800b10c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b10e:	4b52      	ldr	r3, [pc, #328]	@ (800b258 <LPS22HH_0_Probe+0x168>)
 800b110:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b112:	4b52      	ldr	r3, [pc, #328]	@ (800b25c <LPS22HH_0_Probe+0x16c>)
 800b114:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b116:	4b52      	ldr	r3, [pc, #328]	@ (800b260 <LPS22HH_0_Probe+0x170>)
 800b118:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800b11a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b11e:	4619      	mov	r1, r3
 800b120:	4850      	ldr	r0, [pc, #320]	@ (800b264 <LPS22HH_0_Probe+0x174>)
 800b122:	f7fa ff45 	bl	8005fb0 <LPS22HH_RegisterBusIO>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b12c:	f06f 0306 	mvn.w	r3, #6
 800b130:	647b      	str	r3, [r7, #68]	@ 0x44
 800b132:	e087      	b.n	800b244 <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 800b134:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b138:	4619      	mov	r1, r3
 800b13a:	484a      	ldr	r0, [pc, #296]	@ (800b264 <LPS22HH_0_Probe+0x174>)
 800b13c:	f7fa ffe1 	bl	8006102 <LPS22HH_ReadID>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d003      	beq.n	800b14e <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b146:	f06f 0306 	mvn.w	r3, #6
 800b14a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b14c:	e07a      	b.n	800b244 <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 800b14e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b152:	2bb3      	cmp	r3, #179	@ 0xb3
 800b154:	d003      	beq.n	800b15e <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b156:	f06f 0306 	mvn.w	r3, #6
 800b15a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b15c:	e072      	b.n	800b244 <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 800b15e:	f107 0308 	add.w	r3, r7, #8
 800b162:	4619      	mov	r1, r3
 800b164:	483f      	ldr	r0, [pc, #252]	@ (800b264 <LPS22HH_0_Probe+0x174>)
 800b166:	f7fa ffe3 	bl	8006130 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 800b16a:	7a3b      	ldrb	r3, [r7, #8]
 800b16c:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 800b16e:	7a7b      	ldrb	r3, [r7, #9]
 800b170:	005b      	lsls	r3, r3, #1
 800b172:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 800b174:	7abb      	ldrb	r3, [r7, #10]
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 800b17a:	7afb      	ldrb	r3, [r7, #11]
 800b17c:	00db      	lsls	r3, r3, #3
 800b17e:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 800b180:	4a39      	ldr	r2, [pc, #228]	@ (800b268 <LPS22HH_0_Probe+0x178>)
 800b182:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 800b184:	4b39      	ldr	r3, [pc, #228]	@ (800b26c <LPS22HH_0_Probe+0x17c>)
 800b186:	4a37      	ldr	r2, [pc, #220]	@ (800b264 <LPS22HH_0_Probe+0x174>)
 800b188:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800b18a:	4b39      	ldr	r3, [pc, #228]	@ (800b270 <LPS22HH_0_Probe+0x180>)
 800b18c:	4a39      	ldr	r2, [pc, #228]	@ (800b274 <LPS22HH_0_Probe+0x184>)
 800b18e:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b192:	2b00      	cmp	r3, #0
 800b194:	d11e      	bne.n	800b1d4 <LPS22HH_0_Probe+0xe4>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d019      	beq.n	800b1d4 <LPS22HH_0_Probe+0xe4>
 800b1a0:	7a3b      	ldrb	r3, [r7, #8]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d116      	bne.n	800b1d4 <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800b1a6:	4b34      	ldr	r3, [pc, #208]	@ (800b278 <LPS22HH_0_Probe+0x188>)
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	4a34      	ldr	r2, [pc, #208]	@ (800b27c <LPS22HH_0_Probe+0x18c>)
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	4934      	ldr	r1, [pc, #208]	@ (800b280 <LPS22HH_0_Probe+0x190>)
 800b1b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800b1b4:	4b2e      	ldr	r3, [pc, #184]	@ (800b270 <LPS22HH_0_Probe+0x180>)
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a2c      	ldr	r2, [pc, #176]	@ (800b26c <LPS22HH_0_Probe+0x17c>)
 800b1bc:	6852      	ldr	r2, [r2, #4]
 800b1be:	4610      	mov	r0, r2
 800b1c0:	4798      	blx	r3
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d003      	beq.n	800b1d0 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1c8:	f06f 0304 	mvn.w	r3, #4
 800b1cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1ce:	e001      	b.n	800b1d4 <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800b1d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d11e      	bne.n	800b218 <LPS22HH_0_Probe+0x128>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f003 0302 	and.w	r3, r3, #2
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d019      	beq.n	800b218 <LPS22HH_0_Probe+0x128>
 800b1e4:	7a7b      	ldrb	r3, [r7, #9]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d116      	bne.n	800b218 <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800b1ea:	4b23      	ldr	r3, [pc, #140]	@ (800b278 <LPS22HH_0_Probe+0x188>)
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	4a23      	ldr	r2, [pc, #140]	@ (800b27c <LPS22HH_0_Probe+0x18c>)
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	4924      	ldr	r1, [pc, #144]	@ (800b284 <LPS22HH_0_Probe+0x194>)
 800b1f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800b1f8:	4b1d      	ldr	r3, [pc, #116]	@ (800b270 <LPS22HH_0_Probe+0x180>)
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a1b      	ldr	r2, [pc, #108]	@ (800b26c <LPS22HH_0_Probe+0x17c>)
 800b200:	6852      	ldr	r2, [r2, #4]
 800b202:	4610      	mov	r0, r2
 800b204:	4798      	blx	r3
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b20c:	f06f 0304 	mvn.w	r3, #4
 800b210:	647b      	str	r3, [r7, #68]	@ 0x44
 800b212:	e001      	b.n	800b218 <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b214:	2300      	movs	r3, #0
 800b216:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d107      	bne.n	800b22e <LPS22HH_0_Probe+0x13e>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f003 0304 	and.w	r3, r3, #4
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b228:	f06f 0304 	mvn.w	r3, #4
 800b22c:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b22e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b230:	2b00      	cmp	r3, #0
 800b232:	d107      	bne.n	800b244 <LPS22HH_0_Probe+0x154>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f003 0308 	and.w	r3, r3, #8
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d002      	beq.n	800b244 <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b23e:	f06f 0304 	mvn.w	r3, #4
 800b242:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 800b244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b246:	4618      	mov	r0, r3
 800b248:	3748      	adds	r7, #72	@ 0x48
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	08002875 	.word	0x08002875
 800b254:	080028d9 	.word	0x080028d9
 800b258:	0800298d 	.word	0x0800298d
 800b25c:	08002929 	.word	0x08002929
 800b260:	080029f1 	.word	0x080029f1
 800b264:	20000514 	.word	0x20000514
 800b268:	200004d4 	.word	0x200004d4
 800b26c:	2000048c 	.word	0x2000048c
 800b270:	200004c8 	.word	0x200004c8
 800b274:	200000a4 	.word	0x200000a4
 800b278:	20000158 	.word	0x20000158
 800b27c:	20000498 	.word	0x20000498
 800b280:	200000c8 	.word	0x200000c8
 800b284:	200000b4 	.word	0x200000b4

0800b288 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b092      	sub	sp, #72	@ 0x48
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b290:	2300      	movs	r3, #0
 800b292:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 800b294:	2300      	movs	r3, #0
 800b296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 800b298:	2395      	movs	r3, #149	@ 0x95
 800b29a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b29e:	4b46      	ldr	r3, [pc, #280]	@ (800b3b8 <STTS751_0_Probe+0x130>)
 800b2a0:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b2a2:	4b46      	ldr	r3, [pc, #280]	@ (800b3bc <STTS751_0_Probe+0x134>)
 800b2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b2a6:	4b46      	ldr	r3, [pc, #280]	@ (800b3c0 <STTS751_0_Probe+0x138>)
 800b2a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b2aa:	4b46      	ldr	r3, [pc, #280]	@ (800b3c4 <STTS751_0_Probe+0x13c>)
 800b2ac:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b2ae:	4b46      	ldr	r3, [pc, #280]	@ (800b3c8 <STTS751_0_Probe+0x140>)
 800b2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 800b2b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4844      	ldr	r0, [pc, #272]	@ (800b3cc <STTS751_0_Probe+0x144>)
 800b2ba:	f7fe ffdd 	bl	800a278 <STTS751_RegisterBusIO>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d003      	beq.n	800b2cc <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2c4:	f06f 0306 	mvn.w	r3, #6
 800b2c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2ca:	e070      	b.n	800b3ae <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 800b2cc:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	483e      	ldr	r0, [pc, #248]	@ (800b3cc <STTS751_0_Probe+0x144>)
 800b2d4:	f7ff f86f 	bl	800a3b6 <STTS751_ReadID>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d003      	beq.n	800b2e6 <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2de:	f06f 0306 	mvn.w	r3, #6
 800b2e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2e4:	e063      	b.n	800b3ae <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 800b2e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b2ea:	2b53      	cmp	r3, #83	@ 0x53
 800b2ec:	d003      	beq.n	800b2f6 <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2ee:	f06f 0306 	mvn.w	r3, #6
 800b2f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2f4:	e05b      	b.n	800b3ae <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 800b2f6:	f107 0308 	add.w	r3, r7, #8
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	4833      	ldr	r0, [pc, #204]	@ (800b3cc <STTS751_0_Probe+0x144>)
 800b2fe:	f7ff f875 	bl	800a3ec <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 800b302:	7a3b      	ldrb	r3, [r7, #8]
 800b304:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 800b306:	7a7b      	ldrb	r3, [r7, #9]
 800b308:	005b      	lsls	r3, r3, #1
 800b30a:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 800b30c:	7abb      	ldrb	r3, [r7, #10]
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 800b312:	7afb      	ldrb	r3, [r7, #11]
 800b314:	00db      	lsls	r3, r3, #3
 800b316:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 800b318:	4a2d      	ldr	r2, [pc, #180]	@ (800b3d0 <STTS751_0_Probe+0x148>)
 800b31a:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 800b31c:	4b2d      	ldr	r3, [pc, #180]	@ (800b3d4 <STTS751_0_Probe+0x14c>)
 800b31e:	4a2b      	ldr	r2, [pc, #172]	@ (800b3cc <STTS751_0_Probe+0x144>)
 800b320:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 800b322:	4b2d      	ldr	r3, [pc, #180]	@ (800b3d8 <STTS751_0_Probe+0x150>)
 800b324:	4a2d      	ldr	r2, [pc, #180]	@ (800b3dc <STTS751_0_Probe+0x154>)
 800b326:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d11e      	bne.n	800b36c <STTS751_0_Probe+0xe4>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f003 0301 	and.w	r3, r3, #1
 800b334:	2b00      	cmp	r3, #0
 800b336:	d019      	beq.n	800b36c <STTS751_0_Probe+0xe4>
 800b338:	7a3b      	ldrb	r3, [r7, #8]
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d116      	bne.n	800b36c <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 800b33e:	4b28      	ldr	r3, [pc, #160]	@ (800b3e0 <STTS751_0_Probe+0x158>)
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	4a28      	ldr	r2, [pc, #160]	@ (800b3e4 <STTS751_0_Probe+0x15c>)
 800b344:	3308      	adds	r3, #8
 800b346:	4928      	ldr	r1, [pc, #160]	@ (800b3e8 <STTS751_0_Probe+0x160>)
 800b348:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 800b34c:	4b22      	ldr	r3, [pc, #136]	@ (800b3d8 <STTS751_0_Probe+0x150>)
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a20      	ldr	r2, [pc, #128]	@ (800b3d4 <STTS751_0_Probe+0x14c>)
 800b354:	6892      	ldr	r2, [r2, #8]
 800b356:	4610      	mov	r0, r2
 800b358:	4798      	blx	r3
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d003      	beq.n	800b368 <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b360:	f06f 0304 	mvn.w	r3, #4
 800b364:	647b      	str	r3, [r7, #68]	@ 0x44
 800b366:	e001      	b.n	800b36c <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b368:	2300      	movs	r3, #0
 800b36a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b36c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d107      	bne.n	800b382 <STTS751_0_Probe+0xfa>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f003 0304 	and.w	r3, r3, #4
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d002      	beq.n	800b382 <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b37c:	f06f 0304 	mvn.w	r3, #4
 800b380:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b384:	2b00      	cmp	r3, #0
 800b386:	d107      	bne.n	800b398 <STTS751_0_Probe+0x110>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f003 0302 	and.w	r3, r3, #2
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d002      	beq.n	800b398 <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b392:	f06f 0304 	mvn.w	r3, #4
 800b396:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d107      	bne.n	800b3ae <STTS751_0_Probe+0x126>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f003 0308 	and.w	r3, r3, #8
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d002      	beq.n	800b3ae <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3a8:	f06f 0304 	mvn.w	r3, #4
 800b3ac:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 800b3ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3748      	adds	r7, #72	@ 0x48
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	08002875 	.word	0x08002875
 800b3bc:	080028d9 	.word	0x080028d9
 800b3c0:	0800298d 	.word	0x0800298d
 800b3c4:	08002929 	.word	0x08002929
 800b3c8:	080029f1 	.word	0x080029f1
 800b3cc:	20000548 	.word	0x20000548
 800b3d0:	200004d4 	.word	0x200004d4
 800b3d4:	2000048c 	.word	0x2000048c
 800b3d8:	200004c8 	.word	0x200004c8
 800b3dc:	20000134 	.word	0x20000134
 800b3e0:	20000158 	.word	0x20000158
 800b3e4:	20000498 	.word	0x20000498
 800b3e8:	20000144 	.word	0x20000144

0800b3ec <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b08e      	sub	sp, #56	@ 0x38
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b3fe:	2300      	movs	r3, #0
 800b400:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2b02      	cmp	r3, #2
 800b406:	d06e      	beq.n	800b4e6 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	f200 809d 	bhi.w	800b54a <IKS01A3_MOTION_SENSOR_Init+0x15e>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d003      	beq.n	800b41e <IKS01A3_MOTION_SENSOR_Init+0x32>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d032      	beq.n	800b482 <IKS01A3_MOTION_SENSOR_Init+0x96>
 800b41c:	e095      	b.n	800b54a <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 800b41e:	6838      	ldr	r0, [r7, #0]
 800b420:	f000 f968 	bl	800b6f4 <LSM6DSO_0_Probe>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d002      	beq.n	800b430 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800b42a:	f04f 33ff 	mov.w	r3, #4294967295
 800b42e:	e0cc      	b.n	800b5ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b430:	4a68      	ldr	r2, [pc, #416]	@ (800b5d4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	4967      	ldr	r1, [pc, #412]	@ (800b5d8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b442:	f107 010c 	add.w	r1, r7, #12
 800b446:	4610      	mov	r0, r2
 800b448:	4798      	blx	r3
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b450:	f06f 0306 	mvn.w	r3, #6
 800b454:	e0b9      	b.n	800b5ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b456:	7b3b      	ldrb	r3, [r7, #12]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d103      	bne.n	800b464 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800b45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b45e:	f043 0302 	orr.w	r3, r3, #2
 800b462:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b464:	7b7b      	ldrb	r3, [r7, #13]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d103      	bne.n	800b472 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800b46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b46c:	f043 0301 	orr.w	r3, r3, #1
 800b470:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b472:	7bbb      	ldrb	r3, [r7, #14]
 800b474:	2b01      	cmp	r3, #1
 800b476:	d16c      	bne.n	800b552 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800b478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b47a:	f043 0304 	orr.w	r3, r3, #4
 800b47e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b480:	e067      	b.n	800b552 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 800b482:	6838      	ldr	r0, [r7, #0]
 800b484:	f000 f9f6 	bl	800b874 <LIS2DW12_0_Probe>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800b48e:	f04f 33ff 	mov.w	r3, #4294967295
 800b492:	e09a      	b.n	800b5ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b494:	4a4f      	ldr	r2, [pc, #316]	@ (800b5d4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	494e      	ldr	r1, [pc, #312]	@ (800b5d8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b4a6:	f107 010c 	add.w	r1, r7, #12
 800b4aa:	4610      	mov	r0, r2
 800b4ac:	4798      	blx	r3
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d002      	beq.n	800b4ba <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b4b4:	f06f 0306 	mvn.w	r3, #6
 800b4b8:	e087      	b.n	800b5ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b4ba:	7b3b      	ldrb	r3, [r7, #12]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d103      	bne.n	800b4c8 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800b4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c2:	f043 0302 	orr.w	r3, r3, #2
 800b4c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b4c8:	7b7b      	ldrb	r3, [r7, #13]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d103      	bne.n	800b4d6 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800b4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d0:	f043 0301 	orr.w	r3, r3, #1
 800b4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b4d6:	7bbb      	ldrb	r3, [r7, #14]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d13c      	bne.n	800b556 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800b4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4de:	f043 0304 	orr.w	r3, r3, #4
 800b4e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b4e4:	e037      	b.n	800b556 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b4e6:	6838      	ldr	r0, [r7, #0]
 800b4e8:	f000 fa6c 	bl	800b9c4 <LIS2MDL_0_Probe>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d002      	beq.n	800b4f8 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800b4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f6:	e068      	b.n	800b5ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b4f8:	4a36      	ldr	r2, [pc, #216]	@ (800b5d4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	4935      	ldr	r1, [pc, #212]	@ (800b5d8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b50a:	f107 010c 	add.w	r1, r7, #12
 800b50e:	4610      	mov	r0, r2
 800b510:	4798      	blx	r3
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b518:	f06f 0306 	mvn.w	r3, #6
 800b51c:	e055      	b.n	800b5ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b51e:	7b3b      	ldrb	r3, [r7, #12]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d103      	bne.n	800b52c <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800b524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b526:	f043 0302 	orr.w	r3, r3, #2
 800b52a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b52c:	7b7b      	ldrb	r3, [r7, #13]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d103      	bne.n	800b53a <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800b532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b534:	f043 0301 	orr.w	r3, r3, #1
 800b538:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b53a:	7bbb      	ldrb	r3, [r7, #14]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d10c      	bne.n	800b55a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800b540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b542:	f043 0304 	orr.w	r3, r3, #4
 800b546:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b548:	e007      	b.n	800b55a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b54a:	f06f 0301 	mvn.w	r3, #1
 800b54e:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800b550:	e004      	b.n	800b55c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800b552:	bf00      	nop
 800b554:	e002      	b.n	800b55c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800b556:	bf00      	nop
 800b558:	e000      	b.n	800b55c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800b55a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d001      	beq.n	800b566 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800b562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b564:	e031      	b.n	800b5ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800b566:	2300      	movs	r3, #0
 800b568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b56a:	e02a      	b.n	800b5c2 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b570:	4013      	ands	r3, r2
 800b572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b574:	429a      	cmp	r2, r3
 800b576:	d11e      	bne.n	800b5b6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 800b578:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57c:	4013      	ands	r3, r2
 800b57e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b580:	429a      	cmp	r2, r3
 800b582:	d118      	bne.n	800b5b6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b584:	4a15      	ldr	r2, [pc, #84]	@ (800b5dc <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 800b586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b588:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b58c:	4814      	ldr	r0, [pc, #80]	@ (800b5e0 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	4613      	mov	r3, r2
 800b592:	005b      	lsls	r3, r3, #1
 800b594:	4413      	add	r3, r2
 800b596:	440b      	add	r3, r1
 800b598:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	490e      	ldr	r1, [pc, #56]	@ (800b5d8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b5a6:	4610      	mov	r0, r2
 800b5a8:	4798      	blx	r3
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b5b0:	f06f 0304 	mvn.w	r3, #4
 800b5b4:	e009      	b.n	800b5ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b8:	005b      	lsls	r3, r3, #1
 800b5ba:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800b5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5be:	3301      	adds	r3, #1
 800b5c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d9d1      	bls.n	800b56c <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800b5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3738      	adds	r7, #56	@ 0x38
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	200005b0 	.word	0x200005b0
 800b5d8:	20000580 	.word	0x20000580
 800b5dc:	2000017c 	.word	0x2000017c
 800b5e0:	2000058c 	.word	0x2000058c

0800b5e4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d903      	bls.n	800b5fe <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b5f6:	f06f 0301 	mvn.w	r3, #1
 800b5fa:	617b      	str	r3, [r7, #20]
 800b5fc:	e029      	b.n	800b652 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b5fe:	4a17      	ldr	r2, [pc, #92]	@ (800b65c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x78>)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	4013      	ands	r3, r2
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d11d      	bne.n	800b64c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800b610:	4a13      	ldr	r2, [pc, #76]	@ (800b660 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b618:	4812      	ldr	r0, [pc, #72]	@ (800b664 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	4613      	mov	r3, r2
 800b61e:	005b      	lsls	r3, r3, #1
 800b620:	4413      	add	r3, r2
 800b622:	440b      	add	r3, r1
 800b624:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	490f      	ldr	r1, [pc, #60]	@ (800b668 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b632:	6879      	ldr	r1, [r7, #4]
 800b634:	4610      	mov	r0, r2
 800b636:	4798      	blx	r3
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d003      	beq.n	800b646 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b63e:	f06f 0304 	mvn.w	r3, #4
 800b642:	617b      	str	r3, [r7, #20]
 800b644:	e005      	b.n	800b652 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b646:	2300      	movs	r3, #0
 800b648:	617b      	str	r3, [r7, #20]
 800b64a:	e002      	b.n	800b652 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b64c:	f06f 0301 	mvn.w	r3, #1
 800b650:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b652:	697b      	ldr	r3, [r7, #20]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3718      	adds	r7, #24
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	200005bc 	.word	0x200005bc
 800b660:	2000017c 	.word	0x2000017c
 800b664:	2000058c 	.word	0x2000058c
 800b668:	20000580 	.word	0x20000580

0800b66c <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b086      	sub	sp, #24
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d903      	bls.n	800b686 <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b67e:	f06f 0301 	mvn.w	r3, #1
 800b682:	617b      	str	r3, [r7, #20]
 800b684:	e029      	b.n	800b6da <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b686:	4a17      	ldr	r2, [pc, #92]	@ (800b6e4 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	4013      	ands	r3, r2
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	429a      	cmp	r2, r3
 800b696:	d11d      	bne.n	800b6d4 <IKS01A3_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800b698:	4a13      	ldr	r2, [pc, #76]	@ (800b6e8 <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b6a0:	4812      	ldr	r0, [pc, #72]	@ (800b6ec <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	4413      	add	r3, r2
 800b6aa:	440b      	add	r3, r1
 800b6ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	490f      	ldr	r1, [pc, #60]	@ (800b6f0 <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	4610      	mov	r0, r2
 800b6be:	4798      	blx	r3
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d003      	beq.n	800b6ce <IKS01A3_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6c6:	f06f 0304 	mvn.w	r3, #4
 800b6ca:	617b      	str	r3, [r7, #20]
 800b6cc:	e005      	b.n	800b6da <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	617b      	str	r3, [r7, #20]
 800b6d2:	e002      	b.n	800b6da <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b6d4:	f06f 0301 	mvn.w	r3, #1
 800b6d8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b6da:	697b      	ldr	r3, [r7, #20]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3718      	adds	r7, #24
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	200005bc 	.word	0x200005bc
 800b6e8:	2000017c 	.word	0x2000017c
 800b6ec:	2000058c 	.word	0x2000058c
 800b6f0:	20000580 	.word	0x20000580

0800b6f4 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b094      	sub	sp, #80	@ 0x50
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800b700:	2300      	movs	r3, #0
 800b702:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800b704:	23d7      	movs	r3, #215	@ 0xd7
 800b706:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b70a:	4b4b      	ldr	r3, [pc, #300]	@ (800b838 <LSM6DSO_0_Probe+0x144>)
 800b70c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b70e:	4b4b      	ldr	r3, [pc, #300]	@ (800b83c <LSM6DSO_0_Probe+0x148>)
 800b710:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b712:	4b4b      	ldr	r3, [pc, #300]	@ (800b840 <LSM6DSO_0_Probe+0x14c>)
 800b714:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b716:	4b4b      	ldr	r3, [pc, #300]	@ (800b844 <LSM6DSO_0_Probe+0x150>)
 800b718:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b71a:	4b4b      	ldr	r3, [pc, #300]	@ (800b848 <LSM6DSO_0_Probe+0x154>)
 800b71c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800b71e:	4b4b      	ldr	r3, [pc, #300]	@ (800b84c <LSM6DSO_0_Probe+0x158>)
 800b720:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800b722:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b726:	4619      	mov	r1, r3
 800b728:	4849      	ldr	r0, [pc, #292]	@ (800b850 <LSM6DSO_0_Probe+0x15c>)
 800b72a:	f7fb fa7f 	bl	8006c2c <LSM6DSO_RegisterBusIO>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d003      	beq.n	800b73c <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b734:	f06f 0306 	mvn.w	r3, #6
 800b738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b73a:	e077      	b.n	800b82c <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800b73c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b740:	4619      	mov	r1, r3
 800b742:	4843      	ldr	r0, [pc, #268]	@ (800b850 <LSM6DSO_0_Probe+0x15c>)
 800b744:	f7fb fb7c 	bl	8006e40 <LSM6DSO_ReadID>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b74e:	f06f 0306 	mvn.w	r3, #6
 800b752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b754:	e06a      	b.n	800b82c <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 800b756:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b75a:	2b6c      	cmp	r3, #108	@ 0x6c
 800b75c:	d003      	beq.n	800b766 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b75e:	f06f 0306 	mvn.w	r3, #6
 800b762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b764:	e062      	b.n	800b82c <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800b766:	f107 030c 	add.w	r3, r7, #12
 800b76a:	4619      	mov	r1, r3
 800b76c:	4838      	ldr	r0, [pc, #224]	@ (800b850 <LSM6DSO_0_Probe+0x15c>)
 800b76e:	f7fb fb7d 	bl	8006e6c <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b772:	7b7b      	ldrb	r3, [r7, #13]
 800b774:	461a      	mov	r2, r3
 800b776:	7b3b      	ldrb	r3, [r7, #12]
 800b778:	005b      	lsls	r3, r3, #1
 800b77a:	431a      	orrs	r2, r3
 800b77c:	7bbb      	ldrb	r3, [r7, #14]
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4313      	orrs	r3, r2
 800b782:	4a34      	ldr	r2, [pc, #208]	@ (800b854 <LSM6DSO_0_Probe+0x160>)
 800b784:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800b786:	4b34      	ldr	r3, [pc, #208]	@ (800b858 <LSM6DSO_0_Probe+0x164>)
 800b788:	4a31      	ldr	r2, [pc, #196]	@ (800b850 <LSM6DSO_0_Probe+0x15c>)
 800b78a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800b78c:	4b33      	ldr	r3, [pc, #204]	@ (800b85c <LSM6DSO_0_Probe+0x168>)
 800b78e:	4a34      	ldr	r2, [pc, #208]	@ (800b860 <LSM6DSO_0_Probe+0x16c>)
 800b790:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b794:	2b00      	cmp	r3, #0
 800b796:	d11d      	bne.n	800b7d4 <LSM6DSO_0_Probe+0xe0>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f003 0301 	and.w	r3, r3, #1
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d018      	beq.n	800b7d4 <LSM6DSO_0_Probe+0xe0>
 800b7a2:	7b7b      	ldrb	r3, [r7, #13]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d115      	bne.n	800b7d4 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800b7a8:	4b2e      	ldr	r3, [pc, #184]	@ (800b864 <LSM6DSO_0_Probe+0x170>)
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	4a2e      	ldr	r2, [pc, #184]	@ (800b868 <LSM6DSO_0_Probe+0x174>)
 800b7ae:	492f      	ldr	r1, [pc, #188]	@ (800b86c <LSM6DSO_0_Probe+0x178>)
 800b7b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800b7b4:	4b29      	ldr	r3, [pc, #164]	@ (800b85c <LSM6DSO_0_Probe+0x168>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a27      	ldr	r2, [pc, #156]	@ (800b858 <LSM6DSO_0_Probe+0x164>)
 800b7bc:	6812      	ldr	r2, [r2, #0]
 800b7be:	4610      	mov	r0, r2
 800b7c0:	4798      	blx	r3
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d003      	beq.n	800b7d0 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b7c8:	f06f 0304 	mvn.w	r3, #4
 800b7cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7ce:	e001      	b.n	800b7d4 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b7d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d11d      	bne.n	800b816 <LSM6DSO_0_Probe+0x122>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f003 0302 	and.w	r3, r3, #2
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d018      	beq.n	800b816 <LSM6DSO_0_Probe+0x122>
 800b7e4:	7b3b      	ldrb	r3, [r7, #12]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d115      	bne.n	800b816 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b7ea:	4b1e      	ldr	r3, [pc, #120]	@ (800b864 <LSM6DSO_0_Probe+0x170>)
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	4a1e      	ldr	r2, [pc, #120]	@ (800b868 <LSM6DSO_0_Probe+0x174>)
 800b7f0:	491f      	ldr	r1, [pc, #124]	@ (800b870 <LSM6DSO_0_Probe+0x17c>)
 800b7f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800b7f6:	4b19      	ldr	r3, [pc, #100]	@ (800b85c <LSM6DSO_0_Probe+0x168>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a16      	ldr	r2, [pc, #88]	@ (800b858 <LSM6DSO_0_Probe+0x164>)
 800b7fe:	6812      	ldr	r2, [r2, #0]
 800b800:	4610      	mov	r0, r2
 800b802:	4798      	blx	r3
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d003      	beq.n	800b812 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b80a:	f06f 0304 	mvn.w	r3, #4
 800b80e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b810:	e001      	b.n	800b816 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b812:	2300      	movs	r3, #0
 800b814:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d107      	bne.n	800b82c <LSM6DSO_0_Probe+0x138>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f003 0304 	and.w	r3, r3, #4
 800b822:	2b00      	cmp	r3, #0
 800b824:	d002      	beq.n	800b82c <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b826:	f06f 0304 	mvn.w	r3, #4
 800b82a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800b82c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3750      	adds	r7, #80	@ 0x50
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	08002875 	.word	0x08002875
 800b83c:	080028d9 	.word	0x080028d9
 800b840:	0800298d 	.word	0x0800298d
 800b844:	08002929 	.word	0x08002929
 800b848:	080029f1 	.word	0x080029f1
 800b84c:	0800bc69 	.word	0x0800bc69
 800b850:	200005c8 	.word	0x200005c8
 800b854:	200005bc 	.word	0x200005bc
 800b858:	20000580 	.word	0x20000580
 800b85c:	200005b0 	.word	0x200005b0
 800b860:	200000dc 	.word	0x200000dc
 800b864:	2000017c 	.word	0x2000017c
 800b868:	2000058c 	.word	0x2000058c
 800b86c:	20000110 	.word	0x20000110
 800b870:	200000ec 	.word	0x200000ec

0800b874 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b094      	sub	sp, #80	@ 0x50
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800b87c:	2300      	movs	r3, #0
 800b87e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800b880:	2300      	movs	r3, #0
 800b882:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800b884:	2333      	movs	r3, #51	@ 0x33
 800b886:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b88a:	4b40      	ldr	r3, [pc, #256]	@ (800b98c <LIS2DW12_0_Probe+0x118>)
 800b88c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b88e:	4b40      	ldr	r3, [pc, #256]	@ (800b990 <LIS2DW12_0_Probe+0x11c>)
 800b890:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b892:	4b40      	ldr	r3, [pc, #256]	@ (800b994 <LIS2DW12_0_Probe+0x120>)
 800b894:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b896:	4b40      	ldr	r3, [pc, #256]	@ (800b998 <LIS2DW12_0_Probe+0x124>)
 800b898:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b89a:	4b40      	ldr	r3, [pc, #256]	@ (800b99c <LIS2DW12_0_Probe+0x128>)
 800b89c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800b89e:	4b40      	ldr	r3, [pc, #256]	@ (800b9a0 <LIS2DW12_0_Probe+0x12c>)
 800b8a0:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800b8a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	483e      	ldr	r0, [pc, #248]	@ (800b9a4 <LIS2DW12_0_Probe+0x130>)
 800b8aa:	f7f8 f841 	bl	8003930 <LIS2DW12_RegisterBusIO>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d003      	beq.n	800b8bc <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b8b4:	f06f 0306 	mvn.w	r3, #6
 800b8b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8ba:	e062      	b.n	800b982 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800b8bc:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	4838      	ldr	r0, [pc, #224]	@ (800b9a4 <LIS2DW12_0_Probe+0x130>)
 800b8c4:	f7f8 f922 	bl	8003b0c <LIS2DW12_ReadID>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b8ce:	f06f 0306 	mvn.w	r3, #6
 800b8d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8d4:	e055      	b.n	800b982 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 800b8d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b8da:	2b44      	cmp	r3, #68	@ 0x44
 800b8dc:	d003      	beq.n	800b8e6 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b8de:	f06f 0306 	mvn.w	r3, #6
 800b8e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8e4:	e04d      	b.n	800b982 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800b8e6:	f107 030c 	add.w	r3, r7, #12
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	482d      	ldr	r0, [pc, #180]	@ (800b9a4 <LIS2DW12_0_Probe+0x130>)
 800b8ee:	f7f8 f923 	bl	8003b38 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b8f2:	7b7b      	ldrb	r3, [r7, #13]
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	7b3b      	ldrb	r3, [r7, #12]
 800b8f8:	005b      	lsls	r3, r3, #1
 800b8fa:	431a      	orrs	r2, r3
 800b8fc:	7bbb      	ldrb	r3, [r7, #14]
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4313      	orrs	r3, r2
 800b902:	4a29      	ldr	r2, [pc, #164]	@ (800b9a8 <LIS2DW12_0_Probe+0x134>)
 800b904:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800b906:	4b29      	ldr	r3, [pc, #164]	@ (800b9ac <LIS2DW12_0_Probe+0x138>)
 800b908:	4a26      	ldr	r2, [pc, #152]	@ (800b9a4 <LIS2DW12_0_Probe+0x130>)
 800b90a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800b90c:	4b28      	ldr	r3, [pc, #160]	@ (800b9b0 <LIS2DW12_0_Probe+0x13c>)
 800b90e:	4a29      	ldr	r2, [pc, #164]	@ (800b9b4 <LIS2DW12_0_Probe+0x140>)
 800b910:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b914:	2b00      	cmp	r3, #0
 800b916:	d11e      	bne.n	800b956 <LIS2DW12_0_Probe+0xe2>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f003 0302 	and.w	r3, r3, #2
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d019      	beq.n	800b956 <LIS2DW12_0_Probe+0xe2>
 800b922:	7b3b      	ldrb	r3, [r7, #12]
 800b924:	2b01      	cmp	r3, #1
 800b926:	d116      	bne.n	800b956 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b928:	4b23      	ldr	r3, [pc, #140]	@ (800b9b8 <LIS2DW12_0_Probe+0x144>)
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	4a23      	ldr	r2, [pc, #140]	@ (800b9bc <LIS2DW12_0_Probe+0x148>)
 800b92e:	3303      	adds	r3, #3
 800b930:	4923      	ldr	r1, [pc, #140]	@ (800b9c0 <LIS2DW12_0_Probe+0x14c>)
 800b932:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800b936:	4b1e      	ldr	r3, [pc, #120]	@ (800b9b0 <LIS2DW12_0_Probe+0x13c>)
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a1b      	ldr	r2, [pc, #108]	@ (800b9ac <LIS2DW12_0_Probe+0x138>)
 800b93e:	6852      	ldr	r2, [r2, #4]
 800b940:	4610      	mov	r0, r2
 800b942:	4798      	blx	r3
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b94a:	f06f 0304 	mvn.w	r3, #4
 800b94e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b950:	e001      	b.n	800b956 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b952:	2300      	movs	r3, #0
 800b954:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800b956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d107      	bne.n	800b96c <LIS2DW12_0_Probe+0xf8>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f003 0301 	and.w	r3, r3, #1
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b966:	f06f 0304 	mvn.w	r3, #4
 800b96a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b96c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d107      	bne.n	800b982 <LIS2DW12_0_Probe+0x10e>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f003 0304 	and.w	r3, r3, #4
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b97c:	f06f 0304 	mvn.w	r3, #4
 800b980:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800b982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800b984:	4618      	mov	r0, r3
 800b986:	3750      	adds	r7, #80	@ 0x50
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	08002875 	.word	0x08002875
 800b990:	080028d9 	.word	0x080028d9
 800b994:	0800298d 	.word	0x0800298d
 800b998:	08002929 	.word	0x08002929
 800b99c:	080029f1 	.word	0x080029f1
 800b9a0:	0800bc69 	.word	0x0800bc69
 800b9a4:	20000600 	.word	0x20000600
 800b9a8:	200005bc 	.word	0x200005bc
 800b9ac:	20000580 	.word	0x20000580
 800b9b0:	200005b0 	.word	0x200005b0
 800b9b4:	2000003c 	.word	0x2000003c
 800b9b8:	2000017c 	.word	0x2000017c
 800b9bc:	2000058c 	.word	0x2000058c
 800b9c0:	2000004c 	.word	0x2000004c

0800b9c4 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b094      	sub	sp, #80	@ 0x50
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800b9d4:	233d      	movs	r3, #61	@ 0x3d
 800b9d6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b9da:	4b40      	ldr	r3, [pc, #256]	@ (800badc <LIS2MDL_0_Probe+0x118>)
 800b9dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b9de:	4b40      	ldr	r3, [pc, #256]	@ (800bae0 <LIS2MDL_0_Probe+0x11c>)
 800b9e0:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b9e2:	4b40      	ldr	r3, [pc, #256]	@ (800bae4 <LIS2MDL_0_Probe+0x120>)
 800b9e4:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b9e6:	4b40      	ldr	r3, [pc, #256]	@ (800bae8 <LIS2MDL_0_Probe+0x124>)
 800b9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b9ea:	4b40      	ldr	r3, [pc, #256]	@ (800baec <LIS2MDL_0_Probe+0x128>)
 800b9ec:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800b9ee:	4b40      	ldr	r3, [pc, #256]	@ (800baf0 <LIS2MDL_0_Probe+0x12c>)
 800b9f0:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800b9f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	483e      	ldr	r0, [pc, #248]	@ (800baf4 <LIS2MDL_0_Probe+0x130>)
 800b9fa:	f7f9 fadb 	bl	8004fb4 <LIS2MDL_RegisterBusIO>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d003      	beq.n	800ba0c <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba04:	f06f 0306 	mvn.w	r3, #6
 800ba08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba0a:	e062      	b.n	800bad2 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800ba0c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800ba10:	4619      	mov	r1, r3
 800ba12:	4838      	ldr	r0, [pc, #224]	@ (800baf4 <LIS2MDL_0_Probe+0x130>)
 800ba14:	f7f9 fbea 	bl	80051ec <LIS2MDL_ReadID>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba1e:	f06f 0306 	mvn.w	r3, #6
 800ba22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba24:	e055      	b.n	800bad2 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 800ba26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba2a:	2b40      	cmp	r3, #64	@ 0x40
 800ba2c:	d003      	beq.n	800ba36 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba2e:	f06f 0306 	mvn.w	r3, #6
 800ba32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba34:	e04d      	b.n	800bad2 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800ba36:	f107 030c 	add.w	r3, r7, #12
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	482d      	ldr	r0, [pc, #180]	@ (800baf4 <LIS2MDL_0_Probe+0x130>)
 800ba3e:	f7f9 fbfb 	bl	8005238 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800ba42:	7b7b      	ldrb	r3, [r7, #13]
 800ba44:	461a      	mov	r2, r3
 800ba46:	7b3b      	ldrb	r3, [r7, #12]
 800ba48:	005b      	lsls	r3, r3, #1
 800ba4a:	431a      	orrs	r2, r3
 800ba4c:	7bbb      	ldrb	r3, [r7, #14]
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4313      	orrs	r3, r2
 800ba52:	4a29      	ldr	r2, [pc, #164]	@ (800baf8 <LIS2MDL_0_Probe+0x134>)
 800ba54:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800ba56:	4b29      	ldr	r3, [pc, #164]	@ (800bafc <LIS2MDL_0_Probe+0x138>)
 800ba58:	4a26      	ldr	r2, [pc, #152]	@ (800baf4 <LIS2MDL_0_Probe+0x130>)
 800ba5a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800ba5c:	4b28      	ldr	r3, [pc, #160]	@ (800bb00 <LIS2MDL_0_Probe+0x13c>)
 800ba5e:	4a29      	ldr	r2, [pc, #164]	@ (800bb04 <LIS2MDL_0_Probe+0x140>)
 800ba60:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800ba62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d11e      	bne.n	800baa6 <LIS2MDL_0_Probe+0xe2>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f003 0304 	and.w	r3, r3, #4
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d019      	beq.n	800baa6 <LIS2MDL_0_Probe+0xe2>
 800ba72:	7bbb      	ldrb	r3, [r7, #14]
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d116      	bne.n	800baa6 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800ba78:	4b23      	ldr	r3, [pc, #140]	@ (800bb08 <LIS2MDL_0_Probe+0x144>)
 800ba7a:	691b      	ldr	r3, [r3, #16]
 800ba7c:	4a23      	ldr	r2, [pc, #140]	@ (800bb0c <LIS2MDL_0_Probe+0x148>)
 800ba7e:	3306      	adds	r3, #6
 800ba80:	4923      	ldr	r1, [pc, #140]	@ (800bb10 <LIS2MDL_0_Probe+0x14c>)
 800ba82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800ba86:	4b1e      	ldr	r3, [pc, #120]	@ (800bb00 <LIS2MDL_0_Probe+0x13c>)
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a1b      	ldr	r2, [pc, #108]	@ (800bafc <LIS2MDL_0_Probe+0x138>)
 800ba8e:	6892      	ldr	r2, [r2, #8]
 800ba90:	4610      	mov	r0, r2
 800ba92:	4798      	blx	r3
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d003      	beq.n	800baa2 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba9a:	f06f 0304 	mvn.w	r3, #4
 800ba9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800baa0:	e001      	b.n	800baa6 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800baa2:	2300      	movs	r3, #0
 800baa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800baa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d107      	bne.n	800babc <LIS2MDL_0_Probe+0xf8>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f003 0302 	and.w	r3, r3, #2
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d002      	beq.n	800babc <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bab6:	f06f 0304 	mvn.w	r3, #4
 800baba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800babc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d107      	bne.n	800bad2 <LIS2MDL_0_Probe+0x10e>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f003 0301 	and.w	r3, r3, #1
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d002      	beq.n	800bad2 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bacc:	f06f 0304 	mvn.w	r3, #4
 800bad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800bad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3750      	adds	r7, #80	@ 0x50
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	08002875 	.word	0x08002875
 800bae0:	080028d9 	.word	0x080028d9
 800bae4:	0800298d 	.word	0x0800298d
 800bae8:	08002929 	.word	0x08002929
 800baec:	080029f1 	.word	0x080029f1
 800baf0:	0800bc69 	.word	0x0800bc69
 800baf4:	2000063c 	.word	0x2000063c
 800baf8:	200005bc 	.word	0x200005bc
 800bafc:	20000580 	.word	0x20000580
 800bb00:	200005b0 	.word	0x200005b0
 800bb04:	20000070 	.word	0x20000070
 800bb08:	2000017c 	.word	0x2000017c
 800bb0c:	2000058c 	.word	0x2000058c
 800bb10:	20000080 	.word	0x20000080

0800bb14 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation>:
  * @param  IntPin the interrupt pin to be used
  * @note   This function sets the LSM6DSO accelerometer ODR to 416Hz and the LSM6DSO accelerometer full scale to 2g
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable_6D_Orientation(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d003      	beq.n	800bb2e <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x1a>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d013      	beq.n	800bb54 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x40>
 800bb2c:	e023      	b.n	800bb76 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x62>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Enable_6D_Orientation(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 800bb2e:	4a16      	ldr	r2, [pc, #88]	@ (800bb88 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x74>)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb36:	78fa      	ldrb	r2, [r7, #3]
 800bb38:	4611      	mov	r1, r2
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fc f840 	bl	8007bc0 <LSM6DSO_ACC_Enable_6D_Orientation>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d003      	beq.n	800bb4e <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x3a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb46:	f06f 0304 	mvn.w	r3, #4
 800bb4a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bb4c:	e017      	b.n	800bb7e <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x6a>
        ret = BSP_ERROR_NONE;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	60fb      	str	r3, [r7, #12]
      break;
 800bb52:	e014      	b.n	800bb7e <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x6a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      /* For LIS2DW12 the 6D Orientation event can be routed only on INT1 pin */
      if (LIS2DW12_ACC_Enable_6D_Orientation(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800bb54:	4a0c      	ldr	r2, [pc, #48]	@ (800bb88 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x74>)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7f8 fc1b 	bl	8004398 <LIS2DW12_ACC_Enable_6D_Orientation>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d003      	beq.n	800bb70 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x5c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb68:	f06f 0304 	mvn.w	r3, #4
 800bb6c:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bb6e:	e006      	b.n	800bb7e <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x6a>
        ret = BSP_ERROR_NONE;
 800bb70:	2300      	movs	r3, #0
 800bb72:	60fb      	str	r3, [r7, #12]
      break;
 800bb74:	e003      	b.n	800bb7e <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x6a>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bb76:	f06f 0301 	mvn.w	r3, #1
 800bb7a:	60fb      	str	r3, [r7, #12]
      break;
 800bb7c:	bf00      	nop
  }

  return ret;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	20000580 	.word	0x20000580

0800bb8c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bb96:	2003      	movs	r0, #3
 800bb98:	f000 fdf0 	bl	800c77c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	f000 f80d 	bl	800bbbc <HAL_InitTick>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	71fb      	strb	r3, [r7, #7]
 800bbac:	e001      	b.n	800bbb2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800bbae:	f7f6 fba9 	bl	8002304 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800bbb2:	79fb      	ldrb	r3, [r7, #7]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800bbc8:	4b16      	ldr	r3, [pc, #88]	@ (800bc24 <HAL_InitTick+0x68>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d022      	beq.n	800bc16 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800bbd0:	4b15      	ldr	r3, [pc, #84]	@ (800bc28 <HAL_InitTick+0x6c>)
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	4b13      	ldr	r3, [pc, #76]	@ (800bc24 <HAL_InitTick+0x68>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800bbdc:	fbb1 f3f3 	udiv	r3, r1, r3
 800bbe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f000 fe0c 	bl	800c802 <HAL_SYSTICK_Config>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10f      	bne.n	800bc10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b0f      	cmp	r3, #15
 800bbf4:	d809      	bhi.n	800bc0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	6879      	ldr	r1, [r7, #4]
 800bbfa:	f04f 30ff 	mov.w	r0, #4294967295
 800bbfe:	f000 fdc8 	bl	800c792 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800bc02:	4a0a      	ldr	r2, [pc, #40]	@ (800bc2c <HAL_InitTick+0x70>)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6013      	str	r3, [r2, #0]
 800bc08:	e007      	b.n	800bc1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	73fb      	strb	r3, [r7, #15]
 800bc0e:	e004      	b.n	800bc1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800bc10:	2301      	movs	r3, #1
 800bc12:	73fb      	strb	r3, [r7, #15]
 800bc14:	e001      	b.n	800bc1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	20000194 	.word	0x20000194
 800bc28:	20000000 	.word	0x20000000
 800bc2c:	20000190 	.word	0x20000190

0800bc30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bc30:	b480      	push	{r7}
 800bc32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bc34:	4b05      	ldr	r3, [pc, #20]	@ (800bc4c <HAL_IncTick+0x1c>)
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	4b05      	ldr	r3, [pc, #20]	@ (800bc50 <HAL_IncTick+0x20>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	4a03      	ldr	r2, [pc, #12]	@ (800bc4c <HAL_IncTick+0x1c>)
 800bc40:	6013      	str	r3, [r2, #0]
}
 800bc42:	bf00      	nop
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bc80      	pop	{r7}
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	20000670 	.word	0x20000670
 800bc50:	20000194 	.word	0x20000194

0800bc54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bc54:	b480      	push	{r7}
 800bc56:	af00      	add	r7, sp, #0
  return uwTick;
 800bc58:	4b02      	ldr	r3, [pc, #8]	@ (800bc64 <HAL_GetTick+0x10>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bc80      	pop	{r7}
 800bc62:	4770      	bx	lr
 800bc64:	20000670 	.word	0x20000670

0800bc68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bc70:	f7ff fff0 	bl	800bc54 <HAL_GetTick>
 800bc74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc80:	d004      	beq.n	800bc8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800bc82:	4b09      	ldr	r3, [pc, #36]	@ (800bca8 <HAL_Delay+0x40>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	4413      	add	r3, r2
 800bc8a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bc8c:	bf00      	nop
 800bc8e:	f7ff ffe1 	bl	800bc54 <HAL_GetTick>
 800bc92:	4602      	mov	r2, r0
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d8f7      	bhi.n	800bc8e <HAL_Delay+0x26>
  {
  }
}
 800bc9e:	bf00      	nop
 800bca0:	bf00      	nop
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	20000194 	.word	0x20000194

0800bcac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b08e      	sub	sp, #56	@ 0x38
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e127      	b.n	800bf1c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	691b      	ldr	r3, [r3, #16]
 800bcd0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d115      	bne.n	800bd06 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bce8:	4b8e      	ldr	r3, [pc, #568]	@ (800bf24 <HAL_ADC_Init+0x278>)
 800bcea:	6a1b      	ldr	r3, [r3, #32]
 800bcec:	4a8d      	ldr	r2, [pc, #564]	@ (800bf24 <HAL_ADC_Init+0x278>)
 800bcee:	f043 0301 	orr.w	r3, r3, #1
 800bcf2:	6213      	str	r3, [r2, #32]
 800bcf4:	4b8b      	ldr	r3, [pc, #556]	@ (800bf24 <HAL_ADC_Init+0x278>)
 800bcf6:	6a1b      	ldr	r3, [r3, #32]
 800bcf8:	f003 0301 	and.w	r3, r3, #1
 800bcfc:	60bb      	str	r3, [r7, #8]
 800bcfe:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f7f6 fb2f 	bl	8002364 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd0a:	f003 0310 	and.w	r3, r3, #16
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	f040 80ff 	bne.w	800bf12 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd18:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800bd1c:	f023 0302 	bic.w	r3, r3, #2
 800bd20:	f043 0202 	orr.w	r2, r3, #2
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800bd28:	4b7f      	ldr	r3, [pc, #508]	@ (800bf28 <HAL_ADC_Init+0x27c>)
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	497c      	ldr	r1, [pc, #496]	@ (800bf28 <HAL_ADC_Init+0x27c>)
 800bd36:	4313      	orrs	r3, r2
 800bd38:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800bd42:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd50:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd52:	6a3b      	ldr	r3, [r7, #32]
 800bd54:	fa93 f3a3 	rbit	r3, r3
 800bd58:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	fab3 f383 	clz	r3, r3
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800bd66:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800bd6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bd74:	4619      	mov	r1, r3
 800bd76:	2302      	movs	r3, #2
 800bd78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7c:	fa93 f3a3 	rbit	r3, r3
 800bd80:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800bd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd84:	fab3 f383 	clz	r3, r3
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800bd8e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800bd90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd92:	4313      	orrs	r3, r2
 800bd94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd9a:	2b10      	cmp	r3, #16
 800bd9c:	d007      	beq.n	800bdae <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800bda6:	4313      	orrs	r3, r2
 800bda8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdb8:	2b40      	cmp	r3, #64	@ 0x40
 800bdba:	d04f      	beq.n	800be5c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	699b      	ldr	r3, [r3, #24]
 800bdc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800bdce:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	6912      	ldr	r2, [r2, #16]
 800bdd4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800bdd8:	d003      	beq.n	800bde2 <HAL_ADC_Init+0x136>
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	6912      	ldr	r2, [r2, #16]
 800bdde:	2a01      	cmp	r2, #1
 800bde0:	d102      	bne.n	800bde8 <HAL_ADC_Init+0x13c>
 800bde2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bde6:	e000      	b.n	800bdea <HAL_ADC_Init+0x13e>
 800bde8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800bdea:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800bdec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d125      	bne.n	800be48 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800be02:	2b00      	cmp	r3, #0
 800be04:	d114      	bne.n	800be30 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be0a:	3b01      	subs	r3, #1
 800be0c:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800be10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be12:	69ba      	ldr	r2, [r7, #24]
 800be14:	fa92 f2a2 	rbit	r2, r2
 800be18:	617a      	str	r2, [r7, #20]
  return result;
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	fab2 f282 	clz	r2, r2
 800be20:	b2d2      	uxtb	r2, r2
 800be22:	4093      	lsls	r3, r2
 800be24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800be28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be2a:	4313      	orrs	r3, r2
 800be2c:	633b      	str	r3, [r7, #48]	@ 0x30
 800be2e:	e00b      	b.n	800be48 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be34:	f043 0220 	orr.w	r2, r3, #32
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be40:	f043 0201 	orr.w	r2, r3, #1
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	4b37      	ldr	r3, [pc, #220]	@ (800bf2c <HAL_ADC_Init+0x280>)
 800be50:	4013      	ands	r3, r2
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	6812      	ldr	r2, [r2, #0]
 800be56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be58:	430b      	orrs	r3, r1
 800be5a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	689a      	ldr	r2, [r3, #8]
 800be62:	4b33      	ldr	r3, [pc, #204]	@ (800bf30 <HAL_ADC_Init+0x284>)
 800be64:	4013      	ands	r3, r2
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	6812      	ldr	r2, [r2, #0]
 800be6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be6c:	430b      	orrs	r3, r1
 800be6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be78:	d003      	beq.n	800be82 <HAL_ADC_Init+0x1d6>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d119      	bne.n	800beb6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be88:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be90:	3b01      	subs	r3, #1
 800be92:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 800be96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	fa92 f2a2 	rbit	r2, r2
 800be9e:	60fa      	str	r2, [r7, #12]
  return result;
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	fab2 f282 	clz	r2, r2
 800bea6:	b2d2      	uxtb	r2, r2
 800bea8:	fa03 f202 	lsl.w	r2, r3, r2
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	430a      	orrs	r2, r1
 800beb2:	631a      	str	r2, [r3, #48]	@ 0x30
 800beb4:	e007      	b.n	800bec6 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 800bec4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	689a      	ldr	r2, [r3, #8]
 800becc:	4b19      	ldr	r3, [pc, #100]	@ (800bf34 <HAL_ADC_Init+0x288>)
 800bece:	4013      	ands	r3, r2
 800bed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d10b      	bne.n	800beee <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bee0:	f023 0303 	bic.w	r3, r3, #3
 800bee4:	f043 0201 	orr.w	r2, r3, #1
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	64da      	str	r2, [r3, #76]	@ 0x4c
 800beec:	e014      	b.n	800bf18 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bef2:	f023 0312 	bic.w	r3, r3, #18
 800bef6:	f043 0210 	orr.w	r2, r3, #16
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf02:	f043 0201 	orr.w	r2, r3, #1
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf10:	e002      	b.n	800bf18 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800bf18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3738      	adds	r7, #56	@ 0x38
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	40023800 	.word	0x40023800
 800bf28:	40012700 	.word	0x40012700
 800bf2c:	fcfc16ff 	.word	0xfcfc16ff
 800bf30:	c0fff189 	.word	0xc0fff189
 800bf34:	bf80fffe 	.word	0xbf80fffe

0800bf38 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d101      	bne.n	800bf52 <HAL_ADC_Start+0x1a>
 800bf4e:	2302      	movs	r3, #2
 800bf50:	e04e      	b.n	800bff0 <HAL_ADC_Start+0xb8>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2201      	movs	r2, #1
 800bf56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 fa80 	bl	800c460 <ADC_Enable>
 800bf60:	4603      	mov	r3, r0
 800bf62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800bf64:	7bfb      	ldrb	r3, [r7, #15]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d141      	bne.n	800bfee <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf6e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800bf72:	f023 0301 	bic.w	r3, r3, #1
 800bf76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d007      	beq.n	800bf9c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800bf94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bfa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfa8:	d106      	bne.n	800bfb8 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfae:	f023 0206 	bic.w	r2, r3, #6
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	651a      	str	r2, [r3, #80]	@ 0x50
 800bfb6:	e002      	b.n	800bfbe <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800bfce:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d107      	bne.n	800bfee <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	689a      	ldr	r2, [r3, #8]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800bfec:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800bfee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c000:	2300      	movs	r3, #0
 800c002:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d101      	bne.n	800c012 <HAL_ADC_Stop+0x1a>
 800c00e:	2302      	movs	r3, #2
 800c010:	e01a      	b.n	800c048 <HAL_ADC_Stop+0x50>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2201      	movs	r2, #1
 800c016:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 fa7c 	bl	800c518 <ADC_ConversionStop_Disable>
 800c020:	4603      	mov	r3, r0
 800c022:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d109      	bne.n	800c03e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c02e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c032:	f023 0301 	bic.w	r3, r3, #1
 800c036:	f043 0201 	orr.w	r2, r3, #1
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800c046:	7bfb      	ldrb	r3, [r7, #15]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c05a:	2300      	movs	r3, #0
 800c05c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c06c:	d113      	bne.n	800c096 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c07c:	d10b      	bne.n	800c096 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c082:	f043 0220 	orr.w	r2, r3, #32
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 800c092:	2301      	movs	r3, #1
 800c094:	e068      	b.n	800c168 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800c096:	f7ff fddd 	bl	800bc54 <HAL_GetTick>
 800c09a:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800c09c:	e021      	b.n	800c0e2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a4:	d01d      	beq.n	800c0e2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d007      	beq.n	800c0bc <HAL_ADC_PollForConversion+0x6c>
 800c0ac:	f7ff fdd2 	bl	800bc54 <HAL_GetTick>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	683a      	ldr	r2, [r7, #0]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d212      	bcs.n	800c0e2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f003 0302 	and.w	r3, r3, #2
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10b      	bne.n	800c0e2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0ce:	f043 0204 	orr.w	r2, r3, #4
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 800c0de:	2303      	movs	r3, #3
 800c0e0:	e042      	b.n	800c168 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f003 0302 	and.w	r3, r3, #2
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d0d6      	beq.n	800c09e <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d104      	bne.n	800c102 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f06f 0212 	mvn.w	r2, #18
 800c100:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c106:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d124      	bne.n	800c166 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c122:	2b00      	cmp	r3, #0
 800c124:	d11f      	bne.n	800c166 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c12c:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c130:	2b00      	cmp	r3, #0
 800c132:	d006      	beq.n	800c142 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d111      	bne.n	800c166 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c146:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c152:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c156:	2b00      	cmp	r3, #0
 800c158:	d105      	bne.n	800c166 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c15e:	f043 0201 	orr.w	r2, r3, #1
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800c166:	2300      	movs	r3, #0
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800c17e:	4618      	mov	r0, r3
 800c180:	370c      	adds	r7, #12
 800c182:	46bd      	mov	sp, r7
 800c184:	bc80      	pop	{r7}
 800c186:	4770      	bx	lr

0800c188 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800c196:	2300      	movs	r3, #0
 800c198:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d101      	bne.n	800c1a8 <HAL_ADC_ConfigChannel+0x20>
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	e14f      	b.n	800c448 <HAL_ADC_ConfigChannel+0x2c0>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	2b06      	cmp	r3, #6
 800c1b6:	d81c      	bhi.n	800c1f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	685a      	ldr	r2, [r3, #4]
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	4413      	add	r3, r2
 800c1c8:	3b05      	subs	r3, #5
 800c1ca:	221f      	movs	r2, #31
 800c1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c1d0:	43db      	mvns	r3, r3
 800c1d2:	4019      	ands	r1, r3
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	6818      	ldr	r0, [r3, #0]
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	685a      	ldr	r2, [r3, #4]
 800c1dc:	4613      	mov	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4413      	add	r3, r2
 800c1e2:	3b05      	subs	r3, #5
 800c1e4:	fa00 f203 	lsl.w	r2, r0, r3
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	430a      	orrs	r2, r1
 800c1ee:	641a      	str	r2, [r3, #64]	@ 0x40
 800c1f0:	e07e      	b.n	800c2f0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	2b0c      	cmp	r3, #12
 800c1f8:	d81c      	bhi.n	800c234 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	4613      	mov	r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	4413      	add	r3, r2
 800c20a:	3b23      	subs	r3, #35	@ 0x23
 800c20c:	221f      	movs	r2, #31
 800c20e:	fa02 f303 	lsl.w	r3, r2, r3
 800c212:	43db      	mvns	r3, r3
 800c214:	4019      	ands	r1, r3
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	6818      	ldr	r0, [r3, #0]
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	685a      	ldr	r2, [r3, #4]
 800c21e:	4613      	mov	r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4413      	add	r3, r2
 800c224:	3b23      	subs	r3, #35	@ 0x23
 800c226:	fa00 f203 	lsl.w	r2, r0, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	430a      	orrs	r2, r1
 800c230:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c232:	e05d      	b.n	800c2f0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	2b12      	cmp	r3, #18
 800c23a:	d81c      	bhi.n	800c276 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	685a      	ldr	r2, [r3, #4]
 800c246:	4613      	mov	r3, r2
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4413      	add	r3, r2
 800c24c:	3b41      	subs	r3, #65	@ 0x41
 800c24e:	221f      	movs	r2, #31
 800c250:	fa02 f303 	lsl.w	r3, r2, r3
 800c254:	43db      	mvns	r3, r3
 800c256:	4019      	ands	r1, r3
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	6818      	ldr	r0, [r3, #0]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	685a      	ldr	r2, [r3, #4]
 800c260:	4613      	mov	r3, r2
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	4413      	add	r3, r2
 800c266:	3b41      	subs	r3, #65	@ 0x41
 800c268:	fa00 f203 	lsl.w	r2, r0, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	430a      	orrs	r2, r1
 800c272:	639a      	str	r2, [r3, #56]	@ 0x38
 800c274:	e03c      	b.n	800c2f0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	2b18      	cmp	r3, #24
 800c27c:	d81c      	bhi.n	800c2b8 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	685a      	ldr	r2, [r3, #4]
 800c288:	4613      	mov	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4413      	add	r3, r2
 800c28e:	3b5f      	subs	r3, #95	@ 0x5f
 800c290:	221f      	movs	r2, #31
 800c292:	fa02 f303 	lsl.w	r3, r2, r3
 800c296:	43db      	mvns	r3, r3
 800c298:	4019      	ands	r1, r3
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	6818      	ldr	r0, [r3, #0]
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	685a      	ldr	r2, [r3, #4]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	4413      	add	r3, r2
 800c2a8:	3b5f      	subs	r3, #95	@ 0x5f
 800c2aa:	fa00 f203 	lsl.w	r2, r0, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	430a      	orrs	r2, r1
 800c2b4:	635a      	str	r2, [r3, #52]	@ 0x34
 800c2b6:	e01b      	b.n	800c2f0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	4413      	add	r3, r2
 800c2c8:	3b7d      	subs	r3, #125	@ 0x7d
 800c2ca:	221f      	movs	r2, #31
 800c2cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d0:	43db      	mvns	r3, r3
 800c2d2:	4019      	ands	r1, r3
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	6818      	ldr	r0, [r3, #0]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	4413      	add	r3, r2
 800c2e2:	3b7d      	subs	r3, #125	@ 0x7d
 800c2e4:	fa00 f203 	lsl.w	r2, r0, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	430a      	orrs	r2, r1
 800c2ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2b09      	cmp	r3, #9
 800c2f6:	d81a      	bhi.n	800c32e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	6959      	ldr	r1, [r3, #20]
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	4613      	mov	r3, r2
 800c304:	005b      	lsls	r3, r3, #1
 800c306:	4413      	add	r3, r2
 800c308:	2207      	movs	r2, #7
 800c30a:	fa02 f303 	lsl.w	r3, r2, r3
 800c30e:	43db      	mvns	r3, r3
 800c310:	4019      	ands	r1, r3
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	6898      	ldr	r0, [r3, #8]
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	4613      	mov	r3, r2
 800c31c:	005b      	lsls	r3, r3, #1
 800c31e:	4413      	add	r3, r2
 800c320:	fa00 f203 	lsl.w	r2, r0, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	430a      	orrs	r2, r1
 800c32a:	615a      	str	r2, [r3, #20]
 800c32c:	e05d      	b.n	800c3ea <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b13      	cmp	r3, #19
 800c334:	d81c      	bhi.n	800c370 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	6919      	ldr	r1, [r3, #16]
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	4613      	mov	r3, r2
 800c342:	005b      	lsls	r3, r3, #1
 800c344:	4413      	add	r3, r2
 800c346:	3b1e      	subs	r3, #30
 800c348:	2207      	movs	r2, #7
 800c34a:	fa02 f303 	lsl.w	r3, r2, r3
 800c34e:	43db      	mvns	r3, r3
 800c350:	4019      	ands	r1, r3
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	6898      	ldr	r0, [r3, #8]
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	4613      	mov	r3, r2
 800c35c:	005b      	lsls	r3, r3, #1
 800c35e:	4413      	add	r3, r2
 800c360:	3b1e      	subs	r3, #30
 800c362:	fa00 f203 	lsl.w	r2, r0, r3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	430a      	orrs	r2, r1
 800c36c:	611a      	str	r2, [r3, #16]
 800c36e:	e03c      	b.n	800c3ea <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2b1d      	cmp	r3, #29
 800c376:	d81c      	bhi.n	800c3b2 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	68d9      	ldr	r1, [r3, #12]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	4613      	mov	r3, r2
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	4413      	add	r3, r2
 800c388:	3b3c      	subs	r3, #60	@ 0x3c
 800c38a:	2207      	movs	r2, #7
 800c38c:	fa02 f303 	lsl.w	r3, r2, r3
 800c390:	43db      	mvns	r3, r3
 800c392:	4019      	ands	r1, r3
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	6898      	ldr	r0, [r3, #8]
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	4613      	mov	r3, r2
 800c39e:	005b      	lsls	r3, r3, #1
 800c3a0:	4413      	add	r3, r2
 800c3a2:	3b3c      	subs	r3, #60	@ 0x3c
 800c3a4:	fa00 f203 	lsl.w	r2, r0, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	430a      	orrs	r2, r1
 800c3ae:	60da      	str	r2, [r3, #12]
 800c3b0:	e01b      	b.n	800c3ea <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	4613      	mov	r3, r2
 800c3be:	005b      	lsls	r3, r3, #1
 800c3c0:	4413      	add	r3, r2
 800c3c2:	3b5a      	subs	r3, #90	@ 0x5a
 800c3c4:	2207      	movs	r2, #7
 800c3c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ca:	43db      	mvns	r3, r3
 800c3cc:	4019      	ands	r1, r3
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	6898      	ldr	r0, [r3, #8]
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	4413      	add	r3, r2
 800c3dc:	3b5a      	subs	r3, #90	@ 0x5a
 800c3de:	fa00 f203 	lsl.w	r2, r0, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	430a      	orrs	r2, r1
 800c3e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2b10      	cmp	r3, #16
 800c3f0:	d003      	beq.n	800c3fa <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c3f6:	2b11      	cmp	r3, #17
 800c3f8:	d121      	bne.n	800c43e <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800c3fa:	4b16      	ldr	r3, [pc, #88]	@ (800c454 <HAL_ADC_ConfigChannel+0x2cc>)
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c402:	2b00      	cmp	r3, #0
 800c404:	d11b      	bne.n	800c43e <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800c406:	4b13      	ldr	r3, [pc, #76]	@ (800c454 <HAL_ADC_ConfigChannel+0x2cc>)
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	4a12      	ldr	r2, [pc, #72]	@ (800c454 <HAL_ADC_ConfigChannel+0x2cc>)
 800c40c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c410:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2b10      	cmp	r3, #16
 800c418:	d111      	bne.n	800c43e <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800c41a:	4b0f      	ldr	r3, [pc, #60]	@ (800c458 <HAL_ADC_ConfigChannel+0x2d0>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a0f      	ldr	r2, [pc, #60]	@ (800c45c <HAL_ADC_ConfigChannel+0x2d4>)
 800c420:	fba2 2303 	umull	r2, r3, r2, r3
 800c424:	0c9a      	lsrs	r2, r3, #18
 800c426:	4613      	mov	r3, r2
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	4413      	add	r3, r2
 800c42c:	005b      	lsls	r3, r3, #1
 800c42e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800c430:	e002      	b.n	800c438 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	3b01      	subs	r3, #1
 800c436:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1f9      	bne.n	800c432 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800c446:	7bfb      	ldrb	r3, [r7, #15]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3714      	adds	r7, #20
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bc80      	pop	{r7}
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	40012700 	.word	0x40012700
 800c458:	20000000 	.word	0x20000000
 800c45c:	431bde83 	.word	0x431bde83

0800c460 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c468:	2300      	movs	r3, #0
 800c46a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 800c46c:	2300      	movs	r3, #0
 800c46e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c47a:	2b40      	cmp	r3, #64	@ 0x40
 800c47c:	d043      	beq.n	800c506 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	689a      	ldr	r2, [r3, #8]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f042 0201 	orr.w	r2, r2, #1
 800c48c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800c48e:	4b20      	ldr	r3, [pc, #128]	@ (800c510 <ADC_Enable+0xb0>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a20      	ldr	r2, [pc, #128]	@ (800c514 <ADC_Enable+0xb4>)
 800c494:	fba2 2303 	umull	r2, r3, r2, r3
 800c498:	0c9a      	lsrs	r2, r3, #18
 800c49a:	4613      	mov	r3, r2
 800c49c:	005b      	lsls	r3, r3, #1
 800c49e:	4413      	add	r3, r2
 800c4a0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800c4a2:	e002      	b.n	800c4aa <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1f9      	bne.n	800c4a4 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800c4b0:	f7ff fbd0 	bl	800bc54 <HAL_GetTick>
 800c4b4:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800c4b6:	e01f      	b.n	800c4f8 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800c4b8:	f7ff fbcc 	bl	800bc54 <HAL_GetTick>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	2b02      	cmp	r3, #2
 800c4c4:	d918      	bls.n	800c4f8 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4d0:	2b40      	cmp	r3, #64	@ 0x40
 800c4d2:	d011      	beq.n	800c4f8 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4d8:	f043 0210 	orr.w	r2, r3, #16
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4e4:	f043 0201 	orr.w	r2, r3, #1
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e007      	b.n	800c508 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c502:	2b40      	cmp	r3, #64	@ 0x40
 800c504:	d1d8      	bne.n	800c4b8 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	20000000 	.word	0x20000000
 800c514:	431bde83 	.word	0x431bde83

0800c518 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c520:	2300      	movs	r3, #0
 800c522:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c52e:	2b40      	cmp	r3, #64	@ 0x40
 800c530:	d12e      	bne.n	800c590 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	689a      	ldr	r2, [r3, #8]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f022 0201 	bic.w	r2, r2, #1
 800c540:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c542:	f7ff fb87 	bl	800bc54 <HAL_GetTick>
 800c546:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 800c548:	e01b      	b.n	800c582 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800c54a:	f7ff fb83 	bl	800bc54 <HAL_GetTick>
 800c54e:	4602      	mov	r2, r0
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	1ad3      	subs	r3, r2, r3
 800c554:	2b02      	cmp	r3, #2
 800c556:	d914      	bls.n	800c582 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c562:	2b40      	cmp	r3, #64	@ 0x40
 800c564:	d10d      	bne.n	800c582 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c56a:	f043 0210 	orr.w	r2, r3, #16
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c576:	f043 0201 	orr.w	r2, r3, #1
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	e007      	b.n	800c592 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c58c:	2b40      	cmp	r3, #64	@ 0x40
 800c58e:	d0dc      	beq.n	800c54a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f003 0307 	and.w	r3, r3, #7
 800c5aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c5ac:	4b0c      	ldr	r3, [pc, #48]	@ (800c5e0 <__NVIC_SetPriorityGrouping+0x44>)
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c5c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c5c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c5cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c5ce:	4a04      	ldr	r2, [pc, #16]	@ (800c5e0 <__NVIC_SetPriorityGrouping+0x44>)
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	60d3      	str	r3, [r2, #12]
}
 800c5d4:	bf00      	nop
 800c5d6:	3714      	adds	r7, #20
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bc80      	pop	{r7}
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	e000ed00 	.word	0xe000ed00

0800c5e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c5e8:	4b04      	ldr	r3, [pc, #16]	@ (800c5fc <__NVIC_GetPriorityGrouping+0x18>)
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	0a1b      	lsrs	r3, r3, #8
 800c5ee:	f003 0307 	and.w	r3, r3, #7
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bc80      	pop	{r7}
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	e000ed00 	.word	0xe000ed00

0800c600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	4603      	mov	r3, r0
 800c608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c60a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	db0b      	blt.n	800c62a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c612:	79fb      	ldrb	r3, [r7, #7]
 800c614:	f003 021f 	and.w	r2, r3, #31
 800c618:	4906      	ldr	r1, [pc, #24]	@ (800c634 <__NVIC_EnableIRQ+0x34>)
 800c61a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c61e:	095b      	lsrs	r3, r3, #5
 800c620:	2001      	movs	r0, #1
 800c622:	fa00 f202 	lsl.w	r2, r0, r2
 800c626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c62a:	bf00      	nop
 800c62c:	370c      	adds	r7, #12
 800c62e:	46bd      	mov	sp, r7
 800c630:	bc80      	pop	{r7}
 800c632:	4770      	bx	lr
 800c634:	e000e100 	.word	0xe000e100

0800c638 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	4603      	mov	r3, r0
 800c640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c646:	2b00      	cmp	r3, #0
 800c648:	db12      	blt.n	800c670 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c64a:	79fb      	ldrb	r3, [r7, #7]
 800c64c:	f003 021f 	and.w	r2, r3, #31
 800c650:	490a      	ldr	r1, [pc, #40]	@ (800c67c <__NVIC_DisableIRQ+0x44>)
 800c652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c656:	095b      	lsrs	r3, r3, #5
 800c658:	2001      	movs	r0, #1
 800c65a:	fa00 f202 	lsl.w	r2, r0, r2
 800c65e:	3320      	adds	r3, #32
 800c660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c664:	f3bf 8f4f 	dsb	sy
}
 800c668:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c66a:	f3bf 8f6f 	isb	sy
}
 800c66e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800c670:	bf00      	nop
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	bc80      	pop	{r7}
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop
 800c67c:	e000e100 	.word	0xe000e100

0800c680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	4603      	mov	r3, r0
 800c688:	6039      	str	r1, [r7, #0]
 800c68a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c68c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c690:	2b00      	cmp	r3, #0
 800c692:	db0a      	blt.n	800c6aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	b2da      	uxtb	r2, r3
 800c698:	490c      	ldr	r1, [pc, #48]	@ (800c6cc <__NVIC_SetPriority+0x4c>)
 800c69a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c69e:	0112      	lsls	r2, r2, #4
 800c6a0:	b2d2      	uxtb	r2, r2
 800c6a2:	440b      	add	r3, r1
 800c6a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c6a8:	e00a      	b.n	800c6c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	b2da      	uxtb	r2, r3
 800c6ae:	4908      	ldr	r1, [pc, #32]	@ (800c6d0 <__NVIC_SetPriority+0x50>)
 800c6b0:	79fb      	ldrb	r3, [r7, #7]
 800c6b2:	f003 030f 	and.w	r3, r3, #15
 800c6b6:	3b04      	subs	r3, #4
 800c6b8:	0112      	lsls	r2, r2, #4
 800c6ba:	b2d2      	uxtb	r2, r2
 800c6bc:	440b      	add	r3, r1
 800c6be:	761a      	strb	r2, [r3, #24]
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bc80      	pop	{r7}
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	e000e100 	.word	0xe000e100
 800c6d0:	e000ed00 	.word	0xe000ed00

0800c6d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b089      	sub	sp, #36	@ 0x24
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f003 0307 	and.w	r3, r3, #7
 800c6e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	f1c3 0307 	rsb	r3, r3, #7
 800c6ee:	2b04      	cmp	r3, #4
 800c6f0:	bf28      	it	cs
 800c6f2:	2304      	movcs	r3, #4
 800c6f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	3304      	adds	r3, #4
 800c6fa:	2b06      	cmp	r3, #6
 800c6fc:	d902      	bls.n	800c704 <NVIC_EncodePriority+0x30>
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	3b03      	subs	r3, #3
 800c702:	e000      	b.n	800c706 <NVIC_EncodePriority+0x32>
 800c704:	2300      	movs	r3, #0
 800c706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c708:	f04f 32ff 	mov.w	r2, #4294967295
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	fa02 f303 	lsl.w	r3, r2, r3
 800c712:	43da      	mvns	r2, r3
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	401a      	ands	r2, r3
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c71c:	f04f 31ff 	mov.w	r1, #4294967295
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	fa01 f303 	lsl.w	r3, r1, r3
 800c726:	43d9      	mvns	r1, r3
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c72c:	4313      	orrs	r3, r2
         );
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3724      	adds	r7, #36	@ 0x24
 800c732:	46bd      	mov	sp, r7
 800c734:	bc80      	pop	{r7}
 800c736:	4770      	bx	lr

0800c738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	3b01      	subs	r3, #1
 800c744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c748:	d301      	bcc.n	800c74e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c74a:	2301      	movs	r3, #1
 800c74c:	e00f      	b.n	800c76e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c74e:	4a0a      	ldr	r2, [pc, #40]	@ (800c778 <SysTick_Config+0x40>)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	3b01      	subs	r3, #1
 800c754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c756:	210f      	movs	r1, #15
 800c758:	f04f 30ff 	mov.w	r0, #4294967295
 800c75c:	f7ff ff90 	bl	800c680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c760:	4b05      	ldr	r3, [pc, #20]	@ (800c778 <SysTick_Config+0x40>)
 800c762:	2200      	movs	r2, #0
 800c764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c766:	4b04      	ldr	r3, [pc, #16]	@ (800c778 <SysTick_Config+0x40>)
 800c768:	2207      	movs	r2, #7
 800c76a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3708      	adds	r7, #8
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	e000e010 	.word	0xe000e010

0800c77c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7ff ff09 	bl	800c59c <__NVIC_SetPriorityGrouping>
}
 800c78a:	bf00      	nop
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b086      	sub	sp, #24
 800c796:	af00      	add	r7, sp, #0
 800c798:	4603      	mov	r3, r0
 800c79a:	60b9      	str	r1, [r7, #8]
 800c79c:	607a      	str	r2, [r7, #4]
 800c79e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c7a4:	f7ff ff1e 	bl	800c5e4 <__NVIC_GetPriorityGrouping>
 800c7a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	68b9      	ldr	r1, [r7, #8]
 800c7ae:	6978      	ldr	r0, [r7, #20]
 800c7b0:	f7ff ff90 	bl	800c6d4 <NVIC_EncodePriority>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7ba:	4611      	mov	r1, r2
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7ff ff5f 	bl	800c680 <__NVIC_SetPriority>
}
 800c7c2:	bf00      	nop
 800c7c4:	3718      	adds	r7, #24
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b082      	sub	sp, #8
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c7d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7ff ff11 	bl	800c600 <__NVIC_EnableIRQ>
}
 800c7de:	bf00      	nop
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b082      	sub	sp, #8
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c7f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7ff ff1f 	bl	800c638 <__NVIC_DisableIRQ>
}
 800c7fa:	bf00      	nop
 800c7fc:	3708      	adds	r7, #8
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b082      	sub	sp, #8
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7ff ff94 	bl	800c738 <SysTick_Config>
 800c810:	4603      	mov	r3, r0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3708      	adds	r7, #8
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b084      	sub	sp, #16
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c822:	2300      	movs	r3, #0
 800c824:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	2b02      	cmp	r3, #2
 800c830:	d005      	beq.n	800c83e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2204      	movs	r2, #4
 800c836:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800c838:	2301      	movs	r3, #1
 800c83a:	73fb      	strb	r3, [r7, #15]
 800c83c:	e029      	b.n	800c892 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f022 020e 	bic.w	r2, r2, #14
 800c84c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f022 0201 	bic.w	r2, r2, #1
 800c85c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c862:	f003 021c 	and.w	r2, r3, #28
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c86a:	2101      	movs	r1, #1
 800c86c:	fa01 f202 	lsl.w	r2, r1, r2
 800c870:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2201      	movs	r2, #1
 800c876:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2200      	movs	r2, #0
 800c87e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c886:	2b00      	cmp	r3, #0
 800c888:	d003      	beq.n	800c892 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	4798      	blx	r3
    }
  }
  return status;
 800c892:	7bfb      	ldrb	r3, [r7, #15]
}
 800c894:	4618      	mov	r0, r3
 800c896:	3710      	adds	r7, #16
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c8aa:	b2db      	uxtb	r3, r3
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	370c      	adds	r7, #12
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bc80      	pop	{r7}
 800c8b4:	4770      	bx	lr
	...

0800c8b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800c8ce:	e160      	b.n	800cb92 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	2101      	movs	r1, #1
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c8dc:	4013      	ands	r3, r2
 800c8de:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f000 8152 	beq.w	800cb8c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	f003 0303 	and.w	r3, r3, #3
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d005      	beq.n	800c900 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c8fc:	2b02      	cmp	r3, #2
 800c8fe:	d130      	bne.n	800c962 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	005b      	lsls	r3, r3, #1
 800c90a:	2203      	movs	r2, #3
 800c90c:	fa02 f303 	lsl.w	r3, r2, r3
 800c910:	43db      	mvns	r3, r3
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	4013      	ands	r3, r2
 800c916:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	68da      	ldr	r2, [r3, #12]
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	005b      	lsls	r3, r3, #1
 800c920:	fa02 f303 	lsl.w	r3, r2, r3
 800c924:	693a      	ldr	r2, [r7, #16]
 800c926:	4313      	orrs	r3, r2
 800c928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	693a      	ldr	r2, [r7, #16]
 800c92e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800c936:	2201      	movs	r2, #1
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	fa02 f303 	lsl.w	r3, r2, r3
 800c93e:	43db      	mvns	r3, r3
 800c940:	693a      	ldr	r2, [r7, #16]
 800c942:	4013      	ands	r3, r2
 800c944:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	091b      	lsrs	r3, r3, #4
 800c94c:	f003 0201 	and.w	r2, r3, #1
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	fa02 f303 	lsl.w	r3, r2, r3
 800c956:	693a      	ldr	r2, [r7, #16]
 800c958:	4313      	orrs	r3, r2
 800c95a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	693a      	ldr	r2, [r7, #16]
 800c960:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	f003 0303 	and.w	r3, r3, #3
 800c96a:	2b03      	cmp	r3, #3
 800c96c:	d017      	beq.n	800c99e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	2203      	movs	r2, #3
 800c97a:	fa02 f303 	lsl.w	r3, r2, r3
 800c97e:	43db      	mvns	r3, r3
 800c980:	693a      	ldr	r2, [r7, #16]
 800c982:	4013      	ands	r3, r2
 800c984:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	689a      	ldr	r2, [r3, #8]
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	005b      	lsls	r3, r3, #1
 800c98e:	fa02 f303 	lsl.w	r3, r2, r3
 800c992:	693a      	ldr	r2, [r7, #16]
 800c994:	4313      	orrs	r3, r2
 800c996:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	693a      	ldr	r2, [r7, #16]
 800c99c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	f003 0303 	and.w	r3, r3, #3
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	d123      	bne.n	800c9f2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	08da      	lsrs	r2, r3, #3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	3208      	adds	r2, #8
 800c9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	f003 0307 	and.w	r3, r3, #7
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	220f      	movs	r2, #15
 800c9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c6:	43db      	mvns	r3, r3
 800c9c8:	693a      	ldr	r2, [r7, #16]
 800c9ca:	4013      	ands	r3, r2
 800c9cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	691a      	ldr	r2, [r3, #16]
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f003 0307 	and.w	r3, r3, #7
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	fa02 f303 	lsl.w	r3, r2, r3
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	08da      	lsrs	r2, r3, #3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	3208      	adds	r2, #8
 800c9ec:	6939      	ldr	r1, [r7, #16]
 800c9ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	005b      	lsls	r3, r3, #1
 800c9fc:	2203      	movs	r2, #3
 800c9fe:	fa02 f303 	lsl.w	r3, r2, r3
 800ca02:	43db      	mvns	r3, r3
 800ca04:	693a      	ldr	r2, [r7, #16]
 800ca06:	4013      	ands	r3, r2
 800ca08:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	f003 0203 	and.w	r2, r3, #3
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	fa02 f303 	lsl.w	r3, r2, r3
 800ca1a:	693a      	ldr	r2, [r7, #16]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	693a      	ldr	r2, [r7, #16]
 800ca24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	f000 80ac 	beq.w	800cb8c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca34:	4b5e      	ldr	r3, [pc, #376]	@ (800cbb0 <HAL_GPIO_Init+0x2f8>)
 800ca36:	6a1b      	ldr	r3, [r3, #32]
 800ca38:	4a5d      	ldr	r2, [pc, #372]	@ (800cbb0 <HAL_GPIO_Init+0x2f8>)
 800ca3a:	f043 0301 	orr.w	r3, r3, #1
 800ca3e:	6213      	str	r3, [r2, #32]
 800ca40:	4b5b      	ldr	r3, [pc, #364]	@ (800cbb0 <HAL_GPIO_Init+0x2f8>)
 800ca42:	6a1b      	ldr	r3, [r3, #32]
 800ca44:	f003 0301 	and.w	r3, r3, #1
 800ca48:	60bb      	str	r3, [r7, #8]
 800ca4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800ca4c:	4a59      	ldr	r2, [pc, #356]	@ (800cbb4 <HAL_GPIO_Init+0x2fc>)
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	089b      	lsrs	r3, r3, #2
 800ca52:	3302      	adds	r3, #2
 800ca54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	f003 0303 	and.w	r3, r3, #3
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	220f      	movs	r2, #15
 800ca64:	fa02 f303 	lsl.w	r3, r2, r3
 800ca68:	43db      	mvns	r3, r3
 800ca6a:	693a      	ldr	r2, [r7, #16]
 800ca6c:	4013      	ands	r3, r2
 800ca6e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a51      	ldr	r2, [pc, #324]	@ (800cbb8 <HAL_GPIO_Init+0x300>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d025      	beq.n	800cac4 <HAL_GPIO_Init+0x20c>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4a50      	ldr	r2, [pc, #320]	@ (800cbbc <HAL_GPIO_Init+0x304>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d01f      	beq.n	800cac0 <HAL_GPIO_Init+0x208>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4a4f      	ldr	r2, [pc, #316]	@ (800cbc0 <HAL_GPIO_Init+0x308>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d019      	beq.n	800cabc <HAL_GPIO_Init+0x204>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a4e      	ldr	r2, [pc, #312]	@ (800cbc4 <HAL_GPIO_Init+0x30c>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d013      	beq.n	800cab8 <HAL_GPIO_Init+0x200>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4a4d      	ldr	r2, [pc, #308]	@ (800cbc8 <HAL_GPIO_Init+0x310>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d00d      	beq.n	800cab4 <HAL_GPIO_Init+0x1fc>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	4a4c      	ldr	r2, [pc, #304]	@ (800cbcc <HAL_GPIO_Init+0x314>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d007      	beq.n	800cab0 <HAL_GPIO_Init+0x1f8>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	4a4b      	ldr	r2, [pc, #300]	@ (800cbd0 <HAL_GPIO_Init+0x318>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d101      	bne.n	800caac <HAL_GPIO_Init+0x1f4>
 800caa8:	2306      	movs	r3, #6
 800caaa:	e00c      	b.n	800cac6 <HAL_GPIO_Init+0x20e>
 800caac:	2307      	movs	r3, #7
 800caae:	e00a      	b.n	800cac6 <HAL_GPIO_Init+0x20e>
 800cab0:	2305      	movs	r3, #5
 800cab2:	e008      	b.n	800cac6 <HAL_GPIO_Init+0x20e>
 800cab4:	2304      	movs	r3, #4
 800cab6:	e006      	b.n	800cac6 <HAL_GPIO_Init+0x20e>
 800cab8:	2303      	movs	r3, #3
 800caba:	e004      	b.n	800cac6 <HAL_GPIO_Init+0x20e>
 800cabc:	2302      	movs	r3, #2
 800cabe:	e002      	b.n	800cac6 <HAL_GPIO_Init+0x20e>
 800cac0:	2301      	movs	r3, #1
 800cac2:	e000      	b.n	800cac6 <HAL_GPIO_Init+0x20e>
 800cac4:	2300      	movs	r3, #0
 800cac6:	697a      	ldr	r2, [r7, #20]
 800cac8:	f002 0203 	and.w	r2, r2, #3
 800cacc:	0092      	lsls	r2, r2, #2
 800cace:	4093      	lsls	r3, r2
 800cad0:	693a      	ldr	r2, [r7, #16]
 800cad2:	4313      	orrs	r3, r2
 800cad4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800cad6:	4937      	ldr	r1, [pc, #220]	@ (800cbb4 <HAL_GPIO_Init+0x2fc>)
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	089b      	lsrs	r3, r3, #2
 800cadc:	3302      	adds	r3, #2
 800cade:	693a      	ldr	r2, [r7, #16]
 800cae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cae4:	4b3b      	ldr	r3, [pc, #236]	@ (800cbd4 <HAL_GPIO_Init+0x31c>)
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	43db      	mvns	r3, r3
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	4013      	ands	r3, r2
 800caf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d003      	beq.n	800cb08 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800cb00:	693a      	ldr	r2, [r7, #16]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	4313      	orrs	r3, r2
 800cb06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800cb08:	4a32      	ldr	r2, [pc, #200]	@ (800cbd4 <HAL_GPIO_Init+0x31c>)
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cb0e:	4b31      	ldr	r3, [pc, #196]	@ (800cbd4 <HAL_GPIO_Init+0x31c>)
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	43db      	mvns	r3, r3
 800cb18:	693a      	ldr	r2, [r7, #16]
 800cb1a:	4013      	ands	r3, r2
 800cb1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d003      	beq.n	800cb32 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800cb2a:	693a      	ldr	r2, [r7, #16]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800cb32:	4a28      	ldr	r2, [pc, #160]	@ (800cbd4 <HAL_GPIO_Init+0x31c>)
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cb38:	4b26      	ldr	r3, [pc, #152]	@ (800cbd4 <HAL_GPIO_Init+0x31c>)
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	43db      	mvns	r3, r3
 800cb42:	693a      	ldr	r2, [r7, #16]
 800cb44:	4013      	ands	r3, r2
 800cb46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d003      	beq.n	800cb5c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800cb5c:	4a1d      	ldr	r2, [pc, #116]	@ (800cbd4 <HAL_GPIO_Init+0x31c>)
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cb62:	4b1c      	ldr	r3, [pc, #112]	@ (800cbd4 <HAL_GPIO_Init+0x31c>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	43db      	mvns	r3, r3
 800cb6c:	693a      	ldr	r2, [r7, #16]
 800cb6e:	4013      	ands	r3, r2
 800cb70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d003      	beq.n	800cb86 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800cb7e:	693a      	ldr	r2, [r7, #16]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800cb86:	4a13      	ldr	r2, [pc, #76]	@ (800cbd4 <HAL_GPIO_Init+0x31c>)
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	fa22 f303 	lsr.w	r3, r2, r3
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f47f ae97 	bne.w	800c8d0 <HAL_GPIO_Init+0x18>
  }
}
 800cba2:	bf00      	nop
 800cba4:	bf00      	nop
 800cba6:	371c      	adds	r7, #28
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bc80      	pop	{r7}
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	40023800 	.word	0x40023800
 800cbb4:	40010000 	.word	0x40010000
 800cbb8:	40020000 	.word	0x40020000
 800cbbc:	40020400 	.word	0x40020400
 800cbc0:	40020800 	.word	0x40020800
 800cbc4:	40020c00 	.word	0x40020c00
 800cbc8:	40021000 	.word	0x40021000
 800cbcc:	40021400 	.word	0x40021400
 800cbd0:	40021800 	.word	0x40021800
 800cbd4:	40010400 	.word	0x40010400

0800cbd8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b087      	sub	sp, #28
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 800cbea:	2300      	movs	r3, #0
 800cbec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800cbee:	e0c4      	b.n	800cd7a <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	fa02 f303 	lsl.w	r3, r2, r3
 800cbf8:	683a      	ldr	r2, [r7, #0]
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f000 80b7 	beq.w	800cd74 <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 800cc06:	4a63      	ldr	r2, [pc, #396]	@ (800cd94 <HAL_GPIO_DeInit+0x1bc>)
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	089b      	lsrs	r3, r3, #2
 800cc0c:	3302      	adds	r3, #2
 800cc0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc12:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	f003 0303 	and.w	r3, r3, #3
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	220f      	movs	r2, #15
 800cc1e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	4013      	ands	r3, r2
 800cc26:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4a5b      	ldr	r2, [pc, #364]	@ (800cd98 <HAL_GPIO_DeInit+0x1c0>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d025      	beq.n	800cc7c <HAL_GPIO_DeInit+0xa4>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	4a5a      	ldr	r2, [pc, #360]	@ (800cd9c <HAL_GPIO_DeInit+0x1c4>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d01f      	beq.n	800cc78 <HAL_GPIO_DeInit+0xa0>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	4a59      	ldr	r2, [pc, #356]	@ (800cda0 <HAL_GPIO_DeInit+0x1c8>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d019      	beq.n	800cc74 <HAL_GPIO_DeInit+0x9c>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4a58      	ldr	r2, [pc, #352]	@ (800cda4 <HAL_GPIO_DeInit+0x1cc>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d013      	beq.n	800cc70 <HAL_GPIO_DeInit+0x98>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4a57      	ldr	r2, [pc, #348]	@ (800cda8 <HAL_GPIO_DeInit+0x1d0>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d00d      	beq.n	800cc6c <HAL_GPIO_DeInit+0x94>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4a56      	ldr	r2, [pc, #344]	@ (800cdac <HAL_GPIO_DeInit+0x1d4>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d007      	beq.n	800cc68 <HAL_GPIO_DeInit+0x90>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4a55      	ldr	r2, [pc, #340]	@ (800cdb0 <HAL_GPIO_DeInit+0x1d8>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d101      	bne.n	800cc64 <HAL_GPIO_DeInit+0x8c>
 800cc60:	2306      	movs	r3, #6
 800cc62:	e00c      	b.n	800cc7e <HAL_GPIO_DeInit+0xa6>
 800cc64:	2307      	movs	r3, #7
 800cc66:	e00a      	b.n	800cc7e <HAL_GPIO_DeInit+0xa6>
 800cc68:	2305      	movs	r3, #5
 800cc6a:	e008      	b.n	800cc7e <HAL_GPIO_DeInit+0xa6>
 800cc6c:	2304      	movs	r3, #4
 800cc6e:	e006      	b.n	800cc7e <HAL_GPIO_DeInit+0xa6>
 800cc70:	2303      	movs	r3, #3
 800cc72:	e004      	b.n	800cc7e <HAL_GPIO_DeInit+0xa6>
 800cc74:	2302      	movs	r3, #2
 800cc76:	e002      	b.n	800cc7e <HAL_GPIO_DeInit+0xa6>
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e000      	b.n	800cc7e <HAL_GPIO_DeInit+0xa6>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	697a      	ldr	r2, [r7, #20]
 800cc80:	f002 0203 	and.w	r2, r2, #3
 800cc84:	0092      	lsls	r2, r2, #2
 800cc86:	4093      	lsls	r3, r2
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d132      	bne.n	800ccf4 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800cc8e:	4b49      	ldr	r3, [pc, #292]	@ (800cdb4 <HAL_GPIO_DeInit+0x1dc>)
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	43db      	mvns	r3, r3
 800cc96:	4947      	ldr	r1, [pc, #284]	@ (800cdb4 <HAL_GPIO_DeInit+0x1dc>)
 800cc98:	4013      	ands	r3, r2
 800cc9a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800cc9c:	4b45      	ldr	r3, [pc, #276]	@ (800cdb4 <HAL_GPIO_DeInit+0x1dc>)
 800cc9e:	685a      	ldr	r2, [r3, #4]
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	43db      	mvns	r3, r3
 800cca4:	4943      	ldr	r1, [pc, #268]	@ (800cdb4 <HAL_GPIO_DeInit+0x1dc>)
 800cca6:	4013      	ands	r3, r2
 800cca8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800ccaa:	4b42      	ldr	r3, [pc, #264]	@ (800cdb4 <HAL_GPIO_DeInit+0x1dc>)
 800ccac:	68da      	ldr	r2, [r3, #12]
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	43db      	mvns	r3, r3
 800ccb2:	4940      	ldr	r1, [pc, #256]	@ (800cdb4 <HAL_GPIO_DeInit+0x1dc>)
 800ccb4:	4013      	ands	r3, r2
 800ccb6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800ccb8:	4b3e      	ldr	r3, [pc, #248]	@ (800cdb4 <HAL_GPIO_DeInit+0x1dc>)
 800ccba:	689a      	ldr	r2, [r3, #8]
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	43db      	mvns	r3, r3
 800ccc0:	493c      	ldr	r1, [pc, #240]	@ (800cdb4 <HAL_GPIO_DeInit+0x1dc>)
 800ccc2:	4013      	ands	r3, r2
 800ccc4:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	f003 0303 	and.w	r3, r3, #3
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	220f      	movs	r2, #15
 800ccd0:	fa02 f303 	lsl.w	r3, r2, r3
 800ccd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 800ccd6:	4a2f      	ldr	r2, [pc, #188]	@ (800cd94 <HAL_GPIO_DeInit+0x1bc>)
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	089b      	lsrs	r3, r3, #2
 800ccdc:	3302      	adds	r3, #2
 800ccde:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	43da      	mvns	r2, r3
 800cce6:	482b      	ldr	r0, [pc, #172]	@ (800cd94 <HAL_GPIO_DeInit+0x1bc>)
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	089b      	lsrs	r3, r3, #2
 800ccec:	400a      	ands	r2, r1
 800ccee:	3302      	adds	r3, #2
 800ccf0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	005b      	lsls	r3, r3, #1
 800ccfc:	2103      	movs	r1, #3
 800ccfe:	fa01 f303 	lsl.w	r3, r1, r3
 800cd02:	43db      	mvns	r3, r3
 800cd04:	401a      	ands	r2, r3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	08da      	lsrs	r2, r3, #3
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	3208      	adds	r2, #8
 800cd12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	f003 0307 	and.w	r3, r3, #7
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	220f      	movs	r2, #15
 800cd20:	fa02 f303 	lsl.w	r3, r2, r3
 800cd24:	43db      	mvns	r3, r3
 800cd26:	697a      	ldr	r2, [r7, #20]
 800cd28:	08d2      	lsrs	r2, r2, #3
 800cd2a:	4019      	ands	r1, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	3208      	adds	r2, #8
 800cd30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	68da      	ldr	r2, [r3, #12]
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	005b      	lsls	r3, r3, #1
 800cd3c:	2103      	movs	r1, #3
 800cd3e:	fa01 f303 	lsl.w	r3, r1, r3
 800cd42:	43db      	mvns	r3, r3
 800cd44:	401a      	ands	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	685a      	ldr	r2, [r3, #4]
 800cd4e:	2101      	movs	r1, #1
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	fa01 f303 	lsl.w	r3, r1, r3
 800cd56:	43db      	mvns	r3, r3
 800cd58:	401a      	ands	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	689a      	ldr	r2, [r3, #8]
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	005b      	lsls	r3, r3, #1
 800cd66:	2103      	movs	r1, #3
 800cd68:	fa01 f303 	lsl.w	r3, r1, r3
 800cd6c:	43db      	mvns	r3, r3
 800cd6e:	401a      	ands	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	609a      	str	r2, [r3, #8]
    }

    position++;
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	3301      	adds	r3, #1
 800cd78:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800cd7a:	683a      	ldr	r2, [r7, #0]
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	fa22 f303 	lsr.w	r3, r2, r3
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f47f af34 	bne.w	800cbf0 <HAL_GPIO_DeInit+0x18>
  }
}
 800cd88:	bf00      	nop
 800cd8a:	bf00      	nop
 800cd8c:	371c      	adds	r7, #28
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bc80      	pop	{r7}
 800cd92:	4770      	bx	lr
 800cd94:	40010000 	.word	0x40010000
 800cd98:	40020000 	.word	0x40020000
 800cd9c:	40020400 	.word	0x40020400
 800cda0:	40020800 	.word	0x40020800
 800cda4:	40020c00 	.word	0x40020c00
 800cda8:	40021000 	.word	0x40021000
 800cdac:	40021400 	.word	0x40021400
 800cdb0:	40021800 	.word	0x40021800
 800cdb4:	40010400 	.word	0x40010400

0800cdb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	807b      	strh	r3, [r7, #2]
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cdc8:	787b      	ldrb	r3, [r7, #1]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d003      	beq.n	800cdd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800cdce:	887a      	ldrh	r2, [r7, #2]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800cdd4:	e003      	b.n	800cdde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800cdd6:	887b      	ldrh	r3, [r7, #2]
 800cdd8:	041a      	lsls	r2, r3, #16
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	619a      	str	r2, [r3, #24]
}
 800cdde:	bf00      	nop
 800cde0:	370c      	adds	r7, #12
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bc80      	pop	{r7}
 800cde6:	4770      	bx	lr

0800cde8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cdfa:	887a      	ldrh	r2, [r7, #2]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	4013      	ands	r3, r2
 800ce00:	041a      	lsls	r2, r3, #16
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	43d9      	mvns	r1, r3
 800ce06:	887b      	ldrh	r3, [r7, #2]
 800ce08:	400b      	ands	r3, r1
 800ce0a:	431a      	orrs	r2, r3
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	619a      	str	r2, [r3, #24]
}
 800ce10:	bf00      	nop
 800ce12:	3714      	adds	r7, #20
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bc80      	pop	{r7}
 800ce18:	4770      	bx	lr
	...

0800ce1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	4603      	mov	r3, r0
 800ce24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ce26:	4b08      	ldr	r3, [pc, #32]	@ (800ce48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ce28:	695a      	ldr	r2, [r3, #20]
 800ce2a:	88fb      	ldrh	r3, [r7, #6]
 800ce2c:	4013      	ands	r3, r2
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d006      	beq.n	800ce40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ce32:	4a05      	ldr	r2, [pc, #20]	@ (800ce48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ce34:	88fb      	ldrh	r3, [r7, #6]
 800ce36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ce38:	88fb      	ldrh	r3, [r7, #6]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7f5 fcb2 	bl	80027a4 <HAL_GPIO_EXTI_Callback>
  }
}
 800ce40:	bf00      	nop
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	40010400 	.word	0x40010400

0800ce4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d101      	bne.n	800ce5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	e12b      	b.n	800d0b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d106      	bne.n	800ce78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 f95d 	bl	800d132 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2224      	movs	r2, #36	@ 0x24
 800ce7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f022 0201 	bic.w	r2, r2, #1
 800ce8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ce9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ceae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ceb0:	f003 fa6c 	bl	801038c <HAL_RCC_GetPCLK1Freq>
 800ceb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	4a81      	ldr	r2, [pc, #516]	@ (800d0c0 <HAL_I2C_Init+0x274>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d807      	bhi.n	800ced0 <HAL_I2C_Init+0x84>
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	4a80      	ldr	r2, [pc, #512]	@ (800d0c4 <HAL_I2C_Init+0x278>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	bf94      	ite	ls
 800cec8:	2301      	movls	r3, #1
 800ceca:	2300      	movhi	r3, #0
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	e006      	b.n	800cede <HAL_I2C_Init+0x92>
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	4a7d      	ldr	r2, [pc, #500]	@ (800d0c8 <HAL_I2C_Init+0x27c>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	bf94      	ite	ls
 800ced8:	2301      	movls	r3, #1
 800ceda:	2300      	movhi	r3, #0
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d001      	beq.n	800cee6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800cee2:	2301      	movs	r3, #1
 800cee4:	e0e7      	b.n	800d0b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	4a78      	ldr	r2, [pc, #480]	@ (800d0cc <HAL_I2C_Init+0x280>)
 800ceea:	fba2 2303 	umull	r2, r3, r2, r3
 800ceee:	0c9b      	lsrs	r3, r3, #18
 800cef0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	430a      	orrs	r2, r1
 800cf04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	6a1b      	ldr	r3, [r3, #32]
 800cf0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	4a6a      	ldr	r2, [pc, #424]	@ (800d0c0 <HAL_I2C_Init+0x274>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d802      	bhi.n	800cf20 <HAL_I2C_Init+0xd4>
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	e009      	b.n	800cf34 <HAL_I2C_Init+0xe8>
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800cf26:	fb02 f303 	mul.w	r3, r2, r3
 800cf2a:	4a69      	ldr	r2, [pc, #420]	@ (800d0d0 <HAL_I2C_Init+0x284>)
 800cf2c:	fba2 2303 	umull	r2, r3, r2, r3
 800cf30:	099b      	lsrs	r3, r3, #6
 800cf32:	3301      	adds	r3, #1
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	6812      	ldr	r2, [r2, #0]
 800cf38:	430b      	orrs	r3, r1
 800cf3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	69db      	ldr	r3, [r3, #28]
 800cf42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800cf46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	495c      	ldr	r1, [pc, #368]	@ (800d0c0 <HAL_I2C_Init+0x274>)
 800cf50:	428b      	cmp	r3, r1
 800cf52:	d819      	bhi.n	800cf88 <HAL_I2C_Init+0x13c>
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	1e59      	subs	r1, r3, #1
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	005b      	lsls	r3, r3, #1
 800cf5e:	fbb1 f3f3 	udiv	r3, r1, r3
 800cf62:	1c59      	adds	r1, r3, #1
 800cf64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cf68:	400b      	ands	r3, r1
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00a      	beq.n	800cf84 <HAL_I2C_Init+0x138>
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	1e59      	subs	r1, r3, #1
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	005b      	lsls	r3, r3, #1
 800cf78:	fbb1 f3f3 	udiv	r3, r1, r3
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf82:	e051      	b.n	800d028 <HAL_I2C_Init+0x1dc>
 800cf84:	2304      	movs	r3, #4
 800cf86:	e04f      	b.n	800d028 <HAL_I2C_Init+0x1dc>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d111      	bne.n	800cfb4 <HAL_I2C_Init+0x168>
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	1e58      	subs	r0, r3, #1
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6859      	ldr	r1, [r3, #4]
 800cf98:	460b      	mov	r3, r1
 800cf9a:	005b      	lsls	r3, r3, #1
 800cf9c:	440b      	add	r3, r1
 800cf9e:	fbb0 f3f3 	udiv	r3, r0, r3
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	bf0c      	ite	eq
 800cfac:	2301      	moveq	r3, #1
 800cfae:	2300      	movne	r3, #0
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	e012      	b.n	800cfda <HAL_I2C_Init+0x18e>
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	1e58      	subs	r0, r3, #1
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6859      	ldr	r1, [r3, #4]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	440b      	add	r3, r1
 800cfc2:	0099      	lsls	r1, r3, #2
 800cfc4:	440b      	add	r3, r1
 800cfc6:	fbb0 f3f3 	udiv	r3, r0, r3
 800cfca:	3301      	adds	r3, #1
 800cfcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	bf0c      	ite	eq
 800cfd4:	2301      	moveq	r3, #1
 800cfd6:	2300      	movne	r3, #0
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d001      	beq.n	800cfe2 <HAL_I2C_Init+0x196>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e022      	b.n	800d028 <HAL_I2C_Init+0x1dc>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d10e      	bne.n	800d008 <HAL_I2C_Init+0x1bc>
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	1e58      	subs	r0, r3, #1
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6859      	ldr	r1, [r3, #4]
 800cff2:	460b      	mov	r3, r1
 800cff4:	005b      	lsls	r3, r3, #1
 800cff6:	440b      	add	r3, r1
 800cff8:	fbb0 f3f3 	udiv	r3, r0, r3
 800cffc:	3301      	adds	r3, #1
 800cffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d006:	e00f      	b.n	800d028 <HAL_I2C_Init+0x1dc>
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	1e58      	subs	r0, r3, #1
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6859      	ldr	r1, [r3, #4]
 800d010:	460b      	mov	r3, r1
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	440b      	add	r3, r1
 800d016:	0099      	lsls	r1, r3, #2
 800d018:	440b      	add	r3, r1
 800d01a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d01e:	3301      	adds	r3, #1
 800d020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d024:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d028:	6879      	ldr	r1, [r7, #4]
 800d02a:	6809      	ldr	r1, [r1, #0]
 800d02c:	4313      	orrs	r3, r2
 800d02e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	69da      	ldr	r2, [r3, #28]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6a1b      	ldr	r3, [r3, #32]
 800d042:	431a      	orrs	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	430a      	orrs	r2, r1
 800d04a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800d056:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	6911      	ldr	r1, [r2, #16]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	68d2      	ldr	r2, [r2, #12]
 800d062:	4311      	orrs	r1, r2
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	6812      	ldr	r2, [r2, #0]
 800d068:	430b      	orrs	r3, r1
 800d06a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	695a      	ldr	r2, [r3, #20]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	699b      	ldr	r3, [r3, #24]
 800d07e:	431a      	orrs	r2, r3
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	430a      	orrs	r2, r1
 800d086:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f042 0201 	orr.w	r2, r2, #1
 800d096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2220      	movs	r2, #32
 800d0a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	000186a0 	.word	0x000186a0
 800d0c4:	001e847f 	.word	0x001e847f
 800d0c8:	003d08ff 	.word	0x003d08ff
 800d0cc:	431bde83 	.word	0x431bde83
 800d0d0:	10624dd3 	.word	0x10624dd3

0800d0d4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e021      	b.n	800d12a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2224      	movs	r2, #36	@ 0x24
 800d0ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f022 0201 	bic.w	r2, r2, #1
 800d0fc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 f820 	bl	800d144 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d128:	2300      	movs	r3, #0
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800d132:	b480      	push	{r7}
 800d134:	b083      	sub	sp, #12
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800d13a:	bf00      	nop
 800d13c:	370c      	adds	r7, #12
 800d13e:	46bd      	mov	sp, r7
 800d140:	bc80      	pop	{r7}
 800d142:	4770      	bx	lr

0800d144 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800d14c:	bf00      	nop
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	bc80      	pop	{r7}
 800d154:	4770      	bx	lr

0800d156 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800d156:	b480      	push	{r7}
 800d158:	b083      	sub	sp, #12
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	695b      	ldr	r3, [r3, #20]
 800d164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d168:	2b80      	cmp	r3, #128	@ 0x80
 800d16a:	d103      	bne.n	800d174 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2200      	movs	r2, #0
 800d172:	611a      	str	r2, [r3, #16]
  }
}
 800d174:	bf00      	nop
 800d176:	370c      	adds	r7, #12
 800d178:	46bd      	mov	sp, r7
 800d17a:	bc80      	pop	{r7}
 800d17c:	4770      	bx	lr
	...

0800d180 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b088      	sub	sp, #32
 800d184:	af02      	add	r7, sp, #8
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	4608      	mov	r0, r1
 800d18a:	4611      	mov	r1, r2
 800d18c:	461a      	mov	r2, r3
 800d18e:	4603      	mov	r3, r0
 800d190:	817b      	strh	r3, [r7, #10]
 800d192:	460b      	mov	r3, r1
 800d194:	813b      	strh	r3, [r7, #8]
 800d196:	4613      	mov	r3, r2
 800d198:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d19a:	f7fe fd5b 	bl	800bc54 <HAL_GetTick>
 800d19e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2b20      	cmp	r3, #32
 800d1aa:	f040 80d9 	bne.w	800d360 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	9300      	str	r3, [sp, #0]
 800d1b2:	2319      	movs	r3, #25
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	496d      	ldr	r1, [pc, #436]	@ (800d36c <HAL_I2C_Mem_Write+0x1ec>)
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f002 f8f7 	bl	800f3ac <I2C_WaitOnFlagUntilTimeout>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d001      	beq.n	800d1c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	e0cc      	b.n	800d362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d101      	bne.n	800d1d6 <HAL_I2C_Mem_Write+0x56>
 800d1d2:	2302      	movs	r3, #2
 800d1d4:	e0c5      	b.n	800d362 <HAL_I2C_Mem_Write+0x1e2>
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f003 0301 	and.w	r3, r3, #1
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d007      	beq.n	800d1fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f042 0201 	orr.w	r2, r2, #1
 800d1fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d20a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2221      	movs	r2, #33	@ 0x21
 800d210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2240      	movs	r2, #64	@ 0x40
 800d218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2200      	movs	r2, #0
 800d220:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	6a3a      	ldr	r2, [r7, #32]
 800d226:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d22c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d232:	b29a      	uxth	r2, r3
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	4a4d      	ldr	r2, [pc, #308]	@ (800d370 <HAL_I2C_Mem_Write+0x1f0>)
 800d23c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d23e:	88f8      	ldrh	r0, [r7, #6]
 800d240:	893a      	ldrh	r2, [r7, #8]
 800d242:	8979      	ldrh	r1, [r7, #10]
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	9301      	str	r3, [sp, #4]
 800d248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d24a:	9300      	str	r3, [sp, #0]
 800d24c:	4603      	mov	r3, r0
 800d24e:	68f8      	ldr	r0, [r7, #12]
 800d250:	f001 fe86 	bl	800ef60 <I2C_RequestMemoryWrite>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d052      	beq.n	800d300 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e081      	b.n	800d362 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d25e:	697a      	ldr	r2, [r7, #20]
 800d260:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	f002 f9bc 	bl	800f5e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00d      	beq.n	800d28a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d272:	2b04      	cmp	r3, #4
 800d274:	d107      	bne.n	800d286 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d284:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d286:	2301      	movs	r3, #1
 800d288:	e06b      	b.n	800d362 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d28e:	781a      	ldrb	r2, [r3, #0]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d29a:	1c5a      	adds	r2, r3, #1
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	b29a      	uxth	r2, r3
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	695b      	ldr	r3, [r3, #20]
 800d2c0:	f003 0304 	and.w	r3, r3, #4
 800d2c4:	2b04      	cmp	r3, #4
 800d2c6:	d11b      	bne.n	800d300 <HAL_I2C_Mem_Write+0x180>
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d017      	beq.n	800d300 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2d4:	781a      	ldrb	r2, [r3, #0]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2e0:	1c5a      	adds	r2, r3, #1
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2ea:	3b01      	subs	r3, #1
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	b29a      	uxth	r2, r3
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1aa      	bne.n	800d25e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d308:	697a      	ldr	r2, [r7, #20]
 800d30a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d30c:	68f8      	ldr	r0, [r7, #12]
 800d30e:	f002 f9af 	bl	800f670 <I2C_WaitOnBTFFlagUntilTimeout>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d00d      	beq.n	800d334 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d31c:	2b04      	cmp	r3, #4
 800d31e:	d107      	bne.n	800d330 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d32e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d330:	2301      	movs	r3, #1
 800d332:	e016      	b.n	800d362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2220      	movs	r2, #32
 800d348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2200      	movs	r2, #0
 800d350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2200      	movs	r2, #0
 800d358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d35c:	2300      	movs	r3, #0
 800d35e:	e000      	b.n	800d362 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d360:	2302      	movs	r3, #2
  }
}
 800d362:	4618      	mov	r0, r3
 800d364:	3718      	adds	r7, #24
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	00100002 	.word	0x00100002
 800d370:	ffff0000 	.word	0xffff0000

0800d374 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b08c      	sub	sp, #48	@ 0x30
 800d378:	af02      	add	r7, sp, #8
 800d37a:	60f8      	str	r0, [r7, #12]
 800d37c:	4608      	mov	r0, r1
 800d37e:	4611      	mov	r1, r2
 800d380:	461a      	mov	r2, r3
 800d382:	4603      	mov	r3, r0
 800d384:	817b      	strh	r3, [r7, #10]
 800d386:	460b      	mov	r3, r1
 800d388:	813b      	strh	r3, [r7, #8]
 800d38a:	4613      	mov	r3, r2
 800d38c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d38e:	f7fe fc61 	bl	800bc54 <HAL_GetTick>
 800d392:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	2b20      	cmp	r3, #32
 800d39e:	f040 8208 	bne.w	800d7b2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	2319      	movs	r3, #25
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	497b      	ldr	r1, [pc, #492]	@ (800d598 <HAL_I2C_Mem_Read+0x224>)
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f001 fffd 	bl	800f3ac <I2C_WaitOnFlagUntilTimeout>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d001      	beq.n	800d3bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d3b8:	2302      	movs	r3, #2
 800d3ba:	e1fb      	b.n	800d7b4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d101      	bne.n	800d3ca <HAL_I2C_Mem_Read+0x56>
 800d3c6:	2302      	movs	r3, #2
 800d3c8:	e1f4      	b.n	800d7b4 <HAL_I2C_Mem_Read+0x440>
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f003 0301 	and.w	r3, r3, #1
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d007      	beq.n	800d3f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f042 0201 	orr.w	r2, r2, #1
 800d3ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d3fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2222      	movs	r2, #34	@ 0x22
 800d404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2240      	movs	r2, #64	@ 0x40
 800d40c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2200      	movs	r2, #0
 800d414:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d41a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800d420:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d426:	b29a      	uxth	r2, r3
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	4a5b      	ldr	r2, [pc, #364]	@ (800d59c <HAL_I2C_Mem_Read+0x228>)
 800d430:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d432:	88f8      	ldrh	r0, [r7, #6]
 800d434:	893a      	ldrh	r2, [r7, #8]
 800d436:	8979      	ldrh	r1, [r7, #10]
 800d438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43a:	9301      	str	r3, [sp, #4]
 800d43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	4603      	mov	r3, r0
 800d442:	68f8      	ldr	r0, [r7, #12]
 800d444:	f001 fe22 	bl	800f08c <I2C_RequestMemoryRead>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d44e:	2301      	movs	r3, #1
 800d450:	e1b0      	b.n	800d7b4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d456:	2b00      	cmp	r3, #0
 800d458:	d113      	bne.n	800d482 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d45a:	2300      	movs	r3, #0
 800d45c:	623b      	str	r3, [r7, #32]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	695b      	ldr	r3, [r3, #20]
 800d464:	623b      	str	r3, [r7, #32]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	699b      	ldr	r3, [r3, #24]
 800d46c:	623b      	str	r3, [r7, #32]
 800d46e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d47e:	601a      	str	r2, [r3, #0]
 800d480:	e184      	b.n	800d78c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d486:	2b01      	cmp	r3, #1
 800d488:	d11b      	bne.n	800d4c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d49a:	2300      	movs	r3, #0
 800d49c:	61fb      	str	r3, [r7, #28]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	695b      	ldr	r3, [r3, #20]
 800d4a4:	61fb      	str	r3, [r7, #28]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	699b      	ldr	r3, [r3, #24]
 800d4ac:	61fb      	str	r3, [r7, #28]
 800d4ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	681a      	ldr	r2, [r3, #0]
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d4be:	601a      	str	r2, [r3, #0]
 800d4c0:	e164      	b.n	800d78c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d4c6:	2b02      	cmp	r3, #2
 800d4c8:	d11b      	bne.n	800d502 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d4d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	681a      	ldr	r2, [r3, #0]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d4e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	61bb      	str	r3, [r7, #24]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	695b      	ldr	r3, [r3, #20]
 800d4f4:	61bb      	str	r3, [r7, #24]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	699b      	ldr	r3, [r3, #24]
 800d4fc:	61bb      	str	r3, [r7, #24]
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	e144      	b.n	800d78c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d502:	2300      	movs	r3, #0
 800d504:	617b      	str	r3, [r7, #20]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	695b      	ldr	r3, [r3, #20]
 800d50c:	617b      	str	r3, [r7, #20]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	699b      	ldr	r3, [r3, #24]
 800d514:	617b      	str	r3, [r7, #20]
 800d516:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d518:	e138      	b.n	800d78c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d51e:	2b03      	cmp	r3, #3
 800d520:	f200 80f1 	bhi.w	800d706 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d123      	bne.n	800d574 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d52c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d52e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f002 f917 	bl	800f764 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d001      	beq.n	800d540 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d53c:	2301      	movs	r3, #1
 800d53e:	e139      	b.n	800d7b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	691a      	ldr	r2, [r3, #16]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d54a:	b2d2      	uxtb	r2, r2
 800d54c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d552:	1c5a      	adds	r2, r3, #1
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d55c:	3b01      	subs	r3, #1
 800d55e:	b29a      	uxth	r2, r3
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d568:	b29b      	uxth	r3, r3
 800d56a:	3b01      	subs	r3, #1
 800d56c:	b29a      	uxth	r2, r3
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d572:	e10b      	b.n	800d78c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d578:	2b02      	cmp	r3, #2
 800d57a:	d14e      	bne.n	800d61a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d582:	2200      	movs	r2, #0
 800d584:	4906      	ldr	r1, [pc, #24]	@ (800d5a0 <HAL_I2C_Mem_Read+0x22c>)
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	f001 ff10 	bl	800f3ac <I2C_WaitOnFlagUntilTimeout>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d008      	beq.n	800d5a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d592:	2301      	movs	r3, #1
 800d594:	e10e      	b.n	800d7b4 <HAL_I2C_Mem_Read+0x440>
 800d596:	bf00      	nop
 800d598:	00100002 	.word	0x00100002
 800d59c:	ffff0000 	.word	0xffff0000
 800d5a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	681a      	ldr	r2, [r3, #0]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d5b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	691a      	ldr	r2, [r3, #16]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5be:	b2d2      	uxtb	r2, r2
 800d5c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5c6:	1c5a      	adds	r2, r3, #1
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	b29a      	uxth	r2, r3
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	3b01      	subs	r3, #1
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	691a      	ldr	r2, [r3, #16]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f0:	b2d2      	uxtb	r2, r2
 800d5f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f8:	1c5a      	adds	r2, r3, #1
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d602:	3b01      	subs	r3, #1
 800d604:	b29a      	uxth	r2, r3
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d60e:	b29b      	uxth	r3, r3
 800d610:	3b01      	subs	r3, #1
 800d612:	b29a      	uxth	r2, r3
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d618:	e0b8      	b.n	800d78c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61c:	9300      	str	r3, [sp, #0]
 800d61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d620:	2200      	movs	r2, #0
 800d622:	4966      	ldr	r1, [pc, #408]	@ (800d7bc <HAL_I2C_Mem_Read+0x448>)
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f001 fec1 	bl	800f3ac <I2C_WaitOnFlagUntilTimeout>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d001      	beq.n	800d634 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d630:	2301      	movs	r3, #1
 800d632:	e0bf      	b.n	800d7b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	691a      	ldr	r2, [r3, #16]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d64e:	b2d2      	uxtb	r2, r2
 800d650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d656:	1c5a      	adds	r2, r3, #1
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d660:	3b01      	subs	r3, #1
 800d662:	b29a      	uxth	r2, r3
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	3b01      	subs	r3, #1
 800d670:	b29a      	uxth	r2, r3
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d678:	9300      	str	r3, [sp, #0]
 800d67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d67c:	2200      	movs	r2, #0
 800d67e:	494f      	ldr	r1, [pc, #316]	@ (800d7bc <HAL_I2C_Mem_Read+0x448>)
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	f001 fe93 	bl	800f3ac <I2C_WaitOnFlagUntilTimeout>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d001      	beq.n	800d690 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d68c:	2301      	movs	r3, #1
 800d68e:	e091      	b.n	800d7b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	681a      	ldr	r2, [r3, #0]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d69e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	691a      	ldr	r2, [r3, #16]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6aa:	b2d2      	uxtb	r2, r2
 800d6ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6b2:	1c5a      	adds	r2, r3, #1
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	691a      	ldr	r2, [r3, #16]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6dc:	b2d2      	uxtb	r2, r2
 800d6de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6e4:	1c5a      	adds	r2, r3, #1
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	b29a      	uxth	r2, r3
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d704:	e042      	b.n	800d78c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d708:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d70a:	68f8      	ldr	r0, [r7, #12]
 800d70c:	f002 f82a 	bl	800f764 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d001      	beq.n	800d71a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	e04c      	b.n	800d7b4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	691a      	ldr	r2, [r3, #16]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d724:	b2d2      	uxtb	r2, r2
 800d726:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d72c:	1c5a      	adds	r2, r3, #1
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d736:	3b01      	subs	r3, #1
 800d738:	b29a      	uxth	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d742:	b29b      	uxth	r3, r3
 800d744:	3b01      	subs	r3, #1
 800d746:	b29a      	uxth	r2, r3
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	695b      	ldr	r3, [r3, #20]
 800d752:	f003 0304 	and.w	r3, r3, #4
 800d756:	2b04      	cmp	r3, #4
 800d758:	d118      	bne.n	800d78c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	691a      	ldr	r2, [r3, #16]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d764:	b2d2      	uxtb	r2, r2
 800d766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d76c:	1c5a      	adds	r2, r3, #1
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d776:	3b01      	subs	r3, #1
 800d778:	b29a      	uxth	r2, r3
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d782:	b29b      	uxth	r3, r3
 800d784:	3b01      	subs	r3, #1
 800d786:	b29a      	uxth	r2, r3
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d790:	2b00      	cmp	r3, #0
 800d792:	f47f aec2 	bne.w	800d51a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2220      	movs	r2, #32
 800d79a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	e000      	b.n	800d7b4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d7b2:	2302      	movs	r3, #2
  }
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3728      	adds	r7, #40	@ 0x28
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	00010004 	.word	0x00010004

0800d7c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b088      	sub	sp, #32
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7d8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d7e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d7e8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d7ea:	7bfb      	ldrb	r3, [r7, #15]
 800d7ec:	2b10      	cmp	r3, #16
 800d7ee:	d003      	beq.n	800d7f8 <HAL_I2C_EV_IRQHandler+0x38>
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
 800d7f2:	2b40      	cmp	r3, #64	@ 0x40
 800d7f4:	f040 80b1 	bne.w	800d95a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	699b      	ldr	r3, [r3, #24]
 800d7fe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	695b      	ldr	r3, [r3, #20]
 800d806:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	f003 0301 	and.w	r3, r3, #1
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d10d      	bne.n	800d82e <HAL_I2C_EV_IRQHandler+0x6e>
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800d818:	d003      	beq.n	800d822 <HAL_I2C_EV_IRQHandler+0x62>
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800d820:	d101      	bne.n	800d826 <HAL_I2C_EV_IRQHandler+0x66>
 800d822:	2301      	movs	r3, #1
 800d824:	e000      	b.n	800d828 <HAL_I2C_EV_IRQHandler+0x68>
 800d826:	2300      	movs	r3, #0
 800d828:	2b01      	cmp	r3, #1
 800d82a:	f000 8114 	beq.w	800da56 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	d00b      	beq.n	800d850 <HAL_I2C_EV_IRQHandler+0x90>
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d006      	beq.n	800d850 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f002 f819 	bl	800f87a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 fd70 	bl	800e32e <I2C_Master_SB>
 800d84e:	e083      	b.n	800d958 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	f003 0308 	and.w	r3, r3, #8
 800d856:	2b00      	cmp	r3, #0
 800d858:	d008      	beq.n	800d86c <HAL_I2C_EV_IRQHandler+0xac>
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d860:	2b00      	cmp	r3, #0
 800d862:	d003      	beq.n	800d86c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f000 fde7 	bl	800e438 <I2C_Master_ADD10>
 800d86a:	e075      	b.n	800d958 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	f003 0302 	and.w	r3, r3, #2
 800d872:	2b00      	cmp	r3, #0
 800d874:	d008      	beq.n	800d888 <HAL_I2C_EV_IRQHandler+0xc8>
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d003      	beq.n	800d888 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 fe02 	bl	800e48a <I2C_Master_ADDR>
 800d886:	e067      	b.n	800d958 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	f003 0304 	and.w	r3, r3, #4
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d036      	beq.n	800d900 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d89c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d8a0:	f000 80db 	beq.w	800da5a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00d      	beq.n	800d8ca <HAL_I2C_EV_IRQHandler+0x10a>
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d008      	beq.n	800d8ca <HAL_I2C_EV_IRQHandler+0x10a>
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	f003 0304 	and.w	r3, r3, #4
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d103      	bne.n	800d8ca <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 f9e4 	bl	800dc90 <I2C_MasterTransmit_TXE>
 800d8c8:	e046      	b.n	800d958 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	f003 0304 	and.w	r3, r3, #4
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 80c2 	beq.w	800da5a <HAL_I2C_EV_IRQHandler+0x29a>
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f000 80bc 	beq.w	800da5a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d8e2:	7bbb      	ldrb	r3, [r7, #14]
 800d8e4:	2b21      	cmp	r3, #33	@ 0x21
 800d8e6:	d103      	bne.n	800d8f0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f000 fa6d 	bl	800ddc8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d8ee:	e0b4      	b.n	800da5a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800d8f0:	7bfb      	ldrb	r3, [r7, #15]
 800d8f2:	2b40      	cmp	r3, #64	@ 0x40
 800d8f4:	f040 80b1 	bne.w	800da5a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 fadb 	bl	800deb4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d8fe:	e0ac      	b.n	800da5a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d90a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d90e:	f000 80a4 	beq.w	800da5a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d00d      	beq.n	800d938 <HAL_I2C_EV_IRQHandler+0x178>
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d922:	2b00      	cmp	r3, #0
 800d924:	d008      	beq.n	800d938 <HAL_I2C_EV_IRQHandler+0x178>
 800d926:	69fb      	ldr	r3, [r7, #28]
 800d928:	f003 0304 	and.w	r3, r3, #4
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d103      	bne.n	800d938 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 fb57 	bl	800dfe4 <I2C_MasterReceive_RXNE>
 800d936:	e00f      	b.n	800d958 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d938:	69fb      	ldr	r3, [r7, #28]
 800d93a:	f003 0304 	and.w	r3, r3, #4
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f000 808b 	beq.w	800da5a <HAL_I2C_EV_IRQHandler+0x29a>
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	f000 8085 	beq.w	800da5a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f000 fc02 	bl	800e15a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d956:	e080      	b.n	800da5a <HAL_I2C_EV_IRQHandler+0x29a>
 800d958:	e07f      	b.n	800da5a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d004      	beq.n	800d96c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	695b      	ldr	r3, [r3, #20]
 800d968:	61fb      	str	r3, [r7, #28]
 800d96a:	e007      	b.n	800d97c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	695b      	ldr	r3, [r3, #20]
 800d97a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	f003 0302 	and.w	r3, r3, #2
 800d982:	2b00      	cmp	r3, #0
 800d984:	d011      	beq.n	800d9aa <HAL_I2C_EV_IRQHandler+0x1ea>
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00c      	beq.n	800d9aa <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d994:	2b00      	cmp	r3, #0
 800d996:	d003      	beq.n	800d9a0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	699b      	ldr	r3, [r3, #24]
 800d99e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800d9a0:	69b9      	ldr	r1, [r7, #24]
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 ffbd 	bl	800e922 <I2C_Slave_ADDR>
 800d9a8:	e05a      	b.n	800da60 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	f003 0310 	and.w	r3, r3, #16
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d008      	beq.n	800d9c6 <HAL_I2C_EV_IRQHandler+0x206>
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d003      	beq.n	800d9c6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 fff8 	bl	800e9b4 <I2C_Slave_STOPF>
 800d9c4:	e04c      	b.n	800da60 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d9c6:	7bbb      	ldrb	r3, [r7, #14]
 800d9c8:	2b21      	cmp	r3, #33	@ 0x21
 800d9ca:	d002      	beq.n	800d9d2 <HAL_I2C_EV_IRQHandler+0x212>
 800d9cc:	7bbb      	ldrb	r3, [r7, #14]
 800d9ce:	2b29      	cmp	r3, #41	@ 0x29
 800d9d0:	d120      	bne.n	800da14 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00d      	beq.n	800d9f8 <HAL_I2C_EV_IRQHandler+0x238>
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d008      	beq.n	800d9f8 <HAL_I2C_EV_IRQHandler+0x238>
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	f003 0304 	and.w	r3, r3, #4
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d103      	bne.n	800d9f8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 feda 	bl	800e7aa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d9f6:	e032      	b.n	800da5e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	f003 0304 	and.w	r3, r3, #4
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d02d      	beq.n	800da5e <HAL_I2C_EV_IRQHandler+0x29e>
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d028      	beq.n	800da5e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 ff09 	bl	800e824 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800da12:	e024      	b.n	800da5e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00d      	beq.n	800da3a <HAL_I2C_EV_IRQHandler+0x27a>
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da24:	2b00      	cmp	r3, #0
 800da26:	d008      	beq.n	800da3a <HAL_I2C_EV_IRQHandler+0x27a>
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	f003 0304 	and.w	r3, r3, #4
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d103      	bne.n	800da3a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 ff16 	bl	800e864 <I2C_SlaveReceive_RXNE>
 800da38:	e012      	b.n	800da60 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	f003 0304 	and.w	r3, r3, #4
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00d      	beq.n	800da60 <HAL_I2C_EV_IRQHandler+0x2a0>
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d008      	beq.n	800da60 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 ff46 	bl	800e8e0 <I2C_SlaveReceive_BTF>
 800da54:	e004      	b.n	800da60 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800da56:	bf00      	nop
 800da58:	e002      	b.n	800da60 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800da5a:	bf00      	nop
 800da5c:	e000      	b.n	800da60 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800da5e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800da60:	3720      	adds	r7, #32
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}

0800da66 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800da66:	b580      	push	{r7, lr}
 800da68:	b08a      	sub	sp, #40	@ 0x28
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	695b      	ldr	r3, [r3, #20]
 800da74:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	685b      	ldr	r3, [r3, #4]
 800da7c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800da7e:	2300      	movs	r3, #0
 800da80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800da88:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800da8a:	6a3b      	ldr	r3, [r7, #32]
 800da8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00d      	beq.n	800dab0 <HAL_I2C_ER_IRQHandler+0x4a>
 800da94:	69fb      	ldr	r3, [r7, #28]
 800da96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d008      	beq.n	800dab0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800da9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa0:	f043 0301 	orr.w	r3, r3, #1
 800daa4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800daae:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dab0:	6a3b      	ldr	r3, [r7, #32]
 800dab2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00d      	beq.n	800dad6 <HAL_I2C_ER_IRQHandler+0x70>
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d008      	beq.n	800dad6 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800dac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac6:	f043 0302 	orr.w	r3, r3, #2
 800daca:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800dad4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dad6:	6a3b      	ldr	r3, [r7, #32]
 800dad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d03e      	beq.n	800db5e <HAL_I2C_ER_IRQHandler+0xf8>
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d039      	beq.n	800db5e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800daea:	7efb      	ldrb	r3, [r7, #27]
 800daec:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dafc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db02:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800db04:	7ebb      	ldrb	r3, [r7, #26]
 800db06:	2b20      	cmp	r3, #32
 800db08:	d112      	bne.n	800db30 <HAL_I2C_ER_IRQHandler+0xca>
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10f      	bne.n	800db30 <HAL_I2C_ER_IRQHandler+0xca>
 800db10:	7cfb      	ldrb	r3, [r7, #19]
 800db12:	2b21      	cmp	r3, #33	@ 0x21
 800db14:	d008      	beq.n	800db28 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800db16:	7cfb      	ldrb	r3, [r7, #19]
 800db18:	2b29      	cmp	r3, #41	@ 0x29
 800db1a:	d005      	beq.n	800db28 <HAL_I2C_ER_IRQHandler+0xc2>
 800db1c:	7cfb      	ldrb	r3, [r7, #19]
 800db1e:	2b28      	cmp	r3, #40	@ 0x28
 800db20:	d106      	bne.n	800db30 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2b21      	cmp	r3, #33	@ 0x21
 800db26:	d103      	bne.n	800db30 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f001 f873 	bl	800ec14 <I2C_Slave_AF>
 800db2e:	e016      	b.n	800db5e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800db38:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800db3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db3c:	f043 0304 	orr.w	r3, r3, #4
 800db40:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800db42:	7efb      	ldrb	r3, [r7, #27]
 800db44:	2b10      	cmp	r3, #16
 800db46:	d002      	beq.n	800db4e <HAL_I2C_ER_IRQHandler+0xe8>
 800db48:	7efb      	ldrb	r3, [r7, #27]
 800db4a:	2b40      	cmp	r3, #64	@ 0x40
 800db4c:	d107      	bne.n	800db5e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800db5c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800db5e:	6a3b      	ldr	r3, [r7, #32]
 800db60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800db64:	2b00      	cmp	r3, #0
 800db66:	d00d      	beq.n	800db84 <HAL_I2C_ER_IRQHandler+0x11e>
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d008      	beq.n	800db84 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800db72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db74:	f043 0308 	orr.w	r3, r3, #8
 800db78:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800db82:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800db84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db86:	2b00      	cmp	r3, #0
 800db88:	d008      	beq.n	800db9c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800db8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db90:	431a      	orrs	r2, r3
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f001 f8b0 	bl	800ecfc <I2C_ITError>
  }
}
 800db9c:	bf00      	nop
 800db9e:	3728      	adds	r7, #40	@ 0x28
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b083      	sub	sp, #12
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800dbac:	bf00      	nop
 800dbae:	370c      	adds	r7, #12
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bc80      	pop	{r7}
 800dbb4:	4770      	bx	lr

0800dbb6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dbb6:	b480      	push	{r7}
 800dbb8:	b083      	sub	sp, #12
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800dbbe:	bf00      	nop
 800dbc0:	370c      	adds	r7, #12
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bc80      	pop	{r7}
 800dbc6:	4770      	bx	lr

0800dbc8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b083      	sub	sp, #12
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800dbd0:	bf00      	nop
 800dbd2:	370c      	adds	r7, #12
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bc80      	pop	{r7}
 800dbd8:	4770      	bx	lr

0800dbda <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dbda:	b480      	push	{r7}
 800dbdc:	b083      	sub	sp, #12
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800dbe2:	bf00      	nop
 800dbe4:	370c      	adds	r7, #12
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bc80      	pop	{r7}
 800dbea:	4770      	bx	lr

0800dbec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	70fb      	strb	r3, [r7, #3]
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800dbfc:	bf00      	nop
 800dbfe:	370c      	adds	r7, #12
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bc80      	pop	{r7}
 800dc04:	4770      	bx	lr

0800dc06 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dc06:	b480      	push	{r7}
 800dc08:	b083      	sub	sp, #12
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800dc0e:	bf00      	nop
 800dc10:	370c      	adds	r7, #12
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bc80      	pop	{r7}
 800dc16:	4770      	bx	lr

0800dc18 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800dc20:	bf00      	nop
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bc80      	pop	{r7}
 800dc28:	4770      	bx	lr

0800dc2a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dc2a:	b480      	push	{r7}
 800dc2c:	b083      	sub	sp, #12
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800dc32:	bf00      	nop
 800dc34:	370c      	adds	r7, #12
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bc80      	pop	{r7}
 800dc3a:	4770      	bx	lr

0800dc3c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800dc44:	bf00      	nop
 800dc46:	370c      	adds	r7, #12
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bc80      	pop	{r7}
 800dc4c:	4770      	bx	lr

0800dc4e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dc4e:	b480      	push	{r7}
 800dc50:	b083      	sub	sp, #12
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800dc56:	bf00      	nop
 800dc58:	370c      	adds	r7, #12
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bc80      	pop	{r7}
 800dc5e:	4770      	bx	lr

0800dc60 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc6e:	b2db      	uxtb	r3, r3
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bc80      	pop	{r7}
 800dc78:	4770      	bx	lr

0800dc7a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b083      	sub	sp, #12
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	370c      	adds	r7, #12
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bc80      	pop	{r7}
 800dc8e:	4770      	bx	lr

0800dc90 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc9e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dca6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d150      	bne.n	800dd58 <I2C_MasterTransmit_TXE+0xc8>
 800dcb6:	7bfb      	ldrb	r3, [r7, #15]
 800dcb8:	2b21      	cmp	r3, #33	@ 0x21
 800dcba:	d14d      	bne.n	800dd58 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	2b08      	cmp	r3, #8
 800dcc0:	d01d      	beq.n	800dcfe <I2C_MasterTransmit_TXE+0x6e>
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	2b20      	cmp	r3, #32
 800dcc6:	d01a      	beq.n	800dcfe <I2C_MasterTransmit_TXE+0x6e>
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800dcce:	d016      	beq.n	800dcfe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	685a      	ldr	r2, [r3, #4]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800dcde:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2211      	movs	r2, #17
 800dce4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2220      	movs	r2, #32
 800dcf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f7ff ff54 	bl	800dba4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800dcfc:	e060      	b.n	800ddc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	685a      	ldr	r2, [r3, #4]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800dd0c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	681a      	ldr	r2, [r3, #0]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dd1c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2220      	movs	r2, #32
 800dd28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	2b40      	cmp	r3, #64	@ 0x40
 800dd36:	d107      	bne.n	800dd48 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f7ff ff69 	bl	800dc18 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800dd46:	e03b      	b.n	800ddc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f7ff ff27 	bl	800dba4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800dd56:	e033      	b.n	800ddc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800dd58:	7bfb      	ldrb	r3, [r7, #15]
 800dd5a:	2b21      	cmp	r3, #33	@ 0x21
 800dd5c:	d005      	beq.n	800dd6a <I2C_MasterTransmit_TXE+0xda>
 800dd5e:	7bbb      	ldrb	r3, [r7, #14]
 800dd60:	2b40      	cmp	r3, #64	@ 0x40
 800dd62:	d12d      	bne.n	800ddc0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800dd64:	7bfb      	ldrb	r3, [r7, #15]
 800dd66:	2b22      	cmp	r3, #34	@ 0x22
 800dd68:	d12a      	bne.n	800ddc0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d108      	bne.n	800dd86 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	685a      	ldr	r2, [r3, #4]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dd82:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800dd84:	e01c      	b.n	800ddc0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	2b40      	cmp	r3, #64	@ 0x40
 800dd90:	d103      	bne.n	800dd9a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 f88e 	bl	800deb4 <I2C_MemoryTransmit_TXE_BTF>
}
 800dd98:	e012      	b.n	800ddc0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd9e:	781a      	ldrb	r2, [r3, #0]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddaa:	1c5a      	adds	r2, r3, #1
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	3b01      	subs	r3, #1
 800ddb8:	b29a      	uxth	r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ddbe:	e7ff      	b.n	800ddc0 <I2C_MasterTransmit_TXE+0x130>
 800ddc0:	bf00      	nop
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddd4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	2b21      	cmp	r3, #33	@ 0x21
 800dde0:	d164      	bne.n	800deac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d012      	beq.n	800de12 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddf0:	781a      	ldrb	r2, [r3, #0]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddfc:	1c5a      	adds	r2, r3, #1
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de06:	b29b      	uxth	r3, r3
 800de08:	3b01      	subs	r3, #1
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800de10:	e04c      	b.n	800deac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2b08      	cmp	r3, #8
 800de16:	d01d      	beq.n	800de54 <I2C_MasterTransmit_BTF+0x8c>
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2b20      	cmp	r3, #32
 800de1c:	d01a      	beq.n	800de54 <I2C_MasterTransmit_BTF+0x8c>
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800de24:	d016      	beq.n	800de54 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	685a      	ldr	r2, [r3, #4]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800de34:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2211      	movs	r2, #17
 800de3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2220      	movs	r2, #32
 800de48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f7ff fea9 	bl	800dba4 <HAL_I2C_MasterTxCpltCallback>
}
 800de52:	e02b      	b.n	800deac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	685a      	ldr	r2, [r3, #4]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800de62:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800de72:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2200      	movs	r2, #0
 800de78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2220      	movs	r2, #32
 800de7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	2b40      	cmp	r3, #64	@ 0x40
 800de8c:	d107      	bne.n	800de9e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2200      	movs	r2, #0
 800de92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f7ff febe 	bl	800dc18 <HAL_I2C_MemTxCpltCallback>
}
 800de9c:	e006      	b.n	800deac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f7ff fe7c 	bl	800dba4 <HAL_I2C_MasterTxCpltCallback>
}
 800deac:	bf00      	nop
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dec2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d11d      	bne.n	800df08 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d10b      	bne.n	800deec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dee4:	1c9a      	adds	r2, r3, #2
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800deea:	e077      	b.n	800dfdc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800def0:	b29b      	uxth	r3, r3
 800def2:	121b      	asrs	r3, r3, #8
 800def4:	b2da      	uxtb	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df00:	1c5a      	adds	r2, r3, #1
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800df06:	e069      	b.n	800dfdc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d10b      	bne.n	800df28 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df14:	b2da      	uxtb	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df20:	1c5a      	adds	r2, r3, #1
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800df26:	e059      	b.n	800dfdc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df2c:	2b02      	cmp	r3, #2
 800df2e:	d152      	bne.n	800dfd6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800df30:	7bfb      	ldrb	r3, [r7, #15]
 800df32:	2b22      	cmp	r3, #34	@ 0x22
 800df34:	d10d      	bne.n	800df52 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800df44:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df4a:	1c5a      	adds	r2, r3, #1
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800df50:	e044      	b.n	800dfdc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df56:	b29b      	uxth	r3, r3
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d015      	beq.n	800df88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
 800df5e:	2b21      	cmp	r3, #33	@ 0x21
 800df60:	d112      	bne.n	800df88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df66:	781a      	ldrb	r2, [r3, #0]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df72:	1c5a      	adds	r2, r3, #1
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	3b01      	subs	r3, #1
 800df80:	b29a      	uxth	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800df86:	e029      	b.n	800dfdc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d124      	bne.n	800dfdc <I2C_MemoryTransmit_TXE_BTF+0x128>
 800df92:	7bfb      	ldrb	r3, [r7, #15]
 800df94:	2b21      	cmp	r3, #33	@ 0x21
 800df96:	d121      	bne.n	800dfdc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	685a      	ldr	r2, [r3, #4]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800dfa6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dfb6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2220      	movs	r2, #32
 800dfc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7ff fe22 	bl	800dc18 <HAL_I2C_MemTxCpltCallback>
}
 800dfd4:	e002      	b.n	800dfdc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f7ff f8bd 	bl	800d156 <I2C_Flush_DR>
}
 800dfdc:	bf00      	nop
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	2b22      	cmp	r3, #34	@ 0x22
 800dff6:	f040 80ac 	bne.w	800e152 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dffe:	b29b      	uxth	r3, r3
 800e000:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2b03      	cmp	r3, #3
 800e006:	d921      	bls.n	800e04c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	691a      	ldr	r2, [r3, #16]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e012:	b2d2      	uxtb	r2, r2
 800e014:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e01a:	1c5a      	adds	r2, r3, #1
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e024:	b29b      	uxth	r3, r3
 800e026:	3b01      	subs	r3, #1
 800e028:	b29a      	uxth	r2, r3
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e032:	b29b      	uxth	r3, r3
 800e034:	2b03      	cmp	r3, #3
 800e036:	f040 808c 	bne.w	800e152 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	685a      	ldr	r2, [r3, #4]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e048:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800e04a:	e082      	b.n	800e152 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e050:	2b02      	cmp	r3, #2
 800e052:	d075      	beq.n	800e140 <I2C_MasterReceive_RXNE+0x15c>
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2b01      	cmp	r3, #1
 800e058:	d002      	beq.n	800e060 <I2C_MasterReceive_RXNE+0x7c>
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d16f      	bne.n	800e140 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f001 fb4d 	bl	800f700 <I2C_WaitOnSTOPRequestThroughIT>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d142      	bne.n	800e0f2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e07a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	685a      	ldr	r2, [r3, #4]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800e08a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	691a      	ldr	r2, [r3, #16]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e096:	b2d2      	uxtb	r2, r2
 800e098:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e09e:	1c5a      	adds	r2, r3, #1
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	b29a      	uxth	r2, r3
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2220      	movs	r2, #32
 800e0b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	2b40      	cmp	r3, #64	@ 0x40
 800e0c4:	d10a      	bne.n	800e0dc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7ff fda8 	bl	800dc2a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800e0da:	e03a      	b.n	800e152 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2212      	movs	r2, #18
 800e0e8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f7ff fd63 	bl	800dbb6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800e0f0:	e02f      	b.n	800e152 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	685a      	ldr	r2, [r3, #4]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800e100:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	691a      	ldr	r2, [r3, #16]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e10c:	b2d2      	uxtb	r2, r2
 800e10e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e114:	1c5a      	adds	r2, r3, #1
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e11e:	b29b      	uxth	r3, r3
 800e120:	3b01      	subs	r3, #1
 800e122:	b29a      	uxth	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2220      	movs	r2, #32
 800e12c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f7ff fd7f 	bl	800dc3c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800e13e:	e008      	b.n	800e152 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	685a      	ldr	r2, [r3, #4]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e14e:	605a      	str	r2, [r3, #4]
}
 800e150:	e7ff      	b.n	800e152 <I2C_MasterReceive_RXNE+0x16e>
 800e152:	bf00      	nop
 800e154:	3710      	adds	r7, #16
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b084      	sub	sp, #16
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e166:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	2b04      	cmp	r3, #4
 800e170:	d11b      	bne.n	800e1aa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	685a      	ldr	r2, [r3, #4]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e180:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	691a      	ldr	r2, [r3, #16]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e18c:	b2d2      	uxtb	r2, r2
 800e18e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e194:	1c5a      	adds	r2, r3, #1
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	b29a      	uxth	r2, r3
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800e1a8:	e0bd      	b.n	800e326 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	2b03      	cmp	r3, #3
 800e1b2:	d129      	bne.n	800e208 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	685a      	ldr	r2, [r3, #4]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1c2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2b04      	cmp	r3, #4
 800e1c8:	d00a      	beq.n	800e1e0 <I2C_MasterReceive_BTF+0x86>
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2b02      	cmp	r3, #2
 800e1ce:	d007      	beq.n	800e1e0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	691a      	ldr	r2, [r3, #16]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1ea:	b2d2      	uxtb	r2, r2
 800e1ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1f2:	1c5a      	adds	r2, r3, #1
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	3b01      	subs	r3, #1
 800e200:	b29a      	uxth	r2, r3
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800e206:	e08e      	b.n	800e326 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e20c:	b29b      	uxth	r3, r3
 800e20e:	2b02      	cmp	r3, #2
 800e210:	d176      	bne.n	800e300 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2b01      	cmp	r3, #1
 800e216:	d002      	beq.n	800e21e <I2C_MasterReceive_BTF+0xc4>
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2b10      	cmp	r3, #16
 800e21c:	d108      	bne.n	800e230 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	e019      	b.n	800e264 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2b04      	cmp	r3, #4
 800e234:	d002      	beq.n	800e23c <I2C_MasterReceive_BTF+0xe2>
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2b02      	cmp	r3, #2
 800e23a:	d108      	bne.n	800e24e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e24a:	601a      	str	r2, [r3, #0]
 800e24c:	e00a      	b.n	800e264 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2b10      	cmp	r3, #16
 800e252:	d007      	beq.n	800e264 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e262:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	691a      	ldr	r2, [r3, #16]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e26e:	b2d2      	uxtb	r2, r2
 800e270:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e276:	1c5a      	adds	r2, r3, #1
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e280:	b29b      	uxth	r3, r3
 800e282:	3b01      	subs	r3, #1
 800e284:	b29a      	uxth	r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	691a      	ldr	r2, [r3, #16]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e294:	b2d2      	uxtb	r2, r2
 800e296:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e29c:	1c5a      	adds	r2, r3, #1
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	3b01      	subs	r3, #1
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	685a      	ldr	r2, [r3, #4]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800e2be:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2220      	movs	r2, #32
 800e2c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	2b40      	cmp	r3, #64	@ 0x40
 800e2d2:	d10a      	bne.n	800e2ea <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f7ff fca1 	bl	800dc2a <HAL_I2C_MemRxCpltCallback>
}
 800e2e8:	e01d      	b.n	800e326 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2212      	movs	r2, #18
 800e2f6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f7ff fc5c 	bl	800dbb6 <HAL_I2C_MasterRxCpltCallback>
}
 800e2fe:	e012      	b.n	800e326 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	691a      	ldr	r2, [r3, #16]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e30a:	b2d2      	uxtb	r2, r2
 800e30c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e312:	1c5a      	adds	r2, r3, #1
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	3b01      	subs	r3, #1
 800e320:	b29a      	uxth	r2, r3
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800e326:	bf00      	nop
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800e32e:	b480      	push	{r7}
 800e330:	b083      	sub	sp, #12
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	2b40      	cmp	r3, #64	@ 0x40
 800e340:	d117      	bne.n	800e372 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e346:	2b00      	cmp	r3, #0
 800e348:	d109      	bne.n	800e35e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	461a      	mov	r2, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e35a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800e35c:	e067      	b.n	800e42e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e362:	b2db      	uxtb	r3, r3
 800e364:	f043 0301 	orr.w	r3, r3, #1
 800e368:	b2da      	uxtb	r2, r3
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	611a      	str	r2, [r3, #16]
}
 800e370:	e05d      	b.n	800e42e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	691b      	ldr	r3, [r3, #16]
 800e376:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e37a:	d133      	bne.n	800e3e4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e382:	b2db      	uxtb	r3, r3
 800e384:	2b21      	cmp	r3, #33	@ 0x21
 800e386:	d109      	bne.n	800e39c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	461a      	mov	r2, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e398:	611a      	str	r2, [r3, #16]
 800e39a:	e008      	b.n	800e3ae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	f043 0301 	orr.w	r3, r3, #1
 800e3a6:	b2da      	uxtb	r2, r3
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d004      	beq.n	800e3c0 <I2C_Master_SB+0x92>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d108      	bne.n	800e3d2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d032      	beq.n	800e42e <I2C_Master_SB+0x100>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d02d      	beq.n	800e42e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	685a      	ldr	r2, [r3, #4]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e3e0:	605a      	str	r2, [r3, #4]
}
 800e3e2:	e024      	b.n	800e42e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10e      	bne.n	800e40a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	11db      	asrs	r3, r3, #7
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	f003 0306 	and.w	r3, r3, #6
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	f063 030f 	orn	r3, r3, #15
 800e400:	b2da      	uxtb	r2, r3
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	611a      	str	r2, [r3, #16]
}
 800e408:	e011      	b.n	800e42e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d10d      	bne.n	800e42e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e416:	b29b      	uxth	r3, r3
 800e418:	11db      	asrs	r3, r3, #7
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	f003 0306 	and.w	r3, r3, #6
 800e420:	b2db      	uxtb	r3, r3
 800e422:	f063 030e 	orn	r3, r3, #14
 800e426:	b2da      	uxtb	r2, r3
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	611a      	str	r2, [r3, #16]
}
 800e42e:	bf00      	nop
 800e430:	370c      	adds	r7, #12
 800e432:	46bd      	mov	sp, r7
 800e434:	bc80      	pop	{r7}
 800e436:	4770      	bx	lr

0800e438 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e444:	b2da      	uxtb	r2, r3
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e450:	2b00      	cmp	r3, #0
 800e452:	d004      	beq.n	800e45e <I2C_Master_ADD10+0x26>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d108      	bne.n	800e470 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e462:	2b00      	cmp	r3, #0
 800e464:	d00c      	beq.n	800e480 <I2C_Master_ADD10+0x48>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d007      	beq.n	800e480 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	685a      	ldr	r2, [r3, #4]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e47e:	605a      	str	r2, [r3, #4]
  }
}
 800e480:	bf00      	nop
 800e482:	370c      	adds	r7, #12
 800e484:	46bd      	mov	sp, r7
 800e486:	bc80      	pop	{r7}
 800e488:	4770      	bx	lr

0800e48a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800e48a:	b480      	push	{r7}
 800e48c:	b091      	sub	sp, #68	@ 0x44
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e498:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4a6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	2b22      	cmp	r3, #34	@ 0x22
 800e4b2:	f040 8169 	bne.w	800e788 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d10f      	bne.n	800e4de <I2C_Master_ADDR+0x54>
 800e4be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e4c2:	2b40      	cmp	r3, #64	@ 0x40
 800e4c4:	d10b      	bne.n	800e4de <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	695b      	ldr	r3, [r3, #20]
 800e4d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	699b      	ldr	r3, [r3, #24]
 800e4d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4dc:	e160      	b.n	800e7a0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d11d      	bne.n	800e522 <I2C_Master_ADDR+0x98>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	691b      	ldr	r3, [r3, #16]
 800e4ea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e4ee:	d118      	bne.n	800e522 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	695b      	ldr	r3, [r3, #20]
 800e4fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	699b      	ldr	r3, [r3, #24]
 800e502:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e514:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	651a      	str	r2, [r3, #80]	@ 0x50
 800e520:	e13e      	b.n	800e7a0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e526:	b29b      	uxth	r3, r3
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d113      	bne.n	800e554 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e52c:	2300      	movs	r3, #0
 800e52e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	699b      	ldr	r3, [r3, #24]
 800e53e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e540:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e550:	601a      	str	r2, [r3, #0]
 800e552:	e115      	b.n	800e780 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e558:	b29b      	uxth	r3, r3
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	f040 808a 	bne.w	800e674 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800e560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e562:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e566:	d137      	bne.n	800e5d8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	681a      	ldr	r2, [r3, #0]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e576:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e582:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e586:	d113      	bne.n	800e5b0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e596:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e598:	2300      	movs	r3, #0
 800e59a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	695b      	ldr	r3, [r3, #20]
 800e5a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	699b      	ldr	r3, [r3, #24]
 800e5aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ae:	e0e7      	b.n	800e780 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	623b      	str	r3, [r7, #32]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	695b      	ldr	r3, [r3, #20]
 800e5ba:	623b      	str	r3, [r7, #32]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	699b      	ldr	r3, [r3, #24]
 800e5c2:	623b      	str	r3, [r7, #32]
 800e5c4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5d4:	601a      	str	r2, [r3, #0]
 800e5d6:	e0d3      	b.n	800e780 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800e5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5da:	2b08      	cmp	r3, #8
 800e5dc:	d02e      	beq.n	800e63c <I2C_Master_ADDR+0x1b2>
 800e5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5e0:	2b20      	cmp	r3, #32
 800e5e2:	d02b      	beq.n	800e63c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800e5e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5e6:	2b12      	cmp	r3, #18
 800e5e8:	d102      	bne.n	800e5f0 <I2C_Master_ADDR+0x166>
 800e5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d125      	bne.n	800e63c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5f2:	2b04      	cmp	r3, #4
 800e5f4:	d00e      	beq.n	800e614 <I2C_Master_ADDR+0x18a>
 800e5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5f8:	2b02      	cmp	r3, #2
 800e5fa:	d00b      	beq.n	800e614 <I2C_Master_ADDR+0x18a>
 800e5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5fe:	2b10      	cmp	r3, #16
 800e600:	d008      	beq.n	800e614 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e610:	601a      	str	r2, [r3, #0]
 800e612:	e007      	b.n	800e624 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e622:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e624:	2300      	movs	r3, #0
 800e626:	61fb      	str	r3, [r7, #28]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	695b      	ldr	r3, [r3, #20]
 800e62e:	61fb      	str	r3, [r7, #28]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	699b      	ldr	r3, [r3, #24]
 800e636:	61fb      	str	r3, [r7, #28]
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	e0a1      	b.n	800e780 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e64a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e64c:	2300      	movs	r3, #0
 800e64e:	61bb      	str	r3, [r7, #24]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	695b      	ldr	r3, [r3, #20]
 800e656:	61bb      	str	r3, [r7, #24]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	699b      	ldr	r3, [r3, #24]
 800e65e:	61bb      	str	r3, [r7, #24]
 800e660:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	681a      	ldr	r2, [r3, #0]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e670:	601a      	str	r2, [r3, #0]
 800e672:	e085      	b.n	800e780 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e678:	b29b      	uxth	r3, r3
 800e67a:	2b02      	cmp	r3, #2
 800e67c:	d14d      	bne.n	800e71a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e680:	2b04      	cmp	r3, #4
 800e682:	d016      	beq.n	800e6b2 <I2C_Master_ADDR+0x228>
 800e684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e686:	2b02      	cmp	r3, #2
 800e688:	d013      	beq.n	800e6b2 <I2C_Master_ADDR+0x228>
 800e68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e68c:	2b10      	cmp	r3, #16
 800e68e:	d010      	beq.n	800e6b2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e69e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e6ae:	601a      	str	r2, [r3, #0]
 800e6b0:	e007      	b.n	800e6c2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e6c0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e6cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e6d0:	d117      	bne.n	800e702 <I2C_Master_ADDR+0x278>
 800e6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e6d8:	d00b      	beq.n	800e6f2 <I2C_Master_ADDR+0x268>
 800e6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d008      	beq.n	800e6f2 <I2C_Master_ADDR+0x268>
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e2:	2b08      	cmp	r3, #8
 800e6e4:	d005      	beq.n	800e6f2 <I2C_Master_ADDR+0x268>
 800e6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e8:	2b10      	cmp	r3, #16
 800e6ea:	d002      	beq.n	800e6f2 <I2C_Master_ADDR+0x268>
 800e6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ee:	2b20      	cmp	r3, #32
 800e6f0:	d107      	bne.n	800e702 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	685a      	ldr	r2, [r3, #4]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e700:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e702:	2300      	movs	r3, #0
 800e704:	617b      	str	r3, [r7, #20]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	695b      	ldr	r3, [r3, #20]
 800e70c:	617b      	str	r3, [r7, #20]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	699b      	ldr	r3, [r3, #24]
 800e714:	617b      	str	r3, [r7, #20]
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	e032      	b.n	800e780 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e728:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e734:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e738:	d117      	bne.n	800e76a <I2C_Master_ADDR+0x2e0>
 800e73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e73c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e740:	d00b      	beq.n	800e75a <I2C_Master_ADDR+0x2d0>
 800e742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e744:	2b01      	cmp	r3, #1
 800e746:	d008      	beq.n	800e75a <I2C_Master_ADDR+0x2d0>
 800e748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e74a:	2b08      	cmp	r3, #8
 800e74c:	d005      	beq.n	800e75a <I2C_Master_ADDR+0x2d0>
 800e74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e750:	2b10      	cmp	r3, #16
 800e752:	d002      	beq.n	800e75a <I2C_Master_ADDR+0x2d0>
 800e754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e756:	2b20      	cmp	r3, #32
 800e758:	d107      	bne.n	800e76a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	685a      	ldr	r2, [r3, #4]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e768:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e76a:	2300      	movs	r3, #0
 800e76c:	613b      	str	r3, [r7, #16]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	695b      	ldr	r3, [r3, #20]
 800e774:	613b      	str	r3, [r7, #16]
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	699b      	ldr	r3, [r3, #24]
 800e77c:	613b      	str	r3, [r7, #16]
 800e77e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2200      	movs	r2, #0
 800e784:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800e786:	e00b      	b.n	800e7a0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e788:	2300      	movs	r3, #0
 800e78a:	60fb      	str	r3, [r7, #12]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	695b      	ldr	r3, [r3, #20]
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	699b      	ldr	r3, [r3, #24]
 800e79a:	60fb      	str	r3, [r7, #12]
 800e79c:	68fb      	ldr	r3, [r7, #12]
}
 800e79e:	e7ff      	b.n	800e7a0 <I2C_Master_ADDR+0x316>
 800e7a0:	bf00      	nop
 800e7a2:	3744      	adds	r7, #68	@ 0x44
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bc80      	pop	{r7}
 800e7a8:	4770      	bx	lr

0800e7aa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b084      	sub	sp, #16
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e7b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d02b      	beq.n	800e81c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7c8:	781a      	ldrb	r2, [r3, #0]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7d4:	1c5a      	adds	r2, r3, #1
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	b29a      	uxth	r2, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d114      	bne.n	800e81c <I2C_SlaveTransmit_TXE+0x72>
 800e7f2:	7bfb      	ldrb	r3, [r7, #15]
 800e7f4:	2b29      	cmp	r3, #41	@ 0x29
 800e7f6:	d111      	bne.n	800e81c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	685a      	ldr	r2, [r3, #4]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e806:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2221      	movs	r2, #33	@ 0x21
 800e80c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2228      	movs	r2, #40	@ 0x28
 800e812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f7ff f9d6 	bl	800dbc8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e81c:	bf00      	nop
 800e81e:	3710      	adds	r7, #16
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e830:	b29b      	uxth	r3, r3
 800e832:	2b00      	cmp	r3, #0
 800e834:	d011      	beq.n	800e85a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e83a:	781a      	ldrb	r2, [r3, #0]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e846:	1c5a      	adds	r2, r3, #1
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e850:	b29b      	uxth	r3, r3
 800e852:	3b01      	subs	r3, #1
 800e854:	b29a      	uxth	r2, r3
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800e85a:	bf00      	nop
 800e85c:	370c      	adds	r7, #12
 800e85e:	46bd      	mov	sp, r7
 800e860:	bc80      	pop	{r7}
 800e862:	4770      	bx	lr

0800e864 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e872:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e878:	b29b      	uxth	r3, r3
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d02c      	beq.n	800e8d8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	691a      	ldr	r2, [r3, #16]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e888:	b2d2      	uxtb	r2, r2
 800e88a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e890:	1c5a      	adds	r2, r3, #1
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	3b01      	subs	r3, #1
 800e89e:	b29a      	uxth	r2, r3
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d114      	bne.n	800e8d8 <I2C_SlaveReceive_RXNE+0x74>
 800e8ae:	7bfb      	ldrb	r3, [r7, #15]
 800e8b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8b2:	d111      	bne.n	800e8d8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	685a      	ldr	r2, [r3, #4]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e8c2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2222      	movs	r2, #34	@ 0x22
 800e8c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2228      	movs	r2, #40	@ 0x28
 800e8ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f7ff f981 	bl	800dbda <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e8d8:	bf00      	nop
 800e8da:	3710      	adds	r7, #16
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d012      	beq.n	800e918 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	691a      	ldr	r2, [r3, #16]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8fc:	b2d2      	uxtb	r2, r2
 800e8fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e90e:	b29b      	uxth	r3, r3
 800e910:	3b01      	subs	r3, #1
 800e912:	b29a      	uxth	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800e918:	bf00      	nop
 800e91a:	370c      	adds	r7, #12
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bc80      	pop	{r7}
 800e920:	4770      	bx	lr

0800e922 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800e922:	b580      	push	{r7, lr}
 800e924:	b084      	sub	sp, #16
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
 800e92a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800e92c:	2300      	movs	r3, #0
 800e92e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e936:	b2db      	uxtb	r3, r3
 800e938:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800e93c:	2b28      	cmp	r3, #40	@ 0x28
 800e93e:	d125      	bne.n	800e98c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	685a      	ldr	r2, [r3, #4]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e94e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	f003 0304 	and.w	r3, r3, #4
 800e956:	2b00      	cmp	r3, #0
 800e958:	d101      	bne.n	800e95e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800e95a:	2301      	movs	r3, #1
 800e95c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e964:	2b00      	cmp	r3, #0
 800e966:	d103      	bne.n	800e970 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	68db      	ldr	r3, [r3, #12]
 800e96c:	81bb      	strh	r3, [r7, #12]
 800e96e:	e002      	b.n	800e976 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	699b      	ldr	r3, [r3, #24]
 800e974:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2200      	movs	r2, #0
 800e97a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800e97e:	89ba      	ldrh	r2, [r7, #12]
 800e980:	7bfb      	ldrb	r3, [r7, #15]
 800e982:	4619      	mov	r1, r3
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f7ff f931 	bl	800dbec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e98a:	e00e      	b.n	800e9aa <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e98c:	2300      	movs	r3, #0
 800e98e:	60bb      	str	r3, [r7, #8]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	695b      	ldr	r3, [r3, #20]
 800e996:	60bb      	str	r3, [r7, #8]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	699b      	ldr	r3, [r3, #24]
 800e99e:	60bb      	str	r3, [r7, #8]
 800e9a0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800e9aa:	bf00      	nop
 800e9ac:	3710      	adds	r7, #16
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
	...

0800e9b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e9c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	685a      	ldr	r2, [r3, #4]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800e9d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	60bb      	str	r3, [r7, #8]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	695b      	ldr	r3, [r3, #20]
 800e9de:	60bb      	str	r3, [r7, #8]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	681a      	ldr	r2, [r3, #0]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f042 0201 	orr.w	r2, r2, #1
 800e9ee:	601a      	str	r2, [r3, #0]
 800e9f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea00:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ea0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ea10:	d172      	bne.n	800eaf8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ea12:	7bfb      	ldrb	r3, [r7, #15]
 800ea14:	2b22      	cmp	r3, #34	@ 0x22
 800ea16:	d002      	beq.n	800ea1e <I2C_Slave_STOPF+0x6a>
 800ea18:	7bfb      	ldrb	r3, [r7, #15]
 800ea1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea1c:	d135      	bne.n	800ea8a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	685b      	ldr	r3, [r3, #4]
 800ea26:	b29a      	uxth	r2, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d005      	beq.n	800ea42 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea3a:	f043 0204 	orr.w	r2, r3, #4
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	685a      	ldr	r2, [r3, #4]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ea50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7fd ff20 	bl	800c89c <HAL_DMA_GetState>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d049      	beq.n	800eaf6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea66:	4a69      	ldr	r2, [pc, #420]	@ (800ec0c <I2C_Slave_STOPF+0x258>)
 800ea68:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7fd fed3 	bl	800c81a <HAL_DMA_Abort_IT>
 800ea74:	4603      	mov	r3, r0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d03d      	beq.n	800eaf6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ea84:	4610      	mov	r0, r2
 800ea86:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ea88:	e035      	b.n	800eaf6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	b29a      	uxth	r2, r3
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea9c:	b29b      	uxth	r3, r3
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d005      	beq.n	800eaae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eaa6:	f043 0204 	orr.w	r2, r3, #4
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	685a      	ldr	r2, [r3, #4]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800eabc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fd feea 	bl	800c89c <HAL_DMA_GetState>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d014      	beq.n	800eaf8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ead2:	4a4e      	ldr	r2, [pc, #312]	@ (800ec0c <I2C_Slave_STOPF+0x258>)
 800ead4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eada:	4618      	mov	r0, r3
 800eadc:	f7fd fe9d 	bl	800c81a <HAL_DMA_Abort_IT>
 800eae0:	4603      	mov	r3, r0
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d008      	beq.n	800eaf8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eaea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800eaf0:	4610      	mov	r0, r2
 800eaf2:	4798      	blx	r3
 800eaf4:	e000      	b.n	800eaf8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800eaf6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d03e      	beq.n	800eb80 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	695b      	ldr	r3, [r3, #20]
 800eb08:	f003 0304 	and.w	r3, r3, #4
 800eb0c:	2b04      	cmp	r3, #4
 800eb0e:	d112      	bne.n	800eb36 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	691a      	ldr	r2, [r3, #16]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb1a:	b2d2      	uxtb	r2, r2
 800eb1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb22:	1c5a      	adds	r2, r3, #1
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	3b01      	subs	r3, #1
 800eb30:	b29a      	uxth	r2, r3
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	695b      	ldr	r3, [r3, #20]
 800eb3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb40:	2b40      	cmp	r3, #64	@ 0x40
 800eb42:	d112      	bne.n	800eb6a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	691a      	ldr	r2, [r3, #16]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb4e:	b2d2      	uxtb	r2, r2
 800eb50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb56:	1c5a      	adds	r2, r3, #1
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	3b01      	subs	r3, #1
 800eb64:	b29a      	uxth	r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d005      	beq.n	800eb80 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb78:	f043 0204 	orr.w	r2, r3, #4
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d003      	beq.n	800eb90 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f000 f8b7 	bl	800ecfc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800eb8e:	e039      	b.n	800ec04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800eb90:	7bfb      	ldrb	r3, [r7, #15]
 800eb92:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb94:	d109      	bne.n	800ebaa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2228      	movs	r2, #40	@ 0x28
 800eba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7ff f818 	bl	800dbda <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ebb0:	b2db      	uxtb	r3, r3
 800ebb2:	2b28      	cmp	r3, #40	@ 0x28
 800ebb4:	d111      	bne.n	800ebda <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	4a15      	ldr	r2, [pc, #84]	@ (800ec10 <I2C_Slave_STOPF+0x25c>)
 800ebba:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2220      	movs	r2, #32
 800ebc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f7ff f817 	bl	800dc06 <HAL_I2C_ListenCpltCallback>
}
 800ebd8:	e014      	b.n	800ec04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebde:	2b22      	cmp	r3, #34	@ 0x22
 800ebe0:	d002      	beq.n	800ebe8 <I2C_Slave_STOPF+0x234>
 800ebe2:	7bfb      	ldrb	r3, [r7, #15]
 800ebe4:	2b22      	cmp	r3, #34	@ 0x22
 800ebe6:	d10d      	bne.n	800ec04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2220      	movs	r2, #32
 800ebf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f7fe ffeb 	bl	800dbda <HAL_I2C_SlaveRxCpltCallback>
}
 800ec04:	bf00      	nop
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	0800f25d 	.word	0x0800f25d
 800ec10:	ffff0000 	.word	0xffff0000

0800ec14 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ec22:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec28:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	2b08      	cmp	r3, #8
 800ec2e:	d002      	beq.n	800ec36 <I2C_Slave_AF+0x22>
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	2b20      	cmp	r3, #32
 800ec34:	d129      	bne.n	800ec8a <I2C_Slave_AF+0x76>
 800ec36:	7bfb      	ldrb	r3, [r7, #15]
 800ec38:	2b28      	cmp	r3, #40	@ 0x28
 800ec3a:	d126      	bne.n	800ec8a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	4a2e      	ldr	r2, [pc, #184]	@ (800ecf8 <I2C_Slave_AF+0xe4>)
 800ec40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	685a      	ldr	r2, [r3, #4]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ec50:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ec5a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ec6a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2220      	movs	r2, #32
 800ec76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f7fe ffbf 	bl	800dc06 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800ec88:	e031      	b.n	800ecee <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800ec8a:	7bfb      	ldrb	r3, [r7, #15]
 800ec8c:	2b21      	cmp	r3, #33	@ 0x21
 800ec8e:	d129      	bne.n	800ece4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	4a19      	ldr	r2, [pc, #100]	@ (800ecf8 <I2C_Slave_AF+0xe4>)
 800ec94:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2221      	movs	r2, #33	@ 0x21
 800ec9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2220      	movs	r2, #32
 800eca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	685a      	ldr	r2, [r3, #4]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ecba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ecc4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	681a      	ldr	r2, [r3, #0]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ecd4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f7fe fa3d 	bl	800d156 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7fe ff73 	bl	800dbc8 <HAL_I2C_SlaveTxCpltCallback>
}
 800ece2:	e004      	b.n	800ecee <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ecec:	615a      	str	r2, [r3, #20]
}
 800ecee:	bf00      	nop
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	ffff0000 	.word	0xffff0000

0800ecfc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ed0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ed12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ed14:	7bbb      	ldrb	r3, [r7, #14]
 800ed16:	2b10      	cmp	r3, #16
 800ed18:	d002      	beq.n	800ed20 <I2C_ITError+0x24>
 800ed1a:	7bbb      	ldrb	r3, [r7, #14]
 800ed1c:	2b40      	cmp	r3, #64	@ 0x40
 800ed1e:	d10a      	bne.n	800ed36 <I2C_ITError+0x3a>
 800ed20:	7bfb      	ldrb	r3, [r7, #15]
 800ed22:	2b22      	cmp	r3, #34	@ 0x22
 800ed24:	d107      	bne.n	800ed36 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ed34:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ed36:	7bfb      	ldrb	r3, [r7, #15]
 800ed38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ed3c:	2b28      	cmp	r3, #40	@ 0x28
 800ed3e:	d107      	bne.n	800ed50 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2228      	movs	r2, #40	@ 0x28
 800ed4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800ed4e:	e015      	b.n	800ed7c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ed5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ed5e:	d00a      	beq.n	800ed76 <I2C_ITError+0x7a>
 800ed60:	7bfb      	ldrb	r3, [r7, #15]
 800ed62:	2b60      	cmp	r3, #96	@ 0x60
 800ed64:	d007      	beq.n	800ed76 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2220      	movs	r2, #32
 800ed6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ed86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ed8a:	d162      	bne.n	800ee52 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	685a      	ldr	r2, [r3, #4]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ed9a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eda0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800eda4:	b2db      	uxtb	r3, r3
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d020      	beq.n	800edec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edae:	4a6a      	ldr	r2, [pc, #424]	@ (800ef58 <I2C_ITError+0x25c>)
 800edb0:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7fd fd2f 	bl	800c81a <HAL_DMA_Abort_IT>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f000 8089 	beq.w	800eed6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f022 0201 	bic.w	r2, r2, #1
 800edd2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2220      	movs	r2, #32
 800edd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ede0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ede6:	4610      	mov	r0, r2
 800ede8:	4798      	blx	r3
 800edea:	e074      	b.n	800eed6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edf0:	4a59      	ldr	r2, [pc, #356]	@ (800ef58 <I2C_ITError+0x25c>)
 800edf2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fd fd0e 	bl	800c81a <HAL_DMA_Abort_IT>
 800edfe:	4603      	mov	r3, r0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d068      	beq.n	800eed6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	695b      	ldr	r3, [r3, #20]
 800ee0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee0e:	2b40      	cmp	r3, #64	@ 0x40
 800ee10:	d10b      	bne.n	800ee2a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	691a      	ldr	r2, [r3, #16]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee1c:	b2d2      	uxtb	r2, r2
 800ee1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee24:	1c5a      	adds	r2, r3, #1
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f022 0201 	bic.w	r2, r2, #1
 800ee38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2220      	movs	r2, #32
 800ee3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ee4c:	4610      	mov	r0, r2
 800ee4e:	4798      	blx	r3
 800ee50:	e041      	b.n	800eed6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee58:	b2db      	uxtb	r3, r3
 800ee5a:	2b60      	cmp	r3, #96	@ 0x60
 800ee5c:	d125      	bne.n	800eeaa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2220      	movs	r2, #32
 800ee62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	695b      	ldr	r3, [r3, #20]
 800ee72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee76:	2b40      	cmp	r3, #64	@ 0x40
 800ee78:	d10b      	bne.n	800ee92 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	691a      	ldr	r2, [r3, #16]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee84:	b2d2      	uxtb	r2, r2
 800ee86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee8c:	1c5a      	adds	r2, r3, #1
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f022 0201 	bic.w	r2, r2, #1
 800eea0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f7fe fed3 	bl	800dc4e <HAL_I2C_AbortCpltCallback>
 800eea8:	e015      	b.n	800eed6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	695b      	ldr	r3, [r3, #20]
 800eeb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eeb4:	2b40      	cmp	r3, #64	@ 0x40
 800eeb6:	d10b      	bne.n	800eed0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	691a      	ldr	r2, [r3, #16]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eec2:	b2d2      	uxtb	r2, r2
 800eec4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeca:	1c5a      	adds	r2, r3, #1
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f7fe feb3 	bl	800dc3c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeda:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	f003 0301 	and.w	r3, r3, #1
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d10e      	bne.n	800ef04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d109      	bne.n	800ef04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d104      	bne.n	800ef04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d007      	beq.n	800ef14 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	685a      	ldr	r2, [r3, #4]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ef12:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef1a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef20:	f003 0304 	and.w	r3, r3, #4
 800ef24:	2b04      	cmp	r3, #4
 800ef26:	d113      	bne.n	800ef50 <I2C_ITError+0x254>
 800ef28:	7bfb      	ldrb	r3, [r7, #15]
 800ef2a:	2b28      	cmp	r3, #40	@ 0x28
 800ef2c:	d110      	bne.n	800ef50 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a0a      	ldr	r2, [pc, #40]	@ (800ef5c <I2C_ITError+0x260>)
 800ef32:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2200      	movs	r2, #0
 800ef38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2220      	movs	r2, #32
 800ef3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2200      	movs	r2, #0
 800ef46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f7fe fe5b 	bl	800dc06 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ef50:	bf00      	nop
 800ef52:	3710      	adds	r7, #16
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	0800f25d 	.word	0x0800f25d
 800ef5c:	ffff0000 	.word	0xffff0000

0800ef60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b088      	sub	sp, #32
 800ef64:	af02      	add	r7, sp, #8
 800ef66:	60f8      	str	r0, [r7, #12]
 800ef68:	4608      	mov	r0, r1
 800ef6a:	4611      	mov	r1, r2
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	4603      	mov	r3, r0
 800ef70:	817b      	strh	r3, [r7, #10]
 800ef72:	460b      	mov	r3, r1
 800ef74:	813b      	strh	r3, [r7, #8]
 800ef76:	4613      	mov	r3, r2
 800ef78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ef88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ef8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef8c:	9300      	str	r3, [sp, #0]
 800ef8e:	6a3b      	ldr	r3, [r7, #32]
 800ef90:	2200      	movs	r2, #0
 800ef92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ef96:	68f8      	ldr	r0, [r7, #12]
 800ef98:	f000 fa08 	bl	800f3ac <I2C_WaitOnFlagUntilTimeout>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d00d      	beq.n	800efbe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800efac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800efb0:	d103      	bne.n	800efba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800efb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800efba:	2303      	movs	r3, #3
 800efbc:	e05f      	b.n	800f07e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800efbe:	897b      	ldrh	r3, [r7, #10]
 800efc0:	b2db      	uxtb	r3, r3
 800efc2:	461a      	mov	r2, r3
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800efcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800efce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd0:	6a3a      	ldr	r2, [r7, #32]
 800efd2:	492d      	ldr	r1, [pc, #180]	@ (800f088 <I2C_RequestMemoryWrite+0x128>)
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f000 fa63 	bl	800f4a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d001      	beq.n	800efe4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800efe0:	2301      	movs	r3, #1
 800efe2:	e04c      	b.n	800f07e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800efe4:	2300      	movs	r3, #0
 800efe6:	617b      	str	r3, [r7, #20]
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	695b      	ldr	r3, [r3, #20]
 800efee:	617b      	str	r3, [r7, #20]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	699b      	ldr	r3, [r3, #24]
 800eff6:	617b      	str	r3, [r7, #20]
 800eff8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800effa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800effc:	6a39      	ldr	r1, [r7, #32]
 800effe:	68f8      	ldr	r0, [r7, #12]
 800f000:	f000 faee 	bl	800f5e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d00d      	beq.n	800f026 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f00e:	2b04      	cmp	r3, #4
 800f010:	d107      	bne.n	800f022 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f020:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f022:	2301      	movs	r3, #1
 800f024:	e02b      	b.n	800f07e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f026:	88fb      	ldrh	r3, [r7, #6]
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d105      	bne.n	800f038 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f02c:	893b      	ldrh	r3, [r7, #8]
 800f02e:	b2da      	uxtb	r2, r3
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	611a      	str	r2, [r3, #16]
 800f036:	e021      	b.n	800f07c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800f038:	893b      	ldrh	r3, [r7, #8]
 800f03a:	0a1b      	lsrs	r3, r3, #8
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	b2da      	uxtb	r2, r3
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f048:	6a39      	ldr	r1, [r7, #32]
 800f04a:	68f8      	ldr	r0, [r7, #12]
 800f04c:	f000 fac8 	bl	800f5e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800f050:	4603      	mov	r3, r0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d00d      	beq.n	800f072 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f05a:	2b04      	cmp	r3, #4
 800f05c:	d107      	bne.n	800f06e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f06c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800f06e:	2301      	movs	r3, #1
 800f070:	e005      	b.n	800f07e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f072:	893b      	ldrh	r3, [r7, #8]
 800f074:	b2da      	uxtb	r2, r3
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3718      	adds	r7, #24
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	00010002 	.word	0x00010002

0800f08c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b088      	sub	sp, #32
 800f090:	af02      	add	r7, sp, #8
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	4608      	mov	r0, r1
 800f096:	4611      	mov	r1, r2
 800f098:	461a      	mov	r2, r3
 800f09a:	4603      	mov	r3, r0
 800f09c:	817b      	strh	r3, [r7, #10]
 800f09e:	460b      	mov	r3, r1
 800f0a0:	813b      	strh	r3, [r7, #8]
 800f0a2:	4613      	mov	r3, r2
 800f0a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	681a      	ldr	r2, [r3, #0]
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f0b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f0c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	6a3b      	ldr	r3, [r7, #32]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800f0d2:	68f8      	ldr	r0, [r7, #12]
 800f0d4:	f000 f96a 	bl	800f3ac <I2C_WaitOnFlagUntilTimeout>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00d      	beq.n	800f0fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f0e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f0ec:	d103      	bne.n	800f0f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f0f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800f0f6:	2303      	movs	r3, #3
 800f0f8:	e0aa      	b.n	800f250 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f0fa:	897b      	ldrh	r3, [r7, #10]
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	461a      	mov	r2, r3
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800f108:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f10c:	6a3a      	ldr	r2, [r7, #32]
 800f10e:	4952      	ldr	r1, [pc, #328]	@ (800f258 <I2C_RequestMemoryRead+0x1cc>)
 800f110:	68f8      	ldr	r0, [r7, #12]
 800f112:	f000 f9c5 	bl	800f4a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d001      	beq.n	800f120 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800f11c:	2301      	movs	r3, #1
 800f11e:	e097      	b.n	800f250 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f120:	2300      	movs	r3, #0
 800f122:	617b      	str	r3, [r7, #20]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	695b      	ldr	r3, [r3, #20]
 800f12a:	617b      	str	r3, [r7, #20]
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	699b      	ldr	r3, [r3, #24]
 800f132:	617b      	str	r3, [r7, #20]
 800f134:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f138:	6a39      	ldr	r1, [r7, #32]
 800f13a:	68f8      	ldr	r0, [r7, #12]
 800f13c:	f000 fa50 	bl	800f5e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00d      	beq.n	800f162 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f14a:	2b04      	cmp	r3, #4
 800f14c:	d107      	bne.n	800f15e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f15c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f15e:	2301      	movs	r3, #1
 800f160:	e076      	b.n	800f250 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f162:	88fb      	ldrh	r3, [r7, #6]
 800f164:	2b01      	cmp	r3, #1
 800f166:	d105      	bne.n	800f174 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f168:	893b      	ldrh	r3, [r7, #8]
 800f16a:	b2da      	uxtb	r2, r3
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	611a      	str	r2, [r3, #16]
 800f172:	e021      	b.n	800f1b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800f174:	893b      	ldrh	r3, [r7, #8]
 800f176:	0a1b      	lsrs	r3, r3, #8
 800f178:	b29b      	uxth	r3, r3
 800f17a:	b2da      	uxtb	r2, r3
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f184:	6a39      	ldr	r1, [r7, #32]
 800f186:	68f8      	ldr	r0, [r7, #12]
 800f188:	f000 fa2a 	bl	800f5e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d00d      	beq.n	800f1ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f196:	2b04      	cmp	r3, #4
 800f198:	d107      	bne.n	800f1aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f1a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	e050      	b.n	800f250 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f1ae:	893b      	ldrh	r3, [r7, #8]
 800f1b0:	b2da      	uxtb	r2, r3
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f1b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1ba:	6a39      	ldr	r1, [r7, #32]
 800f1bc:	68f8      	ldr	r0, [r7, #12]
 800f1be:	f000 fa0f 	bl	800f5e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d00d      	beq.n	800f1e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1cc:	2b04      	cmp	r3, #4
 800f1ce:	d107      	bne.n	800f1e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f1de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	e035      	b.n	800f250 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f1f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	6a3b      	ldr	r3, [r7, #32]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	f000 f8d3 	bl	800f3ac <I2C_WaitOnFlagUntilTimeout>
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d00d      	beq.n	800f228 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f21a:	d103      	bne.n	800f224 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f222:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800f224:	2303      	movs	r3, #3
 800f226:	e013      	b.n	800f250 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800f228:	897b      	ldrh	r3, [r7, #10]
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	f043 0301 	orr.w	r3, r3, #1
 800f230:	b2da      	uxtb	r2, r3
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23a:	6a3a      	ldr	r2, [r7, #32]
 800f23c:	4906      	ldr	r1, [pc, #24]	@ (800f258 <I2C_RequestMemoryRead+0x1cc>)
 800f23e:	68f8      	ldr	r0, [r7, #12]
 800f240:	f000 f92e 	bl	800f4a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f244:	4603      	mov	r3, r0
 800f246:	2b00      	cmp	r3, #0
 800f248:	d001      	beq.n	800f24e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800f24a:	2301      	movs	r3, #1
 800f24c:	e000      	b.n	800f250 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800f24e:	2300      	movs	r3, #0
}
 800f250:	4618      	mov	r0, r3
 800f252:	3718      	adds	r7, #24
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	00010002 	.word	0x00010002

0800f25c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b086      	sub	sp, #24
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f264:	2300      	movs	r3, #0
 800f266:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f26c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f274:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800f276:	4b4b      	ldr	r3, [pc, #300]	@ (800f3a4 <I2C_DMAAbort+0x148>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	08db      	lsrs	r3, r3, #3
 800f27c:	4a4a      	ldr	r2, [pc, #296]	@ (800f3a8 <I2C_DMAAbort+0x14c>)
 800f27e:	fba2 2303 	umull	r2, r3, r2, r3
 800f282:	0a1a      	lsrs	r2, r3, #8
 800f284:	4613      	mov	r3, r2
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	4413      	add	r3, r2
 800f28a:	00da      	lsls	r2, r3, #3
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d106      	bne.n	800f2a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f29a:	f043 0220 	orr.w	r2, r3, #32
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800f2a2:	e00a      	b.n	800f2ba <I2C_DMAAbort+0x5e>
    }
    count--;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	3b01      	subs	r3, #1
 800f2a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f2b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2b8:	d0ea      	beq.n	800f290 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d003      	beq.n	800f2ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d003      	beq.n	800f2da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f2e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d003      	beq.n	800f300 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f304:	2b00      	cmp	r3, #0
 800f306:	d003      	beq.n	800f310 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f30c:	2200      	movs	r2, #0
 800f30e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f022 0201 	bic.w	r2, r2, #1
 800f31e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f326:	b2db      	uxtb	r3, r3
 800f328:	2b60      	cmp	r3, #96	@ 0x60
 800f32a:	d10e      	bne.n	800f34a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	2220      	movs	r2, #32
 800f330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	2200      	movs	r2, #0
 800f338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	2200      	movs	r2, #0
 800f340:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800f342:	6978      	ldr	r0, [r7, #20]
 800f344:	f7fe fc83 	bl	800dc4e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f348:	e027      	b.n	800f39a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f34a:	7cfb      	ldrb	r3, [r7, #19]
 800f34c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800f350:	2b28      	cmp	r3, #40	@ 0x28
 800f352:	d117      	bne.n	800f384 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	681a      	ldr	r2, [r3, #0]
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f042 0201 	orr.w	r2, r2, #1
 800f362:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f372:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	2200      	movs	r2, #0
 800f378:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	2228      	movs	r2, #40	@ 0x28
 800f37e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800f382:	e007      	b.n	800f394 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	2220      	movs	r2, #32
 800f388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	2200      	movs	r2, #0
 800f390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800f394:	6978      	ldr	r0, [r7, #20]
 800f396:	f7fe fc51 	bl	800dc3c <HAL_I2C_ErrorCallback>
}
 800f39a:	bf00      	nop
 800f39c:	3718      	adds	r7, #24
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	20000000 	.word	0x20000000
 800f3a8:	14f8b589 	.word	0x14f8b589

0800f3ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b084      	sub	sp, #16
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	603b      	str	r3, [r7, #0]
 800f3b8:	4613      	mov	r3, r2
 800f3ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f3bc:	e048      	b.n	800f450 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3c4:	d044      	beq.n	800f450 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3c6:	f7fc fc45 	bl	800bc54 <HAL_GetTick>
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	69bb      	ldr	r3, [r7, #24]
 800f3ce:	1ad3      	subs	r3, r2, r3
 800f3d0:	683a      	ldr	r2, [r7, #0]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d302      	bcc.n	800f3dc <I2C_WaitOnFlagUntilTimeout+0x30>
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d139      	bne.n	800f450 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	0c1b      	lsrs	r3, r3, #16
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d10d      	bne.n	800f402 <I2C_WaitOnFlagUntilTimeout+0x56>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	695b      	ldr	r3, [r3, #20]
 800f3ec:	43da      	mvns	r2, r3
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	4013      	ands	r3, r2
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	bf0c      	ite	eq
 800f3f8:	2301      	moveq	r3, #1
 800f3fa:	2300      	movne	r3, #0
 800f3fc:	b2db      	uxtb	r3, r3
 800f3fe:	461a      	mov	r2, r3
 800f400:	e00c      	b.n	800f41c <I2C_WaitOnFlagUntilTimeout+0x70>
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	699b      	ldr	r3, [r3, #24]
 800f408:	43da      	mvns	r2, r3
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	4013      	ands	r3, r2
 800f40e:	b29b      	uxth	r3, r3
 800f410:	2b00      	cmp	r3, #0
 800f412:	bf0c      	ite	eq
 800f414:	2301      	moveq	r3, #1
 800f416:	2300      	movne	r3, #0
 800f418:	b2db      	uxtb	r3, r3
 800f41a:	461a      	mov	r2, r3
 800f41c:	79fb      	ldrb	r3, [r7, #7]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d116      	bne.n	800f450 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	2200      	movs	r2, #0
 800f426:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2220      	movs	r2, #32
 800f42c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	2200      	movs	r2, #0
 800f434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f43c:	f043 0220 	orr.w	r2, r3, #32
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2200      	movs	r2, #0
 800f448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f44c:	2301      	movs	r3, #1
 800f44e:	e023      	b.n	800f498 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	0c1b      	lsrs	r3, r3, #16
 800f454:	b2db      	uxtb	r3, r3
 800f456:	2b01      	cmp	r3, #1
 800f458:	d10d      	bne.n	800f476 <I2C_WaitOnFlagUntilTimeout+0xca>
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	695b      	ldr	r3, [r3, #20]
 800f460:	43da      	mvns	r2, r3
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	4013      	ands	r3, r2
 800f466:	b29b      	uxth	r3, r3
 800f468:	2b00      	cmp	r3, #0
 800f46a:	bf0c      	ite	eq
 800f46c:	2301      	moveq	r3, #1
 800f46e:	2300      	movne	r3, #0
 800f470:	b2db      	uxtb	r3, r3
 800f472:	461a      	mov	r2, r3
 800f474:	e00c      	b.n	800f490 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	699b      	ldr	r3, [r3, #24]
 800f47c:	43da      	mvns	r2, r3
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	4013      	ands	r3, r2
 800f482:	b29b      	uxth	r3, r3
 800f484:	2b00      	cmp	r3, #0
 800f486:	bf0c      	ite	eq
 800f488:	2301      	moveq	r3, #1
 800f48a:	2300      	movne	r3, #0
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	461a      	mov	r2, r3
 800f490:	79fb      	ldrb	r3, [r7, #7]
 800f492:	429a      	cmp	r2, r3
 800f494:	d093      	beq.n	800f3be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f496:	2300      	movs	r3, #0
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3710      	adds	r7, #16
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b084      	sub	sp, #16
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	60f8      	str	r0, [r7, #12]
 800f4a8:	60b9      	str	r1, [r7, #8]
 800f4aa:	607a      	str	r2, [r7, #4]
 800f4ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f4ae:	e071      	b.n	800f594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	695b      	ldr	r3, [r3, #20]
 800f4b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f4ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4be:	d123      	bne.n	800f508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f4ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f4d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2220      	movs	r2, #32
 800f4e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4f4:	f043 0204 	orr.w	r2, r3, #4
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2200      	movs	r2, #0
 800f500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800f504:	2301      	movs	r3, #1
 800f506:	e067      	b.n	800f5d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f50e:	d041      	beq.n	800f594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f510:	f7fc fba0 	bl	800bc54 <HAL_GetTick>
 800f514:	4602      	mov	r2, r0
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	1ad3      	subs	r3, r2, r3
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d302      	bcc.n	800f526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d136      	bne.n	800f594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	0c1b      	lsrs	r3, r3, #16
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d10c      	bne.n	800f54a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	695b      	ldr	r3, [r3, #20]
 800f536:	43da      	mvns	r2, r3
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	4013      	ands	r3, r2
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	2b00      	cmp	r3, #0
 800f540:	bf14      	ite	ne
 800f542:	2301      	movne	r3, #1
 800f544:	2300      	moveq	r3, #0
 800f546:	b2db      	uxtb	r3, r3
 800f548:	e00b      	b.n	800f562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	699b      	ldr	r3, [r3, #24]
 800f550:	43da      	mvns	r2, r3
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	4013      	ands	r3, r2
 800f556:	b29b      	uxth	r3, r3
 800f558:	2b00      	cmp	r3, #0
 800f55a:	bf14      	ite	ne
 800f55c:	2301      	movne	r3, #1
 800f55e:	2300      	moveq	r3, #0
 800f560:	b2db      	uxtb	r3, r3
 800f562:	2b00      	cmp	r3, #0
 800f564:	d016      	beq.n	800f594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2200      	movs	r2, #0
 800f56a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2220      	movs	r2, #32
 800f570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2200      	movs	r2, #0
 800f578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f580:	f043 0220 	orr.w	r2, r3, #32
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f590:	2301      	movs	r3, #1
 800f592:	e021      	b.n	800f5d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	0c1b      	lsrs	r3, r3, #16
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d10c      	bne.n	800f5b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	695b      	ldr	r3, [r3, #20]
 800f5a4:	43da      	mvns	r2, r3
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	4013      	ands	r3, r2
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	bf14      	ite	ne
 800f5b0:	2301      	movne	r3, #1
 800f5b2:	2300      	moveq	r3, #0
 800f5b4:	b2db      	uxtb	r3, r3
 800f5b6:	e00b      	b.n	800f5d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	699b      	ldr	r3, [r3, #24]
 800f5be:	43da      	mvns	r2, r3
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	bf14      	ite	ne
 800f5ca:	2301      	movne	r3, #1
 800f5cc:	2300      	moveq	r3, #0
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	f47f af6d 	bne.w	800f4b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800f5d6:	2300      	movs	r3, #0
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3710      	adds	r7, #16
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b084      	sub	sp, #16
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f5ec:	e034      	b.n	800f658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f5ee:	68f8      	ldr	r0, [r7, #12]
 800f5f0:	f000 f915 	bl	800f81e <I2C_IsAcknowledgeFailed>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d001      	beq.n	800f5fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	e034      	b.n	800f668 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f604:	d028      	beq.n	800f658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f606:	f7fc fb25 	bl	800bc54 <HAL_GetTick>
 800f60a:	4602      	mov	r2, r0
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	1ad3      	subs	r3, r2, r3
 800f610:	68ba      	ldr	r2, [r7, #8]
 800f612:	429a      	cmp	r2, r3
 800f614:	d302      	bcc.n	800f61c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d11d      	bne.n	800f658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	695b      	ldr	r3, [r3, #20]
 800f622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f626:	2b80      	cmp	r3, #128	@ 0x80
 800f628:	d016      	beq.n	800f658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	2200      	movs	r2, #0
 800f62e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	2220      	movs	r2, #32
 800f634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2200      	movs	r2, #0
 800f63c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f644:	f043 0220 	orr.w	r2, r3, #32
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	2200      	movs	r2, #0
 800f650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f654:	2301      	movs	r3, #1
 800f656:	e007      	b.n	800f668 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	695b      	ldr	r3, [r3, #20]
 800f65e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f662:	2b80      	cmp	r3, #128	@ 0x80
 800f664:	d1c3      	bne.n	800f5ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f666:	2300      	movs	r3, #0
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3710      	adds	r7, #16
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f67c:	e034      	b.n	800f6e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f000 f8cd 	bl	800f81e <I2C_IsAcknowledgeFailed>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d001      	beq.n	800f68e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f68a:	2301      	movs	r3, #1
 800f68c:	e034      	b.n	800f6f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f694:	d028      	beq.n	800f6e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f696:	f7fc fadd 	bl	800bc54 <HAL_GetTick>
 800f69a:	4602      	mov	r2, r0
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	1ad3      	subs	r3, r2, r3
 800f6a0:	68ba      	ldr	r2, [r7, #8]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d302      	bcc.n	800f6ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d11d      	bne.n	800f6e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	695b      	ldr	r3, [r3, #20]
 800f6b2:	f003 0304 	and.w	r3, r3, #4
 800f6b6:	2b04      	cmp	r3, #4
 800f6b8:	d016      	beq.n	800f6e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	2220      	movs	r2, #32
 800f6c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6d4:	f043 0220 	orr.w	r2, r3, #32
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	e007      	b.n	800f6f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	695b      	ldr	r3, [r3, #20]
 800f6ee:	f003 0304 	and.w	r3, r3, #4
 800f6f2:	2b04      	cmp	r3, #4
 800f6f4:	d1c3      	bne.n	800f67e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f6f6:	2300      	movs	r3, #0
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3710      	adds	r7, #16
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800f700:	b480      	push	{r7}
 800f702:	b085      	sub	sp, #20
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f708:	2300      	movs	r3, #0
 800f70a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800f70c:	4b13      	ldr	r3, [pc, #76]	@ (800f75c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	08db      	lsrs	r3, r3, #3
 800f712:	4a13      	ldr	r2, [pc, #76]	@ (800f760 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800f714:	fba2 2303 	umull	r2, r3, r2, r3
 800f718:	0a1a      	lsrs	r2, r3, #8
 800f71a:	4613      	mov	r3, r2
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	4413      	add	r3, r2
 800f720:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	3b01      	subs	r3, #1
 800f726:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d107      	bne.n	800f73e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f732:	f043 0220 	orr.w	r2, r3, #32
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800f73a:	2301      	movs	r3, #1
 800f73c:	e008      	b.n	800f750 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f74c:	d0e9      	beq.n	800f722 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3714      	adds	r7, #20
 800f754:	46bd      	mov	sp, r7
 800f756:	bc80      	pop	{r7}
 800f758:	4770      	bx	lr
 800f75a:	bf00      	nop
 800f75c:	20000000 	.word	0x20000000
 800f760:	14f8b589 	.word	0x14f8b589

0800f764 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	60f8      	str	r0, [r7, #12]
 800f76c:	60b9      	str	r1, [r7, #8]
 800f76e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f770:	e049      	b.n	800f806 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	695b      	ldr	r3, [r3, #20]
 800f778:	f003 0310 	and.w	r3, r3, #16
 800f77c:	2b10      	cmp	r3, #16
 800f77e:	d119      	bne.n	800f7b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f06f 0210 	mvn.w	r2, #16
 800f788:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	2200      	movs	r2, #0
 800f78e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2220      	movs	r2, #32
 800f794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2200      	movs	r2, #0
 800f79c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	e030      	b.n	800f816 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7b4:	f7fc fa4e 	bl	800bc54 <HAL_GetTick>
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	1ad3      	subs	r3, r2, r3
 800f7be:	68ba      	ldr	r2, [r7, #8]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d302      	bcc.n	800f7ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d11d      	bne.n	800f806 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	695b      	ldr	r3, [r3, #20]
 800f7d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7d4:	2b40      	cmp	r3, #64	@ 0x40
 800f7d6:	d016      	beq.n	800f806 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2220      	movs	r2, #32
 800f7e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7f2:	f043 0220 	orr.w	r2, r3, #32
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800f802:	2301      	movs	r3, #1
 800f804:	e007      	b.n	800f816 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	695b      	ldr	r3, [r3, #20]
 800f80c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f810:	2b40      	cmp	r3, #64	@ 0x40
 800f812:	d1ae      	bne.n	800f772 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f814:	2300      	movs	r3, #0
}
 800f816:	4618      	mov	r0, r3
 800f818:	3710      	adds	r7, #16
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}

0800f81e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800f81e:	b480      	push	{r7}
 800f820:	b083      	sub	sp, #12
 800f822:	af00      	add	r7, sp, #0
 800f824:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	695b      	ldr	r3, [r3, #20]
 800f82c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f834:	d11b      	bne.n	800f86e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f83e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2200      	movs	r2, #0
 800f844:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2220      	movs	r2, #32
 800f84a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2200      	movs	r2, #0
 800f852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f85a:	f043 0204 	orr.w	r2, r3, #4
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2200      	movs	r2, #0
 800f866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800f86a:	2301      	movs	r3, #1
 800f86c:	e000      	b.n	800f870 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f86e:	2300      	movs	r3, #0
}
 800f870:	4618      	mov	r0, r3
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	bc80      	pop	{r7}
 800f878:	4770      	bx	lr

0800f87a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800f87a:	b480      	push	{r7}
 800f87c:	b083      	sub	sp, #12
 800f87e:	af00      	add	r7, sp, #0
 800f880:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f886:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800f88a:	d103      	bne.n	800f894 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2201      	movs	r2, #1
 800f890:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800f892:	e007      	b.n	800f8a4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f898:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800f89c:	d102      	bne.n	800f8a4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2208      	movs	r2, #8
 800f8a2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800f8a4:	bf00      	nop
 800f8a6:	370c      	adds	r7, #12
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bc80      	pop	{r7}
 800f8ac:	4770      	bx	lr
	...

0800f8b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b088      	sub	sp, #32
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d101      	bne.n	800f8c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f8be:	2301      	movs	r3, #1
 800f8c0:	e31d      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f8c2:	4b94      	ldr	r3, [pc, #592]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f8c4:	689b      	ldr	r3, [r3, #8]
 800f8c6:	f003 030c 	and.w	r3, r3, #12
 800f8ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f8cc:	4b91      	ldr	r3, [pc, #580]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f8ce:	689b      	ldr	r3, [r3, #8]
 800f8d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f8d4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f003 0301 	and.w	r3, r3, #1
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d07b      	beq.n	800f9da <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f8e2:	69bb      	ldr	r3, [r7, #24]
 800f8e4:	2b08      	cmp	r3, #8
 800f8e6:	d006      	beq.n	800f8f6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f8e8:	69bb      	ldr	r3, [r7, #24]
 800f8ea:	2b0c      	cmp	r3, #12
 800f8ec:	d10f      	bne.n	800f90e <HAL_RCC_OscConfig+0x5e>
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8f4:	d10b      	bne.n	800f90e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f8f6:	4b87      	ldr	r3, [pc, #540]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d06a      	beq.n	800f9d8 <HAL_RCC_OscConfig+0x128>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d166      	bne.n	800f9d8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800f90a:	2301      	movs	r3, #1
 800f90c:	e2f7      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	685b      	ldr	r3, [r3, #4]
 800f912:	2b01      	cmp	r3, #1
 800f914:	d106      	bne.n	800f924 <HAL_RCC_OscConfig+0x74>
 800f916:	4b7f      	ldr	r3, [pc, #508]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4a7e      	ldr	r2, [pc, #504]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f91c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f920:	6013      	str	r3, [r2, #0]
 800f922:	e02d      	b.n	800f980 <HAL_RCC_OscConfig+0xd0>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d10c      	bne.n	800f946 <HAL_RCC_OscConfig+0x96>
 800f92c:	4b79      	ldr	r3, [pc, #484]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a78      	ldr	r2, [pc, #480]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f936:	6013      	str	r3, [r2, #0]
 800f938:	4b76      	ldr	r3, [pc, #472]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	4a75      	ldr	r2, [pc, #468]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f93e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f942:	6013      	str	r3, [r2, #0]
 800f944:	e01c      	b.n	800f980 <HAL_RCC_OscConfig+0xd0>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	2b05      	cmp	r3, #5
 800f94c:	d10c      	bne.n	800f968 <HAL_RCC_OscConfig+0xb8>
 800f94e:	4b71      	ldr	r3, [pc, #452]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	4a70      	ldr	r2, [pc, #448]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f958:	6013      	str	r3, [r2, #0]
 800f95a:	4b6e      	ldr	r3, [pc, #440]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	4a6d      	ldr	r2, [pc, #436]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f964:	6013      	str	r3, [r2, #0]
 800f966:	e00b      	b.n	800f980 <HAL_RCC_OscConfig+0xd0>
 800f968:	4b6a      	ldr	r3, [pc, #424]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	4a69      	ldr	r2, [pc, #420]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f96e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f972:	6013      	str	r3, [r2, #0]
 800f974:	4b67      	ldr	r3, [pc, #412]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4a66      	ldr	r2, [pc, #408]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f97a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f97e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d013      	beq.n	800f9b0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f988:	f7fc f964 	bl	800bc54 <HAL_GetTick>
 800f98c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f98e:	e008      	b.n	800f9a2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f990:	f7fc f960 	bl	800bc54 <HAL_GetTick>
 800f994:	4602      	mov	r2, r0
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	1ad3      	subs	r3, r2, r3
 800f99a:	2b64      	cmp	r3, #100	@ 0x64
 800f99c:	d901      	bls.n	800f9a2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800f99e:	2303      	movs	r3, #3
 800f9a0:	e2ad      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f9a2:	4b5c      	ldr	r3, [pc, #368]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d0f0      	beq.n	800f990 <HAL_RCC_OscConfig+0xe0>
 800f9ae:	e014      	b.n	800f9da <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f9b0:	f7fc f950 	bl	800bc54 <HAL_GetTick>
 800f9b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f9b6:	e008      	b.n	800f9ca <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f9b8:	f7fc f94c 	bl	800bc54 <HAL_GetTick>
 800f9bc:	4602      	mov	r2, r0
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	1ad3      	subs	r3, r2, r3
 800f9c2:	2b64      	cmp	r3, #100	@ 0x64
 800f9c4:	d901      	bls.n	800f9ca <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800f9c6:	2303      	movs	r3, #3
 800f9c8:	e299      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f9ca:	4b52      	ldr	r3, [pc, #328]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d1f0      	bne.n	800f9b8 <HAL_RCC_OscConfig+0x108>
 800f9d6:	e000      	b.n	800f9da <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f9d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f003 0302 	and.w	r3, r3, #2
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d05a      	beq.n	800fa9c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f9e6:	69bb      	ldr	r3, [r7, #24]
 800f9e8:	2b04      	cmp	r3, #4
 800f9ea:	d005      	beq.n	800f9f8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f9ec:	69bb      	ldr	r3, [r7, #24]
 800f9ee:	2b0c      	cmp	r3, #12
 800f9f0:	d119      	bne.n	800fa26 <HAL_RCC_OscConfig+0x176>
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d116      	bne.n	800fa26 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f9f8:	4b46      	ldr	r3, [pc, #280]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f003 0302 	and.w	r3, r3, #2
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d005      	beq.n	800fa10 <HAL_RCC_OscConfig+0x160>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	d001      	beq.n	800fa10 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	e276      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fa10:	4b40      	ldr	r3, [pc, #256]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800fa12:	685b      	ldr	r3, [r3, #4]
 800fa14:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	691b      	ldr	r3, [r3, #16]
 800fa1c:	021b      	lsls	r3, r3, #8
 800fa1e:	493d      	ldr	r1, [pc, #244]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800fa20:	4313      	orrs	r3, r2
 800fa22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fa24:	e03a      	b.n	800fa9c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	68db      	ldr	r3, [r3, #12]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d020      	beq.n	800fa70 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fa2e:	4b3a      	ldr	r3, [pc, #232]	@ (800fb18 <HAL_RCC_OscConfig+0x268>)
 800fa30:	2201      	movs	r2, #1
 800fa32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa34:	f7fc f90e 	bl	800bc54 <HAL_GetTick>
 800fa38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fa3a:	e008      	b.n	800fa4e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fa3c:	f7fc f90a 	bl	800bc54 <HAL_GetTick>
 800fa40:	4602      	mov	r2, r0
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	1ad3      	subs	r3, r2, r3
 800fa46:	2b02      	cmp	r3, #2
 800fa48:	d901      	bls.n	800fa4e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800fa4a:	2303      	movs	r3, #3
 800fa4c:	e257      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fa4e:	4b31      	ldr	r3, [pc, #196]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f003 0302 	and.w	r3, r3, #2
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d0f0      	beq.n	800fa3c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fa5a:	4b2e      	ldr	r3, [pc, #184]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	691b      	ldr	r3, [r3, #16]
 800fa66:	021b      	lsls	r3, r3, #8
 800fa68:	492a      	ldr	r1, [pc, #168]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800fa6a:	4313      	orrs	r3, r2
 800fa6c:	604b      	str	r3, [r1, #4]
 800fa6e:	e015      	b.n	800fa9c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fa70:	4b29      	ldr	r3, [pc, #164]	@ (800fb18 <HAL_RCC_OscConfig+0x268>)
 800fa72:	2200      	movs	r2, #0
 800fa74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa76:	f7fc f8ed 	bl	800bc54 <HAL_GetTick>
 800fa7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fa7c:	e008      	b.n	800fa90 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fa7e:	f7fc f8e9 	bl	800bc54 <HAL_GetTick>
 800fa82:	4602      	mov	r2, r0
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	1ad3      	subs	r3, r2, r3
 800fa88:	2b02      	cmp	r3, #2
 800fa8a:	d901      	bls.n	800fa90 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800fa8c:	2303      	movs	r3, #3
 800fa8e:	e236      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fa90:	4b20      	ldr	r3, [pc, #128]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f003 0302 	and.w	r3, r3, #2
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d1f0      	bne.n	800fa7e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f003 0310 	and.w	r3, r3, #16
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	f000 80b8 	beq.w	800fc1a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d170      	bne.n	800fb92 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800fab0:	4b18      	ldr	r3, [pc, #96]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d005      	beq.n	800fac8 <HAL_RCC_OscConfig+0x218>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	699b      	ldr	r3, [r3, #24]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d101      	bne.n	800fac8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800fac4:	2301      	movs	r3, #1
 800fac6:	e21a      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6a1a      	ldr	r2, [r3, #32]
 800facc:	4b11      	ldr	r3, [pc, #68]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800face:	685b      	ldr	r3, [r3, #4]
 800fad0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d921      	bls.n	800fb1c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6a1b      	ldr	r3, [r3, #32]
 800fadc:	4618      	mov	r0, r3
 800fade:	f000 fc7d 	bl	80103dc <RCC_SetFlashLatencyFromMSIRange>
 800fae2:	4603      	mov	r3, r0
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d001      	beq.n	800faec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800fae8:	2301      	movs	r3, #1
 800faea:	e208      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800faec:	4b09      	ldr	r3, [pc, #36]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6a1b      	ldr	r3, [r3, #32]
 800faf8:	4906      	ldr	r1, [pc, #24]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800fafa:	4313      	orrs	r3, r2
 800fafc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fafe:	4b05      	ldr	r3, [pc, #20]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	69db      	ldr	r3, [r3, #28]
 800fb0a:	061b      	lsls	r3, r3, #24
 800fb0c:	4901      	ldr	r1, [pc, #4]	@ (800fb14 <HAL_RCC_OscConfig+0x264>)
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	604b      	str	r3, [r1, #4]
 800fb12:	e020      	b.n	800fb56 <HAL_RCC_OscConfig+0x2a6>
 800fb14:	40023800 	.word	0x40023800
 800fb18:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fb1c:	4b99      	ldr	r3, [pc, #612]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6a1b      	ldr	r3, [r3, #32]
 800fb28:	4996      	ldr	r1, [pc, #600]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fb2e:	4b95      	ldr	r3, [pc, #596]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fb30:	685b      	ldr	r3, [r3, #4]
 800fb32:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	69db      	ldr	r3, [r3, #28]
 800fb3a:	061b      	lsls	r3, r3, #24
 800fb3c:	4991      	ldr	r1, [pc, #580]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fb3e:	4313      	orrs	r3, r2
 800fb40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6a1b      	ldr	r3, [r3, #32]
 800fb46:	4618      	mov	r0, r3
 800fb48:	f000 fc48 	bl	80103dc <RCC_SetFlashLatencyFromMSIRange>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d001      	beq.n	800fb56 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800fb52:	2301      	movs	r3, #1
 800fb54:	e1d3      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6a1b      	ldr	r3, [r3, #32]
 800fb5a:	0b5b      	lsrs	r3, r3, #13
 800fb5c:	3301      	adds	r3, #1
 800fb5e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800fb62:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800fb66:	4a87      	ldr	r2, [pc, #540]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fb68:	6892      	ldr	r2, [r2, #8]
 800fb6a:	0912      	lsrs	r2, r2, #4
 800fb6c:	f002 020f 	and.w	r2, r2, #15
 800fb70:	4985      	ldr	r1, [pc, #532]	@ (800fd88 <HAL_RCC_OscConfig+0x4d8>)
 800fb72:	5c8a      	ldrb	r2, [r1, r2]
 800fb74:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fb76:	4a85      	ldr	r2, [pc, #532]	@ (800fd8c <HAL_RCC_OscConfig+0x4dc>)
 800fb78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800fb7a:	4b85      	ldr	r3, [pc, #532]	@ (800fd90 <HAL_RCC_OscConfig+0x4e0>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fc f81c 	bl	800bbbc <HAL_InitTick>
 800fb84:	4603      	mov	r3, r0
 800fb86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800fb88:	7bfb      	ldrb	r3, [r7, #15]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d045      	beq.n	800fc1a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800fb8e:	7bfb      	ldrb	r3, [r7, #15]
 800fb90:	e1b5      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	699b      	ldr	r3, [r3, #24]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d029      	beq.n	800fbee <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800fb9a:	4b7e      	ldr	r3, [pc, #504]	@ (800fd94 <HAL_RCC_OscConfig+0x4e4>)
 800fb9c:	2201      	movs	r2, #1
 800fb9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fba0:	f7fc f858 	bl	800bc54 <HAL_GetTick>
 800fba4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fba6:	e008      	b.n	800fbba <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fba8:	f7fc f854 	bl	800bc54 <HAL_GetTick>
 800fbac:	4602      	mov	r2, r0
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	1ad3      	subs	r3, r2, r3
 800fbb2:	2b02      	cmp	r3, #2
 800fbb4:	d901      	bls.n	800fbba <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800fbb6:	2303      	movs	r3, #3
 800fbb8:	e1a1      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fbba:	4b72      	ldr	r3, [pc, #456]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d0f0      	beq.n	800fba8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fbc6:	4b6f      	ldr	r3, [pc, #444]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6a1b      	ldr	r3, [r3, #32]
 800fbd2:	496c      	ldr	r1, [pc, #432]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fbd8:	4b6a      	ldr	r3, [pc, #424]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fbda:	685b      	ldr	r3, [r3, #4]
 800fbdc:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	69db      	ldr	r3, [r3, #28]
 800fbe4:	061b      	lsls	r3, r3, #24
 800fbe6:	4967      	ldr	r1, [pc, #412]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fbe8:	4313      	orrs	r3, r2
 800fbea:	604b      	str	r3, [r1, #4]
 800fbec:	e015      	b.n	800fc1a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fbee:	4b69      	ldr	r3, [pc, #420]	@ (800fd94 <HAL_RCC_OscConfig+0x4e4>)
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fbf4:	f7fc f82e 	bl	800bc54 <HAL_GetTick>
 800fbf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fbfa:	e008      	b.n	800fc0e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fbfc:	f7fc f82a 	bl	800bc54 <HAL_GetTick>
 800fc00:	4602      	mov	r2, r0
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	1ad3      	subs	r3, r2, r3
 800fc06:	2b02      	cmp	r3, #2
 800fc08:	d901      	bls.n	800fc0e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800fc0a:	2303      	movs	r3, #3
 800fc0c:	e177      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fc0e:	4b5d      	ldr	r3, [pc, #372]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d1f0      	bne.n	800fbfc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f003 0308 	and.w	r3, r3, #8
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d030      	beq.n	800fc88 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	695b      	ldr	r3, [r3, #20]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d016      	beq.n	800fc5c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fc2e:	4b5a      	ldr	r3, [pc, #360]	@ (800fd98 <HAL_RCC_OscConfig+0x4e8>)
 800fc30:	2201      	movs	r2, #1
 800fc32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fc34:	f7fc f80e 	bl	800bc54 <HAL_GetTick>
 800fc38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fc3a:	e008      	b.n	800fc4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fc3c:	f7fc f80a 	bl	800bc54 <HAL_GetTick>
 800fc40:	4602      	mov	r2, r0
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	1ad3      	subs	r3, r2, r3
 800fc46:	2b02      	cmp	r3, #2
 800fc48:	d901      	bls.n	800fc4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800fc4a:	2303      	movs	r3, #3
 800fc4c:	e157      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fc4e:	4b4d      	ldr	r3, [pc, #308]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fc50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc52:	f003 0302 	and.w	r3, r3, #2
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d0f0      	beq.n	800fc3c <HAL_RCC_OscConfig+0x38c>
 800fc5a:	e015      	b.n	800fc88 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fc5c:	4b4e      	ldr	r3, [pc, #312]	@ (800fd98 <HAL_RCC_OscConfig+0x4e8>)
 800fc5e:	2200      	movs	r2, #0
 800fc60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fc62:	f7fb fff7 	bl	800bc54 <HAL_GetTick>
 800fc66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fc68:	e008      	b.n	800fc7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fc6a:	f7fb fff3 	bl	800bc54 <HAL_GetTick>
 800fc6e:	4602      	mov	r2, r0
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	1ad3      	subs	r3, r2, r3
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	d901      	bls.n	800fc7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800fc78:	2303      	movs	r3, #3
 800fc7a:	e140      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fc7c:	4b41      	ldr	r3, [pc, #260]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fc7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc80:	f003 0302 	and.w	r3, r3, #2
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d1f0      	bne.n	800fc6a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f003 0304 	and.w	r3, r3, #4
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	f000 80b5 	beq.w	800fe00 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fc96:	2300      	movs	r3, #0
 800fc98:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fc9a:	4b3a      	ldr	r3, [pc, #232]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fc9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d10d      	bne.n	800fcc2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fca6:	4b37      	ldr	r3, [pc, #220]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcaa:	4a36      	ldr	r2, [pc, #216]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fcac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fcb0:	6253      	str	r3, [r2, #36]	@ 0x24
 800fcb2:	4b34      	ldr	r3, [pc, #208]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fcb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fcba:	60bb      	str	r3, [r7, #8]
 800fcbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fcc2:	4b36      	ldr	r3, [pc, #216]	@ (800fd9c <HAL_RCC_OscConfig+0x4ec>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d118      	bne.n	800fd00 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fcce:	4b33      	ldr	r3, [pc, #204]	@ (800fd9c <HAL_RCC_OscConfig+0x4ec>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4a32      	ldr	r2, [pc, #200]	@ (800fd9c <HAL_RCC_OscConfig+0x4ec>)
 800fcd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fcd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fcda:	f7fb ffbb 	bl	800bc54 <HAL_GetTick>
 800fcde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fce0:	e008      	b.n	800fcf4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fce2:	f7fb ffb7 	bl	800bc54 <HAL_GetTick>
 800fce6:	4602      	mov	r2, r0
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	1ad3      	subs	r3, r2, r3
 800fcec:	2b64      	cmp	r3, #100	@ 0x64
 800fcee:	d901      	bls.n	800fcf4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800fcf0:	2303      	movs	r3, #3
 800fcf2:	e104      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fcf4:	4b29      	ldr	r3, [pc, #164]	@ (800fd9c <HAL_RCC_OscConfig+0x4ec>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d0f0      	beq.n	800fce2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	689b      	ldr	r3, [r3, #8]
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d106      	bne.n	800fd16 <HAL_RCC_OscConfig+0x466>
 800fd08:	4b1e      	ldr	r3, [pc, #120]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fd0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd0c:	4a1d      	ldr	r2, [pc, #116]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fd0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fd12:	6353      	str	r3, [r2, #52]	@ 0x34
 800fd14:	e02d      	b.n	800fd72 <HAL_RCC_OscConfig+0x4c2>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	689b      	ldr	r3, [r3, #8]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d10c      	bne.n	800fd38 <HAL_RCC_OscConfig+0x488>
 800fd1e:	4b19      	ldr	r3, [pc, #100]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fd20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd22:	4a18      	ldr	r2, [pc, #96]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fd24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fd28:	6353      	str	r3, [r2, #52]	@ 0x34
 800fd2a:	4b16      	ldr	r3, [pc, #88]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fd2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd2e:	4a15      	ldr	r2, [pc, #84]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fd30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fd34:	6353      	str	r3, [r2, #52]	@ 0x34
 800fd36:	e01c      	b.n	800fd72 <HAL_RCC_OscConfig+0x4c2>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	689b      	ldr	r3, [r3, #8]
 800fd3c:	2b05      	cmp	r3, #5
 800fd3e:	d10c      	bne.n	800fd5a <HAL_RCC_OscConfig+0x4aa>
 800fd40:	4b10      	ldr	r3, [pc, #64]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fd42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd44:	4a0f      	ldr	r2, [pc, #60]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fd46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800fd4a:	6353      	str	r3, [r2, #52]	@ 0x34
 800fd4c:	4b0d      	ldr	r3, [pc, #52]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fd4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd50:	4a0c      	ldr	r2, [pc, #48]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fd52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fd56:	6353      	str	r3, [r2, #52]	@ 0x34
 800fd58:	e00b      	b.n	800fd72 <HAL_RCC_OscConfig+0x4c2>
 800fd5a:	4b0a      	ldr	r3, [pc, #40]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fd5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd5e:	4a09      	ldr	r2, [pc, #36]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fd60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fd64:	6353      	str	r3, [r2, #52]	@ 0x34
 800fd66:	4b07      	ldr	r3, [pc, #28]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fd68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd6a:	4a06      	ldr	r2, [pc, #24]	@ (800fd84 <HAL_RCC_OscConfig+0x4d4>)
 800fd6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fd70:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	689b      	ldr	r3, [r3, #8]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d024      	beq.n	800fdc4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fd7a:	f7fb ff6b 	bl	800bc54 <HAL_GetTick>
 800fd7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fd80:	e019      	b.n	800fdb6 <HAL_RCC_OscConfig+0x506>
 800fd82:	bf00      	nop
 800fd84:	40023800 	.word	0x40023800
 800fd88:	08013fec 	.word	0x08013fec
 800fd8c:	20000000 	.word	0x20000000
 800fd90:	20000190 	.word	0x20000190
 800fd94:	42470020 	.word	0x42470020
 800fd98:	42470680 	.word	0x42470680
 800fd9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fda0:	f7fb ff58 	bl	800bc54 <HAL_GetTick>
 800fda4:	4602      	mov	r2, r0
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	1ad3      	subs	r3, r2, r3
 800fdaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d901      	bls.n	800fdb6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800fdb2:	2303      	movs	r3, #3
 800fdb4:	e0a3      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fdb6:	4b54      	ldr	r3, [pc, #336]	@ (800ff08 <HAL_RCC_OscConfig+0x658>)
 800fdb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fdba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d0ee      	beq.n	800fda0 <HAL_RCC_OscConfig+0x4f0>
 800fdc2:	e014      	b.n	800fdee <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fdc4:	f7fb ff46 	bl	800bc54 <HAL_GetTick>
 800fdc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fdca:	e00a      	b.n	800fde2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fdcc:	f7fb ff42 	bl	800bc54 <HAL_GetTick>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	693b      	ldr	r3, [r7, #16]
 800fdd4:	1ad3      	subs	r3, r2, r3
 800fdd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d901      	bls.n	800fde2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800fdde:	2303      	movs	r3, #3
 800fde0:	e08d      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fde2:	4b49      	ldr	r3, [pc, #292]	@ (800ff08 <HAL_RCC_OscConfig+0x658>)
 800fde4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fde6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d1ee      	bne.n	800fdcc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800fdee:	7ffb      	ldrb	r3, [r7, #31]
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d105      	bne.n	800fe00 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fdf4:	4b44      	ldr	r3, [pc, #272]	@ (800ff08 <HAL_RCC_OscConfig+0x658>)
 800fdf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdf8:	4a43      	ldr	r2, [pc, #268]	@ (800ff08 <HAL_RCC_OscConfig+0x658>)
 800fdfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fdfe:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d079      	beq.n	800fefc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800fe08:	69bb      	ldr	r3, [r7, #24]
 800fe0a:	2b0c      	cmp	r3, #12
 800fe0c:	d056      	beq.n	800febc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe12:	2b02      	cmp	r3, #2
 800fe14:	d13b      	bne.n	800fe8e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fe16:	4b3d      	ldr	r3, [pc, #244]	@ (800ff0c <HAL_RCC_OscConfig+0x65c>)
 800fe18:	2200      	movs	r2, #0
 800fe1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe1c:	f7fb ff1a 	bl	800bc54 <HAL_GetTick>
 800fe20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fe22:	e008      	b.n	800fe36 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fe24:	f7fb ff16 	bl	800bc54 <HAL_GetTick>
 800fe28:	4602      	mov	r2, r0
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	1ad3      	subs	r3, r2, r3
 800fe2e:	2b02      	cmp	r3, #2
 800fe30:	d901      	bls.n	800fe36 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800fe32:	2303      	movs	r3, #3
 800fe34:	e063      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fe36:	4b34      	ldr	r3, [pc, #208]	@ (800ff08 <HAL_RCC_OscConfig+0x658>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1f0      	bne.n	800fe24 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fe42:	4b31      	ldr	r3, [pc, #196]	@ (800ff08 <HAL_RCC_OscConfig+0x658>)
 800fe44:	689b      	ldr	r3, [r3, #8]
 800fe46:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe52:	4319      	orrs	r1, r3
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe58:	430b      	orrs	r3, r1
 800fe5a:	492b      	ldr	r1, [pc, #172]	@ (800ff08 <HAL_RCC_OscConfig+0x658>)
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800fe60:	4b2a      	ldr	r3, [pc, #168]	@ (800ff0c <HAL_RCC_OscConfig+0x65c>)
 800fe62:	2201      	movs	r2, #1
 800fe64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe66:	f7fb fef5 	bl	800bc54 <HAL_GetTick>
 800fe6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fe6c:	e008      	b.n	800fe80 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fe6e:	f7fb fef1 	bl	800bc54 <HAL_GetTick>
 800fe72:	4602      	mov	r2, r0
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	1ad3      	subs	r3, r2, r3
 800fe78:	2b02      	cmp	r3, #2
 800fe7a:	d901      	bls.n	800fe80 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800fe7c:	2303      	movs	r3, #3
 800fe7e:	e03e      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fe80:	4b21      	ldr	r3, [pc, #132]	@ (800ff08 <HAL_RCC_OscConfig+0x658>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d0f0      	beq.n	800fe6e <HAL_RCC_OscConfig+0x5be>
 800fe8c:	e036      	b.n	800fefc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fe8e:	4b1f      	ldr	r3, [pc, #124]	@ (800ff0c <HAL_RCC_OscConfig+0x65c>)
 800fe90:	2200      	movs	r2, #0
 800fe92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe94:	f7fb fede 	bl	800bc54 <HAL_GetTick>
 800fe98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fe9a:	e008      	b.n	800feae <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fe9c:	f7fb feda 	bl	800bc54 <HAL_GetTick>
 800fea0:	4602      	mov	r2, r0
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	1ad3      	subs	r3, r2, r3
 800fea6:	2b02      	cmp	r3, #2
 800fea8:	d901      	bls.n	800feae <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800feaa:	2303      	movs	r3, #3
 800feac:	e027      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800feae:	4b16      	ldr	r3, [pc, #88]	@ (800ff08 <HAL_RCC_OscConfig+0x658>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d1f0      	bne.n	800fe9c <HAL_RCC_OscConfig+0x5ec>
 800feba:	e01f      	b.n	800fefc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	d101      	bne.n	800fec8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800fec4:	2301      	movs	r3, #1
 800fec6:	e01a      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800fec8:	4b0f      	ldr	r3, [pc, #60]	@ (800ff08 <HAL_RCC_OscConfig+0x658>)
 800feca:	689b      	ldr	r3, [r3, #8]
 800fecc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fed8:	429a      	cmp	r2, r3
 800feda:	d10d      	bne.n	800fef8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d106      	bne.n	800fef8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d001      	beq.n	800fefc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800fef8:	2301      	movs	r3, #1
 800fefa:	e000      	b.n	800fefe <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800fefc:	2300      	movs	r3, #0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3720      	adds	r7, #32
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop
 800ff08:	40023800 	.word	0x40023800
 800ff0c:	42470060 	.word	0x42470060

0800ff10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d101      	bne.n	800ff24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ff20:	2301      	movs	r3, #1
 800ff22:	e11a      	b.n	801015a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ff24:	4b8f      	ldr	r3, [pc, #572]	@ (8010164 <HAL_RCC_ClockConfig+0x254>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	f003 0301 	and.w	r3, r3, #1
 800ff2c:	683a      	ldr	r2, [r7, #0]
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d919      	bls.n	800ff66 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d105      	bne.n	800ff44 <HAL_RCC_ClockConfig+0x34>
 800ff38:	4b8a      	ldr	r3, [pc, #552]	@ (8010164 <HAL_RCC_ClockConfig+0x254>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	4a89      	ldr	r2, [pc, #548]	@ (8010164 <HAL_RCC_ClockConfig+0x254>)
 800ff3e:	f043 0304 	orr.w	r3, r3, #4
 800ff42:	6013      	str	r3, [r2, #0]
 800ff44:	4b87      	ldr	r3, [pc, #540]	@ (8010164 <HAL_RCC_ClockConfig+0x254>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f023 0201 	bic.w	r2, r3, #1
 800ff4c:	4985      	ldr	r1, [pc, #532]	@ (8010164 <HAL_RCC_ClockConfig+0x254>)
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	4313      	orrs	r3, r2
 800ff52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ff54:	4b83      	ldr	r3, [pc, #524]	@ (8010164 <HAL_RCC_ClockConfig+0x254>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	f003 0301 	and.w	r3, r3, #1
 800ff5c:	683a      	ldr	r2, [r7, #0]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d001      	beq.n	800ff66 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800ff62:	2301      	movs	r3, #1
 800ff64:	e0f9      	b.n	801015a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	f003 0302 	and.w	r3, r3, #2
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d008      	beq.n	800ff84 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ff72:	4b7d      	ldr	r3, [pc, #500]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 800ff74:	689b      	ldr	r3, [r3, #8]
 800ff76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	689b      	ldr	r3, [r3, #8]
 800ff7e:	497a      	ldr	r1, [pc, #488]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 800ff80:	4313      	orrs	r3, r2
 800ff82:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f003 0301 	and.w	r3, r3, #1
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	f000 808e 	beq.w	80100ae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	2b02      	cmp	r3, #2
 800ff98:	d107      	bne.n	800ffaa <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ff9a:	4b73      	ldr	r3, [pc, #460]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d121      	bne.n	800ffea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	e0d7      	b.n	801015a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	685b      	ldr	r3, [r3, #4]
 800ffae:	2b03      	cmp	r3, #3
 800ffb0:	d107      	bne.n	800ffc2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ffb2:	4b6d      	ldr	r3, [pc, #436]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d115      	bne.n	800ffea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	e0cb      	b.n	801015a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	2b01      	cmp	r3, #1
 800ffc8:	d107      	bne.n	800ffda <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ffca:	4b67      	ldr	r3, [pc, #412]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f003 0302 	and.w	r3, r3, #2
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d109      	bne.n	800ffea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	e0bf      	b.n	801015a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ffda:	4b63      	ldr	r3, [pc, #396]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d101      	bne.n	800ffea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	e0b7      	b.n	801015a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ffea:	4b5f      	ldr	r3, [pc, #380]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	f023 0203 	bic.w	r2, r3, #3
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	495c      	ldr	r1, [pc, #368]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 800fff8:	4313      	orrs	r3, r2
 800fffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fffc:	f7fb fe2a 	bl	800bc54 <HAL_GetTick>
 8010000:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	685b      	ldr	r3, [r3, #4]
 8010006:	2b02      	cmp	r3, #2
 8010008:	d112      	bne.n	8010030 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801000a:	e00a      	b.n	8010022 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801000c:	f7fb fe22 	bl	800bc54 <HAL_GetTick>
 8010010:	4602      	mov	r2, r0
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	1ad3      	subs	r3, r2, r3
 8010016:	f241 3288 	movw	r2, #5000	@ 0x1388
 801001a:	4293      	cmp	r3, r2
 801001c:	d901      	bls.n	8010022 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 801001e:	2303      	movs	r3, #3
 8010020:	e09b      	b.n	801015a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010022:	4b51      	ldr	r3, [pc, #324]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 8010024:	689b      	ldr	r3, [r3, #8]
 8010026:	f003 030c 	and.w	r3, r3, #12
 801002a:	2b08      	cmp	r3, #8
 801002c:	d1ee      	bne.n	801000c <HAL_RCC_ClockConfig+0xfc>
 801002e:	e03e      	b.n	80100ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	2b03      	cmp	r3, #3
 8010036:	d112      	bne.n	801005e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010038:	e00a      	b.n	8010050 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801003a:	f7fb fe0b 	bl	800bc54 <HAL_GetTick>
 801003e:	4602      	mov	r2, r0
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	1ad3      	subs	r3, r2, r3
 8010044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010048:	4293      	cmp	r3, r2
 801004a:	d901      	bls.n	8010050 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 801004c:	2303      	movs	r3, #3
 801004e:	e084      	b.n	801015a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010050:	4b45      	ldr	r3, [pc, #276]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 8010052:	689b      	ldr	r3, [r3, #8]
 8010054:	f003 030c 	and.w	r3, r3, #12
 8010058:	2b0c      	cmp	r3, #12
 801005a:	d1ee      	bne.n	801003a <HAL_RCC_ClockConfig+0x12a>
 801005c:	e027      	b.n	80100ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	2b01      	cmp	r3, #1
 8010064:	d11d      	bne.n	80100a2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010066:	e00a      	b.n	801007e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010068:	f7fb fdf4 	bl	800bc54 <HAL_GetTick>
 801006c:	4602      	mov	r2, r0
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	1ad3      	subs	r3, r2, r3
 8010072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010076:	4293      	cmp	r3, r2
 8010078:	d901      	bls.n	801007e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 801007a:	2303      	movs	r3, #3
 801007c:	e06d      	b.n	801015a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801007e:	4b3a      	ldr	r3, [pc, #232]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 8010080:	689b      	ldr	r3, [r3, #8]
 8010082:	f003 030c 	and.w	r3, r3, #12
 8010086:	2b04      	cmp	r3, #4
 8010088:	d1ee      	bne.n	8010068 <HAL_RCC_ClockConfig+0x158>
 801008a:	e010      	b.n	80100ae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801008c:	f7fb fde2 	bl	800bc54 <HAL_GetTick>
 8010090:	4602      	mov	r2, r0
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	1ad3      	subs	r3, r2, r3
 8010096:	f241 3288 	movw	r2, #5000	@ 0x1388
 801009a:	4293      	cmp	r3, r2
 801009c:	d901      	bls.n	80100a2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 801009e:	2303      	movs	r3, #3
 80100a0:	e05b      	b.n	801015a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80100a2:	4b31      	ldr	r3, [pc, #196]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 80100a4:	689b      	ldr	r3, [r3, #8]
 80100a6:	f003 030c 	and.w	r3, r3, #12
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d1ee      	bne.n	801008c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80100ae:	4b2d      	ldr	r3, [pc, #180]	@ (8010164 <HAL_RCC_ClockConfig+0x254>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	f003 0301 	and.w	r3, r3, #1
 80100b6:	683a      	ldr	r2, [r7, #0]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d219      	bcs.n	80100f0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	2b01      	cmp	r3, #1
 80100c0:	d105      	bne.n	80100ce <HAL_RCC_ClockConfig+0x1be>
 80100c2:	4b28      	ldr	r3, [pc, #160]	@ (8010164 <HAL_RCC_ClockConfig+0x254>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	4a27      	ldr	r2, [pc, #156]	@ (8010164 <HAL_RCC_ClockConfig+0x254>)
 80100c8:	f043 0304 	orr.w	r3, r3, #4
 80100cc:	6013      	str	r3, [r2, #0]
 80100ce:	4b25      	ldr	r3, [pc, #148]	@ (8010164 <HAL_RCC_ClockConfig+0x254>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f023 0201 	bic.w	r2, r3, #1
 80100d6:	4923      	ldr	r1, [pc, #140]	@ (8010164 <HAL_RCC_ClockConfig+0x254>)
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	4313      	orrs	r3, r2
 80100dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80100de:	4b21      	ldr	r3, [pc, #132]	@ (8010164 <HAL_RCC_ClockConfig+0x254>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f003 0301 	and.w	r3, r3, #1
 80100e6:	683a      	ldr	r2, [r7, #0]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d001      	beq.n	80100f0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80100ec:	2301      	movs	r3, #1
 80100ee:	e034      	b.n	801015a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	f003 0304 	and.w	r3, r3, #4
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d008      	beq.n	801010e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80100fc:	4b1a      	ldr	r3, [pc, #104]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	68db      	ldr	r3, [r3, #12]
 8010108:	4917      	ldr	r1, [pc, #92]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 801010a:	4313      	orrs	r3, r2
 801010c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f003 0308 	and.w	r3, r3, #8
 8010116:	2b00      	cmp	r3, #0
 8010118:	d009      	beq.n	801012e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801011a:	4b13      	ldr	r3, [pc, #76]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 801011c:	689b      	ldr	r3, [r3, #8]
 801011e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	691b      	ldr	r3, [r3, #16]
 8010126:	00db      	lsls	r3, r3, #3
 8010128:	490f      	ldr	r1, [pc, #60]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 801012a:	4313      	orrs	r3, r2
 801012c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801012e:	f000 f823 	bl	8010178 <HAL_RCC_GetSysClockFreq>
 8010132:	4602      	mov	r2, r0
 8010134:	4b0c      	ldr	r3, [pc, #48]	@ (8010168 <HAL_RCC_ClockConfig+0x258>)
 8010136:	689b      	ldr	r3, [r3, #8]
 8010138:	091b      	lsrs	r3, r3, #4
 801013a:	f003 030f 	and.w	r3, r3, #15
 801013e:	490b      	ldr	r1, [pc, #44]	@ (801016c <HAL_RCC_ClockConfig+0x25c>)
 8010140:	5ccb      	ldrb	r3, [r1, r3]
 8010142:	fa22 f303 	lsr.w	r3, r2, r3
 8010146:	4a0a      	ldr	r2, [pc, #40]	@ (8010170 <HAL_RCC_ClockConfig+0x260>)
 8010148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801014a:	4b0a      	ldr	r3, [pc, #40]	@ (8010174 <HAL_RCC_ClockConfig+0x264>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4618      	mov	r0, r3
 8010150:	f7fb fd34 	bl	800bbbc <HAL_InitTick>
 8010154:	4603      	mov	r3, r0
 8010156:	72fb      	strb	r3, [r7, #11]

  return status;
 8010158:	7afb      	ldrb	r3, [r7, #11]
}
 801015a:	4618      	mov	r0, r3
 801015c:	3710      	adds	r7, #16
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
 8010162:	bf00      	nop
 8010164:	40023c00 	.word	0x40023c00
 8010168:	40023800 	.word	0x40023800
 801016c:	08013fec 	.word	0x08013fec
 8010170:	20000000 	.word	0x20000000
 8010174:	20000190 	.word	0x20000190

08010178 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801017c:	b092      	sub	sp, #72	@ 0x48
 801017e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8010180:	4b79      	ldr	r3, [pc, #484]	@ (8010368 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8010182:	689b      	ldr	r3, [r3, #8]
 8010184:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010188:	f003 030c 	and.w	r3, r3, #12
 801018c:	2b0c      	cmp	r3, #12
 801018e:	d00d      	beq.n	80101ac <HAL_RCC_GetSysClockFreq+0x34>
 8010190:	2b0c      	cmp	r3, #12
 8010192:	f200 80d5 	bhi.w	8010340 <HAL_RCC_GetSysClockFreq+0x1c8>
 8010196:	2b04      	cmp	r3, #4
 8010198:	d002      	beq.n	80101a0 <HAL_RCC_GetSysClockFreq+0x28>
 801019a:	2b08      	cmp	r3, #8
 801019c:	d003      	beq.n	80101a6 <HAL_RCC_GetSysClockFreq+0x2e>
 801019e:	e0cf      	b.n	8010340 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80101a0:	4b72      	ldr	r3, [pc, #456]	@ (801036c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80101a2:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80101a4:	e0da      	b.n	801035c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80101a6:	4b72      	ldr	r3, [pc, #456]	@ (8010370 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80101a8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80101aa:	e0d7      	b.n	801035c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80101ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101ae:	0c9b      	lsrs	r3, r3, #18
 80101b0:	f003 020f 	and.w	r2, r3, #15
 80101b4:	4b6f      	ldr	r3, [pc, #444]	@ (8010374 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80101b6:	5c9b      	ldrb	r3, [r3, r2]
 80101b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80101ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101bc:	0d9b      	lsrs	r3, r3, #22
 80101be:	f003 0303 	and.w	r3, r3, #3
 80101c2:	3301      	adds	r3, #1
 80101c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80101c6:	4b68      	ldr	r3, [pc, #416]	@ (8010368 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80101c8:	689b      	ldr	r3, [r3, #8]
 80101ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d05d      	beq.n	801028e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80101d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101d4:	2200      	movs	r2, #0
 80101d6:	4618      	mov	r0, r3
 80101d8:	4611      	mov	r1, r2
 80101da:	4604      	mov	r4, r0
 80101dc:	460d      	mov	r5, r1
 80101de:	4622      	mov	r2, r4
 80101e0:	462b      	mov	r3, r5
 80101e2:	f04f 0000 	mov.w	r0, #0
 80101e6:	f04f 0100 	mov.w	r1, #0
 80101ea:	0159      	lsls	r1, r3, #5
 80101ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80101f0:	0150      	lsls	r0, r2, #5
 80101f2:	4602      	mov	r2, r0
 80101f4:	460b      	mov	r3, r1
 80101f6:	4621      	mov	r1, r4
 80101f8:	1a51      	subs	r1, r2, r1
 80101fa:	6139      	str	r1, [r7, #16]
 80101fc:	4629      	mov	r1, r5
 80101fe:	eb63 0301 	sbc.w	r3, r3, r1
 8010202:	617b      	str	r3, [r7, #20]
 8010204:	f04f 0200 	mov.w	r2, #0
 8010208:	f04f 0300 	mov.w	r3, #0
 801020c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010210:	4659      	mov	r1, fp
 8010212:	018b      	lsls	r3, r1, #6
 8010214:	4651      	mov	r1, sl
 8010216:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801021a:	4651      	mov	r1, sl
 801021c:	018a      	lsls	r2, r1, #6
 801021e:	46d4      	mov	ip, sl
 8010220:	ebb2 080c 	subs.w	r8, r2, ip
 8010224:	4659      	mov	r1, fp
 8010226:	eb63 0901 	sbc.w	r9, r3, r1
 801022a:	f04f 0200 	mov.w	r2, #0
 801022e:	f04f 0300 	mov.w	r3, #0
 8010232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801023a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801023e:	4690      	mov	r8, r2
 8010240:	4699      	mov	r9, r3
 8010242:	4623      	mov	r3, r4
 8010244:	eb18 0303 	adds.w	r3, r8, r3
 8010248:	60bb      	str	r3, [r7, #8]
 801024a:	462b      	mov	r3, r5
 801024c:	eb49 0303 	adc.w	r3, r9, r3
 8010250:	60fb      	str	r3, [r7, #12]
 8010252:	f04f 0200 	mov.w	r2, #0
 8010256:	f04f 0300 	mov.w	r3, #0
 801025a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801025e:	4629      	mov	r1, r5
 8010260:	024b      	lsls	r3, r1, #9
 8010262:	4620      	mov	r0, r4
 8010264:	4629      	mov	r1, r5
 8010266:	4604      	mov	r4, r0
 8010268:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 801026c:	4601      	mov	r1, r0
 801026e:	024a      	lsls	r2, r1, #9
 8010270:	4610      	mov	r0, r2
 8010272:	4619      	mov	r1, r3
 8010274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010276:	2200      	movs	r2, #0
 8010278:	62bb      	str	r3, [r7, #40]	@ 0x28
 801027a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801027c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8010280:	f7f0 ff7c 	bl	800117c <__aeabi_uldivmod>
 8010284:	4602      	mov	r2, r0
 8010286:	460b      	mov	r3, r1
 8010288:	4613      	mov	r3, r2
 801028a:	647b      	str	r3, [r7, #68]	@ 0x44
 801028c:	e055      	b.n	801033a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801028e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010290:	2200      	movs	r2, #0
 8010292:	623b      	str	r3, [r7, #32]
 8010294:	627a      	str	r2, [r7, #36]	@ 0x24
 8010296:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801029a:	4642      	mov	r2, r8
 801029c:	464b      	mov	r3, r9
 801029e:	f04f 0000 	mov.w	r0, #0
 80102a2:	f04f 0100 	mov.w	r1, #0
 80102a6:	0159      	lsls	r1, r3, #5
 80102a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80102ac:	0150      	lsls	r0, r2, #5
 80102ae:	4602      	mov	r2, r0
 80102b0:	460b      	mov	r3, r1
 80102b2:	46c4      	mov	ip, r8
 80102b4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80102b8:	4640      	mov	r0, r8
 80102ba:	4649      	mov	r1, r9
 80102bc:	468c      	mov	ip, r1
 80102be:	eb63 0b0c 	sbc.w	fp, r3, ip
 80102c2:	f04f 0200 	mov.w	r2, #0
 80102c6:	f04f 0300 	mov.w	r3, #0
 80102ca:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80102ce:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80102d2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80102d6:	ebb2 040a 	subs.w	r4, r2, sl
 80102da:	eb63 050b 	sbc.w	r5, r3, fp
 80102de:	f04f 0200 	mov.w	r2, #0
 80102e2:	f04f 0300 	mov.w	r3, #0
 80102e6:	00eb      	lsls	r3, r5, #3
 80102e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80102ec:	00e2      	lsls	r2, r4, #3
 80102ee:	4614      	mov	r4, r2
 80102f0:	461d      	mov	r5, r3
 80102f2:	4603      	mov	r3, r0
 80102f4:	18e3      	adds	r3, r4, r3
 80102f6:	603b      	str	r3, [r7, #0]
 80102f8:	460b      	mov	r3, r1
 80102fa:	eb45 0303 	adc.w	r3, r5, r3
 80102fe:	607b      	str	r3, [r7, #4]
 8010300:	f04f 0200 	mov.w	r2, #0
 8010304:	f04f 0300 	mov.w	r3, #0
 8010308:	e9d7 4500 	ldrd	r4, r5, [r7]
 801030c:	4629      	mov	r1, r5
 801030e:	028b      	lsls	r3, r1, #10
 8010310:	4620      	mov	r0, r4
 8010312:	4629      	mov	r1, r5
 8010314:	4604      	mov	r4, r0
 8010316:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 801031a:	4601      	mov	r1, r0
 801031c:	028a      	lsls	r2, r1, #10
 801031e:	4610      	mov	r0, r2
 8010320:	4619      	mov	r1, r3
 8010322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010324:	2200      	movs	r2, #0
 8010326:	61bb      	str	r3, [r7, #24]
 8010328:	61fa      	str	r2, [r7, #28]
 801032a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801032e:	f7f0 ff25 	bl	800117c <__aeabi_uldivmod>
 8010332:	4602      	mov	r2, r0
 8010334:	460b      	mov	r3, r1
 8010336:	4613      	mov	r3, r2
 8010338:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 801033a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801033c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 801033e:	e00d      	b.n	801035c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8010340:	4b09      	ldr	r3, [pc, #36]	@ (8010368 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	0b5b      	lsrs	r3, r3, #13
 8010346:	f003 0307 	and.w	r3, r3, #7
 801034a:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801034c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801034e:	3301      	adds	r3, #1
 8010350:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8010354:	fa02 f303 	lsl.w	r3, r2, r3
 8010358:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 801035a:	bf00      	nop
    }
  }
  return sysclockfreq;
 801035c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 801035e:	4618      	mov	r0, r3
 8010360:	3748      	adds	r7, #72	@ 0x48
 8010362:	46bd      	mov	sp, r7
 8010364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010368:	40023800 	.word	0x40023800
 801036c:	00f42400 	.word	0x00f42400
 8010370:	007a1200 	.word	0x007a1200
 8010374:	08013fe0 	.word	0x08013fe0

08010378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010378:	b480      	push	{r7}
 801037a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801037c:	4b02      	ldr	r3, [pc, #8]	@ (8010388 <HAL_RCC_GetHCLKFreq+0x10>)
 801037e:	681b      	ldr	r3, [r3, #0]
}
 8010380:	4618      	mov	r0, r3
 8010382:	46bd      	mov	sp, r7
 8010384:	bc80      	pop	{r7}
 8010386:	4770      	bx	lr
 8010388:	20000000 	.word	0x20000000

0801038c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010390:	f7ff fff2 	bl	8010378 <HAL_RCC_GetHCLKFreq>
 8010394:	4602      	mov	r2, r0
 8010396:	4b05      	ldr	r3, [pc, #20]	@ (80103ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8010398:	689b      	ldr	r3, [r3, #8]
 801039a:	0a1b      	lsrs	r3, r3, #8
 801039c:	f003 0307 	and.w	r3, r3, #7
 80103a0:	4903      	ldr	r1, [pc, #12]	@ (80103b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80103a2:	5ccb      	ldrb	r3, [r1, r3]
 80103a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	40023800 	.word	0x40023800
 80103b0:	08013ffc 	.word	0x08013ffc

080103b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80103b8:	f7ff ffde 	bl	8010378 <HAL_RCC_GetHCLKFreq>
 80103bc:	4602      	mov	r2, r0
 80103be:	4b05      	ldr	r3, [pc, #20]	@ (80103d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80103c0:	689b      	ldr	r3, [r3, #8]
 80103c2:	0adb      	lsrs	r3, r3, #11
 80103c4:	f003 0307 	and.w	r3, r3, #7
 80103c8:	4903      	ldr	r1, [pc, #12]	@ (80103d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80103ca:	5ccb      	ldrb	r3, [r1, r3]
 80103cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	40023800 	.word	0x40023800
 80103d8:	08013ffc 	.word	0x08013ffc

080103dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80103dc:	b480      	push	{r7}
 80103de:	b087      	sub	sp, #28
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80103e4:	2300      	movs	r3, #0
 80103e6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80103e8:	4b29      	ldr	r3, [pc, #164]	@ (8010490 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80103ea:	689b      	ldr	r3, [r3, #8]
 80103ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d12c      	bne.n	801044e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80103f4:	4b26      	ldr	r3, [pc, #152]	@ (8010490 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80103f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d005      	beq.n	801040c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8010400:	4b24      	ldr	r3, [pc, #144]	@ (8010494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8010408:	617b      	str	r3, [r7, #20]
 801040a:	e016      	b.n	801043a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801040c:	4b20      	ldr	r3, [pc, #128]	@ (8010490 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 801040e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010410:	4a1f      	ldr	r2, [pc, #124]	@ (8010490 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8010412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010416:	6253      	str	r3, [r2, #36]	@ 0x24
 8010418:	4b1d      	ldr	r3, [pc, #116]	@ (8010490 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 801041a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801041c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010420:	60fb      	str	r3, [r7, #12]
 8010422:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8010424:	4b1b      	ldr	r3, [pc, #108]	@ (8010494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 801042c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 801042e:	4b18      	ldr	r3, [pc, #96]	@ (8010490 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8010430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010432:	4a17      	ldr	r2, [pc, #92]	@ (8010490 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8010434:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010438:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8010440:	d105      	bne.n	801044e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8010448:	d101      	bne.n	801044e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 801044a:	2301      	movs	r3, #1
 801044c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	2b01      	cmp	r3, #1
 8010452:	d105      	bne.n	8010460 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8010454:	4b10      	ldr	r3, [pc, #64]	@ (8010498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4a0f      	ldr	r2, [pc, #60]	@ (8010498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801045a:	f043 0304 	orr.w	r3, r3, #4
 801045e:	6013      	str	r3, [r2, #0]
 8010460:	4b0d      	ldr	r3, [pc, #52]	@ (8010498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	f023 0201 	bic.w	r2, r3, #1
 8010468:	490b      	ldr	r1, [pc, #44]	@ (8010498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	4313      	orrs	r3, r2
 801046e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8010470:	4b09      	ldr	r3, [pc, #36]	@ (8010498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	f003 0301 	and.w	r3, r3, #1
 8010478:	693a      	ldr	r2, [r7, #16]
 801047a:	429a      	cmp	r2, r3
 801047c:	d001      	beq.n	8010482 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 801047e:	2301      	movs	r3, #1
 8010480:	e000      	b.n	8010484 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8010482:	2300      	movs	r3, #0
}
 8010484:	4618      	mov	r0, r3
 8010486:	371c      	adds	r7, #28
 8010488:	46bd      	mov	sp, r7
 801048a:	bc80      	pop	{r7}
 801048c:	4770      	bx	lr
 801048e:	bf00      	nop
 8010490:	40023800 	.word	0x40023800
 8010494:	40007000 	.word	0x40007000
 8010498:	40023c00 	.word	0x40023c00

0801049c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d101      	bne.n	80104ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80104aa:	2301      	movs	r3, #1
 80104ac:	e07b      	b.n	80105a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d108      	bne.n	80104c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80104be:	d009      	beq.n	80104d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2200      	movs	r2, #0
 80104c4:	61da      	str	r2, [r3, #28]
 80104c6:	e005      	b.n	80104d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2200      	movs	r2, #0
 80104cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2200      	movs	r2, #0
 80104d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2200      	movs	r2, #0
 80104d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d106      	bne.n	80104f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2200      	movs	r2, #0
 80104ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f7f1 ff78 	bl	80023e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2202      	movs	r2, #2
 80104f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	681a      	ldr	r2, [r3, #0]
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801050a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	685b      	ldr	r3, [r3, #4]
 8010510:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	689b      	ldr	r3, [r3, #8]
 8010518:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 801051c:	431a      	orrs	r2, r3
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	68db      	ldr	r3, [r3, #12]
 8010522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010526:	431a      	orrs	r2, r3
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	691b      	ldr	r3, [r3, #16]
 801052c:	f003 0302 	and.w	r3, r3, #2
 8010530:	431a      	orrs	r2, r3
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	695b      	ldr	r3, [r3, #20]
 8010536:	f003 0301 	and.w	r3, r3, #1
 801053a:	431a      	orrs	r2, r3
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	699b      	ldr	r3, [r3, #24]
 8010540:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010544:	431a      	orrs	r2, r3
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	69db      	ldr	r3, [r3, #28]
 801054a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801054e:	431a      	orrs	r2, r3
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6a1b      	ldr	r3, [r3, #32]
 8010554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010558:	ea42 0103 	orr.w	r1, r2, r3
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010560:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	430a      	orrs	r2, r1
 801056a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	699b      	ldr	r3, [r3, #24]
 8010570:	0c1b      	lsrs	r3, r3, #16
 8010572:	f003 0104 	and.w	r1, r3, #4
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801057a:	f003 0210 	and.w	r2, r3, #16
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	430a      	orrs	r2, r1
 8010584:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	69da      	ldr	r2, [r3, #28]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010594:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2200      	movs	r2, #0
 801059a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2201      	movs	r2, #1
 80105a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80105a4:	2300      	movs	r3, #0
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3708      	adds	r7, #8
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}

080105ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80105ae:	b580      	push	{r7, lr}
 80105b0:	b088      	sub	sp, #32
 80105b2:	af00      	add	r7, sp, #0
 80105b4:	60f8      	str	r0, [r7, #12]
 80105b6:	60b9      	str	r1, [r7, #8]
 80105b8:	603b      	str	r3, [r7, #0]
 80105ba:	4613      	mov	r3, r2
 80105bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80105be:	2300      	movs	r3, #0
 80105c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	d101      	bne.n	80105d0 <HAL_SPI_Transmit+0x22>
 80105cc:	2302      	movs	r3, #2
 80105ce:	e12d      	b.n	801082c <HAL_SPI_Transmit+0x27e>
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	2201      	movs	r2, #1
 80105d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80105d8:	f7fb fb3c 	bl	800bc54 <HAL_GetTick>
 80105dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80105de:	88fb      	ldrh	r3, [r7, #6]
 80105e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80105e8:	b2db      	uxtb	r3, r3
 80105ea:	2b01      	cmp	r3, #1
 80105ec:	d002      	beq.n	80105f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80105ee:	2302      	movs	r3, #2
 80105f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80105f2:	e116      	b.n	8010822 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d002      	beq.n	8010600 <HAL_SPI_Transmit+0x52>
 80105fa:	88fb      	ldrh	r3, [r7, #6]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d102      	bne.n	8010606 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010600:	2301      	movs	r3, #1
 8010602:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010604:	e10d      	b.n	8010822 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	2203      	movs	r2, #3
 801060a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2200      	movs	r2, #0
 8010612:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	68ba      	ldr	r2, [r7, #8]
 8010618:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	88fa      	ldrh	r2, [r7, #6]
 801061e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	88fa      	ldrh	r2, [r7, #6]
 8010624:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	2200      	movs	r2, #0
 801062a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	2200      	movs	r2, #0
 8010630:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	2200      	movs	r2, #0
 8010636:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	2200      	movs	r2, #0
 801063c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	2200      	movs	r2, #0
 8010642:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	689b      	ldr	r3, [r3, #8]
 8010648:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801064c:	d10f      	bne.n	801066e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	681a      	ldr	r2, [r3, #0]
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801065c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	681a      	ldr	r2, [r3, #0]
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801066c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010678:	2b40      	cmp	r3, #64	@ 0x40
 801067a:	d007      	beq.n	801068c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	681a      	ldr	r2, [r3, #0]
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801068a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010694:	d14f      	bne.n	8010736 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	685b      	ldr	r3, [r3, #4]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d002      	beq.n	80106a4 <HAL_SPI_Transmit+0xf6>
 801069e:	8afb      	ldrh	r3, [r7, #22]
 80106a0:	2b01      	cmp	r3, #1
 80106a2:	d142      	bne.n	801072a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106a8:	881a      	ldrh	r2, [r3, #0]
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106b4:	1c9a      	adds	r2, r3, #2
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80106be:	b29b      	uxth	r3, r3
 80106c0:	3b01      	subs	r3, #1
 80106c2:	b29a      	uxth	r2, r3
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80106c8:	e02f      	b.n	801072a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	689b      	ldr	r3, [r3, #8]
 80106d0:	f003 0302 	and.w	r3, r3, #2
 80106d4:	2b02      	cmp	r3, #2
 80106d6:	d112      	bne.n	80106fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106dc:	881a      	ldrh	r2, [r3, #0]
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106e8:	1c9a      	adds	r2, r3, #2
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	3b01      	subs	r3, #1
 80106f6:	b29a      	uxth	r2, r3
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80106fc:	e015      	b.n	801072a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80106fe:	f7fb faa9 	bl	800bc54 <HAL_GetTick>
 8010702:	4602      	mov	r2, r0
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	1ad3      	subs	r3, r2, r3
 8010708:	683a      	ldr	r2, [r7, #0]
 801070a:	429a      	cmp	r2, r3
 801070c:	d803      	bhi.n	8010716 <HAL_SPI_Transmit+0x168>
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010714:	d102      	bne.n	801071c <HAL_SPI_Transmit+0x16e>
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d106      	bne.n	801072a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 801071c:	2303      	movs	r3, #3
 801071e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2201      	movs	r2, #1
 8010724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8010728:	e07b      	b.n	8010822 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801072e:	b29b      	uxth	r3, r3
 8010730:	2b00      	cmp	r3, #0
 8010732:	d1ca      	bne.n	80106ca <HAL_SPI_Transmit+0x11c>
 8010734:	e050      	b.n	80107d8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	685b      	ldr	r3, [r3, #4]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d002      	beq.n	8010744 <HAL_SPI_Transmit+0x196>
 801073e:	8afb      	ldrh	r3, [r7, #22]
 8010740:	2b01      	cmp	r3, #1
 8010742:	d144      	bne.n	80107ce <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	330c      	adds	r3, #12
 801074e:	7812      	ldrb	r2, [r2, #0]
 8010750:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010756:	1c5a      	adds	r2, r3, #1
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010760:	b29b      	uxth	r3, r3
 8010762:	3b01      	subs	r3, #1
 8010764:	b29a      	uxth	r2, r3
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 801076a:	e030      	b.n	80107ce <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	689b      	ldr	r3, [r3, #8]
 8010772:	f003 0302 	and.w	r3, r3, #2
 8010776:	2b02      	cmp	r3, #2
 8010778:	d113      	bne.n	80107a2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	330c      	adds	r3, #12
 8010784:	7812      	ldrb	r2, [r2, #0]
 8010786:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801078c:	1c5a      	adds	r2, r3, #1
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010796:	b29b      	uxth	r3, r3
 8010798:	3b01      	subs	r3, #1
 801079a:	b29a      	uxth	r2, r3
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	86da      	strh	r2, [r3, #54]	@ 0x36
 80107a0:	e015      	b.n	80107ce <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80107a2:	f7fb fa57 	bl	800bc54 <HAL_GetTick>
 80107a6:	4602      	mov	r2, r0
 80107a8:	69bb      	ldr	r3, [r7, #24]
 80107aa:	1ad3      	subs	r3, r2, r3
 80107ac:	683a      	ldr	r2, [r7, #0]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d803      	bhi.n	80107ba <HAL_SPI_Transmit+0x20c>
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107b8:	d102      	bne.n	80107c0 <HAL_SPI_Transmit+0x212>
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d106      	bne.n	80107ce <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80107c0:	2303      	movs	r3, #3
 80107c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2201      	movs	r2, #1
 80107c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80107cc:	e029      	b.n	8010822 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d1c9      	bne.n	801076c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80107d8:	69ba      	ldr	r2, [r7, #24]
 80107da:	6839      	ldr	r1, [r7, #0]
 80107dc:	68f8      	ldr	r0, [r7, #12]
 80107de:	f000 f8b1 	bl	8010944 <SPI_EndRxTxTransaction>
 80107e2:	4603      	mov	r3, r0
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d002      	beq.n	80107ee <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2220      	movs	r2, #32
 80107ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	689b      	ldr	r3, [r3, #8]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d10a      	bne.n	801080c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80107f6:	2300      	movs	r3, #0
 80107f8:	613b      	str	r3, [r7, #16]
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	68db      	ldr	r3, [r3, #12]
 8010800:	613b      	str	r3, [r7, #16]
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	689b      	ldr	r3, [r3, #8]
 8010808:	613b      	str	r3, [r7, #16]
 801080a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010810:	2b00      	cmp	r3, #0
 8010812:	d002      	beq.n	801081a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8010814:	2301      	movs	r3, #1
 8010816:	77fb      	strb	r3, [r7, #31]
 8010818:	e003      	b.n	8010822 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2201      	movs	r2, #1
 801081e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2200      	movs	r2, #0
 8010826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 801082a:	7ffb      	ldrb	r3, [r7, #31]
}
 801082c:	4618      	mov	r0, r3
 801082e:	3720      	adds	r7, #32
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b088      	sub	sp, #32
 8010838:	af00      	add	r7, sp, #0
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	603b      	str	r3, [r7, #0]
 8010840:	4613      	mov	r3, r2
 8010842:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010844:	f7fb fa06 	bl	800bc54 <HAL_GetTick>
 8010848:	4602      	mov	r2, r0
 801084a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801084c:	1a9b      	subs	r3, r3, r2
 801084e:	683a      	ldr	r2, [r7, #0]
 8010850:	4413      	add	r3, r2
 8010852:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010854:	f7fb f9fe 	bl	800bc54 <HAL_GetTick>
 8010858:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801085a:	4b39      	ldr	r3, [pc, #228]	@ (8010940 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	015b      	lsls	r3, r3, #5
 8010860:	0d1b      	lsrs	r3, r3, #20
 8010862:	69fa      	ldr	r2, [r7, #28]
 8010864:	fb02 f303 	mul.w	r3, r2, r3
 8010868:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801086a:	e054      	b.n	8010916 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010872:	d050      	beq.n	8010916 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010874:	f7fb f9ee 	bl	800bc54 <HAL_GetTick>
 8010878:	4602      	mov	r2, r0
 801087a:	69bb      	ldr	r3, [r7, #24]
 801087c:	1ad3      	subs	r3, r2, r3
 801087e:	69fa      	ldr	r2, [r7, #28]
 8010880:	429a      	cmp	r2, r3
 8010882:	d902      	bls.n	801088a <SPI_WaitFlagStateUntilTimeout+0x56>
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d13d      	bne.n	8010906 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	685a      	ldr	r2, [r3, #4]
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010898:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80108a2:	d111      	bne.n	80108c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	689b      	ldr	r3, [r3, #8]
 80108a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80108ac:	d004      	beq.n	80108b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	689b      	ldr	r3, [r3, #8]
 80108b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80108b6:	d107      	bne.n	80108c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	681a      	ldr	r2, [r3, #0]
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80108c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80108d0:	d10f      	bne.n	80108f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80108e0:	601a      	str	r2, [r3, #0]
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	681a      	ldr	r2, [r3, #0]
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80108f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	2201      	movs	r2, #1
 80108f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2200      	movs	r2, #0
 80108fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8010902:	2303      	movs	r3, #3
 8010904:	e017      	b.n	8010936 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d101      	bne.n	8010910 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801090c:	2300      	movs	r3, #0
 801090e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	3b01      	subs	r3, #1
 8010914:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	689a      	ldr	r2, [r3, #8]
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	4013      	ands	r3, r2
 8010920:	68ba      	ldr	r2, [r7, #8]
 8010922:	429a      	cmp	r2, r3
 8010924:	bf0c      	ite	eq
 8010926:	2301      	moveq	r3, #1
 8010928:	2300      	movne	r3, #0
 801092a:	b2db      	uxtb	r3, r3
 801092c:	461a      	mov	r2, r3
 801092e:	79fb      	ldrb	r3, [r7, #7]
 8010930:	429a      	cmp	r2, r3
 8010932:	d19b      	bne.n	801086c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010934:	2300      	movs	r3, #0
}
 8010936:	4618      	mov	r0, r3
 8010938:	3720      	adds	r7, #32
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}
 801093e:	bf00      	nop
 8010940:	20000000 	.word	0x20000000

08010944 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b088      	sub	sp, #32
 8010948:	af02      	add	r7, sp, #8
 801094a:	60f8      	str	r0, [r7, #12]
 801094c:	60b9      	str	r1, [r7, #8]
 801094e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010950:	4b1b      	ldr	r3, [pc, #108]	@ (80109c0 <SPI_EndRxTxTransaction+0x7c>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	4a1b      	ldr	r2, [pc, #108]	@ (80109c4 <SPI_EndRxTxTransaction+0x80>)
 8010956:	fba2 2303 	umull	r2, r3, r2, r3
 801095a:	0d5b      	lsrs	r3, r3, #21
 801095c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010960:	fb02 f303 	mul.w	r3, r2, r3
 8010964:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801096e:	d112      	bne.n	8010996 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	9300      	str	r3, [sp, #0]
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	2200      	movs	r2, #0
 8010978:	2180      	movs	r1, #128	@ 0x80
 801097a:	68f8      	ldr	r0, [r7, #12]
 801097c:	f7ff ff5a 	bl	8010834 <SPI_WaitFlagStateUntilTimeout>
 8010980:	4603      	mov	r3, r0
 8010982:	2b00      	cmp	r3, #0
 8010984:	d016      	beq.n	80109b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801098a:	f043 0220 	orr.w	r2, r3, #32
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8010992:	2303      	movs	r3, #3
 8010994:	e00f      	b.n	80109b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d00a      	beq.n	80109b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	3b01      	subs	r3, #1
 80109a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	689b      	ldr	r3, [r3, #8]
 80109a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80109ac:	2b80      	cmp	r3, #128	@ 0x80
 80109ae:	d0f2      	beq.n	8010996 <SPI_EndRxTxTransaction+0x52>
 80109b0:	e000      	b.n	80109b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80109b2:	bf00      	nop
  }

  return HAL_OK;
 80109b4:	2300      	movs	r3, #0
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3718      	adds	r7, #24
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	20000000 	.word	0x20000000
 80109c4:	165e9f81 	.word	0x165e9f81

080109c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d101      	bne.n	80109da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80109d6:	2301      	movs	r3, #1
 80109d8:	e031      	b.n	8010a3e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80109e0:	b2db      	uxtb	r3, r3
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d106      	bne.n	80109f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2200      	movs	r2, #0
 80109ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f7f1 fd3c 	bl	800246c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2202      	movs	r2, #2
 80109f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681a      	ldr	r2, [r3, #0]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	3304      	adds	r3, #4
 8010a04:	4619      	mov	r1, r3
 8010a06:	4610      	mov	r0, r2
 8010a08:	f000 fcd4 	bl	80113b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2201      	movs	r2, #1
 8010a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2201      	movs	r2, #1
 8010a18:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2201      	movs	r2, #1
 8010a20:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2201      	movs	r2, #1
 8010a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2201      	movs	r2, #1
 8010a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2201      	movs	r2, #1
 8010a38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8010a3c:	2300      	movs	r3, #0
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3708      	adds	r7, #8
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
	...

08010a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b085      	sub	sp, #20
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8010a56:	b2db      	uxtb	r3, r3
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d001      	beq.n	8010a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	e03a      	b.n	8010ad6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2202      	movs	r2, #2
 8010a64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	68da      	ldr	r2, [r3, #12]
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	f042 0201 	orr.w	r2, r2, #1
 8010a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010a80:	d00e      	beq.n	8010aa0 <HAL_TIM_Base_Start_IT+0x58>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	4a16      	ldr	r2, [pc, #88]	@ (8010ae0 <HAL_TIM_Base_Start_IT+0x98>)
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d009      	beq.n	8010aa0 <HAL_TIM_Base_Start_IT+0x58>
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	4a14      	ldr	r2, [pc, #80]	@ (8010ae4 <HAL_TIM_Base_Start_IT+0x9c>)
 8010a92:	4293      	cmp	r3, r2
 8010a94:	d004      	beq.n	8010aa0 <HAL_TIM_Base_Start_IT+0x58>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	4a13      	ldr	r2, [pc, #76]	@ (8010ae8 <HAL_TIM_Base_Start_IT+0xa0>)
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d111      	bne.n	8010ac4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	689b      	ldr	r3, [r3, #8]
 8010aa6:	f003 0307 	and.w	r3, r3, #7
 8010aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	2b06      	cmp	r3, #6
 8010ab0:	d010      	beq.n	8010ad4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f042 0201 	orr.w	r2, r2, #1
 8010ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ac2:	e007      	b.n	8010ad4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	681a      	ldr	r2, [r3, #0]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	f042 0201 	orr.w	r2, r2, #1
 8010ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010ad4:	2300      	movs	r3, #0
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3714      	adds	r7, #20
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bc80      	pop	{r7}
 8010ade:	4770      	bx	lr
 8010ae0:	40000400 	.word	0x40000400
 8010ae4:	40000800 	.word	0x40000800
 8010ae8:	40010800 	.word	0x40010800

08010aec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8010aec:	b480      	push	{r7}
 8010aee:	b083      	sub	sp, #12
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	68da      	ldr	r2, [r3, #12]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	f022 0201 	bic.w	r2, r2, #1
 8010b02:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	6a1a      	ldr	r2, [r3, #32]
 8010b0a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010b0e:	4013      	ands	r3, r2
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d107      	bne.n	8010b24 <HAL_TIM_Base_Stop_IT+0x38>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	681a      	ldr	r2, [r3, #0]
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	f022 0201 	bic.w	r2, r2, #1
 8010b22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2201      	movs	r2, #1
 8010b28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Return function status */
  return HAL_OK;
 8010b2c:	2300      	movs	r3, #0
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	370c      	adds	r7, #12
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bc80      	pop	{r7}
 8010b36:	4770      	bx	lr

08010b38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d101      	bne.n	8010b4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010b46:	2301      	movs	r3, #1
 8010b48:	e031      	b.n	8010bae <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d106      	bne.n	8010b64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f000 f829 	bl	8010bb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2202      	movs	r2, #2
 8010b68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681a      	ldr	r2, [r3, #0]
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	3304      	adds	r3, #4
 8010b74:	4619      	mov	r1, r3
 8010b76:	4610      	mov	r0, r2
 8010b78:	f000 fc1c 	bl	80113b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2201      	movs	r2, #1
 8010b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2201      	movs	r2, #1
 8010b88:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2201      	movs	r2, #1
 8010b90:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2201      	movs	r2, #1
 8010b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8010bac:	2300      	movs	r3, #0
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3708      	adds	r7, #8
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}

08010bb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010bb6:	b480      	push	{r7}
 8010bb8:	b083      	sub	sp, #12
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010bbe:	bf00      	nop
 8010bc0:	370c      	adds	r7, #12
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bc80      	pop	{r7}
 8010bc6:	4770      	bx	lr

08010bc8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b084      	sub	sp, #16
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d109      	bne.n	8010bf0 <HAL_TIM_PWM_Start_IT+0x28>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	2b01      	cmp	r3, #1
 8010be6:	bf14      	ite	ne
 8010be8:	2301      	movne	r3, #1
 8010bea:	2300      	moveq	r3, #0
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	e022      	b.n	8010c36 <HAL_TIM_PWM_Start_IT+0x6e>
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	2b04      	cmp	r3, #4
 8010bf4:	d109      	bne.n	8010c0a <HAL_TIM_PWM_Start_IT+0x42>
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	2b01      	cmp	r3, #1
 8010c00:	bf14      	ite	ne
 8010c02:	2301      	movne	r3, #1
 8010c04:	2300      	moveq	r3, #0
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	e015      	b.n	8010c36 <HAL_TIM_PWM_Start_IT+0x6e>
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	2b08      	cmp	r3, #8
 8010c0e:	d109      	bne.n	8010c24 <HAL_TIM_PWM_Start_IT+0x5c>
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	2b01      	cmp	r3, #1
 8010c1a:	bf14      	ite	ne
 8010c1c:	2301      	movne	r3, #1
 8010c1e:	2300      	moveq	r3, #0
 8010c20:	b2db      	uxtb	r3, r3
 8010c22:	e008      	b.n	8010c36 <HAL_TIM_PWM_Start_IT+0x6e>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010c2a:	b2db      	uxtb	r3, r3
 8010c2c:	2b01      	cmp	r3, #1
 8010c2e:	bf14      	ite	ne
 8010c30:	2301      	movne	r3, #1
 8010c32:	2300      	moveq	r3, #0
 8010c34:	b2db      	uxtb	r3, r3
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d001      	beq.n	8010c3e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	e09c      	b.n	8010d78 <HAL_TIM_PWM_Start_IT+0x1b0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d104      	bne.n	8010c4e <HAL_TIM_PWM_Start_IT+0x86>
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2202      	movs	r2, #2
 8010c48:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8010c4c:	e013      	b.n	8010c76 <HAL_TIM_PWM_Start_IT+0xae>
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	2b04      	cmp	r3, #4
 8010c52:	d104      	bne.n	8010c5e <HAL_TIM_PWM_Start_IT+0x96>
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2202      	movs	r2, #2
 8010c58:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8010c5c:	e00b      	b.n	8010c76 <HAL_TIM_PWM_Start_IT+0xae>
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	2b08      	cmp	r3, #8
 8010c62:	d104      	bne.n	8010c6e <HAL_TIM_PWM_Start_IT+0xa6>
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2202      	movs	r2, #2
 8010c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010c6c:	e003      	b.n	8010c76 <HAL_TIM_PWM_Start_IT+0xae>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2202      	movs	r2, #2
 8010c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	2b0c      	cmp	r3, #12
 8010c7a:	d841      	bhi.n	8010d00 <HAL_TIM_PWM_Start_IT+0x138>
 8010c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8010c84 <HAL_TIM_PWM_Start_IT+0xbc>)
 8010c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c82:	bf00      	nop
 8010c84:	08010cb9 	.word	0x08010cb9
 8010c88:	08010d01 	.word	0x08010d01
 8010c8c:	08010d01 	.word	0x08010d01
 8010c90:	08010d01 	.word	0x08010d01
 8010c94:	08010ccb 	.word	0x08010ccb
 8010c98:	08010d01 	.word	0x08010d01
 8010c9c:	08010d01 	.word	0x08010d01
 8010ca0:	08010d01 	.word	0x08010d01
 8010ca4:	08010cdd 	.word	0x08010cdd
 8010ca8:	08010d01 	.word	0x08010d01
 8010cac:	08010d01 	.word	0x08010d01
 8010cb0:	08010d01 	.word	0x08010d01
 8010cb4:	08010cef 	.word	0x08010cef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	68da      	ldr	r2, [r3, #12]
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f042 0202 	orr.w	r2, r2, #2
 8010cc6:	60da      	str	r2, [r3, #12]
      break;
 8010cc8:	e01d      	b.n	8010d06 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	68da      	ldr	r2, [r3, #12]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	f042 0204 	orr.w	r2, r2, #4
 8010cd8:	60da      	str	r2, [r3, #12]
      break;
 8010cda:	e014      	b.n	8010d06 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	68da      	ldr	r2, [r3, #12]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	f042 0208 	orr.w	r2, r2, #8
 8010cea:	60da      	str	r2, [r3, #12]
      break;
 8010cec:	e00b      	b.n	8010d06 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	68da      	ldr	r2, [r3, #12]
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f042 0210 	orr.w	r2, r2, #16
 8010cfc:	60da      	str	r2, [r3, #12]
      break;
 8010cfe:	e002      	b.n	8010d06 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8010d00:	2301      	movs	r3, #1
 8010d02:	73fb      	strb	r3, [r7, #15]
      break;
 8010d04:	bf00      	nop
  }

  if (status == HAL_OK)
 8010d06:	7bfb      	ldrb	r3, [r7, #15]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d134      	bne.n	8010d76 <HAL_TIM_PWM_Start_IT+0x1ae>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	2201      	movs	r2, #1
 8010d12:	6839      	ldr	r1, [r7, #0]
 8010d14:	4618      	mov	r0, r3
 8010d16:	f000 fd48 	bl	80117aa <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010d22:	d00e      	beq.n	8010d42 <HAL_TIM_PWM_Start_IT+0x17a>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	4a15      	ldr	r2, [pc, #84]	@ (8010d80 <HAL_TIM_PWM_Start_IT+0x1b8>)
 8010d2a:	4293      	cmp	r3, r2
 8010d2c:	d009      	beq.n	8010d42 <HAL_TIM_PWM_Start_IT+0x17a>
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	4a14      	ldr	r2, [pc, #80]	@ (8010d84 <HAL_TIM_PWM_Start_IT+0x1bc>)
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d004      	beq.n	8010d42 <HAL_TIM_PWM_Start_IT+0x17a>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	4a12      	ldr	r2, [pc, #72]	@ (8010d88 <HAL_TIM_PWM_Start_IT+0x1c0>)
 8010d3e:	4293      	cmp	r3, r2
 8010d40:	d111      	bne.n	8010d66 <HAL_TIM_PWM_Start_IT+0x19e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	689b      	ldr	r3, [r3, #8]
 8010d48:	f003 0307 	and.w	r3, r3, #7
 8010d4c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	2b06      	cmp	r3, #6
 8010d52:	d010      	beq.n	8010d76 <HAL_TIM_PWM_Start_IT+0x1ae>
      {
        __HAL_TIM_ENABLE(htim);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	681a      	ldr	r2, [r3, #0]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f042 0201 	orr.w	r2, r2, #1
 8010d62:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d64:	e007      	b.n	8010d76 <HAL_TIM_PWM_Start_IT+0x1ae>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	f042 0201 	orr.w	r2, r2, #1
 8010d74:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8010d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3710      	adds	r7, #16
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}
 8010d80:	40000400 	.word	0x40000400
 8010d84:	40000800 	.word	0x40000800
 8010d88:	40010800 	.word	0x40010800

08010d8c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010d96:	2300      	movs	r3, #0
 8010d98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	2b0c      	cmp	r3, #12
 8010d9e:	d841      	bhi.n	8010e24 <HAL_TIM_PWM_Stop_IT+0x98>
 8010da0:	a201      	add	r2, pc, #4	@ (adr r2, 8010da8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8010da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010da6:	bf00      	nop
 8010da8:	08010ddd 	.word	0x08010ddd
 8010dac:	08010e25 	.word	0x08010e25
 8010db0:	08010e25 	.word	0x08010e25
 8010db4:	08010e25 	.word	0x08010e25
 8010db8:	08010def 	.word	0x08010def
 8010dbc:	08010e25 	.word	0x08010e25
 8010dc0:	08010e25 	.word	0x08010e25
 8010dc4:	08010e25 	.word	0x08010e25
 8010dc8:	08010e01 	.word	0x08010e01
 8010dcc:	08010e25 	.word	0x08010e25
 8010dd0:	08010e25 	.word	0x08010e25
 8010dd4:	08010e25 	.word	0x08010e25
 8010dd8:	08010e13 	.word	0x08010e13
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	68da      	ldr	r2, [r3, #12]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	f022 0202 	bic.w	r2, r2, #2
 8010dea:	60da      	str	r2, [r3, #12]
      break;
 8010dec:	e01d      	b.n	8010e2a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	68da      	ldr	r2, [r3, #12]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	f022 0204 	bic.w	r2, r2, #4
 8010dfc:	60da      	str	r2, [r3, #12]
      break;
 8010dfe:	e014      	b.n	8010e2a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	68da      	ldr	r2, [r3, #12]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f022 0208 	bic.w	r2, r2, #8
 8010e0e:	60da      	str	r2, [r3, #12]
      break;
 8010e10:	e00b      	b.n	8010e2a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	68da      	ldr	r2, [r3, #12]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	f022 0210 	bic.w	r2, r2, #16
 8010e20:	60da      	str	r2, [r3, #12]
      break;
 8010e22:	e002      	b.n	8010e2a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8010e24:	2301      	movs	r3, #1
 8010e26:	73fb      	strb	r3, [r7, #15]
      break;
 8010e28:	bf00      	nop
  }

  if (status == HAL_OK)
 8010e2a:	7bfb      	ldrb	r3, [r7, #15]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d132      	bne.n	8010e96 <HAL_TIM_PWM_Stop_IT+0x10a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	2200      	movs	r2, #0
 8010e36:	6839      	ldr	r1, [r7, #0]
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f000 fcb6 	bl	80117aa <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	6a1a      	ldr	r2, [r3, #32]
 8010e44:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010e48:	4013      	ands	r3, r2
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d107      	bne.n	8010e5e <HAL_TIM_PWM_Stop_IT+0xd2>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	681a      	ldr	r2, [r3, #0]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	f022 0201 	bic.w	r2, r2, #1
 8010e5c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d104      	bne.n	8010e6e <HAL_TIM_PWM_Stop_IT+0xe2>
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2201      	movs	r2, #1
 8010e68:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8010e6c:	e013      	b.n	8010e96 <HAL_TIM_PWM_Stop_IT+0x10a>
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	2b04      	cmp	r3, #4
 8010e72:	d104      	bne.n	8010e7e <HAL_TIM_PWM_Stop_IT+0xf2>
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2201      	movs	r2, #1
 8010e78:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8010e7c:	e00b      	b.n	8010e96 <HAL_TIM_PWM_Stop_IT+0x10a>
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	2b08      	cmp	r3, #8
 8010e82:	d104      	bne.n	8010e8e <HAL_TIM_PWM_Stop_IT+0x102>
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2201      	movs	r2, #1
 8010e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010e8c:	e003      	b.n	8010e96 <HAL_TIM_PWM_Stop_IT+0x10a>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2201      	movs	r2, #1
 8010e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  /* Return function status */
  return status;
 8010e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3710      	adds	r7, #16
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}

08010ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	691b      	ldr	r3, [r3, #16]
 8010eae:	f003 0302 	and.w	r3, r3, #2
 8010eb2:	2b02      	cmp	r3, #2
 8010eb4:	d122      	bne.n	8010efc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	f003 0302 	and.w	r3, r3, #2
 8010ec0:	2b02      	cmp	r3, #2
 8010ec2:	d11b      	bne.n	8010efc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	f06f 0202 	mvn.w	r2, #2
 8010ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2201      	movs	r2, #1
 8010ed2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	699b      	ldr	r3, [r3, #24]
 8010eda:	f003 0303 	and.w	r3, r3, #3
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d003      	beq.n	8010eea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f000 fa4a 	bl	801137c <HAL_TIM_IC_CaptureCallback>
 8010ee8:	e005      	b.n	8010ef6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f000 fa3d 	bl	801136a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ef0:	6878      	ldr	r0, [r7, #4]
 8010ef2:	f000 fa4c 	bl	801138e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	691b      	ldr	r3, [r3, #16]
 8010f02:	f003 0304 	and.w	r3, r3, #4
 8010f06:	2b04      	cmp	r3, #4
 8010f08:	d122      	bne.n	8010f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	68db      	ldr	r3, [r3, #12]
 8010f10:	f003 0304 	and.w	r3, r3, #4
 8010f14:	2b04      	cmp	r3, #4
 8010f16:	d11b      	bne.n	8010f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	f06f 0204 	mvn.w	r2, #4
 8010f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2202      	movs	r2, #2
 8010f26:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	699b      	ldr	r3, [r3, #24]
 8010f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d003      	beq.n	8010f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f000 fa20 	bl	801137c <HAL_TIM_IC_CaptureCallback>
 8010f3c:	e005      	b.n	8010f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 fa13 	bl	801136a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f000 fa22 	bl	801138e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	691b      	ldr	r3, [r3, #16]
 8010f56:	f003 0308 	and.w	r3, r3, #8
 8010f5a:	2b08      	cmp	r3, #8
 8010f5c:	d122      	bne.n	8010fa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	68db      	ldr	r3, [r3, #12]
 8010f64:	f003 0308 	and.w	r3, r3, #8
 8010f68:	2b08      	cmp	r3, #8
 8010f6a:	d11b      	bne.n	8010fa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	f06f 0208 	mvn.w	r2, #8
 8010f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2204      	movs	r2, #4
 8010f7a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	69db      	ldr	r3, [r3, #28]
 8010f82:	f003 0303 	and.w	r3, r3, #3
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d003      	beq.n	8010f92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 f9f6 	bl	801137c <HAL_TIM_IC_CaptureCallback>
 8010f90:	e005      	b.n	8010f9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f000 f9e9 	bl	801136a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f000 f9f8 	bl	801138e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	691b      	ldr	r3, [r3, #16]
 8010faa:	f003 0310 	and.w	r3, r3, #16
 8010fae:	2b10      	cmp	r3, #16
 8010fb0:	d122      	bne.n	8010ff8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	68db      	ldr	r3, [r3, #12]
 8010fb8:	f003 0310 	and.w	r3, r3, #16
 8010fbc:	2b10      	cmp	r3, #16
 8010fbe:	d11b      	bne.n	8010ff8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	f06f 0210 	mvn.w	r2, #16
 8010fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2208      	movs	r2, #8
 8010fce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	69db      	ldr	r3, [r3, #28]
 8010fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d003      	beq.n	8010fe6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 f9cc 	bl	801137c <HAL_TIM_IC_CaptureCallback>
 8010fe4:	e005      	b.n	8010ff2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f000 f9bf 	bl	801136a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f000 f9ce 	bl	801138e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	691b      	ldr	r3, [r3, #16]
 8010ffe:	f003 0301 	and.w	r3, r3, #1
 8011002:	2b01      	cmp	r3, #1
 8011004:	d10e      	bne.n	8011024 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	68db      	ldr	r3, [r3, #12]
 801100c:	f003 0301 	and.w	r3, r3, #1
 8011010:	2b01      	cmp	r3, #1
 8011012:	d107      	bne.n	8011024 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	f06f 0201 	mvn.w	r2, #1
 801101c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f7f1 fc0c 	bl	800283c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	691b      	ldr	r3, [r3, #16]
 801102a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801102e:	2b40      	cmp	r3, #64	@ 0x40
 8011030:	d10e      	bne.n	8011050 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801103c:	2b40      	cmp	r3, #64	@ 0x40
 801103e:	d107      	bne.n	8011050 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8011048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 f9a8 	bl	80113a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011050:	bf00      	nop
 8011052:	3708      	adds	r7, #8
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b086      	sub	sp, #24
 801105c:	af00      	add	r7, sp, #0
 801105e:	60f8      	str	r0, [r7, #12]
 8011060:	60b9      	str	r1, [r7, #8]
 8011062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011064:	2300      	movs	r3, #0
 8011066:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801106e:	2b01      	cmp	r3, #1
 8011070:	d101      	bne.n	8011076 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011072:	2302      	movs	r3, #2
 8011074:	e0ae      	b.n	80111d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	2201      	movs	r2, #1
 801107a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2b0c      	cmp	r3, #12
 8011082:	f200 809f 	bhi.w	80111c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8011086:	a201      	add	r2, pc, #4	@ (adr r2, 801108c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801108c:	080110c1 	.word	0x080110c1
 8011090:	080111c5 	.word	0x080111c5
 8011094:	080111c5 	.word	0x080111c5
 8011098:	080111c5 	.word	0x080111c5
 801109c:	08011101 	.word	0x08011101
 80110a0:	080111c5 	.word	0x080111c5
 80110a4:	080111c5 	.word	0x080111c5
 80110a8:	080111c5 	.word	0x080111c5
 80110ac:	08011143 	.word	0x08011143
 80110b0:	080111c5 	.word	0x080111c5
 80110b4:	080111c5 	.word	0x080111c5
 80110b8:	080111c5 	.word	0x080111c5
 80110bc:	08011183 	.word	0x08011183
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	68b9      	ldr	r1, [r7, #8]
 80110c6:	4618      	mov	r0, r3
 80110c8:	f000 f9e4 	bl	8011494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	699a      	ldr	r2, [r3, #24]
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	f042 0208 	orr.w	r2, r2, #8
 80110da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	699a      	ldr	r2, [r3, #24]
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	f022 0204 	bic.w	r2, r2, #4
 80110ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	6999      	ldr	r1, [r3, #24]
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	68da      	ldr	r2, [r3, #12]
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	430a      	orrs	r2, r1
 80110fc:	619a      	str	r2, [r3, #24]
      break;
 80110fe:	e064      	b.n	80111ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	68b9      	ldr	r1, [r7, #8]
 8011106:	4618      	mov	r0, r3
 8011108:	f000 fa00 	bl	801150c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	699a      	ldr	r2, [r3, #24]
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801111a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	699a      	ldr	r2, [r3, #24]
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801112a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	6999      	ldr	r1, [r3, #24]
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	68db      	ldr	r3, [r3, #12]
 8011136:	021a      	lsls	r2, r3, #8
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	430a      	orrs	r2, r1
 801113e:	619a      	str	r2, [r3, #24]
      break;
 8011140:	e043      	b.n	80111ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	68b9      	ldr	r1, [r7, #8]
 8011148:	4618      	mov	r0, r3
 801114a:	f000 fa1d 	bl	8011588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	69da      	ldr	r2, [r3, #28]
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	f042 0208 	orr.w	r2, r2, #8
 801115c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	69da      	ldr	r2, [r3, #28]
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f022 0204 	bic.w	r2, r2, #4
 801116c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	69d9      	ldr	r1, [r3, #28]
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	68da      	ldr	r2, [r3, #12]
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	430a      	orrs	r2, r1
 801117e:	61da      	str	r2, [r3, #28]
      break;
 8011180:	e023      	b.n	80111ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	68b9      	ldr	r1, [r7, #8]
 8011188:	4618      	mov	r0, r3
 801118a:	f000 fa3a 	bl	8011602 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	69da      	ldr	r2, [r3, #28]
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801119c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	69da      	ldr	r2, [r3, #28]
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80111ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	69d9      	ldr	r1, [r3, #28]
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	68db      	ldr	r3, [r3, #12]
 80111b8:	021a      	lsls	r2, r3, #8
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	430a      	orrs	r2, r1
 80111c0:	61da      	str	r2, [r3, #28]
      break;
 80111c2:	e002      	b.n	80111ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80111c4:	2301      	movs	r3, #1
 80111c6:	75fb      	strb	r3, [r7, #23]
      break;
 80111c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	2200      	movs	r2, #0
 80111ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80111d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3718      	adds	r7, #24
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b084      	sub	sp, #16
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80111e6:	2300      	movs	r3, #0
 80111e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80111f0:	2b01      	cmp	r3, #1
 80111f2:	d101      	bne.n	80111f8 <HAL_TIM_ConfigClockSource+0x1c>
 80111f4:	2302      	movs	r3, #2
 80111f6:	e0b4      	b.n	8011362 <HAL_TIM_ConfigClockSource+0x186>
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2201      	movs	r2, #1
 80111fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2202      	movs	r2, #2
 8011204:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	689b      	ldr	r3, [r3, #8]
 801120e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8011216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801121e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	68ba      	ldr	r2, [r7, #8]
 8011226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011230:	d03e      	beq.n	80112b0 <HAL_TIM_ConfigClockSource+0xd4>
 8011232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011236:	f200 8087 	bhi.w	8011348 <HAL_TIM_ConfigClockSource+0x16c>
 801123a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801123e:	f000 8086 	beq.w	801134e <HAL_TIM_ConfigClockSource+0x172>
 8011242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011246:	d87f      	bhi.n	8011348 <HAL_TIM_ConfigClockSource+0x16c>
 8011248:	2b70      	cmp	r3, #112	@ 0x70
 801124a:	d01a      	beq.n	8011282 <HAL_TIM_ConfigClockSource+0xa6>
 801124c:	2b70      	cmp	r3, #112	@ 0x70
 801124e:	d87b      	bhi.n	8011348 <HAL_TIM_ConfigClockSource+0x16c>
 8011250:	2b60      	cmp	r3, #96	@ 0x60
 8011252:	d050      	beq.n	80112f6 <HAL_TIM_ConfigClockSource+0x11a>
 8011254:	2b60      	cmp	r3, #96	@ 0x60
 8011256:	d877      	bhi.n	8011348 <HAL_TIM_ConfigClockSource+0x16c>
 8011258:	2b50      	cmp	r3, #80	@ 0x50
 801125a:	d03c      	beq.n	80112d6 <HAL_TIM_ConfigClockSource+0xfa>
 801125c:	2b50      	cmp	r3, #80	@ 0x50
 801125e:	d873      	bhi.n	8011348 <HAL_TIM_ConfigClockSource+0x16c>
 8011260:	2b40      	cmp	r3, #64	@ 0x40
 8011262:	d058      	beq.n	8011316 <HAL_TIM_ConfigClockSource+0x13a>
 8011264:	2b40      	cmp	r3, #64	@ 0x40
 8011266:	d86f      	bhi.n	8011348 <HAL_TIM_ConfigClockSource+0x16c>
 8011268:	2b30      	cmp	r3, #48	@ 0x30
 801126a:	d064      	beq.n	8011336 <HAL_TIM_ConfigClockSource+0x15a>
 801126c:	2b30      	cmp	r3, #48	@ 0x30
 801126e:	d86b      	bhi.n	8011348 <HAL_TIM_ConfigClockSource+0x16c>
 8011270:	2b20      	cmp	r3, #32
 8011272:	d060      	beq.n	8011336 <HAL_TIM_ConfigClockSource+0x15a>
 8011274:	2b20      	cmp	r3, #32
 8011276:	d867      	bhi.n	8011348 <HAL_TIM_ConfigClockSource+0x16c>
 8011278:	2b00      	cmp	r3, #0
 801127a:	d05c      	beq.n	8011336 <HAL_TIM_ConfigClockSource+0x15a>
 801127c:	2b10      	cmp	r3, #16
 801127e:	d05a      	beq.n	8011336 <HAL_TIM_ConfigClockSource+0x15a>
 8011280:	e062      	b.n	8011348 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011292:	f000 fa6b 	bl	801176c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	689b      	ldr	r3, [r3, #8]
 801129c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80112a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	68ba      	ldr	r2, [r7, #8]
 80112ac:	609a      	str	r2, [r3, #8]
      break;
 80112ae:	e04f      	b.n	8011350 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80112c0:	f000 fa54 	bl	801176c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	689a      	ldr	r2, [r3, #8]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80112d2:	609a      	str	r2, [r3, #8]
      break;
 80112d4:	e03c      	b.n	8011350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80112e2:	461a      	mov	r2, r3
 80112e4:	f000 f9cb 	bl	801167e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	2150      	movs	r1, #80	@ 0x50
 80112ee:	4618      	mov	r0, r3
 80112f0:	f000 fa22 	bl	8011738 <TIM_ITRx_SetConfig>
      break;
 80112f4:	e02c      	b.n	8011350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011302:	461a      	mov	r2, r3
 8011304:	f000 f9e9 	bl	80116da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	2160      	movs	r1, #96	@ 0x60
 801130e:	4618      	mov	r0, r3
 8011310:	f000 fa12 	bl	8011738 <TIM_ITRx_SetConfig>
      break;
 8011314:	e01c      	b.n	8011350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011322:	461a      	mov	r2, r3
 8011324:	f000 f9ab 	bl	801167e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	2140      	movs	r1, #64	@ 0x40
 801132e:	4618      	mov	r0, r3
 8011330:	f000 fa02 	bl	8011738 <TIM_ITRx_SetConfig>
      break;
 8011334:	e00c      	b.n	8011350 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681a      	ldr	r2, [r3, #0]
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	4619      	mov	r1, r3
 8011340:	4610      	mov	r0, r2
 8011342:	f000 f9f9 	bl	8011738 <TIM_ITRx_SetConfig>
      break;
 8011346:	e003      	b.n	8011350 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8011348:	2301      	movs	r3, #1
 801134a:	73fb      	strb	r3, [r7, #15]
      break;
 801134c:	e000      	b.n	8011350 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801134e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2201      	movs	r2, #1
 8011354:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2200      	movs	r2, #0
 801135c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8011360:	7bfb      	ldrb	r3, [r7, #15]
}
 8011362:	4618      	mov	r0, r3
 8011364:	3710      	adds	r7, #16
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}

0801136a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801136a:	b480      	push	{r7}
 801136c:	b083      	sub	sp, #12
 801136e:	af00      	add	r7, sp, #0
 8011370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011372:	bf00      	nop
 8011374:	370c      	adds	r7, #12
 8011376:	46bd      	mov	sp, r7
 8011378:	bc80      	pop	{r7}
 801137a:	4770      	bx	lr

0801137c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801137c:	b480      	push	{r7}
 801137e:	b083      	sub	sp, #12
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011384:	bf00      	nop
 8011386:	370c      	adds	r7, #12
 8011388:	46bd      	mov	sp, r7
 801138a:	bc80      	pop	{r7}
 801138c:	4770      	bx	lr

0801138e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801138e:	b480      	push	{r7}
 8011390:	b083      	sub	sp, #12
 8011392:	af00      	add	r7, sp, #0
 8011394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011396:	bf00      	nop
 8011398:	370c      	adds	r7, #12
 801139a:	46bd      	mov	sp, r7
 801139c:	bc80      	pop	{r7}
 801139e:	4770      	bx	lr

080113a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80113a0:	b480      	push	{r7}
 80113a2:	b083      	sub	sp, #12
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80113a8:	bf00      	nop
 80113aa:	370c      	adds	r7, #12
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bc80      	pop	{r7}
 80113b0:	4770      	bx	lr
	...

080113b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b085      	sub	sp, #20
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80113ca:	d00f      	beq.n	80113ec <TIM_Base_SetConfig+0x38>
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	4a2b      	ldr	r2, [pc, #172]	@ (801147c <TIM_Base_SetConfig+0xc8>)
 80113d0:	4293      	cmp	r3, r2
 80113d2:	d00b      	beq.n	80113ec <TIM_Base_SetConfig+0x38>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	4a2a      	ldr	r2, [pc, #168]	@ (8011480 <TIM_Base_SetConfig+0xcc>)
 80113d8:	4293      	cmp	r3, r2
 80113da:	d007      	beq.n	80113ec <TIM_Base_SetConfig+0x38>
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	4a29      	ldr	r2, [pc, #164]	@ (8011484 <TIM_Base_SetConfig+0xd0>)
 80113e0:	4293      	cmp	r3, r2
 80113e2:	d003      	beq.n	80113ec <TIM_Base_SetConfig+0x38>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	4a28      	ldr	r2, [pc, #160]	@ (8011488 <TIM_Base_SetConfig+0xd4>)
 80113e8:	4293      	cmp	r3, r2
 80113ea:	d108      	bne.n	80113fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80113f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	685b      	ldr	r3, [r3, #4]
 80113f8:	68fa      	ldr	r2, [r7, #12]
 80113fa:	4313      	orrs	r3, r2
 80113fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011404:	d017      	beq.n	8011436 <TIM_Base_SetConfig+0x82>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	4a1c      	ldr	r2, [pc, #112]	@ (801147c <TIM_Base_SetConfig+0xc8>)
 801140a:	4293      	cmp	r3, r2
 801140c:	d013      	beq.n	8011436 <TIM_Base_SetConfig+0x82>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	4a1b      	ldr	r2, [pc, #108]	@ (8011480 <TIM_Base_SetConfig+0xcc>)
 8011412:	4293      	cmp	r3, r2
 8011414:	d00f      	beq.n	8011436 <TIM_Base_SetConfig+0x82>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	4a1a      	ldr	r2, [pc, #104]	@ (8011484 <TIM_Base_SetConfig+0xd0>)
 801141a:	4293      	cmp	r3, r2
 801141c:	d00b      	beq.n	8011436 <TIM_Base_SetConfig+0x82>
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	4a19      	ldr	r2, [pc, #100]	@ (8011488 <TIM_Base_SetConfig+0xd4>)
 8011422:	4293      	cmp	r3, r2
 8011424:	d007      	beq.n	8011436 <TIM_Base_SetConfig+0x82>
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	4a18      	ldr	r2, [pc, #96]	@ (801148c <TIM_Base_SetConfig+0xd8>)
 801142a:	4293      	cmp	r3, r2
 801142c:	d003      	beq.n	8011436 <TIM_Base_SetConfig+0x82>
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	4a17      	ldr	r2, [pc, #92]	@ (8011490 <TIM_Base_SetConfig+0xdc>)
 8011432:	4293      	cmp	r3, r2
 8011434:	d108      	bne.n	8011448 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801143c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	68db      	ldr	r3, [r3, #12]
 8011442:	68fa      	ldr	r2, [r7, #12]
 8011444:	4313      	orrs	r3, r2
 8011446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	691b      	ldr	r3, [r3, #16]
 8011452:	4313      	orrs	r3, r2
 8011454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	68fa      	ldr	r2, [r7, #12]
 801145a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	689a      	ldr	r2, [r3, #8]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	681a      	ldr	r2, [r3, #0]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2201      	movs	r2, #1
 8011470:	615a      	str	r2, [r3, #20]
}
 8011472:	bf00      	nop
 8011474:	3714      	adds	r7, #20
 8011476:	46bd      	mov	sp, r7
 8011478:	bc80      	pop	{r7}
 801147a:	4770      	bx	lr
 801147c:	40000400 	.word	0x40000400
 8011480:	40000800 	.word	0x40000800
 8011484:	40000c00 	.word	0x40000c00
 8011488:	40010800 	.word	0x40010800
 801148c:	40010c00 	.word	0x40010c00
 8011490:	40011000 	.word	0x40011000

08011494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011494:	b480      	push	{r7}
 8011496:	b087      	sub	sp, #28
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6a1b      	ldr	r3, [r3, #32]
 80114a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6a1b      	ldr	r3, [r3, #32]
 80114a8:	f023 0201 	bic.w	r2, r3, #1
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	699b      	ldr	r3, [r3, #24]
 80114ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80114c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	f023 0303 	bic.w	r3, r3, #3
 80114ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	68fa      	ldr	r2, [r7, #12]
 80114d2:	4313      	orrs	r3, r2
 80114d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	f023 0302 	bic.w	r3, r3, #2
 80114dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	689b      	ldr	r3, [r3, #8]
 80114e2:	697a      	ldr	r2, [r7, #20]
 80114e4:	4313      	orrs	r3, r2
 80114e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	693a      	ldr	r2, [r7, #16]
 80114ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	68fa      	ldr	r2, [r7, #12]
 80114f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	685a      	ldr	r2, [r3, #4]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	697a      	ldr	r2, [r7, #20]
 8011500:	621a      	str	r2, [r3, #32]
}
 8011502:	bf00      	nop
 8011504:	371c      	adds	r7, #28
 8011506:	46bd      	mov	sp, r7
 8011508:	bc80      	pop	{r7}
 801150a:	4770      	bx	lr

0801150c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801150c:	b480      	push	{r7}
 801150e:	b087      	sub	sp, #28
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6a1b      	ldr	r3, [r3, #32]
 801151a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6a1b      	ldr	r3, [r3, #32]
 8011520:	f023 0210 	bic.w	r2, r3, #16
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	685b      	ldr	r3, [r3, #4]
 801152c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	699b      	ldr	r3, [r3, #24]
 8011532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801153a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	021b      	lsls	r3, r3, #8
 801154a:	68fa      	ldr	r2, [r7, #12]
 801154c:	4313      	orrs	r3, r2
 801154e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	f023 0320 	bic.w	r3, r3, #32
 8011556:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	689b      	ldr	r3, [r3, #8]
 801155c:	011b      	lsls	r3, r3, #4
 801155e:	697a      	ldr	r2, [r7, #20]
 8011560:	4313      	orrs	r3, r2
 8011562:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	693a      	ldr	r2, [r7, #16]
 8011568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	68fa      	ldr	r2, [r7, #12]
 801156e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011570:	683b      	ldr	r3, [r7, #0]
 8011572:	685a      	ldr	r2, [r3, #4]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	697a      	ldr	r2, [r7, #20]
 801157c:	621a      	str	r2, [r3, #32]
}
 801157e:	bf00      	nop
 8011580:	371c      	adds	r7, #28
 8011582:	46bd      	mov	sp, r7
 8011584:	bc80      	pop	{r7}
 8011586:	4770      	bx	lr

08011588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011588:	b480      	push	{r7}
 801158a:	b087      	sub	sp, #28
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
 8011590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6a1b      	ldr	r3, [r3, #32]
 8011596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6a1b      	ldr	r3, [r3, #32]
 801159c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	69db      	ldr	r3, [r3, #28]
 80115ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	f023 0303 	bic.w	r3, r3, #3
 80115be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	68fa      	ldr	r2, [r7, #12]
 80115c6:	4313      	orrs	r3, r2
 80115c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80115d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	689b      	ldr	r3, [r3, #8]
 80115d6:	021b      	lsls	r3, r3, #8
 80115d8:	697a      	ldr	r2, [r7, #20]
 80115da:	4313      	orrs	r3, r2
 80115dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	693a      	ldr	r2, [r7, #16]
 80115e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	68fa      	ldr	r2, [r7, #12]
 80115e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	685a      	ldr	r2, [r3, #4]
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	697a      	ldr	r2, [r7, #20]
 80115f6:	621a      	str	r2, [r3, #32]
}
 80115f8:	bf00      	nop
 80115fa:	371c      	adds	r7, #28
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bc80      	pop	{r7}
 8011600:	4770      	bx	lr

08011602 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011602:	b480      	push	{r7}
 8011604:	b087      	sub	sp, #28
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
 801160a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	6a1b      	ldr	r3, [r3, #32]
 8011610:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6a1b      	ldr	r3, [r3, #32]
 8011616:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	69db      	ldr	r3, [r3, #28]
 8011628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011630:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011638:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	021b      	lsls	r3, r3, #8
 8011640:	68fa      	ldr	r2, [r7, #12]
 8011642:	4313      	orrs	r3, r2
 8011644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801164c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	689b      	ldr	r3, [r3, #8]
 8011652:	031b      	lsls	r3, r3, #12
 8011654:	697a      	ldr	r2, [r7, #20]
 8011656:	4313      	orrs	r3, r2
 8011658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	693a      	ldr	r2, [r7, #16]
 801165e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	68fa      	ldr	r2, [r7, #12]
 8011664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	685a      	ldr	r2, [r3, #4]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	697a      	ldr	r2, [r7, #20]
 8011672:	621a      	str	r2, [r3, #32]
}
 8011674:	bf00      	nop
 8011676:	371c      	adds	r7, #28
 8011678:	46bd      	mov	sp, r7
 801167a:	bc80      	pop	{r7}
 801167c:	4770      	bx	lr

0801167e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801167e:	b480      	push	{r7}
 8011680:	b087      	sub	sp, #28
 8011682:	af00      	add	r7, sp, #0
 8011684:	60f8      	str	r0, [r7, #12]
 8011686:	60b9      	str	r1, [r7, #8]
 8011688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	6a1b      	ldr	r3, [r3, #32]
 801168e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	6a1b      	ldr	r3, [r3, #32]
 8011694:	f023 0201 	bic.w	r2, r3, #1
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	699b      	ldr	r3, [r3, #24]
 80116a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80116a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	011b      	lsls	r3, r3, #4
 80116ae:	693a      	ldr	r2, [r7, #16]
 80116b0:	4313      	orrs	r3, r2
 80116b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	f023 030a 	bic.w	r3, r3, #10
 80116ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80116bc:	697a      	ldr	r2, [r7, #20]
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	4313      	orrs	r3, r2
 80116c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	693a      	ldr	r2, [r7, #16]
 80116c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	697a      	ldr	r2, [r7, #20]
 80116ce:	621a      	str	r2, [r3, #32]
}
 80116d0:	bf00      	nop
 80116d2:	371c      	adds	r7, #28
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bc80      	pop	{r7}
 80116d8:	4770      	bx	lr

080116da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80116da:	b480      	push	{r7}
 80116dc:	b087      	sub	sp, #28
 80116de:	af00      	add	r7, sp, #0
 80116e0:	60f8      	str	r0, [r7, #12]
 80116e2:	60b9      	str	r1, [r7, #8]
 80116e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	6a1b      	ldr	r3, [r3, #32]
 80116ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	6a1b      	ldr	r3, [r3, #32]
 80116f0:	f023 0210 	bic.w	r2, r3, #16
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	699b      	ldr	r3, [r3, #24]
 80116fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80116fe:	693b      	ldr	r3, [r7, #16]
 8011700:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	031b      	lsls	r3, r3, #12
 801170a:	693a      	ldr	r2, [r7, #16]
 801170c:	4313      	orrs	r3, r2
 801170e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011716:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	011b      	lsls	r3, r3, #4
 801171c:	697a      	ldr	r2, [r7, #20]
 801171e:	4313      	orrs	r3, r2
 8011720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	693a      	ldr	r2, [r7, #16]
 8011726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	697a      	ldr	r2, [r7, #20]
 801172c:	621a      	str	r2, [r3, #32]
}
 801172e:	bf00      	nop
 8011730:	371c      	adds	r7, #28
 8011732:	46bd      	mov	sp, r7
 8011734:	bc80      	pop	{r7}
 8011736:	4770      	bx	lr

08011738 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011738:	b480      	push	{r7}
 801173a:	b085      	sub	sp, #20
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
 8011740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	689b      	ldr	r3, [r3, #8]
 8011746:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801174e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011750:	683a      	ldr	r2, [r7, #0]
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	4313      	orrs	r3, r2
 8011756:	f043 0307 	orr.w	r3, r3, #7
 801175a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	68fa      	ldr	r2, [r7, #12]
 8011760:	609a      	str	r2, [r3, #8]
}
 8011762:	bf00      	nop
 8011764:	3714      	adds	r7, #20
 8011766:	46bd      	mov	sp, r7
 8011768:	bc80      	pop	{r7}
 801176a:	4770      	bx	lr

0801176c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801176c:	b480      	push	{r7}
 801176e:	b087      	sub	sp, #28
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	607a      	str	r2, [r7, #4]
 8011778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	689b      	ldr	r3, [r3, #8]
 801177e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	021a      	lsls	r2, r3, #8
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	431a      	orrs	r2, r3
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	4313      	orrs	r3, r2
 8011794:	697a      	ldr	r2, [r7, #20]
 8011796:	4313      	orrs	r3, r2
 8011798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	697a      	ldr	r2, [r7, #20]
 801179e:	609a      	str	r2, [r3, #8]
}
 80117a0:	bf00      	nop
 80117a2:	371c      	adds	r7, #28
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bc80      	pop	{r7}
 80117a8:	4770      	bx	lr

080117aa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80117aa:	b480      	push	{r7}
 80117ac:	b087      	sub	sp, #28
 80117ae:	af00      	add	r7, sp, #0
 80117b0:	60f8      	str	r0, [r7, #12]
 80117b2:	60b9      	str	r1, [r7, #8]
 80117b4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	f003 031f 	and.w	r3, r3, #31
 80117bc:	2201      	movs	r2, #1
 80117be:	fa02 f303 	lsl.w	r3, r2, r3
 80117c2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	6a1a      	ldr	r2, [r3, #32]
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	43db      	mvns	r3, r3
 80117cc:	401a      	ands	r2, r3
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	6a1a      	ldr	r2, [r3, #32]
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	f003 031f 	and.w	r3, r3, #31
 80117dc:	6879      	ldr	r1, [r7, #4]
 80117de:	fa01 f303 	lsl.w	r3, r1, r3
 80117e2:	431a      	orrs	r2, r3
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	621a      	str	r2, [r3, #32]
}
 80117e8:	bf00      	nop
 80117ea:	371c      	adds	r7, #28
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bc80      	pop	{r7}
 80117f0:	4770      	bx	lr
	...

080117f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80117f4:	b480      	push	{r7}
 80117f6:	b085      	sub	sp, #20
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011804:	2b01      	cmp	r3, #1
 8011806:	d101      	bne.n	801180c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011808:	2302      	movs	r3, #2
 801180a:	e046      	b.n	801189a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2201      	movs	r2, #1
 8011810:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2202      	movs	r2, #2
 8011818:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	689b      	ldr	r3, [r3, #8]
 801182a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	68fa      	ldr	r2, [r7, #12]
 801183a:	4313      	orrs	r3, r2
 801183c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	68fa      	ldr	r2, [r7, #12]
 8011844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801184e:	d00e      	beq.n	801186e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	4a13      	ldr	r2, [pc, #76]	@ (80118a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8011856:	4293      	cmp	r3, r2
 8011858:	d009      	beq.n	801186e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	4a12      	ldr	r2, [pc, #72]	@ (80118a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8011860:	4293      	cmp	r3, r2
 8011862:	d004      	beq.n	801186e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	4a10      	ldr	r2, [pc, #64]	@ (80118ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801186a:	4293      	cmp	r3, r2
 801186c:	d10c      	bne.n	8011888 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	68ba      	ldr	r2, [r7, #8]
 801187c:	4313      	orrs	r3, r2
 801187e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2201      	movs	r2, #1
 801188c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2200      	movs	r2, #0
 8011894:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8011898:	2300      	movs	r3, #0
}
 801189a:	4618      	mov	r0, r3
 801189c:	3714      	adds	r7, #20
 801189e:	46bd      	mov	sp, r7
 80118a0:	bc80      	pop	{r7}
 80118a2:	4770      	bx	lr
 80118a4:	40000400 	.word	0x40000400
 80118a8:	40000800 	.word	0x40000800
 80118ac:	40010800 	.word	0x40010800

080118b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b082      	sub	sp, #8
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d101      	bne.n	80118c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80118be:	2301      	movs	r3, #1
 80118c0:	e042      	b.n	8011948 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80118c8:	b2db      	uxtb	r3, r3
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d106      	bne.n	80118dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2200      	movs	r2, #0
 80118d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f7f0 fe96 	bl	8002608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2224      	movs	r2, #36	@ 0x24
 80118e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	68da      	ldr	r2, [r3, #12]
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80118f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f000 f91d 	bl	8011b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	691a      	ldr	r2, [r3, #16]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	695a      	ldr	r2, [r3, #20]
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	68da      	ldr	r2, [r3, #12]
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2200      	movs	r2, #0
 801192e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2220      	movs	r2, #32
 8011934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2220      	movs	r2, #32
 801193c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2200      	movs	r2, #0
 8011944:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8011946:	2300      	movs	r3, #0
}
 8011948:	4618      	mov	r0, r3
 801194a:	3708      	adds	r7, #8
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}

08011950 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b08a      	sub	sp, #40	@ 0x28
 8011954:	af02      	add	r7, sp, #8
 8011956:	60f8      	str	r0, [r7, #12]
 8011958:	60b9      	str	r1, [r7, #8]
 801195a:	603b      	str	r3, [r7, #0]
 801195c:	4613      	mov	r3, r2
 801195e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8011960:	2300      	movs	r3, #0
 8011962:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801196a:	b2db      	uxtb	r3, r3
 801196c:	2b20      	cmp	r3, #32
 801196e:	d16d      	bne.n	8011a4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d002      	beq.n	801197c <HAL_UART_Transmit+0x2c>
 8011976:	88fb      	ldrh	r3, [r7, #6]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d101      	bne.n	8011980 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801197c:	2301      	movs	r3, #1
 801197e:	e066      	b.n	8011a4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2200      	movs	r2, #0
 8011984:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	2221      	movs	r2, #33	@ 0x21
 801198a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801198e:	f7fa f961 	bl	800bc54 <HAL_GetTick>
 8011992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	88fa      	ldrh	r2, [r7, #6]
 8011998:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	88fa      	ldrh	r2, [r7, #6]
 801199e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	689b      	ldr	r3, [r3, #8]
 80119a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80119a8:	d108      	bne.n	80119bc <HAL_UART_Transmit+0x6c>
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	691b      	ldr	r3, [r3, #16]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d104      	bne.n	80119bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80119b2:	2300      	movs	r3, #0
 80119b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	61bb      	str	r3, [r7, #24]
 80119ba:	e003      	b.n	80119c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80119c0:	2300      	movs	r3, #0
 80119c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80119c4:	e02a      	b.n	8011a1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	9300      	str	r3, [sp, #0]
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	2200      	movs	r2, #0
 80119ce:	2180      	movs	r1, #128	@ 0x80
 80119d0:	68f8      	ldr	r0, [r7, #12]
 80119d2:	f000 f840 	bl	8011a56 <UART_WaitOnFlagUntilTimeout>
 80119d6:	4603      	mov	r3, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d001      	beq.n	80119e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80119dc:	2303      	movs	r3, #3
 80119de:	e036      	b.n	8011a4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80119e0:	69fb      	ldr	r3, [r7, #28]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d10b      	bne.n	80119fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80119e6:	69bb      	ldr	r3, [r7, #24]
 80119e8:	881b      	ldrh	r3, [r3, #0]
 80119ea:	461a      	mov	r2, r3
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80119f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80119f6:	69bb      	ldr	r3, [r7, #24]
 80119f8:	3302      	adds	r3, #2
 80119fa:	61bb      	str	r3, [r7, #24]
 80119fc:	e007      	b.n	8011a0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80119fe:	69fb      	ldr	r3, [r7, #28]
 8011a00:	781a      	ldrb	r2, [r3, #0]
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8011a08:	69fb      	ldr	r3, [r7, #28]
 8011a0a:	3301      	adds	r3, #1
 8011a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011a12:	b29b      	uxth	r3, r3
 8011a14:	3b01      	subs	r3, #1
 8011a16:	b29a      	uxth	r2, r3
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d1cf      	bne.n	80119c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	9300      	str	r3, [sp, #0]
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	2140      	movs	r1, #64	@ 0x40
 8011a30:	68f8      	ldr	r0, [r7, #12]
 8011a32:	f000 f810 	bl	8011a56 <UART_WaitOnFlagUntilTimeout>
 8011a36:	4603      	mov	r3, r0
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d001      	beq.n	8011a40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8011a3c:	2303      	movs	r3, #3
 8011a3e:	e006      	b.n	8011a4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2220      	movs	r2, #32
 8011a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	e000      	b.n	8011a4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8011a4c:	2302      	movs	r3, #2
  }
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3720      	adds	r7, #32
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}

08011a56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011a56:	b580      	push	{r7, lr}
 8011a58:	b090      	sub	sp, #64	@ 0x40
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	60f8      	str	r0, [r7, #12]
 8011a5e:	60b9      	str	r1, [r7, #8]
 8011a60:	603b      	str	r3, [r7, #0]
 8011a62:	4613      	mov	r3, r2
 8011a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a66:	e050      	b.n	8011b0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a6e:	d04c      	beq.n	8011b0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d007      	beq.n	8011a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8011a76:	f7fa f8ed 	bl	800bc54 <HAL_GetTick>
 8011a7a:	4602      	mov	r2, r0
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	1ad3      	subs	r3, r2, r3
 8011a80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d241      	bcs.n	8011b0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	330c      	adds	r3, #12
 8011a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a90:	e853 3f00 	ldrex	r3, [r3]
 8011a94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a98:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8011a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	330c      	adds	r3, #12
 8011aa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011aa6:	637a      	str	r2, [r7, #52]	@ 0x34
 8011aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aaa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011aac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011aae:	e841 2300 	strex	r3, r2, [r1]
 8011ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d1e5      	bne.n	8011a86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	3314      	adds	r3, #20
 8011ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	e853 3f00 	ldrex	r3, [r3]
 8011ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	f023 0301 	bic.w	r3, r3, #1
 8011ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	3314      	adds	r3, #20
 8011ad8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011ada:	623a      	str	r2, [r7, #32]
 8011adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ade:	69f9      	ldr	r1, [r7, #28]
 8011ae0:	6a3a      	ldr	r2, [r7, #32]
 8011ae2:	e841 2300 	strex	r3, r2, [r1]
 8011ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8011ae8:	69bb      	ldr	r3, [r7, #24]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d1e5      	bne.n	8011aba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2220      	movs	r2, #32
 8011af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	2220      	movs	r2, #32
 8011afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	2200      	movs	r2, #0
 8011b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8011b06:	2303      	movs	r3, #3
 8011b08:	e00f      	b.n	8011b2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	681a      	ldr	r2, [r3, #0]
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	4013      	ands	r3, r2
 8011b14:	68ba      	ldr	r2, [r7, #8]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	bf0c      	ite	eq
 8011b1a:	2301      	moveq	r3, #1
 8011b1c:	2300      	movne	r3, #0
 8011b1e:	b2db      	uxtb	r3, r3
 8011b20:	461a      	mov	r2, r3
 8011b22:	79fb      	ldrb	r3, [r7, #7]
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d09f      	beq.n	8011a68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011b28:	2300      	movs	r3, #0
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3740      	adds	r7, #64	@ 0x40
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
	...

08011b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b084      	sub	sp, #16
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	691b      	ldr	r3, [r3, #16]
 8011b42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	68da      	ldr	r2, [r3, #12]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	430a      	orrs	r2, r1
 8011b50:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	689a      	ldr	r2, [r3, #8]
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	691b      	ldr	r3, [r3, #16]
 8011b5a:	431a      	orrs	r2, r3
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	695b      	ldr	r3, [r3, #20]
 8011b60:	431a      	orrs	r2, r3
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	69db      	ldr	r3, [r3, #28]
 8011b66:	4313      	orrs	r3, r2
 8011b68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8011b74:	f023 030c 	bic.w	r3, r3, #12
 8011b78:	687a      	ldr	r2, [r7, #4]
 8011b7a:	6812      	ldr	r2, [r2, #0]
 8011b7c:	68b9      	ldr	r1, [r7, #8]
 8011b7e:	430b      	orrs	r3, r1
 8011b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	695b      	ldr	r3, [r3, #20]
 8011b88:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	699a      	ldr	r2, [r3, #24]
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	430a      	orrs	r2, r1
 8011b96:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	4a55      	ldr	r2, [pc, #340]	@ (8011cf4 <UART_SetConfig+0x1c0>)
 8011b9e:	4293      	cmp	r3, r2
 8011ba0:	d103      	bne.n	8011baa <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8011ba2:	f7fe fc07 	bl	80103b4 <HAL_RCC_GetPCLK2Freq>
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	e002      	b.n	8011bb0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8011baa:	f7fe fbef 	bl	801038c <HAL_RCC_GetPCLK1Freq>
 8011bae:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	69db      	ldr	r3, [r3, #28]
 8011bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011bb8:	d14c      	bne.n	8011c54 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011bba:	68fa      	ldr	r2, [r7, #12]
 8011bbc:	4613      	mov	r3, r2
 8011bbe:	009b      	lsls	r3, r3, #2
 8011bc0:	4413      	add	r3, r2
 8011bc2:	009a      	lsls	r2, r3, #2
 8011bc4:	441a      	add	r2, r3
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	005b      	lsls	r3, r3, #1
 8011bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bd0:	4a49      	ldr	r2, [pc, #292]	@ (8011cf8 <UART_SetConfig+0x1c4>)
 8011bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8011bd6:	095b      	lsrs	r3, r3, #5
 8011bd8:	0119      	lsls	r1, r3, #4
 8011bda:	68fa      	ldr	r2, [r7, #12]
 8011bdc:	4613      	mov	r3, r2
 8011bde:	009b      	lsls	r3, r3, #2
 8011be0:	4413      	add	r3, r2
 8011be2:	009a      	lsls	r2, r3, #2
 8011be4:	441a      	add	r2, r3
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	685b      	ldr	r3, [r3, #4]
 8011bea:	005b      	lsls	r3, r3, #1
 8011bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8011bf0:	4b41      	ldr	r3, [pc, #260]	@ (8011cf8 <UART_SetConfig+0x1c4>)
 8011bf2:	fba3 0302 	umull	r0, r3, r3, r2
 8011bf6:	095b      	lsrs	r3, r3, #5
 8011bf8:	2064      	movs	r0, #100	@ 0x64
 8011bfa:	fb00 f303 	mul.w	r3, r0, r3
 8011bfe:	1ad3      	subs	r3, r2, r3
 8011c00:	00db      	lsls	r3, r3, #3
 8011c02:	3332      	adds	r3, #50	@ 0x32
 8011c04:	4a3c      	ldr	r2, [pc, #240]	@ (8011cf8 <UART_SetConfig+0x1c4>)
 8011c06:	fba2 2303 	umull	r2, r3, r2, r3
 8011c0a:	095b      	lsrs	r3, r3, #5
 8011c0c:	005b      	lsls	r3, r3, #1
 8011c0e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8011c12:	4419      	add	r1, r3
 8011c14:	68fa      	ldr	r2, [r7, #12]
 8011c16:	4613      	mov	r3, r2
 8011c18:	009b      	lsls	r3, r3, #2
 8011c1a:	4413      	add	r3, r2
 8011c1c:	009a      	lsls	r2, r3, #2
 8011c1e:	441a      	add	r2, r3
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	685b      	ldr	r3, [r3, #4]
 8011c24:	005b      	lsls	r3, r3, #1
 8011c26:	fbb2 f2f3 	udiv	r2, r2, r3
 8011c2a:	4b33      	ldr	r3, [pc, #204]	@ (8011cf8 <UART_SetConfig+0x1c4>)
 8011c2c:	fba3 0302 	umull	r0, r3, r3, r2
 8011c30:	095b      	lsrs	r3, r3, #5
 8011c32:	2064      	movs	r0, #100	@ 0x64
 8011c34:	fb00 f303 	mul.w	r3, r0, r3
 8011c38:	1ad3      	subs	r3, r2, r3
 8011c3a:	00db      	lsls	r3, r3, #3
 8011c3c:	3332      	adds	r3, #50	@ 0x32
 8011c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8011cf8 <UART_SetConfig+0x1c4>)
 8011c40:	fba2 2303 	umull	r2, r3, r2, r3
 8011c44:	095b      	lsrs	r3, r3, #5
 8011c46:	f003 0207 	and.w	r2, r3, #7
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	440a      	add	r2, r1
 8011c50:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011c52:	e04a      	b.n	8011cea <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011c54:	68fa      	ldr	r2, [r7, #12]
 8011c56:	4613      	mov	r3, r2
 8011c58:	009b      	lsls	r3, r3, #2
 8011c5a:	4413      	add	r3, r2
 8011c5c:	009a      	lsls	r2, r3, #2
 8011c5e:	441a      	add	r2, r3
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	685b      	ldr	r3, [r3, #4]
 8011c64:	009b      	lsls	r3, r3, #2
 8011c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c6a:	4a23      	ldr	r2, [pc, #140]	@ (8011cf8 <UART_SetConfig+0x1c4>)
 8011c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8011c70:	095b      	lsrs	r3, r3, #5
 8011c72:	0119      	lsls	r1, r3, #4
 8011c74:	68fa      	ldr	r2, [r7, #12]
 8011c76:	4613      	mov	r3, r2
 8011c78:	009b      	lsls	r3, r3, #2
 8011c7a:	4413      	add	r3, r2
 8011c7c:	009a      	lsls	r2, r3, #2
 8011c7e:	441a      	add	r2, r3
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	009b      	lsls	r3, r3, #2
 8011c86:	fbb2 f2f3 	udiv	r2, r2, r3
 8011c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8011cf8 <UART_SetConfig+0x1c4>)
 8011c8c:	fba3 0302 	umull	r0, r3, r3, r2
 8011c90:	095b      	lsrs	r3, r3, #5
 8011c92:	2064      	movs	r0, #100	@ 0x64
 8011c94:	fb00 f303 	mul.w	r3, r0, r3
 8011c98:	1ad3      	subs	r3, r2, r3
 8011c9a:	011b      	lsls	r3, r3, #4
 8011c9c:	3332      	adds	r3, #50	@ 0x32
 8011c9e:	4a16      	ldr	r2, [pc, #88]	@ (8011cf8 <UART_SetConfig+0x1c4>)
 8011ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8011ca4:	095b      	lsrs	r3, r3, #5
 8011ca6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011caa:	4419      	add	r1, r3
 8011cac:	68fa      	ldr	r2, [r7, #12]
 8011cae:	4613      	mov	r3, r2
 8011cb0:	009b      	lsls	r3, r3, #2
 8011cb2:	4413      	add	r3, r2
 8011cb4:	009a      	lsls	r2, r3, #2
 8011cb6:	441a      	add	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	009b      	lsls	r3, r3, #2
 8011cbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8011cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8011cf8 <UART_SetConfig+0x1c4>)
 8011cc4:	fba3 0302 	umull	r0, r3, r3, r2
 8011cc8:	095b      	lsrs	r3, r3, #5
 8011cca:	2064      	movs	r0, #100	@ 0x64
 8011ccc:	fb00 f303 	mul.w	r3, r0, r3
 8011cd0:	1ad3      	subs	r3, r2, r3
 8011cd2:	011b      	lsls	r3, r3, #4
 8011cd4:	3332      	adds	r3, #50	@ 0x32
 8011cd6:	4a08      	ldr	r2, [pc, #32]	@ (8011cf8 <UART_SetConfig+0x1c4>)
 8011cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8011cdc:	095b      	lsrs	r3, r3, #5
 8011cde:	f003 020f 	and.w	r2, r3, #15
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	440a      	add	r2, r1
 8011ce8:	609a      	str	r2, [r3, #8]
}
 8011cea:	bf00      	nop
 8011cec:	3710      	adds	r7, #16
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	40013800 	.word	0x40013800
 8011cf8:	51eb851f 	.word	0x51eb851f

08011cfc <std>:
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	b510      	push	{r4, lr}
 8011d00:	4604      	mov	r4, r0
 8011d02:	e9c0 3300 	strd	r3, r3, [r0]
 8011d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d0a:	6083      	str	r3, [r0, #8]
 8011d0c:	8181      	strh	r1, [r0, #12]
 8011d0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011d10:	81c2      	strh	r2, [r0, #14]
 8011d12:	6183      	str	r3, [r0, #24]
 8011d14:	4619      	mov	r1, r3
 8011d16:	2208      	movs	r2, #8
 8011d18:	305c      	adds	r0, #92	@ 0x5c
 8011d1a:	f000 fa19 	bl	8012150 <memset>
 8011d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8011d54 <std+0x58>)
 8011d20:	6224      	str	r4, [r4, #32]
 8011d22:	6263      	str	r3, [r4, #36]	@ 0x24
 8011d24:	4b0c      	ldr	r3, [pc, #48]	@ (8011d58 <std+0x5c>)
 8011d26:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011d28:	4b0c      	ldr	r3, [pc, #48]	@ (8011d5c <std+0x60>)
 8011d2a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8011d60 <std+0x64>)
 8011d2e:	6323      	str	r3, [r4, #48]	@ 0x30
 8011d30:	4b0c      	ldr	r3, [pc, #48]	@ (8011d64 <std+0x68>)
 8011d32:	429c      	cmp	r4, r3
 8011d34:	d006      	beq.n	8011d44 <std+0x48>
 8011d36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011d3a:	4294      	cmp	r4, r2
 8011d3c:	d002      	beq.n	8011d44 <std+0x48>
 8011d3e:	33d0      	adds	r3, #208	@ 0xd0
 8011d40:	429c      	cmp	r4, r3
 8011d42:	d105      	bne.n	8011d50 <std+0x54>
 8011d44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d4c:	f000 ba78 	b.w	8012240 <__retarget_lock_init_recursive>
 8011d50:	bd10      	pop	{r4, pc}
 8011d52:	bf00      	nop
 8011d54:	08011fa1 	.word	0x08011fa1
 8011d58:	08011fc3 	.word	0x08011fc3
 8011d5c:	08011ffb 	.word	0x08011ffb
 8011d60:	0801201f 	.word	0x0801201f
 8011d64:	20000674 	.word	0x20000674

08011d68 <stdio_exit_handler>:
 8011d68:	4a02      	ldr	r2, [pc, #8]	@ (8011d74 <stdio_exit_handler+0xc>)
 8011d6a:	4903      	ldr	r1, [pc, #12]	@ (8011d78 <stdio_exit_handler+0x10>)
 8011d6c:	4803      	ldr	r0, [pc, #12]	@ (8011d7c <stdio_exit_handler+0x14>)
 8011d6e:	f000 b869 	b.w	8011e44 <_fwalk_sglue>
 8011d72:	bf00      	nop
 8011d74:	20000198 	.word	0x20000198
 8011d78:	08012d89 	.word	0x08012d89
 8011d7c:	200001a8 	.word	0x200001a8

08011d80 <cleanup_stdio>:
 8011d80:	6841      	ldr	r1, [r0, #4]
 8011d82:	4b0c      	ldr	r3, [pc, #48]	@ (8011db4 <cleanup_stdio+0x34>)
 8011d84:	b510      	push	{r4, lr}
 8011d86:	4299      	cmp	r1, r3
 8011d88:	4604      	mov	r4, r0
 8011d8a:	d001      	beq.n	8011d90 <cleanup_stdio+0x10>
 8011d8c:	f000 fffc 	bl	8012d88 <_fflush_r>
 8011d90:	68a1      	ldr	r1, [r4, #8]
 8011d92:	4b09      	ldr	r3, [pc, #36]	@ (8011db8 <cleanup_stdio+0x38>)
 8011d94:	4299      	cmp	r1, r3
 8011d96:	d002      	beq.n	8011d9e <cleanup_stdio+0x1e>
 8011d98:	4620      	mov	r0, r4
 8011d9a:	f000 fff5 	bl	8012d88 <_fflush_r>
 8011d9e:	68e1      	ldr	r1, [r4, #12]
 8011da0:	4b06      	ldr	r3, [pc, #24]	@ (8011dbc <cleanup_stdio+0x3c>)
 8011da2:	4299      	cmp	r1, r3
 8011da4:	d004      	beq.n	8011db0 <cleanup_stdio+0x30>
 8011da6:	4620      	mov	r0, r4
 8011da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dac:	f000 bfec 	b.w	8012d88 <_fflush_r>
 8011db0:	bd10      	pop	{r4, pc}
 8011db2:	bf00      	nop
 8011db4:	20000674 	.word	0x20000674
 8011db8:	200006dc 	.word	0x200006dc
 8011dbc:	20000744 	.word	0x20000744

08011dc0 <global_stdio_init.part.0>:
 8011dc0:	b510      	push	{r4, lr}
 8011dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8011df0 <global_stdio_init.part.0+0x30>)
 8011dc4:	4c0b      	ldr	r4, [pc, #44]	@ (8011df4 <global_stdio_init.part.0+0x34>)
 8011dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8011df8 <global_stdio_init.part.0+0x38>)
 8011dc8:	4620      	mov	r0, r4
 8011dca:	601a      	str	r2, [r3, #0]
 8011dcc:	2104      	movs	r1, #4
 8011dce:	2200      	movs	r2, #0
 8011dd0:	f7ff ff94 	bl	8011cfc <std>
 8011dd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011dd8:	2201      	movs	r2, #1
 8011dda:	2109      	movs	r1, #9
 8011ddc:	f7ff ff8e 	bl	8011cfc <std>
 8011de0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011de4:	2202      	movs	r2, #2
 8011de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dea:	2112      	movs	r1, #18
 8011dec:	f7ff bf86 	b.w	8011cfc <std>
 8011df0:	200007ac 	.word	0x200007ac
 8011df4:	20000674 	.word	0x20000674
 8011df8:	08011d69 	.word	0x08011d69

08011dfc <__sfp_lock_acquire>:
 8011dfc:	4801      	ldr	r0, [pc, #4]	@ (8011e04 <__sfp_lock_acquire+0x8>)
 8011dfe:	f000 ba20 	b.w	8012242 <__retarget_lock_acquire_recursive>
 8011e02:	bf00      	nop
 8011e04:	200007b5 	.word	0x200007b5

08011e08 <__sfp_lock_release>:
 8011e08:	4801      	ldr	r0, [pc, #4]	@ (8011e10 <__sfp_lock_release+0x8>)
 8011e0a:	f000 ba1b 	b.w	8012244 <__retarget_lock_release_recursive>
 8011e0e:	bf00      	nop
 8011e10:	200007b5 	.word	0x200007b5

08011e14 <__sinit>:
 8011e14:	b510      	push	{r4, lr}
 8011e16:	4604      	mov	r4, r0
 8011e18:	f7ff fff0 	bl	8011dfc <__sfp_lock_acquire>
 8011e1c:	6a23      	ldr	r3, [r4, #32]
 8011e1e:	b11b      	cbz	r3, 8011e28 <__sinit+0x14>
 8011e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e24:	f7ff bff0 	b.w	8011e08 <__sfp_lock_release>
 8011e28:	4b04      	ldr	r3, [pc, #16]	@ (8011e3c <__sinit+0x28>)
 8011e2a:	6223      	str	r3, [r4, #32]
 8011e2c:	4b04      	ldr	r3, [pc, #16]	@ (8011e40 <__sinit+0x2c>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d1f5      	bne.n	8011e20 <__sinit+0xc>
 8011e34:	f7ff ffc4 	bl	8011dc0 <global_stdio_init.part.0>
 8011e38:	e7f2      	b.n	8011e20 <__sinit+0xc>
 8011e3a:	bf00      	nop
 8011e3c:	08011d81 	.word	0x08011d81
 8011e40:	200007ac 	.word	0x200007ac

08011e44 <_fwalk_sglue>:
 8011e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e48:	4607      	mov	r7, r0
 8011e4a:	4688      	mov	r8, r1
 8011e4c:	4614      	mov	r4, r2
 8011e4e:	2600      	movs	r6, #0
 8011e50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e54:	f1b9 0901 	subs.w	r9, r9, #1
 8011e58:	d505      	bpl.n	8011e66 <_fwalk_sglue+0x22>
 8011e5a:	6824      	ldr	r4, [r4, #0]
 8011e5c:	2c00      	cmp	r4, #0
 8011e5e:	d1f7      	bne.n	8011e50 <_fwalk_sglue+0xc>
 8011e60:	4630      	mov	r0, r6
 8011e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e66:	89ab      	ldrh	r3, [r5, #12]
 8011e68:	2b01      	cmp	r3, #1
 8011e6a:	d907      	bls.n	8011e7c <_fwalk_sglue+0x38>
 8011e6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e70:	3301      	adds	r3, #1
 8011e72:	d003      	beq.n	8011e7c <_fwalk_sglue+0x38>
 8011e74:	4629      	mov	r1, r5
 8011e76:	4638      	mov	r0, r7
 8011e78:	47c0      	blx	r8
 8011e7a:	4306      	orrs	r6, r0
 8011e7c:	3568      	adds	r5, #104	@ 0x68
 8011e7e:	e7e9      	b.n	8011e54 <_fwalk_sglue+0x10>

08011e80 <iprintf>:
 8011e80:	b40f      	push	{r0, r1, r2, r3}
 8011e82:	b507      	push	{r0, r1, r2, lr}
 8011e84:	4906      	ldr	r1, [pc, #24]	@ (8011ea0 <iprintf+0x20>)
 8011e86:	ab04      	add	r3, sp, #16
 8011e88:	6808      	ldr	r0, [r1, #0]
 8011e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e8e:	6881      	ldr	r1, [r0, #8]
 8011e90:	9301      	str	r3, [sp, #4]
 8011e92:	f000 fc4f 	bl	8012734 <_vfiprintf_r>
 8011e96:	b003      	add	sp, #12
 8011e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e9c:	b004      	add	sp, #16
 8011e9e:	4770      	bx	lr
 8011ea0:	200001a4 	.word	0x200001a4

08011ea4 <_puts_r>:
 8011ea4:	6a03      	ldr	r3, [r0, #32]
 8011ea6:	b570      	push	{r4, r5, r6, lr}
 8011ea8:	4605      	mov	r5, r0
 8011eaa:	460e      	mov	r6, r1
 8011eac:	6884      	ldr	r4, [r0, #8]
 8011eae:	b90b      	cbnz	r3, 8011eb4 <_puts_r+0x10>
 8011eb0:	f7ff ffb0 	bl	8011e14 <__sinit>
 8011eb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011eb6:	07db      	lsls	r3, r3, #31
 8011eb8:	d405      	bmi.n	8011ec6 <_puts_r+0x22>
 8011eba:	89a3      	ldrh	r3, [r4, #12]
 8011ebc:	0598      	lsls	r0, r3, #22
 8011ebe:	d402      	bmi.n	8011ec6 <_puts_r+0x22>
 8011ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ec2:	f000 f9be 	bl	8012242 <__retarget_lock_acquire_recursive>
 8011ec6:	89a3      	ldrh	r3, [r4, #12]
 8011ec8:	0719      	lsls	r1, r3, #28
 8011eca:	d502      	bpl.n	8011ed2 <_puts_r+0x2e>
 8011ecc:	6923      	ldr	r3, [r4, #16]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d135      	bne.n	8011f3e <_puts_r+0x9a>
 8011ed2:	4621      	mov	r1, r4
 8011ed4:	4628      	mov	r0, r5
 8011ed6:	f000 f8e5 	bl	80120a4 <__swsetup_r>
 8011eda:	b380      	cbz	r0, 8011f3e <_puts_r+0x9a>
 8011edc:	f04f 35ff 	mov.w	r5, #4294967295
 8011ee0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ee2:	07da      	lsls	r2, r3, #31
 8011ee4:	d405      	bmi.n	8011ef2 <_puts_r+0x4e>
 8011ee6:	89a3      	ldrh	r3, [r4, #12]
 8011ee8:	059b      	lsls	r3, r3, #22
 8011eea:	d402      	bmi.n	8011ef2 <_puts_r+0x4e>
 8011eec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011eee:	f000 f9a9 	bl	8012244 <__retarget_lock_release_recursive>
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	bd70      	pop	{r4, r5, r6, pc}
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	da04      	bge.n	8011f04 <_puts_r+0x60>
 8011efa:	69a2      	ldr	r2, [r4, #24]
 8011efc:	429a      	cmp	r2, r3
 8011efe:	dc17      	bgt.n	8011f30 <_puts_r+0x8c>
 8011f00:	290a      	cmp	r1, #10
 8011f02:	d015      	beq.n	8011f30 <_puts_r+0x8c>
 8011f04:	6823      	ldr	r3, [r4, #0]
 8011f06:	1c5a      	adds	r2, r3, #1
 8011f08:	6022      	str	r2, [r4, #0]
 8011f0a:	7019      	strb	r1, [r3, #0]
 8011f0c:	68a3      	ldr	r3, [r4, #8]
 8011f0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011f12:	3b01      	subs	r3, #1
 8011f14:	60a3      	str	r3, [r4, #8]
 8011f16:	2900      	cmp	r1, #0
 8011f18:	d1ed      	bne.n	8011ef6 <_puts_r+0x52>
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	da11      	bge.n	8011f42 <_puts_r+0x9e>
 8011f1e:	4622      	mov	r2, r4
 8011f20:	210a      	movs	r1, #10
 8011f22:	4628      	mov	r0, r5
 8011f24:	f000 f87f 	bl	8012026 <__swbuf_r>
 8011f28:	3001      	adds	r0, #1
 8011f2a:	d0d7      	beq.n	8011edc <_puts_r+0x38>
 8011f2c:	250a      	movs	r5, #10
 8011f2e:	e7d7      	b.n	8011ee0 <_puts_r+0x3c>
 8011f30:	4622      	mov	r2, r4
 8011f32:	4628      	mov	r0, r5
 8011f34:	f000 f877 	bl	8012026 <__swbuf_r>
 8011f38:	3001      	adds	r0, #1
 8011f3a:	d1e7      	bne.n	8011f0c <_puts_r+0x68>
 8011f3c:	e7ce      	b.n	8011edc <_puts_r+0x38>
 8011f3e:	3e01      	subs	r6, #1
 8011f40:	e7e4      	b.n	8011f0c <_puts_r+0x68>
 8011f42:	6823      	ldr	r3, [r4, #0]
 8011f44:	1c5a      	adds	r2, r3, #1
 8011f46:	6022      	str	r2, [r4, #0]
 8011f48:	220a      	movs	r2, #10
 8011f4a:	701a      	strb	r2, [r3, #0]
 8011f4c:	e7ee      	b.n	8011f2c <_puts_r+0x88>
	...

08011f50 <puts>:
 8011f50:	4b02      	ldr	r3, [pc, #8]	@ (8011f5c <puts+0xc>)
 8011f52:	4601      	mov	r1, r0
 8011f54:	6818      	ldr	r0, [r3, #0]
 8011f56:	f7ff bfa5 	b.w	8011ea4 <_puts_r>
 8011f5a:	bf00      	nop
 8011f5c:	200001a4 	.word	0x200001a4

08011f60 <siprintf>:
 8011f60:	b40e      	push	{r1, r2, r3}
 8011f62:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011f66:	b500      	push	{lr}
 8011f68:	b09c      	sub	sp, #112	@ 0x70
 8011f6a:	ab1d      	add	r3, sp, #116	@ 0x74
 8011f6c:	9002      	str	r0, [sp, #8]
 8011f6e:	9006      	str	r0, [sp, #24]
 8011f70:	9107      	str	r1, [sp, #28]
 8011f72:	9104      	str	r1, [sp, #16]
 8011f74:	4808      	ldr	r0, [pc, #32]	@ (8011f98 <siprintf+0x38>)
 8011f76:	4909      	ldr	r1, [pc, #36]	@ (8011f9c <siprintf+0x3c>)
 8011f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f7c:	9105      	str	r1, [sp, #20]
 8011f7e:	6800      	ldr	r0, [r0, #0]
 8011f80:	a902      	add	r1, sp, #8
 8011f82:	9301      	str	r3, [sp, #4]
 8011f84:	f000 fab2 	bl	80124ec <_svfiprintf_r>
 8011f88:	2200      	movs	r2, #0
 8011f8a:	9b02      	ldr	r3, [sp, #8]
 8011f8c:	701a      	strb	r2, [r3, #0]
 8011f8e:	b01c      	add	sp, #112	@ 0x70
 8011f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f94:	b003      	add	sp, #12
 8011f96:	4770      	bx	lr
 8011f98:	200001a4 	.word	0x200001a4
 8011f9c:	ffff0208 	.word	0xffff0208

08011fa0 <__sread>:
 8011fa0:	b510      	push	{r4, lr}
 8011fa2:	460c      	mov	r4, r1
 8011fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fa8:	f000 f8fc 	bl	80121a4 <_read_r>
 8011fac:	2800      	cmp	r0, #0
 8011fae:	bfab      	itete	ge
 8011fb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8011fb4:	181b      	addge	r3, r3, r0
 8011fb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011fba:	bfac      	ite	ge
 8011fbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011fbe:	81a3      	strhlt	r3, [r4, #12]
 8011fc0:	bd10      	pop	{r4, pc}

08011fc2 <__swrite>:
 8011fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fc6:	461f      	mov	r7, r3
 8011fc8:	898b      	ldrh	r3, [r1, #12]
 8011fca:	4605      	mov	r5, r0
 8011fcc:	05db      	lsls	r3, r3, #23
 8011fce:	460c      	mov	r4, r1
 8011fd0:	4616      	mov	r6, r2
 8011fd2:	d505      	bpl.n	8011fe0 <__swrite+0x1e>
 8011fd4:	2302      	movs	r3, #2
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fdc:	f000 f8d0 	bl	8012180 <_lseek_r>
 8011fe0:	89a3      	ldrh	r3, [r4, #12]
 8011fe2:	4632      	mov	r2, r6
 8011fe4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011fe8:	81a3      	strh	r3, [r4, #12]
 8011fea:	4628      	mov	r0, r5
 8011fec:	463b      	mov	r3, r7
 8011fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ff6:	f000 b8e7 	b.w	80121c8 <_write_r>

08011ffa <__sseek>:
 8011ffa:	b510      	push	{r4, lr}
 8011ffc:	460c      	mov	r4, r1
 8011ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012002:	f000 f8bd 	bl	8012180 <_lseek_r>
 8012006:	1c43      	adds	r3, r0, #1
 8012008:	89a3      	ldrh	r3, [r4, #12]
 801200a:	bf15      	itete	ne
 801200c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801200e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012012:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012016:	81a3      	strheq	r3, [r4, #12]
 8012018:	bf18      	it	ne
 801201a:	81a3      	strhne	r3, [r4, #12]
 801201c:	bd10      	pop	{r4, pc}

0801201e <__sclose>:
 801201e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012022:	f000 b89d 	b.w	8012160 <_close_r>

08012026 <__swbuf_r>:
 8012026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012028:	460e      	mov	r6, r1
 801202a:	4614      	mov	r4, r2
 801202c:	4605      	mov	r5, r0
 801202e:	b118      	cbz	r0, 8012038 <__swbuf_r+0x12>
 8012030:	6a03      	ldr	r3, [r0, #32]
 8012032:	b90b      	cbnz	r3, 8012038 <__swbuf_r+0x12>
 8012034:	f7ff feee 	bl	8011e14 <__sinit>
 8012038:	69a3      	ldr	r3, [r4, #24]
 801203a:	60a3      	str	r3, [r4, #8]
 801203c:	89a3      	ldrh	r3, [r4, #12]
 801203e:	071a      	lsls	r2, r3, #28
 8012040:	d501      	bpl.n	8012046 <__swbuf_r+0x20>
 8012042:	6923      	ldr	r3, [r4, #16]
 8012044:	b943      	cbnz	r3, 8012058 <__swbuf_r+0x32>
 8012046:	4621      	mov	r1, r4
 8012048:	4628      	mov	r0, r5
 801204a:	f000 f82b 	bl	80120a4 <__swsetup_r>
 801204e:	b118      	cbz	r0, 8012058 <__swbuf_r+0x32>
 8012050:	f04f 37ff 	mov.w	r7, #4294967295
 8012054:	4638      	mov	r0, r7
 8012056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012058:	6823      	ldr	r3, [r4, #0]
 801205a:	6922      	ldr	r2, [r4, #16]
 801205c:	b2f6      	uxtb	r6, r6
 801205e:	1a98      	subs	r0, r3, r2
 8012060:	6963      	ldr	r3, [r4, #20]
 8012062:	4637      	mov	r7, r6
 8012064:	4283      	cmp	r3, r0
 8012066:	dc05      	bgt.n	8012074 <__swbuf_r+0x4e>
 8012068:	4621      	mov	r1, r4
 801206a:	4628      	mov	r0, r5
 801206c:	f000 fe8c 	bl	8012d88 <_fflush_r>
 8012070:	2800      	cmp	r0, #0
 8012072:	d1ed      	bne.n	8012050 <__swbuf_r+0x2a>
 8012074:	68a3      	ldr	r3, [r4, #8]
 8012076:	3b01      	subs	r3, #1
 8012078:	60a3      	str	r3, [r4, #8]
 801207a:	6823      	ldr	r3, [r4, #0]
 801207c:	1c5a      	adds	r2, r3, #1
 801207e:	6022      	str	r2, [r4, #0]
 8012080:	701e      	strb	r6, [r3, #0]
 8012082:	6962      	ldr	r2, [r4, #20]
 8012084:	1c43      	adds	r3, r0, #1
 8012086:	429a      	cmp	r2, r3
 8012088:	d004      	beq.n	8012094 <__swbuf_r+0x6e>
 801208a:	89a3      	ldrh	r3, [r4, #12]
 801208c:	07db      	lsls	r3, r3, #31
 801208e:	d5e1      	bpl.n	8012054 <__swbuf_r+0x2e>
 8012090:	2e0a      	cmp	r6, #10
 8012092:	d1df      	bne.n	8012054 <__swbuf_r+0x2e>
 8012094:	4621      	mov	r1, r4
 8012096:	4628      	mov	r0, r5
 8012098:	f000 fe76 	bl	8012d88 <_fflush_r>
 801209c:	2800      	cmp	r0, #0
 801209e:	d0d9      	beq.n	8012054 <__swbuf_r+0x2e>
 80120a0:	e7d6      	b.n	8012050 <__swbuf_r+0x2a>
	...

080120a4 <__swsetup_r>:
 80120a4:	b538      	push	{r3, r4, r5, lr}
 80120a6:	4b29      	ldr	r3, [pc, #164]	@ (801214c <__swsetup_r+0xa8>)
 80120a8:	4605      	mov	r5, r0
 80120aa:	6818      	ldr	r0, [r3, #0]
 80120ac:	460c      	mov	r4, r1
 80120ae:	b118      	cbz	r0, 80120b8 <__swsetup_r+0x14>
 80120b0:	6a03      	ldr	r3, [r0, #32]
 80120b2:	b90b      	cbnz	r3, 80120b8 <__swsetup_r+0x14>
 80120b4:	f7ff feae 	bl	8011e14 <__sinit>
 80120b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120bc:	0719      	lsls	r1, r3, #28
 80120be:	d422      	bmi.n	8012106 <__swsetup_r+0x62>
 80120c0:	06da      	lsls	r2, r3, #27
 80120c2:	d407      	bmi.n	80120d4 <__swsetup_r+0x30>
 80120c4:	2209      	movs	r2, #9
 80120c6:	602a      	str	r2, [r5, #0]
 80120c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120cc:	f04f 30ff 	mov.w	r0, #4294967295
 80120d0:	81a3      	strh	r3, [r4, #12]
 80120d2:	e033      	b.n	801213c <__swsetup_r+0x98>
 80120d4:	0758      	lsls	r0, r3, #29
 80120d6:	d512      	bpl.n	80120fe <__swsetup_r+0x5a>
 80120d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80120da:	b141      	cbz	r1, 80120ee <__swsetup_r+0x4a>
 80120dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120e0:	4299      	cmp	r1, r3
 80120e2:	d002      	beq.n	80120ea <__swsetup_r+0x46>
 80120e4:	4628      	mov	r0, r5
 80120e6:	f000 f8af 	bl	8012248 <_free_r>
 80120ea:	2300      	movs	r3, #0
 80120ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80120ee:	89a3      	ldrh	r3, [r4, #12]
 80120f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80120f4:	81a3      	strh	r3, [r4, #12]
 80120f6:	2300      	movs	r3, #0
 80120f8:	6063      	str	r3, [r4, #4]
 80120fa:	6923      	ldr	r3, [r4, #16]
 80120fc:	6023      	str	r3, [r4, #0]
 80120fe:	89a3      	ldrh	r3, [r4, #12]
 8012100:	f043 0308 	orr.w	r3, r3, #8
 8012104:	81a3      	strh	r3, [r4, #12]
 8012106:	6923      	ldr	r3, [r4, #16]
 8012108:	b94b      	cbnz	r3, 801211e <__swsetup_r+0x7a>
 801210a:	89a3      	ldrh	r3, [r4, #12]
 801210c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012114:	d003      	beq.n	801211e <__swsetup_r+0x7a>
 8012116:	4621      	mov	r1, r4
 8012118:	4628      	mov	r0, r5
 801211a:	f000 fe82 	bl	8012e22 <__smakebuf_r>
 801211e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012122:	f013 0201 	ands.w	r2, r3, #1
 8012126:	d00a      	beq.n	801213e <__swsetup_r+0x9a>
 8012128:	2200      	movs	r2, #0
 801212a:	60a2      	str	r2, [r4, #8]
 801212c:	6962      	ldr	r2, [r4, #20]
 801212e:	4252      	negs	r2, r2
 8012130:	61a2      	str	r2, [r4, #24]
 8012132:	6922      	ldr	r2, [r4, #16]
 8012134:	b942      	cbnz	r2, 8012148 <__swsetup_r+0xa4>
 8012136:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801213a:	d1c5      	bne.n	80120c8 <__swsetup_r+0x24>
 801213c:	bd38      	pop	{r3, r4, r5, pc}
 801213e:	0799      	lsls	r1, r3, #30
 8012140:	bf58      	it	pl
 8012142:	6962      	ldrpl	r2, [r4, #20]
 8012144:	60a2      	str	r2, [r4, #8]
 8012146:	e7f4      	b.n	8012132 <__swsetup_r+0x8e>
 8012148:	2000      	movs	r0, #0
 801214a:	e7f7      	b.n	801213c <__swsetup_r+0x98>
 801214c:	200001a4 	.word	0x200001a4

08012150 <memset>:
 8012150:	4603      	mov	r3, r0
 8012152:	4402      	add	r2, r0
 8012154:	4293      	cmp	r3, r2
 8012156:	d100      	bne.n	801215a <memset+0xa>
 8012158:	4770      	bx	lr
 801215a:	f803 1b01 	strb.w	r1, [r3], #1
 801215e:	e7f9      	b.n	8012154 <memset+0x4>

08012160 <_close_r>:
 8012160:	b538      	push	{r3, r4, r5, lr}
 8012162:	2300      	movs	r3, #0
 8012164:	4d05      	ldr	r5, [pc, #20]	@ (801217c <_close_r+0x1c>)
 8012166:	4604      	mov	r4, r0
 8012168:	4608      	mov	r0, r1
 801216a:	602b      	str	r3, [r5, #0]
 801216c:	f7f0 fd2d 	bl	8002bca <_close>
 8012170:	1c43      	adds	r3, r0, #1
 8012172:	d102      	bne.n	801217a <_close_r+0x1a>
 8012174:	682b      	ldr	r3, [r5, #0]
 8012176:	b103      	cbz	r3, 801217a <_close_r+0x1a>
 8012178:	6023      	str	r3, [r4, #0]
 801217a:	bd38      	pop	{r3, r4, r5, pc}
 801217c:	200007b0 	.word	0x200007b0

08012180 <_lseek_r>:
 8012180:	b538      	push	{r3, r4, r5, lr}
 8012182:	4604      	mov	r4, r0
 8012184:	4608      	mov	r0, r1
 8012186:	4611      	mov	r1, r2
 8012188:	2200      	movs	r2, #0
 801218a:	4d05      	ldr	r5, [pc, #20]	@ (80121a0 <_lseek_r+0x20>)
 801218c:	602a      	str	r2, [r5, #0]
 801218e:	461a      	mov	r2, r3
 8012190:	f7f0 fd3f 	bl	8002c12 <_lseek>
 8012194:	1c43      	adds	r3, r0, #1
 8012196:	d102      	bne.n	801219e <_lseek_r+0x1e>
 8012198:	682b      	ldr	r3, [r5, #0]
 801219a:	b103      	cbz	r3, 801219e <_lseek_r+0x1e>
 801219c:	6023      	str	r3, [r4, #0]
 801219e:	bd38      	pop	{r3, r4, r5, pc}
 80121a0:	200007b0 	.word	0x200007b0

080121a4 <_read_r>:
 80121a4:	b538      	push	{r3, r4, r5, lr}
 80121a6:	4604      	mov	r4, r0
 80121a8:	4608      	mov	r0, r1
 80121aa:	4611      	mov	r1, r2
 80121ac:	2200      	movs	r2, #0
 80121ae:	4d05      	ldr	r5, [pc, #20]	@ (80121c4 <_read_r+0x20>)
 80121b0:	602a      	str	r2, [r5, #0]
 80121b2:	461a      	mov	r2, r3
 80121b4:	f7f0 fcd0 	bl	8002b58 <_read>
 80121b8:	1c43      	adds	r3, r0, #1
 80121ba:	d102      	bne.n	80121c2 <_read_r+0x1e>
 80121bc:	682b      	ldr	r3, [r5, #0]
 80121be:	b103      	cbz	r3, 80121c2 <_read_r+0x1e>
 80121c0:	6023      	str	r3, [r4, #0]
 80121c2:	bd38      	pop	{r3, r4, r5, pc}
 80121c4:	200007b0 	.word	0x200007b0

080121c8 <_write_r>:
 80121c8:	b538      	push	{r3, r4, r5, lr}
 80121ca:	4604      	mov	r4, r0
 80121cc:	4608      	mov	r0, r1
 80121ce:	4611      	mov	r1, r2
 80121d0:	2200      	movs	r2, #0
 80121d2:	4d05      	ldr	r5, [pc, #20]	@ (80121e8 <_write_r+0x20>)
 80121d4:	602a      	str	r2, [r5, #0]
 80121d6:	461a      	mov	r2, r3
 80121d8:	f7f0 fcdb 	bl	8002b92 <_write>
 80121dc:	1c43      	adds	r3, r0, #1
 80121de:	d102      	bne.n	80121e6 <_write_r+0x1e>
 80121e0:	682b      	ldr	r3, [r5, #0]
 80121e2:	b103      	cbz	r3, 80121e6 <_write_r+0x1e>
 80121e4:	6023      	str	r3, [r4, #0]
 80121e6:	bd38      	pop	{r3, r4, r5, pc}
 80121e8:	200007b0 	.word	0x200007b0

080121ec <__errno>:
 80121ec:	4b01      	ldr	r3, [pc, #4]	@ (80121f4 <__errno+0x8>)
 80121ee:	6818      	ldr	r0, [r3, #0]
 80121f0:	4770      	bx	lr
 80121f2:	bf00      	nop
 80121f4:	200001a4 	.word	0x200001a4

080121f8 <__libc_init_array>:
 80121f8:	b570      	push	{r4, r5, r6, lr}
 80121fa:	2600      	movs	r6, #0
 80121fc:	4d0c      	ldr	r5, [pc, #48]	@ (8012230 <__libc_init_array+0x38>)
 80121fe:	4c0d      	ldr	r4, [pc, #52]	@ (8012234 <__libc_init_array+0x3c>)
 8012200:	1b64      	subs	r4, r4, r5
 8012202:	10a4      	asrs	r4, r4, #2
 8012204:	42a6      	cmp	r6, r4
 8012206:	d109      	bne.n	801221c <__libc_init_array+0x24>
 8012208:	f001 fe26 	bl	8013e58 <_init>
 801220c:	2600      	movs	r6, #0
 801220e:	4d0a      	ldr	r5, [pc, #40]	@ (8012238 <__libc_init_array+0x40>)
 8012210:	4c0a      	ldr	r4, [pc, #40]	@ (801223c <__libc_init_array+0x44>)
 8012212:	1b64      	subs	r4, r4, r5
 8012214:	10a4      	asrs	r4, r4, #2
 8012216:	42a6      	cmp	r6, r4
 8012218:	d105      	bne.n	8012226 <__libc_init_array+0x2e>
 801221a:	bd70      	pop	{r4, r5, r6, pc}
 801221c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012220:	4798      	blx	r3
 8012222:	3601      	adds	r6, #1
 8012224:	e7ee      	b.n	8012204 <__libc_init_array+0xc>
 8012226:	f855 3b04 	ldr.w	r3, [r5], #4
 801222a:	4798      	blx	r3
 801222c:	3601      	adds	r6, #1
 801222e:	e7f2      	b.n	8012216 <__libc_init_array+0x1e>
 8012230:	08014070 	.word	0x08014070
 8012234:	08014070 	.word	0x08014070
 8012238:	08014070 	.word	0x08014070
 801223c:	08014074 	.word	0x08014074

08012240 <__retarget_lock_init_recursive>:
 8012240:	4770      	bx	lr

08012242 <__retarget_lock_acquire_recursive>:
 8012242:	4770      	bx	lr

08012244 <__retarget_lock_release_recursive>:
 8012244:	4770      	bx	lr
	...

08012248 <_free_r>:
 8012248:	b538      	push	{r3, r4, r5, lr}
 801224a:	4605      	mov	r5, r0
 801224c:	2900      	cmp	r1, #0
 801224e:	d040      	beq.n	80122d2 <_free_r+0x8a>
 8012250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012254:	1f0c      	subs	r4, r1, #4
 8012256:	2b00      	cmp	r3, #0
 8012258:	bfb8      	it	lt
 801225a:	18e4      	addlt	r4, r4, r3
 801225c:	f000 f8de 	bl	801241c <__malloc_lock>
 8012260:	4a1c      	ldr	r2, [pc, #112]	@ (80122d4 <_free_r+0x8c>)
 8012262:	6813      	ldr	r3, [r2, #0]
 8012264:	b933      	cbnz	r3, 8012274 <_free_r+0x2c>
 8012266:	6063      	str	r3, [r4, #4]
 8012268:	6014      	str	r4, [r2, #0]
 801226a:	4628      	mov	r0, r5
 801226c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012270:	f000 b8da 	b.w	8012428 <__malloc_unlock>
 8012274:	42a3      	cmp	r3, r4
 8012276:	d908      	bls.n	801228a <_free_r+0x42>
 8012278:	6820      	ldr	r0, [r4, #0]
 801227a:	1821      	adds	r1, r4, r0
 801227c:	428b      	cmp	r3, r1
 801227e:	bf01      	itttt	eq
 8012280:	6819      	ldreq	r1, [r3, #0]
 8012282:	685b      	ldreq	r3, [r3, #4]
 8012284:	1809      	addeq	r1, r1, r0
 8012286:	6021      	streq	r1, [r4, #0]
 8012288:	e7ed      	b.n	8012266 <_free_r+0x1e>
 801228a:	461a      	mov	r2, r3
 801228c:	685b      	ldr	r3, [r3, #4]
 801228e:	b10b      	cbz	r3, 8012294 <_free_r+0x4c>
 8012290:	42a3      	cmp	r3, r4
 8012292:	d9fa      	bls.n	801228a <_free_r+0x42>
 8012294:	6811      	ldr	r1, [r2, #0]
 8012296:	1850      	adds	r0, r2, r1
 8012298:	42a0      	cmp	r0, r4
 801229a:	d10b      	bne.n	80122b4 <_free_r+0x6c>
 801229c:	6820      	ldr	r0, [r4, #0]
 801229e:	4401      	add	r1, r0
 80122a0:	1850      	adds	r0, r2, r1
 80122a2:	4283      	cmp	r3, r0
 80122a4:	6011      	str	r1, [r2, #0]
 80122a6:	d1e0      	bne.n	801226a <_free_r+0x22>
 80122a8:	6818      	ldr	r0, [r3, #0]
 80122aa:	685b      	ldr	r3, [r3, #4]
 80122ac:	4408      	add	r0, r1
 80122ae:	6010      	str	r0, [r2, #0]
 80122b0:	6053      	str	r3, [r2, #4]
 80122b2:	e7da      	b.n	801226a <_free_r+0x22>
 80122b4:	d902      	bls.n	80122bc <_free_r+0x74>
 80122b6:	230c      	movs	r3, #12
 80122b8:	602b      	str	r3, [r5, #0]
 80122ba:	e7d6      	b.n	801226a <_free_r+0x22>
 80122bc:	6820      	ldr	r0, [r4, #0]
 80122be:	1821      	adds	r1, r4, r0
 80122c0:	428b      	cmp	r3, r1
 80122c2:	bf01      	itttt	eq
 80122c4:	6819      	ldreq	r1, [r3, #0]
 80122c6:	685b      	ldreq	r3, [r3, #4]
 80122c8:	1809      	addeq	r1, r1, r0
 80122ca:	6021      	streq	r1, [r4, #0]
 80122cc:	6063      	str	r3, [r4, #4]
 80122ce:	6054      	str	r4, [r2, #4]
 80122d0:	e7cb      	b.n	801226a <_free_r+0x22>
 80122d2:	bd38      	pop	{r3, r4, r5, pc}
 80122d4:	200007bc 	.word	0x200007bc

080122d8 <sbrk_aligned>:
 80122d8:	b570      	push	{r4, r5, r6, lr}
 80122da:	4e0f      	ldr	r6, [pc, #60]	@ (8012318 <sbrk_aligned+0x40>)
 80122dc:	460c      	mov	r4, r1
 80122de:	6831      	ldr	r1, [r6, #0]
 80122e0:	4605      	mov	r5, r0
 80122e2:	b911      	cbnz	r1, 80122ea <sbrk_aligned+0x12>
 80122e4:	f000 fe16 	bl	8012f14 <_sbrk_r>
 80122e8:	6030      	str	r0, [r6, #0]
 80122ea:	4621      	mov	r1, r4
 80122ec:	4628      	mov	r0, r5
 80122ee:	f000 fe11 	bl	8012f14 <_sbrk_r>
 80122f2:	1c43      	adds	r3, r0, #1
 80122f4:	d103      	bne.n	80122fe <sbrk_aligned+0x26>
 80122f6:	f04f 34ff 	mov.w	r4, #4294967295
 80122fa:	4620      	mov	r0, r4
 80122fc:	bd70      	pop	{r4, r5, r6, pc}
 80122fe:	1cc4      	adds	r4, r0, #3
 8012300:	f024 0403 	bic.w	r4, r4, #3
 8012304:	42a0      	cmp	r0, r4
 8012306:	d0f8      	beq.n	80122fa <sbrk_aligned+0x22>
 8012308:	1a21      	subs	r1, r4, r0
 801230a:	4628      	mov	r0, r5
 801230c:	f000 fe02 	bl	8012f14 <_sbrk_r>
 8012310:	3001      	adds	r0, #1
 8012312:	d1f2      	bne.n	80122fa <sbrk_aligned+0x22>
 8012314:	e7ef      	b.n	80122f6 <sbrk_aligned+0x1e>
 8012316:	bf00      	nop
 8012318:	200007b8 	.word	0x200007b8

0801231c <_malloc_r>:
 801231c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012320:	1ccd      	adds	r5, r1, #3
 8012322:	f025 0503 	bic.w	r5, r5, #3
 8012326:	3508      	adds	r5, #8
 8012328:	2d0c      	cmp	r5, #12
 801232a:	bf38      	it	cc
 801232c:	250c      	movcc	r5, #12
 801232e:	2d00      	cmp	r5, #0
 8012330:	4606      	mov	r6, r0
 8012332:	db01      	blt.n	8012338 <_malloc_r+0x1c>
 8012334:	42a9      	cmp	r1, r5
 8012336:	d904      	bls.n	8012342 <_malloc_r+0x26>
 8012338:	230c      	movs	r3, #12
 801233a:	6033      	str	r3, [r6, #0]
 801233c:	2000      	movs	r0, #0
 801233e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012342:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012418 <_malloc_r+0xfc>
 8012346:	f000 f869 	bl	801241c <__malloc_lock>
 801234a:	f8d8 3000 	ldr.w	r3, [r8]
 801234e:	461c      	mov	r4, r3
 8012350:	bb44      	cbnz	r4, 80123a4 <_malloc_r+0x88>
 8012352:	4629      	mov	r1, r5
 8012354:	4630      	mov	r0, r6
 8012356:	f7ff ffbf 	bl	80122d8 <sbrk_aligned>
 801235a:	1c43      	adds	r3, r0, #1
 801235c:	4604      	mov	r4, r0
 801235e:	d158      	bne.n	8012412 <_malloc_r+0xf6>
 8012360:	f8d8 4000 	ldr.w	r4, [r8]
 8012364:	4627      	mov	r7, r4
 8012366:	2f00      	cmp	r7, #0
 8012368:	d143      	bne.n	80123f2 <_malloc_r+0xd6>
 801236a:	2c00      	cmp	r4, #0
 801236c:	d04b      	beq.n	8012406 <_malloc_r+0xea>
 801236e:	6823      	ldr	r3, [r4, #0]
 8012370:	4639      	mov	r1, r7
 8012372:	4630      	mov	r0, r6
 8012374:	eb04 0903 	add.w	r9, r4, r3
 8012378:	f000 fdcc 	bl	8012f14 <_sbrk_r>
 801237c:	4581      	cmp	r9, r0
 801237e:	d142      	bne.n	8012406 <_malloc_r+0xea>
 8012380:	6821      	ldr	r1, [r4, #0]
 8012382:	4630      	mov	r0, r6
 8012384:	1a6d      	subs	r5, r5, r1
 8012386:	4629      	mov	r1, r5
 8012388:	f7ff ffa6 	bl	80122d8 <sbrk_aligned>
 801238c:	3001      	adds	r0, #1
 801238e:	d03a      	beq.n	8012406 <_malloc_r+0xea>
 8012390:	6823      	ldr	r3, [r4, #0]
 8012392:	442b      	add	r3, r5
 8012394:	6023      	str	r3, [r4, #0]
 8012396:	f8d8 3000 	ldr.w	r3, [r8]
 801239a:	685a      	ldr	r2, [r3, #4]
 801239c:	bb62      	cbnz	r2, 80123f8 <_malloc_r+0xdc>
 801239e:	f8c8 7000 	str.w	r7, [r8]
 80123a2:	e00f      	b.n	80123c4 <_malloc_r+0xa8>
 80123a4:	6822      	ldr	r2, [r4, #0]
 80123a6:	1b52      	subs	r2, r2, r5
 80123a8:	d420      	bmi.n	80123ec <_malloc_r+0xd0>
 80123aa:	2a0b      	cmp	r2, #11
 80123ac:	d917      	bls.n	80123de <_malloc_r+0xc2>
 80123ae:	1961      	adds	r1, r4, r5
 80123b0:	42a3      	cmp	r3, r4
 80123b2:	6025      	str	r5, [r4, #0]
 80123b4:	bf18      	it	ne
 80123b6:	6059      	strne	r1, [r3, #4]
 80123b8:	6863      	ldr	r3, [r4, #4]
 80123ba:	bf08      	it	eq
 80123bc:	f8c8 1000 	streq.w	r1, [r8]
 80123c0:	5162      	str	r2, [r4, r5]
 80123c2:	604b      	str	r3, [r1, #4]
 80123c4:	4630      	mov	r0, r6
 80123c6:	f000 f82f 	bl	8012428 <__malloc_unlock>
 80123ca:	f104 000b 	add.w	r0, r4, #11
 80123ce:	1d23      	adds	r3, r4, #4
 80123d0:	f020 0007 	bic.w	r0, r0, #7
 80123d4:	1ac2      	subs	r2, r0, r3
 80123d6:	bf1c      	itt	ne
 80123d8:	1a1b      	subne	r3, r3, r0
 80123da:	50a3      	strne	r3, [r4, r2]
 80123dc:	e7af      	b.n	801233e <_malloc_r+0x22>
 80123de:	6862      	ldr	r2, [r4, #4]
 80123e0:	42a3      	cmp	r3, r4
 80123e2:	bf0c      	ite	eq
 80123e4:	f8c8 2000 	streq.w	r2, [r8]
 80123e8:	605a      	strne	r2, [r3, #4]
 80123ea:	e7eb      	b.n	80123c4 <_malloc_r+0xa8>
 80123ec:	4623      	mov	r3, r4
 80123ee:	6864      	ldr	r4, [r4, #4]
 80123f0:	e7ae      	b.n	8012350 <_malloc_r+0x34>
 80123f2:	463c      	mov	r4, r7
 80123f4:	687f      	ldr	r7, [r7, #4]
 80123f6:	e7b6      	b.n	8012366 <_malloc_r+0x4a>
 80123f8:	461a      	mov	r2, r3
 80123fa:	685b      	ldr	r3, [r3, #4]
 80123fc:	42a3      	cmp	r3, r4
 80123fe:	d1fb      	bne.n	80123f8 <_malloc_r+0xdc>
 8012400:	2300      	movs	r3, #0
 8012402:	6053      	str	r3, [r2, #4]
 8012404:	e7de      	b.n	80123c4 <_malloc_r+0xa8>
 8012406:	230c      	movs	r3, #12
 8012408:	4630      	mov	r0, r6
 801240a:	6033      	str	r3, [r6, #0]
 801240c:	f000 f80c 	bl	8012428 <__malloc_unlock>
 8012410:	e794      	b.n	801233c <_malloc_r+0x20>
 8012412:	6005      	str	r5, [r0, #0]
 8012414:	e7d6      	b.n	80123c4 <_malloc_r+0xa8>
 8012416:	bf00      	nop
 8012418:	200007bc 	.word	0x200007bc

0801241c <__malloc_lock>:
 801241c:	4801      	ldr	r0, [pc, #4]	@ (8012424 <__malloc_lock+0x8>)
 801241e:	f7ff bf10 	b.w	8012242 <__retarget_lock_acquire_recursive>
 8012422:	bf00      	nop
 8012424:	200007b4 	.word	0x200007b4

08012428 <__malloc_unlock>:
 8012428:	4801      	ldr	r0, [pc, #4]	@ (8012430 <__malloc_unlock+0x8>)
 801242a:	f7ff bf0b 	b.w	8012244 <__retarget_lock_release_recursive>
 801242e:	bf00      	nop
 8012430:	200007b4 	.word	0x200007b4

08012434 <__ssputs_r>:
 8012434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012438:	461f      	mov	r7, r3
 801243a:	688e      	ldr	r6, [r1, #8]
 801243c:	4682      	mov	sl, r0
 801243e:	42be      	cmp	r6, r7
 8012440:	460c      	mov	r4, r1
 8012442:	4690      	mov	r8, r2
 8012444:	680b      	ldr	r3, [r1, #0]
 8012446:	d82d      	bhi.n	80124a4 <__ssputs_r+0x70>
 8012448:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801244c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012450:	d026      	beq.n	80124a0 <__ssputs_r+0x6c>
 8012452:	6965      	ldr	r5, [r4, #20]
 8012454:	6909      	ldr	r1, [r1, #16]
 8012456:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801245a:	eba3 0901 	sub.w	r9, r3, r1
 801245e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012462:	1c7b      	adds	r3, r7, #1
 8012464:	444b      	add	r3, r9
 8012466:	106d      	asrs	r5, r5, #1
 8012468:	429d      	cmp	r5, r3
 801246a:	bf38      	it	cc
 801246c:	461d      	movcc	r5, r3
 801246e:	0553      	lsls	r3, r2, #21
 8012470:	d527      	bpl.n	80124c2 <__ssputs_r+0x8e>
 8012472:	4629      	mov	r1, r5
 8012474:	f7ff ff52 	bl	801231c <_malloc_r>
 8012478:	4606      	mov	r6, r0
 801247a:	b360      	cbz	r0, 80124d6 <__ssputs_r+0xa2>
 801247c:	464a      	mov	r2, r9
 801247e:	6921      	ldr	r1, [r4, #16]
 8012480:	f000 fd66 	bl	8012f50 <memcpy>
 8012484:	89a3      	ldrh	r3, [r4, #12]
 8012486:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801248a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801248e:	81a3      	strh	r3, [r4, #12]
 8012490:	6126      	str	r6, [r4, #16]
 8012492:	444e      	add	r6, r9
 8012494:	6026      	str	r6, [r4, #0]
 8012496:	463e      	mov	r6, r7
 8012498:	6165      	str	r5, [r4, #20]
 801249a:	eba5 0509 	sub.w	r5, r5, r9
 801249e:	60a5      	str	r5, [r4, #8]
 80124a0:	42be      	cmp	r6, r7
 80124a2:	d900      	bls.n	80124a6 <__ssputs_r+0x72>
 80124a4:	463e      	mov	r6, r7
 80124a6:	4632      	mov	r2, r6
 80124a8:	4641      	mov	r1, r8
 80124aa:	6820      	ldr	r0, [r4, #0]
 80124ac:	f000 fcf5 	bl	8012e9a <memmove>
 80124b0:	2000      	movs	r0, #0
 80124b2:	68a3      	ldr	r3, [r4, #8]
 80124b4:	1b9b      	subs	r3, r3, r6
 80124b6:	60a3      	str	r3, [r4, #8]
 80124b8:	6823      	ldr	r3, [r4, #0]
 80124ba:	4433      	add	r3, r6
 80124bc:	6023      	str	r3, [r4, #0]
 80124be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124c2:	462a      	mov	r2, r5
 80124c4:	f000 fd52 	bl	8012f6c <_realloc_r>
 80124c8:	4606      	mov	r6, r0
 80124ca:	2800      	cmp	r0, #0
 80124cc:	d1e0      	bne.n	8012490 <__ssputs_r+0x5c>
 80124ce:	4650      	mov	r0, sl
 80124d0:	6921      	ldr	r1, [r4, #16]
 80124d2:	f7ff feb9 	bl	8012248 <_free_r>
 80124d6:	230c      	movs	r3, #12
 80124d8:	f8ca 3000 	str.w	r3, [sl]
 80124dc:	89a3      	ldrh	r3, [r4, #12]
 80124de:	f04f 30ff 	mov.w	r0, #4294967295
 80124e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124e6:	81a3      	strh	r3, [r4, #12]
 80124e8:	e7e9      	b.n	80124be <__ssputs_r+0x8a>
	...

080124ec <_svfiprintf_r>:
 80124ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f0:	4698      	mov	r8, r3
 80124f2:	898b      	ldrh	r3, [r1, #12]
 80124f4:	4607      	mov	r7, r0
 80124f6:	061b      	lsls	r3, r3, #24
 80124f8:	460d      	mov	r5, r1
 80124fa:	4614      	mov	r4, r2
 80124fc:	b09d      	sub	sp, #116	@ 0x74
 80124fe:	d510      	bpl.n	8012522 <_svfiprintf_r+0x36>
 8012500:	690b      	ldr	r3, [r1, #16]
 8012502:	b973      	cbnz	r3, 8012522 <_svfiprintf_r+0x36>
 8012504:	2140      	movs	r1, #64	@ 0x40
 8012506:	f7ff ff09 	bl	801231c <_malloc_r>
 801250a:	6028      	str	r0, [r5, #0]
 801250c:	6128      	str	r0, [r5, #16]
 801250e:	b930      	cbnz	r0, 801251e <_svfiprintf_r+0x32>
 8012510:	230c      	movs	r3, #12
 8012512:	603b      	str	r3, [r7, #0]
 8012514:	f04f 30ff 	mov.w	r0, #4294967295
 8012518:	b01d      	add	sp, #116	@ 0x74
 801251a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801251e:	2340      	movs	r3, #64	@ 0x40
 8012520:	616b      	str	r3, [r5, #20]
 8012522:	2300      	movs	r3, #0
 8012524:	9309      	str	r3, [sp, #36]	@ 0x24
 8012526:	2320      	movs	r3, #32
 8012528:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801252c:	2330      	movs	r3, #48	@ 0x30
 801252e:	f04f 0901 	mov.w	r9, #1
 8012532:	f8cd 800c 	str.w	r8, [sp, #12]
 8012536:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80126d0 <_svfiprintf_r+0x1e4>
 801253a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801253e:	4623      	mov	r3, r4
 8012540:	469a      	mov	sl, r3
 8012542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012546:	b10a      	cbz	r2, 801254c <_svfiprintf_r+0x60>
 8012548:	2a25      	cmp	r2, #37	@ 0x25
 801254a:	d1f9      	bne.n	8012540 <_svfiprintf_r+0x54>
 801254c:	ebba 0b04 	subs.w	fp, sl, r4
 8012550:	d00b      	beq.n	801256a <_svfiprintf_r+0x7e>
 8012552:	465b      	mov	r3, fp
 8012554:	4622      	mov	r2, r4
 8012556:	4629      	mov	r1, r5
 8012558:	4638      	mov	r0, r7
 801255a:	f7ff ff6b 	bl	8012434 <__ssputs_r>
 801255e:	3001      	adds	r0, #1
 8012560:	f000 80a7 	beq.w	80126b2 <_svfiprintf_r+0x1c6>
 8012564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012566:	445a      	add	r2, fp
 8012568:	9209      	str	r2, [sp, #36]	@ 0x24
 801256a:	f89a 3000 	ldrb.w	r3, [sl]
 801256e:	2b00      	cmp	r3, #0
 8012570:	f000 809f 	beq.w	80126b2 <_svfiprintf_r+0x1c6>
 8012574:	2300      	movs	r3, #0
 8012576:	f04f 32ff 	mov.w	r2, #4294967295
 801257a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801257e:	f10a 0a01 	add.w	sl, sl, #1
 8012582:	9304      	str	r3, [sp, #16]
 8012584:	9307      	str	r3, [sp, #28]
 8012586:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801258a:	931a      	str	r3, [sp, #104]	@ 0x68
 801258c:	4654      	mov	r4, sl
 801258e:	2205      	movs	r2, #5
 8012590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012594:	484e      	ldr	r0, [pc, #312]	@ (80126d0 <_svfiprintf_r+0x1e4>)
 8012596:	f000 fccd 	bl	8012f34 <memchr>
 801259a:	9a04      	ldr	r2, [sp, #16]
 801259c:	b9d8      	cbnz	r0, 80125d6 <_svfiprintf_r+0xea>
 801259e:	06d0      	lsls	r0, r2, #27
 80125a0:	bf44      	itt	mi
 80125a2:	2320      	movmi	r3, #32
 80125a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125a8:	0711      	lsls	r1, r2, #28
 80125aa:	bf44      	itt	mi
 80125ac:	232b      	movmi	r3, #43	@ 0x2b
 80125ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125b2:	f89a 3000 	ldrb.w	r3, [sl]
 80125b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80125b8:	d015      	beq.n	80125e6 <_svfiprintf_r+0xfa>
 80125ba:	4654      	mov	r4, sl
 80125bc:	2000      	movs	r0, #0
 80125be:	f04f 0c0a 	mov.w	ip, #10
 80125c2:	9a07      	ldr	r2, [sp, #28]
 80125c4:	4621      	mov	r1, r4
 80125c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125ca:	3b30      	subs	r3, #48	@ 0x30
 80125cc:	2b09      	cmp	r3, #9
 80125ce:	d94b      	bls.n	8012668 <_svfiprintf_r+0x17c>
 80125d0:	b1b0      	cbz	r0, 8012600 <_svfiprintf_r+0x114>
 80125d2:	9207      	str	r2, [sp, #28]
 80125d4:	e014      	b.n	8012600 <_svfiprintf_r+0x114>
 80125d6:	eba0 0308 	sub.w	r3, r0, r8
 80125da:	fa09 f303 	lsl.w	r3, r9, r3
 80125de:	4313      	orrs	r3, r2
 80125e0:	46a2      	mov	sl, r4
 80125e2:	9304      	str	r3, [sp, #16]
 80125e4:	e7d2      	b.n	801258c <_svfiprintf_r+0xa0>
 80125e6:	9b03      	ldr	r3, [sp, #12]
 80125e8:	1d19      	adds	r1, r3, #4
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	9103      	str	r1, [sp, #12]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	bfbb      	ittet	lt
 80125f2:	425b      	neglt	r3, r3
 80125f4:	f042 0202 	orrlt.w	r2, r2, #2
 80125f8:	9307      	strge	r3, [sp, #28]
 80125fa:	9307      	strlt	r3, [sp, #28]
 80125fc:	bfb8      	it	lt
 80125fe:	9204      	strlt	r2, [sp, #16]
 8012600:	7823      	ldrb	r3, [r4, #0]
 8012602:	2b2e      	cmp	r3, #46	@ 0x2e
 8012604:	d10a      	bne.n	801261c <_svfiprintf_r+0x130>
 8012606:	7863      	ldrb	r3, [r4, #1]
 8012608:	2b2a      	cmp	r3, #42	@ 0x2a
 801260a:	d132      	bne.n	8012672 <_svfiprintf_r+0x186>
 801260c:	9b03      	ldr	r3, [sp, #12]
 801260e:	3402      	adds	r4, #2
 8012610:	1d1a      	adds	r2, r3, #4
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	9203      	str	r2, [sp, #12]
 8012616:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801261a:	9305      	str	r3, [sp, #20]
 801261c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80126d4 <_svfiprintf_r+0x1e8>
 8012620:	2203      	movs	r2, #3
 8012622:	4650      	mov	r0, sl
 8012624:	7821      	ldrb	r1, [r4, #0]
 8012626:	f000 fc85 	bl	8012f34 <memchr>
 801262a:	b138      	cbz	r0, 801263c <_svfiprintf_r+0x150>
 801262c:	2240      	movs	r2, #64	@ 0x40
 801262e:	9b04      	ldr	r3, [sp, #16]
 8012630:	eba0 000a 	sub.w	r0, r0, sl
 8012634:	4082      	lsls	r2, r0
 8012636:	4313      	orrs	r3, r2
 8012638:	3401      	adds	r4, #1
 801263a:	9304      	str	r3, [sp, #16]
 801263c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012640:	2206      	movs	r2, #6
 8012642:	4825      	ldr	r0, [pc, #148]	@ (80126d8 <_svfiprintf_r+0x1ec>)
 8012644:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012648:	f000 fc74 	bl	8012f34 <memchr>
 801264c:	2800      	cmp	r0, #0
 801264e:	d036      	beq.n	80126be <_svfiprintf_r+0x1d2>
 8012650:	4b22      	ldr	r3, [pc, #136]	@ (80126dc <_svfiprintf_r+0x1f0>)
 8012652:	bb1b      	cbnz	r3, 801269c <_svfiprintf_r+0x1b0>
 8012654:	9b03      	ldr	r3, [sp, #12]
 8012656:	3307      	adds	r3, #7
 8012658:	f023 0307 	bic.w	r3, r3, #7
 801265c:	3308      	adds	r3, #8
 801265e:	9303      	str	r3, [sp, #12]
 8012660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012662:	4433      	add	r3, r6
 8012664:	9309      	str	r3, [sp, #36]	@ 0x24
 8012666:	e76a      	b.n	801253e <_svfiprintf_r+0x52>
 8012668:	460c      	mov	r4, r1
 801266a:	2001      	movs	r0, #1
 801266c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012670:	e7a8      	b.n	80125c4 <_svfiprintf_r+0xd8>
 8012672:	2300      	movs	r3, #0
 8012674:	f04f 0c0a 	mov.w	ip, #10
 8012678:	4619      	mov	r1, r3
 801267a:	3401      	adds	r4, #1
 801267c:	9305      	str	r3, [sp, #20]
 801267e:	4620      	mov	r0, r4
 8012680:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012684:	3a30      	subs	r2, #48	@ 0x30
 8012686:	2a09      	cmp	r2, #9
 8012688:	d903      	bls.n	8012692 <_svfiprintf_r+0x1a6>
 801268a:	2b00      	cmp	r3, #0
 801268c:	d0c6      	beq.n	801261c <_svfiprintf_r+0x130>
 801268e:	9105      	str	r1, [sp, #20]
 8012690:	e7c4      	b.n	801261c <_svfiprintf_r+0x130>
 8012692:	4604      	mov	r4, r0
 8012694:	2301      	movs	r3, #1
 8012696:	fb0c 2101 	mla	r1, ip, r1, r2
 801269a:	e7f0      	b.n	801267e <_svfiprintf_r+0x192>
 801269c:	ab03      	add	r3, sp, #12
 801269e:	9300      	str	r3, [sp, #0]
 80126a0:	462a      	mov	r2, r5
 80126a2:	4638      	mov	r0, r7
 80126a4:	4b0e      	ldr	r3, [pc, #56]	@ (80126e0 <_svfiprintf_r+0x1f4>)
 80126a6:	a904      	add	r1, sp, #16
 80126a8:	f3af 8000 	nop.w
 80126ac:	1c42      	adds	r2, r0, #1
 80126ae:	4606      	mov	r6, r0
 80126b0:	d1d6      	bne.n	8012660 <_svfiprintf_r+0x174>
 80126b2:	89ab      	ldrh	r3, [r5, #12]
 80126b4:	065b      	lsls	r3, r3, #25
 80126b6:	f53f af2d 	bmi.w	8012514 <_svfiprintf_r+0x28>
 80126ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126bc:	e72c      	b.n	8012518 <_svfiprintf_r+0x2c>
 80126be:	ab03      	add	r3, sp, #12
 80126c0:	9300      	str	r3, [sp, #0]
 80126c2:	462a      	mov	r2, r5
 80126c4:	4638      	mov	r0, r7
 80126c6:	4b06      	ldr	r3, [pc, #24]	@ (80126e0 <_svfiprintf_r+0x1f4>)
 80126c8:	a904      	add	r1, sp, #16
 80126ca:	f000 f9bd 	bl	8012a48 <_printf_i>
 80126ce:	e7ed      	b.n	80126ac <_svfiprintf_r+0x1c0>
 80126d0:	08014004 	.word	0x08014004
 80126d4:	0801400a 	.word	0x0801400a
 80126d8:	0801400e 	.word	0x0801400e
 80126dc:	00000000 	.word	0x00000000
 80126e0:	08012435 	.word	0x08012435

080126e4 <__sfputc_r>:
 80126e4:	6893      	ldr	r3, [r2, #8]
 80126e6:	b410      	push	{r4}
 80126e8:	3b01      	subs	r3, #1
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	6093      	str	r3, [r2, #8]
 80126ee:	da07      	bge.n	8012700 <__sfputc_r+0x1c>
 80126f0:	6994      	ldr	r4, [r2, #24]
 80126f2:	42a3      	cmp	r3, r4
 80126f4:	db01      	blt.n	80126fa <__sfputc_r+0x16>
 80126f6:	290a      	cmp	r1, #10
 80126f8:	d102      	bne.n	8012700 <__sfputc_r+0x1c>
 80126fa:	bc10      	pop	{r4}
 80126fc:	f7ff bc93 	b.w	8012026 <__swbuf_r>
 8012700:	6813      	ldr	r3, [r2, #0]
 8012702:	1c58      	adds	r0, r3, #1
 8012704:	6010      	str	r0, [r2, #0]
 8012706:	7019      	strb	r1, [r3, #0]
 8012708:	4608      	mov	r0, r1
 801270a:	bc10      	pop	{r4}
 801270c:	4770      	bx	lr

0801270e <__sfputs_r>:
 801270e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012710:	4606      	mov	r6, r0
 8012712:	460f      	mov	r7, r1
 8012714:	4614      	mov	r4, r2
 8012716:	18d5      	adds	r5, r2, r3
 8012718:	42ac      	cmp	r4, r5
 801271a:	d101      	bne.n	8012720 <__sfputs_r+0x12>
 801271c:	2000      	movs	r0, #0
 801271e:	e007      	b.n	8012730 <__sfputs_r+0x22>
 8012720:	463a      	mov	r2, r7
 8012722:	4630      	mov	r0, r6
 8012724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012728:	f7ff ffdc 	bl	80126e4 <__sfputc_r>
 801272c:	1c43      	adds	r3, r0, #1
 801272e:	d1f3      	bne.n	8012718 <__sfputs_r+0xa>
 8012730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012734 <_vfiprintf_r>:
 8012734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012738:	460d      	mov	r5, r1
 801273a:	4614      	mov	r4, r2
 801273c:	4698      	mov	r8, r3
 801273e:	4606      	mov	r6, r0
 8012740:	b09d      	sub	sp, #116	@ 0x74
 8012742:	b118      	cbz	r0, 801274c <_vfiprintf_r+0x18>
 8012744:	6a03      	ldr	r3, [r0, #32]
 8012746:	b90b      	cbnz	r3, 801274c <_vfiprintf_r+0x18>
 8012748:	f7ff fb64 	bl	8011e14 <__sinit>
 801274c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801274e:	07d9      	lsls	r1, r3, #31
 8012750:	d405      	bmi.n	801275e <_vfiprintf_r+0x2a>
 8012752:	89ab      	ldrh	r3, [r5, #12]
 8012754:	059a      	lsls	r2, r3, #22
 8012756:	d402      	bmi.n	801275e <_vfiprintf_r+0x2a>
 8012758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801275a:	f7ff fd72 	bl	8012242 <__retarget_lock_acquire_recursive>
 801275e:	89ab      	ldrh	r3, [r5, #12]
 8012760:	071b      	lsls	r3, r3, #28
 8012762:	d501      	bpl.n	8012768 <_vfiprintf_r+0x34>
 8012764:	692b      	ldr	r3, [r5, #16]
 8012766:	b99b      	cbnz	r3, 8012790 <_vfiprintf_r+0x5c>
 8012768:	4629      	mov	r1, r5
 801276a:	4630      	mov	r0, r6
 801276c:	f7ff fc9a 	bl	80120a4 <__swsetup_r>
 8012770:	b170      	cbz	r0, 8012790 <_vfiprintf_r+0x5c>
 8012772:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012774:	07dc      	lsls	r4, r3, #31
 8012776:	d504      	bpl.n	8012782 <_vfiprintf_r+0x4e>
 8012778:	f04f 30ff 	mov.w	r0, #4294967295
 801277c:	b01d      	add	sp, #116	@ 0x74
 801277e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012782:	89ab      	ldrh	r3, [r5, #12]
 8012784:	0598      	lsls	r0, r3, #22
 8012786:	d4f7      	bmi.n	8012778 <_vfiprintf_r+0x44>
 8012788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801278a:	f7ff fd5b 	bl	8012244 <__retarget_lock_release_recursive>
 801278e:	e7f3      	b.n	8012778 <_vfiprintf_r+0x44>
 8012790:	2300      	movs	r3, #0
 8012792:	9309      	str	r3, [sp, #36]	@ 0x24
 8012794:	2320      	movs	r3, #32
 8012796:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801279a:	2330      	movs	r3, #48	@ 0x30
 801279c:	f04f 0901 	mov.w	r9, #1
 80127a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80127a4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8012950 <_vfiprintf_r+0x21c>
 80127a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80127ac:	4623      	mov	r3, r4
 80127ae:	469a      	mov	sl, r3
 80127b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127b4:	b10a      	cbz	r2, 80127ba <_vfiprintf_r+0x86>
 80127b6:	2a25      	cmp	r2, #37	@ 0x25
 80127b8:	d1f9      	bne.n	80127ae <_vfiprintf_r+0x7a>
 80127ba:	ebba 0b04 	subs.w	fp, sl, r4
 80127be:	d00b      	beq.n	80127d8 <_vfiprintf_r+0xa4>
 80127c0:	465b      	mov	r3, fp
 80127c2:	4622      	mov	r2, r4
 80127c4:	4629      	mov	r1, r5
 80127c6:	4630      	mov	r0, r6
 80127c8:	f7ff ffa1 	bl	801270e <__sfputs_r>
 80127cc:	3001      	adds	r0, #1
 80127ce:	f000 80a7 	beq.w	8012920 <_vfiprintf_r+0x1ec>
 80127d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127d4:	445a      	add	r2, fp
 80127d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80127d8:	f89a 3000 	ldrb.w	r3, [sl]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	f000 809f 	beq.w	8012920 <_vfiprintf_r+0x1ec>
 80127e2:	2300      	movs	r3, #0
 80127e4:	f04f 32ff 	mov.w	r2, #4294967295
 80127e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127ec:	f10a 0a01 	add.w	sl, sl, #1
 80127f0:	9304      	str	r3, [sp, #16]
 80127f2:	9307      	str	r3, [sp, #28]
 80127f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80127f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80127fa:	4654      	mov	r4, sl
 80127fc:	2205      	movs	r2, #5
 80127fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012802:	4853      	ldr	r0, [pc, #332]	@ (8012950 <_vfiprintf_r+0x21c>)
 8012804:	f000 fb96 	bl	8012f34 <memchr>
 8012808:	9a04      	ldr	r2, [sp, #16]
 801280a:	b9d8      	cbnz	r0, 8012844 <_vfiprintf_r+0x110>
 801280c:	06d1      	lsls	r1, r2, #27
 801280e:	bf44      	itt	mi
 8012810:	2320      	movmi	r3, #32
 8012812:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012816:	0713      	lsls	r3, r2, #28
 8012818:	bf44      	itt	mi
 801281a:	232b      	movmi	r3, #43	@ 0x2b
 801281c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012820:	f89a 3000 	ldrb.w	r3, [sl]
 8012824:	2b2a      	cmp	r3, #42	@ 0x2a
 8012826:	d015      	beq.n	8012854 <_vfiprintf_r+0x120>
 8012828:	4654      	mov	r4, sl
 801282a:	2000      	movs	r0, #0
 801282c:	f04f 0c0a 	mov.w	ip, #10
 8012830:	9a07      	ldr	r2, [sp, #28]
 8012832:	4621      	mov	r1, r4
 8012834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012838:	3b30      	subs	r3, #48	@ 0x30
 801283a:	2b09      	cmp	r3, #9
 801283c:	d94b      	bls.n	80128d6 <_vfiprintf_r+0x1a2>
 801283e:	b1b0      	cbz	r0, 801286e <_vfiprintf_r+0x13a>
 8012840:	9207      	str	r2, [sp, #28]
 8012842:	e014      	b.n	801286e <_vfiprintf_r+0x13a>
 8012844:	eba0 0308 	sub.w	r3, r0, r8
 8012848:	fa09 f303 	lsl.w	r3, r9, r3
 801284c:	4313      	orrs	r3, r2
 801284e:	46a2      	mov	sl, r4
 8012850:	9304      	str	r3, [sp, #16]
 8012852:	e7d2      	b.n	80127fa <_vfiprintf_r+0xc6>
 8012854:	9b03      	ldr	r3, [sp, #12]
 8012856:	1d19      	adds	r1, r3, #4
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	9103      	str	r1, [sp, #12]
 801285c:	2b00      	cmp	r3, #0
 801285e:	bfbb      	ittet	lt
 8012860:	425b      	neglt	r3, r3
 8012862:	f042 0202 	orrlt.w	r2, r2, #2
 8012866:	9307      	strge	r3, [sp, #28]
 8012868:	9307      	strlt	r3, [sp, #28]
 801286a:	bfb8      	it	lt
 801286c:	9204      	strlt	r2, [sp, #16]
 801286e:	7823      	ldrb	r3, [r4, #0]
 8012870:	2b2e      	cmp	r3, #46	@ 0x2e
 8012872:	d10a      	bne.n	801288a <_vfiprintf_r+0x156>
 8012874:	7863      	ldrb	r3, [r4, #1]
 8012876:	2b2a      	cmp	r3, #42	@ 0x2a
 8012878:	d132      	bne.n	80128e0 <_vfiprintf_r+0x1ac>
 801287a:	9b03      	ldr	r3, [sp, #12]
 801287c:	3402      	adds	r4, #2
 801287e:	1d1a      	adds	r2, r3, #4
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	9203      	str	r2, [sp, #12]
 8012884:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012888:	9305      	str	r3, [sp, #20]
 801288a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8012954 <_vfiprintf_r+0x220>
 801288e:	2203      	movs	r2, #3
 8012890:	4650      	mov	r0, sl
 8012892:	7821      	ldrb	r1, [r4, #0]
 8012894:	f000 fb4e 	bl	8012f34 <memchr>
 8012898:	b138      	cbz	r0, 80128aa <_vfiprintf_r+0x176>
 801289a:	2240      	movs	r2, #64	@ 0x40
 801289c:	9b04      	ldr	r3, [sp, #16]
 801289e:	eba0 000a 	sub.w	r0, r0, sl
 80128a2:	4082      	lsls	r2, r0
 80128a4:	4313      	orrs	r3, r2
 80128a6:	3401      	adds	r4, #1
 80128a8:	9304      	str	r3, [sp, #16]
 80128aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128ae:	2206      	movs	r2, #6
 80128b0:	4829      	ldr	r0, [pc, #164]	@ (8012958 <_vfiprintf_r+0x224>)
 80128b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80128b6:	f000 fb3d 	bl	8012f34 <memchr>
 80128ba:	2800      	cmp	r0, #0
 80128bc:	d03f      	beq.n	801293e <_vfiprintf_r+0x20a>
 80128be:	4b27      	ldr	r3, [pc, #156]	@ (801295c <_vfiprintf_r+0x228>)
 80128c0:	bb1b      	cbnz	r3, 801290a <_vfiprintf_r+0x1d6>
 80128c2:	9b03      	ldr	r3, [sp, #12]
 80128c4:	3307      	adds	r3, #7
 80128c6:	f023 0307 	bic.w	r3, r3, #7
 80128ca:	3308      	adds	r3, #8
 80128cc:	9303      	str	r3, [sp, #12]
 80128ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128d0:	443b      	add	r3, r7
 80128d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80128d4:	e76a      	b.n	80127ac <_vfiprintf_r+0x78>
 80128d6:	460c      	mov	r4, r1
 80128d8:	2001      	movs	r0, #1
 80128da:	fb0c 3202 	mla	r2, ip, r2, r3
 80128de:	e7a8      	b.n	8012832 <_vfiprintf_r+0xfe>
 80128e0:	2300      	movs	r3, #0
 80128e2:	f04f 0c0a 	mov.w	ip, #10
 80128e6:	4619      	mov	r1, r3
 80128e8:	3401      	adds	r4, #1
 80128ea:	9305      	str	r3, [sp, #20]
 80128ec:	4620      	mov	r0, r4
 80128ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128f2:	3a30      	subs	r2, #48	@ 0x30
 80128f4:	2a09      	cmp	r2, #9
 80128f6:	d903      	bls.n	8012900 <_vfiprintf_r+0x1cc>
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d0c6      	beq.n	801288a <_vfiprintf_r+0x156>
 80128fc:	9105      	str	r1, [sp, #20]
 80128fe:	e7c4      	b.n	801288a <_vfiprintf_r+0x156>
 8012900:	4604      	mov	r4, r0
 8012902:	2301      	movs	r3, #1
 8012904:	fb0c 2101 	mla	r1, ip, r1, r2
 8012908:	e7f0      	b.n	80128ec <_vfiprintf_r+0x1b8>
 801290a:	ab03      	add	r3, sp, #12
 801290c:	9300      	str	r3, [sp, #0]
 801290e:	462a      	mov	r2, r5
 8012910:	4630      	mov	r0, r6
 8012912:	4b13      	ldr	r3, [pc, #76]	@ (8012960 <_vfiprintf_r+0x22c>)
 8012914:	a904      	add	r1, sp, #16
 8012916:	f3af 8000 	nop.w
 801291a:	4607      	mov	r7, r0
 801291c:	1c78      	adds	r0, r7, #1
 801291e:	d1d6      	bne.n	80128ce <_vfiprintf_r+0x19a>
 8012920:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012922:	07d9      	lsls	r1, r3, #31
 8012924:	d405      	bmi.n	8012932 <_vfiprintf_r+0x1fe>
 8012926:	89ab      	ldrh	r3, [r5, #12]
 8012928:	059a      	lsls	r2, r3, #22
 801292a:	d402      	bmi.n	8012932 <_vfiprintf_r+0x1fe>
 801292c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801292e:	f7ff fc89 	bl	8012244 <__retarget_lock_release_recursive>
 8012932:	89ab      	ldrh	r3, [r5, #12]
 8012934:	065b      	lsls	r3, r3, #25
 8012936:	f53f af1f 	bmi.w	8012778 <_vfiprintf_r+0x44>
 801293a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801293c:	e71e      	b.n	801277c <_vfiprintf_r+0x48>
 801293e:	ab03      	add	r3, sp, #12
 8012940:	9300      	str	r3, [sp, #0]
 8012942:	462a      	mov	r2, r5
 8012944:	4630      	mov	r0, r6
 8012946:	4b06      	ldr	r3, [pc, #24]	@ (8012960 <_vfiprintf_r+0x22c>)
 8012948:	a904      	add	r1, sp, #16
 801294a:	f000 f87d 	bl	8012a48 <_printf_i>
 801294e:	e7e4      	b.n	801291a <_vfiprintf_r+0x1e6>
 8012950:	08014004 	.word	0x08014004
 8012954:	0801400a 	.word	0x0801400a
 8012958:	0801400e 	.word	0x0801400e
 801295c:	00000000 	.word	0x00000000
 8012960:	0801270f 	.word	0x0801270f

08012964 <_printf_common>:
 8012964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012968:	4616      	mov	r6, r2
 801296a:	4698      	mov	r8, r3
 801296c:	688a      	ldr	r2, [r1, #8]
 801296e:	690b      	ldr	r3, [r1, #16]
 8012970:	4607      	mov	r7, r0
 8012972:	4293      	cmp	r3, r2
 8012974:	bfb8      	it	lt
 8012976:	4613      	movlt	r3, r2
 8012978:	6033      	str	r3, [r6, #0]
 801297a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801297e:	460c      	mov	r4, r1
 8012980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012984:	b10a      	cbz	r2, 801298a <_printf_common+0x26>
 8012986:	3301      	adds	r3, #1
 8012988:	6033      	str	r3, [r6, #0]
 801298a:	6823      	ldr	r3, [r4, #0]
 801298c:	0699      	lsls	r1, r3, #26
 801298e:	bf42      	ittt	mi
 8012990:	6833      	ldrmi	r3, [r6, #0]
 8012992:	3302      	addmi	r3, #2
 8012994:	6033      	strmi	r3, [r6, #0]
 8012996:	6825      	ldr	r5, [r4, #0]
 8012998:	f015 0506 	ands.w	r5, r5, #6
 801299c:	d106      	bne.n	80129ac <_printf_common+0x48>
 801299e:	f104 0a19 	add.w	sl, r4, #25
 80129a2:	68e3      	ldr	r3, [r4, #12]
 80129a4:	6832      	ldr	r2, [r6, #0]
 80129a6:	1a9b      	subs	r3, r3, r2
 80129a8:	42ab      	cmp	r3, r5
 80129aa:	dc2b      	bgt.n	8012a04 <_printf_common+0xa0>
 80129ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80129b0:	6822      	ldr	r2, [r4, #0]
 80129b2:	3b00      	subs	r3, #0
 80129b4:	bf18      	it	ne
 80129b6:	2301      	movne	r3, #1
 80129b8:	0692      	lsls	r2, r2, #26
 80129ba:	d430      	bmi.n	8012a1e <_printf_common+0xba>
 80129bc:	4641      	mov	r1, r8
 80129be:	4638      	mov	r0, r7
 80129c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80129c4:	47c8      	blx	r9
 80129c6:	3001      	adds	r0, #1
 80129c8:	d023      	beq.n	8012a12 <_printf_common+0xae>
 80129ca:	6823      	ldr	r3, [r4, #0]
 80129cc:	6922      	ldr	r2, [r4, #16]
 80129ce:	f003 0306 	and.w	r3, r3, #6
 80129d2:	2b04      	cmp	r3, #4
 80129d4:	bf14      	ite	ne
 80129d6:	2500      	movne	r5, #0
 80129d8:	6833      	ldreq	r3, [r6, #0]
 80129da:	f04f 0600 	mov.w	r6, #0
 80129de:	bf08      	it	eq
 80129e0:	68e5      	ldreq	r5, [r4, #12]
 80129e2:	f104 041a 	add.w	r4, r4, #26
 80129e6:	bf08      	it	eq
 80129e8:	1aed      	subeq	r5, r5, r3
 80129ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80129ee:	bf08      	it	eq
 80129f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129f4:	4293      	cmp	r3, r2
 80129f6:	bfc4      	itt	gt
 80129f8:	1a9b      	subgt	r3, r3, r2
 80129fa:	18ed      	addgt	r5, r5, r3
 80129fc:	42b5      	cmp	r5, r6
 80129fe:	d11a      	bne.n	8012a36 <_printf_common+0xd2>
 8012a00:	2000      	movs	r0, #0
 8012a02:	e008      	b.n	8012a16 <_printf_common+0xb2>
 8012a04:	2301      	movs	r3, #1
 8012a06:	4652      	mov	r2, sl
 8012a08:	4641      	mov	r1, r8
 8012a0a:	4638      	mov	r0, r7
 8012a0c:	47c8      	blx	r9
 8012a0e:	3001      	adds	r0, #1
 8012a10:	d103      	bne.n	8012a1a <_printf_common+0xb6>
 8012a12:	f04f 30ff 	mov.w	r0, #4294967295
 8012a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a1a:	3501      	adds	r5, #1
 8012a1c:	e7c1      	b.n	80129a2 <_printf_common+0x3e>
 8012a1e:	2030      	movs	r0, #48	@ 0x30
 8012a20:	18e1      	adds	r1, r4, r3
 8012a22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012a26:	1c5a      	adds	r2, r3, #1
 8012a28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012a2c:	4422      	add	r2, r4
 8012a2e:	3302      	adds	r3, #2
 8012a30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012a34:	e7c2      	b.n	80129bc <_printf_common+0x58>
 8012a36:	2301      	movs	r3, #1
 8012a38:	4622      	mov	r2, r4
 8012a3a:	4641      	mov	r1, r8
 8012a3c:	4638      	mov	r0, r7
 8012a3e:	47c8      	blx	r9
 8012a40:	3001      	adds	r0, #1
 8012a42:	d0e6      	beq.n	8012a12 <_printf_common+0xae>
 8012a44:	3601      	adds	r6, #1
 8012a46:	e7d9      	b.n	80129fc <_printf_common+0x98>

08012a48 <_printf_i>:
 8012a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a4c:	7e0f      	ldrb	r7, [r1, #24]
 8012a4e:	4691      	mov	r9, r2
 8012a50:	2f78      	cmp	r7, #120	@ 0x78
 8012a52:	4680      	mov	r8, r0
 8012a54:	460c      	mov	r4, r1
 8012a56:	469a      	mov	sl, r3
 8012a58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012a5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012a5e:	d807      	bhi.n	8012a70 <_printf_i+0x28>
 8012a60:	2f62      	cmp	r7, #98	@ 0x62
 8012a62:	d80a      	bhi.n	8012a7a <_printf_i+0x32>
 8012a64:	2f00      	cmp	r7, #0
 8012a66:	f000 80d3 	beq.w	8012c10 <_printf_i+0x1c8>
 8012a6a:	2f58      	cmp	r7, #88	@ 0x58
 8012a6c:	f000 80ba 	beq.w	8012be4 <_printf_i+0x19c>
 8012a70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012a74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012a78:	e03a      	b.n	8012af0 <_printf_i+0xa8>
 8012a7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012a7e:	2b15      	cmp	r3, #21
 8012a80:	d8f6      	bhi.n	8012a70 <_printf_i+0x28>
 8012a82:	a101      	add	r1, pc, #4	@ (adr r1, 8012a88 <_printf_i+0x40>)
 8012a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a88:	08012ae1 	.word	0x08012ae1
 8012a8c:	08012af5 	.word	0x08012af5
 8012a90:	08012a71 	.word	0x08012a71
 8012a94:	08012a71 	.word	0x08012a71
 8012a98:	08012a71 	.word	0x08012a71
 8012a9c:	08012a71 	.word	0x08012a71
 8012aa0:	08012af5 	.word	0x08012af5
 8012aa4:	08012a71 	.word	0x08012a71
 8012aa8:	08012a71 	.word	0x08012a71
 8012aac:	08012a71 	.word	0x08012a71
 8012ab0:	08012a71 	.word	0x08012a71
 8012ab4:	08012bf7 	.word	0x08012bf7
 8012ab8:	08012b1f 	.word	0x08012b1f
 8012abc:	08012bb1 	.word	0x08012bb1
 8012ac0:	08012a71 	.word	0x08012a71
 8012ac4:	08012a71 	.word	0x08012a71
 8012ac8:	08012c19 	.word	0x08012c19
 8012acc:	08012a71 	.word	0x08012a71
 8012ad0:	08012b1f 	.word	0x08012b1f
 8012ad4:	08012a71 	.word	0x08012a71
 8012ad8:	08012a71 	.word	0x08012a71
 8012adc:	08012bb9 	.word	0x08012bb9
 8012ae0:	6833      	ldr	r3, [r6, #0]
 8012ae2:	1d1a      	adds	r2, r3, #4
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	6032      	str	r2, [r6, #0]
 8012ae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012aec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012af0:	2301      	movs	r3, #1
 8012af2:	e09e      	b.n	8012c32 <_printf_i+0x1ea>
 8012af4:	6833      	ldr	r3, [r6, #0]
 8012af6:	6820      	ldr	r0, [r4, #0]
 8012af8:	1d19      	adds	r1, r3, #4
 8012afa:	6031      	str	r1, [r6, #0]
 8012afc:	0606      	lsls	r6, r0, #24
 8012afe:	d501      	bpl.n	8012b04 <_printf_i+0xbc>
 8012b00:	681d      	ldr	r5, [r3, #0]
 8012b02:	e003      	b.n	8012b0c <_printf_i+0xc4>
 8012b04:	0645      	lsls	r5, r0, #25
 8012b06:	d5fb      	bpl.n	8012b00 <_printf_i+0xb8>
 8012b08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012b0c:	2d00      	cmp	r5, #0
 8012b0e:	da03      	bge.n	8012b18 <_printf_i+0xd0>
 8012b10:	232d      	movs	r3, #45	@ 0x2d
 8012b12:	426d      	negs	r5, r5
 8012b14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b18:	230a      	movs	r3, #10
 8012b1a:	4859      	ldr	r0, [pc, #356]	@ (8012c80 <_printf_i+0x238>)
 8012b1c:	e011      	b.n	8012b42 <_printf_i+0xfa>
 8012b1e:	6821      	ldr	r1, [r4, #0]
 8012b20:	6833      	ldr	r3, [r6, #0]
 8012b22:	0608      	lsls	r0, r1, #24
 8012b24:	f853 5b04 	ldr.w	r5, [r3], #4
 8012b28:	d402      	bmi.n	8012b30 <_printf_i+0xe8>
 8012b2a:	0649      	lsls	r1, r1, #25
 8012b2c:	bf48      	it	mi
 8012b2e:	b2ad      	uxthmi	r5, r5
 8012b30:	2f6f      	cmp	r7, #111	@ 0x6f
 8012b32:	6033      	str	r3, [r6, #0]
 8012b34:	bf14      	ite	ne
 8012b36:	230a      	movne	r3, #10
 8012b38:	2308      	moveq	r3, #8
 8012b3a:	4851      	ldr	r0, [pc, #324]	@ (8012c80 <_printf_i+0x238>)
 8012b3c:	2100      	movs	r1, #0
 8012b3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012b42:	6866      	ldr	r6, [r4, #4]
 8012b44:	2e00      	cmp	r6, #0
 8012b46:	bfa8      	it	ge
 8012b48:	6821      	ldrge	r1, [r4, #0]
 8012b4a:	60a6      	str	r6, [r4, #8]
 8012b4c:	bfa4      	itt	ge
 8012b4e:	f021 0104 	bicge.w	r1, r1, #4
 8012b52:	6021      	strge	r1, [r4, #0]
 8012b54:	b90d      	cbnz	r5, 8012b5a <_printf_i+0x112>
 8012b56:	2e00      	cmp	r6, #0
 8012b58:	d04b      	beq.n	8012bf2 <_printf_i+0x1aa>
 8012b5a:	4616      	mov	r6, r2
 8012b5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8012b60:	fb03 5711 	mls	r7, r3, r1, r5
 8012b64:	5dc7      	ldrb	r7, [r0, r7]
 8012b66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012b6a:	462f      	mov	r7, r5
 8012b6c:	42bb      	cmp	r3, r7
 8012b6e:	460d      	mov	r5, r1
 8012b70:	d9f4      	bls.n	8012b5c <_printf_i+0x114>
 8012b72:	2b08      	cmp	r3, #8
 8012b74:	d10b      	bne.n	8012b8e <_printf_i+0x146>
 8012b76:	6823      	ldr	r3, [r4, #0]
 8012b78:	07df      	lsls	r7, r3, #31
 8012b7a:	d508      	bpl.n	8012b8e <_printf_i+0x146>
 8012b7c:	6923      	ldr	r3, [r4, #16]
 8012b7e:	6861      	ldr	r1, [r4, #4]
 8012b80:	4299      	cmp	r1, r3
 8012b82:	bfde      	ittt	le
 8012b84:	2330      	movle	r3, #48	@ 0x30
 8012b86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012b8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012b8e:	1b92      	subs	r2, r2, r6
 8012b90:	6122      	str	r2, [r4, #16]
 8012b92:	464b      	mov	r3, r9
 8012b94:	4621      	mov	r1, r4
 8012b96:	4640      	mov	r0, r8
 8012b98:	f8cd a000 	str.w	sl, [sp]
 8012b9c:	aa03      	add	r2, sp, #12
 8012b9e:	f7ff fee1 	bl	8012964 <_printf_common>
 8012ba2:	3001      	adds	r0, #1
 8012ba4:	d14a      	bne.n	8012c3c <_printf_i+0x1f4>
 8012ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8012baa:	b004      	add	sp, #16
 8012bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bb0:	6823      	ldr	r3, [r4, #0]
 8012bb2:	f043 0320 	orr.w	r3, r3, #32
 8012bb6:	6023      	str	r3, [r4, #0]
 8012bb8:	2778      	movs	r7, #120	@ 0x78
 8012bba:	4832      	ldr	r0, [pc, #200]	@ (8012c84 <_printf_i+0x23c>)
 8012bbc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012bc0:	6823      	ldr	r3, [r4, #0]
 8012bc2:	6831      	ldr	r1, [r6, #0]
 8012bc4:	061f      	lsls	r7, r3, #24
 8012bc6:	f851 5b04 	ldr.w	r5, [r1], #4
 8012bca:	d402      	bmi.n	8012bd2 <_printf_i+0x18a>
 8012bcc:	065f      	lsls	r7, r3, #25
 8012bce:	bf48      	it	mi
 8012bd0:	b2ad      	uxthmi	r5, r5
 8012bd2:	6031      	str	r1, [r6, #0]
 8012bd4:	07d9      	lsls	r1, r3, #31
 8012bd6:	bf44      	itt	mi
 8012bd8:	f043 0320 	orrmi.w	r3, r3, #32
 8012bdc:	6023      	strmi	r3, [r4, #0]
 8012bde:	b11d      	cbz	r5, 8012be8 <_printf_i+0x1a0>
 8012be0:	2310      	movs	r3, #16
 8012be2:	e7ab      	b.n	8012b3c <_printf_i+0xf4>
 8012be4:	4826      	ldr	r0, [pc, #152]	@ (8012c80 <_printf_i+0x238>)
 8012be6:	e7e9      	b.n	8012bbc <_printf_i+0x174>
 8012be8:	6823      	ldr	r3, [r4, #0]
 8012bea:	f023 0320 	bic.w	r3, r3, #32
 8012bee:	6023      	str	r3, [r4, #0]
 8012bf0:	e7f6      	b.n	8012be0 <_printf_i+0x198>
 8012bf2:	4616      	mov	r6, r2
 8012bf4:	e7bd      	b.n	8012b72 <_printf_i+0x12a>
 8012bf6:	6833      	ldr	r3, [r6, #0]
 8012bf8:	6825      	ldr	r5, [r4, #0]
 8012bfa:	1d18      	adds	r0, r3, #4
 8012bfc:	6961      	ldr	r1, [r4, #20]
 8012bfe:	6030      	str	r0, [r6, #0]
 8012c00:	062e      	lsls	r6, r5, #24
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	d501      	bpl.n	8012c0a <_printf_i+0x1c2>
 8012c06:	6019      	str	r1, [r3, #0]
 8012c08:	e002      	b.n	8012c10 <_printf_i+0x1c8>
 8012c0a:	0668      	lsls	r0, r5, #25
 8012c0c:	d5fb      	bpl.n	8012c06 <_printf_i+0x1be>
 8012c0e:	8019      	strh	r1, [r3, #0]
 8012c10:	2300      	movs	r3, #0
 8012c12:	4616      	mov	r6, r2
 8012c14:	6123      	str	r3, [r4, #16]
 8012c16:	e7bc      	b.n	8012b92 <_printf_i+0x14a>
 8012c18:	6833      	ldr	r3, [r6, #0]
 8012c1a:	2100      	movs	r1, #0
 8012c1c:	1d1a      	adds	r2, r3, #4
 8012c1e:	6032      	str	r2, [r6, #0]
 8012c20:	681e      	ldr	r6, [r3, #0]
 8012c22:	6862      	ldr	r2, [r4, #4]
 8012c24:	4630      	mov	r0, r6
 8012c26:	f000 f985 	bl	8012f34 <memchr>
 8012c2a:	b108      	cbz	r0, 8012c30 <_printf_i+0x1e8>
 8012c2c:	1b80      	subs	r0, r0, r6
 8012c2e:	6060      	str	r0, [r4, #4]
 8012c30:	6863      	ldr	r3, [r4, #4]
 8012c32:	6123      	str	r3, [r4, #16]
 8012c34:	2300      	movs	r3, #0
 8012c36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c3a:	e7aa      	b.n	8012b92 <_printf_i+0x14a>
 8012c3c:	4632      	mov	r2, r6
 8012c3e:	4649      	mov	r1, r9
 8012c40:	4640      	mov	r0, r8
 8012c42:	6923      	ldr	r3, [r4, #16]
 8012c44:	47d0      	blx	sl
 8012c46:	3001      	adds	r0, #1
 8012c48:	d0ad      	beq.n	8012ba6 <_printf_i+0x15e>
 8012c4a:	6823      	ldr	r3, [r4, #0]
 8012c4c:	079b      	lsls	r3, r3, #30
 8012c4e:	d413      	bmi.n	8012c78 <_printf_i+0x230>
 8012c50:	68e0      	ldr	r0, [r4, #12]
 8012c52:	9b03      	ldr	r3, [sp, #12]
 8012c54:	4298      	cmp	r0, r3
 8012c56:	bfb8      	it	lt
 8012c58:	4618      	movlt	r0, r3
 8012c5a:	e7a6      	b.n	8012baa <_printf_i+0x162>
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	4632      	mov	r2, r6
 8012c60:	4649      	mov	r1, r9
 8012c62:	4640      	mov	r0, r8
 8012c64:	47d0      	blx	sl
 8012c66:	3001      	adds	r0, #1
 8012c68:	d09d      	beq.n	8012ba6 <_printf_i+0x15e>
 8012c6a:	3501      	adds	r5, #1
 8012c6c:	68e3      	ldr	r3, [r4, #12]
 8012c6e:	9903      	ldr	r1, [sp, #12]
 8012c70:	1a5b      	subs	r3, r3, r1
 8012c72:	42ab      	cmp	r3, r5
 8012c74:	dcf2      	bgt.n	8012c5c <_printf_i+0x214>
 8012c76:	e7eb      	b.n	8012c50 <_printf_i+0x208>
 8012c78:	2500      	movs	r5, #0
 8012c7a:	f104 0619 	add.w	r6, r4, #25
 8012c7e:	e7f5      	b.n	8012c6c <_printf_i+0x224>
 8012c80:	08014015 	.word	0x08014015
 8012c84:	08014026 	.word	0x08014026

08012c88 <__sflush_r>:
 8012c88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c8e:	0716      	lsls	r6, r2, #28
 8012c90:	4605      	mov	r5, r0
 8012c92:	460c      	mov	r4, r1
 8012c94:	d454      	bmi.n	8012d40 <__sflush_r+0xb8>
 8012c96:	684b      	ldr	r3, [r1, #4]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	dc02      	bgt.n	8012ca2 <__sflush_r+0x1a>
 8012c9c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	dd48      	ble.n	8012d34 <__sflush_r+0xac>
 8012ca2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012ca4:	2e00      	cmp	r6, #0
 8012ca6:	d045      	beq.n	8012d34 <__sflush_r+0xac>
 8012ca8:	2300      	movs	r3, #0
 8012caa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012cae:	682f      	ldr	r7, [r5, #0]
 8012cb0:	6a21      	ldr	r1, [r4, #32]
 8012cb2:	602b      	str	r3, [r5, #0]
 8012cb4:	d030      	beq.n	8012d18 <__sflush_r+0x90>
 8012cb6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012cb8:	89a3      	ldrh	r3, [r4, #12]
 8012cba:	0759      	lsls	r1, r3, #29
 8012cbc:	d505      	bpl.n	8012cca <__sflush_r+0x42>
 8012cbe:	6863      	ldr	r3, [r4, #4]
 8012cc0:	1ad2      	subs	r2, r2, r3
 8012cc2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012cc4:	b10b      	cbz	r3, 8012cca <__sflush_r+0x42>
 8012cc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012cc8:	1ad2      	subs	r2, r2, r3
 8012cca:	2300      	movs	r3, #0
 8012ccc:	4628      	mov	r0, r5
 8012cce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012cd0:	6a21      	ldr	r1, [r4, #32]
 8012cd2:	47b0      	blx	r6
 8012cd4:	1c43      	adds	r3, r0, #1
 8012cd6:	89a3      	ldrh	r3, [r4, #12]
 8012cd8:	d106      	bne.n	8012ce8 <__sflush_r+0x60>
 8012cda:	6829      	ldr	r1, [r5, #0]
 8012cdc:	291d      	cmp	r1, #29
 8012cde:	d82b      	bhi.n	8012d38 <__sflush_r+0xb0>
 8012ce0:	4a28      	ldr	r2, [pc, #160]	@ (8012d84 <__sflush_r+0xfc>)
 8012ce2:	410a      	asrs	r2, r1
 8012ce4:	07d6      	lsls	r6, r2, #31
 8012ce6:	d427      	bmi.n	8012d38 <__sflush_r+0xb0>
 8012ce8:	2200      	movs	r2, #0
 8012cea:	6062      	str	r2, [r4, #4]
 8012cec:	6922      	ldr	r2, [r4, #16]
 8012cee:	04d9      	lsls	r1, r3, #19
 8012cf0:	6022      	str	r2, [r4, #0]
 8012cf2:	d504      	bpl.n	8012cfe <__sflush_r+0x76>
 8012cf4:	1c42      	adds	r2, r0, #1
 8012cf6:	d101      	bne.n	8012cfc <__sflush_r+0x74>
 8012cf8:	682b      	ldr	r3, [r5, #0]
 8012cfa:	b903      	cbnz	r3, 8012cfe <__sflush_r+0x76>
 8012cfc:	6560      	str	r0, [r4, #84]	@ 0x54
 8012cfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012d00:	602f      	str	r7, [r5, #0]
 8012d02:	b1b9      	cbz	r1, 8012d34 <__sflush_r+0xac>
 8012d04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012d08:	4299      	cmp	r1, r3
 8012d0a:	d002      	beq.n	8012d12 <__sflush_r+0x8a>
 8012d0c:	4628      	mov	r0, r5
 8012d0e:	f7ff fa9b 	bl	8012248 <_free_r>
 8012d12:	2300      	movs	r3, #0
 8012d14:	6363      	str	r3, [r4, #52]	@ 0x34
 8012d16:	e00d      	b.n	8012d34 <__sflush_r+0xac>
 8012d18:	2301      	movs	r3, #1
 8012d1a:	4628      	mov	r0, r5
 8012d1c:	47b0      	blx	r6
 8012d1e:	4602      	mov	r2, r0
 8012d20:	1c50      	adds	r0, r2, #1
 8012d22:	d1c9      	bne.n	8012cb8 <__sflush_r+0x30>
 8012d24:	682b      	ldr	r3, [r5, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d0c6      	beq.n	8012cb8 <__sflush_r+0x30>
 8012d2a:	2b1d      	cmp	r3, #29
 8012d2c:	d001      	beq.n	8012d32 <__sflush_r+0xaa>
 8012d2e:	2b16      	cmp	r3, #22
 8012d30:	d11d      	bne.n	8012d6e <__sflush_r+0xe6>
 8012d32:	602f      	str	r7, [r5, #0]
 8012d34:	2000      	movs	r0, #0
 8012d36:	e021      	b.n	8012d7c <__sflush_r+0xf4>
 8012d38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d3c:	b21b      	sxth	r3, r3
 8012d3e:	e01a      	b.n	8012d76 <__sflush_r+0xee>
 8012d40:	690f      	ldr	r7, [r1, #16]
 8012d42:	2f00      	cmp	r7, #0
 8012d44:	d0f6      	beq.n	8012d34 <__sflush_r+0xac>
 8012d46:	0793      	lsls	r3, r2, #30
 8012d48:	bf18      	it	ne
 8012d4a:	2300      	movne	r3, #0
 8012d4c:	680e      	ldr	r6, [r1, #0]
 8012d4e:	bf08      	it	eq
 8012d50:	694b      	ldreq	r3, [r1, #20]
 8012d52:	1bf6      	subs	r6, r6, r7
 8012d54:	600f      	str	r7, [r1, #0]
 8012d56:	608b      	str	r3, [r1, #8]
 8012d58:	2e00      	cmp	r6, #0
 8012d5a:	ddeb      	ble.n	8012d34 <__sflush_r+0xac>
 8012d5c:	4633      	mov	r3, r6
 8012d5e:	463a      	mov	r2, r7
 8012d60:	4628      	mov	r0, r5
 8012d62:	6a21      	ldr	r1, [r4, #32]
 8012d64:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8012d68:	47e0      	blx	ip
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	dc07      	bgt.n	8012d7e <__sflush_r+0xf6>
 8012d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d76:	f04f 30ff 	mov.w	r0, #4294967295
 8012d7a:	81a3      	strh	r3, [r4, #12]
 8012d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d7e:	4407      	add	r7, r0
 8012d80:	1a36      	subs	r6, r6, r0
 8012d82:	e7e9      	b.n	8012d58 <__sflush_r+0xd0>
 8012d84:	dfbffffe 	.word	0xdfbffffe

08012d88 <_fflush_r>:
 8012d88:	b538      	push	{r3, r4, r5, lr}
 8012d8a:	690b      	ldr	r3, [r1, #16]
 8012d8c:	4605      	mov	r5, r0
 8012d8e:	460c      	mov	r4, r1
 8012d90:	b913      	cbnz	r3, 8012d98 <_fflush_r+0x10>
 8012d92:	2500      	movs	r5, #0
 8012d94:	4628      	mov	r0, r5
 8012d96:	bd38      	pop	{r3, r4, r5, pc}
 8012d98:	b118      	cbz	r0, 8012da2 <_fflush_r+0x1a>
 8012d9a:	6a03      	ldr	r3, [r0, #32]
 8012d9c:	b90b      	cbnz	r3, 8012da2 <_fflush_r+0x1a>
 8012d9e:	f7ff f839 	bl	8011e14 <__sinit>
 8012da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d0f3      	beq.n	8012d92 <_fflush_r+0xa>
 8012daa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012dac:	07d0      	lsls	r0, r2, #31
 8012dae:	d404      	bmi.n	8012dba <_fflush_r+0x32>
 8012db0:	0599      	lsls	r1, r3, #22
 8012db2:	d402      	bmi.n	8012dba <_fflush_r+0x32>
 8012db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012db6:	f7ff fa44 	bl	8012242 <__retarget_lock_acquire_recursive>
 8012dba:	4628      	mov	r0, r5
 8012dbc:	4621      	mov	r1, r4
 8012dbe:	f7ff ff63 	bl	8012c88 <__sflush_r>
 8012dc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012dc4:	4605      	mov	r5, r0
 8012dc6:	07da      	lsls	r2, r3, #31
 8012dc8:	d4e4      	bmi.n	8012d94 <_fflush_r+0xc>
 8012dca:	89a3      	ldrh	r3, [r4, #12]
 8012dcc:	059b      	lsls	r3, r3, #22
 8012dce:	d4e1      	bmi.n	8012d94 <_fflush_r+0xc>
 8012dd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012dd2:	f7ff fa37 	bl	8012244 <__retarget_lock_release_recursive>
 8012dd6:	e7dd      	b.n	8012d94 <_fflush_r+0xc>

08012dd8 <__swhatbuf_r>:
 8012dd8:	b570      	push	{r4, r5, r6, lr}
 8012dda:	460c      	mov	r4, r1
 8012ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012de0:	4615      	mov	r5, r2
 8012de2:	2900      	cmp	r1, #0
 8012de4:	461e      	mov	r6, r3
 8012de6:	b096      	sub	sp, #88	@ 0x58
 8012de8:	da0c      	bge.n	8012e04 <__swhatbuf_r+0x2c>
 8012dea:	89a3      	ldrh	r3, [r4, #12]
 8012dec:	2100      	movs	r1, #0
 8012dee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012df2:	bf14      	ite	ne
 8012df4:	2340      	movne	r3, #64	@ 0x40
 8012df6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012dfa:	2000      	movs	r0, #0
 8012dfc:	6031      	str	r1, [r6, #0]
 8012dfe:	602b      	str	r3, [r5, #0]
 8012e00:	b016      	add	sp, #88	@ 0x58
 8012e02:	bd70      	pop	{r4, r5, r6, pc}
 8012e04:	466a      	mov	r2, sp
 8012e06:	f000 f863 	bl	8012ed0 <_fstat_r>
 8012e0a:	2800      	cmp	r0, #0
 8012e0c:	dbed      	blt.n	8012dea <__swhatbuf_r+0x12>
 8012e0e:	9901      	ldr	r1, [sp, #4]
 8012e10:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012e14:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012e18:	4259      	negs	r1, r3
 8012e1a:	4159      	adcs	r1, r3
 8012e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012e20:	e7eb      	b.n	8012dfa <__swhatbuf_r+0x22>

08012e22 <__smakebuf_r>:
 8012e22:	898b      	ldrh	r3, [r1, #12]
 8012e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e26:	079d      	lsls	r5, r3, #30
 8012e28:	4606      	mov	r6, r0
 8012e2a:	460c      	mov	r4, r1
 8012e2c:	d507      	bpl.n	8012e3e <__smakebuf_r+0x1c>
 8012e2e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012e32:	6023      	str	r3, [r4, #0]
 8012e34:	6123      	str	r3, [r4, #16]
 8012e36:	2301      	movs	r3, #1
 8012e38:	6163      	str	r3, [r4, #20]
 8012e3a:	b003      	add	sp, #12
 8012e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e3e:	466a      	mov	r2, sp
 8012e40:	ab01      	add	r3, sp, #4
 8012e42:	f7ff ffc9 	bl	8012dd8 <__swhatbuf_r>
 8012e46:	9f00      	ldr	r7, [sp, #0]
 8012e48:	4605      	mov	r5, r0
 8012e4a:	4639      	mov	r1, r7
 8012e4c:	4630      	mov	r0, r6
 8012e4e:	f7ff fa65 	bl	801231c <_malloc_r>
 8012e52:	b948      	cbnz	r0, 8012e68 <__smakebuf_r+0x46>
 8012e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e58:	059a      	lsls	r2, r3, #22
 8012e5a:	d4ee      	bmi.n	8012e3a <__smakebuf_r+0x18>
 8012e5c:	f023 0303 	bic.w	r3, r3, #3
 8012e60:	f043 0302 	orr.w	r3, r3, #2
 8012e64:	81a3      	strh	r3, [r4, #12]
 8012e66:	e7e2      	b.n	8012e2e <__smakebuf_r+0xc>
 8012e68:	89a3      	ldrh	r3, [r4, #12]
 8012e6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e72:	81a3      	strh	r3, [r4, #12]
 8012e74:	9b01      	ldr	r3, [sp, #4]
 8012e76:	6020      	str	r0, [r4, #0]
 8012e78:	b15b      	cbz	r3, 8012e92 <__smakebuf_r+0x70>
 8012e7a:	4630      	mov	r0, r6
 8012e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e80:	f000 f838 	bl	8012ef4 <_isatty_r>
 8012e84:	b128      	cbz	r0, 8012e92 <__smakebuf_r+0x70>
 8012e86:	89a3      	ldrh	r3, [r4, #12]
 8012e88:	f023 0303 	bic.w	r3, r3, #3
 8012e8c:	f043 0301 	orr.w	r3, r3, #1
 8012e90:	81a3      	strh	r3, [r4, #12]
 8012e92:	89a3      	ldrh	r3, [r4, #12]
 8012e94:	431d      	orrs	r5, r3
 8012e96:	81a5      	strh	r5, [r4, #12]
 8012e98:	e7cf      	b.n	8012e3a <__smakebuf_r+0x18>

08012e9a <memmove>:
 8012e9a:	4288      	cmp	r0, r1
 8012e9c:	b510      	push	{r4, lr}
 8012e9e:	eb01 0402 	add.w	r4, r1, r2
 8012ea2:	d902      	bls.n	8012eaa <memmove+0x10>
 8012ea4:	4284      	cmp	r4, r0
 8012ea6:	4623      	mov	r3, r4
 8012ea8:	d807      	bhi.n	8012eba <memmove+0x20>
 8012eaa:	1e43      	subs	r3, r0, #1
 8012eac:	42a1      	cmp	r1, r4
 8012eae:	d008      	beq.n	8012ec2 <memmove+0x28>
 8012eb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012eb4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012eb8:	e7f8      	b.n	8012eac <memmove+0x12>
 8012eba:	4601      	mov	r1, r0
 8012ebc:	4402      	add	r2, r0
 8012ebe:	428a      	cmp	r2, r1
 8012ec0:	d100      	bne.n	8012ec4 <memmove+0x2a>
 8012ec2:	bd10      	pop	{r4, pc}
 8012ec4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ec8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012ecc:	e7f7      	b.n	8012ebe <memmove+0x24>
	...

08012ed0 <_fstat_r>:
 8012ed0:	b538      	push	{r3, r4, r5, lr}
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	4d06      	ldr	r5, [pc, #24]	@ (8012ef0 <_fstat_r+0x20>)
 8012ed6:	4604      	mov	r4, r0
 8012ed8:	4608      	mov	r0, r1
 8012eda:	4611      	mov	r1, r2
 8012edc:	602b      	str	r3, [r5, #0]
 8012ede:	f7ef fe7f 	bl	8002be0 <_fstat>
 8012ee2:	1c43      	adds	r3, r0, #1
 8012ee4:	d102      	bne.n	8012eec <_fstat_r+0x1c>
 8012ee6:	682b      	ldr	r3, [r5, #0]
 8012ee8:	b103      	cbz	r3, 8012eec <_fstat_r+0x1c>
 8012eea:	6023      	str	r3, [r4, #0]
 8012eec:	bd38      	pop	{r3, r4, r5, pc}
 8012eee:	bf00      	nop
 8012ef0:	200007b0 	.word	0x200007b0

08012ef4 <_isatty_r>:
 8012ef4:	b538      	push	{r3, r4, r5, lr}
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	4d05      	ldr	r5, [pc, #20]	@ (8012f10 <_isatty_r+0x1c>)
 8012efa:	4604      	mov	r4, r0
 8012efc:	4608      	mov	r0, r1
 8012efe:	602b      	str	r3, [r5, #0]
 8012f00:	f7ef fe7d 	bl	8002bfe <_isatty>
 8012f04:	1c43      	adds	r3, r0, #1
 8012f06:	d102      	bne.n	8012f0e <_isatty_r+0x1a>
 8012f08:	682b      	ldr	r3, [r5, #0]
 8012f0a:	b103      	cbz	r3, 8012f0e <_isatty_r+0x1a>
 8012f0c:	6023      	str	r3, [r4, #0]
 8012f0e:	bd38      	pop	{r3, r4, r5, pc}
 8012f10:	200007b0 	.word	0x200007b0

08012f14 <_sbrk_r>:
 8012f14:	b538      	push	{r3, r4, r5, lr}
 8012f16:	2300      	movs	r3, #0
 8012f18:	4d05      	ldr	r5, [pc, #20]	@ (8012f30 <_sbrk_r+0x1c>)
 8012f1a:	4604      	mov	r4, r0
 8012f1c:	4608      	mov	r0, r1
 8012f1e:	602b      	str	r3, [r5, #0]
 8012f20:	f7ef fe84 	bl	8002c2c <_sbrk>
 8012f24:	1c43      	adds	r3, r0, #1
 8012f26:	d102      	bne.n	8012f2e <_sbrk_r+0x1a>
 8012f28:	682b      	ldr	r3, [r5, #0]
 8012f2a:	b103      	cbz	r3, 8012f2e <_sbrk_r+0x1a>
 8012f2c:	6023      	str	r3, [r4, #0]
 8012f2e:	bd38      	pop	{r3, r4, r5, pc}
 8012f30:	200007b0 	.word	0x200007b0

08012f34 <memchr>:
 8012f34:	4603      	mov	r3, r0
 8012f36:	b510      	push	{r4, lr}
 8012f38:	b2c9      	uxtb	r1, r1
 8012f3a:	4402      	add	r2, r0
 8012f3c:	4293      	cmp	r3, r2
 8012f3e:	4618      	mov	r0, r3
 8012f40:	d101      	bne.n	8012f46 <memchr+0x12>
 8012f42:	2000      	movs	r0, #0
 8012f44:	e003      	b.n	8012f4e <memchr+0x1a>
 8012f46:	7804      	ldrb	r4, [r0, #0]
 8012f48:	3301      	adds	r3, #1
 8012f4a:	428c      	cmp	r4, r1
 8012f4c:	d1f6      	bne.n	8012f3c <memchr+0x8>
 8012f4e:	bd10      	pop	{r4, pc}

08012f50 <memcpy>:
 8012f50:	440a      	add	r2, r1
 8012f52:	4291      	cmp	r1, r2
 8012f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8012f58:	d100      	bne.n	8012f5c <memcpy+0xc>
 8012f5a:	4770      	bx	lr
 8012f5c:	b510      	push	{r4, lr}
 8012f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f62:	4291      	cmp	r1, r2
 8012f64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f68:	d1f9      	bne.n	8012f5e <memcpy+0xe>
 8012f6a:	bd10      	pop	{r4, pc}

08012f6c <_realloc_r>:
 8012f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f70:	4680      	mov	r8, r0
 8012f72:	4615      	mov	r5, r2
 8012f74:	460c      	mov	r4, r1
 8012f76:	b921      	cbnz	r1, 8012f82 <_realloc_r+0x16>
 8012f78:	4611      	mov	r1, r2
 8012f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f7e:	f7ff b9cd 	b.w	801231c <_malloc_r>
 8012f82:	b92a      	cbnz	r2, 8012f90 <_realloc_r+0x24>
 8012f84:	f7ff f960 	bl	8012248 <_free_r>
 8012f88:	2400      	movs	r4, #0
 8012f8a:	4620      	mov	r0, r4
 8012f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f90:	f000 f81a 	bl	8012fc8 <_malloc_usable_size_r>
 8012f94:	4285      	cmp	r5, r0
 8012f96:	4606      	mov	r6, r0
 8012f98:	d802      	bhi.n	8012fa0 <_realloc_r+0x34>
 8012f9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012f9e:	d8f4      	bhi.n	8012f8a <_realloc_r+0x1e>
 8012fa0:	4629      	mov	r1, r5
 8012fa2:	4640      	mov	r0, r8
 8012fa4:	f7ff f9ba 	bl	801231c <_malloc_r>
 8012fa8:	4607      	mov	r7, r0
 8012faa:	2800      	cmp	r0, #0
 8012fac:	d0ec      	beq.n	8012f88 <_realloc_r+0x1c>
 8012fae:	42b5      	cmp	r5, r6
 8012fb0:	462a      	mov	r2, r5
 8012fb2:	4621      	mov	r1, r4
 8012fb4:	bf28      	it	cs
 8012fb6:	4632      	movcs	r2, r6
 8012fb8:	f7ff ffca 	bl	8012f50 <memcpy>
 8012fbc:	4621      	mov	r1, r4
 8012fbe:	4640      	mov	r0, r8
 8012fc0:	f7ff f942 	bl	8012248 <_free_r>
 8012fc4:	463c      	mov	r4, r7
 8012fc6:	e7e0      	b.n	8012f8a <_realloc_r+0x1e>

08012fc8 <_malloc_usable_size_r>:
 8012fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fcc:	1f18      	subs	r0, r3, #4
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	bfbc      	itt	lt
 8012fd2:	580b      	ldrlt	r3, [r1, r0]
 8012fd4:	18c0      	addlt	r0, r0, r3
 8012fd6:	4770      	bx	lr

08012fd8 <pow>:
 8012fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fdc:	4614      	mov	r4, r2
 8012fde:	461d      	mov	r5, r3
 8012fe0:	4680      	mov	r8, r0
 8012fe2:	4689      	mov	r9, r1
 8012fe4:	f000 f898 	bl	8013118 <__ieee754_pow>
 8012fe8:	4622      	mov	r2, r4
 8012fea:	4606      	mov	r6, r0
 8012fec:	460f      	mov	r7, r1
 8012fee:	462b      	mov	r3, r5
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	4629      	mov	r1, r5
 8012ff4:	f7ed fd1a 	bl	8000a2c <__aeabi_dcmpun>
 8012ff8:	bbc8      	cbnz	r0, 801306e <pow+0x96>
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	4640      	mov	r0, r8
 8013000:	4649      	mov	r1, r9
 8013002:	f7ed fce1 	bl	80009c8 <__aeabi_dcmpeq>
 8013006:	b1b8      	cbz	r0, 8013038 <pow+0x60>
 8013008:	2200      	movs	r2, #0
 801300a:	2300      	movs	r3, #0
 801300c:	4620      	mov	r0, r4
 801300e:	4629      	mov	r1, r5
 8013010:	f7ed fcda 	bl	80009c8 <__aeabi_dcmpeq>
 8013014:	2800      	cmp	r0, #0
 8013016:	d141      	bne.n	801309c <pow+0xc4>
 8013018:	4620      	mov	r0, r4
 801301a:	4629      	mov	r1, r5
 801301c:	f000 f844 	bl	80130a8 <finite>
 8013020:	b328      	cbz	r0, 801306e <pow+0x96>
 8013022:	2200      	movs	r2, #0
 8013024:	2300      	movs	r3, #0
 8013026:	4620      	mov	r0, r4
 8013028:	4629      	mov	r1, r5
 801302a:	f7ed fcd7 	bl	80009dc <__aeabi_dcmplt>
 801302e:	b1f0      	cbz	r0, 801306e <pow+0x96>
 8013030:	f7ff f8dc 	bl	80121ec <__errno>
 8013034:	2322      	movs	r3, #34	@ 0x22
 8013036:	e019      	b.n	801306c <pow+0x94>
 8013038:	4630      	mov	r0, r6
 801303a:	4639      	mov	r1, r7
 801303c:	f000 f834 	bl	80130a8 <finite>
 8013040:	b9c8      	cbnz	r0, 8013076 <pow+0x9e>
 8013042:	4640      	mov	r0, r8
 8013044:	4649      	mov	r1, r9
 8013046:	f000 f82f 	bl	80130a8 <finite>
 801304a:	b1a0      	cbz	r0, 8013076 <pow+0x9e>
 801304c:	4620      	mov	r0, r4
 801304e:	4629      	mov	r1, r5
 8013050:	f000 f82a 	bl	80130a8 <finite>
 8013054:	b178      	cbz	r0, 8013076 <pow+0x9e>
 8013056:	4632      	mov	r2, r6
 8013058:	463b      	mov	r3, r7
 801305a:	4630      	mov	r0, r6
 801305c:	4639      	mov	r1, r7
 801305e:	f7ed fce5 	bl	8000a2c <__aeabi_dcmpun>
 8013062:	2800      	cmp	r0, #0
 8013064:	d0e4      	beq.n	8013030 <pow+0x58>
 8013066:	f7ff f8c1 	bl	80121ec <__errno>
 801306a:	2321      	movs	r3, #33	@ 0x21
 801306c:	6003      	str	r3, [r0, #0]
 801306e:	4630      	mov	r0, r6
 8013070:	4639      	mov	r1, r7
 8013072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013076:	2200      	movs	r2, #0
 8013078:	2300      	movs	r3, #0
 801307a:	4630      	mov	r0, r6
 801307c:	4639      	mov	r1, r7
 801307e:	f7ed fca3 	bl	80009c8 <__aeabi_dcmpeq>
 8013082:	2800      	cmp	r0, #0
 8013084:	d0f3      	beq.n	801306e <pow+0x96>
 8013086:	4640      	mov	r0, r8
 8013088:	4649      	mov	r1, r9
 801308a:	f000 f80d 	bl	80130a8 <finite>
 801308e:	2800      	cmp	r0, #0
 8013090:	d0ed      	beq.n	801306e <pow+0x96>
 8013092:	4620      	mov	r0, r4
 8013094:	4629      	mov	r1, r5
 8013096:	f000 f807 	bl	80130a8 <finite>
 801309a:	e7c8      	b.n	801302e <pow+0x56>
 801309c:	2600      	movs	r6, #0
 801309e:	4f01      	ldr	r7, [pc, #4]	@ (80130a4 <pow+0xcc>)
 80130a0:	e7e5      	b.n	801306e <pow+0x96>
 80130a2:	bf00      	nop
 80130a4:	3ff00000 	.word	0x3ff00000

080130a8 <finite>:
 80130a8:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80130ac:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80130b0:	0fc0      	lsrs	r0, r0, #31
 80130b2:	4770      	bx	lr

080130b4 <trunc>:
 80130b4:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
 80130b8:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80130bc:	f2a5 34ff 	subw	r4, r5, #1023	@ 0x3ff
 80130c0:	2c13      	cmp	r4, #19
 80130c2:	4683      	mov	fp, r0
 80130c4:	468c      	mov	ip, r1
 80130c6:	dc13      	bgt.n	80130f0 <trunc+0x3c>
 80130c8:	2c00      	cmp	r4, #0
 80130ca:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80130ce:	da06      	bge.n	80130de <trunc+0x2a>
 80130d0:	2200      	movs	r2, #0
 80130d2:	46ac      	mov	ip, r5
 80130d4:	4693      	mov	fp, r2
 80130d6:	4658      	mov	r0, fp
 80130d8:	4661      	mov	r1, ip
 80130da:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
 80130de:	2000      	movs	r0, #0
 80130e0:	4b0c      	ldr	r3, [pc, #48]	@ (8013114 <trunc+0x60>)
 80130e2:	4123      	asrs	r3, r4
 80130e4:	400b      	ands	r3, r1
 80130e6:	ea43 0105 	orr.w	r1, r3, r5
 80130ea:	4683      	mov	fp, r0
 80130ec:	468c      	mov	ip, r1
 80130ee:	e7f2      	b.n	80130d6 <trunc+0x22>
 80130f0:	2c33      	cmp	r4, #51	@ 0x33
 80130f2:	dd07      	ble.n	8013104 <trunc+0x50>
 80130f4:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 80130f8:	d1ed      	bne.n	80130d6 <trunc+0x22>
 80130fa:	4602      	mov	r2, r0
 80130fc:	460b      	mov	r3, r1
 80130fe:	f7ed f845 	bl	800018c <__adddf3>
 8013102:	e7f2      	b.n	80130ea <trunc+0x36>
 8013104:	f04f 33ff 	mov.w	r3, #4294967295
 8013108:	f2a5 4513 	subw	r5, r5, #1043	@ 0x413
 801310c:	40eb      	lsrs	r3, r5
 801310e:	ea20 0003 	bic.w	r0, r0, r3
 8013112:	e7ea      	b.n	80130ea <trunc+0x36>
 8013114:	fff00000 	.word	0xfff00000

08013118 <__ieee754_pow>:
 8013118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801311c:	b091      	sub	sp, #68	@ 0x44
 801311e:	e9cd 2300 	strd	r2, r3, [sp]
 8013122:	468b      	mov	fp, r1
 8013124:	e9dd 1800 	ldrd	r1, r8, [sp]
 8013128:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 801312c:	4682      	mov	sl, r0
 801312e:	ea57 0001 	orrs.w	r0, r7, r1
 8013132:	d112      	bne.n	801315a <__ieee754_pow+0x42>
 8013134:	4653      	mov	r3, sl
 8013136:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 801313a:	18db      	adds	r3, r3, r3
 801313c:	4152      	adcs	r2, r2
 801313e:	4298      	cmp	r0, r3
 8013140:	4b91      	ldr	r3, [pc, #580]	@ (8013388 <__ieee754_pow+0x270>)
 8013142:	4193      	sbcs	r3, r2
 8013144:	f080 84ce 	bcs.w	8013ae4 <__ieee754_pow+0x9cc>
 8013148:	e9dd 2300 	ldrd	r2, r3, [sp]
 801314c:	4650      	mov	r0, sl
 801314e:	4659      	mov	r1, fp
 8013150:	f7ed f81c 	bl	800018c <__adddf3>
 8013154:	b011      	add	sp, #68	@ 0x44
 8013156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801315a:	4b8c      	ldr	r3, [pc, #560]	@ (801338c <__ieee754_pow+0x274>)
 801315c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8013160:	429e      	cmp	r6, r3
 8013162:	465d      	mov	r5, fp
 8013164:	46d1      	mov	r9, sl
 8013166:	d807      	bhi.n	8013178 <__ieee754_pow+0x60>
 8013168:	d102      	bne.n	8013170 <__ieee754_pow+0x58>
 801316a:	f1ba 0f00 	cmp.w	sl, #0
 801316e:	d1eb      	bne.n	8013148 <__ieee754_pow+0x30>
 8013170:	429f      	cmp	r7, r3
 8013172:	d801      	bhi.n	8013178 <__ieee754_pow+0x60>
 8013174:	d10f      	bne.n	8013196 <__ieee754_pow+0x7e>
 8013176:	b171      	cbz	r1, 8013196 <__ieee754_pow+0x7e>
 8013178:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801317c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8013180:	ea55 0509 	orrs.w	r5, r5, r9
 8013184:	d1e0      	bne.n	8013148 <__ieee754_pow+0x30>
 8013186:	e9dd 3200 	ldrd	r3, r2, [sp]
 801318a:	18db      	adds	r3, r3, r3
 801318c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8013190:	4152      	adcs	r2, r2
 8013192:	429d      	cmp	r5, r3
 8013194:	e7d4      	b.n	8013140 <__ieee754_pow+0x28>
 8013196:	2d00      	cmp	r5, #0
 8013198:	4633      	mov	r3, r6
 801319a:	da39      	bge.n	8013210 <__ieee754_pow+0xf8>
 801319c:	4a7c      	ldr	r2, [pc, #496]	@ (8013390 <__ieee754_pow+0x278>)
 801319e:	4297      	cmp	r7, r2
 80131a0:	d84e      	bhi.n	8013240 <__ieee754_pow+0x128>
 80131a2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80131a6:	4297      	cmp	r7, r2
 80131a8:	f240 84ab 	bls.w	8013b02 <__ieee754_pow+0x9ea>
 80131ac:	153a      	asrs	r2, r7, #20
 80131ae:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80131b2:	2a14      	cmp	r2, #20
 80131b4:	dd0f      	ble.n	80131d6 <__ieee754_pow+0xbe>
 80131b6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80131ba:	fa21 f402 	lsr.w	r4, r1, r2
 80131be:	fa04 f202 	lsl.w	r2, r4, r2
 80131c2:	428a      	cmp	r2, r1
 80131c4:	f040 849d 	bne.w	8013b02 <__ieee754_pow+0x9ea>
 80131c8:	f004 0401 	and.w	r4, r4, #1
 80131cc:	f1c4 0402 	rsb	r4, r4, #2
 80131d0:	2900      	cmp	r1, #0
 80131d2:	d15a      	bne.n	801328a <__ieee754_pow+0x172>
 80131d4:	e00e      	b.n	80131f4 <__ieee754_pow+0xdc>
 80131d6:	2900      	cmp	r1, #0
 80131d8:	d156      	bne.n	8013288 <__ieee754_pow+0x170>
 80131da:	f1c2 0214 	rsb	r2, r2, #20
 80131de:	fa47 f402 	asr.w	r4, r7, r2
 80131e2:	fa04 f202 	lsl.w	r2, r4, r2
 80131e6:	42ba      	cmp	r2, r7
 80131e8:	f040 8488 	bne.w	8013afc <__ieee754_pow+0x9e4>
 80131ec:	f004 0401 	and.w	r4, r4, #1
 80131f0:	f1c4 0402 	rsb	r4, r4, #2
 80131f4:	4a67      	ldr	r2, [pc, #412]	@ (8013394 <__ieee754_pow+0x27c>)
 80131f6:	4297      	cmp	r7, r2
 80131f8:	d130      	bne.n	801325c <__ieee754_pow+0x144>
 80131fa:	f1b8 0f00 	cmp.w	r8, #0
 80131fe:	f280 8479 	bge.w	8013af4 <__ieee754_pow+0x9dc>
 8013202:	4652      	mov	r2, sl
 8013204:	465b      	mov	r3, fp
 8013206:	2000      	movs	r0, #0
 8013208:	4962      	ldr	r1, [pc, #392]	@ (8013394 <__ieee754_pow+0x27c>)
 801320a:	f7ed fa9f 	bl	800074c <__aeabi_ddiv>
 801320e:	e7a1      	b.n	8013154 <__ieee754_pow+0x3c>
 8013210:	2400      	movs	r4, #0
 8013212:	2900      	cmp	r1, #0
 8013214:	d139      	bne.n	801328a <__ieee754_pow+0x172>
 8013216:	4a5d      	ldr	r2, [pc, #372]	@ (801338c <__ieee754_pow+0x274>)
 8013218:	4297      	cmp	r7, r2
 801321a:	d1eb      	bne.n	80131f4 <__ieee754_pow+0xdc>
 801321c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8013220:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8013224:	ea53 0309 	orrs.w	r3, r3, r9
 8013228:	f000 845c 	beq.w	8013ae4 <__ieee754_pow+0x9cc>
 801322c:	4b5a      	ldr	r3, [pc, #360]	@ (8013398 <__ieee754_pow+0x280>)
 801322e:	429e      	cmp	r6, r3
 8013230:	d908      	bls.n	8013244 <__ieee754_pow+0x12c>
 8013232:	f1b8 0f00 	cmp.w	r8, #0
 8013236:	f2c0 8459 	blt.w	8013aec <__ieee754_pow+0x9d4>
 801323a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801323e:	e789      	b.n	8013154 <__ieee754_pow+0x3c>
 8013240:	2402      	movs	r4, #2
 8013242:	e7e6      	b.n	8013212 <__ieee754_pow+0xfa>
 8013244:	f1b8 0f00 	cmp.w	r8, #0
 8013248:	f04f 0000 	mov.w	r0, #0
 801324c:	f04f 0100 	mov.w	r1, #0
 8013250:	da80      	bge.n	8013154 <__ieee754_pow+0x3c>
 8013252:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013256:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801325a:	e77b      	b.n	8013154 <__ieee754_pow+0x3c>
 801325c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8013260:	d106      	bne.n	8013270 <__ieee754_pow+0x158>
 8013262:	4652      	mov	r2, sl
 8013264:	465b      	mov	r3, fp
 8013266:	4650      	mov	r0, sl
 8013268:	4659      	mov	r1, fp
 801326a:	f7ed f945 	bl	80004f8 <__aeabi_dmul>
 801326e:	e771      	b.n	8013154 <__ieee754_pow+0x3c>
 8013270:	4a4a      	ldr	r2, [pc, #296]	@ (801339c <__ieee754_pow+0x284>)
 8013272:	4590      	cmp	r8, r2
 8013274:	d109      	bne.n	801328a <__ieee754_pow+0x172>
 8013276:	2d00      	cmp	r5, #0
 8013278:	db07      	blt.n	801328a <__ieee754_pow+0x172>
 801327a:	4650      	mov	r0, sl
 801327c:	4659      	mov	r1, fp
 801327e:	b011      	add	sp, #68	@ 0x44
 8013280:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013284:	f000 bd12 	b.w	8013cac <__ieee754_sqrt>
 8013288:	2400      	movs	r4, #0
 801328a:	4650      	mov	r0, sl
 801328c:	4659      	mov	r1, fp
 801328e:	9302      	str	r3, [sp, #8]
 8013290:	f000 fc6a 	bl	8013b68 <fabs>
 8013294:	9b02      	ldr	r3, [sp, #8]
 8013296:	f1b9 0f00 	cmp.w	r9, #0
 801329a:	d127      	bne.n	80132ec <__ieee754_pow+0x1d4>
 801329c:	4a3d      	ldr	r2, [pc, #244]	@ (8013394 <__ieee754_pow+0x27c>)
 801329e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80132a2:	4594      	cmp	ip, r2
 80132a4:	d000      	beq.n	80132a8 <__ieee754_pow+0x190>
 80132a6:	bb0e      	cbnz	r6, 80132ec <__ieee754_pow+0x1d4>
 80132a8:	f1b8 0f00 	cmp.w	r8, #0
 80132ac:	da05      	bge.n	80132ba <__ieee754_pow+0x1a2>
 80132ae:	4602      	mov	r2, r0
 80132b0:	460b      	mov	r3, r1
 80132b2:	2000      	movs	r0, #0
 80132b4:	4937      	ldr	r1, [pc, #220]	@ (8013394 <__ieee754_pow+0x27c>)
 80132b6:	f7ed fa49 	bl	800074c <__aeabi_ddiv>
 80132ba:	2d00      	cmp	r5, #0
 80132bc:	f6bf af4a 	bge.w	8013154 <__ieee754_pow+0x3c>
 80132c0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80132c4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80132c8:	4326      	orrs	r6, r4
 80132ca:	d108      	bne.n	80132de <__ieee754_pow+0x1c6>
 80132cc:	4602      	mov	r2, r0
 80132ce:	460b      	mov	r3, r1
 80132d0:	4610      	mov	r0, r2
 80132d2:	4619      	mov	r1, r3
 80132d4:	f7ec ff58 	bl	8000188 <__aeabi_dsub>
 80132d8:	4602      	mov	r2, r0
 80132da:	460b      	mov	r3, r1
 80132dc:	e795      	b.n	801320a <__ieee754_pow+0xf2>
 80132de:	2c01      	cmp	r4, #1
 80132e0:	f47f af38 	bne.w	8013154 <__ieee754_pow+0x3c>
 80132e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80132e8:	4619      	mov	r1, r3
 80132ea:	e733      	b.n	8013154 <__ieee754_pow+0x3c>
 80132ec:	0fea      	lsrs	r2, r5, #31
 80132ee:	3a01      	subs	r2, #1
 80132f0:	ea52 0c04 	orrs.w	ip, r2, r4
 80132f4:	d102      	bne.n	80132fc <__ieee754_pow+0x1e4>
 80132f6:	4652      	mov	r2, sl
 80132f8:	465b      	mov	r3, fp
 80132fa:	e7e9      	b.n	80132d0 <__ieee754_pow+0x1b8>
 80132fc:	f04f 0900 	mov.w	r9, #0
 8013300:	3c01      	subs	r4, #1
 8013302:	4314      	orrs	r4, r2
 8013304:	bf14      	ite	ne
 8013306:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8013394 <__ieee754_pow+0x27c>
 801330a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80133a0 <__ieee754_pow+0x288>
 801330e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8013312:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8013316:	f240 8107 	bls.w	8013528 <__ieee754_pow+0x410>
 801331a:	4b22      	ldr	r3, [pc, #136]	@ (80133a4 <__ieee754_pow+0x28c>)
 801331c:	429f      	cmp	r7, r3
 801331e:	4b1e      	ldr	r3, [pc, #120]	@ (8013398 <__ieee754_pow+0x280>)
 8013320:	d913      	bls.n	801334a <__ieee754_pow+0x232>
 8013322:	429e      	cmp	r6, r3
 8013324:	d808      	bhi.n	8013338 <__ieee754_pow+0x220>
 8013326:	f1b8 0f00 	cmp.w	r8, #0
 801332a:	da08      	bge.n	801333e <__ieee754_pow+0x226>
 801332c:	2000      	movs	r0, #0
 801332e:	b011      	add	sp, #68	@ 0x44
 8013330:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013334:	f000 bcb4 	b.w	8013ca0 <__math_oflow>
 8013338:	f1b8 0f00 	cmp.w	r8, #0
 801333c:	dcf6      	bgt.n	801332c <__ieee754_pow+0x214>
 801333e:	2000      	movs	r0, #0
 8013340:	b011      	add	sp, #68	@ 0x44
 8013342:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013346:	f000 bca6 	b.w	8013c96 <__math_uflow>
 801334a:	429e      	cmp	r6, r3
 801334c:	d20c      	bcs.n	8013368 <__ieee754_pow+0x250>
 801334e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013352:	2200      	movs	r2, #0
 8013354:	2300      	movs	r3, #0
 8013356:	f7ed fb41 	bl	80009dc <__aeabi_dcmplt>
 801335a:	3800      	subs	r0, #0
 801335c:	bf18      	it	ne
 801335e:	2001      	movne	r0, #1
 8013360:	f1b8 0f00 	cmp.w	r8, #0
 8013364:	daec      	bge.n	8013340 <__ieee754_pow+0x228>
 8013366:	e7e2      	b.n	801332e <__ieee754_pow+0x216>
 8013368:	4b0a      	ldr	r3, [pc, #40]	@ (8013394 <__ieee754_pow+0x27c>)
 801336a:	2200      	movs	r2, #0
 801336c:	429e      	cmp	r6, r3
 801336e:	d91b      	bls.n	80133a8 <__ieee754_pow+0x290>
 8013370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013374:	2300      	movs	r3, #0
 8013376:	f7ed fb31 	bl	80009dc <__aeabi_dcmplt>
 801337a:	3800      	subs	r0, #0
 801337c:	bf18      	it	ne
 801337e:	2001      	movne	r0, #1
 8013380:	f1b8 0f00 	cmp.w	r8, #0
 8013384:	dcd3      	bgt.n	801332e <__ieee754_pow+0x216>
 8013386:	e7db      	b.n	8013340 <__ieee754_pow+0x228>
 8013388:	fff00000 	.word	0xfff00000
 801338c:	7ff00000 	.word	0x7ff00000
 8013390:	433fffff 	.word	0x433fffff
 8013394:	3ff00000 	.word	0x3ff00000
 8013398:	3fefffff 	.word	0x3fefffff
 801339c:	3fe00000 	.word	0x3fe00000
 80133a0:	bff00000 	.word	0xbff00000
 80133a4:	43f00000 	.word	0x43f00000
 80133a8:	4b5b      	ldr	r3, [pc, #364]	@ (8013518 <__ieee754_pow+0x400>)
 80133aa:	f7ec feed 	bl	8000188 <__aeabi_dsub>
 80133ae:	a352      	add	r3, pc, #328	@ (adr r3, 80134f8 <__ieee754_pow+0x3e0>)
 80133b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b4:	4604      	mov	r4, r0
 80133b6:	460d      	mov	r5, r1
 80133b8:	f7ed f89e 	bl	80004f8 <__aeabi_dmul>
 80133bc:	a350      	add	r3, pc, #320	@ (adr r3, 8013500 <__ieee754_pow+0x3e8>)
 80133be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c2:	4606      	mov	r6, r0
 80133c4:	460f      	mov	r7, r1
 80133c6:	4620      	mov	r0, r4
 80133c8:	4629      	mov	r1, r5
 80133ca:	f7ed f895 	bl	80004f8 <__aeabi_dmul>
 80133ce:	2200      	movs	r2, #0
 80133d0:	4682      	mov	sl, r0
 80133d2:	468b      	mov	fp, r1
 80133d4:	4620      	mov	r0, r4
 80133d6:	4629      	mov	r1, r5
 80133d8:	4b50      	ldr	r3, [pc, #320]	@ (801351c <__ieee754_pow+0x404>)
 80133da:	f7ed f88d 	bl	80004f8 <__aeabi_dmul>
 80133de:	4602      	mov	r2, r0
 80133e0:	460b      	mov	r3, r1
 80133e2:	a149      	add	r1, pc, #292	@ (adr r1, 8013508 <__ieee754_pow+0x3f0>)
 80133e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133e8:	f7ec fece 	bl	8000188 <__aeabi_dsub>
 80133ec:	4622      	mov	r2, r4
 80133ee:	462b      	mov	r3, r5
 80133f0:	f7ed f882 	bl	80004f8 <__aeabi_dmul>
 80133f4:	4602      	mov	r2, r0
 80133f6:	460b      	mov	r3, r1
 80133f8:	2000      	movs	r0, #0
 80133fa:	4949      	ldr	r1, [pc, #292]	@ (8013520 <__ieee754_pow+0x408>)
 80133fc:	f7ec fec4 	bl	8000188 <__aeabi_dsub>
 8013400:	4622      	mov	r2, r4
 8013402:	4680      	mov	r8, r0
 8013404:	4689      	mov	r9, r1
 8013406:	462b      	mov	r3, r5
 8013408:	4620      	mov	r0, r4
 801340a:	4629      	mov	r1, r5
 801340c:	f7ed f874 	bl	80004f8 <__aeabi_dmul>
 8013410:	4602      	mov	r2, r0
 8013412:	460b      	mov	r3, r1
 8013414:	4640      	mov	r0, r8
 8013416:	4649      	mov	r1, r9
 8013418:	f7ed f86e 	bl	80004f8 <__aeabi_dmul>
 801341c:	a33c      	add	r3, pc, #240	@ (adr r3, 8013510 <__ieee754_pow+0x3f8>)
 801341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013422:	f7ed f869 	bl	80004f8 <__aeabi_dmul>
 8013426:	4602      	mov	r2, r0
 8013428:	460b      	mov	r3, r1
 801342a:	4650      	mov	r0, sl
 801342c:	4659      	mov	r1, fp
 801342e:	f7ec feab 	bl	8000188 <__aeabi_dsub>
 8013432:	2400      	movs	r4, #0
 8013434:	4602      	mov	r2, r0
 8013436:	460b      	mov	r3, r1
 8013438:	4680      	mov	r8, r0
 801343a:	4689      	mov	r9, r1
 801343c:	4630      	mov	r0, r6
 801343e:	4639      	mov	r1, r7
 8013440:	f7ec fea4 	bl	800018c <__adddf3>
 8013444:	4632      	mov	r2, r6
 8013446:	463b      	mov	r3, r7
 8013448:	4620      	mov	r0, r4
 801344a:	460d      	mov	r5, r1
 801344c:	f7ec fe9c 	bl	8000188 <__aeabi_dsub>
 8013450:	4602      	mov	r2, r0
 8013452:	460b      	mov	r3, r1
 8013454:	4640      	mov	r0, r8
 8013456:	4649      	mov	r1, r9
 8013458:	f7ec fe96 	bl	8000188 <__aeabi_dsub>
 801345c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013460:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013464:	2300      	movs	r3, #0
 8013466:	9304      	str	r3, [sp, #16]
 8013468:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801346c:	4606      	mov	r6, r0
 801346e:	460f      	mov	r7, r1
 8013470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013474:	4652      	mov	r2, sl
 8013476:	465b      	mov	r3, fp
 8013478:	f7ec fe86 	bl	8000188 <__aeabi_dsub>
 801347c:	4622      	mov	r2, r4
 801347e:	462b      	mov	r3, r5
 8013480:	f7ed f83a 	bl	80004f8 <__aeabi_dmul>
 8013484:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013488:	4680      	mov	r8, r0
 801348a:	4689      	mov	r9, r1
 801348c:	4630      	mov	r0, r6
 801348e:	4639      	mov	r1, r7
 8013490:	f7ed f832 	bl	80004f8 <__aeabi_dmul>
 8013494:	4602      	mov	r2, r0
 8013496:	460b      	mov	r3, r1
 8013498:	4640      	mov	r0, r8
 801349a:	4649      	mov	r1, r9
 801349c:	f7ec fe76 	bl	800018c <__adddf3>
 80134a0:	4652      	mov	r2, sl
 80134a2:	465b      	mov	r3, fp
 80134a4:	4606      	mov	r6, r0
 80134a6:	460f      	mov	r7, r1
 80134a8:	4620      	mov	r0, r4
 80134aa:	4629      	mov	r1, r5
 80134ac:	f7ed f824 	bl	80004f8 <__aeabi_dmul>
 80134b0:	460b      	mov	r3, r1
 80134b2:	4602      	mov	r2, r0
 80134b4:	4680      	mov	r8, r0
 80134b6:	4689      	mov	r9, r1
 80134b8:	4630      	mov	r0, r6
 80134ba:	4639      	mov	r1, r7
 80134bc:	f7ec fe66 	bl	800018c <__adddf3>
 80134c0:	4b18      	ldr	r3, [pc, #96]	@ (8013524 <__ieee754_pow+0x40c>)
 80134c2:	4604      	mov	r4, r0
 80134c4:	4299      	cmp	r1, r3
 80134c6:	460d      	mov	r5, r1
 80134c8:	468a      	mov	sl, r1
 80134ca:	468b      	mov	fp, r1
 80134cc:	f340 82e0 	ble.w	8013a90 <__ieee754_pow+0x978>
 80134d0:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80134d4:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80134d8:	4303      	orrs	r3, r0
 80134da:	f000 81df 	beq.w	801389c <__ieee754_pow+0x784>
 80134de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134e2:	2200      	movs	r2, #0
 80134e4:	2300      	movs	r3, #0
 80134e6:	f7ed fa79 	bl	80009dc <__aeabi_dcmplt>
 80134ea:	3800      	subs	r0, #0
 80134ec:	bf18      	it	ne
 80134ee:	2001      	movne	r0, #1
 80134f0:	e71d      	b.n	801332e <__ieee754_pow+0x216>
 80134f2:	bf00      	nop
 80134f4:	f3af 8000 	nop.w
 80134f8:	60000000 	.word	0x60000000
 80134fc:	3ff71547 	.word	0x3ff71547
 8013500:	f85ddf44 	.word	0xf85ddf44
 8013504:	3e54ae0b 	.word	0x3e54ae0b
 8013508:	55555555 	.word	0x55555555
 801350c:	3fd55555 	.word	0x3fd55555
 8013510:	652b82fe 	.word	0x652b82fe
 8013514:	3ff71547 	.word	0x3ff71547
 8013518:	3ff00000 	.word	0x3ff00000
 801351c:	3fd00000 	.word	0x3fd00000
 8013520:	3fe00000 	.word	0x3fe00000
 8013524:	408fffff 	.word	0x408fffff
 8013528:	4ad3      	ldr	r2, [pc, #844]	@ (8013878 <__ieee754_pow+0x760>)
 801352a:	402a      	ands	r2, r5
 801352c:	2a00      	cmp	r2, #0
 801352e:	f040 817a 	bne.w	8013826 <__ieee754_pow+0x70e>
 8013532:	4bd2      	ldr	r3, [pc, #840]	@ (801387c <__ieee754_pow+0x764>)
 8013534:	2200      	movs	r2, #0
 8013536:	f7ec ffdf 	bl	80004f8 <__aeabi_dmul>
 801353a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 801353e:	460b      	mov	r3, r1
 8013540:	151a      	asrs	r2, r3, #20
 8013542:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013546:	4422      	add	r2, r4
 8013548:	920a      	str	r2, [sp, #40]	@ 0x28
 801354a:	4acd      	ldr	r2, [pc, #820]	@ (8013880 <__ieee754_pow+0x768>)
 801354c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013550:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8013554:	4293      	cmp	r3, r2
 8013556:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801355a:	dd08      	ble.n	801356e <__ieee754_pow+0x456>
 801355c:	4ac9      	ldr	r2, [pc, #804]	@ (8013884 <__ieee754_pow+0x76c>)
 801355e:	4293      	cmp	r3, r2
 8013560:	f340 8163 	ble.w	801382a <__ieee754_pow+0x712>
 8013564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013566:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801356a:	3301      	adds	r3, #1
 801356c:	930a      	str	r3, [sp, #40]	@ 0x28
 801356e:	2600      	movs	r6, #0
 8013570:	00f3      	lsls	r3, r6, #3
 8013572:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013574:	4bc4      	ldr	r3, [pc, #784]	@ (8013888 <__ieee754_pow+0x770>)
 8013576:	4629      	mov	r1, r5
 8013578:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801357c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013580:	461a      	mov	r2, r3
 8013582:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8013586:	4623      	mov	r3, r4
 8013588:	4682      	mov	sl, r0
 801358a:	f7ec fdfd 	bl	8000188 <__aeabi_dsub>
 801358e:	4652      	mov	r2, sl
 8013590:	462b      	mov	r3, r5
 8013592:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013596:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801359a:	f7ec fdf7 	bl	800018c <__adddf3>
 801359e:	4602      	mov	r2, r0
 80135a0:	460b      	mov	r3, r1
 80135a2:	2000      	movs	r0, #0
 80135a4:	49b9      	ldr	r1, [pc, #740]	@ (801388c <__ieee754_pow+0x774>)
 80135a6:	f7ed f8d1 	bl	800074c <__aeabi_ddiv>
 80135aa:	4602      	mov	r2, r0
 80135ac:	460b      	mov	r3, r1
 80135ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80135b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80135b6:	f7ec ff9f 	bl	80004f8 <__aeabi_dmul>
 80135ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80135be:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80135c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80135c6:	2300      	movs	r3, #0
 80135c8:	2200      	movs	r2, #0
 80135ca:	46ab      	mov	fp, r5
 80135cc:	106d      	asrs	r5, r5, #1
 80135ce:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80135d2:	9304      	str	r3, [sp, #16]
 80135d4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80135d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80135dc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80135e0:	4640      	mov	r0, r8
 80135e2:	4649      	mov	r1, r9
 80135e4:	4614      	mov	r4, r2
 80135e6:	461d      	mov	r5, r3
 80135e8:	f7ec ff86 	bl	80004f8 <__aeabi_dmul>
 80135ec:	4602      	mov	r2, r0
 80135ee:	460b      	mov	r3, r1
 80135f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80135f4:	f7ec fdc8 	bl	8000188 <__aeabi_dsub>
 80135f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80135fc:	4606      	mov	r6, r0
 80135fe:	460f      	mov	r7, r1
 8013600:	4620      	mov	r0, r4
 8013602:	4629      	mov	r1, r5
 8013604:	f7ec fdc0 	bl	8000188 <__aeabi_dsub>
 8013608:	4602      	mov	r2, r0
 801360a:	460b      	mov	r3, r1
 801360c:	4650      	mov	r0, sl
 801360e:	4659      	mov	r1, fp
 8013610:	f7ec fdba 	bl	8000188 <__aeabi_dsub>
 8013614:	4642      	mov	r2, r8
 8013616:	464b      	mov	r3, r9
 8013618:	f7ec ff6e 	bl	80004f8 <__aeabi_dmul>
 801361c:	4602      	mov	r2, r0
 801361e:	460b      	mov	r3, r1
 8013620:	4630      	mov	r0, r6
 8013622:	4639      	mov	r1, r7
 8013624:	f7ec fdb0 	bl	8000188 <__aeabi_dsub>
 8013628:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801362c:	f7ec ff64 	bl	80004f8 <__aeabi_dmul>
 8013630:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013634:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013638:	4610      	mov	r0, r2
 801363a:	4619      	mov	r1, r3
 801363c:	f7ec ff5c 	bl	80004f8 <__aeabi_dmul>
 8013640:	a37b      	add	r3, pc, #492	@ (adr r3, 8013830 <__ieee754_pow+0x718>)
 8013642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013646:	4604      	mov	r4, r0
 8013648:	460d      	mov	r5, r1
 801364a:	f7ec ff55 	bl	80004f8 <__aeabi_dmul>
 801364e:	a37a      	add	r3, pc, #488	@ (adr r3, 8013838 <__ieee754_pow+0x720>)
 8013650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013654:	f7ec fd9a 	bl	800018c <__adddf3>
 8013658:	4622      	mov	r2, r4
 801365a:	462b      	mov	r3, r5
 801365c:	f7ec ff4c 	bl	80004f8 <__aeabi_dmul>
 8013660:	a377      	add	r3, pc, #476	@ (adr r3, 8013840 <__ieee754_pow+0x728>)
 8013662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013666:	f7ec fd91 	bl	800018c <__adddf3>
 801366a:	4622      	mov	r2, r4
 801366c:	462b      	mov	r3, r5
 801366e:	f7ec ff43 	bl	80004f8 <__aeabi_dmul>
 8013672:	a375      	add	r3, pc, #468	@ (adr r3, 8013848 <__ieee754_pow+0x730>)
 8013674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013678:	f7ec fd88 	bl	800018c <__adddf3>
 801367c:	4622      	mov	r2, r4
 801367e:	462b      	mov	r3, r5
 8013680:	f7ec ff3a 	bl	80004f8 <__aeabi_dmul>
 8013684:	a372      	add	r3, pc, #456	@ (adr r3, 8013850 <__ieee754_pow+0x738>)
 8013686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801368a:	f7ec fd7f 	bl	800018c <__adddf3>
 801368e:	4622      	mov	r2, r4
 8013690:	462b      	mov	r3, r5
 8013692:	f7ec ff31 	bl	80004f8 <__aeabi_dmul>
 8013696:	a370      	add	r3, pc, #448	@ (adr r3, 8013858 <__ieee754_pow+0x740>)
 8013698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801369c:	f7ec fd76 	bl	800018c <__adddf3>
 80136a0:	4622      	mov	r2, r4
 80136a2:	4606      	mov	r6, r0
 80136a4:	460f      	mov	r7, r1
 80136a6:	462b      	mov	r3, r5
 80136a8:	4620      	mov	r0, r4
 80136aa:	4629      	mov	r1, r5
 80136ac:	f7ec ff24 	bl	80004f8 <__aeabi_dmul>
 80136b0:	4602      	mov	r2, r0
 80136b2:	460b      	mov	r3, r1
 80136b4:	4630      	mov	r0, r6
 80136b6:	4639      	mov	r1, r7
 80136b8:	f7ec ff1e 	bl	80004f8 <__aeabi_dmul>
 80136bc:	4604      	mov	r4, r0
 80136be:	460d      	mov	r5, r1
 80136c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80136c4:	4642      	mov	r2, r8
 80136c6:	464b      	mov	r3, r9
 80136c8:	f7ec fd60 	bl	800018c <__adddf3>
 80136cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80136d0:	f7ec ff12 	bl	80004f8 <__aeabi_dmul>
 80136d4:	4622      	mov	r2, r4
 80136d6:	462b      	mov	r3, r5
 80136d8:	f7ec fd58 	bl	800018c <__adddf3>
 80136dc:	4642      	mov	r2, r8
 80136de:	4682      	mov	sl, r0
 80136e0:	468b      	mov	fp, r1
 80136e2:	464b      	mov	r3, r9
 80136e4:	4640      	mov	r0, r8
 80136e6:	4649      	mov	r1, r9
 80136e8:	f7ec ff06 	bl	80004f8 <__aeabi_dmul>
 80136ec:	2200      	movs	r2, #0
 80136ee:	4b68      	ldr	r3, [pc, #416]	@ (8013890 <__ieee754_pow+0x778>)
 80136f0:	4606      	mov	r6, r0
 80136f2:	460f      	mov	r7, r1
 80136f4:	f7ec fd4a 	bl	800018c <__adddf3>
 80136f8:	4652      	mov	r2, sl
 80136fa:	465b      	mov	r3, fp
 80136fc:	f7ec fd46 	bl	800018c <__adddf3>
 8013700:	2400      	movs	r4, #0
 8013702:	460d      	mov	r5, r1
 8013704:	4622      	mov	r2, r4
 8013706:	460b      	mov	r3, r1
 8013708:	4640      	mov	r0, r8
 801370a:	4649      	mov	r1, r9
 801370c:	f7ec fef4 	bl	80004f8 <__aeabi_dmul>
 8013710:	2200      	movs	r2, #0
 8013712:	4680      	mov	r8, r0
 8013714:	4689      	mov	r9, r1
 8013716:	4620      	mov	r0, r4
 8013718:	4629      	mov	r1, r5
 801371a:	4b5d      	ldr	r3, [pc, #372]	@ (8013890 <__ieee754_pow+0x778>)
 801371c:	f7ec fd34 	bl	8000188 <__aeabi_dsub>
 8013720:	4632      	mov	r2, r6
 8013722:	463b      	mov	r3, r7
 8013724:	f7ec fd30 	bl	8000188 <__aeabi_dsub>
 8013728:	4602      	mov	r2, r0
 801372a:	460b      	mov	r3, r1
 801372c:	4650      	mov	r0, sl
 801372e:	4659      	mov	r1, fp
 8013730:	f7ec fd2a 	bl	8000188 <__aeabi_dsub>
 8013734:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013738:	f7ec fede 	bl	80004f8 <__aeabi_dmul>
 801373c:	4622      	mov	r2, r4
 801373e:	4606      	mov	r6, r0
 8013740:	460f      	mov	r7, r1
 8013742:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013746:	462b      	mov	r3, r5
 8013748:	f7ec fed6 	bl	80004f8 <__aeabi_dmul>
 801374c:	4602      	mov	r2, r0
 801374e:	460b      	mov	r3, r1
 8013750:	4630      	mov	r0, r6
 8013752:	4639      	mov	r1, r7
 8013754:	f7ec fd1a 	bl	800018c <__adddf3>
 8013758:	2400      	movs	r4, #0
 801375a:	4606      	mov	r6, r0
 801375c:	460f      	mov	r7, r1
 801375e:	4602      	mov	r2, r0
 8013760:	460b      	mov	r3, r1
 8013762:	4640      	mov	r0, r8
 8013764:	4649      	mov	r1, r9
 8013766:	f7ec fd11 	bl	800018c <__adddf3>
 801376a:	a33d      	add	r3, pc, #244	@ (adr r3, 8013860 <__ieee754_pow+0x748>)
 801376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013770:	4620      	mov	r0, r4
 8013772:	460d      	mov	r5, r1
 8013774:	f7ec fec0 	bl	80004f8 <__aeabi_dmul>
 8013778:	4642      	mov	r2, r8
 801377a:	464b      	mov	r3, r9
 801377c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013780:	4620      	mov	r0, r4
 8013782:	4629      	mov	r1, r5
 8013784:	f7ec fd00 	bl	8000188 <__aeabi_dsub>
 8013788:	4602      	mov	r2, r0
 801378a:	460b      	mov	r3, r1
 801378c:	4630      	mov	r0, r6
 801378e:	4639      	mov	r1, r7
 8013790:	f7ec fcfa 	bl	8000188 <__aeabi_dsub>
 8013794:	a334      	add	r3, pc, #208	@ (adr r3, 8013868 <__ieee754_pow+0x750>)
 8013796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801379a:	f7ec fead 	bl	80004f8 <__aeabi_dmul>
 801379e:	a334      	add	r3, pc, #208	@ (adr r3, 8013870 <__ieee754_pow+0x758>)
 80137a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137a4:	4606      	mov	r6, r0
 80137a6:	460f      	mov	r7, r1
 80137a8:	4620      	mov	r0, r4
 80137aa:	4629      	mov	r1, r5
 80137ac:	f7ec fea4 	bl	80004f8 <__aeabi_dmul>
 80137b0:	4602      	mov	r2, r0
 80137b2:	460b      	mov	r3, r1
 80137b4:	4630      	mov	r0, r6
 80137b6:	4639      	mov	r1, r7
 80137b8:	f7ec fce8 	bl	800018c <__adddf3>
 80137bc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80137be:	4b35      	ldr	r3, [pc, #212]	@ (8013894 <__ieee754_pow+0x77c>)
 80137c0:	2400      	movs	r4, #0
 80137c2:	4413      	add	r3, r2
 80137c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c8:	f7ec fce0 	bl	800018c <__adddf3>
 80137cc:	4682      	mov	sl, r0
 80137ce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80137d0:	468b      	mov	fp, r1
 80137d2:	f7ec fe27 	bl	8000424 <__aeabi_i2d>
 80137d6:	4606      	mov	r6, r0
 80137d8:	460f      	mov	r7, r1
 80137da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80137dc:	4b2e      	ldr	r3, [pc, #184]	@ (8013898 <__ieee754_pow+0x780>)
 80137de:	4413      	add	r3, r2
 80137e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80137e4:	4652      	mov	r2, sl
 80137e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80137ea:	465b      	mov	r3, fp
 80137ec:	f7ec fcce 	bl	800018c <__adddf3>
 80137f0:	4642      	mov	r2, r8
 80137f2:	464b      	mov	r3, r9
 80137f4:	f7ec fcca 	bl	800018c <__adddf3>
 80137f8:	4632      	mov	r2, r6
 80137fa:	463b      	mov	r3, r7
 80137fc:	f7ec fcc6 	bl	800018c <__adddf3>
 8013800:	4632      	mov	r2, r6
 8013802:	463b      	mov	r3, r7
 8013804:	4620      	mov	r0, r4
 8013806:	460d      	mov	r5, r1
 8013808:	f7ec fcbe 	bl	8000188 <__aeabi_dsub>
 801380c:	4642      	mov	r2, r8
 801380e:	464b      	mov	r3, r9
 8013810:	f7ec fcba 	bl	8000188 <__aeabi_dsub>
 8013814:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013818:	f7ec fcb6 	bl	8000188 <__aeabi_dsub>
 801381c:	4602      	mov	r2, r0
 801381e:	460b      	mov	r3, r1
 8013820:	4650      	mov	r0, sl
 8013822:	4659      	mov	r1, fp
 8013824:	e618      	b.n	8013458 <__ieee754_pow+0x340>
 8013826:	2400      	movs	r4, #0
 8013828:	e68a      	b.n	8013540 <__ieee754_pow+0x428>
 801382a:	2601      	movs	r6, #1
 801382c:	e6a0      	b.n	8013570 <__ieee754_pow+0x458>
 801382e:	bf00      	nop
 8013830:	4a454eef 	.word	0x4a454eef
 8013834:	3fca7e28 	.word	0x3fca7e28
 8013838:	93c9db65 	.word	0x93c9db65
 801383c:	3fcd864a 	.word	0x3fcd864a
 8013840:	a91d4101 	.word	0xa91d4101
 8013844:	3fd17460 	.word	0x3fd17460
 8013848:	518f264d 	.word	0x518f264d
 801384c:	3fd55555 	.word	0x3fd55555
 8013850:	db6fabff 	.word	0xdb6fabff
 8013854:	3fdb6db6 	.word	0x3fdb6db6
 8013858:	33333303 	.word	0x33333303
 801385c:	3fe33333 	.word	0x3fe33333
 8013860:	e0000000 	.word	0xe0000000
 8013864:	3feec709 	.word	0x3feec709
 8013868:	dc3a03fd 	.word	0xdc3a03fd
 801386c:	3feec709 	.word	0x3feec709
 8013870:	145b01f5 	.word	0x145b01f5
 8013874:	be3e2fe0 	.word	0xbe3e2fe0
 8013878:	7ff00000 	.word	0x7ff00000
 801387c:	43400000 	.word	0x43400000
 8013880:	0003988e 	.word	0x0003988e
 8013884:	000bb679 	.word	0x000bb679
 8013888:	08014058 	.word	0x08014058
 801388c:	3ff00000 	.word	0x3ff00000
 8013890:	40080000 	.word	0x40080000
 8013894:	08014038 	.word	0x08014038
 8013898:	08014048 	.word	0x08014048
 801389c:	a39a      	add	r3, pc, #616	@ (adr r3, 8013b08 <__ieee754_pow+0x9f0>)
 801389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a2:	4630      	mov	r0, r6
 80138a4:	4639      	mov	r1, r7
 80138a6:	f7ec fc71 	bl	800018c <__adddf3>
 80138aa:	4642      	mov	r2, r8
 80138ac:	e9cd 0100 	strd	r0, r1, [sp]
 80138b0:	464b      	mov	r3, r9
 80138b2:	4620      	mov	r0, r4
 80138b4:	4629      	mov	r1, r5
 80138b6:	f7ec fc67 	bl	8000188 <__aeabi_dsub>
 80138ba:	4602      	mov	r2, r0
 80138bc:	460b      	mov	r3, r1
 80138be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138c2:	f7ed f8a9 	bl	8000a18 <__aeabi_dcmpgt>
 80138c6:	2800      	cmp	r0, #0
 80138c8:	f47f ae09 	bne.w	80134de <__ieee754_pow+0x3c6>
 80138cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80138d0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80138d4:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80138d8:	fa43 fa0a 	asr.w	sl, r3, sl
 80138dc:	44da      	add	sl, fp
 80138de:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80138e2:	489b      	ldr	r0, [pc, #620]	@ (8013b50 <__ieee754_pow+0xa38>)
 80138e4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80138e8:	4108      	asrs	r0, r1
 80138ea:	ea00 030a 	and.w	r3, r0, sl
 80138ee:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80138f2:	f1c1 0114 	rsb	r1, r1, #20
 80138f6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80138fa:	4640      	mov	r0, r8
 80138fc:	fa4a fa01 	asr.w	sl, sl, r1
 8013900:	f1bb 0f00 	cmp.w	fp, #0
 8013904:	4649      	mov	r1, r9
 8013906:	f04f 0200 	mov.w	r2, #0
 801390a:	bfb8      	it	lt
 801390c:	f1ca 0a00 	rsblt	sl, sl, #0
 8013910:	f7ec fc3a 	bl	8000188 <__aeabi_dsub>
 8013914:	4680      	mov	r8, r0
 8013916:	4689      	mov	r9, r1
 8013918:	2400      	movs	r4, #0
 801391a:	4632      	mov	r2, r6
 801391c:	463b      	mov	r3, r7
 801391e:	4640      	mov	r0, r8
 8013920:	4649      	mov	r1, r9
 8013922:	f7ec fc33 	bl	800018c <__adddf3>
 8013926:	a37a      	add	r3, pc, #488	@ (adr r3, 8013b10 <__ieee754_pow+0x9f8>)
 8013928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801392c:	4620      	mov	r0, r4
 801392e:	460d      	mov	r5, r1
 8013930:	f7ec fde2 	bl	80004f8 <__aeabi_dmul>
 8013934:	4642      	mov	r2, r8
 8013936:	464b      	mov	r3, r9
 8013938:	e9cd 0100 	strd	r0, r1, [sp]
 801393c:	4620      	mov	r0, r4
 801393e:	4629      	mov	r1, r5
 8013940:	f7ec fc22 	bl	8000188 <__aeabi_dsub>
 8013944:	4602      	mov	r2, r0
 8013946:	460b      	mov	r3, r1
 8013948:	4630      	mov	r0, r6
 801394a:	4639      	mov	r1, r7
 801394c:	f7ec fc1c 	bl	8000188 <__aeabi_dsub>
 8013950:	a371      	add	r3, pc, #452	@ (adr r3, 8013b18 <__ieee754_pow+0xa00>)
 8013952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013956:	f7ec fdcf 	bl	80004f8 <__aeabi_dmul>
 801395a:	a371      	add	r3, pc, #452	@ (adr r3, 8013b20 <__ieee754_pow+0xa08>)
 801395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013960:	4680      	mov	r8, r0
 8013962:	4689      	mov	r9, r1
 8013964:	4620      	mov	r0, r4
 8013966:	4629      	mov	r1, r5
 8013968:	f7ec fdc6 	bl	80004f8 <__aeabi_dmul>
 801396c:	4602      	mov	r2, r0
 801396e:	460b      	mov	r3, r1
 8013970:	4640      	mov	r0, r8
 8013972:	4649      	mov	r1, r9
 8013974:	f7ec fc0a 	bl	800018c <__adddf3>
 8013978:	4604      	mov	r4, r0
 801397a:	460d      	mov	r5, r1
 801397c:	4602      	mov	r2, r0
 801397e:	460b      	mov	r3, r1
 8013980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013984:	f7ec fc02 	bl	800018c <__adddf3>
 8013988:	e9dd 2300 	ldrd	r2, r3, [sp]
 801398c:	4680      	mov	r8, r0
 801398e:	4689      	mov	r9, r1
 8013990:	f7ec fbfa 	bl	8000188 <__aeabi_dsub>
 8013994:	4602      	mov	r2, r0
 8013996:	460b      	mov	r3, r1
 8013998:	4620      	mov	r0, r4
 801399a:	4629      	mov	r1, r5
 801399c:	f7ec fbf4 	bl	8000188 <__aeabi_dsub>
 80139a0:	4642      	mov	r2, r8
 80139a2:	4606      	mov	r6, r0
 80139a4:	460f      	mov	r7, r1
 80139a6:	464b      	mov	r3, r9
 80139a8:	4640      	mov	r0, r8
 80139aa:	4649      	mov	r1, r9
 80139ac:	f7ec fda4 	bl	80004f8 <__aeabi_dmul>
 80139b0:	a35d      	add	r3, pc, #372	@ (adr r3, 8013b28 <__ieee754_pow+0xa10>)
 80139b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b6:	4604      	mov	r4, r0
 80139b8:	460d      	mov	r5, r1
 80139ba:	f7ec fd9d 	bl	80004f8 <__aeabi_dmul>
 80139be:	a35c      	add	r3, pc, #368	@ (adr r3, 8013b30 <__ieee754_pow+0xa18>)
 80139c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c4:	f7ec fbe0 	bl	8000188 <__aeabi_dsub>
 80139c8:	4622      	mov	r2, r4
 80139ca:	462b      	mov	r3, r5
 80139cc:	f7ec fd94 	bl	80004f8 <__aeabi_dmul>
 80139d0:	a359      	add	r3, pc, #356	@ (adr r3, 8013b38 <__ieee754_pow+0xa20>)
 80139d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d6:	f7ec fbd9 	bl	800018c <__adddf3>
 80139da:	4622      	mov	r2, r4
 80139dc:	462b      	mov	r3, r5
 80139de:	f7ec fd8b 	bl	80004f8 <__aeabi_dmul>
 80139e2:	a357      	add	r3, pc, #348	@ (adr r3, 8013b40 <__ieee754_pow+0xa28>)
 80139e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e8:	f7ec fbce 	bl	8000188 <__aeabi_dsub>
 80139ec:	4622      	mov	r2, r4
 80139ee:	462b      	mov	r3, r5
 80139f0:	f7ec fd82 	bl	80004f8 <__aeabi_dmul>
 80139f4:	a354      	add	r3, pc, #336	@ (adr r3, 8013b48 <__ieee754_pow+0xa30>)
 80139f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139fa:	f7ec fbc7 	bl	800018c <__adddf3>
 80139fe:	4622      	mov	r2, r4
 8013a00:	462b      	mov	r3, r5
 8013a02:	f7ec fd79 	bl	80004f8 <__aeabi_dmul>
 8013a06:	4602      	mov	r2, r0
 8013a08:	460b      	mov	r3, r1
 8013a0a:	4640      	mov	r0, r8
 8013a0c:	4649      	mov	r1, r9
 8013a0e:	f7ec fbbb 	bl	8000188 <__aeabi_dsub>
 8013a12:	4604      	mov	r4, r0
 8013a14:	460d      	mov	r5, r1
 8013a16:	4602      	mov	r2, r0
 8013a18:	460b      	mov	r3, r1
 8013a1a:	4640      	mov	r0, r8
 8013a1c:	4649      	mov	r1, r9
 8013a1e:	f7ec fd6b 	bl	80004f8 <__aeabi_dmul>
 8013a22:	2200      	movs	r2, #0
 8013a24:	e9cd 0100 	strd	r0, r1, [sp]
 8013a28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013a2c:	4620      	mov	r0, r4
 8013a2e:	4629      	mov	r1, r5
 8013a30:	f7ec fbaa 	bl	8000188 <__aeabi_dsub>
 8013a34:	4602      	mov	r2, r0
 8013a36:	460b      	mov	r3, r1
 8013a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a3c:	f7ec fe86 	bl	800074c <__aeabi_ddiv>
 8013a40:	4632      	mov	r2, r6
 8013a42:	4604      	mov	r4, r0
 8013a44:	460d      	mov	r5, r1
 8013a46:	463b      	mov	r3, r7
 8013a48:	4640      	mov	r0, r8
 8013a4a:	4649      	mov	r1, r9
 8013a4c:	f7ec fd54 	bl	80004f8 <__aeabi_dmul>
 8013a50:	4632      	mov	r2, r6
 8013a52:	463b      	mov	r3, r7
 8013a54:	f7ec fb9a 	bl	800018c <__adddf3>
 8013a58:	4602      	mov	r2, r0
 8013a5a:	460b      	mov	r3, r1
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	4629      	mov	r1, r5
 8013a60:	f7ec fb92 	bl	8000188 <__aeabi_dsub>
 8013a64:	4642      	mov	r2, r8
 8013a66:	464b      	mov	r3, r9
 8013a68:	f7ec fb8e 	bl	8000188 <__aeabi_dsub>
 8013a6c:	4602      	mov	r2, r0
 8013a6e:	460b      	mov	r3, r1
 8013a70:	2000      	movs	r0, #0
 8013a72:	4938      	ldr	r1, [pc, #224]	@ (8013b54 <__ieee754_pow+0xa3c>)
 8013a74:	f7ec fb88 	bl	8000188 <__aeabi_dsub>
 8013a78:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8013a7c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8013a80:	da2e      	bge.n	8013ae0 <__ieee754_pow+0x9c8>
 8013a82:	4652      	mov	r2, sl
 8013a84:	f000 f874 	bl	8013b70 <scalbn>
 8013a88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013a8c:	f7ff bbed 	b.w	801326a <__ieee754_pow+0x152>
 8013a90:	4c31      	ldr	r4, [pc, #196]	@ (8013b58 <__ieee754_pow+0xa40>)
 8013a92:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013a96:	42a3      	cmp	r3, r4
 8013a98:	d91a      	bls.n	8013ad0 <__ieee754_pow+0x9b8>
 8013a9a:	4b30      	ldr	r3, [pc, #192]	@ (8013b5c <__ieee754_pow+0xa44>)
 8013a9c:	440b      	add	r3, r1
 8013a9e:	4303      	orrs	r3, r0
 8013aa0:	d009      	beq.n	8013ab6 <__ieee754_pow+0x99e>
 8013aa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	f7ec ff97 	bl	80009dc <__aeabi_dcmplt>
 8013aae:	3800      	subs	r0, #0
 8013ab0:	bf18      	it	ne
 8013ab2:	2001      	movne	r0, #1
 8013ab4:	e444      	b.n	8013340 <__ieee754_pow+0x228>
 8013ab6:	4642      	mov	r2, r8
 8013ab8:	464b      	mov	r3, r9
 8013aba:	f7ec fb65 	bl	8000188 <__aeabi_dsub>
 8013abe:	4632      	mov	r2, r6
 8013ac0:	463b      	mov	r3, r7
 8013ac2:	f7ec ff9f 	bl	8000a04 <__aeabi_dcmpge>
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	d1eb      	bne.n	8013aa2 <__ieee754_pow+0x98a>
 8013aca:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8013b60 <__ieee754_pow+0xa48>
 8013ace:	e6fd      	b.n	80138cc <__ieee754_pow+0x7b4>
 8013ad0:	469a      	mov	sl, r3
 8013ad2:	4b24      	ldr	r3, [pc, #144]	@ (8013b64 <__ieee754_pow+0xa4c>)
 8013ad4:	459a      	cmp	sl, r3
 8013ad6:	f63f aef9 	bhi.w	80138cc <__ieee754_pow+0x7b4>
 8013ada:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013ade:	e71b      	b.n	8013918 <__ieee754_pow+0x800>
 8013ae0:	4621      	mov	r1, r4
 8013ae2:	e7d1      	b.n	8013a88 <__ieee754_pow+0x970>
 8013ae4:	2000      	movs	r0, #0
 8013ae6:	491b      	ldr	r1, [pc, #108]	@ (8013b54 <__ieee754_pow+0xa3c>)
 8013ae8:	f7ff bb34 	b.w	8013154 <__ieee754_pow+0x3c>
 8013aec:	2000      	movs	r0, #0
 8013aee:	2100      	movs	r1, #0
 8013af0:	f7ff bb30 	b.w	8013154 <__ieee754_pow+0x3c>
 8013af4:	4650      	mov	r0, sl
 8013af6:	4659      	mov	r1, fp
 8013af8:	f7ff bb2c 	b.w	8013154 <__ieee754_pow+0x3c>
 8013afc:	460c      	mov	r4, r1
 8013afe:	f7ff bb79 	b.w	80131f4 <__ieee754_pow+0xdc>
 8013b02:	2400      	movs	r4, #0
 8013b04:	f7ff bb64 	b.w	80131d0 <__ieee754_pow+0xb8>
 8013b08:	652b82fe 	.word	0x652b82fe
 8013b0c:	3c971547 	.word	0x3c971547
 8013b10:	00000000 	.word	0x00000000
 8013b14:	3fe62e43 	.word	0x3fe62e43
 8013b18:	fefa39ef 	.word	0xfefa39ef
 8013b1c:	3fe62e42 	.word	0x3fe62e42
 8013b20:	0ca86c39 	.word	0x0ca86c39
 8013b24:	be205c61 	.word	0xbe205c61
 8013b28:	72bea4d0 	.word	0x72bea4d0
 8013b2c:	3e663769 	.word	0x3e663769
 8013b30:	c5d26bf1 	.word	0xc5d26bf1
 8013b34:	3ebbbd41 	.word	0x3ebbbd41
 8013b38:	af25de2c 	.word	0xaf25de2c
 8013b3c:	3f11566a 	.word	0x3f11566a
 8013b40:	16bebd93 	.word	0x16bebd93
 8013b44:	3f66c16c 	.word	0x3f66c16c
 8013b48:	5555553e 	.word	0x5555553e
 8013b4c:	3fc55555 	.word	0x3fc55555
 8013b50:	fff00000 	.word	0xfff00000
 8013b54:	3ff00000 	.word	0x3ff00000
 8013b58:	4090cbff 	.word	0x4090cbff
 8013b5c:	3f6f3400 	.word	0x3f6f3400
 8013b60:	4090cc00 	.word	0x4090cc00
 8013b64:	3fe00000 	.word	0x3fe00000

08013b68 <fabs>:
 8013b68:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013b6c:	4619      	mov	r1, r3
 8013b6e:	4770      	bx	lr

08013b70 <scalbn>:
 8013b70:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8013b74:	4616      	mov	r6, r2
 8013b76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013b7a:	4683      	mov	fp, r0
 8013b7c:	468c      	mov	ip, r1
 8013b7e:	460b      	mov	r3, r1
 8013b80:	b982      	cbnz	r2, 8013ba4 <scalbn+0x34>
 8013b82:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013b86:	4303      	orrs	r3, r0
 8013b88:	d039      	beq.n	8013bfe <scalbn+0x8e>
 8013b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8013c48 <scalbn+0xd8>)
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	f7ec fcb3 	bl	80004f8 <__aeabi_dmul>
 8013b92:	4b2e      	ldr	r3, [pc, #184]	@ (8013c4c <scalbn+0xdc>)
 8013b94:	4683      	mov	fp, r0
 8013b96:	429e      	cmp	r6, r3
 8013b98:	468c      	mov	ip, r1
 8013b9a:	da0d      	bge.n	8013bb8 <scalbn+0x48>
 8013b9c:	a326      	add	r3, pc, #152	@ (adr r3, 8013c38 <scalbn+0xc8>)
 8013b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ba2:	e01b      	b.n	8013bdc <scalbn+0x6c>
 8013ba4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8013ba8:	42ba      	cmp	r2, r7
 8013baa:	d109      	bne.n	8013bc0 <scalbn+0x50>
 8013bac:	4602      	mov	r2, r0
 8013bae:	f7ec faed 	bl	800018c <__adddf3>
 8013bb2:	4683      	mov	fp, r0
 8013bb4:	468c      	mov	ip, r1
 8013bb6:	e022      	b.n	8013bfe <scalbn+0x8e>
 8013bb8:	460b      	mov	r3, r1
 8013bba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013bbe:	3a36      	subs	r2, #54	@ 0x36
 8013bc0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013bc4:	428e      	cmp	r6, r1
 8013bc6:	dd0c      	ble.n	8013be2 <scalbn+0x72>
 8013bc8:	a31d      	add	r3, pc, #116	@ (adr r3, 8013c40 <scalbn+0xd0>)
 8013bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bce:	461c      	mov	r4, r3
 8013bd0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8013bd4:	f361 74df 	bfi	r4, r1, #31, #1
 8013bd8:	4621      	mov	r1, r4
 8013bda:	481d      	ldr	r0, [pc, #116]	@ (8013c50 <scalbn+0xe0>)
 8013bdc:	f7ec fc8c 	bl	80004f8 <__aeabi_dmul>
 8013be0:	e7e7      	b.n	8013bb2 <scalbn+0x42>
 8013be2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013be6:	4432      	add	r2, r6
 8013be8:	428a      	cmp	r2, r1
 8013bea:	dced      	bgt.n	8013bc8 <scalbn+0x58>
 8013bec:	2a00      	cmp	r2, #0
 8013bee:	dd0a      	ble.n	8013c06 <scalbn+0x96>
 8013bf0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013bf4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013bf8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013bfc:	46ac      	mov	ip, r5
 8013bfe:	4658      	mov	r0, fp
 8013c00:	4661      	mov	r1, ip
 8013c02:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8013c06:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013c0a:	da09      	bge.n	8013c20 <scalbn+0xb0>
 8013c0c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8013c10:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8013c14:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8013c18:	480e      	ldr	r0, [pc, #56]	@ (8013c54 <scalbn+0xe4>)
 8013c1a:	f041 011f 	orr.w	r1, r1, #31
 8013c1e:	e7bd      	b.n	8013b9c <scalbn+0x2c>
 8013c20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013c24:	3236      	adds	r2, #54	@ 0x36
 8013c26:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013c2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013c2e:	4658      	mov	r0, fp
 8013c30:	4629      	mov	r1, r5
 8013c32:	2200      	movs	r2, #0
 8013c34:	4b08      	ldr	r3, [pc, #32]	@ (8013c58 <scalbn+0xe8>)
 8013c36:	e7d1      	b.n	8013bdc <scalbn+0x6c>
 8013c38:	c2f8f359 	.word	0xc2f8f359
 8013c3c:	01a56e1f 	.word	0x01a56e1f
 8013c40:	8800759c 	.word	0x8800759c
 8013c44:	7e37e43c 	.word	0x7e37e43c
 8013c48:	43500000 	.word	0x43500000
 8013c4c:	ffff3cb0 	.word	0xffff3cb0
 8013c50:	8800759c 	.word	0x8800759c
 8013c54:	c2f8f359 	.word	0xc2f8f359
 8013c58:	3c900000 	.word	0x3c900000

08013c5c <with_errno>:
 8013c5c:	b570      	push	{r4, r5, r6, lr}
 8013c5e:	4604      	mov	r4, r0
 8013c60:	460d      	mov	r5, r1
 8013c62:	4616      	mov	r6, r2
 8013c64:	f7fe fac2 	bl	80121ec <__errno>
 8013c68:	4629      	mov	r1, r5
 8013c6a:	6006      	str	r6, [r0, #0]
 8013c6c:	4620      	mov	r0, r4
 8013c6e:	bd70      	pop	{r4, r5, r6, pc}

08013c70 <xflow>:
 8013c70:	b513      	push	{r0, r1, r4, lr}
 8013c72:	4604      	mov	r4, r0
 8013c74:	4619      	mov	r1, r3
 8013c76:	4610      	mov	r0, r2
 8013c78:	b10c      	cbz	r4, 8013c7e <xflow+0xe>
 8013c7a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013c7e:	e9cd 2300 	strd	r2, r3, [sp]
 8013c82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c86:	f7ec fc37 	bl	80004f8 <__aeabi_dmul>
 8013c8a:	2222      	movs	r2, #34	@ 0x22
 8013c8c:	b002      	add	sp, #8
 8013c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c92:	f7ff bfe3 	b.w	8013c5c <with_errno>

08013c96 <__math_uflow>:
 8013c96:	2200      	movs	r2, #0
 8013c98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8013c9c:	f7ff bfe8 	b.w	8013c70 <xflow>

08013ca0 <__math_oflow>:
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8013ca6:	f7ff bfe3 	b.w	8013c70 <xflow>
	...

08013cac <__ieee754_sqrt>:
 8013cac:	4a67      	ldr	r2, [pc, #412]	@ (8013e4c <__ieee754_sqrt+0x1a0>)
 8013cae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cb2:	438a      	bics	r2, r1
 8013cb4:	4606      	mov	r6, r0
 8013cb6:	460f      	mov	r7, r1
 8013cb8:	460b      	mov	r3, r1
 8013cba:	4604      	mov	r4, r0
 8013cbc:	d10e      	bne.n	8013cdc <__ieee754_sqrt+0x30>
 8013cbe:	4602      	mov	r2, r0
 8013cc0:	f7ec fc1a 	bl	80004f8 <__aeabi_dmul>
 8013cc4:	4602      	mov	r2, r0
 8013cc6:	460b      	mov	r3, r1
 8013cc8:	4630      	mov	r0, r6
 8013cca:	4639      	mov	r1, r7
 8013ccc:	f7ec fa5e 	bl	800018c <__adddf3>
 8013cd0:	4606      	mov	r6, r0
 8013cd2:	460f      	mov	r7, r1
 8013cd4:	4630      	mov	r0, r6
 8013cd6:	4639      	mov	r1, r7
 8013cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cdc:	2900      	cmp	r1, #0
 8013cde:	dc0c      	bgt.n	8013cfa <__ieee754_sqrt+0x4e>
 8013ce0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8013ce4:	4302      	orrs	r2, r0
 8013ce6:	d0f5      	beq.n	8013cd4 <__ieee754_sqrt+0x28>
 8013ce8:	b189      	cbz	r1, 8013d0e <__ieee754_sqrt+0x62>
 8013cea:	4602      	mov	r2, r0
 8013cec:	f7ec fa4c 	bl	8000188 <__aeabi_dsub>
 8013cf0:	4602      	mov	r2, r0
 8013cf2:	460b      	mov	r3, r1
 8013cf4:	f7ec fd2a 	bl	800074c <__aeabi_ddiv>
 8013cf8:	e7ea      	b.n	8013cd0 <__ieee754_sqrt+0x24>
 8013cfa:	150a      	asrs	r2, r1, #20
 8013cfc:	d115      	bne.n	8013d2a <__ieee754_sqrt+0x7e>
 8013cfe:	2100      	movs	r1, #0
 8013d00:	e009      	b.n	8013d16 <__ieee754_sqrt+0x6a>
 8013d02:	0ae3      	lsrs	r3, r4, #11
 8013d04:	3a15      	subs	r2, #21
 8013d06:	0564      	lsls	r4, r4, #21
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d0fa      	beq.n	8013d02 <__ieee754_sqrt+0x56>
 8013d0c:	e7f7      	b.n	8013cfe <__ieee754_sqrt+0x52>
 8013d0e:	460a      	mov	r2, r1
 8013d10:	e7fa      	b.n	8013d08 <__ieee754_sqrt+0x5c>
 8013d12:	005b      	lsls	r3, r3, #1
 8013d14:	3101      	adds	r1, #1
 8013d16:	02d8      	lsls	r0, r3, #11
 8013d18:	d5fb      	bpl.n	8013d12 <__ieee754_sqrt+0x66>
 8013d1a:	1e48      	subs	r0, r1, #1
 8013d1c:	1a12      	subs	r2, r2, r0
 8013d1e:	f1c1 0020 	rsb	r0, r1, #32
 8013d22:	fa24 f000 	lsr.w	r0, r4, r0
 8013d26:	4303      	orrs	r3, r0
 8013d28:	408c      	lsls	r4, r1
 8013d2a:	2600      	movs	r6, #0
 8013d2c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8013d30:	2116      	movs	r1, #22
 8013d32:	07d2      	lsls	r2, r2, #31
 8013d34:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8013d38:	4632      	mov	r2, r6
 8013d3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013d42:	bf5c      	itt	pl
 8013d44:	005b      	lslpl	r3, r3, #1
 8013d46:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8013d4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013d4e:	bf58      	it	pl
 8013d50:	0064      	lslpl	r4, r4, #1
 8013d52:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8013d56:	107f      	asrs	r7, r7, #1
 8013d58:	0064      	lsls	r4, r4, #1
 8013d5a:	1815      	adds	r5, r2, r0
 8013d5c:	429d      	cmp	r5, r3
 8013d5e:	bfde      	ittt	le
 8013d60:	182a      	addle	r2, r5, r0
 8013d62:	1b5b      	suble	r3, r3, r5
 8013d64:	1836      	addle	r6, r6, r0
 8013d66:	0fe5      	lsrs	r5, r4, #31
 8013d68:	3901      	subs	r1, #1
 8013d6a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8013d6e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8013d72:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8013d76:	d1f0      	bne.n	8013d5a <__ieee754_sqrt+0xae>
 8013d78:	460d      	mov	r5, r1
 8013d7a:	f04f 0a20 	mov.w	sl, #32
 8013d7e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8013d82:	429a      	cmp	r2, r3
 8013d84:	eb01 0c00 	add.w	ip, r1, r0
 8013d88:	db02      	blt.n	8013d90 <__ieee754_sqrt+0xe4>
 8013d8a:	d113      	bne.n	8013db4 <__ieee754_sqrt+0x108>
 8013d8c:	45a4      	cmp	ip, r4
 8013d8e:	d811      	bhi.n	8013db4 <__ieee754_sqrt+0x108>
 8013d90:	f1bc 0f00 	cmp.w	ip, #0
 8013d94:	eb0c 0100 	add.w	r1, ip, r0
 8013d98:	da42      	bge.n	8013e20 <__ieee754_sqrt+0x174>
 8013d9a:	2900      	cmp	r1, #0
 8013d9c:	db40      	blt.n	8013e20 <__ieee754_sqrt+0x174>
 8013d9e:	f102 0e01 	add.w	lr, r2, #1
 8013da2:	1a9b      	subs	r3, r3, r2
 8013da4:	4672      	mov	r2, lr
 8013da6:	45a4      	cmp	ip, r4
 8013da8:	bf88      	it	hi
 8013daa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013dae:	eba4 040c 	sub.w	r4, r4, ip
 8013db2:	4405      	add	r5, r0
 8013db4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8013db8:	f1ba 0a01 	subs.w	sl, sl, #1
 8013dbc:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8013dc0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8013dc4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8013dc8:	d1db      	bne.n	8013d82 <__ieee754_sqrt+0xd6>
 8013dca:	431c      	orrs	r4, r3
 8013dcc:	d01a      	beq.n	8013e04 <__ieee754_sqrt+0x158>
 8013dce:	4c20      	ldr	r4, [pc, #128]	@ (8013e50 <__ieee754_sqrt+0x1a4>)
 8013dd0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8013e54 <__ieee754_sqrt+0x1a8>
 8013dd4:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013dd8:	e9db 2300 	ldrd	r2, r3, [fp]
 8013ddc:	f7ec f9d4 	bl	8000188 <__aeabi_dsub>
 8013de0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013de4:	4602      	mov	r2, r0
 8013de6:	460b      	mov	r3, r1
 8013de8:	4640      	mov	r0, r8
 8013dea:	4649      	mov	r1, r9
 8013dec:	f7ec fe00 	bl	80009f0 <__aeabi_dcmple>
 8013df0:	b140      	cbz	r0, 8013e04 <__ieee754_sqrt+0x158>
 8013df2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013df6:	e9db 2300 	ldrd	r2, r3, [fp]
 8013dfa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8013dfe:	d111      	bne.n	8013e24 <__ieee754_sqrt+0x178>
 8013e00:	4655      	mov	r5, sl
 8013e02:	3601      	adds	r6, #1
 8013e04:	1072      	asrs	r2, r6, #1
 8013e06:	086b      	lsrs	r3, r5, #1
 8013e08:	07f1      	lsls	r1, r6, #31
 8013e0a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013e0e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8013e12:	bf48      	it	mi
 8013e14:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8013e18:	4618      	mov	r0, r3
 8013e1a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8013e1e:	e757      	b.n	8013cd0 <__ieee754_sqrt+0x24>
 8013e20:	4696      	mov	lr, r2
 8013e22:	e7be      	b.n	8013da2 <__ieee754_sqrt+0xf6>
 8013e24:	f7ec f9b2 	bl	800018c <__adddf3>
 8013e28:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013e2c:	4602      	mov	r2, r0
 8013e2e:	460b      	mov	r3, r1
 8013e30:	4640      	mov	r0, r8
 8013e32:	4649      	mov	r1, r9
 8013e34:	f7ec fdd2 	bl	80009dc <__aeabi_dcmplt>
 8013e38:	b120      	cbz	r0, 8013e44 <__ieee754_sqrt+0x198>
 8013e3a:	1ca8      	adds	r0, r5, #2
 8013e3c:	bf08      	it	eq
 8013e3e:	3601      	addeq	r6, #1
 8013e40:	3502      	adds	r5, #2
 8013e42:	e7df      	b.n	8013e04 <__ieee754_sqrt+0x158>
 8013e44:	1c6b      	adds	r3, r5, #1
 8013e46:	f023 0501 	bic.w	r5, r3, #1
 8013e4a:	e7db      	b.n	8013e04 <__ieee754_sqrt+0x158>
 8013e4c:	7ff00000 	.word	0x7ff00000
 8013e50:	20000200 	.word	0x20000200
 8013e54:	200001f8 	.word	0x200001f8

08013e58 <_init>:
 8013e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e5a:	bf00      	nop
 8013e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e5e:	bc08      	pop	{r3}
 8013e60:	469e      	mov	lr, r3
 8013e62:	4770      	bx	lr

08013e64 <_fini>:
 8013e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e66:	bf00      	nop
 8013e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e6a:	bc08      	pop	{r3}
 8013e6c:	469e      	mov	lr, r3
 8013e6e:	4770      	bx	lr
