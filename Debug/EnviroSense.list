
EnviroSense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d90  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08013ed0  08013ed0  00014ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080140e8  080140e8  00016208  2**0
                  CONTENTS
  4 .ARM          00000008  080140e8  080140e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080140f0  080140f0  00016208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080140f0  080140f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080140f4  080140f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  080140f8  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  20000208  08014300  00016208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  08014300  000168c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00016208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038b9b  00000000  00000000  00016231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fb8  00000000  00000000  0004edcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000032b8  00000000  00000000  00053d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000272a  00000000  00000000  00057040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7c0  00000000  00000000  0005976a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aec6  00000000  00000000  00075f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab591  00000000  00000000  000a0df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c381  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000eb28  00000000  00000000  0014c3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015aeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000208 	.word	0x20000208
 800015c:	00000000 	.word	0x00000000
 8000160:	08013eb8 	.word	0x08013eb8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000020c 	.word	0x2000020c
 800017c:	08013eb8 	.word	0x08013eb8

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	@ 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_fmul>:
 8000d64:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d72:	ea92 0f0c 	teqne	r2, ip
 8000d76:	ea93 0f0c 	teqne	r3, ip
 8000d7a:	d06f      	beq.n	8000e5c <__aeabi_fmul+0xf8>
 8000d7c:	441a      	add	r2, r3
 8000d7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d82:	0240      	lsls	r0, r0, #9
 8000d84:	bf18      	it	ne
 8000d86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8a:	d01e      	beq.n	8000dca <__aeabi_fmul+0x66>
 8000d8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d98:	fba0 3101 	umull	r3, r1, r0, r1
 8000d9c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000da0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000da4:	bf3e      	ittt	cc
 8000da6:	0049      	lslcc	r1, r1, #1
 8000da8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	ea40 0001 	orr.w	r0, r0, r1
 8000db2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000db6:	2afd      	cmp	r2, #253	@ 0xfd
 8000db8:	d81d      	bhi.n	8000df6 <__aeabi_fmul+0x92>
 8000dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc2:	bf08      	it	eq
 8000dc4:	f020 0001 	biceq.w	r0, r0, #1
 8000dc8:	4770      	bx	lr
 8000dca:	f090 0f00 	teq	r0, #0
 8000dce:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dd2:	bf08      	it	eq
 8000dd4:	0249      	lsleq	r1, r1, #9
 8000dd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dde:	3a7f      	subs	r2, #127	@ 0x7f
 8000de0:	bfc2      	ittt	gt
 8000de2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000de6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dea:	4770      	bxgt	lr
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	3a01      	subs	r2, #1
 8000df6:	dc5d      	bgt.n	8000eb4 <__aeabi_fmul+0x150>
 8000df8:	f112 0f19 	cmn.w	r2, #25
 8000dfc:	bfdc      	itt	le
 8000dfe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e02:	4770      	bxle	lr
 8000e04:	f1c2 0200 	rsb	r2, r2, #0
 8000e08:	0041      	lsls	r1, r0, #1
 8000e0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e0e:	f1c2 0220 	rsb	r2, r2, #32
 8000e12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1a:	f140 0000 	adc.w	r0, r0, #0
 8000e1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e22:	bf08      	it	eq
 8000e24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e28:	4770      	bx	lr
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xce>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xe6>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e78f      	b.n	8000d7c <__aeabi_fmul+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	bf18      	it	ne
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d00a      	beq.n	8000e82 <__aeabi_fmul+0x11e>
 8000e6c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e70:	bf18      	it	ne
 8000e72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e76:	d1d8      	bne.n	8000e2a <__aeabi_fmul+0xc6>
 8000e78:	ea80 0001 	eor.w	r0, r0, r1
 8000e7c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	bf17      	itett	ne
 8000e88:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e8c:	4608      	moveq	r0, r1
 8000e8e:	f091 0f00 	teqne	r1, #0
 8000e92:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e96:	d014      	beq.n	8000ec2 <__aeabi_fmul+0x15e>
 8000e98:	ea92 0f0c 	teq	r2, ip
 8000e9c:	d101      	bne.n	8000ea2 <__aeabi_fmul+0x13e>
 8000e9e:	0242      	lsls	r2, r0, #9
 8000ea0:	d10f      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000ea2:	ea93 0f0c 	teq	r3, ip
 8000ea6:	d103      	bne.n	8000eb0 <__aeabi_fmul+0x14c>
 8000ea8:	024b      	lsls	r3, r1, #9
 8000eaa:	bf18      	it	ne
 8000eac:	4608      	movne	r0, r1
 8000eae:	d108      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000eb0:	ea80 0001 	eor.w	r0, r0, r1
 8000eb4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ebc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ec0:	4770      	bx	lr
 8000ec2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ec6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eca:	4770      	bx	lr

08000ecc <__aeabi_fdiv>:
 8000ecc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ed0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed4:	bf1e      	ittt	ne
 8000ed6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eda:	ea92 0f0c 	teqne	r2, ip
 8000ede:	ea93 0f0c 	teqne	r3, ip
 8000ee2:	d069      	beq.n	8000fb8 <__aeabi_fdiv+0xec>
 8000ee4:	eba2 0203 	sub.w	r2, r2, r3
 8000ee8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eec:	0249      	lsls	r1, r1, #9
 8000eee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef2:	d037      	beq.n	8000f64 <__aeabi_fdiv+0x98>
 8000ef4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ef8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000efc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f00:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f04:	428b      	cmp	r3, r1
 8000f06:	bf38      	it	cc
 8000f08:	005b      	lslcc	r3, r3, #1
 8000f0a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f0e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f12:	428b      	cmp	r3, r1
 8000f14:	bf24      	itt	cs
 8000f16:	1a5b      	subcs	r3, r3, r1
 8000f18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f2e:	bf24      	itt	cs
 8000f30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	bf18      	it	ne
 8000f4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f4e:	d1e0      	bne.n	8000f12 <__aeabi_fdiv+0x46>
 8000f50:	2afd      	cmp	r2, #253	@ 0xfd
 8000f52:	f63f af50 	bhi.w	8000df6 <__aeabi_fmul+0x92>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f5c:	bf08      	it	eq
 8000f5e:	f020 0001 	biceq.w	r0, r0, #1
 8000f62:	4770      	bx	lr
 8000f64:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f6c:	327f      	adds	r2, #127	@ 0x7f
 8000f6e:	bfc2      	ittt	gt
 8000f70:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f78:	4770      	bxgt	lr
 8000f7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	3a01      	subs	r2, #1
 8000f84:	e737      	b.n	8000df6 <__aeabi_fmul+0x92>
 8000f86:	f092 0f00 	teq	r2, #0
 8000f8a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0040      	lsleq	r0, r0, #1
 8000f92:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f96:	3a01      	subeq	r2, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xc2>
 8000f9a:	ea40 000c 	orr.w	r0, r0, ip
 8000f9e:	f093 0f00 	teq	r3, #0
 8000fa2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0049      	lsleq	r1, r1, #1
 8000faa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fae:	3b01      	subeq	r3, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xda>
 8000fb2:	ea41 010c 	orr.w	r1, r1, ip
 8000fb6:	e795      	b.n	8000ee4 <__aeabi_fdiv+0x18>
 8000fb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fbc:	ea92 0f0c 	teq	r2, ip
 8000fc0:	d108      	bne.n	8000fd4 <__aeabi_fdiv+0x108>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	f47f af7d 	bne.w	8000ec2 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	f47f af70 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e776      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fd4:	ea93 0f0c 	teq	r3, ip
 8000fd8:	d104      	bne.n	8000fe4 <__aeabi_fdiv+0x118>
 8000fda:	024b      	lsls	r3, r1, #9
 8000fdc:	f43f af4c 	beq.w	8000e78 <__aeabi_fmul+0x114>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e76e      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fe4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fe8:	bf18      	it	ne
 8000fea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fee:	d1ca      	bne.n	8000f86 <__aeabi_fdiv+0xba>
 8000ff0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ff4:	f47f af5c 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000ff8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ffc:	f47f af3c 	bne.w	8000e78 <__aeabi_fmul+0x114>
 8001000:	e75f      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8001002:	bf00      	nop

08001004 <__gesf2>:
 8001004:	f04f 3cff 	mov.w	ip, #4294967295
 8001008:	e006      	b.n	8001018 <__cmpsf2+0x4>
 800100a:	bf00      	nop

0800100c <__lesf2>:
 800100c:	f04f 0c01 	mov.w	ip, #1
 8001010:	e002      	b.n	8001018 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__cmpsf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	f84d cd04 	str.w	ip, [sp, #-4]!
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	bf18      	it	ne
 800102a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800102e:	d011      	beq.n	8001054 <__cmpsf2+0x40>
 8001030:	b001      	add	sp, #4
 8001032:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001036:	bf18      	it	ne
 8001038:	ea90 0f01 	teqne	r0, r1
 800103c:	bf58      	it	pl
 800103e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001042:	bf88      	it	hi
 8001044:	17c8      	asrhi	r0, r1, #31
 8001046:	bf38      	it	cc
 8001048:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800104c:	bf18      	it	ne
 800104e:	f040 0001 	orrne.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001058:	d102      	bne.n	8001060 <__cmpsf2+0x4c>
 800105a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800105e:	d105      	bne.n	800106c <__cmpsf2+0x58>
 8001060:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001064:	d1e4      	bne.n	8001030 <__cmpsf2+0x1c>
 8001066:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106a:	d0e1      	beq.n	8001030 <__cmpsf2+0x1c>
 800106c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <__aeabi_cfrcmple>:
 8001074:	4684      	mov	ip, r0
 8001076:	4608      	mov	r0, r1
 8001078:	4661      	mov	r1, ip
 800107a:	e7ff      	b.n	800107c <__aeabi_cfcmpeq>

0800107c <__aeabi_cfcmpeq>:
 800107c:	b50f      	push	{r0, r1, r2, r3, lr}
 800107e:	f7ff ffc9 	bl	8001014 <__cmpsf2>
 8001082:	2800      	cmp	r0, #0
 8001084:	bf48      	it	mi
 8001086:	f110 0f00 	cmnmi.w	r0, #0
 800108a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800108c <__aeabi_fcmpeq>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff fff4 	bl	800107c <__aeabi_cfcmpeq>
 8001094:	bf0c      	ite	eq
 8001096:	2001      	moveq	r0, #1
 8001098:	2000      	movne	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmplt>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffea 	bl	800107c <__aeabi_cfcmpeq>
 80010a8:	bf34      	ite	cc
 80010aa:	2001      	movcc	r0, #1
 80010ac:	2000      	movcs	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmple>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffe0 	bl	800107c <__aeabi_cfcmpeq>
 80010bc:	bf94      	ite	ls
 80010be:	2001      	movls	r0, #1
 80010c0:	2000      	movhi	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_fcmpge>:
 80010c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010cc:	f7ff ffd2 	bl	8001074 <__aeabi_cfrcmple>
 80010d0:	bf94      	ite	ls
 80010d2:	2001      	movls	r0, #1
 80010d4:	2000      	movhi	r0, #0
 80010d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010da:	bf00      	nop

080010dc <__aeabi_fcmpgt>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff ffc8 	bl	8001074 <__aeabi_cfrcmple>
 80010e4:	bf34      	ite	cc
 80010e6:	2001      	movcc	r0, #1
 80010e8:	2000      	movcs	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_f2iz>:
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010f8:	d30f      	bcc.n	800111a <__aeabi_f2iz+0x2a>
 80010fa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001102:	d90d      	bls.n	8001120 <__aeabi_f2iz+0x30>
 8001104:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001108:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800110c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001110:	fa23 f002 	lsr.w	r0, r3, r2
 8001114:	bf18      	it	ne
 8001116:	4240      	negne	r0, r0
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr
 8001120:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001124:	d101      	bne.n	800112a <__aeabi_f2iz+0x3a>
 8001126:	0242      	lsls	r2, r0, #9
 8001128:	d105      	bne.n	8001136 <__aeabi_f2iz+0x46>
 800112a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800112e:	bf08      	it	eq
 8001130:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2uiz>:
 800113c:	0042      	lsls	r2, r0, #1
 800113e:	d20e      	bcs.n	800115e <__aeabi_f2uiz+0x22>
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30b      	bcc.n	800115e <__aeabi_f2uiz+0x22>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d409      	bmi.n	8001164 <__aeabi_f2uiz+0x28>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	fa23 f002 	lsr.w	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2uiz+0x32>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d102      	bne.n	8001174 <__aeabi_f2uiz+0x38>
 800116e:	f04f 30ff 	mov.w	r0, #4294967295
 8001172:	4770      	bx	lr
 8001174:	f04f 0000 	mov.w	r0, #0
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <__aeabi_uldivmod>:
 800117c:	b953      	cbnz	r3, 8001194 <__aeabi_uldivmod+0x18>
 800117e:	b94a      	cbnz	r2, 8001194 <__aeabi_uldivmod+0x18>
 8001180:	2900      	cmp	r1, #0
 8001182:	bf08      	it	eq
 8001184:	2800      	cmpeq	r0, #0
 8001186:	bf1c      	itt	ne
 8001188:	f04f 31ff 	movne.w	r1, #4294967295
 800118c:	f04f 30ff 	movne.w	r0, #4294967295
 8001190:	f000 b968 	b.w	8001464 <__aeabi_idiv0>
 8001194:	f1ad 0c08 	sub.w	ip, sp, #8
 8001198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800119c:	f000 f806 	bl	80011ac <__udivmoddi4>
 80011a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011a8:	b004      	add	sp, #16
 80011aa:	4770      	bx	lr

080011ac <__udivmoddi4>:
 80011ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b0:	9d08      	ldr	r5, [sp, #32]
 80011b2:	460c      	mov	r4, r1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d14e      	bne.n	8001256 <__udivmoddi4+0xaa>
 80011b8:	4694      	mov	ip, r2
 80011ba:	458c      	cmp	ip, r1
 80011bc:	4686      	mov	lr, r0
 80011be:	fab2 f282 	clz	r2, r2
 80011c2:	d962      	bls.n	800128a <__udivmoddi4+0xde>
 80011c4:	b14a      	cbz	r2, 80011da <__udivmoddi4+0x2e>
 80011c6:	f1c2 0320 	rsb	r3, r2, #32
 80011ca:	4091      	lsls	r1, r2
 80011cc:	fa20 f303 	lsr.w	r3, r0, r3
 80011d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011d4:	4319      	orrs	r1, r3
 80011d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80011da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011de:	fbb1 f4f7 	udiv	r4, r1, r7
 80011e2:	fb07 1114 	mls	r1, r7, r4, r1
 80011e6:	fa1f f68c 	uxth.w	r6, ip
 80011ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011f2:	fb04 f106 	mul.w	r1, r4, r6
 80011f6:	4299      	cmp	r1, r3
 80011f8:	d90a      	bls.n	8001210 <__udivmoddi4+0x64>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8001202:	f080 8110 	bcs.w	8001426 <__udivmoddi4+0x27a>
 8001206:	4299      	cmp	r1, r3
 8001208:	f240 810d 	bls.w	8001426 <__udivmoddi4+0x27a>
 800120c:	3c02      	subs	r4, #2
 800120e:	4463      	add	r3, ip
 8001210:	1a59      	subs	r1, r3, r1
 8001212:	fbb1 f0f7 	udiv	r0, r1, r7
 8001216:	fb07 1110 	mls	r1, r7, r0, r1
 800121a:	fb00 f606 	mul.w	r6, r0, r6
 800121e:	fa1f f38e 	uxth.w	r3, lr
 8001222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001226:	429e      	cmp	r6, r3
 8001228:	d90a      	bls.n	8001240 <__udivmoddi4+0x94>
 800122a:	eb1c 0303 	adds.w	r3, ip, r3
 800122e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001232:	f080 80fa 	bcs.w	800142a <__udivmoddi4+0x27e>
 8001236:	429e      	cmp	r6, r3
 8001238:	f240 80f7 	bls.w	800142a <__udivmoddi4+0x27e>
 800123c:	4463      	add	r3, ip
 800123e:	3802      	subs	r0, #2
 8001240:	2100      	movs	r1, #0
 8001242:	1b9b      	subs	r3, r3, r6
 8001244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001248:	b11d      	cbz	r5, 8001252 <__udivmoddi4+0xa6>
 800124a:	40d3      	lsrs	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	e9c5 3200 	strd	r3, r2, [r5]
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	428b      	cmp	r3, r1
 8001258:	d905      	bls.n	8001266 <__udivmoddi4+0xba>
 800125a:	b10d      	cbz	r5, 8001260 <__udivmoddi4+0xb4>
 800125c:	e9c5 0100 	strd	r0, r1, [r5]
 8001260:	2100      	movs	r1, #0
 8001262:	4608      	mov	r0, r1
 8001264:	e7f5      	b.n	8001252 <__udivmoddi4+0xa6>
 8001266:	fab3 f183 	clz	r1, r3
 800126a:	2900      	cmp	r1, #0
 800126c:	d146      	bne.n	80012fc <__udivmoddi4+0x150>
 800126e:	42a3      	cmp	r3, r4
 8001270:	d302      	bcc.n	8001278 <__udivmoddi4+0xcc>
 8001272:	4290      	cmp	r0, r2
 8001274:	f0c0 80ee 	bcc.w	8001454 <__udivmoddi4+0x2a8>
 8001278:	1a86      	subs	r6, r0, r2
 800127a:	eb64 0303 	sbc.w	r3, r4, r3
 800127e:	2001      	movs	r0, #1
 8001280:	2d00      	cmp	r5, #0
 8001282:	d0e6      	beq.n	8001252 <__udivmoddi4+0xa6>
 8001284:	e9c5 6300 	strd	r6, r3, [r5]
 8001288:	e7e3      	b.n	8001252 <__udivmoddi4+0xa6>
 800128a:	2a00      	cmp	r2, #0
 800128c:	f040 808f 	bne.w	80013ae <__udivmoddi4+0x202>
 8001290:	eba1 040c 	sub.w	r4, r1, ip
 8001294:	2101      	movs	r1, #1
 8001296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800129a:	fa1f f78c 	uxth.w	r7, ip
 800129e:	fbb4 f6f8 	udiv	r6, r4, r8
 80012a2:	fb08 4416 	mls	r4, r8, r6, r4
 80012a6:	fb07 f006 	mul.w	r0, r7, r6
 80012aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d908      	bls.n	80012c8 <__udivmoddi4+0x11c>
 80012b6:	eb1c 0303 	adds.w	r3, ip, r3
 80012ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80012be:	d202      	bcs.n	80012c6 <__udivmoddi4+0x11a>
 80012c0:	4298      	cmp	r0, r3
 80012c2:	f200 80cb 	bhi.w	800145c <__udivmoddi4+0x2b0>
 80012c6:	4626      	mov	r6, r4
 80012c8:	1a1c      	subs	r4, r3, r0
 80012ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80012ce:	fb08 4410 	mls	r4, r8, r0, r4
 80012d2:	fb00 f707 	mul.w	r7, r0, r7
 80012d6:	fa1f f38e 	uxth.w	r3, lr
 80012da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012de:	429f      	cmp	r7, r3
 80012e0:	d908      	bls.n	80012f4 <__udivmoddi4+0x148>
 80012e2:	eb1c 0303 	adds.w	r3, ip, r3
 80012e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80012ea:	d202      	bcs.n	80012f2 <__udivmoddi4+0x146>
 80012ec:	429f      	cmp	r7, r3
 80012ee:	f200 80ae 	bhi.w	800144e <__udivmoddi4+0x2a2>
 80012f2:	4620      	mov	r0, r4
 80012f4:	1bdb      	subs	r3, r3, r7
 80012f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012fa:	e7a5      	b.n	8001248 <__udivmoddi4+0x9c>
 80012fc:	f1c1 0720 	rsb	r7, r1, #32
 8001300:	408b      	lsls	r3, r1
 8001302:	fa22 fc07 	lsr.w	ip, r2, r7
 8001306:	ea4c 0c03 	orr.w	ip, ip, r3
 800130a:	fa24 f607 	lsr.w	r6, r4, r7
 800130e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001312:	fbb6 f8f9 	udiv	r8, r6, r9
 8001316:	fa1f fe8c 	uxth.w	lr, ip
 800131a:	fb09 6618 	mls	r6, r9, r8, r6
 800131e:	fa20 f307 	lsr.w	r3, r0, r7
 8001322:	408c      	lsls	r4, r1
 8001324:	fa00 fa01 	lsl.w	sl, r0, r1
 8001328:	fb08 f00e 	mul.w	r0, r8, lr
 800132c:	431c      	orrs	r4, r3
 800132e:	0c23      	lsrs	r3, r4, #16
 8001330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001334:	4298      	cmp	r0, r3
 8001336:	fa02 f201 	lsl.w	r2, r2, r1
 800133a:	d90a      	bls.n	8001352 <__udivmoddi4+0x1a6>
 800133c:	eb1c 0303 	adds.w	r3, ip, r3
 8001340:	f108 36ff 	add.w	r6, r8, #4294967295
 8001344:	f080 8081 	bcs.w	800144a <__udivmoddi4+0x29e>
 8001348:	4298      	cmp	r0, r3
 800134a:	d97e      	bls.n	800144a <__udivmoddi4+0x29e>
 800134c:	f1a8 0802 	sub.w	r8, r8, #2
 8001350:	4463      	add	r3, ip
 8001352:	1a1e      	subs	r6, r3, r0
 8001354:	fbb6 f3f9 	udiv	r3, r6, r9
 8001358:	fb09 6613 	mls	r6, r9, r3, r6
 800135c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001360:	b2a4      	uxth	r4, r4
 8001362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001366:	45a6      	cmp	lr, r4
 8001368:	d908      	bls.n	800137c <__udivmoddi4+0x1d0>
 800136a:	eb1c 0404 	adds.w	r4, ip, r4
 800136e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001372:	d266      	bcs.n	8001442 <__udivmoddi4+0x296>
 8001374:	45a6      	cmp	lr, r4
 8001376:	d964      	bls.n	8001442 <__udivmoddi4+0x296>
 8001378:	3b02      	subs	r3, #2
 800137a:	4464      	add	r4, ip
 800137c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001380:	fba0 8302 	umull	r8, r3, r0, r2
 8001384:	eba4 040e 	sub.w	r4, r4, lr
 8001388:	429c      	cmp	r4, r3
 800138a:	46c6      	mov	lr, r8
 800138c:	461e      	mov	r6, r3
 800138e:	d350      	bcc.n	8001432 <__udivmoddi4+0x286>
 8001390:	d04d      	beq.n	800142e <__udivmoddi4+0x282>
 8001392:	b155      	cbz	r5, 80013aa <__udivmoddi4+0x1fe>
 8001394:	ebba 030e 	subs.w	r3, sl, lr
 8001398:	eb64 0406 	sbc.w	r4, r4, r6
 800139c:	fa04 f707 	lsl.w	r7, r4, r7
 80013a0:	40cb      	lsrs	r3, r1
 80013a2:	431f      	orrs	r7, r3
 80013a4:	40cc      	lsrs	r4, r1
 80013a6:	e9c5 7400 	strd	r7, r4, [r5]
 80013aa:	2100      	movs	r1, #0
 80013ac:	e751      	b.n	8001252 <__udivmoddi4+0xa6>
 80013ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80013b2:	f1c2 0320 	rsb	r3, r2, #32
 80013b6:	40d9      	lsrs	r1, r3
 80013b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013bc:	fa20 f303 	lsr.w	r3, r0, r3
 80013c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80013c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80013c8:	fb08 1110 	mls	r1, r8, r0, r1
 80013cc:	4094      	lsls	r4, r2
 80013ce:	431c      	orrs	r4, r3
 80013d0:	fa1f f78c 	uxth.w	r7, ip
 80013d4:	0c23      	lsrs	r3, r4, #16
 80013d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013da:	fb00 f107 	mul.w	r1, r0, r7
 80013de:	4299      	cmp	r1, r3
 80013e0:	d908      	bls.n	80013f4 <__udivmoddi4+0x248>
 80013e2:	eb1c 0303 	adds.w	r3, ip, r3
 80013e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013ea:	d22c      	bcs.n	8001446 <__udivmoddi4+0x29a>
 80013ec:	4299      	cmp	r1, r3
 80013ee:	d92a      	bls.n	8001446 <__udivmoddi4+0x29a>
 80013f0:	3802      	subs	r0, #2
 80013f2:	4463      	add	r3, ip
 80013f4:	1a5b      	subs	r3, r3, r1
 80013f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80013fa:	fb08 3311 	mls	r3, r8, r1, r3
 80013fe:	b2a4      	uxth	r4, r4
 8001400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001404:	fb01 f307 	mul.w	r3, r1, r7
 8001408:	42a3      	cmp	r3, r4
 800140a:	d908      	bls.n	800141e <__udivmoddi4+0x272>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f101 36ff 	add.w	r6, r1, #4294967295
 8001414:	d213      	bcs.n	800143e <__udivmoddi4+0x292>
 8001416:	42a3      	cmp	r3, r4
 8001418:	d911      	bls.n	800143e <__udivmoddi4+0x292>
 800141a:	3902      	subs	r1, #2
 800141c:	4464      	add	r4, ip
 800141e:	1ae4      	subs	r4, r4, r3
 8001420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001424:	e73b      	b.n	800129e <__udivmoddi4+0xf2>
 8001426:	4604      	mov	r4, r0
 8001428:	e6f2      	b.n	8001210 <__udivmoddi4+0x64>
 800142a:	4608      	mov	r0, r1
 800142c:	e708      	b.n	8001240 <__udivmoddi4+0x94>
 800142e:	45c2      	cmp	sl, r8
 8001430:	d2af      	bcs.n	8001392 <__udivmoddi4+0x1e6>
 8001432:	ebb8 0e02 	subs.w	lr, r8, r2
 8001436:	eb63 060c 	sbc.w	r6, r3, ip
 800143a:	3801      	subs	r0, #1
 800143c:	e7a9      	b.n	8001392 <__udivmoddi4+0x1e6>
 800143e:	4631      	mov	r1, r6
 8001440:	e7ed      	b.n	800141e <__udivmoddi4+0x272>
 8001442:	4603      	mov	r3, r0
 8001444:	e79a      	b.n	800137c <__udivmoddi4+0x1d0>
 8001446:	4630      	mov	r0, r6
 8001448:	e7d4      	b.n	80013f4 <__udivmoddi4+0x248>
 800144a:	46b0      	mov	r8, r6
 800144c:	e781      	b.n	8001352 <__udivmoddi4+0x1a6>
 800144e:	4463      	add	r3, ip
 8001450:	3802      	subs	r0, #2
 8001452:	e74f      	b.n	80012f4 <__udivmoddi4+0x148>
 8001454:	4606      	mov	r6, r0
 8001456:	4623      	mov	r3, r4
 8001458:	4608      	mov	r0, r1
 800145a:	e711      	b.n	8001280 <__udivmoddi4+0xd4>
 800145c:	3e02      	subs	r6, #2
 800145e:	4463      	add	r3, ip
 8001460:	e732      	b.n	80012c8 <__udivmoddi4+0x11c>
 8001462:	bf00      	nop

08001464 <__aeabi_idiv0>:
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <GestionLed>:

# include <stdio.h>
#include <main.h>

void GestionLed(int LedState)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

	switch(LedState)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b05      	cmp	r3, #5
 8001474:	f200 80bb 	bhi.w	80015ee <GestionLed+0x186>
 8001478:	a201      	add	r2, pc, #4	@ (adr r2, 8001480 <GestionLed+0x18>)
 800147a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147e:	bf00      	nop
 8001480:	08001499 	.word	0x08001499
 8001484:	080014d1 	.word	0x080014d1
 8001488:	08001509 	.word	0x08001509
 800148c:	08001541 	.word	0x08001541
 8001490:	0800157b 	.word	0x0800157b
 8001494:	080015b5 	.word	0x080015b5
	{
	case 0:// Affichage de la temperature
		  HAL_GPIO_TogglePin(GPIOB,L0_Pin);
 8001498:	2102      	movs	r1, #2
 800149a:	4857      	ldr	r0, [pc, #348]	@ (80015f8 <GestionLed+0x190>)
 800149c:	f00b fd54 	bl	800cf48 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2104      	movs	r1, #4
 80014a4:	4854      	ldr	r0, [pc, #336]	@ (80015f8 <GestionLed+0x190>)
 80014a6:	f00b fd37 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014b0:	4851      	ldr	r0, [pc, #324]	@ (80015f8 <GestionLed+0x190>)
 80014b2:	f00b fd31 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014bc:	484e      	ldr	r0, [pc, #312]	@ (80015f8 <GestionLed+0x190>)
 80014be:	f00b fd2b 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014c8:	484b      	ldr	r0, [pc, #300]	@ (80015f8 <GestionLed+0x190>)
 80014ca:	f00b fd25 	bl	800cf18 <HAL_GPIO_WritePin>
	break;
 80014ce:	e08e      	b.n	80015ee <GestionLed+0x186>

	case 1:// Affichage de la consigne
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2102      	movs	r1, #2
 80014d4:	4848      	ldr	r0, [pc, #288]	@ (80015f8 <GestionLed+0x190>)
 80014d6:	f00b fd1f 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(GPIOB,L1_Pin);
 80014da:	2104      	movs	r1, #4
 80014dc:	4846      	ldr	r0, [pc, #280]	@ (80015f8 <GestionLed+0x190>)
 80014de:	f00b fd33 	bl	800cf48 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014e8:	4843      	ldr	r0, [pc, #268]	@ (80015f8 <GestionLed+0x190>)
 80014ea:	f00b fd15 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014f4:	4840      	ldr	r0, [pc, #256]	@ (80015f8 <GestionLed+0x190>)
 80014f6:	f00b fd0f 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001500:	483d      	ldr	r0, [pc, #244]	@ (80015f8 <GestionLed+0x190>)
 8001502:	f00b fd09 	bl	800cf18 <HAL_GPIO_WritePin>
	break;
 8001506:	e072      	b.n	80015ee <GestionLed+0x186>

	case 2:// Affichage de l'alarme temp
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2102      	movs	r1, #2
 800150c:	483a      	ldr	r0, [pc, #232]	@ (80015f8 <GestionLed+0x190>)
 800150e:	f00b fd03 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2104      	movs	r1, #4
 8001516:	4838      	ldr	r0, [pc, #224]	@ (80015f8 <GestionLed+0x190>)
 8001518:	f00b fcfe 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(GPIOB,L2_Pin);
 800151c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001520:	4835      	ldr	r0, [pc, #212]	@ (80015f8 <GestionLed+0x190>)
 8001522:	f00b fd11 	bl	800cf48 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800152c:	4832      	ldr	r0, [pc, #200]	@ (80015f8 <GestionLed+0x190>)
 800152e:	f00b fcf3 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001538:	482f      	ldr	r0, [pc, #188]	@ (80015f8 <GestionLed+0x190>)
 800153a:	f00b fced 	bl	800cf18 <HAL_GPIO_WritePin>
	break;
 800153e:	e056      	b.n	80015ee <GestionLed+0x186>

	case 3:// Affichage de l'alarm accel
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2102      	movs	r1, #2
 8001544:	482c      	ldr	r0, [pc, #176]	@ (80015f8 <GestionLed+0x190>)
 8001546:	f00b fce7 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2104      	movs	r1, #4
 800154e:	482a      	ldr	r0, [pc, #168]	@ (80015f8 <GestionLed+0x190>)
 8001550:	f00b fce2 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800155a:	4827      	ldr	r0, [pc, #156]	@ (80015f8 <GestionLed+0x190>)
 800155c:	f00b fcdc 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001566:	4824      	ldr	r0, [pc, #144]	@ (80015f8 <GestionLed+0x190>)
 8001568:	f00b fcd6 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001572:	4821      	ldr	r0, [pc, #132]	@ (80015f8 <GestionLed+0x190>)
 8001574:	f00b fcd0 	bl	800cf18 <HAL_GPIO_WritePin>
	break;
 8001578:	e039      	b.n	80015ee <GestionLed+0x186>

	case 4:// Extinction des leds
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2102      	movs	r1, #2
 800157e:	481e      	ldr	r0, [pc, #120]	@ (80015f8 <GestionLed+0x190>)
 8001580:	f00b fcca 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2104      	movs	r1, #4
 8001588:	481b      	ldr	r0, [pc, #108]	@ (80015f8 <GestionLed+0x190>)
 800158a:	f00b fcc5 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001594:	4818      	ldr	r0, [pc, #96]	@ (80015f8 <GestionLed+0x190>)
 8001596:	f00b fcbf 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015a0:	4815      	ldr	r0, [pc, #84]	@ (80015f8 <GestionLed+0x190>)
 80015a2:	f00b fcb9 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015ac:	4812      	ldr	r0, [pc, #72]	@ (80015f8 <GestionLed+0x190>)
 80015ae:	f00b fcb3 	bl	800cf18 <HAL_GPIO_WritePin>
	break;
 80015b2:	e01c      	b.n	80015ee <GestionLed+0x186>

	case 5:// Extinction des leds
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2102      	movs	r1, #2
 80015b8:	480f      	ldr	r0, [pc, #60]	@ (80015f8 <GestionLed+0x190>)
 80015ba:	f00b fcad 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 1);
 80015be:	2201      	movs	r2, #1
 80015c0:	2104      	movs	r1, #4
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <GestionLed+0x190>)
 80015c4:	f00b fca8 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015ce:	480a      	ldr	r0, [pc, #40]	@ (80015f8 <GestionLed+0x190>)
 80015d0:	f00b fca2 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 1);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015da:	4807      	ldr	r0, [pc, #28]	@ (80015f8 <GestionLed+0x190>)
 80015dc:	f00b fc9c 	bl	800cf18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015e6:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <GestionLed+0x190>)
 80015e8:	f00b fc96 	bl	800cf18 <HAL_GPIO_WritePin>
	break;
 80015ec:	bf00      	nop

	}
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40020400 	.word	0x40020400

080015fc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001604:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001608:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001614:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001618:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800161c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001624:	e000      	b.n	8001628 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001626:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001628:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f9      	beq.n	8001626 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001632:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800163c:	687b      	ldr	r3, [r7, #4]
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <TIM6_IRQ>:
  uint32_t out_int;
  uint32_t out_dec;
} displayFloatToInt_t;

void TIM6_IRQ(void)	//Interruption du timer 6 à 1 seconde
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	if(flag_irq){
 800164c:	4b07      	ldr	r3, [pc, #28]	@ (800166c <TIM6_IRQ+0x24>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <TIM6_IRQ+0x14>
		flag_irq = 0;
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <TIM6_IRQ+0x24>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
	}else{
		flag_irq = 1;
	}

}
 800165a:	e002      	b.n	8001662 <TIM6_IRQ+0x1a>
		flag_irq = 1;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <TIM6_IRQ+0x24>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	2000051c 	.word	0x2000051c

08001670 <TIM7_IRQ>:
void TIM7_IRQ(void)//Interruption du timer 7 à 1/2 seconde
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
		display_cons();
 8001674:	f000 f900 	bl	8001878 <display_cons>
		flag_irq = 0;
 8001678:	4b02      	ldr	r3, [pc, #8]	@ (8001684 <TIM7_IRQ+0x14>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000051c 	.word	0x2000051c

08001688 <ACCEL_IRQ>:

void ACCEL_IRQ(void)//Interruprion de l'accel
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
	flag_irq2 = 1;
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <ACCEL_IRQ+0x14>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	2000051d 	.word	0x2000051d

080016a0 <floatToInt>:
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  if(in >= 0.0f)
 80016ac:	f04f 0100 	mov.w	r1, #0
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff fd09 	bl	80010c8 <__aeabi_fcmpge>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <floatToInt+0x24>
  {
    out_value->sign = 0;
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e006      	b.n	80016d2 <floatToInt+0x32>
  }else
  {
    out_value->sign = 1;
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
    in = -in;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80016d0:	60fb      	str	r3, [r7, #12]
  }

  in = in + (0.5 / pow(10, dec_prec));
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f7fe feb8 	bl	8000448 <__aeabi_f2d>
 80016d8:	4604      	mov	r4, r0
 80016da:	460d      	mov	r5, r1
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7fe fea1 	bl	8000424 <__aeabi_i2d>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	f04f 0000 	mov.w	r0, #0
 80016ea:	492a      	ldr	r1, [pc, #168]	@ (8001794 <floatToInt+0xf4>)
 80016ec:	f011 fca2 	bl	8013034 <pow>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	f04f 0000 	mov.w	r0, #0
 80016f8:	4927      	ldr	r1, [pc, #156]	@ (8001798 <floatToInt+0xf8>)
 80016fa:	f7ff f827 	bl	800074c <__aeabi_ddiv>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4620      	mov	r0, r4
 8001704:	4629      	mov	r1, r5
 8001706:	f7fe fd41 	bl	800018c <__adddf3>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff f9c9 	bl	8000aa8 <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7ff fce8 	bl	80010f0 <__aeabi_f2iz>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fac1 	bl	8000cb4 <__aeabi_ui2f>
 8001732:	4603      	mov	r3, r0
 8001734:	4619      	mov	r1, r3
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f7ff fa0a 	bl	8000b50 <__aeabi_fsub>
 800173c:	4603      	mov	r3, r0
 800173e:	60fb      	str	r3, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7fe fe81 	bl	8000448 <__aeabi_f2d>
 8001746:	4604      	mov	r4, r0
 8001748:	460d      	mov	r5, r1
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe fe6a 	bl	8000424 <__aeabi_i2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	f04f 0000 	mov.w	r0, #0
 8001758:	490e      	ldr	r1, [pc, #56]	@ (8001794 <floatToInt+0xf4>)
 800175a:	f011 fc6b 	bl	8013034 <pow>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe fec7 	bl	80004f8 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f011 fccd 	bl	8013110 <trunc>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff f96b 	bl	8000a58 <__aeabi_d2iz>
 8001782:	4603      	mov	r3, r0
 8001784:	461a      	mov	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	609a      	str	r2, [r3, #8]
}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bdb0      	pop	{r4, r5, r7, pc}
 8001792:	bf00      	nop
 8001794:	40240000 	.word	0x40240000
 8001798:	3fe00000 	.word	0x3fe00000

0800179c <Conf_TEMP>:
/*Fonction d'initialisation du capteur de temperature */
int Conf_TEMP(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	 if(IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE) != BSP_ERROR_NONE)
 80017a0:	2101      	movs	r1, #1
 80017a2:	2002      	movs	r0, #2
 80017a4:	f009 fab8 	bl	800ad18 <IKS01A3_ENV_SENSOR_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <Conf_TEMP+0x16>
	 {
		 return 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00b      	b.n	80017ca <Conf_TEMP+0x2e>
	 }
	 if(IKS01A3_ENV_SENSOR_SetOutputDataRate(IKS01A3_STTS751_0, ENV_TEMPERATURE, 4.0f) != BSP_ERROR_NONE)
 80017b2:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80017b6:	2101      	movs	r1, #1
 80017b8:	2002      	movs	r0, #2
 80017ba:	f009 fbfb 	bl	800afb4 <IKS01A3_ENV_SENSOR_SetOutputDataRate>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <Conf_TEMP+0x2c>
	 {
		 return 1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <Conf_TEMP+0x2e>
	 }
	return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <Aquire_temp>:

void Aquire_temp(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &Temperature);
 80017d4:	4a09      	ldr	r2, [pc, #36]	@ (80017fc <Aquire_temp+0x2c>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	2002      	movs	r0, #2
 80017da:	f009 fc2d 	bl	800b038 <IKS01A3_ENV_SENSOR_GetValue>
	comp.temp = Temperature*100;
 80017de:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <Aquire_temp+0x2c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4907      	ldr	r1, [pc, #28]	@ (8001800 <Aquire_temp+0x30>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fabd 	bl	8000d64 <__aeabi_fmul>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fca5 	bl	800113c <__aeabi_f2uiz>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a03      	ldr	r2, [pc, #12]	@ (8001804 <Aquire_temp+0x34>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000418 	.word	0x20000418
 8001800:	42c80000 	.word	0x42c80000
 8001804:	20000524 	.word	0x20000524

08001808 <display_temp>:
/*Fonction d'affichage de la temperature sur les 7 segments*/
void display_temp(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
	displayFloatToInt_t out_value;
	floatToInt(Temperature, &out_value, 2);
 800180e:	4b17      	ldr	r3, [pc, #92]	@ (800186c <display_temp+0x64>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1d39      	adds	r1, r7, #4
 8001814:	2202      	movs	r2, #2
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff42 	bl	80016a0 <floatToInt>
	sprintf(buff, "%d", (int)out_value.out_int);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	461a      	mov	r2, r3
 8001820:	4913      	ldr	r1, [pc, #76]	@ (8001870 <display_temp+0x68>)
 8001822:	4814      	ldr	r0, [pc, #80]	@ (8001874 <display_temp+0x6c>)
 8001824:	f010 fb96 	bl	8011f54 <siprintf>
	MAX7219_DisplayChar('1',buff[0]);
 8001828:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <display_temp+0x6c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	2031      	movs	r0, #49	@ 0x31
 8001830:	f000 fd31 	bl	8002296 <MAX7219_DisplayChar>
	MAX7219_DisplayChar1('2',buff[1]);
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <display_temp+0x6c>)
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	4619      	mov	r1, r3
 800183a:	2032      	movs	r0, #50	@ 0x32
 800183c:	f000 fd42 	bl	80022c4 <MAX7219_DisplayChar1>
	sprintf(buff, "%d", (int)out_value.out_dec);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	461a      	mov	r2, r3
 8001844:	490a      	ldr	r1, [pc, #40]	@ (8001870 <display_temp+0x68>)
 8001846:	480b      	ldr	r0, [pc, #44]	@ (8001874 <display_temp+0x6c>)
 8001848:	f010 fb84 	bl	8011f54 <siprintf>
	MAX7219_DisplayChar('3',buff[0]);
 800184c:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <display_temp+0x6c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	2033      	movs	r0, #51	@ 0x33
 8001854:	f000 fd1f 	bl	8002296 <MAX7219_DisplayChar>
	MAX7219_DisplayChar('4',buff[1]);
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <display_temp+0x6c>)
 800185a:	785b      	ldrb	r3, [r3, #1]
 800185c:	4619      	mov	r1, r3
 800185e:	2034      	movs	r0, #52	@ 0x34
 8001860:	f000 fd19 	bl	8002296 <MAX7219_DisplayChar>
}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000418 	.word	0x20000418
 8001870:	08013ed0 	.word	0x08013ed0
 8001874:	20000520 	.word	0x20000520

08001878 <display_cons>:
/*Fonction d'affichage de la temperature sur les 7 segments*/
void display_cons(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
	GestionLed(Aff_Cons);
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff fdf2 	bl	8001468 <GestionLed>
	char buff[4];
	uint32_t cons;
	cons = Aquire_cons();
 8001884:	f000 f86e 	bl	8001964 <Aquire_cons>
 8001888:	6078      	str	r0, [r7, #4]
	sprintf(buff, "%4ld", cons);
 800188a:	463b      	mov	r3, r7
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4916      	ldr	r1, [pc, #88]	@ (80018e8 <display_cons+0x70>)
 8001890:	4618      	mov	r0, r3
 8001892:	f010 fb5f 	bl	8011f54 <siprintf>
	MAX7219_DisplayChar('1',buff[0]);
 8001896:	783b      	ldrb	r3, [r7, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	2031      	movs	r0, #49	@ 0x31
 800189c:	f000 fcfb 	bl	8002296 <MAX7219_DisplayChar>
	MAX7219_DisplayChar1('2',buff[1]);
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	4619      	mov	r1, r3
 80018a4:	2032      	movs	r0, #50	@ 0x32
 80018a6:	f000 fd0d 	bl	80022c4 <MAX7219_DisplayChar1>
	MAX7219_DisplayChar('3',buff[2]);
 80018aa:	78bb      	ldrb	r3, [r7, #2]
 80018ac:	4619      	mov	r1, r3
 80018ae:	2033      	movs	r0, #51	@ 0x33
 80018b0:	f000 fcf1 	bl	8002296 <MAX7219_DisplayChar>
	MAX7219_DisplayChar('4',buff[3]);
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	4619      	mov	r1, r3
 80018b8:	2034      	movs	r0, #52	@ 0x34
 80018ba:	f000 fcec 	bl	8002296 <MAX7219_DisplayChar>
	printf("Consigne : %c%c",buff[0],buff[1]);
 80018be:	783b      	ldrb	r3, [r7, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	787b      	ldrb	r3, [r7, #1]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4809      	ldr	r0, [pc, #36]	@ (80018ec <display_cons+0x74>)
 80018c8:	f010 fa98 	bl	8011dfc <iprintf>
	printf(".");
 80018cc:	202e      	movs	r0, #46	@ 0x2e
 80018ce:	f010 faa7 	bl	8011e20 <putchar>
	printf("%c%c degC \r\n",buff[2],buff[3]);
 80018d2:	78bb      	ldrb	r3, [r7, #2]
 80018d4:	4619      	mov	r1, r3
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	461a      	mov	r2, r3
 80018da:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <display_cons+0x78>)
 80018dc:	f010 fa8e 	bl	8011dfc <iprintf>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	08013ed4 	.word	0x08013ed4
 80018ec:	08013edc 	.word	0x08013edc
 80018f0:	08013eec 	.word	0x08013eec

080018f4 <Affichage_TEMP>:
/*Fonction affichage de la temperature dans la console ou UART*/
void Affichage_TEMP(void)

{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af02      	add	r7, sp, #8
	IKS01A3_ENV_SENSOR_Enable(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 80018fa:	2101      	movs	r1, #1
 80018fc:	2002      	movs	r0, #2
 80018fe:	f009 fb19 	bl	800af34 <IKS01A3_ENV_SENSOR_Enable>
	IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &Temperature);
 8001902:	4a14      	ldr	r2, [pc, #80]	@ (8001954 <Affichage_TEMP+0x60>)
 8001904:	2101      	movs	r1, #1
 8001906:	2002      	movs	r0, #2
 8001908:	f009 fb96 	bl	800b038 <IKS01A3_ENV_SENSOR_GetValue>
	displayFloatToInt_t out_value;
	floatToInt(Temperature, &out_value, 2);
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <Affichage_TEMP+0x60>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	1d39      	adds	r1, r7, #4
 8001912:	2202      	movs	r2, #2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fec3 	bl	80016a0 <floatToInt>
	snprintf(dataOut1, MAX_BUF_SIZE, "Temperature: %c%d.%02d degC ", ((out_value.sign > 0) ? '-' : '+'), (int)out_value.out_int, (int)out_value.out_dec);
 800191a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	dd01      	ble.n	8001926 <Affichage_TEMP+0x32>
 8001922:	232d      	movs	r3, #45	@ 0x2d
 8001924:	e000      	b.n	8001928 <Affichage_TEMP+0x34>
 8001926:	232b      	movs	r3, #43	@ 0x2b
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	68f9      	ldr	r1, [r7, #12]
 800192c:	9101      	str	r1, [sp, #4]
 800192e:	9200      	str	r2, [sp, #0]
 8001930:	4a09      	ldr	r2, [pc, #36]	@ (8001958 <Affichage_TEMP+0x64>)
 8001932:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001936:	4809      	ldr	r0, [pc, #36]	@ (800195c <Affichage_TEMP+0x68>)
 8001938:	f010 fad8 	bl	8011eec <sniprintf>
	printf("%s \r\n", dataOut1);
 800193c:	4907      	ldr	r1, [pc, #28]	@ (800195c <Affichage_TEMP+0x68>)
 800193e:	4808      	ldr	r0, [pc, #32]	@ (8001960 <Affichage_TEMP+0x6c>)
 8001940:	f010 fa5c 	bl	8011dfc <iprintf>
	GestionLed(Aff_Temp);
 8001944:	2000      	movs	r0, #0
 8001946:	f7ff fd8f 	bl	8001468 <GestionLed>
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000418 	.word	0x20000418
 8001958:	08013efc 	.word	0x08013efc
 800195c:	2000041c 	.word	0x2000041c
 8001960:	08013f1c 	.word	0x08013f1c

08001964 <Aquire_cons>:
/*Fonction pour recuperer la valeur sur l'ADC*/
uint32_t Aquire_cons(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
	uint32_t Consigne = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc);
 800196e:	480b      	ldr	r0, [pc, #44]	@ (800199c <Aquire_cons+0x38>)
 8001970:	f00a fb92 	bl	800c098 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1000);
 8001974:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001978:	4808      	ldr	r0, [pc, #32]	@ (800199c <Aquire_cons+0x38>)
 800197a:	f00a fc19 	bl	800c1b0 <HAL_ADC_PollForConversion>
	Consigne = HAL_ADC_GetValue(&hadc);
 800197e:	4807      	ldr	r0, [pc, #28]	@ (800199c <Aquire_cons+0x38>)
 8001980:	f00a fca6 	bl	800c2d0 <HAL_ADC_GetValue>
 8001984:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc);
 8001986:	4805      	ldr	r0, [pc, #20]	@ (800199c <Aquire_cons+0x38>)
 8001988:	f00a fbe6 	bl	800c158 <HAL_ADC_Stop>
	comp.cons = Consigne;
 800198c:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <Aquire_cons+0x3c>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6053      	str	r3, [r2, #4]
	return Consigne;
 8001992:	687b      	ldr	r3, [r7, #4]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000224 	.word	0x20000224
 80019a0:	20000524 	.word	0x20000524

080019a4 <motor>:

void motor(int MotorState)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	if(MotorState){
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00c      	beq.n	80019cc <motor+0x28>

		TIM3->PSC = 32000;
 80019b2:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <motor+0x40>)
 80019b4:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80019b8:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 1000;
 80019ba:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <motor+0x40>)
 80019bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019c0:	62da      	str	r2, [r3, #44]	@ 0x2c
		HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);
 80019c2:	2100      	movs	r1, #0
 80019c4:	4808      	ldr	r0, [pc, #32]	@ (80019e8 <motor+0x44>)
 80019c6:	f00f f9af 	bl	8010d28 <HAL_TIM_PWM_Start_IT>
	else{
		GestionLed(All_Off);
		HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_1);
		//printf("Motor Disable \n\r");
	}
}
 80019ca:	e006      	b.n	80019da <motor+0x36>
		GestionLed(All_Off);
 80019cc:	2004      	movs	r0, #4
 80019ce:	f7ff fd4b 	bl	8001468 <GestionLed>
		HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_1);
 80019d2:	2100      	movs	r1, #0
 80019d4:	4804      	ldr	r0, [pc, #16]	@ (80019e8 <motor+0x44>)
 80019d6:	f00f fa89 	bl	8010eec <HAL_TIM_PWM_Stop_IT>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40000400 	.word	0x40000400
 80019e8:	20000310 	.word	0x20000310

080019ec <buzzer>:

void buzzer (int BuzzerState)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	if(BuzzerState)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00e      	beq.n	8001a18 <buzzer+0x2c>
	{
		GestionLed(Aff_AlarmAccel);
 80019fa:	2003      	movs	r0, #3
 80019fc:	f7ff fd34 	bl	8001468 <GestionLed>
		TIM3->PSC = 31;
 8001a00:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <buzzer+0x44>)
 8001a02:	221f      	movs	r2, #31
 8001a04:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 2278;
 8001a06:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <buzzer+0x44>)
 8001a08:	f640 02e6 	movw	r2, #2278	@ 0x8e6
 8001a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
		HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);
 8001a0e:	2104      	movs	r1, #4
 8001a10:	4808      	ldr	r0, [pc, #32]	@ (8001a34 <buzzer+0x48>)
 8001a12:	f00f f989 	bl	8010d28 <HAL_TIM_PWM_Start_IT>
	}
	else{
		GestionLed(All_Off);
		HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_2);
	}
}
 8001a16:	e006      	b.n	8001a26 <buzzer+0x3a>
		GestionLed(All_Off);
 8001a18:	2004      	movs	r0, #4
 8001a1a:	f7ff fd25 	bl	8001468 <GestionLed>
		HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_2);
 8001a1e:	2104      	movs	r1, #4
 8001a20:	4804      	ldr	r0, [pc, #16]	@ (8001a34 <buzzer+0x48>)
 8001a22:	f00f fa63 	bl	8010eec <HAL_TIM_PWM_Stop_IT>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40000400 	.word	0x40000400
 8001a34:	20000310 	.word	0x20000310

08001a38 <Conf_ACCEL>:

int Conf_ACCEL(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	  if(IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO) != BSP_ERROR_NONE)
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f009 fd84 	bl	800b54c <IKS01A3_MOTION_SENSOR_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <Conf_ACCEL+0x1c>
	  {
	 	  printf("Pb of SENSOR_Init\n\r");
 8001a4a:	4817      	ldr	r0, [pc, #92]	@ (8001aa8 <Conf_ACCEL+0x70>)
 8001a4c:	f010 f9d6 	bl	8011dfc <iprintf>
	 	  return 1;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e026      	b.n	8001aa2 <Conf_ACCEL+0x6a>
	  }

	  if(IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE)
 8001a54:	2202      	movs	r2, #2
 8001a56:	2102      	movs	r1, #2
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f009 feb7 	bl	800b7cc <IKS01A3_MOTION_SENSOR_SetFullScale>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <Conf_ACCEL+0x36>
	   {
	  	  printf("Pb of SENSOR_SetFullScale\n\r");
 8001a64:	4811      	ldr	r0, [pc, #68]	@ (8001aac <Conf_ACCEL+0x74>)
 8001a66:	f010 f9c9 	bl	8011dfc <iprintf>
	  	  return 1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e019      	b.n	8001aa2 <Conf_ACCEL+0x6a>
	   }

	  if(IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, 200.0) != BSP_ERROR_NONE)
 8001a6e:	4a10      	ldr	r2, [pc, #64]	@ (8001ab0 <Conf_ACCEL+0x78>)
 8001a70:	2102      	movs	r1, #2
 8001a72:	2001      	movs	r0, #1
 8001a74:	f009 fe66 	bl	800b744 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d004      	beq.n	8001a88 <Conf_ACCEL+0x50>
	   {
	  	  printf("Pb of accelerometer SENSOR_SetOutputDataRate\n\r");
 8001a7e:	480d      	ldr	r0, [pc, #52]	@ (8001ab4 <Conf_ACCEL+0x7c>)
 8001a80:	f010 f9bc 	bl	8011dfc <iprintf>
	  	  return 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e00c      	b.n	8001aa2 <Conf_ACCEL+0x6a>
	   }

	  if(IKS01A3_MOTION_SENSOR_Enable_6D_Orientation(IKS01A3_LIS2DW12_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f00a f8f2 	bl	800bc74 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <Conf_ACCEL+0x68>
		{
		  printf("Pb of accelerometer SENSOR_SetOutputDataRate\n\r");
 8001a96:	4807      	ldr	r0, [pc, #28]	@ (8001ab4 <Conf_ACCEL+0x7c>)
 8001a98:	f010 f9b0 	bl	8011dfc <iprintf>
		  return 1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <Conf_ACCEL+0x6a>
		}
return 0;
 8001aa0:	2300      	movs	r3, #0

}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	08013f24 	.word	0x08013f24
 8001aac:	08013f38 	.word	0x08013f38
 8001ab0:	43480000 	.word	0x43480000
 8001ab4:	08013f54 	.word	0x08013f54

08001ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001abc:	f00a f916 	bl	800bcec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac0:	f000 f87e 	bl	8001bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac4:	f000 fabe 	bl	8002044 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ac8:	f000 fa92 	bl	8001ff0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001acc:	f000 f91e 	bl	8001d0c <MX_SPI1_Init>
  MX_ADC_Init();
 8001ad0:	f000 f8c4 	bl	8001c5c <MX_ADC_Init>
  MX_TIM3_Init();
 8001ad4:	f000 f99c 	bl	8001e10 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001ad8:	f000 fa1e 	bl	8001f18 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001adc:	f000 fa52 	bl	8001f84 <MX_TIM7_Init>
  MX_TIM2_Init();
 8001ae0:	f000 f94a 	bl	8001d78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("PROJET EnviroSense !!! \r\n");
 8001ae4:	482c      	ldr	r0, [pc, #176]	@ (8001b98 <main+0xe0>)
 8001ae6:	f010 f9f9 	bl	8011edc <puts>
  MAX7219_Init();
 8001aea:	f000 fb7f 	bl	80021ec <MAX7219_Init>
  MAX7219_DisplayTestStart();
 8001aee:	f000 fb9a 	bl	8002226 <MAX7219_DisplayTestStart>
  HAL_Delay(2000);
 8001af2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001af6:	f00a f967 	bl	800bdc8 <HAL_Delay>
  MAX7219_DisplayTestStop();
 8001afa:	f000 fb9c 	bl	8002236 <MAX7219_DisplayTestStop>
  printf("Display test finished \r\n");
 8001afe:	4827      	ldr	r0, [pc, #156]	@ (8001b9c <main+0xe4>)
 8001b00:	f010 f9ec 	bl	8011edc <puts>
  Conf_TEMP();
 8001b04:	f7ff fe4a 	bl	800179c <Conf_TEMP>
  Conf_ACCEL();
 8001b08:	f7ff ff96 	bl	8001a38 <Conf_ACCEL>
  if(HAL_TIM_Base_Start_IT(&htim6)!= HAL_OK)
 8001b0c:	4824      	ldr	r0, [pc, #144]	@ (8001ba0 <main+0xe8>)
 8001b0e:	f00f f84b 	bl	8010ba8 <HAL_TIM_Base_Start_IT>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <main+0x64>
  {
    Error_Handler();
 8001b18:	f000 fb4b 	bl	80021b2 <Error_Handler>
  }
  printf("Timer 6 enabled\r\n");
 8001b1c:	4821      	ldr	r0, [pc, #132]	@ (8001ba4 <main+0xec>)
 8001b1e:	f010 f9dd 	bl	8011edc <puts>

  HAL_TIM_Base_Start_IT(&htim3);
 8001b22:	4821      	ldr	r0, [pc, #132]	@ (8001ba8 <main+0xf0>)
 8001b24:	f00f f840 	bl	8010ba8 <HAL_TIM_Base_Start_IT>
  Aquire_cons();
 8001b28:	f7ff ff1c 	bl	8001964 <Aquire_cons>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Aquire_temp();	//Aquisition de la temperature
 8001b2c:	f7ff fe50 	bl	80017d0 <Aquire_temp>

	  if(flag_irq ==1) //On test le flag du timer 6
 8001b30:	4b1e      	ldr	r3, [pc, #120]	@ (8001bac <main+0xf4>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d11a      	bne.n	8001b6e <main+0xb6>
	  {
		  Affichage_TEMP();
 8001b38:	f7ff fedc 	bl	80018f4 <Affichage_TEMP>
		  display_temp();	//Affichage de la température sur les afficheurs 7 segments
 8001b3c:	f7ff fe64 	bl	8001808 <display_temp>
		  if(comp.cons < comp.temp){
 8001b40:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb0 <main+0xf8>)
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <main+0xf8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d209      	bcs.n	8001b60 <main+0xa8>
			  printf("consigne < temperature !! \r\n");
 8001b4c:	4819      	ldr	r0, [pc, #100]	@ (8001bb4 <main+0xfc>)
 8001b4e:	f010 f9c5 	bl	8011edc <puts>
			  GestionLed(Aff_AlarmTemp);
 8001b52:	2002      	movs	r0, #2
 8001b54:	f7ff fc88 	bl	8001468 <GestionLed>
			  motor(1);//On active le moteur
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f7ff ff23 	bl	80019a4 <motor>
 8001b5e:	e006      	b.n	8001b6e <main+0xb6>
		  }
		  else{
			 motor(0);//On eteind le moteur
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7ff ff1f 	bl	80019a4 <motor>
			 HAL_Delay(500);
 8001b66:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b6a:	f00a f92d 	bl	800bdc8 <HAL_Delay>
		  }
	  }
	  if(flag_irq2 ==1)//On test le flag de l'interruption de l'accel
 8001b6e:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <main+0x100>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d1da      	bne.n	8001b2c <main+0x74>
	  {
		  flag_irq2 = 0;
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <main+0x100>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
		  printf("je buzzz !! \r\n");
 8001b7c:	480f      	ldr	r0, [pc, #60]	@ (8001bbc <main+0x104>)
 8001b7e:	f010 f9ad 	bl	8011edc <puts>
		  buzzer (1);// On buzzz
 8001b82:	2001      	movs	r0, #1
 8001b84:	f7ff ff32 	bl	80019ec <buzzer>
		  HAL_Delay(1000); //On attend 1 seconde
 8001b88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b8c:	f00a f91c 	bl	800bdc8 <HAL_Delay>
		  buzzer(0);//On eteind le buzzer
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff ff2b 	bl	80019ec <buzzer>
	  Aquire_temp();	//Aquisition de la temperature
 8001b96:	e7c9      	b.n	8001b2c <main+0x74>
 8001b98:	08013f84 	.word	0x08013f84
 8001b9c:	08013fa0 	.word	0x08013fa0
 8001ba0:	20000350 	.word	0x20000350
 8001ba4:	08013fb8 	.word	0x08013fb8
 8001ba8:	20000310 	.word	0x20000310
 8001bac:	2000051c 	.word	0x2000051c
 8001bb0:	20000524 	.word	0x20000524
 8001bb4:	08013fcc 	.word	0x08013fcc
 8001bb8:	2000051d 	.word	0x2000051d
 8001bbc:	08013fe8 	.word	0x08013fe8

08001bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b092      	sub	sp, #72	@ 0x48
 8001bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	2234      	movs	r2, #52	@ 0x34
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f010 fab8 	bl	8012144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <SystemClock_Config+0x98>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001bea:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <SystemClock_Config+0x98>)
 8001bec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bf0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c02:	2300      	movs	r3, #0
 8001c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001c06:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001c0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001c0c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001c10:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4618      	mov	r0, r3
 8001c18:	f00d fefa 	bl	800fa10 <HAL_RCC_OscConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c22:	f000 fac6 	bl	80021b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c26:	230f      	movs	r3, #15
 8001c28:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f00e fa16 	bl	8010070 <HAL_RCC_ClockConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001c4a:	f000 fab2 	bl	80021b2 <Error_Handler>
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3748      	adds	r7, #72	@ 0x48
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40007000 	.word	0x40007000

08001c5c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001c6c:	4b25      	ldr	r3, [pc, #148]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001c6e:	4a26      	ldr	r2, [pc, #152]	@ (8001d08 <MX_ADC_Init+0xac>)
 8001c70:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c72:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001c78:	4b22      	ldr	r3, [pc, #136]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c7e:	4b21      	ldr	r3, [pc, #132]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c84:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001c90:	4b1c      	ldr	r3, [pc, #112]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001c96:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001c9c:	4b19      	ldr	r3, [pc, #100]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001ca2:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8001caa:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001cba:	2210      	movs	r2, #16
 8001cbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001ccc:	480d      	ldr	r0, [pc, #52]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001cce:	f00a f89d 	bl	800be0c <HAL_ADC_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001cd8:	f000 fa6b 	bl	80021b2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	4619      	mov	r1, r3
 8001cec:	4805      	ldr	r0, [pc, #20]	@ (8001d04 <MX_ADC_Init+0xa8>)
 8001cee:	f00a fafb 	bl	800c2e8 <HAL_ADC_ConfigChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001cf8:	f000 fa5b 	bl	80021b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000224 	.word	0x20000224
 8001d08:	40012400 	.word	0x40012400

08001d0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d10:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d12:	4a18      	ldr	r2, [pc, #96]	@ (8001d74 <MX_SPI1_Init+0x68>)
 8001d14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d16:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d1e:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d44:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d50:	4b07      	ldr	r3, [pc, #28]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d58:	220a      	movs	r2, #10
 8001d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d5c:	4804      	ldr	r0, [pc, #16]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d5e:	f00e fc4d 	bl	80105fc <HAL_SPI_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d68:	f000 fa23 	bl	80021b2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000278 	.word	0x20000278
 8001d74:	40013000 	.word	0x40013000

08001d78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001d96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001d9e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001da2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da4:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8001daa:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001dac:	22c8      	movs	r2, #200	@ 0xc8
 8001dae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db0:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dbc:	4813      	ldr	r0, [pc, #76]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001dbe:	f00e feb3 	bl	8010b28 <HAL_TIM_Base_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001dc8:	f000 f9f3 	bl	80021b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001dda:	f00f faaf 	bl	801133c <HAL_TIM_ConfigClockSource>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001de4:	f000 f9e5 	bl	80021b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001df6:	f00f fdad 	bl	8011954 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e00:	f000 f9d7 	bl	80021b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200002d0 	.word	0x200002d0

08001e10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	@ 0x28
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e16:	f107 0318 	add.w	r3, r7, #24
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e24:	f107 0310 	add.w	r3, r7, #16
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e2e:	463b      	mov	r3, r7
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e3a:	4b35      	ldr	r3, [pc, #212]	@ (8001f10 <MX_TIM3_Init+0x100>)
 8001e3c:	4a35      	ldr	r2, [pc, #212]	@ (8001f14 <MX_TIM3_Init+0x104>)
 8001e3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000;
 8001e40:	4b33      	ldr	r3, [pc, #204]	@ (8001f10 <MX_TIM3_Init+0x100>)
 8001e42:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001e46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b31      	ldr	r3, [pc, #196]	@ (8001f10 <MX_TIM3_Init+0x100>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001e4e:	4b30      	ldr	r3, [pc, #192]	@ (8001f10 <MX_TIM3_Init+0x100>)
 8001e50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e56:	4b2e      	ldr	r3, [pc, #184]	@ (8001f10 <MX_TIM3_Init+0x100>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f10 <MX_TIM3_Init+0x100>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e62:	482b      	ldr	r0, [pc, #172]	@ (8001f10 <MX_TIM3_Init+0x100>)
 8001e64:	f00e fe60 	bl	8010b28 <HAL_TIM_Base_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001e6e:	f000 f9a0 	bl	80021b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e76:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e78:	f107 0318 	add.w	r3, r7, #24
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4824      	ldr	r0, [pc, #144]	@ (8001f10 <MX_TIM3_Init+0x100>)
 8001e80:	f00f fa5c 	bl	801133c <HAL_TIM_ConfigClockSource>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001e8a:	f000 f992 	bl	80021b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e8e:	4820      	ldr	r0, [pc, #128]	@ (8001f10 <MX_TIM3_Init+0x100>)
 8001e90:	f00e ff02 	bl	8010c98 <HAL_TIM_PWM_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001e9a:	f000 f98a 	bl	80021b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4818      	ldr	r0, [pc, #96]	@ (8001f10 <MX_TIM3_Init+0x100>)
 8001eae:	f00f fd51 	bl	8011954 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001eb8:	f000 f97b 	bl	80021b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ebc:	2360      	movs	r3, #96	@ 0x60
 8001ebe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001ec0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001ec4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ece:	463b      	mov	r3, r7
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	480e      	ldr	r0, [pc, #56]	@ (8001f10 <MX_TIM3_Init+0x100>)
 8001ed6:	f00f f96f 	bl	80111b8 <HAL_TIM_PWM_ConfigChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001ee0:	f000 f967 	bl	80021b2 <Error_Handler>
  }
  sConfigOC.Pulse = 1319;
 8001ee4:	f240 5327 	movw	r3, #1319	@ 0x527
 8001ee8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eea:	463b      	mov	r3, r7
 8001eec:	2204      	movs	r2, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4807      	ldr	r0, [pc, #28]	@ (8001f10 <MX_TIM3_Init+0x100>)
 8001ef2:	f00f f961 	bl	80111b8 <HAL_TIM_PWM_ConfigChannel>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001efc:	f000 f959 	bl	80021b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f00:	4803      	ldr	r0, [pc, #12]	@ (8001f10 <MX_TIM3_Init+0x100>)
 8001f02:	f000 fb9b 	bl	800263c <HAL_TIM_MspPostInit>

}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	@ 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000310 	.word	0x20000310
 8001f14:	40000400 	.word	0x40000400

08001f18 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1e:	463b      	mov	r3, r7
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f26:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <MX_TIM6_Init+0x64>)
 8001f28:	4a15      	ldr	r2, [pc, #84]	@ (8001f80 <MX_TIM6_Init+0x68>)
 8001f2a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000;
 8001f2c:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <MX_TIM6_Init+0x64>)
 8001f2e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001f32:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <MX_TIM6_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <MX_TIM6_Init+0x64>)
 8001f3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f40:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <MX_TIM6_Init+0x64>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f48:	480c      	ldr	r0, [pc, #48]	@ (8001f7c <MX_TIM6_Init+0x64>)
 8001f4a:	f00e fded 	bl	8010b28 <HAL_TIM_Base_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001f54:	f000 f92d 	bl	80021b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f60:	463b      	mov	r3, r7
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <MX_TIM6_Init+0x64>)
 8001f66:	f00f fcf5 	bl	8011954 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001f70:	f000 f91f 	bl	80021b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000350 	.word	0x20000350
 8001f80:	40001000 	.word	0x40001000

08001f84 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f92:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <MX_TIM7_Init+0x64>)
 8001f94:	4a15      	ldr	r2, [pc, #84]	@ (8001fec <MX_TIM7_Init+0x68>)
 8001f96:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32000;
 8001f98:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <MX_TIM7_Init+0x64>)
 8001f9a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001f9e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <MX_TIM7_Init+0x64>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <MX_TIM7_Init+0x64>)
 8001fa8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001fac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <MX_TIM7_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001fb4:	480c      	ldr	r0, [pc, #48]	@ (8001fe8 <MX_TIM7_Init+0x64>)
 8001fb6:	f00e fdb7 	bl	8010b28 <HAL_TIM_Base_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001fc0:	f000 f8f7 	bl	80021b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001fcc:	463b      	mov	r3, r7
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <MX_TIM7_Init+0x64>)
 8001fd2:	f00f fcbf 	bl	8011954 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001fdc:	f000 f8e9 	bl	80021b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000390 	.word	0x20000390
 8001fec:	40001400 	.word	0x40001400

08001ff0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	@ (8002040 <MX_USART2_UART_Init+0x50>)
 8001ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ffa:	4b10      	ldr	r3, [pc, #64]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8001ffc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002000:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002008:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800200e:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002014:	4b09      	ldr	r3, [pc, #36]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002016:	220c      	movs	r2, #12
 8002018:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201a:	4b08      	ldr	r3, [pc, #32]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002026:	4805      	ldr	r0, [pc, #20]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002028:	f00f fcf2 	bl	8011a10 <HAL_UART_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002032:	f000 f8be 	bl	80021b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200003d0 	.word	0x200003d0
 8002040:	40004400 	.word	0x40004400

08002044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	@ 0x28
 8002048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205a:	4b4b      	ldr	r3, [pc, #300]	@ (8002188 <MX_GPIO_Init+0x144>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a4a      	ldr	r2, [pc, #296]	@ (8002188 <MX_GPIO_Init+0x144>)
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	61d3      	str	r3, [r2, #28]
 8002066:	4b48      	ldr	r3, [pc, #288]	@ (8002188 <MX_GPIO_Init+0x144>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002072:	4b45      	ldr	r3, [pc, #276]	@ (8002188 <MX_GPIO_Init+0x144>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4a44      	ldr	r2, [pc, #272]	@ (8002188 <MX_GPIO_Init+0x144>)
 8002078:	f043 0320 	orr.w	r3, r3, #32
 800207c:	61d3      	str	r3, [r2, #28]
 800207e:	4b42      	ldr	r3, [pc, #264]	@ (8002188 <MX_GPIO_Init+0x144>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	4b3f      	ldr	r3, [pc, #252]	@ (8002188 <MX_GPIO_Init+0x144>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4a3e      	ldr	r2, [pc, #248]	@ (8002188 <MX_GPIO_Init+0x144>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	61d3      	str	r3, [r2, #28]
 8002096:	4b3c      	ldr	r3, [pc, #240]	@ (8002188 <MX_GPIO_Init+0x144>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <MX_GPIO_Init+0x144>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a38      	ldr	r2, [pc, #224]	@ (8002188 <MX_GPIO_Init+0x144>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	61d3      	str	r3, [r2, #28]
 80020ae:	4b36      	ldr	r3, [pc, #216]	@ (8002188 <MX_GPIO_Init+0x144>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L0_Pin|L1_Pin|L2_Pin|L3_Pin
 80020ba:	2200      	movs	r2, #0
 80020bc:	f641 4106 	movw	r1, #7174	@ 0x1c06
 80020c0:	4832      	ldr	r0, [pc, #200]	@ (800218c <MX_GPIO_Init+0x148>)
 80020c2:	f00a ff29 	bl	800cf18 <HAL_GPIO_WritePin>
                          |L4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020cc:	4830      	ldr	r0, [pc, #192]	@ (8002190 <MX_GPIO_Init+0x14c>)
 80020ce:	f00a ff23 	bl	800cf18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020de:	2302      	movs	r3, #2
 80020e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	482a      	ldr	r0, [pc, #168]	@ (8002194 <MX_GPIO_Init+0x150>)
 80020ea:	f00a fc95 	bl	800ca18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Accel_INT_Pin */
  GPIO_InitStruct.Pin = Accel_INT_Pin;
 80020ee:	2301      	movs	r3, #1
 80020f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Accel_INT_GPIO_Port, &GPIO_InitStruct);
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4619      	mov	r1, r3
 8002102:	4822      	ldr	r0, [pc, #136]	@ (800218c <MX_GPIO_Init+0x148>)
 8002104:	f00a fc88 	bl	800ca18 <HAL_GPIO_Init>

  /*Configure GPIO pins : L0_Pin L1_Pin L2_Pin L3_Pin
                           L4_Pin */
  GPIO_InitStruct.Pin = L0_Pin|L1_Pin|L2_Pin|L3_Pin
 8002108:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800210c:	617b      	str	r3, [r7, #20]
                          |L4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210e:	2301      	movs	r3, #1
 8002110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	481a      	ldr	r0, [pc, #104]	@ (800218c <MX_GPIO_Init+0x148>)
 8002122:	f00a fc79 	bl	800ca18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002126:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800212a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212c:	2301      	movs	r3, #1
 800212e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4619      	mov	r1, r3
 800213e:	4814      	ldr	r0, [pc, #80]	@ (8002190 <MX_GPIO_Init+0x14c>)
 8002140:	f00a fc6a 	bl	800ca18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002144:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800214a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800214e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	4619      	mov	r1, r3
 800215a:	480d      	ldr	r0, [pc, #52]	@ (8002190 <MX_GPIO_Init+0x14c>)
 800215c:	f00a fc5c 	bl	800ca18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	2006      	movs	r0, #6
 8002166:	f00a fbc4 	bl	800c8f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800216a:	2006      	movs	r0, #6
 800216c:	f00a fbdd 	bl	800c92a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	2028      	movs	r0, #40	@ 0x28
 8002176:	f00a fbbc 	bl	800c8f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800217a:	2028      	movs	r0, #40	@ 0x28
 800217c:	f00a fbd5 	bl	800c92a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002180:	bf00      	nop
 8002182:	3728      	adds	r7, #40	@ 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	40020400 	.word	0x40020400
 8002190:	40020000 	.word	0x40020000
 8002194:	40020800 	.word	0x40020800

08002198 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
	ITM_SendChar(ch);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fa2a 	bl	80015fc <ITM_SendChar>
	return(ch);
 80021a8:	687b      	ldr	r3, [r7, #4]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq(); //Modif pour eviter le freeze
  while (1)
 80021b6:	bf00      	nop
 80021b8:	e7fd      	b.n	80021b6 <Error_Handler+0x4>
	...

080021bc <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80021c0:	2201      	movs	r2, #1
 80021c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021c6:	4802      	ldr	r0, [pc, #8]	@ (80021d0 <SPI_CS_High+0x14>)
 80021c8:	f00a fea6 	bl	800cf18 <HAL_GPIO_WritePin>
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40020000 	.word	0x40020000

080021d4 <SPI_CS_Low>:

 void SPI_CS_Low()
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80021d8:	2200      	movs	r2, #0
 80021da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021de:	4802      	ldr	r0, [pc, #8]	@ (80021e8 <SPI_CS_Low+0x14>)
 80021e0:	f00a fe9a 	bl	800cf18 <HAL_GPIO_WritePin>
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40020000 	.word	0x40020000

080021ec <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 80021f0:	2107      	movs	r1, #7
 80021f2:	200b      	movs	r0, #11
 80021f4:	f000 f8ca 	bl	800238c <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 80021f8:	2100      	movs	r1, #0
 80021fa:	2009      	movs	r0, #9
 80021fc:	f000 f8c6 	bl	800238c <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 8002200:	f000 f809 	bl	8002216 <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8002204:	f000 f817 	bl	8002236 <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8002208:	f000 f82f 	bl	800226a <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 800220c:	200f      	movs	r0, #15
 800220e:	f000 f81a 	bl	8002246 <MAX7219_SetBrightness>
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}

08002216 <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 800221a:	2101      	movs	r1, #1
 800221c:	200c      	movs	r0, #12
 800221e:	f000 f8b5 	bl	800238c <MAX7219_Write>
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}

08002226 <MAX7219_DisplayTestStart>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStart (void)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 1);                 // put MAX7219 into "display test" mode
 800222a:	2101      	movs	r1, #1
 800222c:	200f      	movs	r0, #15
 800222e:	f000 f8ad 	bl	800238c <MAX7219_Write>
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}

08002236 <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 800223a:	2100      	movs	r1, #0
 800223c:	200f      	movs	r0, #15
 800223e:	f000 f8a5 	bl	800238c <MAX7219_Write>
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}

08002246 <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	4619      	mov	r1, r3
 800225c:	200a      	movs	r0, #10
 800225e:	f000 f895 	bl	800238c <MAX7219_Write>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 8002270:	2300      	movs	r3, #0
 8002272:	71fb      	strb	r3, [r7, #7]
 8002274:	e007      	b.n	8002286 <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f886 	bl	800238c <MAX7219_Write>
  for (i=0; i < 8; i++)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	3301      	adds	r3, #1
 8002284:	71fb      	strb	r3, [r7, #7]
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b07      	cmp	r3, #7
 800228a:	d9f4      	bls.n	8002276 <MAX7219_Clear+0xc>
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <MAX7219_DisplayChar>:
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar (char digit, char character)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	460a      	mov	r2, r1
 80022a0:	71fb      	strb	r3, [r7, #7]
 80022a2:	4613      	mov	r3, r2
 80022a4:	71bb      	strb	r3, [r7, #6]
  MAX7219_Write(digit, MAX7219_LookupCode(character));
 80022a6:	79bb      	ldrb	r3, [r7, #6]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f823 	bl	80022f4 <MAX7219_LookupCode>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f868 	bl	800238c <MAX7219_Write>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <MAX7219_DisplayChar1>:

void MAX7219_DisplayChar1 (char digit, char character)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	460a      	mov	r2, r1
 80022ce:	71fb      	strb	r3, [r7, #7]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71bb      	strb	r3, [r7, #6]
  MAX7219_Write(digit, MAX7219_LookupCode1(character));
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f832 	bl	8002340 <MAX7219_LookupCode1>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 f851 	bl	800238c <MAX7219_Write>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <MAX7219_LookupCode>:
* Arguments  : character to display
* Returns    : segment code
*********************************************************************************************************
*/
static unsigned char MAX7219_LookupCode (char character)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	e00f      	b.n	8002324 <MAX7219_LookupCode+0x30>
    if (character == MAX7219_Font[i].ascii)
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	4a0d      	ldr	r2, [pc, #52]	@ (800233c <MAX7219_LookupCode+0x48>)
 8002308:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800230c:	79fa      	ldrb	r2, [r7, #7]
 800230e:	429a      	cmp	r2, r3
 8002310:	d105      	bne.n	800231e <MAX7219_LookupCode+0x2a>
      return MAX7219_Font[i].segs;                    // return segments code
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	4a09      	ldr	r2, [pc, #36]	@ (800233c <MAX7219_LookupCode+0x48>)
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	785b      	ldrb	r3, [r3, #1]
 800231c:	e009      	b.n	8002332 <MAX7219_LookupCode+0x3e>
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	3301      	adds	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	4a05      	ldr	r2, [pc, #20]	@ (800233c <MAX7219_LookupCode+0x48>)
 8002328:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1e9      	bne.n	8002304 <MAX7219_LookupCode+0x10>
  return 0;                                           // code not found, return null (blank)
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	08014010 	.word	0x08014010

08002340 <MAX7219_LookupCode1>:

static unsigned char MAX7219_LookupCode1 (char character)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font1[i].ascii1; i++)             // scan font table for ascii code
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e00f      	b.n	8002370 <MAX7219_LookupCode1+0x30>
    if (character == MAX7219_Font1[i].ascii1)
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	4a0d      	ldr	r2, [pc, #52]	@ (8002388 <MAX7219_LookupCode1+0x48>)
 8002354:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002358:	79fa      	ldrb	r2, [r7, #7]
 800235a:	429a      	cmp	r2, r3
 800235c:	d105      	bne.n	800236a <MAX7219_LookupCode1+0x2a>
      return MAX7219_Font1[i].segs1;                    // return segments code
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	4a09      	ldr	r2, [pc, #36]	@ (8002388 <MAX7219_LookupCode1+0x48>)
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	785b      	ldrb	r3, [r3, #1]
 8002368:	e009      	b.n	800237e <MAX7219_LookupCode1+0x3e>
  for (i = 0; MAX7219_Font1[i].ascii1; i++)             // scan font table for ascii code
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	3301      	adds	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	4a05      	ldr	r2, [pc, #20]	@ (8002388 <MAX7219_LookupCode1+0x48>)
 8002374:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e9      	bne.n	8002350 <MAX7219_LookupCode1+0x10>
  return 0;                                           // code not found, return null (blank)
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	0801404c 	.word	0x0801404c

0800238c <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	460a      	mov	r2, r1
 8002396:	71fb      	strb	r3, [r7, #7]
 8002398:	4613      	mov	r3, r2
 800239a:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 800239c:	f7ff ff1a 	bl	80021d4 <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f80c 	bl	80023c0 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 80023a8:	79bb      	ldrb	r3, [r7, #6]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f808 	bl	80023c0 <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 80023b0:	f7ff ff04 	bl	80021bc <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 80023b4:	f7ff ff0e 	bl	80021d4 <SPI_CS_Low>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 80023ca:	1df9      	adds	r1, r7, #7
 80023cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d0:	2201      	movs	r2, #1
 80023d2:	4803      	ldr	r0, [pc, #12]	@ (80023e0 <MAX7219_SendByte+0x20>)
 80023d4:	f00e f99b 	bl	801070e <HAL_SPI_Transmit>
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000278 	.word	0x20000278

080023e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80023ea:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <HAL_MspInit+0x5c>)
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	4a14      	ldr	r2, [pc, #80]	@ (8002440 <HAL_MspInit+0x5c>)
 80023f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023f4:	6253      	str	r3, [r2, #36]	@ 0x24
 80023f6:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <HAL_MspInit+0x5c>)
 80023f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002402:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <HAL_MspInit+0x5c>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a0e      	ldr	r2, [pc, #56]	@ (8002440 <HAL_MspInit+0x5c>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6213      	str	r3, [r2, #32]
 800240e:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <HAL_MspInit+0x5c>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <HAL_MspInit+0x5c>)
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	4a08      	ldr	r2, [pc, #32]	@ (8002440 <HAL_MspInit+0x5c>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002424:	6253      	str	r3, [r2, #36]	@ 0x24
 8002426:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <HAL_MspInit+0x5c>)
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002432:	2007      	movs	r0, #7
 8002434:	f00a fa52 	bl	800c8dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	@ 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a15      	ldr	r2, [pc, #84]	@ (80024b8 <HAL_ADC_MspInit+0x74>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d123      	bne.n	80024ae <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002466:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_ADC_MspInit+0x78>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4a14      	ldr	r2, [pc, #80]	@ (80024bc <HAL_ADC_MspInit+0x78>)
 800246c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002470:	6213      	str	r3, [r2, #32]
 8002472:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_ADC_MspInit+0x78>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <HAL_ADC_MspInit+0x78>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4a0e      	ldr	r2, [pc, #56]	@ (80024bc <HAL_ADC_MspInit+0x78>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	61d3      	str	r3, [r2, #28]
 800248a:	4b0c      	ldr	r3, [pc, #48]	@ (80024bc <HAL_ADC_MspInit+0x78>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002496:	2301      	movs	r3, #1
 8002498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800249a:	2303      	movs	r3, #3
 800249c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4805      	ldr	r0, [pc, #20]	@ (80024c0 <HAL_ADC_MspInit+0x7c>)
 80024aa:	f00a fab5 	bl	800ca18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	@ 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40012400 	.word	0x40012400
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020000 	.word	0x40020000

080024c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	@ 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a17      	ldr	r2, [pc, #92]	@ (8002540 <HAL_SPI_MspInit+0x7c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d127      	bne.n	8002536 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024e6:	4b17      	ldr	r3, [pc, #92]	@ (8002544 <HAL_SPI_MspInit+0x80>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a16      	ldr	r2, [pc, #88]	@ (8002544 <HAL_SPI_MspInit+0x80>)
 80024ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024f0:	6213      	str	r3, [r2, #32]
 80024f2:	4b14      	ldr	r3, [pc, #80]	@ (8002544 <HAL_SPI_MspInit+0x80>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <HAL_SPI_MspInit+0x80>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a10      	ldr	r2, [pc, #64]	@ (8002544 <HAL_SPI_MspInit+0x80>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	61d3      	str	r3, [r2, #28]
 800250a:	4b0e      	ldr	r3, [pc, #56]	@ (8002544 <HAL_SPI_MspInit+0x80>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002516:	23e0      	movs	r3, #224	@ 0xe0
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002522:	2303      	movs	r3, #3
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002526:	2305      	movs	r3, #5
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	4805      	ldr	r0, [pc, #20]	@ (8002548 <HAL_SPI_MspInit+0x84>)
 8002532:	f00a fa71 	bl	800ca18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002536:	bf00      	nop
 8002538:	3728      	adds	r7, #40	@ 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40013000 	.word	0x40013000
 8002544:	40023800 	.word	0x40023800
 8002548:	40020000 	.word	0x40020000

0800254c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800255c:	d114      	bne.n	8002588 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800255e:	4b33      	ldr	r3, [pc, #204]	@ (800262c <HAL_TIM_Base_MspInit+0xe0>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	4a32      	ldr	r2, [pc, #200]	@ (800262c <HAL_TIM_Base_MspInit+0xe0>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6253      	str	r3, [r2, #36]	@ 0x24
 800256a:	4b30      	ldr	r3, [pc, #192]	@ (800262c <HAL_TIM_Base_MspInit+0xe0>)
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2100      	movs	r1, #0
 800257a:	201c      	movs	r0, #28
 800257c:	f00a f9b9 	bl	800c8f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002580:	201c      	movs	r0, #28
 8002582:	f00a f9d2 	bl	800c92a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002586:	e04c      	b.n	8002622 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a28      	ldr	r2, [pc, #160]	@ (8002630 <HAL_TIM_Base_MspInit+0xe4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d114      	bne.n	80025bc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002592:	4b26      	ldr	r3, [pc, #152]	@ (800262c <HAL_TIM_Base_MspInit+0xe0>)
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	4a25      	ldr	r2, [pc, #148]	@ (800262c <HAL_TIM_Base_MspInit+0xe0>)
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	6253      	str	r3, [r2, #36]	@ 0x24
 800259e:	4b23      	ldr	r3, [pc, #140]	@ (800262c <HAL_TIM_Base_MspInit+0xe0>)
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	201d      	movs	r0, #29
 80025b0:	f00a f99f 	bl	800c8f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025b4:	201d      	movs	r0, #29
 80025b6:	f00a f9b8 	bl	800c92a <HAL_NVIC_EnableIRQ>
}
 80025ba:	e032      	b.n	8002622 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002634 <HAL_TIM_Base_MspInit+0xe8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d114      	bne.n	80025f0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025c6:	4b19      	ldr	r3, [pc, #100]	@ (800262c <HAL_TIM_Base_MspInit+0xe0>)
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	4a18      	ldr	r2, [pc, #96]	@ (800262c <HAL_TIM_Base_MspInit+0xe0>)
 80025cc:	f043 0310 	orr.w	r3, r3, #16
 80025d0:	6253      	str	r3, [r2, #36]	@ 0x24
 80025d2:	4b16      	ldr	r3, [pc, #88]	@ (800262c <HAL_TIM_Base_MspInit+0xe0>)
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2100      	movs	r1, #0
 80025e2:	202b      	movs	r0, #43	@ 0x2b
 80025e4:	f00a f985 	bl	800c8f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80025e8:	202b      	movs	r0, #43	@ 0x2b
 80025ea:	f00a f99e 	bl	800c92a <HAL_NVIC_EnableIRQ>
}
 80025ee:	e018      	b.n	8002622 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a10      	ldr	r2, [pc, #64]	@ (8002638 <HAL_TIM_Base_MspInit+0xec>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d113      	bne.n	8002622 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80025fa:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <HAL_TIM_Base_MspInit+0xe0>)
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	4a0b      	ldr	r2, [pc, #44]	@ (800262c <HAL_TIM_Base_MspInit+0xe0>)
 8002600:	f043 0320 	orr.w	r3, r3, #32
 8002604:	6253      	str	r3, [r2, #36]	@ 0x24
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <HAL_TIM_Base_MspInit+0xe0>)
 8002608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 1);
 8002612:	2201      	movs	r2, #1
 8002614:	2100      	movs	r1, #0
 8002616:	202c      	movs	r0, #44	@ 0x2c
 8002618:	f00a f96b 	bl	800c8f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800261c:	202c      	movs	r0, #44	@ 0x2c
 800261e:	f00a f984 	bl	800c92a <HAL_NVIC_EnableIRQ>
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	40000400 	.word	0x40000400
 8002634:	40001000 	.word	0x40001000
 8002638:	40001400 	.word	0x40001400

0800263c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	@ 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1f      	ldr	r2, [pc, #124]	@ (80026d8 <HAL_TIM_MspPostInit+0x9c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d137      	bne.n	80026ce <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800265e:	4b1f      	ldr	r3, [pc, #124]	@ (80026dc <HAL_TIM_MspPostInit+0xa0>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a1e      	ldr	r2, [pc, #120]	@ (80026dc <HAL_TIM_MspPostInit+0xa0>)
 8002664:	f043 0304 	orr.w	r3, r3, #4
 8002668:	61d3      	str	r3, [r2, #28]
 800266a:	4b1c      	ldr	r3, [pc, #112]	@ (80026dc <HAL_TIM_MspPostInit+0xa0>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002676:	4b19      	ldr	r3, [pc, #100]	@ (80026dc <HAL_TIM_MspPostInit+0xa0>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4a18      	ldr	r2, [pc, #96]	@ (80026dc <HAL_TIM_MspPostInit+0xa0>)
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	61d3      	str	r3, [r2, #28]
 8002682:	4b16      	ldr	r3, [pc, #88]	@ (80026dc <HAL_TIM_MspPostInit+0xa0>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzz_Pin;
 800268e:	2380      	movs	r3, #128	@ 0x80
 8002690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800269e:	2302      	movs	r3, #2
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Buzz_GPIO_Port, &GPIO_InitStruct);
 80026a2:	f107 0314 	add.w	r3, r7, #20
 80026a6:	4619      	mov	r1, r3
 80026a8:	480d      	ldr	r0, [pc, #52]	@ (80026e0 <HAL_TIM_MspPostInit+0xa4>)
 80026aa:	f00a f9b5 	bl	800ca18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026ae:	2310      	movs	r3, #16
 80026b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026be:	2302      	movs	r3, #2
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4619      	mov	r1, r3
 80026c8:	4806      	ldr	r0, [pc, #24]	@ (80026e4 <HAL_TIM_MspPostInit+0xa8>)
 80026ca:	f00a f9a5 	bl	800ca18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026ce:	bf00      	nop
 80026d0:	3728      	adds	r7, #40	@ 0x28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020400 	.word	0x40020400

080026e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	@ 0x28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a17      	ldr	r2, [pc, #92]	@ (8002764 <HAL_UART_MspInit+0x7c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d127      	bne.n	800275a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800270a:	4b17      	ldr	r3, [pc, #92]	@ (8002768 <HAL_UART_MspInit+0x80>)
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	4a16      	ldr	r2, [pc, #88]	@ (8002768 <HAL_UART_MspInit+0x80>)
 8002710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002714:	6253      	str	r3, [r2, #36]	@ 0x24
 8002716:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <HAL_UART_MspInit+0x80>)
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <HAL_UART_MspInit+0x80>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	4a10      	ldr	r2, [pc, #64]	@ (8002768 <HAL_UART_MspInit+0x80>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	61d3      	str	r3, [r2, #28]
 800272e:	4b0e      	ldr	r3, [pc, #56]	@ (8002768 <HAL_UART_MspInit+0x80>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800273a:	230c      	movs	r3, #12
 800273c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800274a:	2307      	movs	r3, #7
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4619      	mov	r1, r3
 8002754:	4805      	ldr	r0, [pc, #20]	@ (800276c <HAL_UART_MspInit+0x84>)
 8002756:	f00a f95f 	bl	800ca18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800275a:	bf00      	nop
 800275c:	3728      	adds	r7, #40	@ 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40004400 	.word	0x40004400
 8002768:	40023800 	.word	0x40023800
 800276c:	40020000 	.word	0x40020000

08002770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002774:	bf00      	nop
 8002776:	e7fd      	b.n	8002774 <NMI_Handler+0x4>

08002778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <HardFault_Handler+0x4>

08002780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <MemManage_Handler+0x4>

08002788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <BusFault_Handler+0x4>

08002790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <UsageFault_Handler+0x4>

08002798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c0:	f009 fae6 	bl	800bd90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accel_INT_Pin);
 80027cc:	2001      	movs	r0, #1
 80027ce:	f00a fbd5 	bl	800cf7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  printf("INT Accel !! \r\n");
 80027d2:	4803      	ldr	r0, [pc, #12]	@ (80027e0 <EXTI0_IRQHandler+0x18>)
 80027d4:	f00f fb82 	bl	8011edc <puts>
  ACCEL_IRQ();
 80027d8:	f7fe ff56 	bl	8001688 <ACCEL_IRQ>
  /* USER CODE END EXTI0_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	08013ff8 	.word	0x08013ff8

080027e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027e8:	4802      	ldr	r0, [pc, #8]	@ (80027f4 <TIM2_IRQHandler+0x10>)
 80027ea:	f00e fc09 	bl	8011000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200002d0 	.word	0x200002d0

080027f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027fc:	4802      	ldr	r0, [pc, #8]	@ (8002808 <TIM3_IRQHandler+0x10>)
 80027fe:	f00e fbff 	bl	8011000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000310 	.word	0x20000310

0800280c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002810:	4802      	ldr	r0, [pc, #8]	@ (800281c <I2C1_EV_IRQHandler+0x10>)
 8002812:	f00b f885 	bl	800d920 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000530 	.word	0x20000530

08002820 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002824:	4802      	ldr	r0, [pc, #8]	@ (8002830 <I2C1_ER_IRQHandler+0x10>)
 8002826:	f00b f9ce 	bl	800dbc6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000530 	.word	0x20000530

08002834 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002838:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800283c:	f00a fb9e 	bl	800cf7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002840:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002844:	f00a fb9a 	bl	800cf7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002848:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800284c:	f00a fb96 	bl	800cf7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}

08002854 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002858:	4803      	ldr	r0, [pc, #12]	@ (8002868 <TIM6_IRQHandler+0x14>)
 800285a:	f00e fbd1 	bl	8011000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  //buzzer (0);
  TIM6_IRQ();
 800285e:	f7fe fef3 	bl	8001648 <TIM6_IRQ>
  //printf("T6\r\n");
  /* USER CODE END TIM6_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000350 	.word	0x20000350

0800286c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002870:	4803      	ldr	r0, [pc, #12]	@ (8002880 <TIM7_IRQHandler+0x14>)
 8002872:	f00e fbc5 	bl	8011000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
	TIM7_IRQ();
 8002876:	f7fe fefb 	bl	8001670 <TIM7_IRQ>
	//printf("T7\r\n");
  /* USER CODE END TIM7_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000390 	.word	0x20000390

08002884 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_11){
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002894:	d131      	bne.n	80028fa <HAL_GPIO_EXTI_Callback+0x76>
		if(!debounce_flag1){
 8002896:	4b1b      	ldr	r3, [pc, #108]	@ (8002904 <HAL_GPIO_EXTI_Callback+0x80>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d12c      	bne.n	80028fa <HAL_GPIO_EXTI_Callback+0x76>
			debounce_flag1 = 1;
 80028a0:	4b18      	ldr	r3, [pc, #96]	@ (8002904 <HAL_GPIO_EXTI_Callback+0x80>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
			printf("BTN1\r\n");
 80028a6:	4818      	ldr	r0, [pc, #96]	@ (8002908 <HAL_GPIO_EXTI_Callback+0x84>)
 80028a8:	f00f fb18 	bl	8011edc <puts>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80028ac:	4b17      	ldr	r3, [pc, #92]	@ (800290c <HAL_GPIO_EXTI_Callback+0x88>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2200      	movs	r2, #0
 80028b2:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Start_IT(&htim2);
 80028b4:	4815      	ldr	r0, [pc, #84]	@ (800290c <HAL_GPIO_EXTI_Callback+0x88>)
 80028b6:	f00e f977 	bl	8010ba8 <HAL_TIM_Base_Start_IT>
			if (bp1_state){
 80028ba:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <HAL_GPIO_EXTI_Callback+0x8c>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00d      	beq.n	80028e0 <HAL_GPIO_EXTI_Callback+0x5c>
				bp1_state = 0;
 80028c4:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <HAL_GPIO_EXTI_Callback+0x8c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 80028ca:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <HAL_GPIO_EXTI_Callback+0x90>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2200      	movs	r2, #0
 80028d0:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Base_Start_IT(&htim6);
 80028d2:	4810      	ldr	r0, [pc, #64]	@ (8002914 <HAL_GPIO_EXTI_Callback+0x90>)
 80028d4:	f00e f968 	bl	8010ba8 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Stop_IT(&htim7);
 80028d8:	480f      	ldr	r0, [pc, #60]	@ (8002918 <HAL_GPIO_EXTI_Callback+0x94>)
 80028da:	f00e f9b7 	bl	8010c4c <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Start_IT(&htim7);
				HAL_TIM_Base_Stop_IT(&htim6);
				bp1_state = 1;
			}
		}}
}
 80028de:	e00c      	b.n	80028fa <HAL_GPIO_EXTI_Callback+0x76>
				__HAL_TIM_SET_COUNTER(&htim7, 0);
 80028e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002918 <HAL_GPIO_EXTI_Callback+0x94>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2200      	movs	r2, #0
 80028e6:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Base_Start_IT(&htim7);
 80028e8:	480b      	ldr	r0, [pc, #44]	@ (8002918 <HAL_GPIO_EXTI_Callback+0x94>)
 80028ea:	f00e f95d 	bl	8010ba8 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Stop_IT(&htim6);
 80028ee:	4809      	ldr	r0, [pc, #36]	@ (8002914 <HAL_GPIO_EXTI_Callback+0x90>)
 80028f0:	f00e f9ac 	bl	8010c4c <HAL_TIM_Base_Stop_IT>
				bp1_state = 1;
 80028f4:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <HAL_GPIO_EXTI_Callback+0x8c>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	2000052d 	.word	0x2000052d
 8002908:	08014008 	.word	0x08014008
 800290c:	200002d0 	.word	0x200002d0
 8002910:	2000052c 	.word	0x2000052c
 8002914:	20000350 	.word	0x20000350
 8002918:	20000390 	.word	0x20000390

0800291c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2){
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800292c:	d10a      	bne.n	8002944 <HAL_TIM_PeriodElapsedCallback+0x28>

        if (debounce_flag1)
 800292e:	4b07      	ldr	r3, [pc, #28]	@ (800294c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <HAL_TIM_PeriodElapsedCallback+0x22>
        {
            debounce_flag1 = 0;
 8002938:	4b04      	ldr	r3, [pc, #16]	@ (800294c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
        }
        HAL_TIM_Base_Stop_IT(&htim2); // Stop the timer
 800293e:	4804      	ldr	r0, [pc, #16]	@ (8002950 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002940:	f00e f984 	bl	8010c4c <HAL_TIM_Base_Stop_IT>
    }
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	2000052d 	.word	0x2000052d
 8002950:	200002d0 	.word	0x200002d0

08002954 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800295e:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <BSP_I2C1_Init+0x58>)
 8002960:	4a13      	ldr	r2, [pc, #76]	@ (80029b0 <BSP_I2C1_Init+0x5c>)
 8002962:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002964:	4b13      	ldr	r3, [pc, #76]	@ (80029b4 <BSP_I2C1_Init+0x60>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	4912      	ldr	r1, [pc, #72]	@ (80029b4 <BSP_I2C1_Init+0x60>)
 800296c:	600a      	str	r2, [r1, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d117      	bne.n	80029a2 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002972:	480e      	ldr	r0, [pc, #56]	@ (80029ac <BSP_I2C1_Init+0x58>)
 8002974:	f00b fa24 	bl	800ddc0 <HAL_I2C_GetState>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d111      	bne.n	80029a2 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800297e:	480b      	ldr	r0, [pc, #44]	@ (80029ac <BSP_I2C1_Init+0x58>)
 8002980:	f000 f8e2 	bl	8002b48 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10b      	bne.n	80029a2 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800298a:	4808      	ldr	r0, [pc, #32]	@ (80029ac <BSP_I2C1_Init+0x58>)
 800298c:	f000 f8a8 	bl	8002ae0 <MX_I2C1_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002996:	f06f 0307 	mvn.w	r3, #7
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	e001      	b.n	80029a2 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80029a2:	687b      	ldr	r3, [r7, #4]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000530 	.word	0x20000530
 80029b0:	40005400 	.word	0x40005400
 80029b4:	20000584 	.word	0x20000584

080029b8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80029c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a00 <BSP_I2C1_DeInit+0x48>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d014      	beq.n	80029f4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80029ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002a00 <BSP_I2C1_DeInit+0x48>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002a00 <BSP_I2C1_DeInit+0x48>)
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a00 <BSP_I2C1_DeInit+0x48>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80029dc:	4809      	ldr	r0, [pc, #36]	@ (8002a04 <BSP_I2C1_DeInit+0x4c>)
 80029de:	f000 f909 	bl	8002bf4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80029e2:	4808      	ldr	r0, [pc, #32]	@ (8002a04 <BSP_I2C1_DeInit+0x4c>)
 80029e4:	f00a fc26 	bl	800d234 <HAL_I2C_DeInit>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80029ee:	f06f 0307 	mvn.w	r3, #7
 80029f2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80029f4:	687b      	ldr	r3, [r7, #4]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000584 	.word	0x20000584
 8002a04:	20000530 	.word	0x20000530

08002a08 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	@ 0x28
 8002a0c:	af04      	add	r7, sp, #16
 8002a0e:	60ba      	str	r2, [r7, #8]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	81fb      	strh	r3, [r7, #14]
 8002a16:	460b      	mov	r3, r1
 8002a18:	81bb      	strh	r3, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002a22:	89ba      	ldrh	r2, [r7, #12]
 8002a24:	89f9      	ldrh	r1, [r7, #14]
 8002a26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a2a:	9302      	str	r3, [sp, #8]
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2301      	movs	r3, #1
 8002a36:	480c      	ldr	r0, [pc, #48]	@ (8002a68 <BSP_I2C1_WriteReg+0x60>)
 8002a38:	f00a fc52 	bl	800d2e0 <HAL_I2C_Mem_Write>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00c      	beq.n	8002a5c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002a42:	4809      	ldr	r0, [pc, #36]	@ (8002a68 <BSP_I2C1_WriteReg+0x60>)
 8002a44:	f00b f9c9 	bl	800ddda <HAL_I2C_GetError>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d103      	bne.n	8002a56 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002a4e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	e002      	b.n	8002a5c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002a56:	f06f 0303 	mvn.w	r3, #3
 8002a5a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002a5c:	697b      	ldr	r3, [r7, #20]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000530 	.word	0x20000530

08002a6c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	@ 0x28
 8002a70:	af04      	add	r7, sp, #16
 8002a72:	60ba      	str	r2, [r7, #8]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	81fb      	strh	r3, [r7, #14]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	81bb      	strh	r3, [r7, #12]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002a86:	89ba      	ldrh	r2, [r7, #12]
 8002a88:	89f9      	ldrh	r1, [r7, #14]
 8002a8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a8e:	9302      	str	r3, [sp, #8]
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2301      	movs	r3, #1
 8002a9a:	480c      	ldr	r0, [pc, #48]	@ (8002acc <BSP_I2C1_ReadReg+0x60>)
 8002a9c:	f00a fd1a 	bl	800d4d4 <HAL_I2C_Mem_Read>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00c      	beq.n	8002ac0 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002aa6:	4809      	ldr	r0, [pc, #36]	@ (8002acc <BSP_I2C1_ReadReg+0x60>)
 8002aa8:	f00b f997 	bl	800ddda <HAL_I2C_GetError>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d103      	bne.n	8002aba <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002ab2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	e002      	b.n	8002ac0 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002aba:	f06f 0303 	mvn.w	r3, #3
 8002abe:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002ac0:	697b      	ldr	r3, [r7, #20]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000530 	.word	0x20000530

08002ad0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002ad4:	f009 f96e 	bl	800bdb4 <HAL_GetTick>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a14      	ldr	r2, [pc, #80]	@ (8002b40 <MX_I2C1_Init+0x60>)
 8002af0:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a13      	ldr	r2, [pc, #76]	@ (8002b44 <MX_I2C1_Init+0x64>)
 8002af6:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b0a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f00a fa41 	bl	800cfac <HAL_I2C_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40005400 	.word	0x40005400
 8002b44:	00061a80 	.word	0x00061a80

08002b48 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	@ 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b50:	4b26      	ldr	r3, [pc, #152]	@ (8002bec <I2C1_MspInit+0xa4>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	4a25      	ldr	r2, [pc, #148]	@ (8002bec <I2C1_MspInit+0xa4>)
 8002b56:	f043 0302 	orr.w	r3, r3, #2
 8002b5a:	61d3      	str	r3, [r2, #28]
 8002b5c:	4b23      	ldr	r3, [pc, #140]	@ (8002bec <I2C1_MspInit+0xa4>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002b68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b6e:	2312      	movs	r3, #18
 8002b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b76:	2303      	movs	r3, #3
 8002b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	481a      	ldr	r0, [pc, #104]	@ (8002bf0 <I2C1_MspInit+0xa8>)
 8002b86:	f009 ff47 	bl	800ca18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002b8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b90:	2312      	movs	r3, #18
 8002b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4812      	ldr	r0, [pc, #72]	@ (8002bf0 <I2C1_MspInit+0xa8>)
 8002ba8:	f009 ff36 	bl	800ca18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bac:	4b0f      	ldr	r3, [pc, #60]	@ (8002bec <I2C1_MspInit+0xa4>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	4a0e      	ldr	r2, [pc, #56]	@ (8002bec <I2C1_MspInit+0xa4>)
 8002bb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bb6:	6253      	str	r3, [r2, #36]	@ 0x24
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bec <I2C1_MspInit+0xa4>)
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	201f      	movs	r0, #31
 8002bca:	f009 fe92 	bl	800c8f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002bce:	201f      	movs	r0, #31
 8002bd0:	f009 feab 	bl	800c92a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	2020      	movs	r0, #32
 8002bda:	f009 fe8a 	bl	800c8f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002bde:	2020      	movs	r0, #32
 8002be0:	f009 fea3 	bl	800c92a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002be4:	bf00      	nop
 8002be6:	3728      	adds	r7, #40	@ 0x28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40020400 	.word	0x40020400

08002bf4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <I2C1_MspDeInit+0x3c>)
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	4a0b      	ldr	r2, [pc, #44]	@ (8002c30 <I2C1_MspDeInit+0x3c>)
 8002c02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c06:	6253      	str	r3, [r2, #36]	@ 0x24

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002c08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c0c:	4809      	ldr	r0, [pc, #36]	@ (8002c34 <I2C1_MspDeInit+0x40>)
 8002c0e:	f00a f893 	bl	800cd38 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002c12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c16:	4807      	ldr	r0, [pc, #28]	@ (8002c34 <I2C1_MspDeInit+0x40>)
 8002c18:	f00a f88e 	bl	800cd38 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002c1c:	201f      	movs	r0, #31
 8002c1e:	f009 fe92 	bl	800c946 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002c22:	2020      	movs	r0, #32
 8002c24:	f009 fe8f 	bl	800c946 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40020400 	.word	0x40020400

08002c38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	e00a      	b.n	8002c60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c4a:	f3af 8000 	nop.w
 8002c4e:	4601      	mov	r1, r0
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	60ba      	str	r2, [r7, #8]
 8002c56:	b2ca      	uxtb	r2, r1
 8002c58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	dbf0      	blt.n	8002c4a <_read+0x12>
  }

  return len;
 8002c68:	687b      	ldr	r3, [r7, #4]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b086      	sub	sp, #24
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e009      	b.n	8002c98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	60ba      	str	r2, [r7, #8]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fa83 	bl	8002198 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3301      	adds	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	dbf1      	blt.n	8002c84 <_write+0x12>
  }
  return len;
 8002ca0:	687b      	ldr	r3, [r7, #4]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <_close>:

int _close(int file)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cd0:	605a      	str	r2, [r3, #4]
  return 0;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <_isatty>:

int _isatty(int file)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
	...

08002d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d14:	4a14      	ldr	r2, [pc, #80]	@ (8002d68 <_sbrk+0x5c>)
 8002d16:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <_sbrk+0x60>)
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d20:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d28:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <_sbrk+0x64>)
 8002d2a:	4a12      	ldr	r2, [pc, #72]	@ (8002d74 <_sbrk+0x68>)
 8002d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d2e:	4b10      	ldr	r3, [pc, #64]	@ (8002d70 <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d207      	bcs.n	8002d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d3c:	f00f fa50 	bl	80121e0 <__errno>
 8002d40:	4603      	mov	r3, r0
 8002d42:	220c      	movs	r2, #12
 8002d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4a:	e009      	b.n	8002d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d4c:	4b08      	ldr	r3, [pc, #32]	@ (8002d70 <_sbrk+0x64>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d52:	4b07      	ldr	r3, [pc, #28]	@ (8002d70 <_sbrk+0x64>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a05      	ldr	r2, [pc, #20]	@ (8002d70 <_sbrk+0x64>)
 8002d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20014000 	.word	0x20014000
 8002d6c:	00000400 	.word	0x00000400
 8002d70:	20000588 	.word	0x20000588
 8002d74:	200008c0 	.word	0x200008c0

08002d78 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d84:	f7ff fff8 	bl	8002d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d88:	480b      	ldr	r0, [pc, #44]	@ (8002db8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d8a:	490c      	ldr	r1, [pc, #48]	@ (8002dbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d90:	e002      	b.n	8002d98 <LoopCopyDataInit>

08002d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d96:	3304      	adds	r3, #4

08002d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d9c:	d3f9      	bcc.n	8002d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d9e:	4a09      	ldr	r2, [pc, #36]	@ (8002dc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002da0:	4c09      	ldr	r4, [pc, #36]	@ (8002dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da4:	e001      	b.n	8002daa <LoopFillZerobss>

08002da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da8:	3204      	adds	r2, #4

08002daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dac:	d3fb      	bcc.n	8002da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dae:	f00f fa1d 	bl	80121ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002db2:	f7fe fe81 	bl	8001ab8 <main>
  bx lr
 8002db6:	4770      	bx	lr
  ldr r0, =_sdata
 8002db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dbc:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002dc0:	080140f8 	.word	0x080140f8
  ldr r2, =_sbss
 8002dc4:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002dc8:	200008c0 	.word	0x200008c0

08002dcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dcc:	e7fe      	b.n	8002dcc <ADC1_IRQHandler>
	...

08002dd0 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d103      	bne.n	8002de8 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	e034      	b.n	8002e52 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	7b1a      	ldrb	r2, [r3, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	699a      	ldr	r2, [r3, #24]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a0e      	ldr	r2, [pc, #56]	@ (8002e5c <HTS221_RegisterBusIO+0x8c>)
 8002e24:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a0d      	ldr	r2, [pc, #52]	@ (8002e60 <HTS221_RegisterBusIO+0x90>)
 8002e2a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d004      	beq.n	8002e4c <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4798      	blx	r3
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	e002      	b.n	8002e52 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8002e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e50:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002e52:	68fb      	ldr	r3, [r7, #12]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	08003499 	.word	0x08003499
 8002e60:	080034fb 	.word	0x080034fb

08002e64 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d108      	bne.n	8002e88 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fa9e 	bl	80033b8 <HTS221_Initialize>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
 8002e86:	e004      	b.n	8002e92 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d111      	bne.n	8002ed0 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f87e 	bl	8002fae <HTS221_HUM_Disable>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8002eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebc:	e00d      	b.n	8002eda <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f95f 	bl	8003182 <HTS221_TEMP_Disable>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	e004      	b.n	8002eda <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3320      	adds	r3, #32
 8002ef0:	6839      	ldr	r1, [r7, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fc2a 	bl	800374c <hts221_device_id_get>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	e000      	b.n	8002f06 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2200      	movs	r2, #0
 8002f24:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2200      	movs	r2, #0
 8002f36:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4a09      	ldr	r2, [pc, #36]	@ (8002f60 <HTS221_GetCapabilities+0x50>)
 8002f3c:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	4a07      	ldr	r2, [pc, #28]	@ (8002f60 <HTS221_GetCapabilities+0x50>)
 8002f42:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	41480000 	.word	0x41480000

08002f64 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e015      	b.n	8002fa6 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10b      	bne.n	8002f9c <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3320      	adds	r3, #32
 8002f88:	2101      	movs	r1, #1
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fbef 	bl	800376e <hts221_power_on_set>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9a:	e004      	b.n	8002fa6 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e015      	b.n	8002ff0 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10b      	bne.n	8002fe6 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3320      	adds	r3, #32
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fbca 	bl	800376e <hts221_power_on_set>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe4:	e004      	b.n	8002ff0 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003002:	6839      	ldr	r1, [r7, #0]
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f965 	bl	80032d4 <HTS221_GetOutputDataRate>
 800300a:	4603      	mov	r3, r0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800301e:	6839      	ldr	r1, [r7, #0]
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f99b 	bl	800335c <HTS221_SetOutputDataRate>
 8003026:	4603      	mov	r3, r0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3320      	adds	r3, #32
 800303e:	f107 020c 	add.w	r2, r7, #12
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fc5e 	bl	8003906 <hts221_hum_adc_point_0_get>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003050:	f04f 33ff 	mov.w	r3, #4294967295
 8003054:	e069      	b.n	800312a <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f103 0220 	add.w	r2, r3, #32
 800305c:	f107 030c 	add.w	r3, r7, #12
 8003060:	3304      	adds	r3, #4
 8003062:	4619      	mov	r1, r3
 8003064:	4610      	mov	r0, r2
 8003066:	f000 fba8 	bl	80037ba <hts221_hum_rh_point_0_get>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8003070:	f04f 33ff 	mov.w	r3, #4294967295
 8003074:	e059      	b.n	800312a <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f103 0220 	add.w	r2, r3, #32
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	3308      	adds	r3, #8
 8003082:	4619      	mov	r1, r3
 8003084:	4610      	mov	r0, r2
 8003086:	f000 fc5f 	bl	8003948 <hts221_hum_adc_point_1_get>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8003090:	f04f 33ff 	mov.w	r3, #4294967295
 8003094:	e049      	b.n	800312a <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f103 0220 	add.w	r2, r3, #32
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	330c      	adds	r3, #12
 80030a2:	4619      	mov	r1, r3
 80030a4:	4610      	mov	r0, r2
 80030a6:	f000 fba8 	bl	80037fa <hts221_hum_rh_point_1_get>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80030b0:	f04f 33ff 	mov.w	r3, #4294967295
 80030b4:	e039      	b.n	800312a <HTS221_HUM_GetHumidity+0xfa>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 80030b6:	2300      	movs	r3, #0
 80030b8:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3320      	adds	r3, #32
 80030be:	f107 021c 	add.w	r2, r7, #28
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 fafd 	bl	80036c4 <hts221_humidity_raw_get>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80030d0:	f04f 33ff 	mov.w	r3, #4294967295
 80030d4:	e029      	b.n	800312a <HTS221_HUM_GetHumidity+0xfa>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80030d6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fdee 	bl	8000cbc <__aeabi_i2f>
 80030e0:	4602      	mov	r2, r0
 80030e2:	f107 030c 	add.w	r3, r7, #12
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f991 	bl	8003410 <Linear_Interpolation>
 80030ee:	4602      	mov	r2, r0
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f04f 0100 	mov.w	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd ffcf 	bl	80010a0 <__aeabi_fcmplt>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HTS221_HUM_GetHumidity+0xe0>
  {
    *Value = 0.0f;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4907      	ldr	r1, [pc, #28]	@ (8003134 <HTS221_HUM_GetHumidity+0x104>)
 8003116:	4618      	mov	r0, r3
 8003118:	f7fd ffe0 	bl	80010dc <__aeabi_fcmpgt>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HTS221_HUM_GetHumidity+0xf8>
  {
    *Value = 100.0f;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	4a03      	ldr	r2, [pc, #12]	@ (8003134 <HTS221_HUM_GetHumidity+0x104>)
 8003126:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	42c80000 	.word	0x42c80000

08003138 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	e015      	b.n	800317a <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3320      	adds	r3, #32
 800315c:	2101      	movs	r1, #1
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fb05 	bl	800376e <hts221_power_on_set>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800316a:	f04f 33ff 	mov.w	r3, #4294967295
 800316e:	e004      	b.n	800317a <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	e015      	b.n	80031c4 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10b      	bne.n	80031ba <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3320      	adds	r3, #32
 80031a6:	2100      	movs	r1, #0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fae0 	bl	800376e <hts221_power_on_set>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	e004      	b.n	80031c4 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80031d6:	6839      	ldr	r1, [r7, #0]
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f87b 	bl	80032d4 <HTS221_GetOutputDataRate>
 80031de:	4603      	mov	r3, r0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80031f2:	6839      	ldr	r1, [r7, #0]
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f8b1 	bl	800335c <HTS221_SetOutputDataRate>
 80031fa:	4603      	mov	r3, r0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3320      	adds	r3, #32
 8003212:	f107 020c 	add.w	r2, r7, #12
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fbb6 	bl	800398a <hts221_temp_adc_point_0_get>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003224:	f04f 33ff 	mov.w	r3, #4294967295
 8003228:	e04f      	b.n	80032ca <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f103 0220 	add.w	r2, r3, #32
 8003230:	f107 030c 	add.w	r3, r7, #12
 8003234:	3304      	adds	r3, #4
 8003236:	4619      	mov	r1, r3
 8003238:	4610      	mov	r0, r2
 800323a:	f000 fafe 	bl	800383a <hts221_temp_deg_point_0_get>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
 8003248:	e03f      	b.n	80032ca <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f103 0220 	add.w	r2, r3, #32
 8003250:	f107 030c 	add.w	r3, r7, #12
 8003254:	3308      	adds	r3, #8
 8003256:	4619      	mov	r1, r3
 8003258:	4610      	mov	r0, r2
 800325a:	f000 fbb7 	bl	80039cc <hts221_temp_adc_point_1_get>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8003264:	f04f 33ff 	mov.w	r3, #4294967295
 8003268:	e02f      	b.n	80032ca <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f103 0220 	add.w	r2, r3, #32
 8003270:	f107 030c 	add.w	r3, r7, #12
 8003274:	330c      	adds	r3, #12
 8003276:	4619      	mov	r1, r3
 8003278:	4610      	mov	r0, r2
 800327a:	f000 fb11 	bl	80038a0 <hts221_temp_deg_point_1_get>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8003284:	f04f 33ff 	mov.w	r3, #4294967295
 8003288:	e01f      	b.n	80032ca <HTS221_TEMP_GetTemperature+0xc6>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 800328a:	2300      	movs	r3, #0
 800328c:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3320      	adds	r3, #32
 8003292:	f107 021c 	add.w	r2, r7, #28
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fa35 	bl	8003708 <hts221_temperature_raw_get>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295
 80032a8:	e00f      	b.n	80032ca <HTS221_TEMP_GetTemperature+0xc6>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80032aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd fd04 	bl	8000cbc <__aeabi_i2f>
 80032b4:	4602      	mov	r2, r0
 80032b6:	f107 030c 	add.w	r3, r7, #12
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f8a7 	bl	8003410 <Linear_Interpolation>
 80032c2:	4602      	mov	r2, r0
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3720      	adds	r7, #32
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3320      	adds	r3, #32
 80032e6:	f107 020b 	add.w	r2, r7, #11
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 f98b 	bl	8003608 <hts221_data_rate_get>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80032f8:	f04f 33ff 	mov.w	r3, #4294967295
 80032fc:	e025      	b.n	800334a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80032fe:	7afb      	ldrb	r3, [r7, #11]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d81d      	bhi.n	8003340 <HTS221_GetOutputDataRate+0x6c>
 8003304:	a201      	add	r2, pc, #4	@ (adr r2, 800330c <HTS221_GetOutputDataRate+0x38>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	0800331d 	.word	0x0800331d
 8003310:	08003327 	.word	0x08003327
 8003314:	08003331 	.word	0x08003331
 8003318:	08003339 	.word	0x08003339
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
      break;
 8003324:	e010      	b.n	8003348 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800332c:	601a      	str	r2, [r3, #0]
      break;
 800332e:	e00b      	b.n	8003348 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4a08      	ldr	r2, [pc, #32]	@ (8003354 <HTS221_GetOutputDataRate+0x80>)
 8003334:	601a      	str	r2, [r3, #0]
      break;
 8003336:	e007      	b.n	8003348 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	4a07      	ldr	r2, [pc, #28]	@ (8003358 <HTS221_GetOutputDataRate+0x84>)
 800333c:	601a      	str	r2, [r3, #0]
      break;
 800333e:	e003      	b.n	8003348 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003340:	f04f 33ff 	mov.w	r3, #4294967295
 8003344:	60fb      	str	r3, [r7, #12]
      break;
 8003346:	bf00      	nop
  }

  return ret;
 8003348:	68fb      	ldr	r3, [r7, #12]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40e00000 	.word	0x40e00000
 8003358:	41480000 	.word	0x41480000

0800335c <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003366:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800336a:	6838      	ldr	r0, [r7, #0]
 800336c:	f7fd fea2 	bl	80010b4 <__aeabi_fcmple>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HTS221_SetOutputDataRate+0x1e>
 8003376:	2301      	movs	r3, #1
 8003378:	e009      	b.n	800338e <HTS221_SetOutputDataRate+0x32>
 800337a:	490e      	ldr	r1, [pc, #56]	@ (80033b4 <HTS221_SetOutputDataRate+0x58>)
 800337c:	6838      	ldr	r0, [r7, #0]
 800337e:	f7fd fe99 	bl	80010b4 <__aeabi_fcmple>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HTS221_SetOutputDataRate+0x30>
 8003388:	2302      	movs	r3, #2
 800338a:	e000      	b.n	800338e <HTS221_SetOutputDataRate+0x32>
 800338c:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800338e:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3320      	adds	r3, #32
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f90f 	bl	80035bc <hts221_data_rate_set>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HTS221_SetOutputDataRate+0x4e>
  {
    return HTS221_ERROR;
 80033a4:	f04f 33ff 	mov.w	r3, #4294967295
 80033a8:	e000      	b.n	80033ac <HTS221_SetOutputDataRate+0x50>
  }

  return HTS221_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40e00000 	.word	0x40e00000

080033b8 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3320      	adds	r3, #32
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f9d1 	bl	800376e <hts221_power_on_set>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	e017      	b.n	8003408 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3320      	adds	r3, #32
 80033dc:	2101      	movs	r1, #1
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f94a 	bl	8003678 <hts221_block_data_update_set>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80033ea:	f04f 33ff 	mov.w	r3, #4294967295
 80033ee:	e00b      	b.n	8003408 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80033f0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ffb1 	bl	800335c <HTS221_SetOutputDataRate>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003400:	f04f 33ff 	mov.w	r3, #4294967295
 8003404:	e000      	b.n	8003408 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003410:	b5b0      	push	{r4, r5, r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f7fd fb93 	bl	8000b50 <__aeabi_fsub>
 800342a:	4603      	mov	r3, r0
 800342c:	6839      	ldr	r1, [r7, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd fc98 	bl	8000d64 <__aeabi_fmul>
 8003434:	4603      	mov	r3, r0
 8003436:	461c      	mov	r4, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f7fd fc8e 	bl	8000d64 <__aeabi_fmul>
 8003448:	4603      	mov	r3, r0
 800344a:	461d      	mov	r5, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f7fd fc84 	bl	8000d64 <__aeabi_fmul>
 800345c:	4603      	mov	r3, r0
 800345e:	4619      	mov	r1, r3
 8003460:	4628      	mov	r0, r5
 8003462:	f7fd fb75 	bl	8000b50 <__aeabi_fsub>
 8003466:	4603      	mov	r3, r0
 8003468:	4619      	mov	r1, r3
 800346a:	4620      	mov	r0, r4
 800346c:	f7fd fb72 	bl	8000b54 <__addsf3>
 8003470:	4603      	mov	r3, r0
 8003472:	461c      	mov	r4, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4619      	mov	r1, r3
 800347e:	4610      	mov	r0, r2
 8003480:	f7fd fb66 	bl	8000b50 <__aeabi_fsub>
 8003484:	4603      	mov	r3, r0
 8003486:	4619      	mov	r1, r3
 8003488:	4620      	mov	r0, r4
 800348a:	f7fd fd1f 	bl	8000ecc <__aeabi_fdiv>
 800348e:	4603      	mov	r3, r0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bdb0      	pop	{r4, r5, r7, pc}

08003498 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	461a      	mov	r2, r3
 80034a4:	460b      	mov	r3, r1
 80034a6:	72fb      	strb	r3, [r7, #11]
 80034a8:	4613      	mov	r3, r2
 80034aa:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10e      	bne.n	80034d6 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	695c      	ldr	r4, [r3, #20]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	7b1b      	ldrb	r3, [r3, #12]
 80034c0:	4618      	mov	r0, r3
 80034c2:	7afb      	ldrb	r3, [r7, #11]
 80034c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	4619      	mov	r1, r3
 80034cc:	893b      	ldrh	r3, [r7, #8]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	47a0      	blx	r4
 80034d2:	4603      	mov	r3, r0
 80034d4:	e00d      	b.n	80034f2 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	695c      	ldr	r4, [r3, #20]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	7b1b      	ldrb	r3, [r3, #12]
 80034de:	4618      	mov	r0, r3
 80034e0:	7afb      	ldrb	r3, [r7, #11]
 80034e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	4619      	mov	r1, r3
 80034ea:	893b      	ldrh	r3, [r7, #8]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	47a0      	blx	r4
 80034f0:	4603      	mov	r3, r0
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd90      	pop	{r4, r7, pc}

080034fa <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80034fa:	b590      	push	{r4, r7, lr}
 80034fc:	b087      	sub	sp, #28
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	461a      	mov	r2, r3
 8003506:	460b      	mov	r3, r1
 8003508:	72fb      	strb	r3, [r7, #11]
 800350a:	4613      	mov	r3, r2
 800350c:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10e      	bne.n	8003538 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	691c      	ldr	r4, [r3, #16]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	7b1b      	ldrb	r3, [r3, #12]
 8003522:	4618      	mov	r0, r3
 8003524:	7afb      	ldrb	r3, [r7, #11]
 8003526:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800352a:	b2db      	uxtb	r3, r3
 800352c:	4619      	mov	r1, r3
 800352e:	893b      	ldrh	r3, [r7, #8]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	47a0      	blx	r4
 8003534:	4603      	mov	r3, r0
 8003536:	e00d      	b.n	8003554 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	691c      	ldr	r4, [r3, #16]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	7b1b      	ldrb	r3, [r3, #12]
 8003540:	4618      	mov	r0, r3
 8003542:	7afb      	ldrb	r3, [r7, #11]
 8003544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003548:	b2db      	uxtb	r3, r3
 800354a:	4619      	mov	r1, r3
 800354c:	893b      	ldrh	r3, [r7, #8]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	47a0      	blx	r4
 8003552:	4603      	mov	r3, r0
  }
}
 8003554:	4618      	mov	r0, r3
 8003556:	371c      	adds	r7, #28
 8003558:	46bd      	mov	sp, r7
 800355a:	bd90      	pop	{r4, r7, pc}

0800355c <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	461a      	mov	r2, r3
 8003568:	460b      	mov	r3, r1
 800356a:	72fb      	strb	r3, [r7, #11]
 800356c:	4613      	mov	r3, r2
 800356e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685c      	ldr	r4, [r3, #4]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68d8      	ldr	r0, [r3, #12]
 8003578:	893b      	ldrh	r3, [r7, #8]
 800357a:	7af9      	ldrb	r1, [r7, #11]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	47a0      	blx	r4
 8003580:	6178      	str	r0, [r7, #20]

  return ret;
 8003582:	697b      	ldr	r3, [r7, #20]
}
 8003584:	4618      	mov	r0, r3
 8003586:	371c      	adds	r7, #28
 8003588:	46bd      	mov	sp, r7
 800358a:	bd90      	pop	{r4, r7, pc}

0800358c <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800358c:	b590      	push	{r4, r7, lr}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	607a      	str	r2, [r7, #4]
 8003596:	461a      	mov	r2, r3
 8003598:	460b      	mov	r3, r1
 800359a:	72fb      	strb	r3, [r7, #11]
 800359c:	4613      	mov	r3, r2
 800359e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681c      	ldr	r4, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68d8      	ldr	r0, [r3, #12]
 80035a8:	893b      	ldrh	r3, [r7, #8]
 80035aa:	7af9      	ldrb	r1, [r7, #11]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	47a0      	blx	r4
 80035b0:	6178      	str	r0, [r7, #20]

  return ret;
 80035b2:	697b      	ldr	r3, [r7, #20]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd90      	pop	{r4, r7, pc}

080035bc <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80035c8:	f107 0208 	add.w	r2, r7, #8
 80035cc:	2301      	movs	r3, #1
 80035ce:	2120      	movs	r1, #32
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff ffc3 	bl	800355c <hts221_read_reg>
 80035d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10f      	bne.n	80035fe <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	7a3b      	ldrb	r3, [r7, #8]
 80035e8:	f362 0301 	bfi	r3, r2, #0, #2
 80035ec:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80035ee:	f107 0208 	add.w	r2, r7, #8
 80035f2:	2301      	movs	r3, #1
 80035f4:	2120      	movs	r1, #32
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff ffc8 	bl	800358c <hts221_write_reg>
 80035fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80035fe:	68fb      	ldr	r3, [r7, #12]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003612:	f107 0208 	add.w	r2, r7, #8
 8003616:	2301      	movs	r3, #1
 8003618:	2120      	movs	r1, #32
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff ff9e 	bl	800355c <hts221_read_reg>
 8003620:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003622:	7a3b      	ldrb	r3, [r7, #8]
 8003624:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b03      	cmp	r3, #3
 800362c:	d81a      	bhi.n	8003664 <hts221_data_rate_get+0x5c>
 800362e:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <hts221_data_rate_get+0x2c>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	08003645 	.word	0x08003645
 8003638:	0800364d 	.word	0x0800364d
 800363c:	08003655 	.word	0x08003655
 8003640:	0800365d 	.word	0x0800365d
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
      break;
 800364a:	e00f      	b.n	800366c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2201      	movs	r2, #1
 8003650:	701a      	strb	r2, [r3, #0]
      break;
 8003652:	e00b      	b.n	800366c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2202      	movs	r2, #2
 8003658:	701a      	strb	r2, [r3, #0]
      break;
 800365a:	e007      	b.n	800366c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2203      	movs	r2, #3
 8003660:	701a      	strb	r2, [r3, #0]
      break;
 8003662:	e003      	b.n	800366c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2204      	movs	r2, #4
 8003668:	701a      	strb	r2, [r3, #0]
      break;
 800366a:	bf00      	nop
  }

  return ret;
 800366c:	68fb      	ldr	r3, [r7, #12]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop

08003678 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003684:	f107 0208 	add.w	r2, r7, #8
 8003688:	2301      	movs	r3, #1
 800368a:	2120      	movs	r1, #32
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ff65 	bl	800355c <hts221_read_reg>
 8003692:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10f      	bne.n	80036ba <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800369a:	78fb      	ldrb	r3, [r7, #3]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	7a3b      	ldrb	r3, [r7, #8]
 80036a4:	f362 0382 	bfi	r3, r2, #2, #1
 80036a8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80036aa:	f107 0208 	add.w	r2, r7, #8
 80036ae:	2301      	movs	r3, #1
 80036b0:	2120      	movs	r1, #32
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ff6a 	bl	800358c <hts221_write_reg>
 80036b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80036ba:	68fb      	ldr	r3, [r7, #12]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80036ce:	f107 0208 	add.w	r2, r7, #8
 80036d2:	2302      	movs	r3, #2
 80036d4:	2128      	movs	r1, #40	@ 0x28
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff ff40 	bl	800355c <hts221_read_reg>
 80036dc:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80036de:	7a7b      	ldrb	r3, [r7, #9]
 80036e0:	b21a      	sxth	r2, r3
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	7a3a      	ldrb	r2, [r7, #8]
 80036f4:	4413      	add	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	b21a      	sxth	r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	801a      	strh	r2, [r3, #0]

  return ret;
 80036fe:	68fb      	ldr	r3, [r7, #12]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003712:	f107 0208 	add.w	r2, r7, #8
 8003716:	2302      	movs	r3, #2
 8003718:	212a      	movs	r1, #42	@ 0x2a
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ff1e 	bl	800355c <hts221_read_reg>
 8003720:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003722:	7a7b      	ldrb	r3, [r7, #9]
 8003724:	b21a      	sxth	r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003730:	b29b      	uxth	r3, r3
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	b29b      	uxth	r3, r3
 8003736:	7a3a      	ldrb	r2, [r7, #8]
 8003738:	4413      	add	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	b21a      	sxth	r2, r3
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	801a      	strh	r2, [r3, #0]

  return ret;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8003756:	2301      	movs	r3, #1
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	210f      	movs	r1, #15
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fefd 	bl	800355c <hts221_read_reg>
 8003762:	60f8      	str	r0, [r7, #12]

  return ret;
 8003764:	68fb      	ldr	r3, [r7, #12]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	460b      	mov	r3, r1
 8003778:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800377a:	f107 0208 	add.w	r2, r7, #8
 800377e:	2301      	movs	r3, #1
 8003780:	2120      	movs	r1, #32
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff feea 	bl	800355c <hts221_read_reg>
 8003788:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10f      	bne.n	80037b0 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	b2da      	uxtb	r2, r3
 8003798:	7a3b      	ldrb	r3, [r7, #8]
 800379a:	f362 13c7 	bfi	r3, r2, #7, #1
 800379e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80037a0:	f107 0208 	add.w	r2, r7, #8
 80037a4:	2301      	movs	r3, #1
 80037a6:	2120      	movs	r1, #32
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff feef 	bl	800358c <hts221_write_reg>
 80037ae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80037b0:	68fb      	ldr	r3, [r7, #12]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80037c4:	f107 020b 	add.w	r2, r7, #11
 80037c8:	2301      	movs	r3, #1
 80037ca:	2130      	movs	r1, #48	@ 0x30
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff fec5 	bl	800355c <hts221_read_reg>
 80037d2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80037d4:	7afb      	ldrb	r3, [r7, #11]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd fa70 	bl	8000cbc <__aeabi_i2f>
 80037dc:	4603      	mov	r3, r0
 80037de:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fd fb72 	bl	8000ecc <__aeabi_fdiv>
 80037e8:	4603      	mov	r3, r0
 80037ea:	461a      	mov	r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	601a      	str	r2, [r3, #0]

  return ret;
 80037f0:	68fb      	ldr	r3, [r7, #12]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003804:	f107 020b 	add.w	r2, r7, #11
 8003808:	2301      	movs	r3, #1
 800380a:	2131      	movs	r1, #49	@ 0x31
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff fea5 	bl	800355c <hts221_read_reg>
 8003812:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003814:	7afb      	ldrb	r3, [r7, #11]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fd fa50 	bl	8000cbc <__aeabi_i2f>
 800381c:	4603      	mov	r3, r0
 800381e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd fb52 	bl	8000ecc <__aeabi_fdiv>
 8003828:	4603      	mov	r3, r0
 800382a:	461a      	mov	r2, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	601a      	str	r2, [r3, #0]

  return ret;
 8003830:	68fb      	ldr	r3, [r7, #12]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003844:	f107 020f 	add.w	r2, r7, #15
 8003848:	2301      	movs	r3, #1
 800384a:	2132      	movs	r1, #50	@ 0x32
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff fe85 	bl	800355c <hts221_read_reg>
 8003852:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11d      	bne.n	8003896 <hts221_temp_deg_point_0_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800385a:	f107 0210 	add.w	r2, r7, #16
 800385e:	2301      	movs	r3, #1
 8003860:	2135      	movs	r1, #53	@ 0x35
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff fe7a 	bl	800355c <hts221_read_reg>
 8003868:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 800386a:	7c3b      	ldrb	r3, [r7, #16]
 800386c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003870:	b2db      	uxtb	r3, r3
 8003872:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	7bfa      	ldrb	r2, [r7, #15]
 800387a:	4413      	add	r3, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fa1d 	bl	8000cbc <__aeabi_i2f>
 8003882:	4603      	mov	r3, r0
 8003884:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8003888:	4618      	mov	r0, r3
 800388a:	f7fd fb1f 	bl	8000ecc <__aeabi_fdiv>
 800388e:	4603      	mov	r3, r0
 8003890:	461a      	mov	r2, r3
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003896:	697b      	ldr	r3, [r7, #20]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80038aa:	f107 020f 	add.w	r2, r7, #15
 80038ae:	2301      	movs	r3, #1
 80038b0:	2133      	movs	r1, #51	@ 0x33
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff fe52 	bl	800355c <hts221_read_reg>
 80038b8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11d      	bne.n	80038fc <hts221_temp_deg_point_1_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80038c0:	f107 0210 	add.w	r2, r7, #16
 80038c4:	2301      	movs	r3, #1
 80038c6:	2135      	movs	r1, #53	@ 0x35
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fe47 	bl	800355c <hts221_read_reg>
 80038ce:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80038d0:	7c3b      	ldrb	r3, [r7, #16]
 80038d2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80038da:	7cfb      	ldrb	r3, [r7, #19]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	7bfa      	ldrb	r2, [r7, #15]
 80038e0:	4413      	add	r3, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd f9ea 	bl	8000cbc <__aeabi_i2f>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd faec 	bl	8000ecc <__aeabi_fdiv>
 80038f4:	4603      	mov	r3, r0
 80038f6:	461a      	mov	r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80038fc:	697b      	ldr	r3, [r7, #20]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003910:	f107 0208 	add.w	r2, r7, #8
 8003914:	2302      	movs	r3, #2
 8003916:	2136      	movs	r1, #54	@ 0x36
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff fe1f 	bl	800355c <hts221_read_reg>
 800391e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003920:	7a7b      	ldrb	r3, [r7, #9]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	b29b      	uxth	r3, r3
 8003926:	7a3a      	ldrb	r2, [r7, #8]
 8003928:	4413      	add	r3, r2
 800392a:	b29b      	uxth	r3, r3
 800392c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800392e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd f9c2 	bl	8000cbc <__aeabi_i2f>
 8003938:	4602      	mov	r2, r0
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	601a      	str	r2, [r3, #0]

  return ret;
 800393e:	68fb      	ldr	r3, [r7, #12]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003952:	f107 0208 	add.w	r2, r7, #8
 8003956:	2302      	movs	r3, #2
 8003958:	213a      	movs	r1, #58	@ 0x3a
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fdfe 	bl	800355c <hts221_read_reg>
 8003960:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003962:	7a7b      	ldrb	r3, [r7, #9]
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	b29b      	uxth	r3, r3
 8003968:	7a3a      	ldrb	r2, [r7, #8]
 800396a:	4413      	add	r3, r2
 800396c:	b29b      	uxth	r3, r3
 800396e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003970:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd f9a1 	bl	8000cbc <__aeabi_i2f>
 800397a:	4602      	mov	r2, r0
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	601a      	str	r2, [r3, #0]

  return ret;
 8003980:	68fb      	ldr	r3, [r7, #12]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8003994:	f107 0208 	add.w	r2, r7, #8
 8003998:	2302      	movs	r3, #2
 800399a:	213c      	movs	r1, #60	@ 0x3c
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff fddd 	bl	800355c <hts221_read_reg>
 80039a2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80039a4:	7a7b      	ldrb	r3, [r7, #9]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	7a3a      	ldrb	r2, [r7, #8]
 80039ac:	4413      	add	r3, r2
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80039b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd f980 	bl	8000cbc <__aeabi_i2f>
 80039bc:	4602      	mov	r2, r0
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	601a      	str	r2, [r3, #0]

  return ret;
 80039c2:	68fb      	ldr	r3, [r7, #12]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80039d6:	f107 0208 	add.w	r2, r7, #8
 80039da:	2302      	movs	r3, #2
 80039dc:	213e      	movs	r1, #62	@ 0x3e
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff fdbc 	bl	800355c <hts221_read_reg>
 80039e4:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80039e6:	7a7b      	ldrb	r3, [r7, #9]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	7a3a      	ldrb	r2, [r7, #8]
 80039ee:	4413      	add	r3, r2
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80039f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fd f95f 	bl	8000cbc <__aeabi_i2f>
 80039fe:	4602      	mov	r2, r0
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	601a      	str	r2, [r3, #0]

  return ret;
 8003a04:	68fb      	ldr	r3, [r7, #12]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d103      	bne.n	8003a2c <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	e051      	b.n	8003ad0 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	7b1a      	ldrb	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a1d      	ldr	r2, [pc, #116]	@ (8003adc <LIS2DW12_RegisterBusIO+0xcc>)
 8003a68:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae0 <LIS2DW12_RegisterBusIO+0xd0>)
 8003a6e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	e020      	b.n	8003ad0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4798      	blx	r3
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e016      	b.n	8003ad0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d112      	bne.n	8003ad0 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10d      	bne.n	8003ad0 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8003ab4:	2305      	movs	r3, #5
 8003ab6:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8003ab8:	7afb      	ldrb	r3, [r7, #11]
 8003aba:	461a      	mov	r2, r3
 8003abc:	2121      	movs	r1, #33	@ 0x21
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fcbf 	bl	8004442 <LIS2DW12_Write_Reg>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ace:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	08004805 	.word	0x08004805
 8003ae0:	0800483b 	.word	0x0800483b

08003ae4 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3320      	adds	r3, #32
 8003af0:	2101      	movs	r1, #1
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 f9e1 	bl	8004eba <lis2dw12_auto_increment_set>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8003afe:	f04f 33ff 	mov.w	r3, #4294967295
 8003b02:	e04b      	b.n	8003b9c <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3320      	adds	r3, #32
 8003b08:	2101      	movs	r1, #1
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 f8f8 	bl	8004d00 <lis2dw12_block_data_update_set>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1a:	e03f      	b.n	8003b9c <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3320      	adds	r3, #32
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f001 fa90 	bl	8005048 <lis2dw12_fifo_mode_set>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8003b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b32:	e033      	b.n	8003b9c <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3320      	adds	r3, #32
 8003b38:	2104      	movs	r1, #4
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fec8 	bl	80048d0 <lis2dw12_power_mode_set>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8003b46:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4a:	e027      	b.n	8003b9c <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a15      	ldr	r2, [pc, #84]	@ (8003ba4 <LIS2DW12_Init+0xc0>)
 8003b50:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3320      	adds	r3, #32
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 ffb9 	bl	8004ae0 <lis2dw12_data_rate_set>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8003b74:	f04f 33ff 	mov.w	r3, #4294967295
 8003b78:	e010      	b.n	8003b9c <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3320      	adds	r3, #32
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 f8e3 	bl	8004d4c <lis2dw12_full_scale_set>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b90:	e004      	b.n	8003b9c <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	42c80000 	.word	0x42c80000

08003ba8 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f884 	bl	8003cbe <LIS2DW12_ACC_Disable>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8003bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc0:	e010      	b.n	8003be4 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->is_initialized = 0;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3320      	adds	r3, #32
 8003bfa:	6839      	ldr	r1, [r7, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f001 f94b 	bl	8004e98 <lis2dw12_device_id_get>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8003c08:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0c:	e000      	b.n	8003c10 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2201      	movs	r2, #1
 8003c26:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2200      	movs	r2, #0
 8003c32:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2200      	movs	r2, #0
 8003c38:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2210      	movs	r2, #16
 8003c44:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4a06      	ldr	r2, [pc, #24]	@ (8003c70 <LIS2DW12_GetCapabilities+0x58>)
 8003c58:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	44c80000 	.word	0x44c80000

08003c74 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e015      	b.n	8003cb6 <LIS2DW12_ACC_Enable+0x42>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fc3a 	bl	8004514 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <LIS2DW12_ACC_Enable+0x38>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	e004      	b.n	8003cb6 <LIS2DW12_ACC_Enable+0x42>
  }

  pObj->acc_is_enabled = 1;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e010      	b.n	8003cf6 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3320      	adds	r3, #32
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 ff00 	bl	8004ae0 <lis2dw12_data_rate_set>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cea:	e004      	b.n	8003cf6 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3320      	adds	r3, #32
 8003d12:	f107 020b 	add.w	r2, r7, #11
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f001 f83d 	bl	8004d98 <lis2dw12_full_scale_get>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295
 8003d28:	e080      	b.n	8003e2c <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3320      	adds	r3, #32
 8003d2e:	f107 020a 	add.w	r2, r7, #10
 8003d32:	4611      	mov	r1, r2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fe19 	bl	800496c <lis2dw12_power_mode_get>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	e072      	b.n	8003e2c <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8003d46:	7abb      	ldrb	r3, [r7, #10]
 8003d48:	2b1b      	cmp	r3, #27
 8003d4a:	bf8c      	ite	hi
 8003d4c:	2201      	movhi	r2, #1
 8003d4e:	2200      	movls	r2, #0
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	2a00      	cmp	r2, #0
 8003d54:	d162      	bne.n	8003e1c <LIS2DW12_ACC_GetSensitivity+0x11c>
 8003d56:	2201      	movs	r2, #1
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8003d5e:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf14      	ite	ne
 8003d66:	2301      	movne	r3, #1
 8003d68:	2300      	moveq	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d12f      	bne.n	8003dd0 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8003d70:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf14      	ite	ne
 8003d78:	2301      	movne	r3, #1
 8003d7a:	2300      	moveq	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d04c      	beq.n	8003e1c <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8003d82:	7afb      	ldrb	r3, [r7, #11]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d81b      	bhi.n	8003dc0 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8003d88:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003da9 	.word	0x08003da9
 8003d98:	08003db1 	.word	0x08003db1
 8003d9c:	08003db9 	.word	0x08003db9
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4a24      	ldr	r2, [pc, #144]	@ (8003e34 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003da4:	601a      	str	r2, [r3, #0]
          break;
 8003da6:	e012      	b.n	8003dce <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	4a23      	ldr	r2, [pc, #140]	@ (8003e38 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003dac:	601a      	str	r2, [r3, #0]
          break;
 8003dae:	e00e      	b.n	8003dce <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	4a22      	ldr	r2, [pc, #136]	@ (8003e3c <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8003db4:	601a      	str	r2, [r3, #0]
          break;
 8003db6:	e00a      	b.n	8003dce <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4a21      	ldr	r2, [pc, #132]	@ (8003e40 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8003dbc:	601a      	str	r2, [r3, #0]
          break;
 8003dbe:	e006      	b.n	8003dce <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	4a20      	ldr	r2, [pc, #128]	@ (8003e44 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003dc4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dca:	60fb      	str	r3, [r7, #12]
          break;
 8003dcc:	bf00      	nop
      }
      break;
 8003dce:	e02c      	b.n	8003e2a <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8003dd0:	7afb      	ldrb	r3, [r7, #11]
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d81a      	bhi.n	8003e0c <LIS2DW12_ACC_GetSensitivity+0x10c>
 8003dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ddc <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003ded 	.word	0x08003ded
 8003de0:	08003df5 	.word	0x08003df5
 8003de4:	08003dfd 	.word	0x08003dfd
 8003de8:	08003e05 	.word	0x08003e05
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	4a16      	ldr	r2, [pc, #88]	@ (8003e48 <LIS2DW12_ACC_GetSensitivity+0x148>)
 8003df0:	601a      	str	r2, [r3, #0]
          break;
 8003df2:	e012      	b.n	8003e1a <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	4a15      	ldr	r2, [pc, #84]	@ (8003e4c <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8003df8:	601a      	str	r2, [r3, #0]
          break;
 8003dfa:	e00e      	b.n	8003e1a <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4a0d      	ldr	r2, [pc, #52]	@ (8003e34 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003e00:	601a      	str	r2, [r3, #0]
          break;
 8003e02:	e00a      	b.n	8003e1a <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	4a0c      	ldr	r2, [pc, #48]	@ (8003e38 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003e08:	601a      	str	r2, [r3, #0]
          break;
 8003e0a:	e006      	b.n	8003e1a <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003e44 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003e10:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003e12:	f04f 33ff 	mov.w	r3, #4294967295
 8003e16:	60fb      	str	r3, [r7, #12]
          break;
 8003e18:	bf00      	nop
      }
      break;
 8003e1a:	e006      	b.n	8003e2a <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	4a09      	ldr	r2, [pc, #36]	@ (8003e44 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003e20:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	60fb      	str	r3, [r7, #12]
      break;
 8003e28:	bf00      	nop
  }

  return ret;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	3f79db23 	.word	0x3f79db23
 8003e38:	3ff9db23 	.word	0x3ff9db23
 8003e3c:	4079db23 	.word	0x4079db23
 8003e40:	40f9db23 	.word	0x40f9db23
 8003e44:	bf800000 	.word	0xbf800000
 8003e48:	3e79db23 	.word	0x3e79db23
 8003e4c:	3ef9db23 	.word	0x3ef9db23

08003e50 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3320      	adds	r3, #32
 8003e62:	f107 020b 	add.w	r2, r7, #11
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fe7f 	bl	8004b6c <lis2dw12_data_rate_get>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003e74:	f04f 33ff 	mov.w	r3, #4294967295
 8003e78:	e14f      	b.n	800411a <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3320      	adds	r3, #32
 8003e7e:	f107 020a 	add.w	r2, r7, #10
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fd71 	bl	800496c <lis2dw12_power_mode_get>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003e90:	f04f 33ff 	mov.w	r3, #4294967295
 8003e94:	e141      	b.n	800411a <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8003e96:	7afb      	ldrb	r3, [r7, #11]
 8003e98:	2b32      	cmp	r3, #50	@ 0x32
 8003e9a:	f200 8136 	bhi.w	800410a <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8003e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea4 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea4:	08003f71 	.word	0x08003f71
 8003ea8:	08003f7b 	.word	0x08003f7b
 8003eac:	08003fd5 	.word	0x08003fd5
 8003eb0:	08003fdd 	.word	0x08003fdd
 8003eb4:	08003fe5 	.word	0x08003fe5
 8003eb8:	08003fed 	.word	0x08003fed
 8003ebc:	08003ff5 	.word	0x08003ff5
 8003ec0:	08003ffd 	.word	0x08003ffd
 8003ec4:	08004057 	.word	0x08004057
 8003ec8:	080040b1 	.word	0x080040b1
 8003ecc:	0800410b 	.word	0x0800410b
 8003ed0:	0800410b 	.word	0x0800410b
 8003ed4:	0800410b 	.word	0x0800410b
 8003ed8:	0800410b 	.word	0x0800410b
 8003edc:	0800410b 	.word	0x0800410b
 8003ee0:	0800410b 	.word	0x0800410b
 8003ee4:	0800410b 	.word	0x0800410b
 8003ee8:	0800410b 	.word	0x0800410b
 8003eec:	08003f71 	.word	0x08003f71
 8003ef0:	0800410b 	.word	0x0800410b
 8003ef4:	0800410b 	.word	0x0800410b
 8003ef8:	0800410b 	.word	0x0800410b
 8003efc:	0800410b 	.word	0x0800410b
 8003f00:	0800410b 	.word	0x0800410b
 8003f04:	0800410b 	.word	0x0800410b
 8003f08:	0800410b 	.word	0x0800410b
 8003f0c:	0800410b 	.word	0x0800410b
 8003f10:	0800410b 	.word	0x0800410b
 8003f14:	0800410b 	.word	0x0800410b
 8003f18:	0800410b 	.word	0x0800410b
 8003f1c:	0800410b 	.word	0x0800410b
 8003f20:	0800410b 	.word	0x0800410b
 8003f24:	0800410b 	.word	0x0800410b
 8003f28:	0800410b 	.word	0x0800410b
 8003f2c:	0800410b 	.word	0x0800410b
 8003f30:	0800410b 	.word	0x0800410b
 8003f34:	0800410b 	.word	0x0800410b
 8003f38:	0800410b 	.word	0x0800410b
 8003f3c:	0800410b 	.word	0x0800410b
 8003f40:	0800410b 	.word	0x0800410b
 8003f44:	0800410b 	.word	0x0800410b
 8003f48:	0800410b 	.word	0x0800410b
 8003f4c:	0800410b 	.word	0x0800410b
 8003f50:	0800410b 	.word	0x0800410b
 8003f54:	0800410b 	.word	0x0800410b
 8003f58:	0800410b 	.word	0x0800410b
 8003f5c:	0800410b 	.word	0x0800410b
 8003f60:	0800410b 	.word	0x0800410b
 8003f64:	0800410b 	.word	0x0800410b
 8003f68:	0800410b 	.word	0x0800410b
 8003f6c:	08003f71 	.word	0x08003f71
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
      break;
 8003f78:	e0ce      	b.n	8004118 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8003f7a:	7abb      	ldrb	r3, [r7, #10]
 8003f7c:	2b1b      	cmp	r3, #27
 8003f7e:	bf8c      	ite	hi
 8003f80:	2201      	movhi	r2, #1
 8003f82:	2200      	movls	r2, #0
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	2a00      	cmp	r2, #0
 8003f88:	d11c      	bne.n	8003fc4 <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	bf14      	ite	ne
 8003f98:	2201      	movne	r2, #1
 8003f9a:	2200      	moveq	r2, #0
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	2a00      	cmp	r2, #0
 8003fa0:	d10c      	bne.n	8003fbc <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8003fa2:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf14      	ite	ne
 8003faa:	2301      	movne	r3, #1
 8003fac:	2300      	moveq	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d007      	beq.n	8003fc4 <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	4a5b      	ldr	r2, [pc, #364]	@ (8004124 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003fb8:	601a      	str	r2, [r3, #0]
          break;
 8003fba:	e00a      	b.n	8003fd2 <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4a5a      	ldr	r2, [pc, #360]	@ (8004128 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 8003fc0:	601a      	str	r2, [r3, #0]
          break;
 8003fc2:	e006      	b.n	8003fd2 <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	4a59      	ldr	r2, [pc, #356]	@ (800412c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003fc8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003fca:	f04f 33ff 	mov.w	r3, #4294967295
 8003fce:	60fb      	str	r3, [r7, #12]
          break;
 8003fd0:	bf00      	nop
      }
      break;
 8003fd2:	e0a1      	b.n	8004118 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4a53      	ldr	r2, [pc, #332]	@ (8004124 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003fd8:	601a      	str	r2, [r3, #0]
      break;
 8003fda:	e09d      	b.n	8004118 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	4a54      	ldr	r2, [pc, #336]	@ (8004130 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8003fe0:	601a      	str	r2, [r3, #0]
      break;
 8003fe2:	e099      	b.n	8004118 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	4a53      	ldr	r2, [pc, #332]	@ (8004134 <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8003fe8:	601a      	str	r2, [r3, #0]
      break;
 8003fea:	e095      	b.n	8004118 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	4a52      	ldr	r2, [pc, #328]	@ (8004138 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8003ff0:	601a      	str	r2, [r3, #0]
      break;
 8003ff2:	e091      	b.n	8004118 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	4a51      	ldr	r2, [pc, #324]	@ (800413c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003ff8:	601a      	str	r2, [r3, #0]
      break;
 8003ffa:	e08d      	b.n	8004118 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8003ffc:	7abb      	ldrb	r3, [r7, #10]
 8003ffe:	2b1b      	cmp	r3, #27
 8004000:	bf8c      	ite	hi
 8004002:	2201      	movhi	r2, #1
 8004004:	2200      	movls	r2, #0
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	2a00      	cmp	r2, #0
 800400a:	d11c      	bne.n	8004046 <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 800400c:	2201      	movs	r2, #1
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8004016:	2a00      	cmp	r2, #0
 8004018:	bf14      	ite	ne
 800401a:	2201      	movne	r2, #1
 800401c:	2200      	moveq	r2, #0
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	2a00      	cmp	r2, #0
 8004022:	d10c      	bne.n	800403e <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8004024:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	4a41      	ldr	r2, [pc, #260]	@ (8004140 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 800403a:	601a      	str	r2, [r3, #0]
          break;
 800403c:	e00a      	b.n	8004054 <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	4a3e      	ldr	r2, [pc, #248]	@ (800413c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8004042:	601a      	str	r2, [r3, #0]
          break;
 8004044:	e006      	b.n	8004054 <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	4a38      	ldr	r2, [pc, #224]	@ (800412c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800404a:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800404c:	f04f 33ff 	mov.w	r3, #4294967295
 8004050:	60fb      	str	r3, [r7, #12]
          break;
 8004052:	bf00      	nop
      }
      break;
 8004054:	e060      	b.n	8004118 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8004056:	7abb      	ldrb	r3, [r7, #10]
 8004058:	2b1b      	cmp	r3, #27
 800405a:	bf8c      	ite	hi
 800405c:	2201      	movhi	r2, #1
 800405e:	2200      	movls	r2, #0
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	2a00      	cmp	r2, #0
 8004064:	d11c      	bne.n	80040a0 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 8004066:	2201      	movs	r2, #1
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8004070:	2a00      	cmp	r2, #0
 8004072:	bf14      	ite	ne
 8004074:	2201      	movne	r2, #1
 8004076:	2200      	moveq	r2, #0
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	2a00      	cmp	r2, #0
 800407c:	d10c      	bne.n	8004098 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 800407e:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8004082:	2b00      	cmp	r3, #0
 8004084:	bf14      	ite	ne
 8004086:	2301      	movne	r3, #1
 8004088:	2300      	moveq	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	4a2c      	ldr	r2, [pc, #176]	@ (8004144 <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8004094:	601a      	str	r2, [r3, #0]
          break;
 8004096:	e00a      	b.n	80040ae <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	4a28      	ldr	r2, [pc, #160]	@ (800413c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800409c:	601a      	str	r2, [r3, #0]
          break;
 800409e:	e006      	b.n	80040ae <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4a22      	ldr	r2, [pc, #136]	@ (800412c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80040a4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80040a6:	f04f 33ff 	mov.w	r3, #4294967295
 80040aa:	60fb      	str	r3, [r7, #12]
          break;
 80040ac:	bf00      	nop
      }
      break;
 80040ae:	e033      	b.n	8004118 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 80040b0:	7abb      	ldrb	r3, [r7, #10]
 80040b2:	2b1b      	cmp	r3, #27
 80040b4:	bf8c      	ite	hi
 80040b6:	2201      	movhi	r2, #1
 80040b8:	2200      	movls	r2, #0
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	2a00      	cmp	r2, #0
 80040be:	d11c      	bne.n	80040fa <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 80040c0:	2201      	movs	r2, #1
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80040ca:	2a00      	cmp	r2, #0
 80040cc:	bf14      	ite	ne
 80040ce:	2201      	movne	r2, #1
 80040d0:	2200      	moveq	r2, #0
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	2a00      	cmp	r2, #0
 80040d6:	d10c      	bne.n	80040f2 <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 80040d8:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bf14      	ite	ne
 80040e0:	2301      	movne	r3, #1
 80040e2:	2300      	moveq	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	4a16      	ldr	r2, [pc, #88]	@ (8004148 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 80040ee:	601a      	str	r2, [r3, #0]
          break;
 80040f0:	e00a      	b.n	8004108 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	4a11      	ldr	r2, [pc, #68]	@ (800413c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80040f6:	601a      	str	r2, [r3, #0]
          break;
 80040f8:	e006      	b.n	8004108 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	4a0b      	ldr	r2, [pc, #44]	@ (800412c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80040fe:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8004100:	f04f 33ff 	mov.w	r3, #4294967295
 8004104:	60fb      	str	r3, [r7, #12]
          break;
 8004106:	bf00      	nop
      }
      break;
 8004108:	e006      	b.n	8004118 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	4a07      	ldr	r2, [pc, #28]	@ (800412c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800410e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8004110:	f04f 33ff 	mov.w	r3, #4294967295
 8004114:	60fb      	str	r3, [r7, #12]
      break;
 8004116:	bf00      	nop
  }

  return ret;
 8004118:	68fb      	ldr	r3, [r7, #12]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	41480000 	.word	0x41480000
 8004128:	3fcccccd 	.word	0x3fcccccd
 800412c:	bf800000 	.word	0xbf800000
 8004130:	41c80000 	.word	0x41c80000
 8004134:	42480000 	.word	0x42480000
 8004138:	42c80000 	.word	0x42c80000
 800413c:	43480000 	.word	0x43480000
 8004140:	43c80000 	.word	0x43c80000
 8004144:	44480000 	.word	0x44480000
 8004148:	44c80000 	.word	0x44c80000

0800414c <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8004156:	2300      	movs	r3, #0
 8004158:	2200      	movs	r2, #0
 800415a:	6839      	ldr	r1, [r7, #0]
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f805 	bl	800416c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8004162:	4603      	mov	r3, r0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	4611      	mov	r1, r2
 8004178:	461a      	mov	r2, r3
 800417a:	460b      	mov	r3, r1
 800417c:	71fb      	strb	r3, [r7, #7]
 800417e:	4613      	mov	r3, r2
 8004180:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x30>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 800418c:	79bb      	ldrb	r3, [r7, #6]
 800418e:	79fa      	ldrb	r2, [r7, #7]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f9be 	bl	8004514 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8004198:	4603      	mov	r3, r0
 800419a:	e006      	b.n	80041aa <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x3e>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 800419c:	79bb      	ldrb	r3, [r7, #6]
 800419e:	79fa      	ldrb	r2, [r7, #7]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fab8 	bl	8004718 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80041a8:	4603      	mov	r3, r0
  }
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3320      	adds	r3, #32
 80041c6:	f107 020b 	add.w	r2, r7, #11
 80041ca:	4611      	mov	r1, r2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fde3 	bl	8004d98 <lis2dw12_full_scale_get>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80041d8:	f04f 33ff 	mov.w	r3, #4294967295
 80041dc:	e027      	b.n	800422e <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80041de:	7afb      	ldrb	r3, [r7, #11]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d81b      	bhi.n	800421c <LIS2DW12_ACC_GetFullScale+0x68>
 80041e4:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <LIS2DW12_ACC_GetFullScale+0x38>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	08004205 	.word	0x08004205
 80041f4:	0800420d 	.word	0x0800420d
 80041f8:	08004215 	.word	0x08004215
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2202      	movs	r2, #2
 8004200:	601a      	str	r2, [r3, #0]
      break;
 8004202:	e013      	b.n	800422c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2204      	movs	r2, #4
 8004208:	601a      	str	r2, [r3, #0]
      break;
 800420a:	e00f      	b.n	800422c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2208      	movs	r2, #8
 8004210:	601a      	str	r2, [r3, #0]
      break;
 8004212:	e00b      	b.n	800422c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2210      	movs	r2, #16
 8004218:	601a      	str	r2, [r3, #0]
      break;
 800421a:	e007      	b.n	800422c <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	f04f 32ff 	mov.w	r2, #4294967295
 8004222:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8004224:	f04f 33ff 	mov.w	r3, #4294967295
 8004228:	60fb      	str	r3, [r7, #12]
      break;
 800422a:	bf00      	nop
  }

  return ret;
 800422c:	68fb      	ldr	r3, [r7, #12]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop

08004238 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b02      	cmp	r3, #2
 8004246:	dd0b      	ble.n	8004260 <LIS2DW12_ACC_SetFullScale+0x28>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2b04      	cmp	r3, #4
 800424c:	dd06      	ble.n	800425c <LIS2DW12_ACC_SetFullScale+0x24>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b08      	cmp	r3, #8
 8004252:	dc01      	bgt.n	8004258 <LIS2DW12_ACC_SetFullScale+0x20>
 8004254:	2302      	movs	r3, #2
 8004256:	e004      	b.n	8004262 <LIS2DW12_ACC_SetFullScale+0x2a>
 8004258:	2303      	movs	r3, #3
 800425a:	e002      	b.n	8004262 <LIS2DW12_ACC_SetFullScale+0x2a>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <LIS2DW12_ACC_SetFullScale+0x2a>
 8004260:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8004262:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3320      	adds	r3, #32
 8004268:	7bfa      	ldrb	r2, [r7, #15]
 800426a:	4611      	mov	r1, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fd6d 	bl	8004d4c <lis2dw12_full_scale_set>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8004278:	f04f 33ff 	mov.w	r3, #4294967295
 800427c:	e000      	b.n	8004280 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3320      	adds	r3, #32
 800429a:	f107 020b 	add.w	r2, r7, #11
 800429e:	4611      	mov	r1, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fb63 	bl	800496c <lis2dw12_power_mode_get>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80042ac:	f04f 33ff 	mov.w	r3, #4294967295
 80042b0:	e068      	b.n	8004384 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3320      	adds	r3, #32
 80042b6:	f107 020c 	add.w	r2, r7, #12
 80042ba:	4611      	mov	r1, r2
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fda3 	bl	8004e08 <lis2dw12_acceleration_raw_get>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80042c8:	f04f 33ff 	mov.w	r3, #4294967295
 80042cc:	e05a      	b.n	8004384 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 80042ce:	7afb      	ldrb	r3, [r7, #11]
 80042d0:	2b1b      	cmp	r3, #27
 80042d2:	bf8c      	ite	hi
 80042d4:	2201      	movhi	r2, #1
 80042d6:	2200      	movls	r2, #0
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	2a00      	cmp	r2, #0
 80042dc:	d14d      	bne.n	800437a <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80042de:	2201      	movs	r2, #1
 80042e0:	409a      	lsls	r2, r3
 80042e2:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 80042e6:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bf14      	ite	ne
 80042ee:	2301      	movne	r3, #1
 80042f0:	2300      	moveq	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d124      	bne.n	8004342 <LIS2DW12_ACC_GetAxesRaw+0xba>
 80042f8:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf14      	ite	ne
 8004300:	2301      	movne	r3, #1
 8004302:	2300      	moveq	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d037      	beq.n	800437a <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 800430a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	da00      	bge.n	8004314 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 8004312:	330f      	adds	r3, #15
 8004314:	111b      	asrs	r3, r3, #4
 8004316:	b21a      	sxth	r2, r3
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800431c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004320:	2b00      	cmp	r3, #0
 8004322:	da00      	bge.n	8004326 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8004324:	330f      	adds	r3, #15
 8004326:	111b      	asrs	r3, r3, #4
 8004328:	b21a      	sxth	r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800432e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	da00      	bge.n	8004338 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8004336:	330f      	adds	r3, #15
 8004338:	111b      	asrs	r3, r3, #4
 800433a:	b21a      	sxth	r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	809a      	strh	r2, [r3, #4]
      break;
 8004340:	e01f      	b.n	8004382 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8004342:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	da00      	bge.n	800434c <LIS2DW12_ACC_GetAxesRaw+0xc4>
 800434a:	3303      	adds	r3, #3
 800434c:	109b      	asrs	r3, r3, #2
 800434e:	b21a      	sxth	r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8004354:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004358:	2b00      	cmp	r3, #0
 800435a:	da00      	bge.n	800435e <LIS2DW12_ACC_GetAxesRaw+0xd6>
 800435c:	3303      	adds	r3, #3
 800435e:	109b      	asrs	r3, r3, #2
 8004360:	b21a      	sxth	r2, r3
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8004366:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	da00      	bge.n	8004370 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 800436e:	3303      	adds	r3, #3
 8004370:	109b      	asrs	r3, r3, #2
 8004372:	b21a      	sxth	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	809a      	strh	r2, [r3, #4]
      break;
 8004378:	e003      	b.n	8004382 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	617b      	str	r3, [r7, #20]
      break;
 8004380:	bf00      	nop
  }

  return ret;
 8004382:	697b      	ldr	r3, [r7, #20]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 800439c:	f107 0310 	add.w	r3, r7, #16
 80043a0:	4619      	mov	r1, r3
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff ff70 	bl	8004288 <LIS2DW12_ACC_GetAxesRaw>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
 80043b2:	e042      	b.n	800443a <LIS2DW12_ACC_GetAxes+0xae>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80043b4:	f107 030c 	add.w	r3, r7, #12
 80043b8:	4619      	mov	r1, r3
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff fca0 	bl	8003d00 <LIS2DW12_ACC_GetSensitivity>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ca:	e036      	b.n	800443a <LIS2DW12_ACC_GetAxes+0xae>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80043cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fc fc73 	bl	8000cbc <__aeabi_i2f>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f7fc fcc1 	bl	8000d64 <__aeabi_fmul>
 80043e2:	4603      	mov	r3, r0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fc fe83 	bl	80010f0 <__aeabi_f2iz>
 80043ea:	4602      	mov	r2, r0
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80043f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fc fc61 	bl	8000cbc <__aeabi_i2f>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4619      	mov	r1, r3
 8004400:	4610      	mov	r0, r2
 8004402:	f7fc fcaf 	bl	8000d64 <__aeabi_fmul>
 8004406:	4603      	mov	r3, r0
 8004408:	4618      	mov	r0, r3
 800440a:	f7fc fe71 	bl	80010f0 <__aeabi_f2iz>
 800440e:	4602      	mov	r2, r0
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8004414:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004418:	4618      	mov	r0, r3
 800441a:	f7fc fc4f 	bl	8000cbc <__aeabi_i2f>
 800441e:	4602      	mov	r2, r0
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f7fc fc9d 	bl	8000d64 <__aeabi_fmul>
 800442a:	4603      	mov	r3, r0
 800442c:	4618      	mov	r0, r3
 800442e:	f7fc fe5f 	bl	80010f0 <__aeabi_f2iz>
 8004432:	4602      	mov	r2, r0
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	70fb      	strb	r3, [r7, #3]
 800444e:	4613      	mov	r3, r2
 8004450:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f103 0020 	add.w	r0, r3, #32
 8004458:	1cba      	adds	r2, r7, #2
 800445a:	78f9      	ldrb	r1, [r7, #3]
 800445c:	2301      	movs	r3, #1
 800445e:	f000 fa1f 	bl	80048a0 <lis2dw12_write_reg>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8004468:	f04f 33ff 	mov.w	r3, #4294967295
 800446c:	e000      	b.n	8004470 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <LIS2DW12_ACC_Enable_6D_Orientation>:
  * @brief  Enable 6D orientation detection
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable_6D_Orientation(LIS2DW12_Object_t *pObj)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  int32_t ret = LIS2DW12_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
  lis2dw12_ctrl4_int1_pad_ctrl_t val;

  /* Output Data Rate selection */
  if (LIS2DW12_ACC_SetOutputDataRate(pObj, 200.0f) != LIS2DW12_OK)
 8004484:	4922      	ldr	r1, [pc, #136]	@ (8004510 <LIS2DW12_ACC_Enable_6D_Orientation+0x98>)
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff fe60 	bl	800414c <LIS2DW12_ACC_SetOutputDataRate>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <LIS2DW12_ACC_Enable_6D_Orientation+0x20>
  {
    return LIS2DW12_ERROR;
 8004492:	f04f 33ff 	mov.w	r3, #4294967295
 8004496:	e036      	b.n	8004506 <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  /* Full scale selection */
  if (LIS2DW12_ACC_SetFullScale(pObj, 2) != LIS2DW12_OK)
 8004498:	2102      	movs	r1, #2
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff fecc 	bl	8004238 <LIS2DW12_ACC_SetFullScale>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <LIS2DW12_ACC_Enable_6D_Orientation+0x34>
  {
    return LIS2DW12_ERROR;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	e02c      	b.n	8004506 <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  /* 6D orientation threshold. */
  if (lis2dw12_6d_threshold_set(&(pObj->Ctx), 2) != LIS2DW12_OK) /* 60 degrees */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3320      	adds	r3, #32
 80044b0:	2102      	movs	r1, #2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fda2 	bl	8004ffc <lis2dw12_6d_threshold_set>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <LIS2DW12_ACC_Enable_6D_Orientation+0x4c>
  {
    return LIS2DW12_ERROR;
 80044be:	f04f 33ff 	mov.w	r3, #4294967295
 80044c2:	e020      	b.n	8004506 <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  /* Enable 6D orientation event on INT1 pin */
  if (lis2dw12_pin_int1_route_get(&(pObj->Ctx), &val) != LIS2DW12_OK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3320      	adds	r3, #32
 80044c8:	f107 0208 	add.w	r2, r7, #8
 80044cc:	4611      	mov	r1, r2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fd83 	bl	8004fda <lis2dw12_pin_int1_route_get>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <LIS2DW12_ACC_Enable_6D_Orientation+0x68>
  {
    return LIS2DW12_ERROR;
 80044da:	f04f 33ff 	mov.w	r3, #4294967295
 80044de:	e012      	b.n	8004506 <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  val.int1_6d = PROPERTY_ENABLE;
 80044e0:	7a3b      	ldrb	r3, [r7, #8]
 80044e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e6:	723b      	strb	r3, [r7, #8]

  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3320      	adds	r3, #32
 80044ec:	f107 0208 	add.w	r2, r7, #8
 80044f0:	4611      	mov	r1, r2
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fd07 	bl	8004f06 <lis2dw12_pin_int1_route_set>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <LIS2DW12_ACC_Enable_6D_Orientation+0x8c>
  {
    return LIS2DW12_ERROR;
 80044fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004502:	e000      	b.n	8004506 <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  return ret;
 8004504:	68fb      	ldr	r3, [r7, #12]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	43480000 	.word	0x43480000

08004514 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	4611      	mov	r1, r2
 8004520:	461a      	mov	r2, r3
 8004522:	460b      	mov	r3, r1
 8004524:	71fb      	strb	r3, [r7, #7]
 8004526:	4613      	mov	r3, r2
 8004528:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	3b01      	subs	r3, #1
 800452e:	2b03      	cmp	r3, #3
 8004530:	d80a      	bhi.n	8004548 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8004532:	a201      	add	r2, pc, #4	@ (adr r2, 8004538 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8004534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004538:	08004571 	.word	0x08004571
 800453c:	08004599 	.word	0x08004599
 8004540:	080045c1 	.word	0x080045c1
 8004544:	080045e9 	.word	0x080045e9
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8004548:	79bb      	ldrb	r3, [r7, #6]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d002      	beq.n	8004554 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 800454e:	2304      	movs	r3, #4
 8004550:	75fb      	strb	r3, [r7, #23]
          break;
 8004552:	e002      	b.n	800455a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004554:	2314      	movs	r3, #20
 8004556:	75fb      	strb	r3, [r7, #23]
          break;
 8004558:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 800455a:	4967      	ldr	r1, [pc, #412]	@ (80046f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 800455c:	68b8      	ldr	r0, [r7, #8]
 800455e:	f7fc fd9f 	bl	80010a0 <__aeabi_fcmplt>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d100      	bne.n	800456a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x56>
      {
        Odr = 12.5f;
      }
      break;
 8004568:	e052      	b.n	8004610 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 12.5f;
 800456a:	4b63      	ldr	r3, [pc, #396]	@ (80046f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 800456c:	60bb      	str	r3, [r7, #8]
      break;
 800456e:	e04f      	b.n	8004610 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8004570:	79bb      	ldrb	r3, [r7, #6]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d002      	beq.n	800457c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x68>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8004576:	2303      	movs	r3, #3
 8004578:	75fb      	strb	r3, [r7, #23]
          break;
 800457a:	e002      	b.n	8004582 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 800457c:	2313      	movs	r3, #19
 800457e:	75fb      	strb	r3, [r7, #23]
          break;
 8004580:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004582:	495e      	ldr	r1, [pc, #376]	@ (80046fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004584:	68b8      	ldr	r0, [r7, #8]
 8004586:	f7fc fda9 	bl	80010dc <__aeabi_fcmpgt>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d100      	bne.n	8004592 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x7e>
      {
        Odr = 200.0f;
      }
      break;
 8004590:	e03e      	b.n	8004610 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 8004592:	4b5a      	ldr	r3, [pc, #360]	@ (80046fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004594:	60bb      	str	r3, [r7, #8]
      break;
 8004596:	e03b      	b.n	8004610 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8004598:	79bb      	ldrb	r3, [r7, #6]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d002      	beq.n	80045a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x90>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 800459e:	2302      	movs	r3, #2
 80045a0:	75fb      	strb	r3, [r7, #23]
          break;
 80045a2:	e002      	b.n	80045aa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x96>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80045a4:	2312      	movs	r3, #18
 80045a6:	75fb      	strb	r3, [r7, #23]
          break;
 80045a8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80045aa:	4954      	ldr	r1, [pc, #336]	@ (80046fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80045ac:	68b8      	ldr	r0, [r7, #8]
 80045ae:	f7fc fd95 	bl	80010dc <__aeabi_fcmpgt>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d100      	bne.n	80045ba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xa6>
      {
        Odr = 200.0f;
      }
      break;
 80045b8:	e02a      	b.n	8004610 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 80045ba:	4b50      	ldr	r3, [pc, #320]	@ (80046fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80045bc:	60bb      	str	r3, [r7, #8]
      break;
 80045be:	e027      	b.n	8004610 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 80045c0:	79bb      	ldrb	r3, [r7, #6]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d002      	beq.n	80045cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb8>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
          break;
 80045ca:	e002      	b.n	80045d2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xbe>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80045cc:	2311      	movs	r3, #17
 80045ce:	75fb      	strb	r3, [r7, #23]
          break;
 80045d0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80045d2:	494a      	ldr	r1, [pc, #296]	@ (80046fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80045d4:	68b8      	ldr	r0, [r7, #8]
 80045d6:	f7fc fd81 	bl	80010dc <__aeabi_fcmpgt>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d100      	bne.n	80045e2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xce>
      {
        Odr = 200.0f;
      }
      break;
 80045e0:	e016      	b.n	8004610 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 80045e2:	4b46      	ldr	r3, [pc, #280]	@ (80046fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80045e4:	60bb      	str	r3, [r7, #8]
      break;
 80045e6:	e013      	b.n	8004610 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 80045e8:	79bb      	ldrb	r3, [r7, #6]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d002      	beq.n	80045f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xe0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 80045ee:	2300      	movs	r3, #0
 80045f0:	75fb      	strb	r3, [r7, #23]
          break;
 80045f2:	e002      	b.n	80045fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xe6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80045f4:	2310      	movs	r3, #16
 80045f6:	75fb      	strb	r3, [r7, #23]
          break;
 80045f8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80045fa:	4940      	ldr	r1, [pc, #256]	@ (80046fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80045fc:	68b8      	ldr	r0, [r7, #8]
 80045fe:	f7fc fd6d 	bl	80010dc <__aeabi_fcmpgt>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d100      	bne.n	800460a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
      {
        Odr = 200.0f;
      }
      break;
 8004608:	e001      	b.n	800460e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfa>
        Odr = 200.0f;
 800460a:	4b3c      	ldr	r3, [pc, #240]	@ (80046fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 800460c:	60bb      	str	r3, [r7, #8]
      break;
 800460e:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8004610:	493b      	ldr	r1, [pc, #236]	@ (8004700 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1ec>)
 8004612:	68b8      	ldr	r0, [r7, #8]
 8004614:	f7fc fd4e 	bl	80010b4 <__aeabi_fcmple>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
 800461e:	2301      	movs	r3, #1
 8004620:	e03f      	b.n	80046a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004622:	4935      	ldr	r1, [pc, #212]	@ (80046f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 8004624:	68b8      	ldr	r0, [r7, #8]
 8004626:	f7fc fd45 	bl	80010b4 <__aeabi_fcmple>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004630:	2302      	movs	r3, #2
 8004632:	e036      	b.n	80046a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004634:	4933      	ldr	r1, [pc, #204]	@ (8004704 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f0>)
 8004636:	68b8      	ldr	r0, [r7, #8]
 8004638:	f7fc fd3c 	bl	80010b4 <__aeabi_fcmple>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x132>
 8004642:	2303      	movs	r3, #3
 8004644:	e02d      	b.n	80046a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004646:	4930      	ldr	r1, [pc, #192]	@ (8004708 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f4>)
 8004648:	68b8      	ldr	r0, [r7, #8]
 800464a:	f7fc fd33 	bl	80010b4 <__aeabi_fcmple>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x144>
 8004654:	2304      	movs	r3, #4
 8004656:	e024      	b.n	80046a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004658:	492c      	ldr	r1, [pc, #176]	@ (800470c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>)
 800465a:	68b8      	ldr	r0, [r7, #8]
 800465c:	f7fc fd2a 	bl	80010b4 <__aeabi_fcmple>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x156>
 8004666:	2305      	movs	r3, #5
 8004668:	e01b      	b.n	80046a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 800466a:	4924      	ldr	r1, [pc, #144]	@ (80046fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 800466c:	68b8      	ldr	r0, [r7, #8]
 800466e:	f7fc fd21 	bl	80010b4 <__aeabi_fcmple>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8004678:	2306      	movs	r3, #6
 800467a:	e012      	b.n	80046a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 800467c:	4924      	ldr	r1, [pc, #144]	@ (8004710 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1fc>)
 800467e:	68b8      	ldr	r0, [r7, #8]
 8004680:	f7fc fd18 	bl	80010b4 <__aeabi_fcmple>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17a>
 800468a:	2307      	movs	r3, #7
 800468c:	e009      	b.n	80046a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 800468e:	4921      	ldr	r1, [pc, #132]	@ (8004714 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x200>)
 8004690:	68b8      	ldr	r0, [r7, #8]
 8004692:	f7fc fd0f 	bl	80010b4 <__aeabi_fcmple>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18c>
 800469c:	2308      	movs	r3, #8
 800469e:	e000      	b.n	80046a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80046a0:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 80046a2:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3320      	adds	r3, #32
 80046a8:	7dba      	ldrb	r2, [r7, #22]
 80046aa:	4611      	mov	r1, r2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fa17 	bl	8004ae0 <lis2dw12_data_rate_set>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
  {
    return LIS2DW12_ERROR;
 80046b8:	f04f 33ff 	mov.w	r3, #4294967295
 80046bc:	e018      	b.n	80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1dc>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3320      	adds	r3, #32
 80046c2:	7dfa      	ldrb	r2, [r7, #23]
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f902 	bl	80048d0 <lis2dw12_power_mode_set>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c4>
  {
    return LIS2DW12_ERROR;
 80046d2:	f04f 33ff 	mov.w	r3, #4294967295
 80046d6:	e00b      	b.n	80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1dc>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	79fa      	ldrb	r2, [r7, #7]
 80046e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	79ba      	ldrb	r2, [r7, #6]
 80046ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return LIS2DW12_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	41480000 	.word	0x41480000
 80046fc:	43480000 	.word	0x43480000
 8004700:	3fcccccd 	.word	0x3fcccccd
 8004704:	41c80000 	.word	0x41c80000
 8004708:	42480000 	.word	0x42480000
 800470c:	42c80000 	.word	0x42c80000
 8004710:	43c80000 	.word	0x43c80000
 8004714:	44480000 	.word	0x44480000

08004718 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	4611      	mov	r1, r2
 8004724:	461a      	mov	r2, r3
 8004726:	460b      	mov	r3, r1
 8004728:	71fb      	strb	r3, [r7, #7]
 800472a:	4613      	mov	r3, r2
 800472c:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	79fa      	ldrb	r2, [r7, #7]
 8004732:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	79ba      	ldrb	r2, [r7, #6]
 800473a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 800473e:	4928      	ldr	r1, [pc, #160]	@ (80047e0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 8004740:	68b8      	ldr	r0, [r7, #8]
 8004742:	f7fc fcb7 	bl	80010b4 <__aeabi_fcmple>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x38>
 800474c:	4b24      	ldr	r3, [pc, #144]	@ (80047e0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 800474e:	e03f      	b.n	80047d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=   25.0f) ?   25.0f
 8004750:	4924      	ldr	r1, [pc, #144]	@ (80047e4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 8004752:	68b8      	ldr	r0, [r7, #8]
 8004754:	f7fc fcae 	bl	80010b4 <__aeabi_fcmple>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x4a>
 800475e:	4b21      	ldr	r3, [pc, #132]	@ (80047e4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 8004760:	e036      	b.n	80047d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=   50.0f) ?   50.0f
 8004762:	4921      	ldr	r1, [pc, #132]	@ (80047e8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8004764:	68b8      	ldr	r0, [r7, #8]
 8004766:	f7fc fca5 	bl	80010b4 <__aeabi_fcmple>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x5c>
 8004770:	4b1d      	ldr	r3, [pc, #116]	@ (80047e8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8004772:	e02d      	b.n	80047d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  100.0f) ?  100.0f
 8004774:	491d      	ldr	r1, [pc, #116]	@ (80047ec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8004776:	68b8      	ldr	r0, [r7, #8]
 8004778:	f7fc fc9c 	bl	80010b4 <__aeabi_fcmple>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 8004782:	4b1a      	ldr	r3, [pc, #104]	@ (80047ec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8004784:	e024      	b.n	80047d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  200.0f) ?  200.0f
 8004786:	491a      	ldr	r1, [pc, #104]	@ (80047f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8004788:	68b8      	ldr	r0, [r7, #8]
 800478a:	f7fc fc93 	bl	80010b4 <__aeabi_fcmple>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
 8004794:	4b16      	ldr	r3, [pc, #88]	@ (80047f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8004796:	e01b      	b.n	80047d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  400.0f) ?  400.0f
 8004798:	4916      	ldr	r1, [pc, #88]	@ (80047f4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 800479a:	68b8      	ldr	r0, [r7, #8]
 800479c:	f7fc fc8a 	bl	80010b4 <__aeabi_fcmple>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 80047a6:	4b13      	ldr	r3, [pc, #76]	@ (80047f4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 80047a8:	e012      	b.n	80047d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  800.0f) ?  800.0f
 80047aa:	4913      	ldr	r1, [pc, #76]	@ (80047f8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 80047ac:	68b8      	ldr	r0, [r7, #8]
 80047ae:	f7fc fc81 	bl	80010b4 <__aeabi_fcmple>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa4>
 80047b8:	4b0f      	ldr	r3, [pc, #60]	@ (80047f8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 80047ba:	e009      	b.n	80047d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  :                    1600.0f;
 80047bc:	490f      	ldr	r1, [pc, #60]	@ (80047fc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 80047be:	68b8      	ldr	r0, [r7, #8]
 80047c0:	f7fc fc78 	bl	80010b4 <__aeabi_fcmple>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb6>
 80047ca:	4b0c      	ldr	r3, [pc, #48]	@ (80047fc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 80047cc:	e000      	b.n	80047d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
 80047ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004800 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	6353      	str	r3, [r2, #52]	@ 0x34

  return LIS2DW12_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	3fcccccd 	.word	0x3fcccccd
 80047e4:	41480000 	.word	0x41480000
 80047e8:	41c80000 	.word	0x41c80000
 80047ec:	42480000 	.word	0x42480000
 80047f0:	42c80000 	.word	0x42c80000
 80047f4:	43480000 	.word	0x43480000
 80047f8:	43c80000 	.word	0x43c80000
 80047fc:	44480000 	.word	0x44480000
 8004800:	44c80000 	.word	0x44c80000

08004804 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	461a      	mov	r2, r3
 8004810:	460b      	mov	r3, r1
 8004812:	72fb      	strb	r3, [r7, #11]
 8004814:	4613      	mov	r3, r2
 8004816:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	695c      	ldr	r4, [r3, #20]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	7b1b      	ldrb	r3, [r3, #12]
 8004824:	4618      	mov	r0, r3
 8004826:	7afb      	ldrb	r3, [r7, #11]
 8004828:	b299      	uxth	r1, r3
 800482a:	893b      	ldrh	r3, [r7, #8]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	47a0      	blx	r4
 8004830:	4603      	mov	r3, r0
}
 8004832:	4618      	mov	r0, r3
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	bd90      	pop	{r4, r7, pc}

0800483a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800483a:	b590      	push	{r4, r7, lr}
 800483c:	b087      	sub	sp, #28
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	461a      	mov	r2, r3
 8004846:	460b      	mov	r3, r1
 8004848:	72fb      	strb	r3, [r7, #11]
 800484a:	4613      	mov	r3, r2
 800484c:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	691c      	ldr	r4, [r3, #16]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	7b1b      	ldrb	r3, [r3, #12]
 800485a:	4618      	mov	r0, r3
 800485c:	7afb      	ldrb	r3, [r7, #11]
 800485e:	b299      	uxth	r1, r3
 8004860:	893b      	ldrh	r3, [r7, #8]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	47a0      	blx	r4
 8004866:	4603      	mov	r3, r0
}
 8004868:	4618      	mov	r0, r3
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	bd90      	pop	{r4, r7, pc}

08004870 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004870:	b590      	push	{r4, r7, lr}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	461a      	mov	r2, r3
 800487c:	460b      	mov	r3, r1
 800487e:	72fb      	strb	r3, [r7, #11]
 8004880:	4613      	mov	r3, r2
 8004882:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685c      	ldr	r4, [r3, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68d8      	ldr	r0, [r3, #12]
 800488c:	893b      	ldrh	r3, [r7, #8]
 800488e:	7af9      	ldrb	r1, [r7, #11]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	47a0      	blx	r4
 8004894:	6178      	str	r0, [r7, #20]

  return ret;
 8004896:	697b      	ldr	r3, [r7, #20]
}
 8004898:	4618      	mov	r0, r3
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	bd90      	pop	{r4, r7, pc}

080048a0 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80048a0:	b590      	push	{r4, r7, lr}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	461a      	mov	r2, r3
 80048ac:	460b      	mov	r3, r1
 80048ae:	72fb      	strb	r3, [r7, #11]
 80048b0:	4613      	mov	r3, r2
 80048b2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681c      	ldr	r4, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68d8      	ldr	r0, [r3, #12]
 80048bc:	893b      	ldrh	r3, [r7, #8]
 80048be:	7af9      	ldrb	r1, [r7, #11]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	47a0      	blx	r4
 80048c4:	6178      	str	r0, [r7, #20]

  return ret;
 80048c6:	697b      	ldr	r3, [r7, #20]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd90      	pop	{r4, r7, pc}

080048d0 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	460b      	mov	r3, r1
 80048da:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80048dc:	f107 0210 	add.w	r2, r7, #16
 80048e0:	2301      	movs	r3, #1
 80048e2:	2120      	movs	r1, #32
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff ffc3 	bl	8004870 <lis2dw12_read_reg>
 80048ea:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d118      	bne.n	8004924 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	089b      	lsrs	r3, r3, #2
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	7c3b      	ldrb	r3, [r7, #16]
 80048fe:	f362 0383 	bfi	r3, r2, #2, #2
 8004902:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	b2da      	uxtb	r2, r3
 800490c:	7c3b      	ldrb	r3, [r7, #16]
 800490e:	f362 0301 	bfi	r3, r2, #0, #2
 8004912:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004914:	f107 0210 	add.w	r2, r7, #16
 8004918:	2301      	movs	r3, #1
 800491a:	2120      	movs	r1, #32
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff ffbf 	bl	80048a0 <lis2dw12_write_reg>
 8004922:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d107      	bne.n	800493a <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800492a:	f107 020c 	add.w	r2, r7, #12
 800492e:	2301      	movs	r3, #1
 8004930:	2125      	movs	r1, #37	@ 0x25
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff ff9c 	bl	8004870 <lis2dw12_read_reg>
 8004938:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d110      	bne.n	8004962 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	b2da      	uxtb	r2, r3
 800494a:	7b3b      	ldrb	r3, [r7, #12]
 800494c:	f362 0382 	bfi	r3, r2, #2, #1
 8004950:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004952:	f107 020c 	add.w	r2, r7, #12
 8004956:	2301      	movs	r3, #1
 8004958:	2125      	movs	r1, #37	@ 0x25
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff ffa0 	bl	80048a0 <lis2dw12_write_reg>
 8004960:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004962:	697b      	ldr	r3, [r7, #20]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004976:	f107 0210 	add.w	r2, r7, #16
 800497a:	2301      	movs	r3, #1
 800497c:	2120      	movs	r1, #32
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff ff76 	bl	8004870 <lis2dw12_read_reg>
 8004984:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f040 80a3 	bne.w	8004ad4 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800498e:	f107 020c 	add.w	r2, r7, #12
 8004992:	2301      	movs	r3, #1
 8004994:	2125      	movs	r1, #37	@ 0x25
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff ff6a 	bl	8004870 <lis2dw12_read_reg>
 800499c:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800499e:	7b3b      	ldrb	r3, [r7, #12]
 80049a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	011a      	lsls	r2, r3, #4
 80049a8:	7c3b      	ldrb	r3, [r7, #16]
 80049aa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
             ctrl1.lp_mode))
 80049b4:	7c3a      	ldrb	r2, [r7, #16]
 80049b6:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80049ba:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80049bc:	4413      	add	r3, r2
 80049be:	2b1b      	cmp	r3, #27
 80049c0:	f200 8084 	bhi.w	8004acc <lis2dw12_power_mode_get+0x160>
 80049c4:	a201      	add	r2, pc, #4	@ (adr r2, 80049cc <lis2dw12_power_mode_get+0x60>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	08004a5d 	.word	0x08004a5d
 80049d0:	08004a55 	.word	0x08004a55
 80049d4:	08004a4d 	.word	0x08004a4d
 80049d8:	08004a45 	.word	0x08004a45
 80049dc:	08004a3d 	.word	0x08004a3d
 80049e0:	08004acd 	.word	0x08004acd
 80049e4:	08004acd 	.word	0x08004acd
 80049e8:	08004acd 	.word	0x08004acd
 80049ec:	08004a7d 	.word	0x08004a7d
 80049f0:	08004a75 	.word	0x08004a75
 80049f4:	08004a6d 	.word	0x08004a6d
 80049f8:	08004a65 	.word	0x08004a65
 80049fc:	08004acd 	.word	0x08004acd
 8004a00:	08004acd 	.word	0x08004acd
 8004a04:	08004acd 	.word	0x08004acd
 8004a08:	08004acd 	.word	0x08004acd
 8004a0c:	08004aa5 	.word	0x08004aa5
 8004a10:	08004a9d 	.word	0x08004a9d
 8004a14:	08004a95 	.word	0x08004a95
 8004a18:	08004a8d 	.word	0x08004a8d
 8004a1c:	08004a85 	.word	0x08004a85
 8004a20:	08004acd 	.word	0x08004acd
 8004a24:	08004acd 	.word	0x08004acd
 8004a28:	08004acd 	.word	0x08004acd
 8004a2c:	08004ac5 	.word	0x08004ac5
 8004a30:	08004abd 	.word	0x08004abd
 8004a34:	08004ab5 	.word	0x08004ab5
 8004a38:	08004aad 	.word	0x08004aad
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2204      	movs	r2, #4
 8004a40:	701a      	strb	r2, [r3, #0]
        break;
 8004a42:	e047      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2203      	movs	r2, #3
 8004a48:	701a      	strb	r2, [r3, #0]
        break;
 8004a4a:	e043      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	701a      	strb	r2, [r3, #0]
        break;
 8004a52:	e03f      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2201      	movs	r2, #1
 8004a58:	701a      	strb	r2, [r3, #0]
        break;
 8004a5a:	e03b      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
        break;
 8004a62:	e037      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	220b      	movs	r2, #11
 8004a68:	701a      	strb	r2, [r3, #0]
        break;
 8004a6a:	e033      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	220a      	movs	r2, #10
 8004a70:	701a      	strb	r2, [r3, #0]
        break;
 8004a72:	e02f      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2209      	movs	r2, #9
 8004a78:	701a      	strb	r2, [r3, #0]
        break;
 8004a7a:	e02b      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2208      	movs	r2, #8
 8004a80:	701a      	strb	r2, [r3, #0]
        break;
 8004a82:	e027      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2214      	movs	r2, #20
 8004a88:	701a      	strb	r2, [r3, #0]
        break;
 8004a8a:	e023      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2213      	movs	r2, #19
 8004a90:	701a      	strb	r2, [r3, #0]
        break;
 8004a92:	e01f      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2212      	movs	r2, #18
 8004a98:	701a      	strb	r2, [r3, #0]
        break;
 8004a9a:	e01b      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2211      	movs	r2, #17
 8004aa0:	701a      	strb	r2, [r3, #0]
        break;
 8004aa2:	e017      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2210      	movs	r2, #16
 8004aa8:	701a      	strb	r2, [r3, #0]
        break;
 8004aaa:	e013      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	221b      	movs	r2, #27
 8004ab0:	701a      	strb	r2, [r3, #0]
        break;
 8004ab2:	e00f      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	221a      	movs	r2, #26
 8004ab8:	701a      	strb	r2, [r3, #0]
        break;
 8004aba:	e00b      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2219      	movs	r2, #25
 8004ac0:	701a      	strb	r2, [r3, #0]
        break;
 8004ac2:	e007      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2218      	movs	r2, #24
 8004ac8:	701a      	strb	r2, [r3, #0]
        break;
 8004aca:	e003      	b.n	8004ad4 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2204      	movs	r2, #4
 8004ad0:	701a      	strb	r2, [r3, #0]
        break;
 8004ad2:	bf00      	nop
    }
  }

  return ret;
 8004ad4:	697b      	ldr	r3, [r7, #20]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop

08004ae0 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004aec:	f107 0210 	add.w	r2, r7, #16
 8004af0:	2301      	movs	r3, #1
 8004af2:	2120      	movs	r1, #32
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff febb 	bl	8004870 <lis2dw12_read_reg>
 8004afa:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10f      	bne.n	8004b22 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	7c3b      	ldrb	r3, [r7, #16]
 8004b0c:	f362 1307 	bfi	r3, r2, #4, #4
 8004b10:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004b12:	f107 0210 	add.w	r2, r7, #16
 8004b16:	2301      	movs	r3, #1
 8004b18:	2120      	movs	r1, #32
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff fec0 	bl	80048a0 <lis2dw12_write_reg>
 8004b20:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d107      	bne.n	8004b38 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004b28:	f107 020c 	add.w	r2, r7, #12
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	2122      	movs	r1, #34	@ 0x22
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff fe9d 	bl	8004870 <lis2dw12_read_reg>
 8004b36:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d110      	bne.n	8004b60 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	7b3b      	ldrb	r3, [r7, #12]
 8004b4a:	f362 0301 	bfi	r3, r2, #0, #2
 8004b4e:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004b50:	f107 020c 	add.w	r2, r7, #12
 8004b54:	2301      	movs	r3, #1
 8004b56:	2122      	movs	r1, #34	@ 0x22
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff fea1 	bl	80048a0 <lis2dw12_write_reg>
 8004b5e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004b60:	697b      	ldr	r3, [r7, #20]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004b76:	f107 0210 	add.w	r2, r7, #16
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	2120      	movs	r1, #32
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff fe76 	bl	8004870 <lis2dw12_read_reg>
 8004b84:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f040 80b3 	bne.w	8004cf4 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004b8e:	f107 020c 	add.w	r2, r7, #12
 8004b92:	2301      	movs	r3, #1
 8004b94:	2122      	movs	r1, #34	@ 0x22
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fe6a 	bl	8004870 <lis2dw12_read_reg>
 8004b9c:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8004b9e:	7b3b      	ldrb	r3, [r7, #12]
 8004ba0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	7c3a      	ldrb	r2, [r7, #16]
 8004baa:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	2b32      	cmp	r3, #50	@ 0x32
 8004bb4:	f200 809a 	bhi.w	8004cec <lis2dw12_data_rate_get+0x180>
 8004bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc0 <lis2dw12_data_rate_get+0x54>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004c8d 	.word	0x08004c8d
 8004bc4:	08004c95 	.word	0x08004c95
 8004bc8:	08004c9d 	.word	0x08004c9d
 8004bcc:	08004ca5 	.word	0x08004ca5
 8004bd0:	08004cad 	.word	0x08004cad
 8004bd4:	08004cb5 	.word	0x08004cb5
 8004bd8:	08004cbd 	.word	0x08004cbd
 8004bdc:	08004cc5 	.word	0x08004cc5
 8004be0:	08004ccd 	.word	0x08004ccd
 8004be4:	08004cd5 	.word	0x08004cd5
 8004be8:	08004ced 	.word	0x08004ced
 8004bec:	08004ced 	.word	0x08004ced
 8004bf0:	08004ced 	.word	0x08004ced
 8004bf4:	08004ced 	.word	0x08004ced
 8004bf8:	08004ced 	.word	0x08004ced
 8004bfc:	08004ced 	.word	0x08004ced
 8004c00:	08004ced 	.word	0x08004ced
 8004c04:	08004ced 	.word	0x08004ced
 8004c08:	08004ce5 	.word	0x08004ce5
 8004c0c:	08004ced 	.word	0x08004ced
 8004c10:	08004ced 	.word	0x08004ced
 8004c14:	08004ced 	.word	0x08004ced
 8004c18:	08004ced 	.word	0x08004ced
 8004c1c:	08004ced 	.word	0x08004ced
 8004c20:	08004ced 	.word	0x08004ced
 8004c24:	08004ced 	.word	0x08004ced
 8004c28:	08004ced 	.word	0x08004ced
 8004c2c:	08004ced 	.word	0x08004ced
 8004c30:	08004ced 	.word	0x08004ced
 8004c34:	08004ced 	.word	0x08004ced
 8004c38:	08004ced 	.word	0x08004ced
 8004c3c:	08004ced 	.word	0x08004ced
 8004c40:	08004ced 	.word	0x08004ced
 8004c44:	08004ced 	.word	0x08004ced
 8004c48:	08004ced 	.word	0x08004ced
 8004c4c:	08004ced 	.word	0x08004ced
 8004c50:	08004ced 	.word	0x08004ced
 8004c54:	08004ced 	.word	0x08004ced
 8004c58:	08004ced 	.word	0x08004ced
 8004c5c:	08004ced 	.word	0x08004ced
 8004c60:	08004ced 	.word	0x08004ced
 8004c64:	08004ced 	.word	0x08004ced
 8004c68:	08004ced 	.word	0x08004ced
 8004c6c:	08004ced 	.word	0x08004ced
 8004c70:	08004ced 	.word	0x08004ced
 8004c74:	08004ced 	.word	0x08004ced
 8004c78:	08004ced 	.word	0x08004ced
 8004c7c:	08004ced 	.word	0x08004ced
 8004c80:	08004ced 	.word	0x08004ced
 8004c84:	08004ced 	.word	0x08004ced
 8004c88:	08004cdd 	.word	0x08004cdd
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	701a      	strb	r2, [r3, #0]
        break;
 8004c92:	e02f      	b.n	8004cf4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2201      	movs	r2, #1
 8004c98:	701a      	strb	r2, [r3, #0]
        break;
 8004c9a:	e02b      	b.n	8004cf4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	701a      	strb	r2, [r3, #0]
        break;
 8004ca2:	e027      	b.n	8004cf4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2203      	movs	r2, #3
 8004ca8:	701a      	strb	r2, [r3, #0]
        break;
 8004caa:	e023      	b.n	8004cf4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2204      	movs	r2, #4
 8004cb0:	701a      	strb	r2, [r3, #0]
        break;
 8004cb2:	e01f      	b.n	8004cf4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2205      	movs	r2, #5
 8004cb8:	701a      	strb	r2, [r3, #0]
        break;
 8004cba:	e01b      	b.n	8004cf4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2206      	movs	r2, #6
 8004cc0:	701a      	strb	r2, [r3, #0]
        break;
 8004cc2:	e017      	b.n	8004cf4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2207      	movs	r2, #7
 8004cc8:	701a      	strb	r2, [r3, #0]
        break;
 8004cca:	e013      	b.n	8004cf4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2208      	movs	r2, #8
 8004cd0:	701a      	strb	r2, [r3, #0]
        break;
 8004cd2:	e00f      	b.n	8004cf4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2209      	movs	r2, #9
 8004cd8:	701a      	strb	r2, [r3, #0]
        break;
 8004cda:	e00b      	b.n	8004cf4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2232      	movs	r2, #50	@ 0x32
 8004ce0:	701a      	strb	r2, [r3, #0]
        break;
 8004ce2:	e007      	b.n	8004cf4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2212      	movs	r2, #18
 8004ce8:	701a      	strb	r2, [r3, #0]
        break;
 8004cea:	e003      	b.n	8004cf4 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]
        break;
 8004cf2:	bf00      	nop
    }
  }

  return ret;
 8004cf4:	697b      	ldr	r3, [r7, #20]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop

08004d00 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004d0c:	f107 0208 	add.w	r2, r7, #8
 8004d10:	2301      	movs	r3, #1
 8004d12:	2121      	movs	r1, #33	@ 0x21
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff fdab 	bl	8004870 <lis2dw12_read_reg>
 8004d1a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10f      	bne.n	8004d42 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	7a3b      	ldrb	r3, [r7, #8]
 8004d2c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004d30:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004d32:	f107 0208 	add.w	r2, r7, #8
 8004d36:	2301      	movs	r3, #1
 8004d38:	2121      	movs	r1, #33	@ 0x21
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff fdb0 	bl	80048a0 <lis2dw12_write_reg>
 8004d40:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d42:	68fb      	ldr	r3, [r7, #12]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004d58:	f107 0208 	add.w	r2, r7, #8
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	2125      	movs	r1, #37	@ 0x25
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff fd85 	bl	8004870 <lis2dw12_read_reg>
 8004d66:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10f      	bne.n	8004d8e <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	7a3b      	ldrb	r3, [r7, #8]
 8004d78:	f362 1305 	bfi	r3, r2, #4, #2
 8004d7c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004d7e:	f107 0208 	add.w	r2, r7, #8
 8004d82:	2301      	movs	r3, #1
 8004d84:	2125      	movs	r1, #37	@ 0x25
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff fd8a 	bl	80048a0 <lis2dw12_write_reg>
 8004d8c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004da2:	f107 0208 	add.w	r2, r7, #8
 8004da6:	2301      	movs	r3, #1
 8004da8:	2125      	movs	r1, #37	@ 0x25
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff fd60 	bl	8004870 <lis2dw12_read_reg>
 8004db0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8004db2:	7a3b      	ldrb	r3, [r7, #8]
 8004db4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d81a      	bhi.n	8004df4 <lis2dw12_full_scale_get+0x5c>
 8004dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <lis2dw12_full_scale_get+0x2c>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004dd5 	.word	0x08004dd5
 8004dc8:	08004ddd 	.word	0x08004ddd
 8004dcc:	08004de5 	.word	0x08004de5
 8004dd0:	08004ded 	.word	0x08004ded
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	701a      	strb	r2, [r3, #0]
      break;
 8004dda:	e00f      	b.n	8004dfc <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2201      	movs	r2, #1
 8004de0:	701a      	strb	r2, [r3, #0]
      break;
 8004de2:	e00b      	b.n	8004dfc <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2202      	movs	r2, #2
 8004de8:	701a      	strb	r2, [r3, #0]
      break;
 8004dea:	e007      	b.n	8004dfc <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2203      	movs	r2, #3
 8004df0:	701a      	strb	r2, [r3, #0]
      break;
 8004df2:	e003      	b.n	8004dfc <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
      break;
 8004dfa:	bf00      	nop
  }

  return ret;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop

08004e08 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8004e12:	f107 020c 	add.w	r2, r7, #12
 8004e16:	2306      	movs	r3, #6
 8004e18:	2128      	movs	r1, #40	@ 0x28
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fd28 	bl	8004870 <lis2dw12_read_reg>
 8004e20:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004e22:	7b7b      	ldrb	r3, [r7, #13]
 8004e24:	b21a      	sxth	r2, r3
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	7b3a      	ldrb	r2, [r7, #12]
 8004e38:	4413      	add	r3, r2
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	b21a      	sxth	r2, r3
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004e42:	7bfa      	ldrb	r2, [r7, #15]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	3302      	adds	r3, #2
 8004e48:	b212      	sxth	r2, r2
 8004e4a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	3302      	adds	r3, #2
 8004e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	7bba      	ldrb	r2, [r7, #14]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	3302      	adds	r3, #2
 8004e64:	b212      	sxth	r2, r2
 8004e66:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004e68:	7c7a      	ldrb	r2, [r7, #17]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	b212      	sxth	r2, r2
 8004e70:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	3304      	adds	r3, #4
 8004e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	7c3a      	ldrb	r2, [r7, #16]
 8004e82:	4413      	add	r3, r2
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	b212      	sxth	r2, r2
 8004e8c:	801a      	strh	r2, [r3, #0]

  return ret;
 8004e8e:	697b      	ldr	r3, [r7, #20]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	210f      	movs	r1, #15
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff fce1 	bl	8004870 <lis2dw12_read_reg>
 8004eae:	60f8      	str	r0, [r7, #12]

  return ret;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004ec6:	f107 0208 	add.w	r2, r7, #8
 8004eca:	2301      	movs	r3, #1
 8004ecc:	2121      	movs	r1, #33	@ 0x21
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff fcce 	bl	8004870 <lis2dw12_read_reg>
 8004ed4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10f      	bne.n	8004efc <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	7a3b      	ldrb	r3, [r7, #8]
 8004ee6:	f362 0382 	bfi	r3, r2, #2, #1
 8004eea:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004eec:	f107 0208 	add.w	r2, r7, #8
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	2121      	movs	r1, #33	@ 0x21
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff fcd3 	bl	80048a0 <lis2dw12_write_reg>
 8004efa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004efc:	68fb      	ldr	r3, [r7, #12]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b086      	sub	sp, #24
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8004f10:	f107 0210 	add.w	r2, r7, #16
 8004f14:	2301      	movs	r3, #1
 8004f16:	2124      	movs	r1, #36	@ 0x24
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff fca9 	bl	8004870 <lis2dw12_read_reg>
 8004f1e:	6178      	str	r0, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d107      	bne.n	8004f36 <lis2dw12_pin_int1_route_set+0x30>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8004f26:	f107 020c 	add.w	r2, r7, #12
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	213f      	movs	r1, #63	@ 0x3f
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff fc9e 	bl	8004870 <lis2dw12_read_reg>
 8004f34:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d13e      	bne.n	8004fba <lis2dw12_pin_int1_route_set+0xb4>
  {
    if ((val->int1_tap |
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004f44:	b2da      	uxtb	r2, r3
         val->int1_ff |
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004f4e:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8004f50:	4313      	orrs	r3, r2
 8004f52:	b2da      	uxtb	r2, r3
         val->int1_wu |
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004f5c:	b2db      	uxtb	r3, r3
         val->int1_ff |
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004f6a:	b2db      	uxtb	r3, r3
         val->int1_wu |
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	b2da      	uxtb	r2, r3
         val->int1_6d |
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004f78:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8004f7e:	7c3b      	ldrb	r3, [r7, #16]
 8004f80:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004f84:	b2db      	uxtb	r3, r3
         val->int1_6d |
 8004f86:	4313      	orrs	r3, r2
 8004f88:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 8004f8a:	7c3b      	ldrb	r3, [r7, #16]
 8004f8c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004f90:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8004f92:	4313      	orrs	r3, r2
 8004f94:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d004      	beq.n	8004fa4 <lis2dw12_pin_int1_route_set+0x9e>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 8004f9a:	7b3b      	ldrb	r3, [r7, #12]
 8004f9c:	f043 0320 	orr.w	r3, r3, #32
 8004fa0:	733b      	strb	r3, [r7, #12]
 8004fa2:	e003      	b.n	8004fac <lis2dw12_pin_int1_route_set+0xa6>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 8004fa4:	7b3b      	ldrb	r3, [r7, #12]
 8004fa6:	f36f 1345 	bfc	r3, #5, #1
 8004faa:	733b      	strb	r3, [r7, #12]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8004fac:	2301      	movs	r3, #1
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	2123      	movs	r1, #35	@ 0x23
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff fc74 	bl	80048a0 <lis2dw12_write_reg>
 8004fb8:	6178      	str	r0, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d107      	bne.n	8004fd0 <lis2dw12_pin_int1_route_set+0xca>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8004fc0:	f107 020c 	add.w	r2, r7, #12
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	213f      	movs	r1, #63	@ 0x3f
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff fc69 	bl	80048a0 <lis2dw12_write_reg>
 8004fce:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004fd0:	697b      	ldr	r3, [r7, #20]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	2123      	movs	r1, #35	@ 0x23
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff fc40 	bl	8004870 <lis2dw12_read_reg>
 8004ff0:	60f8      	str	r0, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <lis2dw12_6d_threshold_set>:
  * @param  val      change the values of 6d_ths in reg TAP_THS_X
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_6d_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
  lis2dw12_tap_ths_x_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_TAP_THS_X, (uint8_t *) &reg, 1);
 8005008:	f107 0208 	add.w	r2, r7, #8
 800500c:	2301      	movs	r3, #1
 800500e:	2130      	movs	r1, #48	@ 0x30
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff fc2d 	bl	8004870 <lis2dw12_read_reg>
 8005016:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10f      	bne.n	800503e <lis2dw12_6d_threshold_set+0x42>
  {
    reg._6d_ths = val;
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	b2da      	uxtb	r2, r3
 8005026:	7a3b      	ldrb	r3, [r7, #8]
 8005028:	f362 1346 	bfi	r3, r2, #5, #2
 800502c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_TAP_THS_X, (uint8_t *) &reg, 1);
 800502e:	f107 0208 	add.w	r2, r7, #8
 8005032:	2301      	movs	r3, #1
 8005034:	2130      	movs	r1, #48	@ 0x30
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fc32 	bl	80048a0 <lis2dw12_write_reg>
 800503c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800503e:	68fb      	ldr	r3, [r7, #12]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	460b      	mov	r3, r1
 8005052:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8005054:	f107 0208 	add.w	r2, r7, #8
 8005058:	2301      	movs	r3, #1
 800505a:	212e      	movs	r1, #46	@ 0x2e
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff fc07 	bl	8004870 <lis2dw12_read_reg>
 8005062:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10f      	bne.n	800508a <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	b2da      	uxtb	r2, r3
 8005072:	7a3b      	ldrb	r3, [r7, #8]
 8005074:	f362 1347 	bfi	r3, r2, #5, #3
 8005078:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 800507a:	f107 0208 	add.w	r2, r7, #8
 800507e:	2301      	movs	r3, #1
 8005080:	212e      	movs	r1, #46	@ 0x2e
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fc0c 	bl	80048a0 <lis2dw12_write_reg>
 8005088:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800508a:	68fb      	ldr	r3, [r7, #12]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d103      	bne.n	80050b0 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80050a8:	f04f 33ff 	mov.w	r3, #4294967295
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	e067      	b.n	8005180 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	7b1a      	ldrb	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	699a      	ldr	r2, [r3, #24]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a28      	ldr	r2, [pc, #160]	@ (800518c <LIS2MDL_RegisterBusIO+0xf8>)
 80050ec:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a27      	ldr	r2, [pc, #156]	@ (8005190 <LIS2MDL_RegisterBusIO+0xfc>)
 80050f2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	69da      	ldr	r2, [r3, #28]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 800510a:	f04f 33ff 	mov.w	r3, #4294967295
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	e036      	b.n	8005180 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4798      	blx	r3
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800511e:	f04f 33ff 	mov.w	r3, #4294967295
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e02c      	b.n	8005180 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d028      	beq.n	8005180 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005134:	2b00      	cmp	r3, #0
 8005136:	d123      	bne.n	8005180 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d10d      	bne.n	800515c <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8005140:	2334      	movs	r3, #52	@ 0x34
 8005142:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8005144:	7afb      	ldrb	r3, [r7, #11]
 8005146:	461a      	mov	r2, r3
 8005148:	2162      	movs	r1, #98	@ 0x62
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fb16 	bl	800577c <LIS2MDL_Write_Reg>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d014      	beq.n	8005180 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8005156:	f04f 33ff 	mov.w	r3, #4294967295
 800515a:	e012      	b.n	8005182 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d101      	bne.n	8005168 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	e00c      	b.n	8005182 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3320      	adds	r3, #32
 800516c:	2101      	movs	r1, #1
 800516e:	4618      	mov	r0, r3
 8005170:	f000 ff67 	bl	8006042 <lis2mdl_i2c_interface_set>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800517a:	f04f 33ff 	mov.w	r3, #4294967295
 800517e:	e000      	b.n	8005182 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8005180:	68fb      	ldr	r3, [r7, #12]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	080057d3 	.word	0x080057d3
 8005190:	08005855 	.word	0x08005855

08005194 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d144      	bne.n	800522e <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80051a4:	f107 0208 	add.w	r2, r7, #8
 80051a8:	2301      	movs	r3, #1
 80051aa:	2162      	movs	r1, #98	@ 0x62
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fb92 	bl	80058d6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80051b8:	f04f 33ff 	mov.w	r3, #4294967295
 80051bc:	e06c      	b.n	8005298 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80051be:	f107 020c 	add.w	r2, r7, #12
 80051c2:	2301      	movs	r3, #1
 80051c4:	2160      	movs	r1, #96	@ 0x60
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fb85 	bl	80058d6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80051d2:	f04f 33ff 	mov.w	r3, #4294967295
 80051d6:	e05f      	b.n	8005298 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80051d8:	7a3b      	ldrb	r3, [r7, #8]
 80051da:	f043 0310 	orr.w	r3, r3, #16
 80051de:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80051e0:	7a3b      	ldrb	r3, [r7, #8]
 80051e2:	f36f 0341 	bfc	r3, #1, #1
 80051e6:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80051e8:	7b3b      	ldrb	r3, [r7, #12]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f362 0301 	bfi	r3, r2, #0, #2
 80051f0:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80051f2:	7b3b      	ldrb	r3, [r7, #12]
 80051f4:	f043 030c 	orr.w	r3, r3, #12
 80051f8:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80051fa:	f107 0208 	add.w	r2, r7, #8
 80051fe:	2301      	movs	r3, #1
 8005200:	2162      	movs	r1, #98	@ 0x62
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fca6 	bl	8005b54 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800520e:	f04f 33ff 	mov.w	r3, #4294967295
 8005212:	e041      	b.n	8005298 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005214:	f107 020c 	add.w	r2, r7, #12
 8005218:	2301      	movs	r3, #1
 800521a:	2160      	movs	r1, #96	@ 0x60
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fc99 	bl	8005b54 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d032      	beq.n	800528e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8005228:	f04f 33ff 	mov.w	r3, #4294967295
 800522c:	e034      	b.n	8005298 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3320      	adds	r3, #32
 8005232:	2101      	movs	r1, #1
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fe5f 	bl	8005ef8 <lis2mdl_block_data_update_set>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8005240:	f04f 33ff 	mov.w	r3, #4294967295
 8005244:	e028      	b.n	8005298 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3320      	adds	r3, #32
 800524a:	2102      	movs	r1, #2
 800524c:	4618      	mov	r0, r3
 800524e:	f000 fdcf 	bl	8005df0 <lis2mdl_operating_mode_set>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8005258:	f04f 33ff 	mov.w	r3, #4294967295
 800525c:	e01c      	b.n	8005298 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3320      	adds	r3, #32
 8005262:	2103      	movs	r1, #3
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fde9 	bl	8005e3c <lis2mdl_data_rate_set>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8005270:	f04f 33ff 	mov.w	r3, #4294967295
 8005274:	e010      	b.n	8005298 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3320      	adds	r3, #32
 800527a:	2100      	movs	r1, #0
 800527c:	4618      	mov	r0, r3
 800527e:	f000 feba 	bl	8005ff6 <lis2mdl_self_test_set>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8005288:	f04f 33ff 	mov.w	r3, #4294967295
 800528c:	e004      	b.n	8005298 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f8a5 	bl	80053f8 <LIS2MDL_MAG_Disable>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80052b4:	f04f 33ff 	mov.w	r3, #4294967295
 80052b8:	e004      	b.n	80052c4 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d10b      	bne.n	80052f6 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80052de:	2301      	movs	r3, #1
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	214f      	movs	r1, #79	@ 0x4f
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 faf6 	bl	80058d6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00e      	beq.n	800530e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80052f0:	f04f 33ff 	mov.w	r3, #4294967295
 80052f4:	e00c      	b.n	8005310 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3320      	adds	r3, #32
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fe69 	bl	8005fd4 <lis2mdl_device_id_get>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8005308:	f04f 33ff 	mov.w	r3, #4294967295
 800530c:	e000      	b.n	8005310 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2201      	movs	r2, #1
 8005332:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2200      	movs	r2, #0
 8005338:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2200      	movs	r2, #0
 800533e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2200      	movs	r2, #0
 8005344:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2232      	movs	r2, #50	@ 0x32
 800534a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	4a04      	ldr	r2, [pc, #16]	@ (8005370 <LIS2MDL_GetCapabilities+0x58>)
 8005360:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	42c80000 	.word	0x42c80000

08005374 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e032      	b.n	80053f0 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b03      	cmp	r3, #3
 8005390:	d11d      	bne.n	80053ce <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005392:	f107 020c 	add.w	r2, r7, #12
 8005396:	2301      	movs	r3, #1
 8005398:	2160      	movs	r1, #96	@ 0x60
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fa9b 	bl	80058d6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80053a6:	f04f 33ff 	mov.w	r3, #4294967295
 80053aa:	e021      	b.n	80053f0 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80053ac:	7b3b      	ldrb	r3, [r7, #12]
 80053ae:	f36f 0301 	bfc	r3, #0, #2
 80053b2:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80053b4:	f107 020c 	add.w	r2, r7, #12
 80053b8:	2301      	movs	r3, #1
 80053ba:	2160      	movs	r1, #96	@ 0x60
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fbc9 	bl	8005b54 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00e      	beq.n	80053e6 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295
 80053cc:	e010      	b.n	80053f0 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3320      	adds	r3, #32
 80053d2:	2100      	movs	r1, #0
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fd0b 	bl	8005df0 <lis2mdl_operating_mode_set>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80053e0:	f04f 33ff 	mov.w	r3, #4294967295
 80053e4:	e004      	b.n	80053f0 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	e033      	b.n	8005476 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2b03      	cmp	r3, #3
 8005414:	d11e      	bne.n	8005454 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005416:	f107 020c 	add.w	r2, r7, #12
 800541a:	2301      	movs	r3, #1
 800541c:	2160      	movs	r1, #96	@ 0x60
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fa59 	bl	80058d6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 800542a:	f04f 33ff 	mov.w	r3, #4294967295
 800542e:	e022      	b.n	8005476 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8005430:	7b3b      	ldrb	r3, [r7, #12]
 8005432:	2202      	movs	r2, #2
 8005434:	f362 0301 	bfi	r3, r2, #0, #2
 8005438:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800543a:	f107 020c 	add.w	r2, r7, #12
 800543e:	2301      	movs	r3, #1
 8005440:	2160      	movs	r1, #96	@ 0x60
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fb86 	bl	8005b54 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00e      	beq.n	800546c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800544e:	f04f 33ff 	mov.w	r3, #4294967295
 8005452:	e010      	b.n	8005476 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3320      	adds	r3, #32
 8005458:	2102      	movs	r1, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fcc8 	bl	8005df0 <lis2mdl_operating_mode_set>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8005466:	f04f 33ff 	mov.w	r3, #4294967295
 800546a:	e004      	b.n	8005476 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800548e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3320      	adds	r3, #32
 80054ae:	f107 020b 	add.w	r2, r7, #11
 80054b2:	4611      	mov	r1, r2
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 fce7 	bl	8005e88 <lis2mdl_data_rate_get>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80054c0:	f04f 33ff 	mov.w	r3, #4294967295
 80054c4:	e023      	b.n	800550e <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80054c6:	7afb      	ldrb	r3, [r7, #11]
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d81b      	bhi.n	8005504 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80054cc:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	080054e5 	.word	0x080054e5
 80054d8:	080054ed 	.word	0x080054ed
 80054dc:	080054f5 	.word	0x080054f5
 80054e0:	080054fd 	.word	0x080054fd
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005518 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80054e8:	601a      	str	r2, [r3, #0]
      break;
 80054ea:	e00f      	b.n	800550c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	4a0b      	ldr	r2, [pc, #44]	@ (800551c <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80054f0:	601a      	str	r2, [r3, #0]
      break;
 80054f2:	e00b      	b.n	800550c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005520 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80054f8:	601a      	str	r2, [r3, #0]
      break;
 80054fa:	e007      	b.n	800550c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	4a09      	ldr	r2, [pc, #36]	@ (8005524 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8005500:	601a      	str	r2, [r3, #0]
      break;
 8005502:	e003      	b.n	800550c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8005504:	f04f 33ff 	mov.w	r3, #4294967295
 8005508:	60fb      	str	r3, [r7, #12]
      break;
 800550a:	bf00      	nop
  }

  return ret;
 800550c:	68fb      	ldr	r3, [r7, #12]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	41200000 	.word	0x41200000
 800551c:	41a00000 	.word	0x41a00000
 8005520:	42480000 	.word	0x42480000
 8005524:	42c80000 	.word	0x42c80000

08005528 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8005532:	492a      	ldr	r1, [pc, #168]	@ (80055dc <LIS2MDL_MAG_SetOutputDataRate+0xb4>)
 8005534:	6838      	ldr	r0, [r7, #0]
 8005536:	f7fb fdbd 	bl	80010b4 <__aeabi_fcmple>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <LIS2MDL_MAG_SetOutputDataRate+0x1c>
 8005540:	2300      	movs	r3, #0
 8005542:	e012      	b.n	800556a <LIS2MDL_MAG_SetOutputDataRate+0x42>
 8005544:	4926      	ldr	r1, [pc, #152]	@ (80055e0 <LIS2MDL_MAG_SetOutputDataRate+0xb8>)
 8005546:	6838      	ldr	r0, [r7, #0]
 8005548:	f7fb fdb4 	bl	80010b4 <__aeabi_fcmple>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <LIS2MDL_MAG_SetOutputDataRate+0x2e>
 8005552:	2301      	movs	r3, #1
 8005554:	e009      	b.n	800556a <LIS2MDL_MAG_SetOutputDataRate+0x42>
 8005556:	4923      	ldr	r1, [pc, #140]	@ (80055e4 <LIS2MDL_MAG_SetOutputDataRate+0xbc>)
 8005558:	6838      	ldr	r0, [r7, #0]
 800555a:	f7fb fdab 	bl	80010b4 <__aeabi_fcmple>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <LIS2MDL_MAG_SetOutputDataRate+0x40>
 8005564:	2302      	movs	r3, #2
 8005566:	e000      	b.n	800556a <LIS2MDL_MAG_SetOutputDataRate+0x42>
 8005568:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 800556a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b03      	cmp	r3, #3
 8005572:	d121      	bne.n	80055b8 <LIS2MDL_MAG_SetOutputDataRate+0x90>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005574:	f107 020c 	add.w	r2, r7, #12
 8005578:	2301      	movs	r3, #1
 800557a:	2160      	movs	r1, #96	@ 0x60
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f9aa 	bl	80058d6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <LIS2MDL_MAG_SetOutputDataRate+0x66>
    {
      return LIS2MDL_ERROR;
 8005588:	f04f 33ff 	mov.w	r3, #4294967295
 800558c:	e022      	b.n	80055d4 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	b2da      	uxtb	r2, r3
 8005596:	7b3b      	ldrb	r3, [r7, #12]
 8005598:	f362 0383 	bfi	r3, r2, #2, #2
 800559c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800559e:	f107 020c 	add.w	r2, r7, #12
 80055a2:	2301      	movs	r3, #1
 80055a4:	2160      	movs	r1, #96	@ 0x60
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fad4 	bl	8005b54 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00f      	beq.n	80055d2 <LIS2MDL_MAG_SetOutputDataRate+0xaa>
    {
      return LIS2MDL_ERROR;
 80055b2:	f04f 33ff 	mov.w	r3, #4294967295
 80055b6:	e00d      	b.n	80055d4 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3320      	adds	r3, #32
 80055bc:	7bfa      	ldrb	r2, [r7, #15]
 80055be:	4611      	mov	r1, r2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fc3b 	bl	8005e3c <lis2mdl_data_rate_set>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <LIS2MDL_MAG_SetOutputDataRate+0xaa>
    {
      return LIS2MDL_ERROR;
 80055cc:	f04f 33ff 	mov.w	r3, #4294967295
 80055d0:	e000      	b.n	80055d4 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }
  }

  return LIS2MDL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	41200000 	.word	0x41200000
 80055e0:	41a00000 	.word	0x41a00000
 80055e4:	42480000 	.word	0x42480000

080055e8 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2232      	movs	r2, #50	@ 0x32
 80055f6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr

0800561a <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3320      	adds	r3, #32
 8005628:	f107 0208 	add.w	r2, r7, #8
 800562c:	4611      	mov	r1, r2
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fc88 	bl	8005f44 <lis2mdl_magnetic_raw_get>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 800563a:	f04f 33ff 	mov.w	r3, #4294967295
 800563e:	e00c      	b.n	800565a <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005640:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005648:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005650:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b088      	sub	sp, #32
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b03      	cmp	r3, #3
 8005672:	d134      	bne.n	80056de <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8005674:	f107 0218 	add.w	r2, r7, #24
 8005678:	2306      	movs	r3, #6
 800567a:	2168      	movs	r1, #104	@ 0x68
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f92a 	bl	80058d6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8005688:	f04f 33ff 	mov.w	r3, #4294967295
 800568c:	e072      	b.n	8005774 <LIS2MDL_MAG_GetAxes+0x112>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 800568e:	7e7b      	ldrb	r3, [r7, #25]
 8005690:	b21b      	sxth	r3, r3
 8005692:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8005694:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005698:	b29b      	uxth	r3, r3
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	b29b      	uxth	r3, r3
 800569e:	7e3a      	ldrb	r2, [r7, #24]
 80056a0:	4413      	add	r3, r2
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	b21b      	sxth	r3, r3
 80056a6:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80056a8:	7efb      	ldrb	r3, [r7, #27]
 80056aa:	b21b      	sxth	r3, r3
 80056ac:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80056ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	021b      	lsls	r3, r3, #8
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	7eba      	ldrb	r2, [r7, #26]
 80056ba:	4413      	add	r3, r2
 80056bc:	b29b      	uxth	r3, r3
 80056be:	b21b      	sxth	r3, r3
 80056c0:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80056c2:	7f7b      	ldrb	r3, [r7, #29]
 80056c4:	b21b      	sxth	r3, r3
 80056c6:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80056c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	7f3a      	ldrb	r2, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	b21b      	sxth	r3, r3
 80056da:	82bb      	strh	r3, [r7, #20]
 80056dc:	e00d      	b.n	80056fa <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3320      	adds	r3, #32
 80056e2:	f107 0210 	add.w	r2, r7, #16
 80056e6:	4611      	mov	r1, r2
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 fc2b 	bl	8005f44 <lis2mdl_magnetic_raw_get>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295
 80056f8:	e03c      	b.n	8005774 <LIS2MDL_MAG_GetAxes+0x112>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80056fa:	f107 030c 	add.w	r3, r7, #12
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff febc 	bl	800547e <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005706:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800570a:	4618      	mov	r0, r3
 800570c:	f7fb fad6 	bl	8000cbc <__aeabi_i2f>
 8005710:	4602      	mov	r2, r0
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4619      	mov	r1, r3
 8005716:	4610      	mov	r0, r2
 8005718:	f7fb fb24 	bl	8000d64 <__aeabi_fmul>
 800571c:	4603      	mov	r3, r0
 800571e:	4618      	mov	r0, r3
 8005720:	f7fb fce6 	bl	80010f0 <__aeabi_f2iz>
 8005724:	4602      	mov	r2, r0
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800572a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800572e:	4618      	mov	r0, r3
 8005730:	f7fb fac4 	bl	8000cbc <__aeabi_i2f>
 8005734:	4602      	mov	r2, r0
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f7fb fb12 	bl	8000d64 <__aeabi_fmul>
 8005740:	4603      	mov	r3, r0
 8005742:	4618      	mov	r0, r3
 8005744:	f7fb fcd4 	bl	80010f0 <__aeabi_f2iz>
 8005748:	4602      	mov	r2, r0
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800574e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005752:	4618      	mov	r0, r3
 8005754:	f7fb fab2 	bl	8000cbc <__aeabi_i2f>
 8005758:	4602      	mov	r2, r0
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4619      	mov	r1, r3
 800575e:	4610      	mov	r0, r2
 8005760:	f7fb fb00 	bl	8000d64 <__aeabi_fmul>
 8005764:	4603      	mov	r3, r0
 8005766:	4618      	mov	r0, r3
 8005768:	f7fb fcc2 	bl	80010f0 <__aeabi_f2iz>
 800576c:	4602      	mov	r2, r0
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3720      	adds	r7, #32
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	460b      	mov	r3, r1
 8005786:	70fb      	strb	r3, [r7, #3]
 8005788:	4613      	mov	r3, r2
 800578a:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2b03      	cmp	r3, #3
 8005792:	d10b      	bne.n	80057ac <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8005794:	1cba      	adds	r2, r7, #2
 8005796:	78f9      	ldrb	r1, [r7, #3]
 8005798:	2301      	movs	r3, #1
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9da 	bl	8005b54 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d010      	beq.n	80057c8 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80057a6:	f04f 33ff 	mov.w	r3, #4294967295
 80057aa:	e00e      	b.n	80057ca <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f103 0020 	add.w	r0, r3, #32
 80057b2:	1cba      	adds	r2, r7, #2
 80057b4:	78f9      	ldrb	r1, [r7, #3]
 80057b6:	2301      	movs	r3, #1
 80057b8:	f000 fb02 	bl	8005dc0 <lis2mdl_write_reg>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80057c2:	f04f 33ff 	mov.w	r3, #4294967295
 80057c6:	e000      	b.n	80057ca <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80057d2:	b590      	push	{r4, r7, lr}
 80057d4:	b087      	sub	sp, #28
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	461a      	mov	r2, r3
 80057de:	460b      	mov	r3, r1
 80057e0:	72fb      	strb	r3, [r7, #11]
 80057e2:	4613      	mov	r3, r2
 80057e4:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10e      	bne.n	8005810 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	695c      	ldr	r4, [r3, #20]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	7b1b      	ldrb	r3, [r3, #12]
 80057fa:	4618      	mov	r0, r3
 80057fc:	7afb      	ldrb	r3, [r7, #11]
 80057fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005802:	b2db      	uxtb	r3, r3
 8005804:	4619      	mov	r1, r3
 8005806:	893b      	ldrh	r3, [r7, #8]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	47a0      	blx	r4
 800580c:	4603      	mov	r3, r0
 800580e:	e01d      	b.n	800584c <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b03      	cmp	r3, #3
 8005816:	d10b      	bne.n	8005830 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	695c      	ldr	r4, [r3, #20]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	7b1b      	ldrb	r3, [r3, #12]
 8005820:	4618      	mov	r0, r3
 8005822:	7afb      	ldrb	r3, [r7, #11]
 8005824:	b299      	uxth	r1, r3
 8005826:	893b      	ldrh	r3, [r7, #8]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	47a0      	blx	r4
 800582c:	4603      	mov	r3, r0
 800582e:	e00d      	b.n	800584c <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	695c      	ldr	r4, [r3, #20]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	7b1b      	ldrb	r3, [r3, #12]
 8005838:	4618      	mov	r0, r3
 800583a:	7afb      	ldrb	r3, [r7, #11]
 800583c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005840:	b2db      	uxtb	r3, r3
 8005842:	4619      	mov	r1, r3
 8005844:	893b      	ldrh	r3, [r7, #8]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	47a0      	blx	r4
 800584a:	4603      	mov	r3, r0
  }
}
 800584c:	4618      	mov	r0, r3
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	bd90      	pop	{r4, r7, pc}

08005854 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	607a      	str	r2, [r7, #4]
 800585e:	461a      	mov	r2, r3
 8005860:	460b      	mov	r3, r1
 8005862:	72fb      	strb	r3, [r7, #11]
 8005864:	4613      	mov	r3, r2
 8005866:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10e      	bne.n	8005892 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	691c      	ldr	r4, [r3, #16]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	7b1b      	ldrb	r3, [r3, #12]
 800587c:	4618      	mov	r0, r3
 800587e:	7afb      	ldrb	r3, [r7, #11]
 8005880:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005884:	b2db      	uxtb	r3, r3
 8005886:	4619      	mov	r1, r3
 8005888:	893b      	ldrh	r3, [r7, #8]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	47a0      	blx	r4
 800588e:	4603      	mov	r3, r0
 8005890:	e01d      	b.n	80058ce <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b03      	cmp	r3, #3
 8005898:	d10b      	bne.n	80058b2 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	691c      	ldr	r4, [r3, #16]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	7b1b      	ldrb	r3, [r3, #12]
 80058a2:	4618      	mov	r0, r3
 80058a4:	7afb      	ldrb	r3, [r7, #11]
 80058a6:	b299      	uxth	r1, r3
 80058a8:	893b      	ldrh	r3, [r7, #8]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	47a0      	blx	r4
 80058ae:	4603      	mov	r3, r0
 80058b0:	e00d      	b.n	80058ce <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	691c      	ldr	r4, [r3, #16]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	7b1b      	ldrb	r3, [r3, #12]
 80058ba:	4618      	mov	r0, r3
 80058bc:	7afb      	ldrb	r3, [r7, #11]
 80058be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	4619      	mov	r1, r3
 80058c6:	893b      	ldrh	r3, [r7, #8]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	47a0      	blx	r4
 80058cc:	4603      	mov	r3, r0
  }
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd90      	pop	{r4, r7, pc}

080058d6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b08c      	sub	sp, #48	@ 0x30
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	461a      	mov	r2, r3
 80058e2:	460b      	mov	r3, r1
 80058e4:	72fb      	strb	r3, [r7, #11]
 80058e6:	4613      	mov	r3, r2
 80058e8:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80058ea:	2301      	movs	r3, #1
 80058ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80058f0:	2340      	movs	r3, #64	@ 0x40
 80058f2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 80058fc:	233d      	movs	r3, #61	@ 0x3d
 80058fe:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005900:	2315      	movs	r3, #21
 8005902:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8005906:	2316      	movs	r3, #22
 8005908:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 800590c:	2317      	movs	r3, #23
 800590e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8005912:	2314      	movs	r3, #20
 8005914:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005918:	2344      	movs	r3, #68	@ 0x44
 800591a:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 800591c:	2302      	movs	r3, #2
 800591e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8005922:	2339      	movs	r3, #57	@ 0x39
 8005924:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800592e:	2329      	movs	r3, #41	@ 0x29
 8005930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005934:	231e      	movs	r3, #30
 8005936:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8005940:	893b      	ldrh	r3, [r7, #8]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005946:	2310      	movs	r3, #16
 8005948:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800594c:	2300      	movs	r3, #0
 800594e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005952:	2340      	movs	r3, #64	@ 0x40
 8005954:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f103 0020 	add.w	r0, r3, #32
 800595e:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005962:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005966:	2301      	movs	r3, #1
 8005968:	f000 fa2a 	bl	8005dc0 <lis2mdl_write_reg>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8005972:	f04f 33ff 	mov.w	r3, #4294967295
 8005976:	e0e9      	b.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f103 0020 	add.w	r0, r3, #32
 800597e:	f107 021f 	add.w	r2, r7, #31
 8005982:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005986:	2301      	movs	r3, #1
 8005988:	f000 fa1a 	bl	8005dc0 <lis2mdl_write_reg>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8005992:	f04f 33ff 	mov.w	r3, #4294967295
 8005996:	e0d9      	b.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f103 0020 	add.w	r0, r3, #32
 800599e:	f107 020b 	add.w	r2, r7, #11
 80059a2:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80059a6:	2301      	movs	r3, #1
 80059a8:	f000 fa0a 	bl	8005dc0 <lis2mdl_write_reg>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 80059b2:	f04f 33ff 	mov.w	r3, #4294967295
 80059b6:	e0c9      	b.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f103 0020 	add.w	r0, r3, #32
 80059be:	f107 021d 	add.w	r2, r7, #29
 80059c2:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80059c6:	2301      	movs	r3, #1
 80059c8:	f000 f9fa 	bl	8005dc0 <lis2mdl_write_reg>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 80059d2:	f04f 33ff 	mov.w	r3, #4294967295
 80059d6:	e0b9      	b.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f103 0020 	add.w	r0, r3, #32
 80059de:	f107 021e 	add.w	r2, r7, #30
 80059e2:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 80059e6:	2301      	movs	r3, #1
 80059e8:	f000 f9ea 	bl	8005dc0 <lis2mdl_write_reg>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 80059f2:	f04f 33ff 	mov.w	r3, #4294967295
 80059f6:	e0a9      	b.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f103 0020 	add.w	r0, r3, #32
 80059fe:	f107 0220 	add.w	r2, r7, #32
 8005a02:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005a06:	2301      	movs	r3, #1
 8005a08:	f000 f9da 	bl	8005dc0 <lis2mdl_write_reg>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8005a12:	f04f 33ff 	mov.w	r3, #4294967295
 8005a16:	e099      	b.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f103 0020 	add.w	r0, r3, #32
 8005a1e:	f107 021c 	add.w	r2, r7, #28
 8005a22:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8005a26:	2301      	movs	r3, #1
 8005a28:	f000 f9b2 	bl	8005d90 <lis2mdl_read_reg>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8005a32:	f04f 33ff 	mov.w	r3, #4294967295
 8005a36:	e089      	b.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005a38:	7f3b      	ldrb	r3, [r7, #28]
 8005a3a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d102      	bne.n	8005a48 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005a42:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005a46:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f103 0020 	add.w	r0, r3, #32
 8005a4e:	f107 021c 	add.w	r2, r7, #28
 8005a52:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8005a56:	2301      	movs	r3, #1
 8005a58:	f000 f9b2 	bl	8005dc0 <lis2mdl_write_reg>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8005a62:	f04f 33ff 	mov.w	r3, #4294967295
 8005a66:	e071      	b.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f103 0020 	add.w	r0, r3, #32
 8005a6e:	f107 0214 	add.w	r2, r7, #20
 8005a72:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8005a76:	2306      	movs	r3, #6
 8005a78:	f000 f98a 	bl	8005d90 <lis2mdl_read_reg>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8005a82:	f04f 33ff 	mov.w	r3, #4294967295
 8005a86:	e061      	b.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f103 0020 	add.w	r0, r3, #32
 8005a8e:	f107 021b 	add.w	r2, r7, #27
 8005a92:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8005a96:	2301      	movs	r3, #1
 8005a98:	f000 f97a 	bl	8005d90 <lis2mdl_read_reg>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8005aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa6:	e051      	b.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8005aa8:	7efa      	ldrb	r2, [r7, #27]
 8005aaa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005aae:	4013      	ands	r3, r2
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d1e6      	bne.n	8005a88 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f103 0020 	add.w	r0, r3, #32
 8005ac0:	f107 021b 	add.w	r2, r7, #27
 8005ac4:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8005ac8:	2301      	movs	r3, #1
 8005aca:	f000 f961 	bl	8005d90 <lis2mdl_read_reg>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8005ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad8:	e038      	b.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8005ada:	7efa      	ldrb	r2, [r7, #27]
 8005adc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d1e6      	bne.n	8005aba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f103 0020 	add.w	r0, r3, #32
 8005af2:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005af6:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005afa:	2301      	movs	r3, #1
 8005afc:	f000 f960 	bl	8005dc0 <lis2mdl_write_reg>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8005b06:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0a:	e01f      	b.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f103 0020 	add.w	r0, r3, #32
 8005b12:	893b      	ldrh	r3, [r7, #8]
 8005b14:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	f000 f939 	bl	8005d90 <lis2mdl_read_reg>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8005b24:	f04f 33ff 	mov.w	r3, #4294967295
 8005b28:	e010      	b.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f103 0020 	add.w	r0, r3, #32
 8005b30:	f107 0220 	add.w	r2, r7, #32
 8005b34:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f000 f941 	bl	8005dc0 <lis2mdl_write_reg>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8005b44:	f04f 33ff 	mov.w	r3, #4294967295
 8005b48:	e000      	b.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3730      	adds	r7, #48	@ 0x30
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08c      	sub	sp, #48	@ 0x30
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	460b      	mov	r3, r1
 8005b62:	72fb      	strb	r3, [r7, #11]
 8005b64:	4613      	mov	r3, r2
 8005b66:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005b6e:	2340      	movs	r3, #64	@ 0x40
 8005b70:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8005b7a:	233c      	movs	r3, #60	@ 0x3c
 8005b7c:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005b7e:	2315      	movs	r3, #21
 8005b80:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8005b84:	2316      	movs	r3, #22
 8005b86:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8005b8a:	2317      	movs	r3, #23
 8005b8c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8005b94:	2314      	movs	r3, #20
 8005b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005b9a:	2344      	movs	r3, #68	@ 0x44
 8005b9c:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005b9e:	2339      	movs	r3, #57	@ 0x39
 8005ba0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8005ba4:	2380      	movs	r3, #128	@ 0x80
 8005ba6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005baa:	2329      	movs	r3, #41	@ 0x29
 8005bac:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005bb0:	231e      	movs	r3, #30
 8005bb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005bc8:	2340      	movs	r3, #64	@ 0x40
 8005bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005bce:	230e      	movs	r3, #14
 8005bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f103 0020 	add.w	r0, r3, #32
 8005bda:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005bde:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005be2:	2301      	movs	r3, #1
 8005be4:	f000 f8ec 	bl	8005dc0 <lis2mdl_write_reg>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf2:	e0c9      	b.n	8005d88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f103 0020 	add.w	r0, r3, #32
 8005bfa:	f107 021f 	add.w	r2, r7, #31
 8005bfe:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005c02:	2301      	movs	r3, #1
 8005c04:	f000 f8dc 	bl	8005dc0 <lis2mdl_write_reg>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8005c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c12:	e0b9      	b.n	8005d88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f103 0020 	add.w	r0, r3, #32
 8005c1a:	f107 020b 	add.w	r2, r7, #11
 8005c1e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8005c22:	2301      	movs	r3, #1
 8005c24:	f000 f8cc 	bl	8005dc0 <lis2mdl_write_reg>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c32:	e0a9      	b.n	8005d88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f103 0020 	add.w	r0, r3, #32
 8005c3a:	f107 021e 	add.w	r2, r7, #30
 8005c3e:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8005c42:	2301      	movs	r3, #1
 8005c44:	f000 f8bc 	bl	8005dc0 <lis2mdl_write_reg>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8005c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c52:	e099      	b.n	8005d88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f103 0020 	add.w	r0, r3, #32
 8005c5a:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8005c5e:	2301      	movs	r3, #1
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	f000 f8ad 	bl	8005dc0 <lis2mdl_write_reg>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8005c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c70:	e08a      	b.n	8005d88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f103 0020 	add.w	r0, r3, #32
 8005c78:	f107 021d 	add.w	r2, r7, #29
 8005c7c:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8005c80:	2301      	movs	r3, #1
 8005c82:	f000 f89d 	bl	8005dc0 <lis2mdl_write_reg>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8005c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c90:	e07a      	b.n	8005d88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f103 0020 	add.w	r0, r3, #32
 8005c98:	f107 0220 	add.w	r2, r7, #32
 8005c9c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	f000 f88d 	bl	8005dc0 <lis2mdl_write_reg>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005cac:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb0:	e06a      	b.n	8005d88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f103 0020 	add.w	r0, r3, #32
 8005cb8:	f107 021c 	add.w	r2, r7, #28
 8005cbc:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f000 f865 	bl	8005d90 <lis2mdl_read_reg>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd0:	e05a      	b.n	8005d88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005cd2:	7f3b      	ldrb	r3, [r7, #28]
 8005cd4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d102      	bne.n	8005ce2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ce0:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f103 0020 	add.w	r0, r3, #32
 8005ce8:	f107 021c 	add.w	r2, r7, #28
 8005cec:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f000 f865 	bl	8005dc0 <lis2mdl_write_reg>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8005cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8005d00:	e042      	b.n	8005d88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f103 0020 	add.w	r0, r3, #32
 8005d08:	f107 0214 	add.w	r2, r7, #20
 8005d0c:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8005d10:	2306      	movs	r3, #6
 8005d12:	f000 f83d 	bl	8005d90 <lis2mdl_read_reg>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8005d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d20:	e032      	b.n	8005d88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f103 0020 	add.w	r0, r3, #32
 8005d28:	f107 021b 	add.w	r2, r7, #27
 8005d2c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8005d30:	2301      	movs	r3, #1
 8005d32:	f000 f82d 	bl	8005d90 <lis2mdl_read_reg>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d40:	e022      	b.n	8005d88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8005d42:	7efa      	ldrb	r2, [r7, #27]
 8005d44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d48:	4013      	ands	r3, r2
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d1e6      	bne.n	8005d22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f103 0020 	add.w	r0, r3, #32
 8005d5a:	f107 021b 	add.w	r2, r7, #27
 8005d5e:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005d62:	2301      	movs	r3, #1
 8005d64:	f000 f814 	bl	8005d90 <lis2mdl_read_reg>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8005d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d72:	e009      	b.n	8005d88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8005d74:	7efa      	ldrb	r2, [r7, #27]
 8005d76:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d1e6      	bne.n	8005d54 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3730      	adds	r7, #48	@ 0x30
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	607a      	str	r2, [r7, #4]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	72fb      	strb	r3, [r7, #11]
 8005da0:	4613      	mov	r3, r2
 8005da2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	685c      	ldr	r4, [r3, #4]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	68d8      	ldr	r0, [r3, #12]
 8005dac:	893b      	ldrh	r3, [r7, #8]
 8005dae:	7af9      	ldrb	r1, [r7, #11]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	47a0      	blx	r4
 8005db4:	6178      	str	r0, [r7, #20]

  return ret;
 8005db6:	697b      	ldr	r3, [r7, #20]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	371c      	adds	r7, #28
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd90      	pop	{r4, r7, pc}

08005dc0 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	607a      	str	r2, [r7, #4]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	460b      	mov	r3, r1
 8005dce:	72fb      	strb	r3, [r7, #11]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681c      	ldr	r4, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68d8      	ldr	r0, [r3, #12]
 8005ddc:	893b      	ldrh	r3, [r7, #8]
 8005dde:	7af9      	ldrb	r1, [r7, #11]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	47a0      	blx	r4
 8005de4:	6178      	str	r0, [r7, #20]

  return ret;
 8005de6:	697b      	ldr	r3, [r7, #20]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd90      	pop	{r4, r7, pc}

08005df0 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005dfc:	f107 0208 	add.w	r2, r7, #8
 8005e00:	2301      	movs	r3, #1
 8005e02:	2160      	movs	r1, #96	@ 0x60
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff ffc3 	bl	8005d90 <lis2mdl_read_reg>
 8005e0a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10f      	bne.n	8005e32 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8005e12:	78fb      	ldrb	r3, [r7, #3]
 8005e14:	f003 0303 	and.w	r3, r3, #3
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	7a3b      	ldrb	r3, [r7, #8]
 8005e1c:	f362 0301 	bfi	r3, r2, #0, #2
 8005e20:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005e22:	f107 0208 	add.w	r2, r7, #8
 8005e26:	2301      	movs	r3, #1
 8005e28:	2160      	movs	r1, #96	@ 0x60
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff ffc8 	bl	8005dc0 <lis2mdl_write_reg>
 8005e30:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e32:	68fb      	ldr	r3, [r7, #12]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005e48:	f107 0208 	add.w	r2, r7, #8
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	2160      	movs	r1, #96	@ 0x60
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff ff9d 	bl	8005d90 <lis2mdl_read_reg>
 8005e56:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10f      	bne.n	8005e7e <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	7a3b      	ldrb	r3, [r7, #8]
 8005e68:	f362 0383 	bfi	r3, r2, #2, #2
 8005e6c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005e6e:	f107 0208 	add.w	r2, r7, #8
 8005e72:	2301      	movs	r3, #1
 8005e74:	2160      	movs	r1, #96	@ 0x60
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff ffa2 	bl	8005dc0 <lis2mdl_write_reg>
 8005e7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005e92:	f107 0208 	add.w	r2, r7, #8
 8005e96:	2301      	movs	r3, #1
 8005e98:	2160      	movs	r1, #96	@ 0x60
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff ff78 	bl	8005d90 <lis2mdl_read_reg>
 8005ea0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8005ea2:	7a3b      	ldrb	r3, [r7, #8]
 8005ea4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d81a      	bhi.n	8005ee4 <lis2mdl_data_rate_get+0x5c>
 8005eae:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb4 <lis2mdl_data_rate_get+0x2c>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005ec5 	.word	0x08005ec5
 8005eb8:	08005ecd 	.word	0x08005ecd
 8005ebc:	08005ed5 	.word	0x08005ed5
 8005ec0:	08005edd 	.word	0x08005edd
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	701a      	strb	r2, [r3, #0]
      break;
 8005eca:	e00f      	b.n	8005eec <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	701a      	strb	r2, [r3, #0]
      break;
 8005ed2:	e00b      	b.n	8005eec <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	701a      	strb	r2, [r3, #0]
      break;
 8005eda:	e007      	b.n	8005eec <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2203      	movs	r2, #3
 8005ee0:	701a      	strb	r2, [r3, #0]
      break;
 8005ee2:	e003      	b.n	8005eec <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
      break;
 8005eea:	bf00      	nop
  }

  return ret;
 8005eec:	68fb      	ldr	r3, [r7, #12]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop

08005ef8 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f04:	f107 0208 	add.w	r2, r7, #8
 8005f08:	2301      	movs	r3, #1
 8005f0a:	2162      	movs	r1, #98	@ 0x62
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7ff ff3f 	bl	8005d90 <lis2mdl_read_reg>
 8005f12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10f      	bne.n	8005f3a <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	7a3b      	ldrb	r3, [r7, #8]
 8005f24:	f362 1304 	bfi	r3, r2, #4, #1
 8005f28:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f2a:	f107 0208 	add.w	r2, r7, #8
 8005f2e:	2301      	movs	r3, #1
 8005f30:	2162      	movs	r1, #98	@ 0x62
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff ff44 	bl	8005dc0 <lis2mdl_write_reg>
 8005f38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005f4e:	f107 020c 	add.w	r2, r7, #12
 8005f52:	2306      	movs	r3, #6
 8005f54:	2168      	movs	r1, #104	@ 0x68
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff ff1a 	bl	8005d90 <lis2mdl_read_reg>
 8005f5c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005f5e:	7b7b      	ldrb	r3, [r7, #13]
 8005f60:	b21a      	sxth	r2, r3
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	7b3a      	ldrb	r2, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	b21a      	sxth	r2, r3
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005f7e:	7bfa      	ldrb	r2, [r7, #15]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	3302      	adds	r3, #2
 8005f84:	b212      	sxth	r2, r2
 8005f86:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	3302      	adds	r3, #2
 8005f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	021b      	lsls	r3, r3, #8
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	7bba      	ldrb	r2, [r7, #14]
 8005f98:	4413      	add	r3, r2
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	3302      	adds	r3, #2
 8005fa0:	b212      	sxth	r2, r2
 8005fa2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005fa4:	7c7a      	ldrb	r2, [r7, #17]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	b212      	sxth	r2, r2
 8005fac:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	7c3a      	ldrb	r2, [r7, #16]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	b212      	sxth	r2, r2
 8005fc8:	801a      	strh	r2, [r3, #0]

  return ret;
 8005fca:	697b      	ldr	r3, [r7, #20]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005fde:	2301      	movs	r3, #1
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	214f      	movs	r1, #79	@ 0x4f
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff fed3 	bl	8005d90 <lis2mdl_read_reg>
 8005fea:	60f8      	str	r0, [r7, #12]

  return ret;
 8005fec:	68fb      	ldr	r3, [r7, #12]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	460b      	mov	r3, r1
 8006000:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8006002:	f107 0208 	add.w	r2, r7, #8
 8006006:	2301      	movs	r3, #1
 8006008:	2162      	movs	r1, #98	@ 0x62
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff fec0 	bl	8005d90 <lis2mdl_read_reg>
 8006010:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10f      	bne.n	8006038 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	b2da      	uxtb	r2, r3
 8006020:	7a3b      	ldrb	r3, [r7, #8]
 8006022:	f362 0341 	bfi	r3, r2, #1, #1
 8006026:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8006028:	f107 0208 	add.w	r2, r7, #8
 800602c:	2301      	movs	r3, #1
 800602e:	2162      	movs	r1, #98	@ 0x62
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff fec5 	bl	8005dc0 <lis2mdl_write_reg>
 8006036:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006038:	68fb      	ldr	r3, [r7, #12]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	460b      	mov	r3, r1
 800604c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800604e:	f107 0208 	add.w	r2, r7, #8
 8006052:	2301      	movs	r3, #1
 8006054:	2162      	movs	r1, #98	@ 0x62
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff fe9a 	bl	8005d90 <lis2mdl_read_reg>
 800605c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10f      	bne.n	8006084 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	b2da      	uxtb	r2, r3
 800606c:	7a3b      	ldrb	r3, [r7, #8]
 800606e:	f362 1345 	bfi	r3, r2, #5, #1
 8006072:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8006074:	f107 0208 	add.w	r2, r7, #8
 8006078:	2301      	movs	r3, #1
 800607a:	2162      	movs	r1, #98	@ 0x62
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff fe9f 	bl	8005dc0 <lis2mdl_write_reg>
 8006082:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006084:	68fb      	ldr	r3, [r7, #12]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d103      	bne.n	80060ac <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 80060a4:	f04f 33ff 	mov.w	r3, #4294967295
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	e051      	b.n	8006150 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	7b1a      	ldrb	r2, [r3, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	695a      	ldr	r2, [r3, #20]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	699a      	ldr	r2, [r3, #24]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1d      	ldr	r2, [pc, #116]	@ (800615c <LPS22HH_RegisterBusIO+0xcc>)
 80060e8:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006160 <LPS22HH_RegisterBusIO+0xd0>)
 80060ee:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	69da      	ldr	r2, [r3, #28]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d103      	bne.n	800610e <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8006106:	f04f 33ff 	mov.w	r3, #4294967295
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	e020      	b.n	8006150 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4798      	blx	r3
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 800611a:	f04f 33ff 	mov.w	r3, #4294967295
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	e016      	b.n	8006150 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d112      	bne.n	8006150 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10d      	bne.n	8006150 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8006134:	2301      	movs	r3, #1
 8006136:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8006138:	7afb      	ldrb	r3, [r7, #11]
 800613a:	461a      	mov	r2, r3
 800613c:	2110      	movs	r1, #16
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f9db 	bl	80064fa <LPS22HH_Write_Reg>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 800614a:	f04f 33ff 	mov.w	r3, #4294967295
 800614e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006150:	68fb      	ldr	r3, [r7, #12]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	08006807 	.word	0x08006807
 8006160:	0800683d 	.word	0x0800683d

08006164 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006172:	2b00      	cmp	r3, #0
 8006174:	d108      	bne.n	8006188 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 faf8 	bl	800676c <LPS22HH_Initialize>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8006182:	f04f 33ff 	mov.w	r3, #4294967295
 8006186:	e004      	b.n	8006192 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d111      	bne.n	80061d0 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f87d 	bl	80062ac <LPS22HH_PRESS_Disable>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 80061b8:	f04f 33ff 	mov.w	r3, #4294967295
 80061bc:	e00d      	b.n	80061da <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f919 	bl	80063f6 <LPS22HH_TEMP_Disable>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 80061ca:	f04f 33ff 	mov.w	r3, #4294967295
 80061ce:	e004      	b.n	80061da <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3320      	adds	r3, #32
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fcfd 	bl	8006bf2 <lps22hh_device_id_get>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 80061fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006202:	e000      	b.n	8006206 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2200      	movs	r2, #0
 800621e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2201      	movs	r2, #1
 8006224:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2201      	movs	r2, #1
 800622a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2200      	movs	r2, #0
 8006230:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2200      	movs	r2, #0
 8006236:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	f04f 0200 	mov.w	r2, #0
 800623e:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	4a07      	ldr	r2, [pc, #28]	@ (8006260 <LPS22HH_GetCapabilities+0x50>)
 8006244:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	4a05      	ldr	r2, [pc, #20]	@ (8006260 <LPS22HH_GetCapabilities+0x50>)
 800624a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr
 8006260:	43480000 	.word	0x43480000

08006264 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006272:	2b01      	cmp	r3, #1
 8006274:	d101      	bne.n	800627a <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	e014      	b.n	80062a4 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f103 0220 	add.w	r2, r3, #32
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006286:	4619      	mov	r1, r3
 8006288:	4610      	mov	r0, r2
 800628a:	f000 fb71 	bl	8006970 <lps22hh_data_rate_set>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8006294:	f04f 33ff 	mov.w	r3, #4294967295
 8006298:	e004      	b.n	80062a4 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	e024      	b.n	800630c <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d11a      	bne.n	8006302 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f103 0220 	add.w	r2, r3, #32
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3333      	adds	r3, #51	@ 0x33
 80062d6:	4619      	mov	r1, r3
 80062d8:	4610      	mov	r0, r2
 80062da:	f000 fb97 	bl	8006a0c <lps22hh_data_rate_get>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80062e4:	f04f 33ff 	mov.w	r3, #4294967295
 80062e8:	e010      	b.n	800630c <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3320      	adds	r3, #32
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fb3d 	bl	8006970 <lps22hh_data_rate_set>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80062fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006300:	e004      	b.n	800630c <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f905 	bl	8006530 <LPS22HH_GetOutputDataRate>
 8006326:	4603      	mov	r3, r0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006340:	2b01      	cmp	r3, #1
 8006342:	d105      	bne.n	8006350 <LPS22HH_PRESS_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f956 	bl	80065f8 <LPS22HH_SetOutputDataRate_When_Enabled>
 800634c:	4603      	mov	r3, r0
 800634e:	e004      	b.n	800635a <LPS22HH_PRESS_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f9ba 	bl	80066cc <LPS22HH_SetOutputDataRate_When_Disabled>
 8006358:	4603      	mov	r3, r0
  }
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800636c:	f107 030c 	add.w	r3, r7, #12
 8006370:	2204      	movs	r2, #4
 8006372:	2100      	movs	r1, #0
 8006374:	4618      	mov	r0, r3
 8006376:	f00b fee5 	bl	8012144 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3320      	adds	r3, #32
 800637e:	f107 020c 	add.w	r2, r7, #12
 8006382:	4611      	mov	r1, r2
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fbe9 	bl	8006b5c <lps22hh_pressure_raw_get>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8006390:	f04f 33ff 	mov.w	r3, #4294967295
 8006394:	e007      	b.n	80063a6 <LPS22HH_PRESS_GetPressure+0x44>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fa9a 	bl	80068d2 <lps22hh_from_lsb_to_hpa>
 800639e:	4602      	mov	r2, r0
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b082      	sub	sp, #8
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	e014      	b.n	80063ee <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f103 0220 	add.w	r2, r3, #32
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f000 facc 	bl	8006970 <lps22hh_data_rate_set>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80063de:	f04f 33ff 	mov.w	r3, #4294967295
 80063e2:	e004      	b.n	80063ee <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	e024      	b.n	8006456 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006412:	2b00      	cmp	r3, #0
 8006414:	d11a      	bne.n	800644c <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f103 0220 	add.w	r2, r3, #32
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3333      	adds	r3, #51	@ 0x33
 8006420:	4619      	mov	r1, r3
 8006422:	4610      	mov	r0, r2
 8006424:	f000 faf2 	bl	8006a0c <lps22hh_data_rate_get>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 800642e:	f04f 33ff 	mov.w	r3, #4294967295
 8006432:	e010      	b.n	8006456 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3320      	adds	r3, #32
 8006438:	2100      	movs	r1, #0
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fa98 	bl	8006970 <lps22hh_data_rate_set>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8006446:	f04f 33ff 	mov.w	r3, #4294967295
 800644a:	e004      	b.n	8006456 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b082      	sub	sp, #8
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f860 	bl	8006530 <LPS22HH_GetOutputDataRate>
 8006470:	4603      	mov	r3, r0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800648a:	2b01      	cmp	r3, #1
 800648c:	d105      	bne.n	800649a <LPS22HH_TEMP_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f8b1 	bl	80065f8 <LPS22HH_SetOutputDataRate_When_Enabled>
 8006496:	4603      	mov	r3, r0
 8006498:	e004      	b.n	80064a4 <LPS22HH_TEMP_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f915 	bl	80066cc <LPS22HH_SetOutputDataRate_When_Disabled>
 80064a2:	4603      	mov	r3, r0
  }
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80064b6:	f107 030c 	add.w	r3, r7, #12
 80064ba:	2202      	movs	r2, #2
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f00b fe40 	bl	8012144 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3320      	adds	r3, #32
 80064c8:	f107 020c 	add.w	r2, r7, #12
 80064cc:	4611      	mov	r1, r2
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fb6d 	bl	8006bae <lps22hh_temperature_raw_get>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 80064da:	f04f 33ff 	mov.w	r3, #4294967295
 80064de:	e008      	b.n	80064f2 <LPS22HH_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80064e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fa07 	bl	80068f8 <lps22hh_from_lsb_to_celsius>
 80064ea:	4602      	mov	r2, r0
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	460b      	mov	r3, r1
 8006504:	70fb      	strb	r3, [r7, #3]
 8006506:	4613      	mov	r3, r2
 8006508:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f103 0020 	add.w	r0, r3, #32
 8006510:	1cba      	adds	r2, r7, #2
 8006512:	78f9      	ldrb	r1, [r7, #3]
 8006514:	2301      	movs	r3, #1
 8006516:	f000 f9c4 	bl	80068a2 <lps22hh_write_reg>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8006520:	f04f 33ff 	mov.w	r3, #4294967295
 8006524:	e000      	b.n	8006528 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3320      	adds	r3, #32
 8006542:	f107 020b 	add.w	r2, r7, #11
 8006546:	4611      	mov	r1, r2
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fa5f 	bl	8006a0c <lps22hh_data_rate_get>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8006554:	f04f 33ff 	mov.w	r3, #4294967295
 8006558:	e03d      	b.n	80065d6 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 800655a:	7afb      	ldrb	r3, [r7, #11]
 800655c:	2b07      	cmp	r3, #7
 800655e:	d835      	bhi.n	80065cc <LPS22HH_GetOutputDataRate+0x9c>
 8006560:	a201      	add	r2, pc, #4	@ (adr r2, 8006568 <LPS22HH_GetOutputDataRate+0x38>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	08006589 	.word	0x08006589
 800656c:	08006593 	.word	0x08006593
 8006570:	0800659d 	.word	0x0800659d
 8006574:	080065a5 	.word	0x080065a5
 8006578:	080065ad 	.word	0x080065ad
 800657c:	080065b5 	.word	0x080065b5
 8006580:	080065bd 	.word	0x080065bd
 8006584:	080065c5 	.word	0x080065c5
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
      break;
 8006590:	e020      	b.n	80065d4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006598:	601a      	str	r2, [r3, #0]
      break;
 800659a:	e01b      	b.n	80065d4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	4a10      	ldr	r2, [pc, #64]	@ (80065e0 <LPS22HH_GetOutputDataRate+0xb0>)
 80065a0:	601a      	str	r2, [r3, #0]
      break;
 80065a2:	e017      	b.n	80065d4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	4a0f      	ldr	r2, [pc, #60]	@ (80065e4 <LPS22HH_GetOutputDataRate+0xb4>)
 80065a8:	601a      	str	r2, [r3, #0]
      break;
 80065aa:	e013      	b.n	80065d4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	4a0e      	ldr	r2, [pc, #56]	@ (80065e8 <LPS22HH_GetOutputDataRate+0xb8>)
 80065b0:	601a      	str	r2, [r3, #0]
      break;
 80065b2:	e00f      	b.n	80065d4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	4a0d      	ldr	r2, [pc, #52]	@ (80065ec <LPS22HH_GetOutputDataRate+0xbc>)
 80065b8:	601a      	str	r2, [r3, #0]
      break;
 80065ba:	e00b      	b.n	80065d4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	4a0c      	ldr	r2, [pc, #48]	@ (80065f0 <LPS22HH_GetOutputDataRate+0xc0>)
 80065c0:	601a      	str	r2, [r3, #0]
      break;
 80065c2:	e007      	b.n	80065d4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	4a0b      	ldr	r2, [pc, #44]	@ (80065f4 <LPS22HH_GetOutputDataRate+0xc4>)
 80065c8:	601a      	str	r2, [r3, #0]
      break;
 80065ca:	e003      	b.n	80065d4 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 80065cc:	f04f 33ff 	mov.w	r3, #4294967295
 80065d0:	60fb      	str	r3, [r7, #12]
      break;
 80065d2:	bf00      	nop
  }

  return ret;
 80065d4:	68fb      	ldr	r3, [r7, #12]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	41200000 	.word	0x41200000
 80065e4:	41c80000 	.word	0x41c80000
 80065e8:	42480000 	.word	0x42480000
 80065ec:	42960000 	.word	0x42960000
 80065f0:	42c80000 	.word	0x42c80000
 80065f4:	43480000 	.word	0x43480000

080065f8 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006602:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006606:	6838      	ldr	r0, [r7, #0]
 8006608:	f7fa fd54 	bl	80010b4 <__aeabi_fcmple>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <LPS22HH_SetOutputDataRate_When_Enabled+0x1e>
 8006612:	2301      	movs	r3, #1
 8006614:	e02d      	b.n	8006672 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006616:	4928      	ldr	r1, [pc, #160]	@ (80066b8 <LPS22HH_SetOutputDataRate_When_Enabled+0xc0>)
 8006618:	6838      	ldr	r0, [r7, #0]
 800661a:	f7fa fd4b 	bl	80010b4 <__aeabi_fcmple>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <LPS22HH_SetOutputDataRate_When_Enabled+0x30>
 8006624:	2302      	movs	r3, #2
 8006626:	e024      	b.n	8006672 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006628:	4924      	ldr	r1, [pc, #144]	@ (80066bc <LPS22HH_SetOutputDataRate_When_Enabled+0xc4>)
 800662a:	6838      	ldr	r0, [r7, #0]
 800662c:	f7fa fd42 	bl	80010b4 <__aeabi_fcmple>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <LPS22HH_SetOutputDataRate_When_Enabled+0x42>
 8006636:	2303      	movs	r3, #3
 8006638:	e01b      	b.n	8006672 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800663a:	4921      	ldr	r1, [pc, #132]	@ (80066c0 <LPS22HH_SetOutputDataRate_When_Enabled+0xc8>)
 800663c:	6838      	ldr	r0, [r7, #0]
 800663e:	f7fa fd39 	bl	80010b4 <__aeabi_fcmple>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <LPS22HH_SetOutputDataRate_When_Enabled+0x54>
 8006648:	2304      	movs	r3, #4
 800664a:	e012      	b.n	8006672 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800664c:	491d      	ldr	r1, [pc, #116]	@ (80066c4 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>)
 800664e:	6838      	ldr	r0, [r7, #0]
 8006650:	f7fa fd30 	bl	80010b4 <__aeabi_fcmple>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <LPS22HH_SetOutputDataRate_When_Enabled+0x66>
 800665a:	2305      	movs	r3, #5
 800665c:	e009      	b.n	8006672 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800665e:	491a      	ldr	r1, [pc, #104]	@ (80066c8 <LPS22HH_SetOutputDataRate_When_Enabled+0xd0>)
 8006660:	6838      	ldr	r0, [r7, #0]
 8006662:	f7fa fd27 	bl	80010b4 <__aeabi_fcmple>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <LPS22HH_SetOutputDataRate_When_Enabled+0x78>
 800666c:	2306      	movs	r3, #6
 800666e:	e000      	b.n	8006672 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006670:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8006672:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3320      	adds	r3, #32
 8006678:	7bfa      	ldrb	r2, [r7, #15]
 800667a:	4611      	mov	r1, r2
 800667c:	4618      	mov	r0, r3
 800667e:	f000 f977 	bl	8006970 <lps22hh_data_rate_set>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <LPS22HH_SetOutputDataRate_When_Enabled+0x96>
  {
    return LPS22HH_ERROR;
 8006688:	f04f 33ff 	mov.w	r3, #4294967295
 800668c:	e00f      	b.n	80066ae <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f103 0220 	add.w	r2, r3, #32
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3333      	adds	r3, #51	@ 0x33
 8006698:	4619      	mov	r1, r3
 800669a:	4610      	mov	r0, r2
 800669c:	f000 f9b6 	bl	8006a0c <lps22hh_data_rate_get>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <LPS22HH_SetOutputDataRate_When_Enabled+0xb4>
  {
    return LPS22HH_ERROR;
 80066a6:	f04f 33ff 	mov.w	r3, #4294967295
 80066aa:	e000      	b.n	80066ae <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  return LPS22HH_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	41200000 	.word	0x41200000
 80066bc:	41c80000 	.word	0x41c80000
 80066c0:	42480000 	.word	0x42480000
 80066c4:	42960000 	.word	0x42960000
 80066c8:	42c80000 	.word	0x42c80000

080066cc <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80066d6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80066da:	6838      	ldr	r0, [r7, #0]
 80066dc:	f7fa fcea 	bl	80010b4 <__aeabi_fcmple>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <LPS22HH_SetOutputDataRate_When_Disabled+0x1e>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e02d      	b.n	8006746 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80066ea:	491b      	ldr	r1, [pc, #108]	@ (8006758 <LPS22HH_SetOutputDataRate_When_Disabled+0x8c>)
 80066ec:	6838      	ldr	r0, [r7, #0]
 80066ee:	f7fa fce1 	bl	80010b4 <__aeabi_fcmple>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <LPS22HH_SetOutputDataRate_When_Disabled+0x30>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e024      	b.n	8006746 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80066fc:	4917      	ldr	r1, [pc, #92]	@ (800675c <LPS22HH_SetOutputDataRate_When_Disabled+0x90>)
 80066fe:	6838      	ldr	r0, [r7, #0]
 8006700:	f7fa fcd8 	bl	80010b4 <__aeabi_fcmple>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <LPS22HH_SetOutputDataRate_When_Disabled+0x42>
 800670a:	2303      	movs	r3, #3
 800670c:	e01b      	b.n	8006746 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800670e:	4914      	ldr	r1, [pc, #80]	@ (8006760 <LPS22HH_SetOutputDataRate_When_Disabled+0x94>)
 8006710:	6838      	ldr	r0, [r7, #0]
 8006712:	f7fa fccf 	bl	80010b4 <__aeabi_fcmple>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <LPS22HH_SetOutputDataRate_When_Disabled+0x54>
 800671c:	2304      	movs	r3, #4
 800671e:	e012      	b.n	8006746 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006720:	4910      	ldr	r1, [pc, #64]	@ (8006764 <LPS22HH_SetOutputDataRate_When_Disabled+0x98>)
 8006722:	6838      	ldr	r0, [r7, #0]
 8006724:	f7fa fcc6 	bl	80010b4 <__aeabi_fcmple>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <LPS22HH_SetOutputDataRate_When_Disabled+0x66>
 800672e:	2305      	movs	r3, #5
 8006730:	e009      	b.n	8006746 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006732:	490d      	ldr	r1, [pc, #52]	@ (8006768 <LPS22HH_SetOutputDataRate_When_Disabled+0x9c>)
 8006734:	6838      	ldr	r0, [r7, #0]
 8006736:	f7fa fcbd 	bl	80010b4 <__aeabi_fcmple>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <LPS22HH_SetOutputDataRate_When_Disabled+0x78>
 8006740:	2306      	movs	r3, #6
 8006742:	e000      	b.n	8006746 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006744:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	41200000 	.word	0x41200000
 800675c:	41c80000 	.word	0x41c80000
 8006760:	42480000 	.word	0x42480000
 8006764:	42960000 	.word	0x42960000
 8006768:	42c80000 	.word	0x42c80000

0800676c <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	2b03      	cmp	r3, #3
 800677a:	d00b      	beq.n	8006794 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3320      	adds	r3, #32
 8006780:	2111      	movs	r1, #17
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fa92 	bl	8006cac <lps22hh_i3c_interface_set>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 800678e:	f04f 33ff 	mov.w	r3, #4294967295
 8006792:	e034      	b.n	80067fe <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3320      	adds	r3, #32
 8006798:	2110      	movs	r1, #16
 800679a:	4618      	mov	r0, r3
 800679c:	f000 f8e8 	bl	8006970 <lps22hh_data_rate_set>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 80067a6:	f04f 33ff 	mov.w	r3, #4294967295
 80067aa:	e028      	b.n	80067fe <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3320      	adds	r3, #32
 80067b0:	2100      	movs	r1, #0
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fa54 	bl	8006c60 <lps22hh_lp_bandwidth_set>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 80067be:	f04f 33ff 	mov.w	r3, #4294967295
 80067c2:	e01c      	b.n	80067fe <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3320      	adds	r3, #32
 80067c8:	2101      	movs	r1, #1
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 f8aa 	bl	8006924 <lps22hh_block_data_update_set>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 80067d6:	f04f 33ff 	mov.w	r3, #4294967295
 80067da:	e010      	b.n	80067fe <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3320      	adds	r3, #32
 80067e0:	2101      	movs	r1, #1
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fa16 	bl	8006c14 <lps22hh_auto_increment_set>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 80067ee:	f04f 33ff 	mov.w	r3, #4294967295
 80067f2:	e004      	b.n	80067fe <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2203      	movs	r2, #3
 80067f8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22HH_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006806:	b590      	push	{r4, r7, lr}
 8006808:	b087      	sub	sp, #28
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	461a      	mov	r2, r3
 8006812:	460b      	mov	r3, r1
 8006814:	72fb      	strb	r3, [r7, #11]
 8006816:	4613      	mov	r3, r2
 8006818:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	695c      	ldr	r4, [r3, #20]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	7b1b      	ldrb	r3, [r3, #12]
 8006826:	4618      	mov	r0, r3
 8006828:	7afb      	ldrb	r3, [r7, #11]
 800682a:	b299      	uxth	r1, r3
 800682c:	893b      	ldrh	r3, [r7, #8]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	47a0      	blx	r4
 8006832:	4603      	mov	r3, r0
}
 8006834:	4618      	mov	r0, r3
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	bd90      	pop	{r4, r7, pc}

0800683c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800683c:	b590      	push	{r4, r7, lr}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	607a      	str	r2, [r7, #4]
 8006846:	461a      	mov	r2, r3
 8006848:	460b      	mov	r3, r1
 800684a:	72fb      	strb	r3, [r7, #11]
 800684c:	4613      	mov	r3, r2
 800684e:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	691c      	ldr	r4, [r3, #16]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	7b1b      	ldrb	r3, [r3, #12]
 800685c:	4618      	mov	r0, r3
 800685e:	7afb      	ldrb	r3, [r7, #11]
 8006860:	b299      	uxth	r1, r3
 8006862:	893b      	ldrh	r3, [r7, #8]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	47a0      	blx	r4
 8006868:	4603      	mov	r3, r0
}
 800686a:	4618      	mov	r0, r3
 800686c:	371c      	adds	r7, #28
 800686e:	46bd      	mov	sp, r7
 8006870:	bd90      	pop	{r4, r7, pc}

08006872 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8006872:	b590      	push	{r4, r7, lr}
 8006874:	b087      	sub	sp, #28
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	461a      	mov	r2, r3
 800687e:	460b      	mov	r3, r1
 8006880:	72fb      	strb	r3, [r7, #11]
 8006882:	4613      	mov	r3, r2
 8006884:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685c      	ldr	r4, [r3, #4]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	68d8      	ldr	r0, [r3, #12]
 800688e:	893b      	ldrh	r3, [r7, #8]
 8006890:	7af9      	ldrb	r1, [r7, #11]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	47a0      	blx	r4
 8006896:	6178      	str	r0, [r7, #20]

  return ret;
 8006898:	697b      	ldr	r3, [r7, #20]
}
 800689a:	4618      	mov	r0, r3
 800689c:	371c      	adds	r7, #28
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd90      	pop	{r4, r7, pc}

080068a2 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80068a2:	b590      	push	{r4, r7, lr}
 80068a4:	b087      	sub	sp, #28
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	461a      	mov	r2, r3
 80068ae:	460b      	mov	r3, r1
 80068b0:	72fb      	strb	r3, [r7, #11]
 80068b2:	4613      	mov	r3, r2
 80068b4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681c      	ldr	r4, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	68d8      	ldr	r0, [r3, #12]
 80068be:	893b      	ldrh	r3, [r7, #8]
 80068c0:	7af9      	ldrb	r1, [r7, #11]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	47a0      	blx	r4
 80068c6:	6178      	str	r0, [r7, #20]

  return ret;
 80068c8:	697b      	ldr	r3, [r7, #20]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd90      	pop	{r4, r7, pc}

080068d2 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fa f9ea 	bl	8000cb4 <__aeabi_ui2f>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fa faf0 	bl	8000ecc <__aeabi_fdiv>
 80068ec:	4603      	mov	r3, r0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8006902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006906:	4618      	mov	r0, r3
 8006908:	f7fa f9d8 	bl	8000cbc <__aeabi_i2f>
 800690c:	4603      	mov	r3, r0
 800690e:	4904      	ldr	r1, [pc, #16]	@ (8006920 <lps22hh_from_lsb_to_celsius+0x28>)
 8006910:	4618      	mov	r0, r3
 8006912:	f7fa fadb 	bl	8000ecc <__aeabi_fdiv>
 8006916:	4603      	mov	r3, r0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	42c80000 	.word	0x42c80000

08006924 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006930:	f107 0208 	add.w	r2, r7, #8
 8006934:	2301      	movs	r3, #1
 8006936:	2110      	movs	r1, #16
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7ff ff9a 	bl	8006872 <lps22hh_read_reg>
 800693e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10f      	bne.n	8006966 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	b2da      	uxtb	r2, r3
 800694e:	7a3b      	ldrb	r3, [r7, #8]
 8006950:	f362 0341 	bfi	r3, r2, #1, #1
 8006954:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006956:	f107 0208 	add.w	r2, r7, #8
 800695a:	2301      	movs	r3, #1
 800695c:	2110      	movs	r1, #16
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff ff9f 	bl	80068a2 <lps22hh_write_reg>
 8006964:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006966:	68fb      	ldr	r3, [r7, #12]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800697c:	f107 0210 	add.w	r2, r7, #16
 8006980:	2301      	movs	r3, #1
 8006982:	2110      	movs	r1, #16
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff ff74 	bl	8006872 <lps22hh_read_reg>
 800698a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d107      	bne.n	80069a2 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006992:	f107 020c 	add.w	r2, r7, #12
 8006996:	2301      	movs	r3, #1
 8006998:	2111      	movs	r1, #17
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7ff ff69 	bl	8006872 <lps22hh_read_reg>
 80069a0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10f      	bne.n	80069c8 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	7c3b      	ldrb	r3, [r7, #16]
 80069b2:	f362 1306 	bfi	r3, r2, #4, #3
 80069b6:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80069b8:	f107 0210 	add.w	r2, r7, #16
 80069bc:	2301      	movs	r3, #1
 80069be:	2110      	movs	r1, #16
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff ff6e 	bl	80068a2 <lps22hh_write_reg>
 80069c6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d119      	bne.n	8006a02 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80069ce:	78fb      	ldrb	r3, [r7, #3]
 80069d0:	091b      	lsrs	r3, r3, #4
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	7b3b      	ldrb	r3, [r7, #12]
 80069da:	f362 0341 	bfi	r3, r2, #1, #1
 80069de:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	08db      	lsrs	r3, r3, #3
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	7b3b      	ldrb	r3, [r7, #12]
 80069ec:	f362 0300 	bfi	r3, r2, #0, #1
 80069f0:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80069f2:	f107 020c 	add.w	r2, r7, #12
 80069f6:	2301      	movs	r3, #1
 80069f8:	2111      	movs	r1, #17
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff ff51 	bl	80068a2 <lps22hh_write_reg>
 8006a00:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006a02:	697b      	ldr	r3, [r7, #20]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006a16:	f107 0210 	add.w	r2, r7, #16
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	2110      	movs	r1, #16
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff ff27 	bl	8006872 <lps22hh_read_reg>
 8006a24:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d107      	bne.n	8006a3c <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006a2c:	f107 020c 	add.w	r2, r7, #12
 8006a30:	2301      	movs	r3, #1
 8006a32:	2111      	movs	r1, #17
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff ff1c 	bl	8006872 <lps22hh_read_reg>
 8006a3a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f040 8086 	bne.w	8006b50 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006a44:	f107 020c 	add.w	r2, r7, #12
 8006a48:	2301      	movs	r3, #1
 8006a4a:	2111      	movs	r1, #17
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff ff10 	bl	8006872 <lps22hh_read_reg>
 8006a52:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8006a54:	7b3b      	ldrb	r3, [r7, #12]
 8006a56:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	011a      	lsls	r2, r3, #4
 8006a5e:	7b3b      	ldrb	r3, [r7, #12]
 8006a60:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8006a6a:	7c3a      	ldrb	r2, [r7, #16]
 8006a6c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8006a70:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8006a72:	4413      	add	r3, r2
 8006a74:	2b15      	cmp	r3, #21
 8006a76:	d867      	bhi.n	8006b48 <lps22hh_data_rate_get+0x13c>
 8006a78:	a201      	add	r2, pc, #4	@ (adr r2, 8006a80 <lps22hh_data_rate_get+0x74>)
 8006a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7e:	bf00      	nop
 8006a80:	08006ad9 	.word	0x08006ad9
 8006a84:	08006ae9 	.word	0x08006ae9
 8006a88:	08006af1 	.word	0x08006af1
 8006a8c:	08006af9 	.word	0x08006af9
 8006a90:	08006b01 	.word	0x08006b01
 8006a94:	08006b09 	.word	0x08006b09
 8006a98:	08006b39 	.word	0x08006b39
 8006a9c:	08006b41 	.word	0x08006b41
 8006aa0:	08006ae1 	.word	0x08006ae1
 8006aa4:	08006b49 	.word	0x08006b49
 8006aa8:	08006b49 	.word	0x08006b49
 8006aac:	08006b49 	.word	0x08006b49
 8006ab0:	08006b49 	.word	0x08006b49
 8006ab4:	08006b49 	.word	0x08006b49
 8006ab8:	08006b49 	.word	0x08006b49
 8006abc:	08006b49 	.word	0x08006b49
 8006ac0:	08006b49 	.word	0x08006b49
 8006ac4:	08006b11 	.word	0x08006b11
 8006ac8:	08006b19 	.word	0x08006b19
 8006acc:	08006b21 	.word	0x08006b21
 8006ad0:	08006b29 	.word	0x08006b29
 8006ad4:	08006b31 	.word	0x08006b31
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2200      	movs	r2, #0
 8006adc:	701a      	strb	r2, [r3, #0]
        break;
 8006ade:	e037      	b.n	8006b50 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2208      	movs	r2, #8
 8006ae4:	701a      	strb	r2, [r3, #0]
        break;
 8006ae6:	e033      	b.n	8006b50 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2201      	movs	r2, #1
 8006aec:	701a      	strb	r2, [r3, #0]
        break;
 8006aee:	e02f      	b.n	8006b50 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2202      	movs	r2, #2
 8006af4:	701a      	strb	r2, [r3, #0]
        break;
 8006af6:	e02b      	b.n	8006b50 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2203      	movs	r2, #3
 8006afc:	701a      	strb	r2, [r3, #0]
        break;
 8006afe:	e027      	b.n	8006b50 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2204      	movs	r2, #4
 8006b04:	701a      	strb	r2, [r3, #0]
        break;
 8006b06:	e023      	b.n	8006b50 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2205      	movs	r2, #5
 8006b0c:	701a      	strb	r2, [r3, #0]
        break;
 8006b0e:	e01f      	b.n	8006b50 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2211      	movs	r2, #17
 8006b14:	701a      	strb	r2, [r3, #0]
        break;
 8006b16:	e01b      	b.n	8006b50 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2212      	movs	r2, #18
 8006b1c:	701a      	strb	r2, [r3, #0]
        break;
 8006b1e:	e017      	b.n	8006b50 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2213      	movs	r2, #19
 8006b24:	701a      	strb	r2, [r3, #0]
        break;
 8006b26:	e013      	b.n	8006b50 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2214      	movs	r2, #20
 8006b2c:	701a      	strb	r2, [r3, #0]
        break;
 8006b2e:	e00f      	b.n	8006b50 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2215      	movs	r2, #21
 8006b34:	701a      	strb	r2, [r3, #0]
        break;
 8006b36:	e00b      	b.n	8006b50 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2206      	movs	r2, #6
 8006b3c:	701a      	strb	r2, [r3, #0]
        break;
 8006b3e:	e007      	b.n	8006b50 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2207      	movs	r2, #7
 8006b44:	701a      	strb	r2, [r3, #0]
        break;
 8006b46:	e003      	b.n	8006b50 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	701a      	strb	r2, [r3, #0]
        break;
 8006b4e:	bf00      	nop
    }
  }

  return ret;
 8006b50:	697b      	ldr	r3, [r7, #20]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop

08006b5c <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8006b66:	f107 0208 	add.w	r2, r7, #8
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	2128      	movs	r1, #40	@ 0x28
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff fe7f 	bl	8006872 <lps22hh_read_reg>
 8006b74:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006b76:	7abb      	ldrb	r3, [r7, #10]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	021b      	lsls	r3, r3, #8
 8006b84:	7a7a      	ldrb	r2, [r7, #9]
 8006b86:	441a      	add	r2, r3
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	7a3a      	ldrb	r2, [r7, #8]
 8006b94:	441a      	add	r2, r3
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	021a      	lsls	r2, r3, #8
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	601a      	str	r2, [r3, #0]

  return ret;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006bb8:	f107 0208 	add.w	r2, r7, #8
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	212b      	movs	r1, #43	@ 0x2b
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff fe56 	bl	8006872 <lps22hh_read_reg>
 8006bc6:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006bc8:	7a7b      	ldrb	r3, [r7, #9]
 8006bca:	b21a      	sxth	r2, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	021b      	lsls	r3, r3, #8
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	7a3a      	ldrb	r2, [r7, #8]
 8006bde:	4413      	add	r3, r2
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	b21a      	sxth	r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	801a      	strh	r2, [r3, #0]

  return ret;
 8006be8:	68fb      	ldr	r3, [r7, #12]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	210f      	movs	r1, #15
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff fe35 	bl	8006872 <lps22hh_read_reg>
 8006c08:	60f8      	str	r0, [r7, #12]

  return ret;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006c20:	f107 0208 	add.w	r2, r7, #8
 8006c24:	2301      	movs	r3, #1
 8006c26:	2111      	movs	r1, #17
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fe22 	bl	8006872 <lps22hh_read_reg>
 8006c2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10f      	bne.n	8006c56 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	7a3b      	ldrb	r3, [r7, #8]
 8006c40:	f362 1304 	bfi	r3, r2, #4, #1
 8006c44:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006c46:	f107 0208 	add.w	r2, r7, #8
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	2111      	movs	r1, #17
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff fe27 	bl	80068a2 <lps22hh_write_reg>
 8006c54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006c56:	68fb      	ldr	r3, [r7, #12]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006c6c:	f107 0208 	add.w	r2, r7, #8
 8006c70:	2301      	movs	r3, #1
 8006c72:	2110      	movs	r1, #16
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff fdfc 	bl	8006872 <lps22hh_read_reg>
 8006c7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10f      	bne.n	8006ca2 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8006c82:	78fb      	ldrb	r3, [r7, #3]
 8006c84:	f003 0303 	and.w	r3, r3, #3
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	7a3b      	ldrb	r3, [r7, #8]
 8006c8c:	f362 0383 	bfi	r3, r2, #2, #2
 8006c90:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006c92:	f107 0208 	add.w	r2, r7, #8
 8006c96:	2301      	movs	r3, #1
 8006c98:	2110      	movs	r1, #16
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fe01 	bl	80068a2 <lps22hh_write_reg>
 8006ca0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006cb8:	f107 0208 	add.w	r2, r7, #8
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	210e      	movs	r1, #14
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff fdd6 	bl	8006872 <lps22hh_read_reg>
 8006cc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d118      	bne.n	8006d00 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8006cce:	78fb      	ldrb	r3, [r7, #3]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	7a3b      	ldrb	r3, [r7, #8]
 8006cd8:	f362 0341 	bfi	r3, r2, #1, #1
 8006cdc:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8006cde:	78fb      	ldrb	r3, [r7, #3]
 8006ce0:	091b      	lsrs	r3, r3, #4
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	7a3b      	ldrb	r3, [r7, #8]
 8006cea:	f362 13c7 	bfi	r3, r2, #7, #1
 8006cee:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006cf0:	f107 0208 	add.w	r2, r7, #8
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	210e      	movs	r1, #14
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff fdd2 	bl	80068a2 <lps22hh_write_reg>
 8006cfe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006d00:	68fb      	ldr	r3, [r7, #12]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d103      	bne.n	8006d28 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8006d20:	f04f 33ff 	mov.w	r3, #4294967295
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	e051      	b.n	8006dcc <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	7b1a      	ldrb	r2, [r3, #12]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	695a      	ldr	r2, [r3, #20]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	699a      	ldr	r2, [r3, #24]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd8 <LSM6DSO_RegisterBusIO+0xcc>)
 8006d64:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a1c      	ldr	r2, [pc, #112]	@ (8006ddc <LSM6DSO_RegisterBusIO+0xd0>)
 8006d6a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	69da      	ldr	r2, [r3, #28]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d103      	bne.n	8006d8a <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8006d82:	f04f 33ff 	mov.w	r3, #4294967295
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	e020      	b.n	8006dcc <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4798      	blx	r3
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8006d96:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	e016      	b.n	8006dcc <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d112      	bne.n	8006dcc <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10d      	bne.n	8006dcc <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006db0:	230c      	movs	r3, #12
 8006db2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8006db4:	7afb      	ldrb	r3, [r7, #11]
 8006db6:	461a      	mov	r2, r3
 8006db8:	2112      	movs	r1, #18
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 ff55 	bl	8007c6a <LSM6DSO_Write_Reg>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8006dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dca:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	08008181 	.word	0x08008181
 8006ddc:	080081b7 	.word	0x080081b7

08006de0 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d00b      	beq.n	8006e08 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3320      	adds	r3, #32
 8006df4:	2180      	movs	r1, #128	@ 0x80
 8006df6:	4618      	mov	r0, r3
 8006df8:	f001 feb6 	bl	8008b68 <lsm6dso_i3c_disable_set>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8006e02:	f04f 33ff 	mov.w	r3, #4294967295
 8006e06:	e060      	b.n	8006eca <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3320      	adds	r3, #32
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f001 fe84 	bl	8008b1c <lsm6dso_auto_increment_set>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8006e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1e:	e054      	b.n	8006eca <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3320      	adds	r3, #32
 8006e24:	2101      	movs	r1, #1
 8006e26:	4618      	mov	r0, r3
 8006e28:	f001 fd94 	bl	8008954 <lsm6dso_block_data_update_set>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 8006e32:	f04f 33ff 	mov.w	r3, #4294967295
 8006e36:	e048      	b.n	8006eca <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3320      	adds	r3, #32
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f001 ff00 	bl	8008c44 <lsm6dso_fifo_mode_set>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8006e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e4e:	e03c      	b.n	8006eca <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2204      	movs	r2, #4
 8006e54:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3320      	adds	r3, #32
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f001 fa52 	bl	8008308 <lsm6dso_xl_data_rate_set>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8006e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6e:	e02c      	b.n	8006eca <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3320      	adds	r3, #32
 8006e74:	2100      	movs	r1, #0
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 f9e8 	bl	800824c <lsm6dso_xl_full_scale_set>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8006e82:	f04f 33ff 	mov.w	r3, #4294967295
 8006e86:	e020      	b.n	8006eca <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2204      	movs	r2, #4
 8006e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3320      	adds	r3, #32
 8006e94:	2100      	movs	r1, #0
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 fc00 	bl	800869c <lsm6dso_gy_data_rate_set>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8006ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea6:	e010      	b.n	8006eca <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3320      	adds	r3, #32
 8006eac:	2106      	movs	r1, #6
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f001 fb8c 	bl	80085cc <lsm6dso_gy_full_scale_set>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8006eba:	f04f 33ff 	mov.w	r3, #4294967295
 8006ebe:	e004      	b.n	8006eca <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f888 	bl	8006ff0 <LSM6DSO_ACC_Disable>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8006ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eea:	e015      	b.n	8006f18 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fc28 	bl	8007742 <LSM6DSO_GYRO_Disable>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8006ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8006efc:	e00c      	b.n	8006f18 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3320      	adds	r3, #32
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 fde2 	bl	8008afa <lsm6dso_device_id_get>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8006f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f40:	e000      	b.n	8006f44 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2200      	movs	r2, #0
 8006f66:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006f74:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2210      	movs	r2, #16
 8006f7a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	4a07      	ldr	r2, [pc, #28]	@ (8006fa4 <LSM6DSO_GetCapabilities+0x58>)
 8006f86:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	4a06      	ldr	r2, [pc, #24]	@ (8006fa4 <LSM6DSO_GetCapabilities+0x58>)
 8006f8c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	45d02000 	.word	0x45d02000

08006fa8 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d101      	bne.n	8006fbe <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	e014      	b.n	8006fe8 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f103 0220 	add.w	r2, r3, #32
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f001 f99b 	bl	8008308 <lsm6dso_xl_data_rate_set>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fdc:	e004      	b.n	8006fe8 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	e01f      	b.n	8007046 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f103 0220 	add.w	r2, r3, #32
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3333      	adds	r3, #51	@ 0x33
 8007010:	4619      	mov	r1, r3
 8007012:	4610      	mov	r0, r2
 8007014:	f001 fa72 	bl	80084fc <lsm6dso_xl_data_rate_get>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800701e:	f04f 33ff 	mov.w	r3, #4294967295
 8007022:	e010      	b.n	8007046 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3320      	adds	r3, #32
 8007028:	2100      	movs	r1, #0
 800702a:	4618      	mov	r0, r3
 800702c:	f001 f96c 	bl	8008308 <lsm6dso_xl_data_rate_set>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8007036:	f04f 33ff 	mov.w	r3, #4294967295
 800703a:	e004      	b.n	8007046 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3320      	adds	r3, #32
 8007062:	f107 020b 	add.w	r2, r7, #11
 8007066:	4611      	mov	r1, r2
 8007068:	4618      	mov	r0, r3
 800706a:	f001 f915 	bl	8008298 <lsm6dso_xl_full_scale_get>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8007074:	f04f 33ff 	mov.w	r3, #4294967295
 8007078:	e023      	b.n	80070c2 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800707a:	7afb      	ldrb	r3, [r7, #11]
 800707c:	2b03      	cmp	r3, #3
 800707e:	d81b      	bhi.n	80070b8 <LSM6DSO_ACC_GetSensitivity+0x68>
 8007080:	a201      	add	r2, pc, #4	@ (adr r2, 8007088 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	08007099 	.word	0x08007099
 800708c:	080070b1 	.word	0x080070b1
 8007090:	080070a1 	.word	0x080070a1
 8007094:	080070a9 	.word	0x080070a9
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	4a0c      	ldr	r2, [pc, #48]	@ (80070cc <LSM6DSO_ACC_GetSensitivity+0x7c>)
 800709c:	601a      	str	r2, [r3, #0]
      break;
 800709e:	e00f      	b.n	80070c0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	4a0b      	ldr	r2, [pc, #44]	@ (80070d0 <LSM6DSO_ACC_GetSensitivity+0x80>)
 80070a4:	601a      	str	r2, [r3, #0]
      break;
 80070a6:	e00b      	b.n	80070c0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	4a0a      	ldr	r2, [pc, #40]	@ (80070d4 <LSM6DSO_ACC_GetSensitivity+0x84>)
 80070ac:	601a      	str	r2, [r3, #0]
      break;
 80070ae:	e007      	b.n	80070c0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	4a09      	ldr	r2, [pc, #36]	@ (80070d8 <LSM6DSO_ACC_GetSensitivity+0x88>)
 80070b4:	601a      	str	r2, [r3, #0]
      break;
 80070b6:	e003      	b.n	80070c0 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80070b8:	f04f 33ff 	mov.w	r3, #4294967295
 80070bc:	60fb      	str	r3, [r7, #12]
      break;
 80070be:	bf00      	nop
  }

  return ret;
 80070c0:	68fb      	ldr	r3, [r7, #12]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	3d79db23 	.word	0x3d79db23
 80070d0:	3df9db23 	.word	0x3df9db23
 80070d4:	3e79db23 	.word	0x3e79db23
 80070d8:	3ef9db23 	.word	0x3ef9db23

080070dc <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3320      	adds	r3, #32
 80070ee:	f107 020b 	add.w	r2, r7, #11
 80070f2:	4611      	mov	r1, r2
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 fa01 	bl	80084fc <lsm6dso_xl_data_rate_get>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8007100:	f04f 33ff 	mov.w	r3, #4294967295
 8007104:	e054      	b.n	80071b0 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8007106:	7afb      	ldrb	r3, [r7, #11]
 8007108:	2b0b      	cmp	r3, #11
 800710a:	d84c      	bhi.n	80071a6 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 800710c:	a201      	add	r2, pc, #4	@ (adr r2, 8007114 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007145 	.word	0x08007145
 8007118:	08007157 	.word	0x08007157
 800711c:	0800715f 	.word	0x0800715f
 8007120:	08007167 	.word	0x08007167
 8007124:	0800716f 	.word	0x0800716f
 8007128:	08007177 	.word	0x08007177
 800712c:	0800717f 	.word	0x0800717f
 8007130:	08007187 	.word	0x08007187
 8007134:	0800718f 	.word	0x0800718f
 8007138:	08007197 	.word	0x08007197
 800713c:	0800719f 	.word	0x0800719f
 8007140:	0800714f 	.word	0x0800714f
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	f04f 0200 	mov.w	r2, #0
 800714a:	601a      	str	r2, [r3, #0]
      break;
 800714c:	e02f      	b.n	80071ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	4a19      	ldr	r2, [pc, #100]	@ (80071b8 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8007152:	601a      	str	r2, [r3, #0]
      break;
 8007154:	e02b      	b.n	80071ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	4a18      	ldr	r2, [pc, #96]	@ (80071bc <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 800715a:	601a      	str	r2, [r3, #0]
      break;
 800715c:	e027      	b.n	80071ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	4a17      	ldr	r2, [pc, #92]	@ (80071c0 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8007162:	601a      	str	r2, [r3, #0]
      break;
 8007164:	e023      	b.n	80071ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	4a16      	ldr	r2, [pc, #88]	@ (80071c4 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 800716a:	601a      	str	r2, [r3, #0]
      break;
 800716c:	e01f      	b.n	80071ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	4a15      	ldr	r2, [pc, #84]	@ (80071c8 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8007172:	601a      	str	r2, [r3, #0]
      break;
 8007174:	e01b      	b.n	80071ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	4a14      	ldr	r2, [pc, #80]	@ (80071cc <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 800717a:	601a      	str	r2, [r3, #0]
      break;
 800717c:	e017      	b.n	80071ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	4a13      	ldr	r2, [pc, #76]	@ (80071d0 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8007182:	601a      	str	r2, [r3, #0]
      break;
 8007184:	e013      	b.n	80071ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	4a12      	ldr	r2, [pc, #72]	@ (80071d4 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 800718a:	601a      	str	r2, [r3, #0]
      break;
 800718c:	e00f      	b.n	80071ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	4a11      	ldr	r2, [pc, #68]	@ (80071d8 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8007192:	601a      	str	r2, [r3, #0]
      break;
 8007194:	e00b      	b.n	80071ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	4a10      	ldr	r2, [pc, #64]	@ (80071dc <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 800719a:	601a      	str	r2, [r3, #0]
      break;
 800719c:	e007      	b.n	80071ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	4a0f      	ldr	r2, [pc, #60]	@ (80071e0 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80071a2:	601a      	str	r2, [r3, #0]
      break;
 80071a4:	e003      	b.n	80071ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80071a6:	f04f 33ff 	mov.w	r3, #4294967295
 80071aa:	60fb      	str	r3, [r7, #12]
      break;
 80071ac:	bf00      	nop
  }

  return ret;
 80071ae:	68fb      	ldr	r3, [r7, #12]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	3fcccccd 	.word	0x3fcccccd
 80071bc:	41480000 	.word	0x41480000
 80071c0:	41d00000 	.word	0x41d00000
 80071c4:	42500000 	.word	0x42500000
 80071c8:	42d00000 	.word	0x42d00000
 80071cc:	43500000 	.word	0x43500000
 80071d0:	43d08000 	.word	0x43d08000
 80071d4:	44504000 	.word	0x44504000
 80071d8:	44d06000 	.word	0x44d06000
 80071dc:	45505000 	.word	0x45505000
 80071e0:	45d05800 	.word	0x45d05800

080071e4 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80071ee:	2200      	movs	r2, #0
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f806 	bl	8007204 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80071f8:	4603      	mov	r3, r0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08c      	sub	sp, #48	@ 0x30
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	4613      	mov	r3, r2
 8007210:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 800721a:	79fb      	ldrb	r3, [r7, #7]
 800721c:	2b02      	cmp	r3, #2
 800721e:	f000 80e6 	beq.w	80073ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ea>
 8007222:	2b02      	cmp	r3, #2
 8007224:	f300 815d 	bgt.w	80074e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2de>
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e>
 800722c:	2b01      	cmp	r3, #1
 800722e:	d072      	beq.n	8007316 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
 8007230:	e157      	b.n	80074e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2de>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f103 0020 	add.w	r0, r3, #32
 8007238:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800723c:	2301      	movs	r3, #1
 800723e:	2114      	movs	r1, #20
 8007240:	f000 ffd4 	bl	80081ec <lsm6dso_read_reg>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4c>
      {
        return LSM6DSO_ERROR;
 800724a:	f04f 33ff 	mov.w	r3, #4294967295
 800724e:	e164      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en != 0U)
 8007250:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007254:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d025      	beq.n	80072aa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa6>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007264:	2b01      	cmp	r3, #1
 8007266:	d10b      	bne.n	8007280 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3320      	adds	r3, #32
 800726c:	2100      	movs	r1, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f001 f84a 	bl	8008308 <lsm6dso_xl_data_rate_set>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
          {
            return LSM6DSO_ERROR;
 800727a:	f04f 33ff 	mov.w	r3, #4294967295
 800727e:	e14c      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 0;
 8007280:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007284:	f36f 13c7 	bfc	r3, #7, #1
 8007288:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f103 0020 	add.w	r0, r3, #32
 8007292:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8007296:	2301      	movs	r3, #1
 8007298:	2114      	movs	r1, #20
 800729a:	f000 ffbf 	bl	800821c <lsm6dso_write_reg>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa6>
        {
          return LSM6DSO_ERROR;
 80072a4:	f04f 33ff 	mov.w	r3, #4294967295
 80072a8:	e137      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f103 0020 	add.w	r0, r3, #32
 80072b0:	f107 0220 	add.w	r2, r7, #32
 80072b4:	2301      	movs	r3, #1
 80072b6:	2115      	movs	r1, #21
 80072b8:	f000 ff98 	bl	80081ec <lsm6dso_read_reg>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc4>
      {
        return LSM6DSO_ERROR;
 80072c2:	f04f 33ff 	mov.w	r3, #4294967295
 80072c6:	e128      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode != 0U)
 80072c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d014      	beq.n	8007300 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfc>
      {
        val2.xl_hm_mode = 0U;
 80072d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072da:	f36f 1304 	bfc	r3, #4, #1
 80072de:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f103 0020 	add.w	r0, r3, #32
 80072e8:	f107 0220 	add.w	r2, r7, #32
 80072ec:	2301      	movs	r3, #1
 80072ee:	2115      	movs	r1, #21
 80072f0:	f000 ff94 	bl	800821c <lsm6dso_write_reg>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfc>
        {
          return LSM6DSO_ERROR;
 80072fa:	f04f 33ff 	mov.w	r3, #4294967295
 80072fe:	e10c      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8007300:	4988      	ldr	r1, [pc, #544]	@ (8007524 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 8007302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007304:	f7f9 fecc 	bl	80010a0 <__aeabi_fcmplt>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d100      	bne.n	8007310 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x10c>
      {
        newOdr = 12.5f;
      }
      break;
 800730e:	e0ec      	b.n	80074ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 12.5f;
 8007310:	4b84      	ldr	r3, [pc, #528]	@ (8007524 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 8007312:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007314:	e0e9      	b.n	80074ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f103 0020 	add.w	r0, r3, #32
 800731c:	f107 021c 	add.w	r2, r7, #28
 8007320:	2301      	movs	r3, #1
 8007322:	2114      	movs	r1, #20
 8007324:	f000 ff62 	bl	80081ec <lsm6dso_read_reg>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x130>
      {
        return LSM6DSO_ERROR;
 800732e:	f04f 33ff 	mov.w	r3, #4294967295
 8007332:	e0f2      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en != 0U)
 8007334:	7f3b      	ldrb	r3, [r7, #28]
 8007336:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d023      	beq.n	8007388 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007346:	2b01      	cmp	r3, #1
 8007348:	d10b      	bne.n	8007362 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3320      	adds	r3, #32
 800734e:	2100      	movs	r1, #0
 8007350:	4618      	mov	r0, r3
 8007352:	f000 ffd9 	bl	8008308 <lsm6dso_xl_data_rate_set>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
          {
            return LSM6DSO_ERROR;
 800735c:	f04f 33ff 	mov.w	r3, #4294967295
 8007360:	e0db      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 0;
 8007362:	7f3b      	ldrb	r3, [r7, #28]
 8007364:	f36f 13c7 	bfc	r3, #7, #1
 8007368:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f103 0020 	add.w	r0, r3, #32
 8007370:	f107 021c 	add.w	r2, r7, #28
 8007374:	2301      	movs	r3, #1
 8007376:	2114      	movs	r1, #20
 8007378:	f000 ff50 	bl	800821c <lsm6dso_write_reg>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
        {
          return LSM6DSO_ERROR;
 8007382:	f04f 33ff 	mov.w	r3, #4294967295
 8007386:	e0c8      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f103 0020 	add.w	r0, r3, #32
 800738e:	f107 0218 	add.w	r2, r7, #24
 8007392:	2301      	movs	r3, #1
 8007394:	2115      	movs	r1, #21
 8007396:	f000 ff29 	bl	80081ec <lsm6dso_read_reg>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a2>
      {
        return LSM6DSO_ERROR;
 80073a0:	f04f 33ff 	mov.w	r3, #4294967295
 80073a4:	e0b9      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode == 0U)
 80073a6:	7e3b      	ldrb	r3, [r7, #24]
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d112      	bne.n	80073d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
      {
        val2.xl_hm_mode = 1U;
 80073b2:	7e3b      	ldrb	r3, [r7, #24]
 80073b4:	f043 0310 	orr.w	r3, r3, #16
 80073b8:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f103 0020 	add.w	r0, r3, #32
 80073c0:	f107 0218 	add.w	r2, r7, #24
 80073c4:	2301      	movs	r3, #1
 80073c6:	2115      	movs	r1, #21
 80073c8:	f000 ff28 	bl	800821c <lsm6dso_write_reg>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
        {
          return LSM6DSO_ERROR;
 80073d2:	f04f 33ff 	mov.w	r3, #4294967295
 80073d6:	e0a0      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80073d8:	4953      	ldr	r1, [pc, #332]	@ (8007528 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 80073da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073dc:	f7f9 fe7e 	bl	80010dc <__aeabi_fcmpgt>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d100      	bne.n	80073e8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e4>
      {
        newOdr = 208.0f;
      }
      break;
 80073e6:	e080      	b.n	80074ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 208.0f;
 80073e8:	4b4f      	ldr	r3, [pc, #316]	@ (8007528 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 80073ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073ec:	e07d      	b.n	80074ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f103 0020 	add.w	r0, r3, #32
 80073f4:	f107 0210 	add.w	r2, r7, #16
 80073f8:	2301      	movs	r3, #1
 80073fa:	2115      	movs	r1, #21
 80073fc:	f000 fef6 	bl	80081ec <lsm6dso_read_reg>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
      {
        return LSM6DSO_ERROR;
 8007406:	f04f 33ff 	mov.w	r3, #4294967295
 800740a:	e086      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode != 0U)
 800740c:	7c3b      	ldrb	r3, [r7, #16]
 800740e:	f003 0310 	and.w	r3, r3, #16
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d012      	beq.n	800743e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23a>
      {
        val2.xl_hm_mode = 0U;
 8007418:	7c3b      	ldrb	r3, [r7, #16]
 800741a:	f36f 1304 	bfc	r3, #4, #1
 800741e:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f103 0020 	add.w	r0, r3, #32
 8007426:	f107 0210 	add.w	r2, r7, #16
 800742a:	2301      	movs	r3, #1
 800742c:	2115      	movs	r1, #21
 800742e:	f000 fef5 	bl	800821c <lsm6dso_write_reg>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23a>
        {
          return LSM6DSO_ERROR;
 8007438:	f04f 33ff 	mov.w	r3, #4294967295
 800743c:	e06d      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007444:	2b01      	cmp	r3, #1
 8007446:	d108      	bne.n	800745a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x256>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 f97a 	bl	8007742 <LSM6DSO_GYRO_Disable>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x256>
        {
          return LSM6DSO_ERROR;
 8007454:	f04f 33ff 	mov.w	r3, #4294967295
 8007458:	e05f      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f103 0020 	add.w	r0, r3, #32
 8007460:	f107 0214 	add.w	r2, r7, #20
 8007464:	2301      	movs	r3, #1
 8007466:	2114      	movs	r1, #20
 8007468:	f000 fec0 	bl	80081ec <lsm6dso_read_reg>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x274>
      {
        return LSM6DSO_ERROR;
 8007472:	f04f 33ff 	mov.w	r3, #4294967295
 8007476:	e050      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en == 0U)
 8007478:	7d3b      	ldrb	r3, [r7, #20]
 800747a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d123      	bne.n	80074cc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2c8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800748a:	2b01      	cmp	r3, #1
 800748c:	d10b      	bne.n	80074a6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a2>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3320      	adds	r3, #32
 8007492:	2100      	movs	r1, #0
 8007494:	4618      	mov	r0, r3
 8007496:	f000 ff37 	bl	8008308 <lsm6dso_xl_data_rate_set>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a2>
          {
            return LSM6DSO_ERROR;
 80074a0:	f04f 33ff 	mov.w	r3, #4294967295
 80074a4:	e039      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 1U;
 80074a6:	7d3b      	ldrb	r3, [r7, #20]
 80074a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ac:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f103 0020 	add.w	r0, r3, #32
 80074b4:	f107 0214 	add.w	r2, r7, #20
 80074b8:	2301      	movs	r3, #1
 80074ba:	2114      	movs	r1, #20
 80074bc:	f000 feae 	bl	800821c <lsm6dso_write_reg>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2c8>
        {
          return LSM6DSO_ERROR;
 80074c6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ca:	e026      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80074cc:	4916      	ldr	r1, [pc, #88]	@ (8007528 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 80074ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074d0:	f7f9 fe04 	bl	80010dc <__aeabi_fcmpgt>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d100      	bne.n	80074dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
      {
        newOdr = 208.0f;
      }
      break;
 80074da:	e006      	b.n	80074ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 208.0f;
 80074dc:	4b12      	ldr	r3, [pc, #72]	@ (8007528 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 80074de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074e0:	e003      	b.n	80074ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
    }
    default:
      ret = LSM6DSO_ERROR;
 80074e2:	f04f 33ff 	mov.w	r3, #4294967295
 80074e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80074e8:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80074ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f0:	d102      	bne.n	80074f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
  {
    return LSM6DSO_ERROR;
 80074f2:	f04f 33ff 	mov.w	r3, #4294967295
 80074f6:	e010      	b.n	800751a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
  }

  if (pObj->acc_is_enabled == 1U)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d105      	bne.n	800750e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8007502:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 fc49 	bl	8007d9c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800750a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800750c:	e004      	b.n	8007518 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x314>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800750e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 fccb 	bl	8007eac <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8007516:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 8007518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800751a:	4618      	mov	r0, r3
 800751c:	3730      	adds	r7, #48	@ 0x30
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	41480000 	.word	0x41480000
 8007528:	43500000 	.word	0x43500000

0800752c <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3320      	adds	r3, #32
 800753e:	f107 020b 	add.w	r2, r7, #11
 8007542:	4611      	mov	r1, r2
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fea7 	bl	8008298 <lsm6dso_xl_full_scale_get>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8007550:	f04f 33ff 	mov.w	r3, #4294967295
 8007554:	e023      	b.n	800759e <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8007556:	7afb      	ldrb	r3, [r7, #11]
 8007558:	2b03      	cmp	r3, #3
 800755a:	d81b      	bhi.n	8007594 <LSM6DSO_ACC_GetFullScale+0x68>
 800755c:	a201      	add	r2, pc, #4	@ (adr r2, 8007564 <LSM6DSO_ACC_GetFullScale+0x38>)
 800755e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007562:	bf00      	nop
 8007564:	08007575 	.word	0x08007575
 8007568:	0800758d 	.word	0x0800758d
 800756c:	0800757d 	.word	0x0800757d
 8007570:	08007585 	.word	0x08007585
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2202      	movs	r2, #2
 8007578:	601a      	str	r2, [r3, #0]
      break;
 800757a:	e00f      	b.n	800759c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2204      	movs	r2, #4
 8007580:	601a      	str	r2, [r3, #0]
      break;
 8007582:	e00b      	b.n	800759c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2208      	movs	r2, #8
 8007588:	601a      	str	r2, [r3, #0]
      break;
 800758a:	e007      	b.n	800759c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2210      	movs	r2, #16
 8007590:	601a      	str	r2, [r3, #0]
      break;
 8007592:	e003      	b.n	800759c <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8007594:	f04f 33ff 	mov.w	r3, #4294967295
 8007598:	60fb      	str	r3, [r7, #12]
      break;
 800759a:	bf00      	nop
  }

  return ret;
 800759c:	68fb      	ldr	r3, [r7, #12]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop

080075a8 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	dd0b      	ble.n	80075d0 <LSM6DSO_ACC_SetFullScale+0x28>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	dd06      	ble.n	80075cc <LSM6DSO_ACC_SetFullScale+0x24>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b08      	cmp	r3, #8
 80075c2:	dc01      	bgt.n	80075c8 <LSM6DSO_ACC_SetFullScale+0x20>
 80075c4:	2303      	movs	r3, #3
 80075c6:	e004      	b.n	80075d2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80075c8:	2301      	movs	r3, #1
 80075ca:	e002      	b.n	80075d2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80075cc:	2302      	movs	r3, #2
 80075ce:	e000      	b.n	80075d2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80075d0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80075d2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3320      	adds	r3, #32
 80075d8:	7bfa      	ldrb	r2, [r7, #15]
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 fe35 	bl	800824c <lsm6dso_xl_full_scale_set>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 80075e8:	f04f 33ff 	mov.w	r3, #4294967295
 80075ec:	e000      	b.n	80075f0 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	3320      	adds	r3, #32
 8007606:	f107 0208 	add.w	r2, r7, #8
 800760a:	4611      	mov	r1, r2
 800760c:	4618      	mov	r0, r3
 800760e:	f001 fa0f 	bl	8008a30 <lsm6dso_acceleration_raw_get>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8007618:	f04f 33ff 	mov.w	r3, #4294967295
 800761c:	e00c      	b.n	8007638 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800761e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007626:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800762e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800764a:	f04f 0300 	mov.w	r3, #0
 800764e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3320      	adds	r3, #32
 8007654:	f107 0210 	add.w	r2, r7, #16
 8007658:	4611      	mov	r1, r2
 800765a:	4618      	mov	r0, r3
 800765c:	f001 f9e8 	bl	8008a30 <lsm6dso_acceleration_raw_get>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8007666:	f04f 33ff 	mov.w	r3, #4294967295
 800766a:	e042      	b.n	80076f2 <LSM6DSO_ACC_GetAxes+0xb2>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800766c:	f107 030c 	add.w	r3, r7, #12
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff fcec 	bl	8007050 <LSM6DSO_ACC_GetSensitivity>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800767e:	f04f 33ff 	mov.w	r3, #4294967295
 8007682:	e036      	b.n	80076f2 <LSM6DSO_ACC_GetAxes+0xb2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007684:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007688:	4618      	mov	r0, r3
 800768a:	f7f9 fb17 	bl	8000cbc <__aeabi_i2f>
 800768e:	4602      	mov	r2, r0
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4619      	mov	r1, r3
 8007694:	4610      	mov	r0, r2
 8007696:	f7f9 fb65 	bl	8000d64 <__aeabi_fmul>
 800769a:	4603      	mov	r3, r0
 800769c:	4618      	mov	r0, r3
 800769e:	f7f9 fd27 	bl	80010f0 <__aeabi_f2iz>
 80076a2:	4602      	mov	r2, r0
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80076a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7f9 fb05 	bl	8000cbc <__aeabi_i2f>
 80076b2:	4602      	mov	r2, r0
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4619      	mov	r1, r3
 80076b8:	4610      	mov	r0, r2
 80076ba:	f7f9 fb53 	bl	8000d64 <__aeabi_fmul>
 80076be:	4603      	mov	r3, r0
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7f9 fd15 	bl	80010f0 <__aeabi_f2iz>
 80076c6:	4602      	mov	r2, r0
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80076cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7f9 faf3 	bl	8000cbc <__aeabi_i2f>
 80076d6:	4602      	mov	r2, r0
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4619      	mov	r1, r3
 80076dc:	4610      	mov	r0, r2
 80076de:	f7f9 fb41 	bl	8000d64 <__aeabi_fmul>
 80076e2:	4603      	mov	r3, r0
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7f9 fd03 	bl	80010f0 <__aeabi_f2iz>
 80076ea:	4602      	mov	r2, r0
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007708:	2b01      	cmp	r3, #1
 800770a:	d101      	bne.n	8007710 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	e014      	b.n	800773a <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f103 0220 	add.w	r2, r3, #32
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800771c:	4619      	mov	r1, r3
 800771e:	4610      	mov	r0, r2
 8007720:	f000 ffbc 	bl	800869c <lsm6dso_gy_data_rate_set>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800772a:	f04f 33ff 	mov.w	r3, #4294967295
 800772e:	e004      	b.n	800773a <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b082      	sub	sp, #8
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	e01f      	b.n	8007798 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f103 0220 	add.w	r2, r3, #32
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3334      	adds	r3, #52	@ 0x34
 8007762:	4619      	mov	r1, r3
 8007764:	4610      	mov	r0, r2
 8007766:	f001 f893 	bl	8008890 <lsm6dso_gy_data_rate_get>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8007770:	f04f 33ff 	mov.w	r3, #4294967295
 8007774:	e010      	b.n	8007798 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3320      	adds	r3, #32
 800777a:	2100      	movs	r1, #0
 800777c:	4618      	mov	r0, r3
 800777e:	f000 ff8d 	bl	800869c <lsm6dso_gy_data_rate_set>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8007788:	f04f 33ff 	mov.w	r3, #4294967295
 800778c:	e004      	b.n	8007798 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3320      	adds	r3, #32
 80077b2:	f107 020b 	add.w	r2, r7, #11
 80077b6:	4611      	mov	r1, r2
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 ff2d 	bl	8008618 <lsm6dso_gy_full_scale_get>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80077c4:	f04f 33ff 	mov.w	r3, #4294967295
 80077c8:	e02d      	b.n	8007826 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80077ca:	7afb      	ldrb	r3, [r7, #11]
 80077cc:	2b06      	cmp	r3, #6
 80077ce:	d825      	bhi.n	800781c <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80077d0:	a201      	add	r2, pc, #4	@ (adr r2, 80077d8 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	080077fd 	.word	0x080077fd
 80077dc:	080077f5 	.word	0x080077f5
 80077e0:	08007805 	.word	0x08007805
 80077e4:	0800781d 	.word	0x0800781d
 80077e8:	0800780d 	.word	0x0800780d
 80077ec:	0800781d 	.word	0x0800781d
 80077f0:	08007815 	.word	0x08007815
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	4a0e      	ldr	r2, [pc, #56]	@ (8007830 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 80077f8:	601a      	str	r2, [r3, #0]
      break;
 80077fa:	e013      	b.n	8007824 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	4a0d      	ldr	r2, [pc, #52]	@ (8007834 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8007800:	601a      	str	r2, [r3, #0]
      break;
 8007802:	e00f      	b.n	8007824 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	4a0c      	ldr	r2, [pc, #48]	@ (8007838 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8007808:	601a      	str	r2, [r3, #0]
      break;
 800780a:	e00b      	b.n	8007824 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	4a0b      	ldr	r2, [pc, #44]	@ (800783c <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8007810:	601a      	str	r2, [r3, #0]
      break;
 8007812:	e007      	b.n	8007824 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	4a0a      	ldr	r2, [pc, #40]	@ (8007840 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8007818:	601a      	str	r2, [r3, #0]
      break;
 800781a:	e003      	b.n	8007824 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 800781c:	f04f 33ff 	mov.w	r3, #4294967295
 8007820:	60fb      	str	r3, [r7, #12]
      break;
 8007822:	bf00      	nop
  }

  return ret;
 8007824:	68fb      	ldr	r3, [r7, #12]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	408c0000 	.word	0x408c0000
 8007834:	410c0000 	.word	0x410c0000
 8007838:	418c0000 	.word	0x418c0000
 800783c:	420c0000 	.word	0x420c0000
 8007840:	428c0000 	.word	0x428c0000

08007844 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	3320      	adds	r3, #32
 8007856:	f107 020b 	add.w	r2, r7, #11
 800785a:	4611      	mov	r1, r2
 800785c:	4618      	mov	r0, r3
 800785e:	f001 f817 	bl	8008890 <lsm6dso_gy_data_rate_get>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8007868:	f04f 33ff 	mov.w	r3, #4294967295
 800786c:	e04e      	b.n	800790c <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800786e:	7afb      	ldrb	r3, [r7, #11]
 8007870:	2b0a      	cmp	r3, #10
 8007872:	d846      	bhi.n	8007902 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8007874:	a201      	add	r2, pc, #4	@ (adr r2, 800787c <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8007876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787a:	bf00      	nop
 800787c:	080078a9 	.word	0x080078a9
 8007880:	080078b3 	.word	0x080078b3
 8007884:	080078bb 	.word	0x080078bb
 8007888:	080078c3 	.word	0x080078c3
 800788c:	080078cb 	.word	0x080078cb
 8007890:	080078d3 	.word	0x080078d3
 8007894:	080078db 	.word	0x080078db
 8007898:	080078e3 	.word	0x080078e3
 800789c:	080078eb 	.word	0x080078eb
 80078a0:	080078f3 	.word	0x080078f3
 80078a4:	080078fb 	.word	0x080078fb
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	f04f 0200 	mov.w	r2, #0
 80078ae:	601a      	str	r2, [r3, #0]
      break;
 80078b0:	e02b      	b.n	800790a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	4a17      	ldr	r2, [pc, #92]	@ (8007914 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 80078b6:	601a      	str	r2, [r3, #0]
      break;
 80078b8:	e027      	b.n	800790a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	4a16      	ldr	r2, [pc, #88]	@ (8007918 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 80078be:	601a      	str	r2, [r3, #0]
      break;
 80078c0:	e023      	b.n	800790a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	4a15      	ldr	r2, [pc, #84]	@ (800791c <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 80078c6:	601a      	str	r2, [r3, #0]
      break;
 80078c8:	e01f      	b.n	800790a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	4a14      	ldr	r2, [pc, #80]	@ (8007920 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 80078ce:	601a      	str	r2, [r3, #0]
      break;
 80078d0:	e01b      	b.n	800790a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	4a13      	ldr	r2, [pc, #76]	@ (8007924 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 80078d6:	601a      	str	r2, [r3, #0]
      break;
 80078d8:	e017      	b.n	800790a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	4a12      	ldr	r2, [pc, #72]	@ (8007928 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 80078de:	601a      	str	r2, [r3, #0]
      break;
 80078e0:	e013      	b.n	800790a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	4a11      	ldr	r2, [pc, #68]	@ (800792c <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 80078e6:	601a      	str	r2, [r3, #0]
      break;
 80078e8:	e00f      	b.n	800790a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	4a10      	ldr	r2, [pc, #64]	@ (8007930 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 80078ee:	601a      	str	r2, [r3, #0]
      break;
 80078f0:	e00b      	b.n	800790a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	4a0f      	ldr	r2, [pc, #60]	@ (8007934 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 80078f6:	601a      	str	r2, [r3, #0]
      break;
 80078f8:	e007      	b.n	800790a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	4a0e      	ldr	r2, [pc, #56]	@ (8007938 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 80078fe:	601a      	str	r2, [r3, #0]
      break;
 8007900:	e003      	b.n	800790a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8007902:	f04f 33ff 	mov.w	r3, #4294967295
 8007906:	60fb      	str	r3, [r7, #12]
      break;
 8007908:	bf00      	nop
  }

  return ret;
 800790a:	68fb      	ldr	r3, [r7, #12]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	41480000 	.word	0x41480000
 8007918:	41d00000 	.word	0x41d00000
 800791c:	42500000 	.word	0x42500000
 8007920:	42d00000 	.word	0x42d00000
 8007924:	43500000 	.word	0x43500000
 8007928:	43d08000 	.word	0x43d08000
 800792c:	44504000 	.word	0x44504000
 8007930:	44d06000 	.word	0x44d06000
 8007934:	45505000 	.word	0x45505000
 8007938:	45d05800 	.word	0x45d05800

0800793c <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8007946:	2200      	movs	r2, #0
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f806 	bl	800795c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8007950:	4603      	mov	r3, r0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	4613      	mov	r3, r2
 8007968:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8007972:	79fb      	ldrb	r3, [r7, #7]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x22>
 8007978:	2b01      	cmp	r3, #1
 800797a:	d028      	beq.n	80079ce <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x72>
 800797c:	e05a      	b.n	8007a34 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f103 0020 	add.w	r0, r3, #32
 8007984:	f107 0214 	add.w	r2, r7, #20
 8007988:	2301      	movs	r3, #1
 800798a:	2116      	movs	r1, #22
 800798c:	f000 fc2e 	bl	80081ec <lsm6dso_read_reg>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x40>
      {
        return LSM6DSO_ERROR;
 8007996:	f04f 33ff 	mov.w	r3, #4294967295
 800799a:	e068      	b.n	8007a6e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
      }

      if (val1.g_hm_mode != 0U)
 800799c:	7d3b      	ldrb	r3, [r7, #20]
 800799e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d049      	beq.n	8007a3c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe0>
      {
        val1.g_hm_mode = 0U;
 80079a8:	7d3b      	ldrb	r3, [r7, #20]
 80079aa:	f36f 13c7 	bfc	r3, #7, #1
 80079ae:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f103 0020 	add.w	r0, r3, #32
 80079b6:	f107 0214 	add.w	r2, r7, #20
 80079ba:	2301      	movs	r3, #1
 80079bc:	2116      	movs	r1, #22
 80079be:	f000 fc2d 	bl	800821c <lsm6dso_write_reg>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d039      	beq.n	8007a3c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe0>
        {
          return LSM6DSO_ERROR;
 80079c8:	f04f 33ff 	mov.w	r3, #4294967295
 80079cc:	e04f      	b.n	8007a6e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f103 0020 	add.w	r0, r3, #32
 80079d4:	f107 0210 	add.w	r2, r7, #16
 80079d8:	2301      	movs	r3, #1
 80079da:	2116      	movs	r1, #22
 80079dc:	f000 fc06 	bl	80081ec <lsm6dso_read_reg>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x90>
      {
        return LSM6DSO_ERROR;
 80079e6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ea:	e040      	b.n	8007a6e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
      }

      if (val1.g_hm_mode == 0U)
 80079ec:	7c3b      	ldrb	r3, [r7, #16]
 80079ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d112      	bne.n	8007a1e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc2>
      {
        val1.g_hm_mode = 1U;
 80079f8:	7c3b      	ldrb	r3, [r7, #16]
 80079fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079fe:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f103 0020 	add.w	r0, r3, #32
 8007a06:	f107 0210 	add.w	r2, r7, #16
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	2116      	movs	r1, #22
 8007a0e:	f000 fc05 	bl	800821c <lsm6dso_write_reg>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc2>
        {
          return LSM6DSO_ERROR;
 8007a18:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1c:	e027      	b.n	8007a6e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8007a1e:	4916      	ldr	r1, [pc, #88]	@ (8007a78 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>)
 8007a20:	69b8      	ldr	r0, [r7, #24]
 8007a22:	f7f9 fb5b 	bl	80010dc <__aeabi_fcmpgt>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d100      	bne.n	8007a2e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd2>
      {
        newOdr = 208.0f;
      }
      break;
 8007a2c:	e007      	b.n	8007a3e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
        newOdr = 208.0f;
 8007a2e:	4b12      	ldr	r3, [pc, #72]	@ (8007a78 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>)
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	e004      	b.n	8007a3e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
    }
    default:
      ret = LSM6DSO_ERROR;
 8007a34:	f04f 33ff 	mov.w	r3, #4294967295
 8007a38:	61fb      	str	r3, [r7, #28]
      break;
 8007a3a:	e000      	b.n	8007a3e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
      break;
 8007a3c:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a44:	d102      	bne.n	8007a4c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf0>
  {
    return LSM6DSO_ERROR;
 8007a46:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4a:	e010      	b.n	8007a6e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
  }

  if (pObj->gyro_is_enabled == 1U)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d105      	bne.n	8007a62 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x106>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8007a56:	69b9      	ldr	r1, [r7, #24]
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 faa3 	bl	8007fa4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8007a5e:	61f8      	str	r0, [r7, #28]
 8007a60:	e004      	b.n	8007a6c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x110>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8007a62:	69b9      	ldr	r1, [r7, #24]
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 fb19 	bl	800809c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8007a6a:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8007a6c:	69fb      	ldr	r3, [r7, #28]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3720      	adds	r7, #32
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	43500000 	.word	0x43500000

08007a7c <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3320      	adds	r3, #32
 8007a8e:	f107 020b 	add.w	r2, r7, #11
 8007a92:	4611      	mov	r1, r2
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 fdbf 	bl	8008618 <lsm6dso_gy_full_scale_get>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8007aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa4:	e030      	b.n	8007b08 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8007aa6:	7afb      	ldrb	r3, [r7, #11]
 8007aa8:	2b06      	cmp	r3, #6
 8007aaa:	d828      	bhi.n	8007afe <LSM6DSO_GYRO_GetFullScale+0x82>
 8007aac:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab4 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007ad9 	.word	0x08007ad9
 8007ab8:	08007ad1 	.word	0x08007ad1
 8007abc:	08007ae1 	.word	0x08007ae1
 8007ac0:	08007aff 	.word	0x08007aff
 8007ac4:	08007aeb 	.word	0x08007aeb
 8007ac8:	08007aff 	.word	0x08007aff
 8007acc:	08007af5 	.word	0x08007af5
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	227d      	movs	r2, #125	@ 0x7d
 8007ad4:	601a      	str	r2, [r3, #0]
      break;
 8007ad6:	e016      	b.n	8007b06 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	22fa      	movs	r2, #250	@ 0xfa
 8007adc:	601a      	str	r2, [r3, #0]
      break;
 8007ade:	e012      	b.n	8007b06 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8007ae6:	601a      	str	r2, [r3, #0]
      break;
 8007ae8:	e00d      	b.n	8007b06 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007af0:	601a      	str	r2, [r3, #0]
      break;
 8007af2:	e008      	b.n	8007b06 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007afa:	601a      	str	r2, [r3, #0]
      break;
 8007afc:	e003      	b.n	8007b06 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8007afe:	f04f 33ff 	mov.w	r3, #4294967295
 8007b02:	60fb      	str	r3, [r7, #12]
      break;
 8007b04:	bf00      	nop
  }

  return ret;
 8007b06:	68fb      	ldr	r3, [r7, #12]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b7d      	cmp	r3, #125	@ 0x7d
 8007b1e:	dd12      	ble.n	8007b46 <LSM6DSO_GYRO_SetFullScale+0x36>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2bfa      	cmp	r3, #250	@ 0xfa
 8007b24:	dd0d      	ble.n	8007b42 <LSM6DSO_GYRO_SetFullScale+0x32>
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007b2c:	dd07      	ble.n	8007b3e <LSM6DSO_GYRO_SetFullScale+0x2e>
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b34:	dc01      	bgt.n	8007b3a <LSM6DSO_GYRO_SetFullScale+0x2a>
 8007b36:	2304      	movs	r3, #4
 8007b38:	e006      	b.n	8007b48 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007b3a:	2306      	movs	r3, #6
 8007b3c:	e004      	b.n	8007b48 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007b3e:	2302      	movs	r3, #2
 8007b40:	e002      	b.n	8007b48 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007b42:	2300      	movs	r3, #0
 8007b44:	e000      	b.n	8007b48 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007b46:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8007b48:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3320      	adds	r3, #32
 8007b4e:	7bfa      	ldrb	r2, [r7, #15]
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fd3a 	bl	80085cc <lsm6dso_gy_full_scale_set>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8007b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b62:	e000      	b.n	8007b66 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3320      	adds	r3, #32
 8007b7c:	f107 0208 	add.w	r2, r7, #8
 8007b80:	4611      	mov	r1, r2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 ff0c 	bl	80089a0 <lsm6dso_angular_rate_raw_get>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d002      	beq.n	8007b94 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8007b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b92:	e00c      	b.n	8007bae <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007b94:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007b9c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007ba4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b086      	sub	sp, #24
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3320      	adds	r3, #32
 8007bc4:	f107 0210 	add.w	r2, r7, #16
 8007bc8:	4611      	mov	r1, r2
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 fee8 	bl	80089a0 <lsm6dso_angular_rate_raw_get>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8007bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bda:	e042      	b.n	8007c62 <LSM6DSO_GYRO_GetAxes+0xac>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8007bdc:	f107 030c 	add.w	r3, r7, #12
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7ff fddc 	bl	80077a0 <LSM6DSO_GYRO_GetSensitivity>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d002      	beq.n	8007bf4 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8007bee:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf2:	e036      	b.n	8007c62 <LSM6DSO_GYRO_GetAxes+0xac>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007bf4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7f9 f85f 	bl	8000cbc <__aeabi_i2f>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	4619      	mov	r1, r3
 8007c04:	4610      	mov	r0, r2
 8007c06:	f7f9 f8ad 	bl	8000d64 <__aeabi_fmul>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7f9 fa6f 	bl	80010f0 <__aeabi_f2iz>
 8007c12:	4602      	mov	r2, r0
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007c18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7f9 f84d 	bl	8000cbc <__aeabi_i2f>
 8007c22:	4602      	mov	r2, r0
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4619      	mov	r1, r3
 8007c28:	4610      	mov	r0, r2
 8007c2a:	f7f9 f89b 	bl	8000d64 <__aeabi_fmul>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7f9 fa5d 	bl	80010f0 <__aeabi_f2iz>
 8007c36:	4602      	mov	r2, r0
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007c3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7f9 f83b 	bl	8000cbc <__aeabi_i2f>
 8007c46:	4602      	mov	r2, r0
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	f7f9 f889 	bl	8000d64 <__aeabi_fmul>
 8007c52:	4603      	mov	r3, r0
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7f9 fa4b 	bl	80010f0 <__aeabi_f2iz>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3718      	adds	r7, #24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	460b      	mov	r3, r1
 8007c74:	70fb      	strb	r3, [r7, #3]
 8007c76:	4613      	mov	r3, r2
 8007c78:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f103 0020 	add.w	r0, r3, #32
 8007c80:	1cba      	adds	r2, r7, #2
 8007c82:	78f9      	ldrb	r1, [r7, #3]
 8007c84:	2301      	movs	r3, #1
 8007c86:	f000 fac9 	bl	800821c <lsm6dso_write_reg>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8007c90:	f04f 33ff 	mov.w	r3, #4294967295
 8007c94:	e000      	b.n	8007c98 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <LSM6DSO_ACC_Enable_6D_Orientation>:
  * @param  pObj the device pObj
  * @param  IntPin interrupt pin line to be used
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable_6D_Orientation(LSM6DSO_Object_t *pObj, LSM6DSO_SensorIntPin_t IntPin)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b088      	sub	sp, #32
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	61fb      	str	r3, [r7, #28]
  lsm6dso_pin_int1_route_t val1;
  lsm6dso_pin_int2_route_t val2;

  /* Output Data Rate selection */
  if (LSM6DSO_ACC_SetOutputDataRate(pObj, 417.0f) != LSM6DSO_OK)
 8007cb0:	4939      	ldr	r1, [pc, #228]	@ (8007d98 <LSM6DSO_ACC_Enable_6D_Orientation+0xf8>)
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7ff fa96 	bl	80071e4 <LSM6DSO_ACC_SetOutputDataRate>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <LSM6DSO_ACC_Enable_6D_Orientation+0x24>
  {
    return LSM6DSO_ERROR;
 8007cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc2:	e065      	b.n	8007d90 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
  }

  /* Full scale selection */
  if (LSM6DSO_ACC_SetFullScale(pObj, 2) != LSM6DSO_OK)
 8007cc4:	2102      	movs	r1, #2
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7ff fc6e 	bl	80075a8 <LSM6DSO_ACC_SetFullScale>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <LSM6DSO_ACC_Enable_6D_Orientation+0x38>
  {
    return LSM6DSO_ERROR;
 8007cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd6:	e05b      	b.n	8007d90 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
  }

  /* 6D orientation enabled. */
  if (lsm6dso_6d_threshold_set(&(pObj->Ctx), LSM6DSO_DEG_60) != LSM6DSO_OK)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3320      	adds	r3, #32
 8007cdc:	2102      	movs	r1, #2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 ff8a 	bl	8008bf8 <lsm6dso_6d_threshold_set>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <LSM6DSO_ACC_Enable_6D_Orientation+0x50>
  {
    return LSM6DSO_ERROR;
 8007cea:	f04f 33ff 	mov.w	r3, #4294967295
 8007cee:	e04f      	b.n	8007d90 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
  }

  /* Enable 6D orientation event on either INT1 or INT2 pin */
  switch (IntPin)
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <LSM6DSO_ACC_Enable_6D_Orientation+0x5c>
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d021      	beq.n	8007d3e <LSM6DSO_ACC_Enable_6D_Orientation+0x9e>
 8007cfa:	e041      	b.n	8007d80 <LSM6DSO_ACC_Enable_6D_Orientation+0xe0>
  {
    case LSM6DSO_INT1_PIN:
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	3320      	adds	r3, #32
 8007d00:	f107 0214 	add.w	r2, r7, #20
 8007d04:	4611      	mov	r1, r2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f001 fbd8 	bl	80094bc <lsm6dso_pin_int1_route_get>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <LSM6DSO_ACC_Enable_6D_Orientation+0x78>
      {
        return LSM6DSO_ERROR;
 8007d12:	f04f 33ff 	mov.w	r3, #4294967295
 8007d16:	e03b      	b.n	8007d90 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      }

      val1.six_d = PROPERTY_ENABLE;
 8007d18:	7d7b      	ldrb	r3, [r7, #21]
 8007d1a:	f043 0308 	orr.w	r3, r3, #8
 8007d1e:	757b      	strb	r3, [r7, #21]

      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f103 0020 	add.w	r0, r3, #32
 8007d26:	f107 0314 	add.w	r3, r7, #20
 8007d2a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007d2e:	f001 f81f 	bl	8008d70 <lsm6dso_pin_int1_route_set>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d027      	beq.n	8007d88 <LSM6DSO_ACC_Enable_6D_Orientation+0xe8>
      {
        return LSM6DSO_ERROR;
 8007d38:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3c:	e028      	b.n	8007d90 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      }
      break;

    case LSM6DSO_INT2_PIN:
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3320      	adds	r3, #32
 8007d42:	f107 020c 	add.w	r2, r7, #12
 8007d46:	2100      	movs	r1, #0
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f002 f919 	bl	8009f80 <lsm6dso_pin_int2_route_get>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <LSM6DSO_ACC_Enable_6D_Orientation+0xba>
      {
        return LSM6DSO_ERROR;
 8007d54:	f04f 33ff 	mov.w	r3, #4294967295
 8007d58:	e01a      	b.n	8007d90 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      }

      val2.six_d = PROPERTY_ENABLE;
 8007d5a:	7b7b      	ldrb	r3, [r7, #13]
 8007d5c:	f043 0302 	orr.w	r3, r3, #2
 8007d60:	737b      	strb	r3, [r7, #13]

      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f103 0020 	add.w	r0, r3, #32
 8007d68:	f107 030c 	add.w	r3, r7, #12
 8007d6c:	cb0c      	ldmia	r3, {r2, r3}
 8007d6e:	2100      	movs	r1, #0
 8007d70:	f001 fd94 	bl	800989c <lsm6dso_pin_int2_route_set>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d008      	beq.n	8007d8c <LSM6DSO_ACC_Enable_6D_Orientation+0xec>
      {
        return LSM6DSO_ERROR;
 8007d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7e:	e007      	b.n	8007d90 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      }
      break;

    default:
      ret = LSM6DSO_ERROR;
 8007d80:	f04f 33ff 	mov.w	r3, #4294967295
 8007d84:	61fb      	str	r3, [r7, #28]
      break;
 8007d86:	e002      	b.n	8007d8e <LSM6DSO_ACC_Enable_6D_Orientation+0xee>
      break;
 8007d88:	bf00      	nop
 8007d8a:	e000      	b.n	8007d8e <LSM6DSO_ACC_Enable_6D_Orientation+0xee>
      break;
 8007d8c:	bf00      	nop
  }

  return ret;
 8007d8e:	69fb      	ldr	r3, [r7, #28]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3720      	adds	r7, #32
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	43d08000 	.word	0x43d08000

08007d9c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007da6:	4937      	ldr	r1, [pc, #220]	@ (8007e84 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>)
 8007da8:	6838      	ldr	r0, [r7, #0]
 8007daa:	f7f9 f983 	bl	80010b4 <__aeabi_fcmple>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x1c>
 8007db4:	230b      	movs	r3, #11
 8007db6:	e051      	b.n	8007e5c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007db8:	4933      	ldr	r1, [pc, #204]	@ (8007e88 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xec>)
 8007dba:	6838      	ldr	r0, [r7, #0]
 8007dbc:	f7f9 f97a 	bl	80010b4 <__aeabi_fcmple>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x2e>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e048      	b.n	8007e5c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007dca:	4930      	ldr	r1, [pc, #192]	@ (8007e8c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf0>)
 8007dcc:	6838      	ldr	r0, [r7, #0]
 8007dce:	f7f9 f971 	bl	80010b4 <__aeabi_fcmple>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x40>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e03f      	b.n	8007e5c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007ddc:	492c      	ldr	r1, [pc, #176]	@ (8007e90 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf4>)
 8007dde:	6838      	ldr	r0, [r7, #0]
 8007de0:	f7f9 f968 	bl	80010b4 <__aeabi_fcmple>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x52>
 8007dea:	2303      	movs	r3, #3
 8007dec:	e036      	b.n	8007e5c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007dee:	4929      	ldr	r1, [pc, #164]	@ (8007e94 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf8>)
 8007df0:	6838      	ldr	r0, [r7, #0]
 8007df2:	f7f9 f95f 	bl	80010b4 <__aeabi_fcmple>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8007dfc:	2304      	movs	r3, #4
 8007dfe:	e02d      	b.n	8007e5c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007e00:	4925      	ldr	r1, [pc, #148]	@ (8007e98 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xfc>)
 8007e02:	6838      	ldr	r0, [r7, #0]
 8007e04:	f7f9 f956 	bl	80010b4 <__aeabi_fcmple>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x76>
 8007e0e:	2305      	movs	r3, #5
 8007e10:	e024      	b.n	8007e5c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007e12:	4922      	ldr	r1, [pc, #136]	@ (8007e9c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x100>)
 8007e14:	6838      	ldr	r0, [r7, #0]
 8007e16:	f7f9 f94d 	bl	80010b4 <__aeabi_fcmple>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x88>
 8007e20:	2306      	movs	r3, #6
 8007e22:	e01b      	b.n	8007e5c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007e24:	491e      	ldr	r1, [pc, #120]	@ (8007ea0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x104>)
 8007e26:	6838      	ldr	r0, [r7, #0]
 8007e28:	f7f9 f944 	bl	80010b4 <__aeabi_fcmple>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x9a>
 8007e32:	2307      	movs	r3, #7
 8007e34:	e012      	b.n	8007e5c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007e36:	491b      	ldr	r1, [pc, #108]	@ (8007ea4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>)
 8007e38:	6838      	ldr	r0, [r7, #0]
 8007e3a:	f7f9 f93b 	bl	80010b4 <__aeabi_fcmple>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8007e44:	2308      	movs	r3, #8
 8007e46:	e009      	b.n	8007e5c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007e48:	4917      	ldr	r1, [pc, #92]	@ (8007ea8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x10c>)
 8007e4a:	6838      	ldr	r0, [r7, #0]
 8007e4c:	f7f9 f932 	bl	80010b4 <__aeabi_fcmple>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbe>
 8007e56:	2309      	movs	r3, #9
 8007e58:	e000      	b.n	8007e5c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007e5a:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8007e5c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3320      	adds	r3, #32
 8007e62:	7bfa      	ldrb	r2, [r7, #15]
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fa4e 	bl	8008308 <lsm6dso_xl_data_rate_set>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xdc>
  {
    return LSM6DSO_ERROR;
 8007e72:	f04f 33ff 	mov.w	r3, #4294967295
 8007e76:	e000      	b.n	8007e7a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xde>
  }

  return LSM6DSO_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	3fcccccd 	.word	0x3fcccccd
 8007e88:	41480000 	.word	0x41480000
 8007e8c:	41d00000 	.word	0x41d00000
 8007e90:	42500000 	.word	0x42500000
 8007e94:	42d00000 	.word	0x42d00000
 8007e98:	43500000 	.word	0x43500000
 8007e9c:	43d08000 	.word	0x43d08000
 8007ea0:	44504000 	.word	0x44504000
 8007ea4:	44d06000 	.word	0x44d06000
 8007ea8:	45505000 	.word	0x45505000

08007eac <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007eb6:	4931      	ldr	r1, [pc, #196]	@ (8007f7c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8007eb8:	6838      	ldr	r0, [r7, #0]
 8007eba:	f7f9 f8fb 	bl	80010b4 <__aeabi_fcmple>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x1c>
 8007ec4:	230b      	movs	r3, #11
 8007ec6:	e051      	b.n	8007f6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007ec8:	492d      	ldr	r1, [pc, #180]	@ (8007f80 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8007eca:	6838      	ldr	r0, [r7, #0]
 8007ecc:	f7f9 f8f2 	bl	80010b4 <__aeabi_fcmple>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e048      	b.n	8007f6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007eda:	492a      	ldr	r1, [pc, #168]	@ (8007f84 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8007edc:	6838      	ldr	r0, [r7, #0]
 8007ede:	f7f9 f8e9 	bl	80010b4 <__aeabi_fcmple>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x40>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	e03f      	b.n	8007f6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007eec:	4926      	ldr	r1, [pc, #152]	@ (8007f88 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 8007eee:	6838      	ldr	r0, [r7, #0]
 8007ef0:	f7f9 f8e0 	bl	80010b4 <__aeabi_fcmple>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x52>
 8007efa:	2303      	movs	r3, #3
 8007efc:	e036      	b.n	8007f6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007efe:	4923      	ldr	r1, [pc, #140]	@ (8007f8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 8007f00:	6838      	ldr	r0, [r7, #0]
 8007f02:	f7f9 f8d7 	bl	80010b4 <__aeabi_fcmple>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007f0c:	2304      	movs	r3, #4
 8007f0e:	e02d      	b.n	8007f6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007f10:	491f      	ldr	r1, [pc, #124]	@ (8007f90 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 8007f12:	6838      	ldr	r0, [r7, #0]
 8007f14:	f7f9 f8ce 	bl	80010b4 <__aeabi_fcmple>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x76>
 8007f1e:	2305      	movs	r3, #5
 8007f20:	e024      	b.n	8007f6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007f22:	491c      	ldr	r1, [pc, #112]	@ (8007f94 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>)
 8007f24:	6838      	ldr	r0, [r7, #0]
 8007f26:	f7f9 f8c5 	bl	80010b4 <__aeabi_fcmple>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x88>
 8007f30:	2306      	movs	r3, #6
 8007f32:	e01b      	b.n	8007f6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007f34:	4918      	ldr	r1, [pc, #96]	@ (8007f98 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8007f36:	6838      	ldr	r0, [r7, #0]
 8007f38:	f7f9 f8bc 	bl	80010b4 <__aeabi_fcmple>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8007f42:	2307      	movs	r3, #7
 8007f44:	e012      	b.n	8007f6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007f46:	4915      	ldr	r1, [pc, #84]	@ (8007f9c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8007f48:	6838      	ldr	r0, [r7, #0]
 8007f4a:	f7f9 f8b3 	bl	80010b4 <__aeabi_fcmple>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8007f54:	2308      	movs	r3, #8
 8007f56:	e009      	b.n	8007f6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007f58:	4911      	ldr	r1, [pc, #68]	@ (8007fa0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8007f5a:	6838      	ldr	r0, [r7, #0]
 8007f5c:	f7f9 f8aa 	bl	80010b4 <__aeabi_fcmple>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8007f66:	2309      	movs	r3, #9
 8007f68:	e000      	b.n	8007f6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007f6a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	3fcccccd 	.word	0x3fcccccd
 8007f80:	41480000 	.word	0x41480000
 8007f84:	41d00000 	.word	0x41d00000
 8007f88:	42500000 	.word	0x42500000
 8007f8c:	42d00000 	.word	0x42d00000
 8007f90:	43500000 	.word	0x43500000
 8007f94:	43d08000 	.word	0x43d08000
 8007f98:	44504000 	.word	0x44504000
 8007f9c:	44d06000 	.word	0x44d06000
 8007fa0:	45505000 	.word	0x45505000

08007fa4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007fae:	4932      	ldr	r1, [pc, #200]	@ (8008078 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>)
 8007fb0:	6838      	ldr	r0, [r7, #0]
 8007fb2:	f7f9 f87f 	bl	80010b4 <__aeabi_fcmple>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x1c>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e048      	b.n	8008052 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007fc0:	492e      	ldr	r1, [pc, #184]	@ (800807c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd8>)
 8007fc2:	6838      	ldr	r0, [r7, #0]
 8007fc4:	f7f9 f876 	bl	80010b4 <__aeabi_fcmple>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x2e>
 8007fce:	2302      	movs	r3, #2
 8007fd0:	e03f      	b.n	8008052 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007fd2:	492b      	ldr	r1, [pc, #172]	@ (8008080 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xdc>)
 8007fd4:	6838      	ldr	r0, [r7, #0]
 8007fd6:	f7f9 f86d 	bl	80010b4 <__aeabi_fcmple>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x40>
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e036      	b.n	8008052 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007fe4:	4927      	ldr	r1, [pc, #156]	@ (8008084 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe0>)
 8007fe6:	6838      	ldr	r0, [r7, #0]
 8007fe8:	f7f9 f864 	bl	80010b4 <__aeabi_fcmple>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x52>
 8007ff2:	2304      	movs	r3, #4
 8007ff4:	e02d      	b.n	8008052 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007ff6:	4924      	ldr	r1, [pc, #144]	@ (8008088 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe4>)
 8007ff8:	6838      	ldr	r0, [r7, #0]
 8007ffa:	f7f9 f85b 	bl	80010b4 <__aeabi_fcmple>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8008004:	2305      	movs	r3, #5
 8008006:	e024      	b.n	8008052 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8008008:	4920      	ldr	r1, [pc, #128]	@ (800808c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe8>)
 800800a:	6838      	ldr	r0, [r7, #0]
 800800c:	f7f9 f852 	bl	80010b4 <__aeabi_fcmple>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x76>
 8008016:	2306      	movs	r3, #6
 8008018:	e01b      	b.n	8008052 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 800801a:	491d      	ldr	r1, [pc, #116]	@ (8008090 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xec>)
 800801c:	6838      	ldr	r0, [r7, #0]
 800801e:	f7f9 f849 	bl	80010b4 <__aeabi_fcmple>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x88>
 8008028:	2307      	movs	r3, #7
 800802a:	e012      	b.n	8008052 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 800802c:	4919      	ldr	r1, [pc, #100]	@ (8008094 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>)
 800802e:	6838      	ldr	r0, [r7, #0]
 8008030:	f7f9 f840 	bl	80010b4 <__aeabi_fcmple>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9a>
 800803a:	2308      	movs	r3, #8
 800803c:	e009      	b.n	8008052 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 800803e:	4916      	ldr	r1, [pc, #88]	@ (8008098 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf4>)
 8008040:	6838      	ldr	r0, [r7, #0]
 8008042:	f7f9 f837 	bl	80010b4 <__aeabi_fcmple>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xac>
 800804c:	2309      	movs	r3, #9
 800804e:	e000      	b.n	8008052 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8008050:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8008052:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3320      	adds	r3, #32
 8008058:	7bfa      	ldrb	r2, [r7, #15]
 800805a:	4611      	mov	r1, r2
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fb1d 	bl	800869c <lsm6dso_gy_data_rate_set>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xca>
  {
    return LSM6DSO_ERROR;
 8008068:	f04f 33ff 	mov.w	r3, #4294967295
 800806c:	e000      	b.n	8008070 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xcc>
  }

  return LSM6DSO_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	41480000 	.word	0x41480000
 800807c:	41d00000 	.word	0x41d00000
 8008080:	42500000 	.word	0x42500000
 8008084:	42d00000 	.word	0x42d00000
 8008088:	43500000 	.word	0x43500000
 800808c:	43d08000 	.word	0x43d08000
 8008090:	44504000 	.word	0x44504000
 8008094:	44d06000 	.word	0x44d06000
 8008098:	45505000 	.word	0x45505000

0800809c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80080a6:	492d      	ldr	r1, [pc, #180]	@ (800815c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc0>)
 80080a8:	6838      	ldr	r0, [r7, #0]
 80080aa:	f7f9 f803 	bl	80010b4 <__aeabi_fcmple>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x1c>
 80080b4:	2301      	movs	r3, #1
 80080b6:	e048      	b.n	800814a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 80080b8:	4929      	ldr	r1, [pc, #164]	@ (8008160 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc4>)
 80080ba:	6838      	ldr	r0, [r7, #0]
 80080bc:	f7f8 fffa 	bl	80010b4 <__aeabi_fcmple>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x2e>
 80080c6:	2302      	movs	r3, #2
 80080c8:	e03f      	b.n	800814a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 80080ca:	4926      	ldr	r1, [pc, #152]	@ (8008164 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc8>)
 80080cc:	6838      	ldr	r0, [r7, #0]
 80080ce:	f7f8 fff1 	bl	80010b4 <__aeabi_fcmple>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x40>
 80080d8:	2303      	movs	r3, #3
 80080da:	e036      	b.n	800814a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 80080dc:	4922      	ldr	r1, [pc, #136]	@ (8008168 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xcc>)
 80080de:	6838      	ldr	r0, [r7, #0]
 80080e0:	f7f8 ffe8 	bl	80010b4 <__aeabi_fcmple>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x52>
 80080ea:	2304      	movs	r3, #4
 80080ec:	e02d      	b.n	800814a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 80080ee:	491f      	ldr	r1, [pc, #124]	@ (800816c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd0>)
 80080f0:	6838      	ldr	r0, [r7, #0]
 80080f2:	f7f8 ffdf 	bl	80010b4 <__aeabi_fcmple>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80080fc:	2305      	movs	r3, #5
 80080fe:	e024      	b.n	800814a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008100:	491b      	ldr	r1, [pc, #108]	@ (8008170 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>)
 8008102:	6838      	ldr	r0, [r7, #0]
 8008104:	f7f8 ffd6 	bl	80010b4 <__aeabi_fcmple>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x76>
 800810e:	2306      	movs	r3, #6
 8008110:	e01b      	b.n	800814a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008112:	4918      	ldr	r1, [pc, #96]	@ (8008174 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd8>)
 8008114:	6838      	ldr	r0, [r7, #0]
 8008116:	f7f8 ffcd 	bl	80010b4 <__aeabi_fcmple>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8008120:	2307      	movs	r3, #7
 8008122:	e012      	b.n	800814a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008124:	4914      	ldr	r1, [pc, #80]	@ (8008178 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xdc>)
 8008126:	6838      	ldr	r0, [r7, #0]
 8008128:	f7f8 ffc4 	bl	80010b4 <__aeabi_fcmple>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9a>
 8008132:	2308      	movs	r3, #8
 8008134:	e009      	b.n	800814a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008136:	4911      	ldr	r1, [pc, #68]	@ (800817c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe0>)
 8008138:	6838      	ldr	r0, [r7, #0]
 800813a:	f7f8 ffbb 	bl	80010b4 <__aeabi_fcmple>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xac>
 8008144:	2309      	movs	r3, #9
 8008146:	e000      	b.n	800814a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008148:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	41480000 	.word	0x41480000
 8008160:	41d00000 	.word	0x41d00000
 8008164:	42500000 	.word	0x42500000
 8008168:	42d00000 	.word	0x42d00000
 800816c:	43500000 	.word	0x43500000
 8008170:	43d08000 	.word	0x43d08000
 8008174:	44504000 	.word	0x44504000
 8008178:	44d06000 	.word	0x44d06000
 800817c:	45505000 	.word	0x45505000

08008180 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008180:	b590      	push	{r4, r7, lr}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	607a      	str	r2, [r7, #4]
 800818a:	461a      	mov	r2, r3
 800818c:	460b      	mov	r3, r1
 800818e:	72fb      	strb	r3, [r7, #11]
 8008190:	4613      	mov	r3, r2
 8008192:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	695c      	ldr	r4, [r3, #20]
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	7b1b      	ldrb	r3, [r3, #12]
 80081a0:	4618      	mov	r0, r3
 80081a2:	7afb      	ldrb	r3, [r7, #11]
 80081a4:	b299      	uxth	r1, r3
 80081a6:	893b      	ldrh	r3, [r7, #8]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	47a0      	blx	r4
 80081ac:	4603      	mov	r3, r0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	371c      	adds	r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd90      	pop	{r4, r7, pc}

080081b6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80081b6:	b590      	push	{r4, r7, lr}
 80081b8:	b087      	sub	sp, #28
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	461a      	mov	r2, r3
 80081c2:	460b      	mov	r3, r1
 80081c4:	72fb      	strb	r3, [r7, #11]
 80081c6:	4613      	mov	r3, r2
 80081c8:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	691c      	ldr	r4, [r3, #16]
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	7b1b      	ldrb	r3, [r3, #12]
 80081d6:	4618      	mov	r0, r3
 80081d8:	7afb      	ldrb	r3, [r7, #11]
 80081da:	b299      	uxth	r1, r3
 80081dc:	893b      	ldrh	r3, [r7, #8]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	47a0      	blx	r4
 80081e2:	4603      	mov	r3, r0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd90      	pop	{r4, r7, pc}

080081ec <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80081ec:	b590      	push	{r4, r7, lr}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	607a      	str	r2, [r7, #4]
 80081f6:	461a      	mov	r2, r3
 80081f8:	460b      	mov	r3, r1
 80081fa:	72fb      	strb	r3, [r7, #11]
 80081fc:	4613      	mov	r3, r2
 80081fe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	685c      	ldr	r4, [r3, #4]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	68d8      	ldr	r0, [r3, #12]
 8008208:	893b      	ldrh	r3, [r7, #8]
 800820a:	7af9      	ldrb	r1, [r7, #11]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	47a0      	blx	r4
 8008210:	6178      	str	r0, [r7, #20]

  return ret;
 8008212:	697b      	ldr	r3, [r7, #20]
}
 8008214:	4618      	mov	r0, r3
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	bd90      	pop	{r4, r7, pc}

0800821c <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800821c:	b590      	push	{r4, r7, lr}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	607a      	str	r2, [r7, #4]
 8008226:	461a      	mov	r2, r3
 8008228:	460b      	mov	r3, r1
 800822a:	72fb      	strb	r3, [r7, #11]
 800822c:	4613      	mov	r3, r2
 800822e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681c      	ldr	r4, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	68d8      	ldr	r0, [r3, #12]
 8008238:	893b      	ldrh	r3, [r7, #8]
 800823a:	7af9      	ldrb	r1, [r7, #11]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	47a0      	blx	r4
 8008240:	6178      	str	r0, [r7, #20]

  return ret;
 8008242:	697b      	ldr	r3, [r7, #20]
}
 8008244:	4618      	mov	r0, r3
 8008246:	371c      	adds	r7, #28
 8008248:	46bd      	mov	sp, r7
 800824a:	bd90      	pop	{r4, r7, pc}

0800824c <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008258:	f107 0208 	add.w	r2, r7, #8
 800825c:	2301      	movs	r3, #1
 800825e:	2110      	movs	r1, #16
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7ff ffc3 	bl	80081ec <lsm6dso_read_reg>
 8008266:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10f      	bne.n	800828e <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	f003 0303 	and.w	r3, r3, #3
 8008274:	b2da      	uxtb	r2, r3
 8008276:	7a3b      	ldrb	r3, [r7, #8]
 8008278:	f362 0383 	bfi	r3, r2, #2, #2
 800827c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800827e:	f107 0208 	add.w	r2, r7, #8
 8008282:	2301      	movs	r3, #1
 8008284:	2110      	movs	r1, #16
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7ff ffc8 	bl	800821c <lsm6dso_write_reg>
 800828c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800828e:	68fb      	ldr	r3, [r7, #12]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80082a2:	f107 0208 	add.w	r2, r7, #8
 80082a6:	2301      	movs	r3, #1
 80082a8:	2110      	movs	r1, #16
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff ff9e 	bl	80081ec <lsm6dso_read_reg>
 80082b0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80082b2:	7a3b      	ldrb	r3, [r7, #8]
 80082b4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d81a      	bhi.n	80082f4 <lsm6dso_xl_full_scale_get+0x5c>
 80082be:	a201      	add	r2, pc, #4	@ (adr r2, 80082c4 <lsm6dso_xl_full_scale_get+0x2c>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	080082dd 	.word	0x080082dd
 80082cc:	080082e5 	.word	0x080082e5
 80082d0:	080082ed 	.word	0x080082ed
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	2200      	movs	r2, #0
 80082d8:	701a      	strb	r2, [r3, #0]
      break;
 80082da:	e00f      	b.n	80082fc <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	2201      	movs	r2, #1
 80082e0:	701a      	strb	r2, [r3, #0]
      break;
 80082e2:	e00b      	b.n	80082fc <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2202      	movs	r2, #2
 80082e8:	701a      	strb	r2, [r3, #0]
      break;
 80082ea:	e007      	b.n	80082fc <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	2203      	movs	r2, #3
 80082f0:	701a      	strb	r2, [r3, #0]
      break;
 80082f2:	e003      	b.n	80082fc <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2200      	movs	r2, #0
 80082f8:	701a      	strb	r2, [r3, #0]
      break;
 80082fa:	bf00      	nop
  }

  return ret;
 80082fc:	68fb      	ldr	r3, [r7, #12]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop

08008308 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8008318:	f107 030c 	add.w	r3, r7, #12
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fcb6 	bl	8008c90 <lsm6dso_fsm_enable_get>
 8008324:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <lsm6dso_xl_data_rate_set+0x28>
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	e0e0      	b.n	80084f2 <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008330:	7b3b      	ldrb	r3, [r7, #12]
 8008332:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008336:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8008338:	7b3b      	ldrb	r3, [r7, #12]
 800833a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800833e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008340:	4313      	orrs	r3, r2
 8008342:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8008344:	7b3b      	ldrb	r3, [r7, #12]
 8008346:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800834a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 800834c:	4313      	orrs	r3, r2
 800834e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008350:	7b3b      	ldrb	r3, [r7, #12]
 8008352:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008356:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8008358:	4313      	orrs	r3, r2
 800835a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800835c:	7b3b      	ldrb	r3, [r7, #12]
 800835e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008362:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008364:	4313      	orrs	r3, r2
 8008366:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8008368:	7b3b      	ldrb	r3, [r7, #12]
 800836a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800836e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8008370:	4313      	orrs	r3, r2
 8008372:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8008374:	7b3b      	ldrb	r3, [r7, #12]
 8008376:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800837a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800837c:	4313      	orrs	r3, r2
 800837e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8008380:	7b3b      	ldrb	r3, [r7, #12]
 8008382:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008386:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8008388:	4313      	orrs	r3, r2
 800838a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800838c:	7b7b      	ldrb	r3, [r7, #13]
 800838e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008392:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8008394:	4313      	orrs	r3, r2
 8008396:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8008398:	7b7b      	ldrb	r3, [r7, #13]
 800839a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800839e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80083a0:	4313      	orrs	r3, r2
 80083a2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80083a4:	7b7b      	ldrb	r3, [r7, #13]
 80083a6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80083aa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80083ac:	4313      	orrs	r3, r2
 80083ae:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80083b0:	7b7b      	ldrb	r3, [r7, #13]
 80083b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80083b6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80083b8:	4313      	orrs	r3, r2
 80083ba:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80083bc:	7b7b      	ldrb	r3, [r7, #13]
 80083be:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80083c2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80083c4:	4313      	orrs	r3, r2
 80083c6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80083c8:	7b7b      	ldrb	r3, [r7, #13]
 80083ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80083ce:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80083d0:	4313      	orrs	r3, r2
 80083d2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80083d4:	7b7b      	ldrb	r3, [r7, #13]
 80083d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80083da:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80083dc:	4313      	orrs	r3, r2
 80083de:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80083e0:	7b7b      	ldrb	r3, [r7, #13]
 80083e2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80083e6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80083e8:	4313      	orrs	r3, r2
 80083ea:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d164      	bne.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80083f0:	f107 030b 	add.w	r3, r7, #11
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fc6c 	bl	8008cd4 <lsm6dso_fsm_data_rate_get>
 80083fc:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <lsm6dso_xl_data_rate_set+0x100>
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	e074      	b.n	80084f2 <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8008408:	7afb      	ldrb	r3, [r7, #11]
 800840a:	2b03      	cmp	r3, #3
 800840c:	d852      	bhi.n	80084b4 <lsm6dso_xl_data_rate_set+0x1ac>
 800840e:	a201      	add	r2, pc, #4	@ (adr r2, 8008414 <lsm6dso_xl_data_rate_set+0x10c>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	08008425 	.word	0x08008425
 8008418:	08008437 	.word	0x08008437
 800841c:	08008455 	.word	0x08008455
 8008420:	0800847f 	.word	0x0800847f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8008424:	78fb      	ldrb	r3, [r7, #3]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 800842a:	2301      	movs	r3, #1
 800842c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800842e:	e044      	b.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	75fb      	strb	r3, [r7, #23]
        break;
 8008434:	e041      	b.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d102      	bne.n	8008442 <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 800843c:	2302      	movs	r3, #2
 800843e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8008440:	e03b      	b.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d102      	bne.n	800844e <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8008448:	2302      	movs	r3, #2
 800844a:	75fb      	strb	r3, [r7, #23]
        break;
 800844c:	e035      	b.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800844e:	78fb      	ldrb	r3, [r7, #3]
 8008450:	75fb      	strb	r3, [r7, #23]
        break;
 8008452:	e032      	b.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d102      	bne.n	8008460 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800845a:	2303      	movs	r3, #3
 800845c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800845e:	e02c      	b.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8008460:	78fb      	ldrb	r3, [r7, #3]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d102      	bne.n	800846c <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8008466:	2303      	movs	r3, #3
 8008468:	75fb      	strb	r3, [r7, #23]
        break;
 800846a:	e026      	b.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 800846c:	78fb      	ldrb	r3, [r7, #3]
 800846e:	2b02      	cmp	r3, #2
 8008470:	d102      	bne.n	8008478 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8008472:	2303      	movs	r3, #3
 8008474:	75fb      	strb	r3, [r7, #23]
        break;
 8008476:	e020      	b.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8008478:	78fb      	ldrb	r3, [r7, #3]
 800847a:	75fb      	strb	r3, [r7, #23]
        break;
 800847c:	e01d      	b.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d102      	bne.n	800848a <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8008484:	2304      	movs	r3, #4
 8008486:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8008488:	e017      	b.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800848a:	78fb      	ldrb	r3, [r7, #3]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d102      	bne.n	8008496 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8008490:	2304      	movs	r3, #4
 8008492:	75fb      	strb	r3, [r7, #23]
        break;
 8008494:	e011      	b.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8008496:	78fb      	ldrb	r3, [r7, #3]
 8008498:	2b02      	cmp	r3, #2
 800849a:	d102      	bne.n	80084a2 <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800849c:	2304      	movs	r3, #4
 800849e:	75fb      	strb	r3, [r7, #23]
        break;
 80084a0:	e00b      	b.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 80084a2:	78fb      	ldrb	r3, [r7, #3]
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d102      	bne.n	80084ae <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80084a8:	2304      	movs	r3, #4
 80084aa:	75fb      	strb	r3, [r7, #23]
        break;
 80084ac:	e005      	b.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80084ae:	78fb      	ldrb	r3, [r7, #3]
 80084b0:	75fb      	strb	r3, [r7, #23]
        break;
 80084b2:	e002      	b.n	80084ba <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	75fb      	strb	r3, [r7, #23]
        break;
 80084b8:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80084ba:	f107 0208 	add.w	r2, r7, #8
 80084be:	2301      	movs	r3, #1
 80084c0:	2110      	movs	r1, #16
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7ff fe92 	bl	80081ec <lsm6dso_read_reg>
 80084c8:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
 80084cc:	f003 030f 	and.w	r3, r3, #15
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	7a3b      	ldrb	r3, [r7, #8]
 80084d4:	f362 1307 	bfi	r3, r2, #4, #4
 80084d8:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80084da:	f107 0208 	add.w	r2, r7, #8
 80084de:	2301      	movs	r3, #1
 80084e0:	2110      	movs	r1, #16
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7ff fe9a 	bl	800821c <lsm6dso_write_reg>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	4413      	add	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]

  return ret;
 80084f0:	693b      	ldr	r3, [r7, #16]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop

080084fc <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008506:	f107 0208 	add.w	r2, r7, #8
 800850a:	2301      	movs	r3, #1
 800850c:	2110      	movs	r1, #16
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7ff fe6c 	bl	80081ec <lsm6dso_read_reg>
 8008514:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8008516:	7a3b      	ldrb	r3, [r7, #8]
 8008518:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b0b      	cmp	r3, #11
 8008520:	d84a      	bhi.n	80085b8 <lsm6dso_xl_data_rate_get+0xbc>
 8008522:	a201      	add	r2, pc, #4	@ (adr r2, 8008528 <lsm6dso_xl_data_rate_get+0x2c>)
 8008524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008528:	08008559 	.word	0x08008559
 800852c:	08008561 	.word	0x08008561
 8008530:	08008569 	.word	0x08008569
 8008534:	08008571 	.word	0x08008571
 8008538:	08008579 	.word	0x08008579
 800853c:	08008581 	.word	0x08008581
 8008540:	08008589 	.word	0x08008589
 8008544:	08008591 	.word	0x08008591
 8008548:	08008599 	.word	0x08008599
 800854c:	080085a1 	.word	0x080085a1
 8008550:	080085a9 	.word	0x080085a9
 8008554:	080085b1 	.word	0x080085b1
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2200      	movs	r2, #0
 800855c:	701a      	strb	r2, [r3, #0]
      break;
 800855e:	e02f      	b.n	80085c0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2201      	movs	r2, #1
 8008564:	701a      	strb	r2, [r3, #0]
      break;
 8008566:	e02b      	b.n	80085c0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2202      	movs	r2, #2
 800856c:	701a      	strb	r2, [r3, #0]
      break;
 800856e:	e027      	b.n	80085c0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2203      	movs	r2, #3
 8008574:	701a      	strb	r2, [r3, #0]
      break;
 8008576:	e023      	b.n	80085c0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2204      	movs	r2, #4
 800857c:	701a      	strb	r2, [r3, #0]
      break;
 800857e:	e01f      	b.n	80085c0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2205      	movs	r2, #5
 8008584:	701a      	strb	r2, [r3, #0]
      break;
 8008586:	e01b      	b.n	80085c0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2206      	movs	r2, #6
 800858c:	701a      	strb	r2, [r3, #0]
      break;
 800858e:	e017      	b.n	80085c0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2207      	movs	r2, #7
 8008594:	701a      	strb	r2, [r3, #0]
      break;
 8008596:	e013      	b.n	80085c0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2208      	movs	r2, #8
 800859c:	701a      	strb	r2, [r3, #0]
      break;
 800859e:	e00f      	b.n	80085c0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2209      	movs	r2, #9
 80085a4:	701a      	strb	r2, [r3, #0]
      break;
 80085a6:	e00b      	b.n	80085c0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	220a      	movs	r2, #10
 80085ac:	701a      	strb	r2, [r3, #0]
      break;
 80085ae:	e007      	b.n	80085c0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	220b      	movs	r2, #11
 80085b4:	701a      	strb	r2, [r3, #0]
      break;
 80085b6:	e003      	b.n	80085c0 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2200      	movs	r2, #0
 80085bc:	701a      	strb	r2, [r3, #0]
      break;
 80085be:	bf00      	nop
  }

  return ret;
 80085c0:	68fb      	ldr	r3, [r7, #12]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop

080085cc <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80085d8:	f107 0208 	add.w	r2, r7, #8
 80085dc:	2301      	movs	r3, #1
 80085de:	2111      	movs	r1, #17
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7ff fe03 	bl	80081ec <lsm6dso_read_reg>
 80085e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10f      	bne.n	800860e <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80085ee:	78fb      	ldrb	r3, [r7, #3]
 80085f0:	f003 0307 	and.w	r3, r3, #7
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	7a3b      	ldrb	r3, [r7, #8]
 80085f8:	f362 0343 	bfi	r3, r2, #1, #3
 80085fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80085fe:	f107 0208 	add.w	r2, r7, #8
 8008602:	2301      	movs	r3, #1
 8008604:	2111      	movs	r1, #17
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7ff fe08 	bl	800821c <lsm6dso_write_reg>
 800860c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800860e:	68fb      	ldr	r3, [r7, #12]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008622:	f107 0208 	add.w	r2, r7, #8
 8008626:	2301      	movs	r3, #1
 8008628:	2111      	movs	r1, #17
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7ff fdde 	bl	80081ec <lsm6dso_read_reg>
 8008630:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8008632:	7a3b      	ldrb	r3, [r7, #8]
 8008634:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b06      	cmp	r3, #6
 800863c:	d824      	bhi.n	8008688 <lsm6dso_gy_full_scale_get+0x70>
 800863e:	a201      	add	r2, pc, #4	@ (adr r2, 8008644 <lsm6dso_gy_full_scale_get+0x2c>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	08008661 	.word	0x08008661
 8008648:	08008669 	.word	0x08008669
 800864c:	08008671 	.word	0x08008671
 8008650:	08008689 	.word	0x08008689
 8008654:	08008679 	.word	0x08008679
 8008658:	08008689 	.word	0x08008689
 800865c:	08008681 	.word	0x08008681
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	2200      	movs	r2, #0
 8008664:	701a      	strb	r2, [r3, #0]
      break;
 8008666:	e013      	b.n	8008690 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	2201      	movs	r2, #1
 800866c:	701a      	strb	r2, [r3, #0]
      break;
 800866e:	e00f      	b.n	8008690 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2202      	movs	r2, #2
 8008674:	701a      	strb	r2, [r3, #0]
      break;
 8008676:	e00b      	b.n	8008690 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2204      	movs	r2, #4
 800867c:	701a      	strb	r2, [r3, #0]
      break;
 800867e:	e007      	b.n	8008690 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2206      	movs	r2, #6
 8008684:	701a      	strb	r2, [r3, #0]
      break;
 8008686:	e003      	b.n	8008690 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2200      	movs	r2, #0
 800868c:	701a      	strb	r2, [r3, #0]
      break;
 800868e:	bf00      	nop
  }

  return ret;
 8008690:	68fb      	ldr	r3, [r7, #12]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop

0800869c <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 80086a8:	78fb      	ldrb	r3, [r7, #3]
 80086aa:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80086ac:	f107 030c 	add.w	r3, r7, #12
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 faec 	bl	8008c90 <lsm6dso_fsm_enable_get>
 80086b8:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <lsm6dso_gy_data_rate_set+0x28>
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	e0e0      	b.n	8008886 <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80086c4:	7b3b      	ldrb	r3, [r7, #12]
 80086c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80086ca:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80086cc:	7b3b      	ldrb	r3, [r7, #12]
 80086ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80086d2:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80086d4:	4313      	orrs	r3, r2
 80086d6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80086d8:	7b3b      	ldrb	r3, [r7, #12]
 80086da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80086de:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80086e0:	4313      	orrs	r3, r2
 80086e2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80086e4:	7b3b      	ldrb	r3, [r7, #12]
 80086e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80086ea:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80086ec:	4313      	orrs	r3, r2
 80086ee:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80086f0:	7b3b      	ldrb	r3, [r7, #12]
 80086f2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80086f6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80086f8:	4313      	orrs	r3, r2
 80086fa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80086fc:	7b3b      	ldrb	r3, [r7, #12]
 80086fe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008702:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8008704:	4313      	orrs	r3, r2
 8008706:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8008708:	7b3b      	ldrb	r3, [r7, #12]
 800870a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800870e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8008710:	4313      	orrs	r3, r2
 8008712:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8008714:	7b3b      	ldrb	r3, [r7, #12]
 8008716:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800871a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800871c:	4313      	orrs	r3, r2
 800871e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8008720:	7b7b      	ldrb	r3, [r7, #13]
 8008722:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008726:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8008728:	4313      	orrs	r3, r2
 800872a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800872c:	7b7b      	ldrb	r3, [r7, #13]
 800872e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008732:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8008734:	4313      	orrs	r3, r2
 8008736:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8008738:	7b7b      	ldrb	r3, [r7, #13]
 800873a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800873e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8008740:	4313      	orrs	r3, r2
 8008742:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8008744:	7b7b      	ldrb	r3, [r7, #13]
 8008746:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800874a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800874c:	4313      	orrs	r3, r2
 800874e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8008750:	7b7b      	ldrb	r3, [r7, #13]
 8008752:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008756:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8008758:	4313      	orrs	r3, r2
 800875a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800875c:	7b7b      	ldrb	r3, [r7, #13]
 800875e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008762:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8008764:	4313      	orrs	r3, r2
 8008766:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8008768:	7b7b      	ldrb	r3, [r7, #13]
 800876a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800876e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8008770:	4313      	orrs	r3, r2
 8008772:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8008774:	7b7b      	ldrb	r3, [r7, #13]
 8008776:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800877a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800877c:	4313      	orrs	r3, r2
 800877e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008780:	2b01      	cmp	r3, #1
 8008782:	d164      	bne.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8008784:	f107 030b 	add.w	r3, r7, #11
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 faa2 	bl	8008cd4 <lsm6dso_fsm_data_rate_get>
 8008790:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <lsm6dso_gy_data_rate_set+0x100>
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	e074      	b.n	8008886 <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 800879c:	7afb      	ldrb	r3, [r7, #11]
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d852      	bhi.n	8008848 <lsm6dso_gy_data_rate_set+0x1ac>
 80087a2:	a201      	add	r2, pc, #4	@ (adr r2, 80087a8 <lsm6dso_gy_data_rate_set+0x10c>)
 80087a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a8:	080087b9 	.word	0x080087b9
 80087ac:	080087cb 	.word	0x080087cb
 80087b0:	080087e9 	.word	0x080087e9
 80087b4:	08008813 	.word	0x08008813
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d102      	bne.n	80087c4 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80087be:	2301      	movs	r3, #1
 80087c0:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80087c2:	e044      	b.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	75fb      	strb	r3, [r7, #23]
        break;
 80087c8:	e041      	b.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80087ca:	78fb      	ldrb	r3, [r7, #3]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d102      	bne.n	80087d6 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80087d0:	2302      	movs	r3, #2
 80087d2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80087d4:	e03b      	b.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80087d6:	78fb      	ldrb	r3, [r7, #3]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d102      	bne.n	80087e2 <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80087dc:	2302      	movs	r3, #2
 80087de:	75fb      	strb	r3, [r7, #23]
        break;
 80087e0:	e035      	b.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	75fb      	strb	r3, [r7, #23]
        break;
 80087e6:	e032      	b.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80087e8:	78fb      	ldrb	r3, [r7, #3]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d102      	bne.n	80087f4 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80087ee:	2303      	movs	r3, #3
 80087f0:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80087f2:	e02c      	b.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80087f4:	78fb      	ldrb	r3, [r7, #3]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d102      	bne.n	8008800 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80087fa:	2303      	movs	r3, #3
 80087fc:	75fb      	strb	r3, [r7, #23]
        break;
 80087fe:	e026      	b.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	2b02      	cmp	r3, #2
 8008804:	d102      	bne.n	800880c <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008806:	2303      	movs	r3, #3
 8008808:	75fb      	strb	r3, [r7, #23]
        break;
 800880a:	e020      	b.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800880c:	78fb      	ldrb	r3, [r7, #3]
 800880e:	75fb      	strb	r3, [r7, #23]
        break;
 8008810:	e01d      	b.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8008812:	78fb      	ldrb	r3, [r7, #3]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d102      	bne.n	800881e <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008818:	2304      	movs	r3, #4
 800881a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800881c:	e017      	b.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d102      	bne.n	800882a <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008824:	2304      	movs	r3, #4
 8008826:	75fb      	strb	r3, [r7, #23]
        break;
 8008828:	e011      	b.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	2b02      	cmp	r3, #2
 800882e:	d102      	bne.n	8008836 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008830:	2304      	movs	r3, #4
 8008832:	75fb      	strb	r3, [r7, #23]
        break;
 8008834:	e00b      	b.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8008836:	78fb      	ldrb	r3, [r7, #3]
 8008838:	2b03      	cmp	r3, #3
 800883a:	d102      	bne.n	8008842 <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800883c:	2304      	movs	r3, #4
 800883e:	75fb      	strb	r3, [r7, #23]
        break;
 8008840:	e005      	b.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8008842:	78fb      	ldrb	r3, [r7, #3]
 8008844:	75fb      	strb	r3, [r7, #23]
        break;
 8008846:	e002      	b.n	800884e <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8008848:	78fb      	ldrb	r3, [r7, #3]
 800884a:	75fb      	strb	r3, [r7, #23]
        break;
 800884c:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800884e:	f107 0208 	add.w	r2, r7, #8
 8008852:	2301      	movs	r3, #1
 8008854:	2111      	movs	r1, #17
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff fcc8 	bl	80081ec <lsm6dso_read_reg>
 800885c:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 800885e:	7dfb      	ldrb	r3, [r7, #23]
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	b2da      	uxtb	r2, r3
 8008866:	7a3b      	ldrb	r3, [r7, #8]
 8008868:	f362 1307 	bfi	r3, r2, #4, #4
 800886c:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800886e:	f107 0208 	add.w	r2, r7, #8
 8008872:	2301      	movs	r3, #1
 8008874:	2111      	movs	r1, #17
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7ff fcd0 	bl	800821c <lsm6dso_write_reg>
 800887c:	4602      	mov	r2, r0
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	4413      	add	r3, r2
 8008882:	613b      	str	r3, [r7, #16]

  return ret;
 8008884:	693b      	ldr	r3, [r7, #16]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop

08008890 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800889a:	f107 0208 	add.w	r2, r7, #8
 800889e:	2301      	movs	r3, #1
 80088a0:	2111      	movs	r1, #17
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7ff fca2 	bl	80081ec <lsm6dso_read_reg>
 80088a8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80088aa:	7a3b      	ldrb	r3, [r7, #8]
 80088ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b0a      	cmp	r3, #10
 80088b4:	d844      	bhi.n	8008940 <lsm6dso_gy_data_rate_get+0xb0>
 80088b6:	a201      	add	r2, pc, #4	@ (adr r2, 80088bc <lsm6dso_gy_data_rate_get+0x2c>)
 80088b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088bc:	080088e9 	.word	0x080088e9
 80088c0:	080088f1 	.word	0x080088f1
 80088c4:	080088f9 	.word	0x080088f9
 80088c8:	08008901 	.word	0x08008901
 80088cc:	08008909 	.word	0x08008909
 80088d0:	08008911 	.word	0x08008911
 80088d4:	08008919 	.word	0x08008919
 80088d8:	08008921 	.word	0x08008921
 80088dc:	08008929 	.word	0x08008929
 80088e0:	08008931 	.word	0x08008931
 80088e4:	08008939 	.word	0x08008939
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2200      	movs	r2, #0
 80088ec:	701a      	strb	r2, [r3, #0]
      break;
 80088ee:	e02b      	b.n	8008948 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2201      	movs	r2, #1
 80088f4:	701a      	strb	r2, [r3, #0]
      break;
 80088f6:	e027      	b.n	8008948 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2202      	movs	r2, #2
 80088fc:	701a      	strb	r2, [r3, #0]
      break;
 80088fe:	e023      	b.n	8008948 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2203      	movs	r2, #3
 8008904:	701a      	strb	r2, [r3, #0]
      break;
 8008906:	e01f      	b.n	8008948 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	2204      	movs	r2, #4
 800890c:	701a      	strb	r2, [r3, #0]
      break;
 800890e:	e01b      	b.n	8008948 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	2205      	movs	r2, #5
 8008914:	701a      	strb	r2, [r3, #0]
      break;
 8008916:	e017      	b.n	8008948 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2206      	movs	r2, #6
 800891c:	701a      	strb	r2, [r3, #0]
      break;
 800891e:	e013      	b.n	8008948 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	2207      	movs	r2, #7
 8008924:	701a      	strb	r2, [r3, #0]
      break;
 8008926:	e00f      	b.n	8008948 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2208      	movs	r2, #8
 800892c:	701a      	strb	r2, [r3, #0]
      break;
 800892e:	e00b      	b.n	8008948 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	2209      	movs	r2, #9
 8008934:	701a      	strb	r2, [r3, #0]
      break;
 8008936:	e007      	b.n	8008948 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	220a      	movs	r2, #10
 800893c:	701a      	strb	r2, [r3, #0]
      break;
 800893e:	e003      	b.n	8008948 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2200      	movs	r2, #0
 8008944:	701a      	strb	r2, [r3, #0]
      break;
 8008946:	bf00      	nop
  }

  return ret;
 8008948:	68fb      	ldr	r3, [r7, #12]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop

08008954 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008960:	f107 0208 	add.w	r2, r7, #8
 8008964:	2301      	movs	r3, #1
 8008966:	2112      	movs	r1, #18
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff fc3f 	bl	80081ec <lsm6dso_read_reg>
 800896e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10f      	bne.n	8008996 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8008976:	78fb      	ldrb	r3, [r7, #3]
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	b2da      	uxtb	r2, r3
 800897e:	7a3b      	ldrb	r3, [r7, #8]
 8008980:	f362 1386 	bfi	r3, r2, #6, #1
 8008984:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008986:	f107 0208 	add.w	r2, r7, #8
 800898a:	2301      	movs	r3, #1
 800898c:	2112      	movs	r1, #18
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff fc44 	bl	800821c <lsm6dso_write_reg>
 8008994:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008996:	68fb      	ldr	r3, [r7, #12]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80089aa:	f107 020c 	add.w	r2, r7, #12
 80089ae:	2306      	movs	r3, #6
 80089b0:	2122      	movs	r1, #34	@ 0x22
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7ff fc1a 	bl	80081ec <lsm6dso_read_reg>
 80089b8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80089ba:	7b7b      	ldrb	r3, [r7, #13]
 80089bc:	b21a      	sxth	r2, r3
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	021b      	lsls	r3, r3, #8
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	7b3a      	ldrb	r2, [r7, #12]
 80089d0:	4413      	add	r3, r2
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	b21a      	sxth	r2, r3
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80089da:	7bfa      	ldrb	r2, [r7, #15]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	3302      	adds	r3, #2
 80089e0:	b212      	sxth	r2, r2
 80089e2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	3302      	adds	r3, #2
 80089e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	021b      	lsls	r3, r3, #8
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	7bba      	ldrb	r2, [r7, #14]
 80089f4:	4413      	add	r3, r2
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	3302      	adds	r3, #2
 80089fc:	b212      	sxth	r2, r2
 80089fe:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008a00:	7c7a      	ldrb	r2, [r7, #17]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	3304      	adds	r3, #4
 8008a06:	b212      	sxth	r2, r2
 8008a08:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	7c3a      	ldrb	r2, [r7, #16]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	3304      	adds	r3, #4
 8008a22:	b212      	sxth	r2, r2
 8008a24:	801a      	strh	r2, [r3, #0]

  return ret;
 8008a26:	697b      	ldr	r3, [r7, #20]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8008a3a:	f107 020c 	add.w	r2, r7, #12
 8008a3e:	2306      	movs	r3, #6
 8008a40:	2128      	movs	r1, #40	@ 0x28
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7ff fbd2 	bl	80081ec <lsm6dso_read_reg>
 8008a48:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008a4a:	7b7b      	ldrb	r3, [r7, #13]
 8008a4c:	b21a      	sxth	r2, r3
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	021b      	lsls	r3, r3, #8
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	7b3a      	ldrb	r2, [r7, #12]
 8008a60:	4413      	add	r3, r2
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	b21a      	sxth	r2, r3
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008a6a:	7bfa      	ldrb	r2, [r7, #15]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	3302      	adds	r3, #2
 8008a70:	b212      	sxth	r2, r2
 8008a72:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	3302      	adds	r3, #2
 8008a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	021b      	lsls	r3, r3, #8
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	7bba      	ldrb	r2, [r7, #14]
 8008a84:	4413      	add	r3, r2
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	3302      	adds	r3, #2
 8008a8c:	b212      	sxth	r2, r2
 8008a8e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008a90:	7c7a      	ldrb	r2, [r7, #17]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	3304      	adds	r3, #4
 8008a96:	b212      	sxth	r2, r2
 8008a98:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	021b      	lsls	r3, r3, #8
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	7c3a      	ldrb	r2, [r7, #16]
 8008aaa:	4413      	add	r3, r2
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	b212      	sxth	r2, r2
 8008ab4:	801a      	strh	r2, [r3, #0]

  return ret;
 8008ab6:	697b      	ldr	r3, [r7, #20]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8008acc:	2300      	movs	r3, #0
 8008ace:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	7a3b      	ldrb	r3, [r7, #8]
 8008ada:	f362 1387 	bfi	r3, r2, #6, #2
 8008ade:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8008ae0:	f107 0208 	add.w	r2, r7, #8
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7ff fb97 	bl	800821c <lsm6dso_write_reg>
 8008aee:	60f8      	str	r0, [r7, #12]

  return ret;
 8008af0:	68fb      	ldr	r3, [r7, #12]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b084      	sub	sp, #16
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8008b04:	2301      	movs	r3, #1
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	210f      	movs	r1, #15
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff fb6e 	bl	80081ec <lsm6dso_read_reg>
 8008b10:	60f8      	str	r0, [r7, #12]

  return ret;
 8008b12:	68fb      	ldr	r3, [r7, #12]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008b28:	f107 0208 	add.w	r2, r7, #8
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	2112      	movs	r1, #18
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7ff fb5b 	bl	80081ec <lsm6dso_read_reg>
 8008b36:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d10f      	bne.n	8008b5e <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8008b3e:	78fb      	ldrb	r3, [r7, #3]
 8008b40:	f003 0301 	and.w	r3, r3, #1
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	7a3b      	ldrb	r3, [r7, #8]
 8008b48:	f362 0382 	bfi	r3, r2, #2, #1
 8008b4c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008b4e:	f107 0208 	add.w	r2, r7, #8
 8008b52:	2301      	movs	r3, #1
 8008b54:	2112      	movs	r1, #18
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7ff fb60 	bl	800821c <lsm6dso_write_reg>
 8008b5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8008b74:	f107 020c 	add.w	r2, r7, #12
 8008b78:	2301      	movs	r3, #1
 8008b7a:	2118      	movs	r1, #24
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff fb35 	bl	80081ec <lsm6dso_read_reg>
 8008b82:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8008b84:	78fb      	ldrb	r3, [r7, #3]
 8008b86:	09db      	lsrs	r3, r3, #7
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	7b3b      	ldrb	r3, [r7, #12]
 8008b92:	f362 0341 	bfi	r3, r2, #1, #1
 8008b96:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8008b98:	f107 020c 	add.w	r2, r7, #12
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	2118      	movs	r1, #24
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff fb3b 	bl	800821c <lsm6dso_write_reg>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	4413      	add	r3, r2
 8008bac:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <lsm6dso_i3c_disable_set+0x50>
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	e01b      	b.n	8008bf0 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8008bb8:	f107 0210 	add.w	r2, r7, #16
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	2162      	movs	r1, #98	@ 0x62
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff fb13 	bl	80081ec <lsm6dso_read_reg>
 8008bc6:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8008bc8:	78fb      	ldrb	r3, [r7, #3]
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	7c3b      	ldrb	r3, [r7, #16]
 8008bd2:	f362 03c4 	bfi	r3, r2, #3, #2
 8008bd6:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8008bd8:	f107 0210 	add.w	r2, r7, #16
 8008bdc:	2301      	movs	r3, #1
 8008bde:	2162      	movs	r1, #98	@ 0x62
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7ff fb1b 	bl	800821c <lsm6dso_write_reg>
 8008be6:	4602      	mov	r2, r0
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	4413      	add	r3, r2
 8008bec:	617b      	str	r3, [r7, #20]

  return ret;
 8008bee:	697b      	ldr	r3, [r7, #20]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3718      	adds	r7, #24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <lsm6dso_6d_threshold_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_6d_threshold_set(stmdev_ctx_t *ctx,
                                 lsm6dso_sixd_ths_t val)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	70fb      	strb	r3, [r7, #3]
  lsm6dso_tap_ths_6d_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t *)&reg, 1);
 8008c04:	f107 0208 	add.w	r2, r7, #8
 8008c08:	2301      	movs	r3, #1
 8008c0a:	2159      	movs	r1, #89	@ 0x59
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff faed 	bl	80081ec <lsm6dso_read_reg>
 8008c12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10f      	bne.n	8008c3a <lsm6dso_6d_threshold_set+0x42>
  {
    reg.sixd_ths = (uint8_t)val;
 8008c1a:	78fb      	ldrb	r3, [r7, #3]
 8008c1c:	f003 0303 	and.w	r3, r3, #3
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	7a3b      	ldrb	r3, [r7, #8]
 8008c24:	f362 1346 	bfi	r3, r2, #5, #2
 8008c28:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t *)&reg, 1);
 8008c2a:	f107 0208 	add.w	r2, r7, #8
 8008c2e:	2301      	movs	r3, #1
 8008c30:	2159      	movs	r1, #89	@ 0x59
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7ff faf2 	bl	800821c <lsm6dso_write_reg>
 8008c38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8008c50:	f107 0208 	add.w	r2, r7, #8
 8008c54:	2301      	movs	r3, #1
 8008c56:	210a      	movs	r1, #10
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff fac7 	bl	80081ec <lsm6dso_read_reg>
 8008c5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10f      	bne.n	8008c86 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8008c66:	78fb      	ldrb	r3, [r7, #3]
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	7a3b      	ldrb	r3, [r7, #8]
 8008c70:	f362 0302 	bfi	r3, r2, #0, #3
 8008c74:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8008c76:	f107 0208 	add.w	r2, r7, #8
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	210a      	movs	r1, #10
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff facc 	bl	800821c <lsm6dso_write_reg>
 8008c84:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008c86:	68fb      	ldr	r3, [r7, #12]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8008c9a:	2102      	movs	r1, #2
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff ff0f 	bl	8008ac0 <lsm6dso_mem_bank_set>
 8008ca2:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	2146      	movs	r1, #70	@ 0x46
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7ff fa9e 	bl	80081ec <lsm6dso_read_reg>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008cb8:	2100      	movs	r1, #0
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff ff00 	bl	8008ac0 <lsm6dso_mem_bank_set>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]

  return ret;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
	...

08008cd4 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8008cde:	2102      	movs	r1, #2
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7ff feed 	bl	8008ac0 <lsm6dso_mem_bank_set>
 8008ce6:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <lsm6dso_fsm_data_rate_get+0x1e>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	e03a      	b.n	8008d68 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8008cf2:	f107 0208 	add.w	r2, r7, #8
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	215f      	movs	r1, #95	@ 0x5f
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7ff fa76 	bl	80081ec <lsm6dso_read_reg>
 8008d00:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d125      	bne.n	8008d54 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8008d08:	7a3b      	ldrb	r3, [r7, #8]
 8008d0a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b03      	cmp	r3, #3
 8008d12:	d81b      	bhi.n	8008d4c <lsm6dso_fsm_data_rate_get+0x78>
 8008d14:	a201      	add	r2, pc, #4	@ (adr r2, 8008d1c <lsm6dso_fsm_data_rate_get+0x48>)
 8008d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1a:	bf00      	nop
 8008d1c:	08008d2d 	.word	0x08008d2d
 8008d20:	08008d35 	.word	0x08008d35
 8008d24:	08008d3d 	.word	0x08008d3d
 8008d28:	08008d45 	.word	0x08008d45
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	701a      	strb	r2, [r3, #0]
      break;
 8008d32:	e010      	b.n	8008d56 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2201      	movs	r2, #1
 8008d38:	701a      	strb	r2, [r3, #0]
      break;
 8008d3a:	e00c      	b.n	8008d56 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	701a      	strb	r2, [r3, #0]
      break;
 8008d42:	e008      	b.n	8008d56 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	2203      	movs	r2, #3
 8008d48:	701a      	strb	r2, [r3, #0]
      break;
 8008d4a:	e004      	b.n	8008d56 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	701a      	strb	r2, [r3, #0]
      break;
 8008d52:	e000      	b.n	8008d56 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8008d54:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008d56:	2100      	movs	r1, #0
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff feb1 	bl	8008ac0 <lsm6dso_mem_bank_set>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4413      	add	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]

  return ret;
 8008d66:	68fb      	ldr	r3, [r7, #12]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <lsm6dso_pin_int1_route_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t val)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b090      	sub	sp, #64	@ 0x40
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	1d3b      	adds	r3, r7, #4
 8008d7a:	e883 0006 	stmia.w	r3, {r1, r2}
  lsm6dso_pin_int2_route_t  pin_int2_route;
  lsm6dso_emb_func_int1_t   emb_func_int1;
  lsm6dso_fsm_int1_a_t      fsm_int1_a;
  lsm6dso_fsm_int1_b_t      fsm_int1_b;
  lsm6dso_int1_ctrl_t       int1_ctrl = {0};
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  /* INT1_CTRL */
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8008d84:	793b      	ldrb	r3, [r7, #4]
 8008d86:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d90:	f362 0300 	bfi	r3, r2, #0, #1
 8008d94:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 8008d98:	793b      	ldrb	r3, [r7, #4]
 8008d9a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008da4:	f362 0341 	bfi	r3, r2, #1, #1
 8008da8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_boot      = val.boot;
 8008dac:	793b      	ldrb	r3, [r7, #4]
 8008dae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008db8:	f362 0382 	bfi	r3, r2, #2, #1
 8008dbc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 8008dc0:	793b      	ldrb	r3, [r7, #4]
 8008dc2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008dcc:	f362 03c3 	bfi	r3, r2, #3, #1
 8008dd0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 8008dd4:	793b      	ldrb	r3, [r7, #4]
 8008dd6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008de0:	f362 1304 	bfi	r3, r2, #4, #1
 8008de4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_full = val.fifo_full;
 8008de8:	793b      	ldrb	r3, [r7, #4]
 8008dea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008dee:	b2da      	uxtb	r2, r3
 8008df0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008df4:	f362 1345 	bfi	r3, r2, #5, #1
 8008df8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 8008dfc:	793b      	ldrb	r3, [r7, #4]
 8008dfe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008e08:	f362 1386 	bfi	r3, r2, #6, #1
 8008e0c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.den_drdy_flag  = val.den_flag;
 8008e10:	797b      	ldrb	r3, [r7, #5]
 8008e12:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008e1c:	f362 13c7 	bfi	r3, r2, #7, #1
 8008e20:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  ret = lsm6dso_write_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8008e24:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8008e28:	2301      	movs	r3, #1
 8008e2a:	210d      	movs	r1, #13
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f7ff f9f5 	bl	800821c <lsm6dso_write_reg>
 8008e32:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <lsm6dso_pin_int1_route_set+0xce>
 8008e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e3c:	e33a      	b.n	80094b4 <lsm6dso_pin_int1_route_set+0x744>

  /* DRDY for temperature and/or timestamp */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8008e3e:	f107 0210 	add.w	r2, r7, #16
 8008e42:	2301      	movs	r3, #1
 8008e44:	2113      	movs	r1, #19
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f7ff f9d0 	bl	80081ec <lsm6dso_read_reg>
 8008e4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <lsm6dso_pin_int1_route_set+0xe8>
 8008e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e56:	e32d      	b.n	80094b4 <lsm6dso_pin_int1_route_set+0x744>

  if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8008e58:	793b      	ldrb	r3, [r7, #4]
 8008e5a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	797b      	ldrb	r3, [r7, #5]
 8008e62:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d004      	beq.n	8008e7a <lsm6dso_pin_int1_route_set+0x10a>
  {
    ctrl4_c.int2_on_int1 = PROPERTY_ENABLE;
 8008e70:	7c3b      	ldrb	r3, [r7, #16]
 8008e72:	f043 0320 	orr.w	r3, r3, #32
 8008e76:	743b      	strb	r3, [r7, #16]
 8008e78:	e003      	b.n	8008e82 <lsm6dso_pin_int1_route_set+0x112>
  }
  else
  {
    ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8008e7a:	7c3b      	ldrb	r3, [r7, #16]
 8008e7c:	f36f 1345 	bfc	r3, #5, #1
 8008e80:	743b      	strb	r3, [r7, #16]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8008e82:	f107 0210 	add.w	r2, r7, #16
 8008e86:	2301      	movs	r3, #1
 8008e88:	2113      	movs	r1, #19
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f7ff f9c6 	bl	800821c <lsm6dso_write_reg>
 8008e90:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <lsm6dso_pin_int1_route_set+0x12c>
 8008e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e9a:	e30b      	b.n	80094b4 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8008e9c:	f107 0220 	add.w	r2, r7, #32
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	210e      	movs	r1, #14
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f7ff f9a1 	bl	80081ec <lsm6dso_read_reg>
 8008eaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
  int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8008eac:	793b      	ldrb	r3, [r7, #4]
 8008eae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008eb8:	f362 0382 	bfi	r3, r2, #2, #1
 8008ebc:	f887 3020 	strb.w	r3, [r7, #32]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8008ec0:	f107 0220 	add.w	r2, r7, #32
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	210e      	movs	r1, #14
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f7ff f9a7 	bl	800821c <lsm6dso_write_reg>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ed2:	4413      	add	r3, r2
 8008ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <lsm6dso_pin_int1_route_set+0x170>
 8008edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ede:	e2e9      	b.n	80094b4 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8008ee0:	f107 0218 	add.w	r2, r7, #24
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	215f      	movs	r1, #95	@ 0x5f
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f7ff f97f 	bl	80081ec <lsm6dso_read_reg>
 8008eee:	63f8      	str	r0, [r7, #60]	@ 0x3c
  md2_cfg.int2_timestamp = val.timestamp;
 8008ef0:	797b      	ldrb	r3, [r7, #5]
 8008ef2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	7e3b      	ldrb	r3, [r7, #24]
 8008efa:	f362 0300 	bfi	r3, r2, #0, #1
 8008efe:	763b      	strb	r3, [r7, #24]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8008f00:	f107 0218 	add.w	r2, r7, #24
 8008f04:	2301      	movs	r3, #1
 8008f06:	215f      	movs	r1, #95	@ 0x5f
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f7ff f987 	bl	800821c <lsm6dso_write_reg>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f12:	4413      	add	r3, r2
 8008f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <lsm6dso_pin_int1_route_set+0x1b0>
 8008f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f1e:	e2c9      	b.n	80094b4 <lsm6dso_pin_int1_route_set+0x744>

  /* emmbedded and FSM events */
  emb_func_int1.not_used_01 = 0;
 8008f20:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008f24:	f36f 0302 	bfc	r3, #0, #3
 8008f28:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_step_detector = val.step_detector;
 8008f2c:	79bb      	ldrb	r3, [r7, #6]
 8008f2e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008f38:	f362 03c3 	bfi	r3, r2, #3, #1
 8008f3c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_tilt          = val.tilt;
 8008f40:	79bb      	ldrb	r3, [r7, #6]
 8008f42:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008f46:	b2da      	uxtb	r2, r3
 8008f48:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008f4c:	f362 1304 	bfi	r3, r2, #4, #1
 8008f50:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 8008f54:	79bb      	ldrb	r3, [r7, #6]
 8008f56:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008f5a:	b2da      	uxtb	r2, r3
 8008f5c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008f60:	f362 1345 	bfi	r3, r2, #5, #1
 8008f64:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.not_used_02 = 0;
 8008f68:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008f6c:	f36f 1386 	bfc	r3, #6, #1
 8008f70:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 8008f74:	79bb      	ldrb	r3, [r7, #6]
 8008f76:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008f7a:	b2da      	uxtb	r2, r3
 8008f7c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008f80:	f362 13c7 	bfi	r3, r2, #7, #1
 8008f84:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8008f88:	79bb      	ldrb	r3, [r7, #6]
 8008f8a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f94:	f362 0300 	bfi	r3, r2, #0, #1
 8008f98:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm2 = val.fsm2;
 8008f9c:	79bb      	ldrb	r3, [r7, #6]
 8008f9e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008fa8:	f362 0341 	bfi	r3, r2, #1, #1
 8008fac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm3 = val.fsm3;
 8008fb0:	79bb      	ldrb	r3, [r7, #6]
 8008fb2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008fbc:	f362 0382 	bfi	r3, r2, #2, #1
 8008fc0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm4 = val.fsm4;
 8008fc4:	79fb      	ldrb	r3, [r7, #7]
 8008fc6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008fd0:	f362 03c3 	bfi	r3, r2, #3, #1
 8008fd4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm5 = val.fsm5;
 8008fd8:	79fb      	ldrb	r3, [r7, #7]
 8008fda:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008fe4:	f362 1304 	bfi	r3, r2, #4, #1
 8008fe8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm6 = val.fsm6;
 8008fec:	79fb      	ldrb	r3, [r7, #7]
 8008fee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008ff8:	f362 1345 	bfi	r3, r2, #5, #1
 8008ffc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm7 = val.fsm7;
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009006:	b2da      	uxtb	r2, r3
 8009008:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800900c:	f362 1386 	bfi	r3, r2, #6, #1
 8009010:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm8 = val.fsm8;
 8009014:	79fb      	ldrb	r3, [r7, #7]
 8009016:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800901a:	b2da      	uxtb	r2, r3
 800901c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009020:	f362 13c7 	bfi	r3, r2, #7, #1
 8009024:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8009028:	79fb      	ldrb	r3, [r7, #7]
 800902a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800902e:	b2da      	uxtb	r2, r3
 8009030:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009034:	f362 0300 	bfi	r3, r2, #0, #1
 8009038:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm10 = val.fsm10;
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009042:	b2da      	uxtb	r2, r3
 8009044:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009048:	f362 0341 	bfi	r3, r2, #1, #1
 800904c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm11 = val.fsm11;
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009056:	b2da      	uxtb	r2, r3
 8009058:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800905c:	f362 0382 	bfi	r3, r2, #2, #1
 8009060:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm12 = val.fsm12;
 8009064:	7a3b      	ldrb	r3, [r7, #8]
 8009066:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800906a:	b2da      	uxtb	r2, r3
 800906c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009070:	f362 03c3 	bfi	r3, r2, #3, #1
 8009074:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm13 = val.fsm13;
 8009078:	7a3b      	ldrb	r3, [r7, #8]
 800907a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800907e:	b2da      	uxtb	r2, r3
 8009080:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009084:	f362 1304 	bfi	r3, r2, #4, #1
 8009088:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm14 = val.fsm14;
 800908c:	7a3b      	ldrb	r3, [r7, #8]
 800908e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009092:	b2da      	uxtb	r2, r3
 8009094:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009098:	f362 1345 	bfi	r3, r2, #5, #1
 800909c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm15 = val.fsm15;
 80090a0:	7a3b      	ldrb	r3, [r7, #8]
 80090a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80090ac:	f362 1386 	bfi	r3, r2, #6, #1
 80090b0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm16 = val.fsm16;
 80090b4:	7a3b      	ldrb	r3, [r7, #8]
 80090b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80090c0:	f362 13c7 	bfi	r3, r2, #7, #1
 80090c4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80090c8:	2102      	movs	r1, #2
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f7ff fcf8 	bl	8008ac0 <lsm6dso_mem_bank_set>
 80090d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80090d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <lsm6dso_pin_int1_route_set+0x36c>
 80090d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090da:	e1eb      	b.n	80094b4 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 80090dc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80090e0:	2301      	movs	r3, #1
 80090e2:	210a      	movs	r1, #10
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f7ff f899 	bl	800821c <lsm6dso_write_reg>
 80090ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 80090ec:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80090f0:	2301      	movs	r3, #1
 80090f2:	210b      	movs	r1, #11
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f7ff f891 	bl	800821c <lsm6dso_write_reg>
 80090fa:	4602      	mov	r2, r0
 80090fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090fe:	4413      	add	r3, r2
 8009100:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 8009102:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8009106:	2301      	movs	r3, #1
 8009108:	210c      	movs	r1, #12
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f7ff f886 	bl	800821c <lsm6dso_write_reg>
 8009110:	4602      	mov	r2, r0
 8009112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009114:	4413      	add	r3, r2
 8009116:	63fb      	str	r3, [r7, #60]	@ 0x3c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009118:	2100      	movs	r1, #0
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f7ff fcd0 	bl	8008ac0 <lsm6dso_mem_bank_set>
 8009120:	4602      	mov	r2, r0
 8009122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009124:	4413      	add	r3, r2
 8009126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8009128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <lsm6dso_pin_int1_route_set+0x3c2>
 800912e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009130:	e1c0      	b.n	80094b4 <lsm6dso_pin_int1_route_set+0x744>

  /* MD1_CFG */
  md1_cfg.int1_shub         = val.sh_endop;
 8009132:	797b      	ldrb	r3, [r7, #5]
 8009134:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009138:	b2da      	uxtb	r2, r3
 800913a:	7d3b      	ldrb	r3, [r7, #20]
 800913c:	f362 0300 	bfi	r3, r2, #0, #1
 8009140:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_6d           = val.six_d;
 8009142:	797b      	ldrb	r3, [r7, #5]
 8009144:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009148:	b2da      	uxtb	r2, r3
 800914a:	7d3b      	ldrb	r3, [r7, #20]
 800914c:	f362 0382 	bfi	r3, r2, #2, #1
 8009150:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_double_tap   = val.double_tap;
 8009152:	797b      	ldrb	r3, [r7, #5]
 8009154:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009158:	b2da      	uxtb	r2, r3
 800915a:	7d3b      	ldrb	r3, [r7, #20]
 800915c:	f362 03c3 	bfi	r3, r2, #3, #1
 8009160:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_ff           = val.free_fall;
 8009162:	797b      	ldrb	r3, [r7, #5]
 8009164:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009168:	b2da      	uxtb	r2, r3
 800916a:	7d3b      	ldrb	r3, [r7, #20]
 800916c:	f362 1304 	bfi	r3, r2, #4, #1
 8009170:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_wu           = val.wake_up;
 8009172:	797b      	ldrb	r3, [r7, #5]
 8009174:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009178:	b2da      	uxtb	r2, r3
 800917a:	7d3b      	ldrb	r3, [r7, #20]
 800917c:	f362 1345 	bfi	r3, r2, #5, #1
 8009180:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_single_tap   = val.single_tap;
 8009182:	797b      	ldrb	r3, [r7, #5]
 8009184:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009188:	b2da      	uxtb	r2, r3
 800918a:	7d3b      	ldrb	r3, [r7, #20]
 800918c:	f362 1386 	bfi	r3, r2, #6, #1
 8009190:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_sleep_change = val.sleep_change;
 8009192:	79bb      	ldrb	r3, [r7, #6]
 8009194:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009198:	b2da      	uxtb	r2, r3
 800919a:	7d3b      	ldrb	r3, [r7, #20]
 800919c:	f362 13c7 	bfi	r3, r2, #7, #1
 80091a0:	753b      	strb	r3, [r7, #20]

  if ((emb_func_int1.int1_fsm_lc
 80091a2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80091a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80091aa:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_sig_mot
 80091ac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80091b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	4313      	orrs	r3, r2
 80091b8:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_step_detector
 80091ba:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80091be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	4313      	orrs	r3, r2
 80091c6:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_tilt
 80091c8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80091cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	4313      	orrs	r3, r2
 80091d4:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm1
 80091d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80091da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	4313      	orrs	r3, r2
 80091e2:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm2
 80091e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80091e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	4313      	orrs	r3, r2
 80091f0:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm3
 80091f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80091f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	4313      	orrs	r3, r2
 80091fe:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm4
 8009200:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009204:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009208:	b2db      	uxtb	r3, r3
 800920a:	4313      	orrs	r3, r2
 800920c:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm5
 800920e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009212:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009216:	b2db      	uxtb	r3, r3
 8009218:	4313      	orrs	r3, r2
 800921a:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm6
 800921c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009220:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009224:	b2db      	uxtb	r3, r3
 8009226:	4313      	orrs	r3, r2
 8009228:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm7
 800922a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800922e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009232:	b2db      	uxtb	r3, r3
 8009234:	4313      	orrs	r3, r2
 8009236:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm8
 8009238:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800923c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009240:	b2db      	uxtb	r3, r3
 8009242:	4313      	orrs	r3, r2
 8009244:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm9
 8009246:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800924a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800924e:	b2db      	uxtb	r3, r3
 8009250:	4313      	orrs	r3, r2
 8009252:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm10
 8009254:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009258:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800925c:	b2db      	uxtb	r3, r3
 800925e:	4313      	orrs	r3, r2
 8009260:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm11
 8009262:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009266:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800926a:	b2db      	uxtb	r3, r3
 800926c:	4313      	orrs	r3, r2
 800926e:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm12
 8009270:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009274:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009278:	b2db      	uxtb	r3, r3
 800927a:	4313      	orrs	r3, r2
 800927c:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm13
 800927e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009282:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009286:	b2db      	uxtb	r3, r3
 8009288:	4313      	orrs	r3, r2
 800928a:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm14
 800928c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009290:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009294:	b2db      	uxtb	r3, r3
 8009296:	4313      	orrs	r3, r2
 8009298:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm15
 800929a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800929e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	4313      	orrs	r3, r2
 80092a6:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 80092a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80092ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	4313      	orrs	r3, r2
 80092b4:	b2db      	uxtb	r3, r3
  if ((emb_func_int1.int1_fsm_lc
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d004      	beq.n	80092c4 <lsm6dso_pin_int1_route_set+0x554>
  {
    md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 80092ba:	7d3b      	ldrb	r3, [r7, #20]
 80092bc:	f043 0302 	orr.w	r3, r3, #2
 80092c0:	753b      	strb	r3, [r7, #20]
 80092c2:	e003      	b.n	80092cc <lsm6dso_pin_int1_route_set+0x55c>
  }
  else
  {
    md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 80092c4:	7d3b      	ldrb	r3, [r7, #20]
 80092c6:	f36f 0341 	bfc	r3, #1, #1
 80092ca:	753b      	strb	r3, [r7, #20]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80092cc:	f107 0214 	add.w	r2, r7, #20
 80092d0:	2301      	movs	r3, #1
 80092d2:	215e      	movs	r1, #94	@ 0x5e
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7fe ffa1 	bl	800821c <lsm6dso_write_reg>
 80092da:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80092dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <lsm6dso_pin_int1_route_set+0x576>
 80092e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092e4:	e0e6      	b.n	80094b4 <lsm6dso_pin_int1_route_set+0x744>

  /* set interrupts_enable = 1 in TAP_CFG2 if it is the case */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 80092e6:	f107 021c 	add.w	r2, r7, #28
 80092ea:	2301      	movs	r3, #1
 80092ec:	2158      	movs	r1, #88	@ 0x58
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f7fe ff7c 	bl	80081ec <lsm6dso_read_reg>
 80092f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_pin_int2_route_get(ctx, NULL, &pin_int2_route);
 80092f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80092fa:	461a      	mov	r2, r3
 80092fc:	2100      	movs	r1, #0
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f000 fe3e 	bl	8009f80 <lsm6dso_pin_int2_route_get>
 8009304:	4602      	mov	r2, r0
 8009306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009308:	4413      	add	r3, r2
 800930a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800930c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <lsm6dso_pin_int1_route_set+0x5a6>
 8009312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009314:	e0ce      	b.n	80094b4 <lsm6dso_pin_int1_route_set+0x744>

  if ((pin_int2_route.fifo_bdr
 8009316:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800931a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800931e:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_g
 8009320:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009324:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009328:	b2db      	uxtb	r3, r3
 800932a:	4313      	orrs	r3, r2
 800932c:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_temp
 800932e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009332:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009336:	b2db      	uxtb	r3, r3
 8009338:	4313      	orrs	r3, r2
 800933a:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_xl
 800933c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009340:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009344:	b2db      	uxtb	r3, r3
 8009346:	4313      	orrs	r3, r2
 8009348:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_full
 800934a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800934e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009352:	b2db      	uxtb	r3, r3
 8009354:	4313      	orrs	r3, r2
 8009356:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_ovr
 8009358:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800935c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009360:	b2db      	uxtb	r3, r3
 8009362:	4313      	orrs	r3, r2
 8009364:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_th
 8009366:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800936a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800936e:	b2db      	uxtb	r3, r3
 8009370:	4313      	orrs	r3, r2
 8009372:	b2da      	uxtb	r2, r3
       | pin_int2_route.six_d
 8009374:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009378:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800937c:	b2db      	uxtb	r3, r3
 800937e:	4313      	orrs	r3, r2
 8009380:	b2da      	uxtb	r2, r3
       | pin_int2_route.double_tap
 8009382:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009386:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800938a:	b2db      	uxtb	r3, r3
 800938c:	4313      	orrs	r3, r2
 800938e:	b2da      	uxtb	r2, r3
       | pin_int2_route.free_fall
 8009390:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009394:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009398:	b2db      	uxtb	r3, r3
 800939a:	4313      	orrs	r3, r2
 800939c:	b2da      	uxtb	r2, r3
       | pin_int2_route.wake_up
 800939e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80093a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	4313      	orrs	r3, r2
 80093aa:	b2da      	uxtb	r2, r3
       | pin_int2_route.single_tap
 80093ac:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80093b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	4313      	orrs	r3, r2
 80093b8:	b2da      	uxtb	r2, r3
       | pin_int2_route.sleep_change
 80093ba:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80093be:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	4313      	orrs	r3, r2
 80093c6:	b2da      	uxtb	r2, r3
       | int1_ctrl.den_drdy_flag
 80093c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80093cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	4313      	orrs	r3, r2
 80093d4:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_boot
 80093d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80093da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	4313      	orrs	r3, r2
 80093e2:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_cnt_bdr
 80093e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80093e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	4313      	orrs	r3, r2
 80093f0:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_g
 80093f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80093f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	4313      	orrs	r3, r2
 80093fe:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_xl
 8009400:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009404:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009408:	b2db      	uxtb	r3, r3
 800940a:	4313      	orrs	r3, r2
 800940c:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_full
 800940e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009412:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009416:	b2db      	uxtb	r3, r3
 8009418:	4313      	orrs	r3, r2
 800941a:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_ovr
 800941c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009420:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009424:	b2db      	uxtb	r3, r3
 8009426:	4313      	orrs	r3, r2
 8009428:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_th
 800942a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800942e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009432:	b2db      	uxtb	r3, r3
 8009434:	4313      	orrs	r3, r2
 8009436:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_shub
 8009438:	7d3b      	ldrb	r3, [r7, #20]
 800943a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800943e:	b2db      	uxtb	r3, r3
 8009440:	4313      	orrs	r3, r2
 8009442:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_6d
 8009444:	7d3b      	ldrb	r3, [r7, #20]
 8009446:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800944a:	b2db      	uxtb	r3, r3
 800944c:	4313      	orrs	r3, r2
 800944e:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_double_tap
 8009450:	7d3b      	ldrb	r3, [r7, #20]
 8009452:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009456:	b2db      	uxtb	r3, r3
 8009458:	4313      	orrs	r3, r2
 800945a:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_ff
 800945c:	7d3b      	ldrb	r3, [r7, #20]
 800945e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009462:	b2db      	uxtb	r3, r3
 8009464:	4313      	orrs	r3, r2
 8009466:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_wu
 8009468:	7d3b      	ldrb	r3, [r7, #20]
 800946a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800946e:	b2db      	uxtb	r3, r3
 8009470:	4313      	orrs	r3, r2
 8009472:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_single_tap
 8009474:	7d3b      	ldrb	r3, [r7, #20]
 8009476:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800947a:	b2db      	uxtb	r3, r3
 800947c:	4313      	orrs	r3, r2
 800947e:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 8009480:	7d3b      	ldrb	r3, [r7, #20]
 8009482:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009486:	b2db      	uxtb	r3, r3
 8009488:	4313      	orrs	r3, r2
 800948a:	b2db      	uxtb	r3, r3
  if ((pin_int2_route.fifo_bdr
 800948c:	2b00      	cmp	r3, #0
 800948e:	d004      	beq.n	800949a <lsm6dso_pin_int1_route_set+0x72a>
  {
    tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8009490:	7f3b      	ldrb	r3, [r7, #28]
 8009492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009496:	773b      	strb	r3, [r7, #28]
 8009498:	e003      	b.n	80094a2 <lsm6dso_pin_int1_route_set+0x732>
  }
  else
  {
    tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 800949a:	7f3b      	ldrb	r3, [r7, #28]
 800949c:	f36f 13c7 	bfc	r3, #7, #1
 80094a0:	773b      	strb	r3, [r7, #28]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 80094a2:	f107 021c 	add.w	r2, r7, #28
 80094a6:	2301      	movs	r3, #1
 80094a8:	2158      	movs	r1, #88	@ 0x58
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f7fe feb6 	bl	800821c <lsm6dso_write_reg>
 80094b0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  return ret;
 80094b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3740      	adds	r7, #64	@ 0x40
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <lsm6dso_pin_int1_route_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t *val)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b08c      	sub	sp, #48	@ 0x30
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  lsm6dso_md2_cfg_t         md2_cfg;
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80094c6:	2102      	movs	r1, #2
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7ff faf9 	bl	8008ac0 <lsm6dso_mem_bank_set>
 80094ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 80094d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <lsm6dso_pin_int1_route_get+0x1e>
 80094d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d8:	e1dc      	b.n	8009894 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 80094da:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80094de:	2301      	movs	r3, #1
 80094e0:	210a      	movs	r1, #10
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7fe fe82 	bl	80081ec <lsm6dso_read_reg>
 80094e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 80094ea:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80094ee:	2301      	movs	r3, #1
 80094f0:	210b      	movs	r1, #11
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7fe fe7a 	bl	80081ec <lsm6dso_read_reg>
 80094f8:	4602      	mov	r2, r0
 80094fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094fc:	4413      	add	r3, r2
 80094fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 8009500:	f107 0220 	add.w	r2, r7, #32
 8009504:	2301      	movs	r3, #1
 8009506:	210c      	movs	r1, #12
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7fe fe6f 	bl	80081ec <lsm6dso_read_reg>
 800950e:	4602      	mov	r2, r0
 8009510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009512:	4413      	add	r3, r2
 8009514:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009516:	2100      	movs	r1, #0
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7ff fad1 	bl	8008ac0 <lsm6dso_mem_bank_set>
 800951e:	4602      	mov	r2, r0
 8009520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009522:	4413      	add	r3, r2
 8009524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8009526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <lsm6dso_pin_int1_route_get+0x74>
 800952c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952e:	e1b1      	b.n	8009894 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8009530:	f107 021c 	add.w	r2, r7, #28
 8009534:	2301      	movs	r3, #1
 8009536:	210d      	movs	r1, #13
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7fe fe57 	bl	80081ec <lsm6dso_read_reg>
 800953e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8009540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <lsm6dso_pin_int1_route_get+0x8e>
 8009546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009548:	e1a4      	b.n	8009894 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800954a:	f107 0210 	add.w	r2, r7, #16
 800954e:	2301      	movs	r3, #1
 8009550:	215e      	movs	r1, #94	@ 0x5e
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f7fe fe4a 	bl	80081ec <lsm6dso_read_reg>
 8009558:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 800955a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <lsm6dso_pin_int1_route_get+0xa8>
 8009560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009562:	e197      	b.n	8009894 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8009564:	f107 020c 	add.w	r2, r7, #12
 8009568:	2301      	movs	r3, #1
 800956a:	2113      	movs	r1, #19
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7fe fe3d 	bl	80081ec <lsm6dso_read_reg>
 8009572:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8009574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <lsm6dso_pin_int1_route_get+0xc2>
 800957a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800957c:	e18a      	b.n	8009894 <lsm6dso_pin_int1_route_get+0x3d8>

  if (ctrl4_c.int2_on_int1 == PROPERTY_ENABLE)
 800957e:	7b3b      	ldrb	r3, [r7, #12]
 8009580:	f003 0320 	and.w	r3, r3, #32
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d025      	beq.n	80095d6 <lsm6dso_pin_int1_route_get+0x11a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 800958a:	f107 0218 	add.w	r2, r7, #24
 800958e:	2301      	movs	r3, #1
 8009590:	210e      	movs	r1, #14
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7fe fe2a 	bl	80081ec <lsm6dso_read_reg>
 8009598:	62f8      	str	r0, [r7, #44]	@ 0x2c
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 800959a:	7e3b      	ldrb	r3, [r7, #24]
 800959c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80095a0:	b2d9      	uxtb	r1, r3
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	7813      	ldrb	r3, [r2, #0]
 80095a6:	f361 0382 	bfi	r3, r1, #2, #1
 80095aa:	7013      	strb	r3, [r2, #0]

    ret += lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80095ac:	f107 0214 	add.w	r2, r7, #20
 80095b0:	2301      	movs	r3, #1
 80095b2:	215f      	movs	r1, #95	@ 0x5f
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7fe fe19 	bl	80081ec <lsm6dso_read_reg>
 80095ba:	4602      	mov	r2, r0
 80095bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095be:	4413      	add	r3, r2
 80095c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    val->timestamp = md2_cfg.int2_timestamp;
 80095c2:	7d3b      	ldrb	r3, [r7, #20]
 80095c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80095c8:	b2d9      	uxtb	r1, r3
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	7853      	ldrb	r3, [r2, #1]
 80095ce:	f361 0382 	bfi	r3, r1, #2, #1
 80095d2:	7053      	strb	r3, [r2, #1]
 80095d4:	e009      	b.n	80095ea <lsm6dso_pin_int1_route_get+0x12e>
  }
  else
  {
    val->drdy_temp = PROPERTY_DISABLE;
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	7813      	ldrb	r3, [r2, #0]
 80095da:	f36f 0382 	bfc	r3, #2, #1
 80095de:	7013      	strb	r3, [r2, #0]
    val->timestamp = PROPERTY_DISABLE;
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	7853      	ldrb	r3, [r2, #1]
 80095e4:	f36f 0382 	bfc	r3, #2, #1
 80095e8:	7053      	strb	r3, [r2, #1]
  }
  if (ret != 0) { return ret; }
 80095ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <lsm6dso_pin_int1_route_get+0x138>
 80095f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f2:	e14f      	b.n	8009894 <lsm6dso_pin_int1_route_get+0x3d8>

  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 80095f4:	7f3b      	ldrb	r3, [r7, #28]
 80095f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80095fa:	b2d9      	uxtb	r1, r3
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	7813      	ldrb	r3, [r2, #0]
 8009600:	f361 0300 	bfi	r3, r1, #0, #1
 8009604:	7013      	strb	r3, [r2, #0]
  val->drdy_g    = int1_ctrl.int1_drdy_g;
 8009606:	7f3b      	ldrb	r3, [r7, #28]
 8009608:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800960c:	b2d9      	uxtb	r1, r3
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	7813      	ldrb	r3, [r2, #0]
 8009612:	f361 0341 	bfi	r3, r1, #1, #1
 8009616:	7013      	strb	r3, [r2, #0]
  val->boot      = int1_ctrl.int1_boot;
 8009618:	7f3b      	ldrb	r3, [r7, #28]
 800961a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800961e:	b2d9      	uxtb	r1, r3
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	7813      	ldrb	r3, [r2, #0]
 8009624:	f361 03c3 	bfi	r3, r1, #3, #1
 8009628:	7013      	strb	r3, [r2, #0]
  val->fifo_th   = int1_ctrl.int1_fifo_th;
 800962a:	7f3b      	ldrb	r3, [r7, #28]
 800962c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009630:	b2d9      	uxtb	r1, r3
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	7813      	ldrb	r3, [r2, #0]
 8009636:	f361 1304 	bfi	r3, r1, #4, #1
 800963a:	7013      	strb	r3, [r2, #0]
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
 800963c:	7f3b      	ldrb	r3, [r7, #28]
 800963e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009642:	b2d9      	uxtb	r1, r3
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	7813      	ldrb	r3, [r2, #0]
 8009648:	f361 1345 	bfi	r3, r1, #5, #1
 800964c:	7013      	strb	r3, [r2, #0]
  val->fifo_full = int1_ctrl.int1_fifo_full;
 800964e:	7f3b      	ldrb	r3, [r7, #28]
 8009650:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009654:	b2d9      	uxtb	r1, r3
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	7813      	ldrb	r3, [r2, #0]
 800965a:	f361 1386 	bfi	r3, r1, #6, #1
 800965e:	7013      	strb	r3, [r2, #0]
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
 8009660:	7f3b      	ldrb	r3, [r7, #28]
 8009662:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009666:	b2d9      	uxtb	r1, r3
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	7813      	ldrb	r3, [r2, #0]
 800966c:	f361 13c7 	bfi	r3, r1, #7, #1
 8009670:	7013      	strb	r3, [r2, #0]
  val->den_flag  = int1_ctrl.den_drdy_flag;
 8009672:	7f3b      	ldrb	r3, [r7, #28]
 8009674:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009678:	b2d9      	uxtb	r1, r3
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	7853      	ldrb	r3, [r2, #1]
 800967e:	f361 0300 	bfi	r3, r1, #0, #1
 8009682:	7053      	strb	r3, [r2, #1]
  val->sh_endop     = md1_cfg.int1_shub;
 8009684:	7c3b      	ldrb	r3, [r7, #16]
 8009686:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800968a:	b2d9      	uxtb	r1, r3
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	7853      	ldrb	r3, [r2, #1]
 8009690:	f361 0341 	bfi	r3, r1, #1, #1
 8009694:	7053      	strb	r3, [r2, #1]
  val->six_d        = md1_cfg.int1_6d;
 8009696:	7c3b      	ldrb	r3, [r7, #16]
 8009698:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800969c:	b2d9      	uxtb	r1, r3
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	7853      	ldrb	r3, [r2, #1]
 80096a2:	f361 03c3 	bfi	r3, r1, #3, #1
 80096a6:	7053      	strb	r3, [r2, #1]
  val->double_tap   = md1_cfg.int1_double_tap;
 80096a8:	7c3b      	ldrb	r3, [r7, #16]
 80096aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80096ae:	b2d9      	uxtb	r1, r3
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	7853      	ldrb	r3, [r2, #1]
 80096b4:	f361 1304 	bfi	r3, r1, #4, #1
 80096b8:	7053      	strb	r3, [r2, #1]
  val->free_fall    = md1_cfg.int1_ff;
 80096ba:	7c3b      	ldrb	r3, [r7, #16]
 80096bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80096c0:	b2d9      	uxtb	r1, r3
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	7853      	ldrb	r3, [r2, #1]
 80096c6:	f361 1345 	bfi	r3, r1, #5, #1
 80096ca:	7053      	strb	r3, [r2, #1]
  val->wake_up      = md1_cfg.int1_wu;
 80096cc:	7c3b      	ldrb	r3, [r7, #16]
 80096ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80096d2:	b2d9      	uxtb	r1, r3
 80096d4:	683a      	ldr	r2, [r7, #0]
 80096d6:	7853      	ldrb	r3, [r2, #1]
 80096d8:	f361 1386 	bfi	r3, r1, #6, #1
 80096dc:	7053      	strb	r3, [r2, #1]
  val->single_tap   = md1_cfg.int1_single_tap;
 80096de:	7c3b      	ldrb	r3, [r7, #16]
 80096e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80096e4:	b2d9      	uxtb	r1, r3
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	7853      	ldrb	r3, [r2, #1]
 80096ea:	f361 13c7 	bfi	r3, r1, #7, #1
 80096ee:	7053      	strb	r3, [r2, #1]
  val->sleep_change = md1_cfg.int1_sleep_change;
 80096f0:	7c3b      	ldrb	r3, [r7, #16]
 80096f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80096f6:	b2d9      	uxtb	r1, r3
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	7893      	ldrb	r3, [r2, #2]
 80096fc:	f361 0300 	bfi	r3, r1, #0, #1
 8009700:	7093      	strb	r3, [r2, #2]
  val->step_detector = emb_func_int1.int1_step_detector;
 8009702:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009706:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800970a:	b2d9      	uxtb	r1, r3
 800970c:	683a      	ldr	r2, [r7, #0]
 800970e:	7893      	ldrb	r3, [r2, #2]
 8009710:	f361 0341 	bfi	r3, r1, #1, #1
 8009714:	7093      	strb	r3, [r2, #2]
  val->tilt          = emb_func_int1.int1_tilt;
 8009716:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800971a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800971e:	b2d9      	uxtb	r1, r3
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	7893      	ldrb	r3, [r2, #2]
 8009724:	f361 0382 	bfi	r3, r1, #2, #1
 8009728:	7093      	strb	r3, [r2, #2]
  val->sig_mot       = emb_func_int1.int1_sig_mot;
 800972a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800972e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009732:	b2d9      	uxtb	r1, r3
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	7893      	ldrb	r3, [r2, #2]
 8009738:	f361 03c3 	bfi	r3, r1, #3, #1
 800973c:	7093      	strb	r3, [r2, #2]
  val->fsm_lc        = emb_func_int1.int1_fsm_lc;
 800973e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009742:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009746:	b2d9      	uxtb	r1, r3
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	7893      	ldrb	r3, [r2, #2]
 800974c:	f361 1304 	bfi	r3, r1, #4, #1
 8009750:	7093      	strb	r3, [r2, #2]
  val->fsm1 = fsm_int1_a.int1_fsm1;
 8009752:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009756:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800975a:	b2d9      	uxtb	r1, r3
 800975c:	683a      	ldr	r2, [r7, #0]
 800975e:	7893      	ldrb	r3, [r2, #2]
 8009760:	f361 1345 	bfi	r3, r1, #5, #1
 8009764:	7093      	strb	r3, [r2, #2]
  val->fsm2 = fsm_int1_a.int1_fsm2;
 8009766:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800976a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800976e:	b2d9      	uxtb	r1, r3
 8009770:	683a      	ldr	r2, [r7, #0]
 8009772:	7893      	ldrb	r3, [r2, #2]
 8009774:	f361 1386 	bfi	r3, r1, #6, #1
 8009778:	7093      	strb	r3, [r2, #2]
  val->fsm3 = fsm_int1_a.int1_fsm3;
 800977a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800977e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009782:	b2d9      	uxtb	r1, r3
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	7893      	ldrb	r3, [r2, #2]
 8009788:	f361 13c7 	bfi	r3, r1, #7, #1
 800978c:	7093      	strb	r3, [r2, #2]
  val->fsm4 = fsm_int1_a.int1_fsm4;
 800978e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009792:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009796:	b2d9      	uxtb	r1, r3
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	78d3      	ldrb	r3, [r2, #3]
 800979c:	f361 0300 	bfi	r3, r1, #0, #1
 80097a0:	70d3      	strb	r3, [r2, #3]
  val->fsm5 = fsm_int1_a.int1_fsm5;
 80097a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80097aa:	b2d9      	uxtb	r1, r3
 80097ac:	683a      	ldr	r2, [r7, #0]
 80097ae:	78d3      	ldrb	r3, [r2, #3]
 80097b0:	f361 0341 	bfi	r3, r1, #1, #1
 80097b4:	70d3      	strb	r3, [r2, #3]
  val->fsm6 = fsm_int1_a.int1_fsm6;
 80097b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097ba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80097be:	b2d9      	uxtb	r1, r3
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	78d3      	ldrb	r3, [r2, #3]
 80097c4:	f361 0382 	bfi	r3, r1, #2, #1
 80097c8:	70d3      	strb	r3, [r2, #3]
  val->fsm7 = fsm_int1_a.int1_fsm7;
 80097ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80097d2:	b2d9      	uxtb	r1, r3
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	78d3      	ldrb	r3, [r2, #3]
 80097d8:	f361 03c3 	bfi	r3, r1, #3, #1
 80097dc:	70d3      	strb	r3, [r2, #3]
  val->fsm8 = fsm_int1_a.int1_fsm8;
 80097de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097e2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80097e6:	b2d9      	uxtb	r1, r3
 80097e8:	683a      	ldr	r2, [r7, #0]
 80097ea:	78d3      	ldrb	r3, [r2, #3]
 80097ec:	f361 1304 	bfi	r3, r1, #4, #1
 80097f0:	70d3      	strb	r3, [r2, #3]
  val->fsm9  = fsm_int1_b.int1_fsm9;
 80097f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80097fa:	b2d9      	uxtb	r1, r3
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	78d3      	ldrb	r3, [r2, #3]
 8009800:	f361 1345 	bfi	r3, r1, #5, #1
 8009804:	70d3      	strb	r3, [r2, #3]
  val->fsm10 = fsm_int1_b.int1_fsm10;
 8009806:	f897 3020 	ldrb.w	r3, [r7, #32]
 800980a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800980e:	b2d9      	uxtb	r1, r3
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	78d3      	ldrb	r3, [r2, #3]
 8009814:	f361 1386 	bfi	r3, r1, #6, #1
 8009818:	70d3      	strb	r3, [r2, #3]
  val->fsm11 = fsm_int1_b.int1_fsm11;
 800981a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800981e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009822:	b2d9      	uxtb	r1, r3
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	78d3      	ldrb	r3, [r2, #3]
 8009828:	f361 13c7 	bfi	r3, r1, #7, #1
 800982c:	70d3      	strb	r3, [r2, #3]
  val->fsm12 = fsm_int1_b.int1_fsm12;
 800982e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009832:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009836:	b2d9      	uxtb	r1, r3
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	7913      	ldrb	r3, [r2, #4]
 800983c:	f361 0300 	bfi	r3, r1, #0, #1
 8009840:	7113      	strb	r3, [r2, #4]
  val->fsm13 = fsm_int1_b.int1_fsm13;
 8009842:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009846:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800984a:	b2d9      	uxtb	r1, r3
 800984c:	683a      	ldr	r2, [r7, #0]
 800984e:	7913      	ldrb	r3, [r2, #4]
 8009850:	f361 0341 	bfi	r3, r1, #1, #1
 8009854:	7113      	strb	r3, [r2, #4]
  val->fsm14 = fsm_int1_b.int1_fsm14;
 8009856:	f897 3020 	ldrb.w	r3, [r7, #32]
 800985a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800985e:	b2d9      	uxtb	r1, r3
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	7913      	ldrb	r3, [r2, #4]
 8009864:	f361 0382 	bfi	r3, r1, #2, #1
 8009868:	7113      	strb	r3, [r2, #4]
  val->fsm15 = fsm_int1_b.int1_fsm15;
 800986a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800986e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009872:	b2d9      	uxtb	r1, r3
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	7913      	ldrb	r3, [r2, #4]
 8009878:	f361 03c3 	bfi	r3, r1, #3, #1
 800987c:	7113      	strb	r3, [r2, #4]
  val->fsm16 = fsm_int1_b.int1_fsm16;
 800987e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009882:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009886:	b2d9      	uxtb	r1, r3
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	7913      	ldrb	r3, [r2, #4]
 800988c:	f361 1304 	bfi	r3, r1, #4, #1
 8009890:	7113      	strb	r3, [r2, #4]

  return ret;
 8009892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009894:	4618      	mov	r0, r3
 8009896:	3730      	adds	r7, #48	@ 0x30
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <lsm6dso_pin_int2_route_set>:
  *
  */
int32_t lsm6dso_pin_int2_route_set(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t val)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b090      	sub	sp, #64	@ 0x40
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	4639      	mov	r1, r7
 80098a8:	e881 000c 	stmia.w	r1, {r2, r3}
  lsm6dso_tap_cfg2_t       tap_cfg2;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                  ret;
  ret = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (aux_ctx != NULL)
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d01f      	beq.n	80098f6 <lsm6dso_pin_int2_route_set+0x5a>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS, (uint8_t *)&int_ois, 1);
 80098b6:	f107 0214 	add.w	r2, r7, #20
 80098ba:	2301      	movs	r3, #1
 80098bc:	216f      	movs	r1, #111	@ 0x6f
 80098be:	68b8      	ldr	r0, [r7, #8]
 80098c0:	f7fe fc94 	bl	80081ec <lsm6dso_read_reg>
 80098c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    int_ois.int2_drdy_ois = val.drdy_ois;
 80098c6:	783b      	ldrb	r3, [r7, #0]
 80098c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	7d3b      	ldrb	r3, [r7, #20]
 80098d0:	f362 13c7 	bfi	r3, r2, #7, #1
 80098d4:	753b      	strb	r3, [r7, #20]
    ret += lsm6dso_write_reg(aux_ctx, LSM6DSO_INT_OIS, (uint8_t *)&int_ois, 1);
 80098d6:	f107 0214 	add.w	r2, r7, #20
 80098da:	2301      	movs	r3, #1
 80098dc:	216f      	movs	r1, #111	@ 0x6f
 80098de:	68b8      	ldr	r0, [r7, #8]
 80098e0:	f7fe fc9c 	bl	800821c <lsm6dso_write_reg>
 80098e4:	4602      	mov	r2, r0
 80098e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e8:	4413      	add	r3, r2
 80098ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 80098ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <lsm6dso_pin_int2_route_set+0x5a>
 80098f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098f4:	e340      	b.n	8009f78 <lsm6dso_pin_int2_route_set+0x6dc>
  }

  if (ctx != NULL)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 833c 	beq.w	8009f76 <lsm6dso_pin_int2_route_set+0x6da>
  {
    int2_ctrl.int2_drdy_xl   = val.drdy_xl;
 80098fe:	783b      	ldrb	r3, [r7, #0]
 8009900:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009904:	b2da      	uxtb	r2, r3
 8009906:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800990a:	f362 0300 	bfi	r3, r2, #0, #1
 800990e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_drdy_g    = val.drdy_g;
 8009912:	783b      	ldrb	r3, [r7, #0]
 8009914:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009918:	b2da      	uxtb	r2, r3
 800991a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800991e:	f362 0341 	bfi	r3, r2, #1, #1
 8009922:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8009926:	783b      	ldrb	r3, [r7, #0]
 8009928:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800992c:	b2da      	uxtb	r2, r3
 800992e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009932:	f362 0382 	bfi	r3, r2, #2, #1
 8009936:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_th   = val.fifo_th;
 800993a:	783b      	ldrb	r3, [r7, #0]
 800993c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009940:	b2da      	uxtb	r2, r3
 8009942:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009946:	f362 03c3 	bfi	r3, r2, #3, #1
 800994a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_ovr  = val.fifo_ovr;
 800994e:	783b      	ldrb	r3, [r7, #0]
 8009950:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009954:	b2da      	uxtb	r2, r3
 8009956:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800995a:	f362 1304 	bfi	r3, r2, #4, #1
 800995e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_full = val.fifo_full;
 8009962:	783b      	ldrb	r3, [r7, #0]
 8009964:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009968:	b2da      	uxtb	r2, r3
 800996a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800996e:	f362 1345 	bfi	r3, r2, #5, #1
 8009972:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_cnt_bdr   = val.fifo_bdr;
 8009976:	783b      	ldrb	r3, [r7, #0]
 8009978:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800997c:	b2da      	uxtb	r2, r3
 800997e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009982:	f362 1386 	bfi	r3, r2, #6, #1
 8009986:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.not_used_01    = 0;
 800998a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800998e:	f36f 13c7 	bfc	r3, #7, #1
 8009992:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    ret = lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8009996:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800999a:	2301      	movs	r3, #1
 800999c:	210e      	movs	r1, #14
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f7fe fc3c 	bl	800821c <lsm6dso_write_reg>
 80099a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 80099a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d001      	beq.n	80099b0 <lsm6dso_pin_int2_route_set+0x114>
 80099ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ae:	e2e3      	b.n	8009f78 <lsm6dso_pin_int2_route_set+0x6dc>

    md2_cfg.int2_timestamp    = val.timestamp;
 80099b0:	787b      	ldrb	r3, [r7, #1]
 80099b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	7f3b      	ldrb	r3, [r7, #28]
 80099ba:	f362 0300 	bfi	r3, r2, #0, #1
 80099be:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_6d           = val.six_d;
 80099c0:	787b      	ldrb	r3, [r7, #1]
 80099c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	7f3b      	ldrb	r3, [r7, #28]
 80099ca:	f362 0382 	bfi	r3, r2, #2, #1
 80099ce:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_double_tap   = val.double_tap;
 80099d0:	787b      	ldrb	r3, [r7, #1]
 80099d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	7f3b      	ldrb	r3, [r7, #28]
 80099da:	f362 03c3 	bfi	r3, r2, #3, #1
 80099de:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_ff           = val.free_fall;
 80099e0:	787b      	ldrb	r3, [r7, #1]
 80099e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	7f3b      	ldrb	r3, [r7, #28]
 80099ea:	f362 1304 	bfi	r3, r2, #4, #1
 80099ee:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_wu           = val.wake_up;
 80099f0:	787b      	ldrb	r3, [r7, #1]
 80099f2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	7f3b      	ldrb	r3, [r7, #28]
 80099fa:	f362 1345 	bfi	r3, r2, #5, #1
 80099fe:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_single_tap   = val.single_tap;
 8009a00:	787b      	ldrb	r3, [r7, #1]
 8009a02:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	7f3b      	ldrb	r3, [r7, #28]
 8009a0a:	f362 1386 	bfi	r3, r2, #6, #1
 8009a0e:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_sleep_change = val.sleep_change;
 8009a10:	787b      	ldrb	r3, [r7, #1]
 8009a12:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	7f3b      	ldrb	r3, [r7, #28]
 8009a1a:	f362 13c7 	bfi	r3, r2, #7, #1
 8009a1e:	773b      	strb	r3, [r7, #28]
    emb_func_int2.not_used_01 = 0;
 8009a20:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009a24:	f36f 0302 	bfc	r3, #0, #3
 8009a28:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2. int2_step_detector = val.step_detector;
 8009a2c:	787b      	ldrb	r3, [r7, #1]
 8009a2e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009a32:	b2da      	uxtb	r2, r3
 8009a34:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009a38:	f362 03c3 	bfi	r3, r2, #3, #1
 8009a3c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_tilt           = val.tilt;
 8009a40:	78bb      	ldrb	r3, [r7, #2]
 8009a42:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009a4c:	f362 1304 	bfi	r3, r2, #4, #1
 8009a50:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_sig_mot        = val.sig_mot;
 8009a54:	78bb      	ldrb	r3, [r7, #2]
 8009a56:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009a60:	f362 1345 	bfi	r3, r2, #5, #1
 8009a64:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.not_used_02 = 0;
 8009a68:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009a6c:	f36f 1386 	bfc	r3, #6, #1
 8009a70:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_fsm_lc         = val.fsm_lc;
 8009a74:	78bb      	ldrb	r3, [r7, #2]
 8009a76:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009a80:	f362 13c7 	bfi	r3, r2, #7, #1
 8009a84:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    fsm_int2_a.int2_fsm1 = val.fsm1;
 8009a88:	78bb      	ldrb	r3, [r7, #2]
 8009a8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a94:	f362 0300 	bfi	r3, r2, #0, #1
 8009a98:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm2 = val.fsm2;
 8009a9c:	78bb      	ldrb	r3, [r7, #2]
 8009a9e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009aa8:	f362 0341 	bfi	r3, r2, #1, #1
 8009aac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm3 = val.fsm3;
 8009ab0:	78bb      	ldrb	r3, [r7, #2]
 8009ab2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009abc:	f362 0382 	bfi	r3, r2, #2, #1
 8009ac0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm4 = val.fsm4;
 8009ac4:	78bb      	ldrb	r3, [r7, #2]
 8009ac6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009ad0:	f362 03c3 	bfi	r3, r2, #3, #1
 8009ad4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm5 = val.fsm5;
 8009ad8:	78bb      	ldrb	r3, [r7, #2]
 8009ada:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009ade:	b2da      	uxtb	r2, r3
 8009ae0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009ae4:	f362 1304 	bfi	r3, r2, #4, #1
 8009ae8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm6 = val.fsm6;
 8009aec:	78fb      	ldrb	r3, [r7, #3]
 8009aee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009af8:	f362 1345 	bfi	r3, r2, #5, #1
 8009afc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm7 = val.fsm7;
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009b0c:	f362 1386 	bfi	r3, r2, #6, #1
 8009b10:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm8 = val.fsm8;
 8009b14:	78fb      	ldrb	r3, [r7, #3]
 8009b16:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009b20:	f362 13c7 	bfi	r3, r2, #7, #1
 8009b24:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 8009b28:	78fb      	ldrb	r3, [r7, #3]
 8009b2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b34:	f362 0300 	bfi	r3, r2, #0, #1
 8009b38:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm10 = val.fsm10;
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b48:	f362 0341 	bfi	r3, r2, #1, #1
 8009b4c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm11 = val.fsm11;
 8009b50:	78fb      	ldrb	r3, [r7, #3]
 8009b52:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b5c:	f362 0382 	bfi	r3, r2, #2, #1
 8009b60:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm12 = val.fsm12;
 8009b64:	78fb      	ldrb	r3, [r7, #3]
 8009b66:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b70:	f362 03c3 	bfi	r3, r2, #3, #1
 8009b74:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm13 = val.fsm13;
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b84:	f362 1304 	bfi	r3, r2, #4, #1
 8009b88:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm14 = val.fsm14;
 8009b8c:	793b      	ldrb	r3, [r7, #4]
 8009b8e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b98:	f362 1345 	bfi	r3, r2, #5, #1
 8009b9c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm15 = val.fsm15;
 8009ba0:	793b      	ldrb	r3, [r7, #4]
 8009ba2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009bac:	f362 1386 	bfi	r3, r2, #6, #1
 8009bb0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm16 = val.fsm16;
 8009bb4:	793b      	ldrb	r3, [r7, #4]
 8009bb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009bc0:	f362 13c7 	bfi	r3, r2, #7, #1
 8009bc4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8009bc8:	f107 0218 	add.w	r2, r7, #24
 8009bcc:	2301      	movs	r3, #1
 8009bce:	2113      	movs	r1, #19
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f7fe fb0b 	bl	80081ec <lsm6dso_read_reg>
 8009bd6:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8009bd8:	783b      	ldrb	r3, [r7, #0]
 8009bda:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	787b      	ldrb	r3, [r7, #1]
 8009be2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	4313      	orrs	r3, r2
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d003      	beq.n	8009bf8 <lsm6dso_pin_int2_route_set+0x35c>
    {
      ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8009bf0:	7e3b      	ldrb	r3, [r7, #24]
 8009bf2:	f36f 1345 	bfc	r3, #5, #1
 8009bf6:	763b      	strb	r3, [r7, #24]
    }

    ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8009bf8:	f107 0218 	add.w	r2, r7, #24
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	2113      	movs	r1, #19
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f7fe fb0b 	bl	800821c <lsm6dso_write_reg>
 8009c06:	4602      	mov	r2, r0
 8009c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c0a:	4413      	add	r3, r2
 8009c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8009c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <lsm6dso_pin_int2_route_set+0x37c>
 8009c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c16:	e1af      	b.n	8009f78 <lsm6dso_pin_int2_route_set+0x6dc>

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8009c18:	2102      	movs	r1, #2
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f7fe ff50 	bl	8008ac0 <lsm6dso_mem_bank_set>
 8009c20:	63f8      	str	r0, [r7, #60]	@ 0x3c

    ret += lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT2, (uint8_t *)&emb_func_int2, 1);
 8009c22:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8009c26:	2301      	movs	r3, #1
 8009c28:	210e      	movs	r1, #14
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f7fe faf6 	bl	800821c <lsm6dso_write_reg>
 8009c30:	4602      	mov	r2, r0
 8009c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c34:	4413      	add	r3, r2
 8009c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_A, (uint8_t *)&fsm_int2_a, 1);
 8009c38:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	210f      	movs	r1, #15
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f7fe faeb 	bl	800821c <lsm6dso_write_reg>
 8009c46:	4602      	mov	r2, r0
 8009c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4a:	4413      	add	r3, r2
 8009c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_B, (uint8_t *)&fsm_int2_b, 1);
 8009c4e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8009c52:	2301      	movs	r3, #1
 8009c54:	2110      	movs	r1, #16
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f7fe fae0 	bl	800821c <lsm6dso_write_reg>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c60:	4413      	add	r3, r2
 8009c62:	63fb      	str	r3, [r7, #60]	@ 0x3c

    ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009c64:	2100      	movs	r1, #0
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f7fe ff2a 	bl	8008ac0 <lsm6dso_mem_bank_set>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c70:	4413      	add	r3, r2
 8009c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8009c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <lsm6dso_pin_int2_route_set+0x3e2>
 8009c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c7c:	e17c      	b.n	8009f78 <lsm6dso_pin_int2_route_set+0x6dc>

    if ((emb_func_int2.int2_fsm_lc
 8009c7e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009c82:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009c86:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_sig_mot
 8009c88:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009c8c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	4313      	orrs	r3, r2
 8009c94:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_step_detector
 8009c96:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009c9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_tilt
 8009ca4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009ca8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm1
 8009cb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009cb6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm2
 8009cc0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009cc4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm3
 8009cce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009cd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm4
 8009cdc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009ce0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm5
 8009cea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009cee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm6
 8009cf8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009cfc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	4313      	orrs	r3, r2
 8009d04:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm7
 8009d06:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009d0a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	4313      	orrs	r3, r2
 8009d12:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm8
 8009d14:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009d18:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm9
 8009d22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d26:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm10
 8009d30:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d34:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm11
 8009d3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d42:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm12
 8009d4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	4313      	orrs	r3, r2
 8009d58:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm13
 8009d5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d5e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	4313      	orrs	r3, r2
 8009d66:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm14
 8009d68:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	4313      	orrs	r3, r2
 8009d74:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm15
 8009d76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d7a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	4313      	orrs	r3, r2
 8009d82:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm16) != PROPERTY_DISABLE)
 8009d84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d88:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	b2db      	uxtb	r3, r3
    if ((emb_func_int2.int2_fsm_lc
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d004      	beq.n	8009da0 <lsm6dso_pin_int2_route_set+0x504>
    {
      md2_cfg.int2_emb_func = PROPERTY_ENABLE;
 8009d96:	7f3b      	ldrb	r3, [r7, #28]
 8009d98:	f043 0302 	orr.w	r3, r3, #2
 8009d9c:	773b      	strb	r3, [r7, #28]
 8009d9e:	e003      	b.n	8009da8 <lsm6dso_pin_int2_route_set+0x50c>
    }
    else
    {
      md2_cfg.int2_emb_func = PROPERTY_DISABLE;
 8009da0:	7f3b      	ldrb	r3, [r7, #28]
 8009da2:	f36f 0341 	bfc	r3, #1, #1
 8009da6:	773b      	strb	r3, [r7, #28]
    }

    ret = lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8009da8:	f107 021c 	add.w	r2, r7, #28
 8009dac:	2301      	movs	r3, #1
 8009dae:	215f      	movs	r1, #95	@ 0x5f
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f7fe fa33 	bl	800821c <lsm6dso_write_reg>
 8009db6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8009db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <lsm6dso_pin_int2_route_set+0x526>
 8009dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc0:	e0da      	b.n	8009f78 <lsm6dso_pin_int2_route_set+0x6dc>

    ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8009dc2:	f107 0220 	add.w	r2, r7, #32
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	2158      	movs	r1, #88	@ 0x58
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	f7fe fa0e 	bl	80081ec <lsm6dso_read_reg>
 8009dd0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    ret += lsm6dso_pin_int1_route_get(ctx, &pin_int1_route);
 8009dd2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f7ff fb6f 	bl	80094bc <lsm6dso_pin_int1_route_get>
 8009dde:	4602      	mov	r2, r0
 8009de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009de2:	4413      	add	r3, r2
 8009de4:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if ((val.fifo_bdr
 8009de6:	783b      	ldrb	r3, [r7, #0]
 8009de8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009dec:	b2da      	uxtb	r2, r3
         | val.drdy_g
 8009dee:	783b      	ldrb	r3, [r7, #0]
 8009df0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	4313      	orrs	r3, r2
 8009df8:	b2da      	uxtb	r2, r3
         | val.drdy_temp
 8009dfa:	783b      	ldrb	r3, [r7, #0]
 8009dfc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	4313      	orrs	r3, r2
 8009e04:	b2da      	uxtb	r2, r3
         | val.drdy_xl
 8009e06:	783b      	ldrb	r3, [r7, #0]
 8009e08:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	b2da      	uxtb	r2, r3
         | val.fifo_full
 8009e12:	783b      	ldrb	r3, [r7, #0]
 8009e14:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	b2da      	uxtb	r2, r3
         | val.fifo_ovr
 8009e1e:	783b      	ldrb	r3, [r7, #0]
 8009e20:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	4313      	orrs	r3, r2
 8009e28:	b2da      	uxtb	r2, r3
         | val.fifo_th
 8009e2a:	783b      	ldrb	r3, [r7, #0]
 8009e2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	4313      	orrs	r3, r2
 8009e34:	b2da      	uxtb	r2, r3
         | val.six_d
 8009e36:	787b      	ldrb	r3, [r7, #1]
 8009e38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	b2da      	uxtb	r2, r3
         | val.double_tap
 8009e42:	787b      	ldrb	r3, [r7, #1]
 8009e44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	b2da      	uxtb	r2, r3
         | val.free_fall
 8009e4e:	787b      	ldrb	r3, [r7, #1]
 8009e50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	4313      	orrs	r3, r2
 8009e58:	b2da      	uxtb	r2, r3
         | val.wake_up
 8009e5a:	787b      	ldrb	r3, [r7, #1]
 8009e5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	4313      	orrs	r3, r2
 8009e64:	b2da      	uxtb	r2, r3
         | val.single_tap
 8009e66:	787b      	ldrb	r3, [r7, #1]
 8009e68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	b2da      	uxtb	r2, r3
         | val.sleep_change
 8009e72:	787b      	ldrb	r3, [r7, #1]
 8009e74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	b2da      	uxtb	r2, r3
         | pin_int1_route.den_flag
 8009e7e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009e82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	b2da      	uxtb	r2, r3
         | pin_int1_route.boot
 8009e8c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009e90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	4313      	orrs	r3, r2
 8009e98:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_bdr
 8009e9a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009e9e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	b2da      	uxtb	r2, r3
         | pin_int1_route.drdy_g
 8009ea8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009eac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	b2da      	uxtb	r2, r3
         | pin_int1_route.drdy_xl
 8009eb6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009eba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_full
 8009ec4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009ec8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_ovr
 8009ed2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009ed6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	4313      	orrs	r3, r2
 8009ede:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_th
 8009ee0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009ee4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	4313      	orrs	r3, r2
 8009eec:	b2da      	uxtb	r2, r3
         | pin_int1_route.six_d
 8009eee:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009ef2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	b2da      	uxtb	r2, r3
         | pin_int1_route.double_tap
 8009efc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009f00:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	4313      	orrs	r3, r2
 8009f08:	b2da      	uxtb	r2, r3
         | pin_int1_route.free_fall
 8009f0a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009f0e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	4313      	orrs	r3, r2
 8009f16:	b2da      	uxtb	r2, r3
         | pin_int1_route.wake_up
 8009f18:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009f1c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	4313      	orrs	r3, r2
 8009f24:	b2da      	uxtb	r2, r3
         | pin_int1_route.single_tap
 8009f26:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009f2a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	4313      	orrs	r3, r2
 8009f32:	b2da      	uxtb	r2, r3
         | pin_int1_route.sleep_change) != PROPERTY_DISABLE)
 8009f34:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009f38:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	b2db      	uxtb	r3, r3
    if ((val.fifo_bdr
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d006      	beq.n	8009f54 <lsm6dso_pin_int2_route_set+0x6b8>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8009f46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f4e:	f887 3020 	strb.w	r3, [r7, #32]
 8009f52:	e005      	b.n	8009f60 <lsm6dso_pin_int2_route_set+0x6c4>
    }
    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 8009f54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f58:	f36f 13c7 	bfc	r3, #7, #1
 8009f5c:	f887 3020 	strb.w	r3, [r7, #32]
    }

    ret += lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8009f60:	f107 0220 	add.w	r2, r7, #32
 8009f64:	2301      	movs	r3, #1
 8009f66:	2158      	movs	r1, #88	@ 0x58
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f7fe f957 	bl	800821c <lsm6dso_write_reg>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f72:	4413      	add	r3, r2
 8009f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return ret;
 8009f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3740      	adds	r7, #64	@ 0x40
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <lsm6dso_pin_int2_route_get>:
  *
  */
int32_t lsm6dso_pin_int2_route_get(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t *val)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b08c      	sub	sp, #48	@ 0x30
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
  lsm6dso_int2_ctrl_t      int2_ctrl;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                   ret;
  ret = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (aux_ctx != NULL)
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d010      	beq.n	8009fb8 <lsm6dso_pin_int2_route_get+0x38>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS,
 8009f96:	f107 0210 	add.w	r2, r7, #16
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	216f      	movs	r1, #111	@ 0x6f
 8009f9e:	68b8      	ldr	r0, [r7, #8]
 8009fa0:	f7fe f924 	bl	80081ec <lsm6dso_read_reg>
 8009fa4:	62f8      	str	r0, [r7, #44]	@ 0x2c
                           (uint8_t *)&int_ois, 1);
    val->drdy_ois = int_ois.int2_drdy_ois;
 8009fa6:	7c3b      	ldrb	r3, [r7, #16]
 8009fa8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009fac:	b2d9      	uxtb	r1, r3
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	7813      	ldrb	r3, [r2, #0]
 8009fb2:	f361 0300 	bfi	r3, r1, #0, #1
 8009fb6:	7013      	strb	r3, [r2, #0]
  }

  if (ctx != NULL)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 81c7 	beq.w	800a34e <lsm6dso_pin_int2_route_get+0x3ce>
  {
    if (ret == 0)
 8009fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d104      	bne.n	8009fd0 <lsm6dso_pin_int2_route_get+0x50>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8009fc6:	2102      	movs	r1, #2
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f7fe fd79 	bl	8008ac0 <lsm6dso_mem_bank_set>
 8009fce:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 8009fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d107      	bne.n	8009fe6 <lsm6dso_pin_int2_route_get+0x66>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT2,
 8009fd6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8009fda:	2301      	movs	r3, #1
 8009fdc:	210e      	movs	r1, #14
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7fe f904 	bl	80081ec <lsm6dso_read_reg>
 8009fe4:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 8009fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d107      	bne.n	8009ffc <lsm6dso_pin_int2_route_get+0x7c>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_A,
 8009fec:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	210f      	movs	r1, #15
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f7fe f8f9 	bl	80081ec <lsm6dso_read_reg>
 8009ffa:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 8009ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d107      	bne.n	800a012 <lsm6dso_pin_int2_route_get+0x92>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_B,
 800a002:	f107 0220 	add.w	r2, r7, #32
 800a006:	2301      	movs	r3, #1
 800a008:	2110      	movs	r1, #16
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f7fe f8ee 	bl	80081ec <lsm6dso_read_reg>
 800a010:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 800a012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a014:	2b00      	cmp	r3, #0
 800a016:	d104      	bne.n	800a022 <lsm6dso_pin_int2_route_get+0xa2>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800a018:	2100      	movs	r1, #0
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f7fe fd50 	bl	8008ac0 <lsm6dso_mem_bank_set>
 800a020:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 800a022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a024:	2b00      	cmp	r3, #0
 800a026:	d107      	bne.n	800a038 <lsm6dso_pin_int2_route_get+0xb8>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 800a028:	f107 021c 	add.w	r2, r7, #28
 800a02c:	2301      	movs	r3, #1
 800a02e:	210e      	movs	r1, #14
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f7fe f8db 	bl	80081ec <lsm6dso_read_reg>
 800a036:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 800a038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d107      	bne.n	800a04e <lsm6dso_pin_int2_route_get+0xce>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG,
 800a03e:	f107 0218 	add.w	r2, r7, #24
 800a042:	2301      	movs	r3, #1
 800a044:	215f      	movs	r1, #95	@ 0x5f
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f7fe f8d0 	bl	80081ec <lsm6dso_read_reg>
 800a04c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 800a04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a050:	2b00      	cmp	r3, #0
 800a052:	d107      	bne.n	800a064 <lsm6dso_pin_int2_route_get+0xe4>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800a054:	f107 0214 	add.w	r2, r7, #20
 800a058:	2301      	movs	r3, #1
 800a05a:	2113      	movs	r1, #19
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f7fe f8c5 	bl	80081ec <lsm6dso_read_reg>
 800a062:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 800a064:	7d3b      	ldrb	r3, [r7, #20]
 800a066:	f003 0320 	and.w	r3, r3, #32
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d128      	bne.n	800a0c2 <lsm6dso_pin_int2_route_get+0x142>
    {
      if (ret == 0)
 800a070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a072:	2b00      	cmp	r3, #0
 800a074:	d110      	bne.n	800a098 <lsm6dso_pin_int2_route_get+0x118>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 800a076:	f107 021c 	add.w	r2, r7, #28
 800a07a:	2301      	movs	r3, #1
 800a07c:	210e      	movs	r1, #14
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f7fe f8b4 	bl	80081ec <lsm6dso_read_reg>
 800a084:	62f8      	str	r0, [r7, #44]	@ 0x2c
                               (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 800a086:	7f3b      	ldrb	r3, [r7, #28]
 800a088:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a08c:	b2d9      	uxtb	r1, r3
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	7813      	ldrb	r3, [r2, #0]
 800a092:	f361 03c3 	bfi	r3, r1, #3, #1
 800a096:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 800a098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d11b      	bne.n	800a0d6 <lsm6dso_pin_int2_route_get+0x156>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800a09e:	f107 0218 	add.w	r2, r7, #24
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	215f      	movs	r1, #95	@ 0x5f
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f7fe f8a0 	bl	80081ec <lsm6dso_read_reg>
 800a0ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
        val->timestamp = md2_cfg.int2_timestamp;
 800a0ae:	7e3b      	ldrb	r3, [r7, #24]
 800a0b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a0b4:	b2d9      	uxtb	r1, r3
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	7853      	ldrb	r3, [r2, #1]
 800a0ba:	f361 0300 	bfi	r3, r1, #0, #1
 800a0be:	7053      	strb	r3, [r2, #1]
 800a0c0:	e009      	b.n	800a0d6 <lsm6dso_pin_int2_route_get+0x156>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	7813      	ldrb	r3, [r2, #0]
 800a0c6:	f36f 03c3 	bfc	r3, #3, #1
 800a0ca:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	7853      	ldrb	r3, [r2, #1]
 800a0d0:	f36f 0300 	bfc	r3, #0, #1
 800a0d4:	7053      	strb	r3, [r2, #1]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 800a0d6:	7f3b      	ldrb	r3, [r7, #28]
 800a0d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a0dc:	b2d9      	uxtb	r1, r3
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	7813      	ldrb	r3, [r2, #0]
 800a0e2:	f361 0341 	bfi	r3, r1, #1, #1
 800a0e6:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 800a0e8:	7f3b      	ldrb	r3, [r7, #28]
 800a0ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a0ee:	b2d9      	uxtb	r1, r3
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	7813      	ldrb	r3, [r2, #0]
 800a0f4:	f361 0382 	bfi	r3, r1, #2, #1
 800a0f8:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 800a0fa:	7f3b      	ldrb	r3, [r7, #28]
 800a0fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a100:	b2d9      	uxtb	r1, r3
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	7813      	ldrb	r3, [r2, #0]
 800a106:	f361 03c3 	bfi	r3, r1, #3, #1
 800a10a:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 800a10c:	7f3b      	ldrb	r3, [r7, #28]
 800a10e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a112:	b2d9      	uxtb	r1, r3
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	7813      	ldrb	r3, [r2, #0]
 800a118:	f361 1304 	bfi	r3, r1, #4, #1
 800a11c:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 800a11e:	7f3b      	ldrb	r3, [r7, #28]
 800a120:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a124:	b2d9      	uxtb	r1, r3
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	7813      	ldrb	r3, [r2, #0]
 800a12a:	f361 1345 	bfi	r3, r1, #5, #1
 800a12e:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 800a130:	7f3b      	ldrb	r3, [r7, #28]
 800a132:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a136:	b2d9      	uxtb	r1, r3
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	7813      	ldrb	r3, [r2, #0]
 800a13c:	f361 1386 	bfi	r3, r1, #6, #1
 800a140:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 800a142:	7f3b      	ldrb	r3, [r7, #28]
 800a144:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a148:	b2d9      	uxtb	r1, r3
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	7813      	ldrb	r3, [r2, #0]
 800a14e:	f361 13c7 	bfi	r3, r1, #7, #1
 800a152:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 800a154:	7e3b      	ldrb	r3, [r7, #24]
 800a156:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a15a:	b2d9      	uxtb	r1, r3
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	7853      	ldrb	r3, [r2, #1]
 800a160:	f361 0300 	bfi	r3, r1, #0, #1
 800a164:	7053      	strb	r3, [r2, #1]
    val->six_d        = md2_cfg.int2_6d;
 800a166:	7e3b      	ldrb	r3, [r7, #24]
 800a168:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a16c:	b2d9      	uxtb	r1, r3
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	7853      	ldrb	r3, [r2, #1]
 800a172:	f361 0341 	bfi	r3, r1, #1, #1
 800a176:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 800a178:	7e3b      	ldrb	r3, [r7, #24]
 800a17a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a17e:	b2d9      	uxtb	r1, r3
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	7853      	ldrb	r3, [r2, #1]
 800a184:	f361 0382 	bfi	r3, r1, #2, #1
 800a188:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 800a18a:	7e3b      	ldrb	r3, [r7, #24]
 800a18c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a190:	b2d9      	uxtb	r1, r3
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	7853      	ldrb	r3, [r2, #1]
 800a196:	f361 03c3 	bfi	r3, r1, #3, #1
 800a19a:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 800a19c:	7e3b      	ldrb	r3, [r7, #24]
 800a19e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a1a2:	b2d9      	uxtb	r1, r3
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	7853      	ldrb	r3, [r2, #1]
 800a1a8:	f361 1304 	bfi	r3, r1, #4, #1
 800a1ac:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 800a1ae:	7e3b      	ldrb	r3, [r7, #24]
 800a1b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a1b4:	b2d9      	uxtb	r1, r3
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	7853      	ldrb	r3, [r2, #1]
 800a1ba:	f361 1345 	bfi	r3, r1, #5, #1
 800a1be:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 800a1c0:	7e3b      	ldrb	r3, [r7, #24]
 800a1c2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a1c6:	b2d9      	uxtb	r1, r3
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	7853      	ldrb	r3, [r2, #1]
 800a1cc:	f361 1386 	bfi	r3, r1, #6, #1
 800a1d0:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 800a1d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a1d6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a1da:	b2d9      	uxtb	r1, r3
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	7853      	ldrb	r3, [r2, #1]
 800a1e0:	f361 13c7 	bfi	r3, r1, #7, #1
 800a1e4:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 800a1e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a1ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a1ee:	b2d9      	uxtb	r1, r3
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	7893      	ldrb	r3, [r2, #2]
 800a1f4:	f361 0300 	bfi	r3, r1, #0, #1
 800a1f8:	7093      	strb	r3, [r2, #2]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 800a1fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a1fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a202:	b2d9      	uxtb	r1, r3
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	7893      	ldrb	r3, [r2, #2]
 800a208:	f361 0382 	bfi	r3, r1, #2, #1
 800a20c:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 800a20e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a212:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a216:	b2d9      	uxtb	r1, r3
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	7893      	ldrb	r3, [r2, #2]
 800a21c:	f361 03c3 	bfi	r3, r1, #3, #1
 800a220:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 800a222:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a226:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a22a:	b2d9      	uxtb	r1, r3
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	7893      	ldrb	r3, [r2, #2]
 800a230:	f361 1304 	bfi	r3, r1, #4, #1
 800a234:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 800a236:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a23a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a23e:	b2d9      	uxtb	r1, r3
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	7893      	ldrb	r3, [r2, #2]
 800a244:	f361 1345 	bfi	r3, r1, #5, #1
 800a248:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 800a24a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a24e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a252:	b2d9      	uxtb	r1, r3
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	7893      	ldrb	r3, [r2, #2]
 800a258:	f361 1386 	bfi	r3, r1, #6, #1
 800a25c:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 800a25e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a262:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a266:	b2d9      	uxtb	r1, r3
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	7893      	ldrb	r3, [r2, #2]
 800a26c:	f361 13c7 	bfi	r3, r1, #7, #1
 800a270:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 800a272:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a276:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a27a:	b2d9      	uxtb	r1, r3
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	78d3      	ldrb	r3, [r2, #3]
 800a280:	f361 0300 	bfi	r3, r1, #0, #1
 800a284:	70d3      	strb	r3, [r2, #3]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 800a286:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a28a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a28e:	b2d9      	uxtb	r1, r3
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	78d3      	ldrb	r3, [r2, #3]
 800a294:	f361 0341 	bfi	r3, r1, #1, #1
 800a298:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 800a29a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a29e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a2a2:	b2d9      	uxtb	r1, r3
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	78d3      	ldrb	r3, [r2, #3]
 800a2a8:	f361 0382 	bfi	r3, r1, #2, #1
 800a2ac:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 800a2ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a2b6:	b2d9      	uxtb	r1, r3
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	78d3      	ldrb	r3, [r2, #3]
 800a2bc:	f361 03c3 	bfi	r3, r1, #3, #1
 800a2c0:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 800a2c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a2ca:	b2d9      	uxtb	r1, r3
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	78d3      	ldrb	r3, [r2, #3]
 800a2d0:	f361 1304 	bfi	r3, r1, #4, #1
 800a2d4:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 800a2d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a2de:	b2d9      	uxtb	r1, r3
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	78d3      	ldrb	r3, [r2, #3]
 800a2e4:	f361 1345 	bfi	r3, r1, #5, #1
 800a2e8:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 800a2ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a2f2:	b2d9      	uxtb	r1, r3
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	78d3      	ldrb	r3, [r2, #3]
 800a2f8:	f361 1386 	bfi	r3, r1, #6, #1
 800a2fc:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 800a2fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a302:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a306:	b2d9      	uxtb	r1, r3
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	78d3      	ldrb	r3, [r2, #3]
 800a30c:	f361 13c7 	bfi	r3, r1, #7, #1
 800a310:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 800a312:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a316:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a31a:	b2d9      	uxtb	r1, r3
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	7913      	ldrb	r3, [r2, #4]
 800a320:	f361 0300 	bfi	r3, r1, #0, #1
 800a324:	7113      	strb	r3, [r2, #4]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 800a326:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a32a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a32e:	b2d9      	uxtb	r1, r3
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	7913      	ldrb	r3, [r2, #4]
 800a334:	f361 0341 	bfi	r3, r1, #1, #1
 800a338:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 800a33a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a33e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a342:	b2d9      	uxtb	r1, r3
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	7913      	ldrb	r3, [r2, #4]
 800a348:	f361 0382 	bfi	r3, r1, #2, #1
 800a34c:	7113      	strb	r3, [r2, #4]
  }

  return ret;
 800a34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a350:	4618      	mov	r0, r3
 800a352:	3730      	adds	r7, #48	@ 0x30
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d103      	bne.n	800a370 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 800a368:	f04f 33ff 	mov.w	r3, #4294967295
 800a36c:	60fb      	str	r3, [r7, #12]
 800a36e:	e034      	b.n	800a3da <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	689a      	ldr	r2, [r3, #8]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	7b1a      	ldrb	r2, [r3, #12]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	691a      	ldr	r2, [r3, #16]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	695a      	ldr	r2, [r3, #20]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	699a      	ldr	r2, [r3, #24]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a0e      	ldr	r2, [pc, #56]	@ (800a3e4 <STTS751_RegisterBusIO+0x8c>)
 800a3ac:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a0d      	ldr	r2, [pc, #52]	@ (800a3e8 <STTS751_RegisterBusIO+0x90>)
 800a3b2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	69da      	ldr	r2, [r3, #28]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d004      	beq.n	800a3d4 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4798      	blx	r3
 800a3d0:	60f8      	str	r0, [r7, #12]
 800a3d2:	e002      	b.n	800a3da <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 800a3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a3da:	68fb      	ldr	r3, [r7, #12]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	0800a851 	.word	0x0800a851
 800a3e8:	0800a8bf 	.word	0x0800a8bf

0800a3ec <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d127      	bne.n	800a44e <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	3320      	adds	r3, #32
 800a402:	2101      	movs	r1, #1
 800a404:	4618      	mov	r0, r3
 800a406:	f000 fc39 	bl	800ac7c <stts751_pin_event_route_set>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 800a410:	f04f 33ff 	mov.w	r3, #4294967295
 800a414:	e020      	b.n	800a458 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a41c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	3320      	adds	r3, #32
 800a422:	2103      	movs	r1, #3
 800a424:	4618      	mov	r0, r3
 800a426:	f000 fb9d 	bl	800ab64 <stts751_resolution_set>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 800a430:	f04f 33ff 	mov.w	r3, #4294967295
 800a434:	e010      	b.n	800a458 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	3320      	adds	r3, #32
 800a43a:	2180      	movs	r1, #128	@ 0x80
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 faba 	bl	800a9b6 <stts751_temp_data_rate_set>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 800a448:	f04f 33ff 	mov.w	r3, #4294967295
 800a44c:	e004      	b.n	800a458 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2201      	movs	r2, #1
 800a452:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d108      	bne.n	800a484 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f874 	bl	800a560 <STTS751_TEMP_Disable>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d002      	beq.n	800a484 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 800a47e:	f04f 33ff 	mov.w	r3, #4294967295
 800a482:	e004      	b.n	800a48e <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b084      	sub	sp, #16
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	3320      	adds	r3, #32
 800a4a4:	f107 020c 	add.w	r2, r7, #12
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 fc0c 	bl	800acc8 <stts751_device_id_get>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d002      	beq.n	800a4bc <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 800a4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ba:	e003      	b.n	800a4c4 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 800a4bc:	7b7a      	ldrb	r2, [r7, #13]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	f04f 0200 	mov.w	r2, #0
 800a4fa:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 800a502:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	f04f 0200 	mov.w	r2, #0
 800a50a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	f04f 0200 	mov.w	r2, #0
 800a512:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bc80      	pop	{r7}
 800a51e:	4770      	bx	lr

0800a520 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d101      	bne.n	800a536 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	e010      	b.n	800a558 <STTS751_TEMP_Enable+0x38>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f8b5 	bl	800a6ac <STTS751_TEMP_SetOutputDataRate>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <STTS751_TEMP_Enable+0x2e>
  {
    return STTS751_ERROR;
 800a548:	f04f 33ff 	mov.w	r3, #4294967295
 800a54c:	e004      	b.n	800a558 <STTS751_TEMP_Enable+0x38>
  }

  pObj->temp_is_enabled = 1;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	e01c      	b.n	800a5b0 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	3334      	adds	r3, #52	@ 0x34
 800a57a:	4619      	mov	r1, r3
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f81b 	bl	800a5b8 <STTS751_TEMP_GetOutputDataRate>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 800a588:	f04f 33ff 	mov.w	r3, #4294967295
 800a58c:	e010      	b.n	800a5b0 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	3320      	adds	r3, #32
 800a592:	2180      	movs	r1, #128	@ 0x80
 800a594:	4618      	mov	r0, r3
 800a596:	f000 fa0e 	bl	800a9b6 <stts751_temp_data_rate_set>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d002      	beq.n	800a5a6 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 800a5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a4:	e004      	b.n	800a5b0 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	3320      	adds	r3, #32
 800a5ca:	f107 020b 	add.w	r2, r7, #11
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 fa47 	bl	800aa64 <stts751_temp_data_rate_get>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 800a5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a5e0:	e060      	b.n	800a6a4 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 800a5e2:	7afb      	ldrb	r3, [r7, #11]
 800a5e4:	2b90      	cmp	r3, #144	@ 0x90
 800a5e6:	d021      	beq.n	800a62c <STTS751_TEMP_GetOutputDataRate+0x74>
 800a5e8:	2b90      	cmp	r3, #144	@ 0x90
 800a5ea:	dc56      	bgt.n	800a69a <STTS751_TEMP_GetOutputDataRate+0xe2>
 800a5ec:	2b09      	cmp	r3, #9
 800a5ee:	dc1b      	bgt.n	800a628 <STTS751_TEMP_GetOutputDataRate+0x70>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	db52      	blt.n	800a69a <STTS751_TEMP_GetOutputDataRate+0xe2>
 800a5f4:	2b09      	cmp	r3, #9
 800a5f6:	d850      	bhi.n	800a69a <STTS751_TEMP_GetOutputDataRate+0xe2>
 800a5f8:	a201      	add	r2, pc, #4	@ (adr r2, 800a600 <STTS751_TEMP_GetOutputDataRate+0x48>)
 800a5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5fe:	bf00      	nop
 800a600:	0800a637 	.word	0x0800a637
 800a604:	0800a641 	.word	0x0800a641
 800a608:	0800a64b 	.word	0x0800a64b
 800a60c:	0800a655 	.word	0x0800a655
 800a610:	0800a65f 	.word	0x0800a65f
 800a614:	0800a669 	.word	0x0800a669
 800a618:	0800a673 	.word	0x0800a673
 800a61c:	0800a67d 	.word	0x0800a67d
 800a620:	0800a687 	.word	0x0800a687
 800a624:	0800a691 	.word	0x0800a691
 800a628:	2b80      	cmp	r3, #128	@ 0x80
 800a62a:	d136      	bne.n	800a69a <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	f04f 0200 	mov.w	r2, #0
 800a632:	601a      	str	r2, [r3, #0]
      break;
 800a634:	e035      	b.n	800a6a2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	f04f 5276 	mov.w	r2, #1031798784	@ 0x3d800000
 800a63c:	601a      	str	r2, [r3, #0]
      break;
 800a63e:	e030      	b.n	800a6a2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 800a646:	601a      	str	r2, [r3, #0]
      break;
 800a648:	e02b      	b.n	800a6a2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800a650:	601a      	str	r2, [r3, #0]
      break;
 800a652:	e026      	b.n	800a6a2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800a65a:	601a      	str	r2, [r3, #0]
      break;
 800a65c:	e021      	b.n	800a6a2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a664:	601a      	str	r2, [r3, #0]
      break;
 800a666:	e01c      	b.n	800a6a2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a66e:	601a      	str	r2, [r3, #0]
      break;
 800a670:	e017      	b.n	800a6a2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800a678:	601a      	str	r2, [r3, #0]
      break;
 800a67a:	e012      	b.n	800a6a2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800a682:	601a      	str	r2, [r3, #0]
      break;
 800a684:	e00d      	b.n	800a6a2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 800a68c:	601a      	str	r2, [r3, #0]
      break;
 800a68e:	e008      	b.n	800a6a2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 800a696:	601a      	str	r2, [r3, #0]
      break;
 800a698:	e003      	b.n	800a6a2 <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 800a69a:	f04f 33ff 	mov.w	r3, #4294967295
 800a69e:	60fb      	str	r3, [r7, #12]
      break;
 800a6a0:	bf00      	nop
  }

  return ret;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	3320      	adds	r3, #32
 800a6ba:	f107 020e 	add.w	r2, r7, #14
 800a6be:	4611      	mov	r1, r2
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f000 fa75 	bl	800abb0 <stts751_resolution_get>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d002      	beq.n	800a6d2 <STTS751_TEMP_SetOutputDataRate+0x26>
  {
    return STTS751_ERROR;
 800a6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d0:	e09a      	b.n	800a808 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 800a6d2:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800a6d6:	6838      	ldr	r0, [r7, #0]
 800a6d8:	f7f6 fcd8 	bl	800108c <__aeabi_fcmpeq>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00e      	beq.n	800a700 <STTS751_TEMP_SetOutputDataRate+0x54>
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
 800a6e4:	2b03      	cmp	r3, #3
 800a6e6:	d10b      	bne.n	800a700 <STTS751_TEMP_SetOutputDataRate+0x54>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	3320      	adds	r3, #32
 800a6ec:	2101      	movs	r1, #1
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 fa38 	bl	800ab64 <stts751_resolution_set>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d002      	beq.n	800a700 <STTS751_TEMP_SetOutputDataRate+0x54>
    {
      return STTS751_ERROR;
 800a6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a6fe:	e083      	b.n	800a808 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 800a700:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 800a704:	6838      	ldr	r0, [r7, #0]
 800a706:	f7f6 fcc1 	bl	800108c <__aeabi_fcmpeq>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d011      	beq.n	800a734 <STTS751_TEMP_SetOutputDataRate+0x88>
 800a710:	7bbb      	ldrb	r3, [r7, #14]
 800a712:	2b03      	cmp	r3, #3
 800a714:	d002      	beq.n	800a71c <STTS751_TEMP_SetOutputDataRate+0x70>
 800a716:	7bbb      	ldrb	r3, [r7, #14]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d10b      	bne.n	800a734 <STTS751_TEMP_SetOutputDataRate+0x88>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3320      	adds	r3, #32
 800a720:	2100      	movs	r1, #0
 800a722:	4618      	mov	r0, r3
 800a724:	f000 fa1e 	bl	800ab64 <stts751_resolution_set>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d002      	beq.n	800a734 <STTS751_TEMP_SetOutputDataRate+0x88>
    {
      return STTS751_ERROR;
 800a72e:	f04f 33ff 	mov.w	r3, #4294967295
 800a732:	e069      	b.n	800a808 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 800a734:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800a738:	6838      	ldr	r0, [r7, #0]
 800a73a:	f7f6 fcbb 	bl	80010b4 <__aeabi_fcmple>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <STTS751_TEMP_SetOutputDataRate+0x9c>
 800a744:	2300      	movs	r3, #0
 800a746:	e050      	b.n	800a7ea <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a748:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800a74c:	6838      	ldr	r0, [r7, #0]
 800a74e:	f7f6 fcb1 	bl	80010b4 <__aeabi_fcmple>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <STTS751_TEMP_SetOutputDataRate+0xb0>
 800a758:	2301      	movs	r3, #1
 800a75a:	e046      	b.n	800a7ea <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a75c:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800a760:	6838      	ldr	r0, [r7, #0]
 800a762:	f7f6 fca7 	bl	80010b4 <__aeabi_fcmple>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <STTS751_TEMP_SetOutputDataRate+0xc4>
 800a76c:	2302      	movs	r3, #2
 800a76e:	e03c      	b.n	800a7ea <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a770:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800a774:	6838      	ldr	r0, [r7, #0]
 800a776:	f7f6 fc9d 	bl	80010b4 <__aeabi_fcmple>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <STTS751_TEMP_SetOutputDataRate+0xd8>
 800a780:	2303      	movs	r3, #3
 800a782:	e032      	b.n	800a7ea <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a784:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800a788:	6838      	ldr	r0, [r7, #0]
 800a78a:	f7f6 fc93 	bl	80010b4 <__aeabi_fcmple>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <STTS751_TEMP_SetOutputDataRate+0xec>
 800a794:	2304      	movs	r3, #4
 800a796:	e028      	b.n	800a7ea <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a798:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a79c:	6838      	ldr	r0, [r7, #0]
 800a79e:	f7f6 fc89 	bl	80010b4 <__aeabi_fcmple>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <STTS751_TEMP_SetOutputDataRate+0x100>
 800a7a8:	2305      	movs	r3, #5
 800a7aa:	e01e      	b.n	800a7ea <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a7ac:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800a7b0:	6838      	ldr	r0, [r7, #0]
 800a7b2:	f7f6 fc7f 	bl	80010b4 <__aeabi_fcmple>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d001      	beq.n	800a7c0 <STTS751_TEMP_SetOutputDataRate+0x114>
 800a7bc:	2306      	movs	r3, #6
 800a7be:	e014      	b.n	800a7ea <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a7c0:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800a7c4:	6838      	ldr	r0, [r7, #0]
 800a7c6:	f7f6 fc75 	bl	80010b4 <__aeabi_fcmple>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <STTS751_TEMP_SetOutputDataRate+0x128>
 800a7d0:	2307      	movs	r3, #7
 800a7d2:	e00a      	b.n	800a7ea <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a7d4:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800a7d8:	6838      	ldr	r0, [r7, #0]
 800a7da:	f7f6 fc6b 	bl	80010b4 <__aeabi_fcmple>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <STTS751_TEMP_SetOutputDataRate+0x13c>
 800a7e4:	2308      	movs	r3, #8
 800a7e6:	e000      	b.n	800a7ea <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a7e8:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 800a7ea:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	3320      	adds	r3, #32
 800a7f0:	7bfa      	ldrb	r2, [r7, #15]
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f000 f8de 	bl	800a9b6 <stts751_temp_data_rate_set>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d002      	beq.n	800a806 <STTS751_TEMP_SetOutputDataRate+0x15a>
  {
    return STTS751_ERROR;
 800a800:	f04f 33ff 	mov.w	r3, #4294967295
 800a804:	e000      	b.n	800a808 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  return STTS751_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	3320      	adds	r3, #32
 800a81e:	f107 020e 	add.w	r2, r7, #14
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f000 f9fb 	bl	800ac20 <stts751_temperature_raw_get>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 800a830:	f04f 33ff 	mov.w	r3, #4294967295
 800a834:	e008      	b.n	800a848 <STTS751_TEMP_GetTemperature+0x38>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 800a836:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 f8a6 	bl	800a98c <stts751_from_lsb_to_celsius>
 800a840:	4602      	mov	r2, r0
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	601a      	str	r2, [r3, #0]

  return STTS751_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3710      	adds	r7, #16
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a850:	b590      	push	{r4, r7, lr}
 800a852:	b089      	sub	sp, #36	@ 0x24
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	607a      	str	r2, [r7, #4]
 800a85a:	461a      	mov	r2, r3
 800a85c:	460b      	mov	r3, r1
 800a85e:	72fb      	strb	r3, [r7, #11]
 800a860:	4613      	mov	r3, r2
 800a862:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d11f      	bne.n	800a8b4 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a874:	2300      	movs	r3, #0
 800a876:	83fb      	strh	r3, [r7, #30]
 800a878:	e018      	b.n	800a8ac <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	695c      	ldr	r4, [r3, #20]
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	7b1b      	ldrb	r3, [r3, #12]
 800a882:	4618      	mov	r0, r3
 800a884:	7afb      	ldrb	r3, [r7, #11]
 800a886:	b29a      	uxth	r2, r3
 800a888:	8bfb      	ldrh	r3, [r7, #30]
 800a88a:	4413      	add	r3, r2
 800a88c:	b299      	uxth	r1, r3
 800a88e:	8bfb      	ldrh	r3, [r7, #30]
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	441a      	add	r2, r3
 800a894:	2301      	movs	r3, #1
 800a896:	47a0      	blx	r4
 800a898:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 800a8a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a4:	e007      	b.n	800a8b6 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a8a6:	8bfb      	ldrh	r3, [r7, #30]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	83fb      	strh	r3, [r7, #30]
 800a8ac:	8bfa      	ldrh	r2, [r7, #30]
 800a8ae:	893b      	ldrh	r3, [r7, #8]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d3e2      	bcc.n	800a87a <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a8b4:	69bb      	ldr	r3, [r7, #24]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3724      	adds	r7, #36	@ 0x24
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd90      	pop	{r4, r7, pc}

0800a8be <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a8be:	b590      	push	{r4, r7, lr}
 800a8c0:	b089      	sub	sp, #36	@ 0x24
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	60f8      	str	r0, [r7, #12]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	72fb      	strb	r3, [r7, #11]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d11f      	bne.n	800a922 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	83fb      	strh	r3, [r7, #30]
 800a8e6:	e018      	b.n	800a91a <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	691c      	ldr	r4, [r3, #16]
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	7b1b      	ldrb	r3, [r3, #12]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	7afb      	ldrb	r3, [r7, #11]
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	8bfb      	ldrh	r3, [r7, #30]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	b299      	uxth	r1, r3
 800a8fc:	8bfb      	ldrh	r3, [r7, #30]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	441a      	add	r2, r3
 800a902:	2301      	movs	r3, #1
 800a904:	47a0      	blx	r4
 800a906:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d002      	beq.n	800a914 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 800a90e:	f04f 33ff 	mov.w	r3, #4294967295
 800a912:	e007      	b.n	800a924 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a914:	8bfb      	ldrh	r3, [r7, #30]
 800a916:	3301      	adds	r3, #1
 800a918:	83fb      	strh	r3, [r7, #30]
 800a91a:	8bfa      	ldrh	r2, [r7, #30]
 800a91c:	893b      	ldrh	r3, [r7, #8]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d3e2      	bcc.n	800a8e8 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a922:	69bb      	ldr	r3, [r7, #24]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3724      	adds	r7, #36	@ 0x24
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd90      	pop	{r4, r7, pc}

0800a92c <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800a92c:	b590      	push	{r4, r7, lr}
 800a92e:	b087      	sub	sp, #28
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	607a      	str	r2, [r7, #4]
 800a936:	461a      	mov	r2, r3
 800a938:	460b      	mov	r3, r1
 800a93a:	72fb      	strb	r3, [r7, #11]
 800a93c:	4613      	mov	r3, r2
 800a93e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	685c      	ldr	r4, [r3, #4]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	68d8      	ldr	r0, [r3, #12]
 800a948:	893b      	ldrh	r3, [r7, #8]
 800a94a:	7af9      	ldrb	r1, [r7, #11]
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	47a0      	blx	r4
 800a950:	6178      	str	r0, [r7, #20]

  return ret;
 800a952:	697b      	ldr	r3, [r7, #20]
}
 800a954:	4618      	mov	r0, r3
 800a956:	371c      	adds	r7, #28
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd90      	pop	{r4, r7, pc}

0800a95c <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800a95c:	b590      	push	{r4, r7, lr}
 800a95e:	b087      	sub	sp, #28
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	607a      	str	r2, [r7, #4]
 800a966:	461a      	mov	r2, r3
 800a968:	460b      	mov	r3, r1
 800a96a:	72fb      	strb	r3, [r7, #11]
 800a96c:	4613      	mov	r3, r2
 800a96e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681c      	ldr	r4, [r3, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	68d8      	ldr	r0, [r3, #12]
 800a978:	893b      	ldrh	r3, [r7, #8]
 800a97a:	7af9      	ldrb	r1, [r7, #11]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	47a0      	blx	r4
 800a980:	6178      	str	r0, [r7, #20]

  return ret;
 800a982:	697b      	ldr	r3, [r7, #20]
}
 800a984:	4618      	mov	r0, r3
 800a986:	371c      	adds	r7, #28
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd90      	pop	{r4, r7, pc}

0800a98c <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	4603      	mov	r3, r0
 800a994:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 800a996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7f6 f98e 	bl	8000cbc <__aeabi_i2f>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7f6 fa90 	bl	8000ecc <__aeabi_fdiv>
 800a9ac:	4603      	mov	r3, r0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b086      	sub	sp, #24
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	460b      	mov	r3, r1
 800a9c0:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 800a9c2:	23aa      	movs	r3, #170	@ 0xaa
 800a9c4:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800a9c6:	f107 020c 	add.w	r2, r7, #12
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	2104      	movs	r1, #4
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7ff ffac 	bl	800a92c <stts751_read_reg>
 800a9d4:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10f      	bne.n	800a9fc <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 800a9dc:	78fb      	ldrb	r3, [r7, #3]
 800a9de:	f003 030f 	and.w	r3, r3, #15
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	7b3b      	ldrb	r3, [r7, #12]
 800a9e6:	f362 0303 	bfi	r3, r2, #0, #4
 800a9ea:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 800a9ec:	f107 020c 	add.w	r2, r7, #12
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	2104      	movs	r1, #4
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7ff ffb1 	bl	800a95c <stts751_write_reg>
 800a9fa:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d107      	bne.n	800aa12 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800aa02:	f107 0210 	add.w	r2, r7, #16
 800aa06:	2301      	movs	r3, #1
 800aa08:	2103      	movs	r1, #3
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f7ff ff8e 	bl	800a92c <stts751_read_reg>
 800aa10:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d111      	bne.n	800aa3c <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 800aa18:	78fb      	ldrb	r3, [r7, #3]
 800aa1a:	09db      	lsrs	r3, r3, #7
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	f003 0301 	and.w	r3, r3, #1
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	7c3b      	ldrb	r3, [r7, #16]
 800aa26:	f362 1386 	bfi	r3, r2, #6, #1
 800aa2a:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 800aa2c:	f107 0210 	add.w	r2, r7, #16
 800aa30:	2301      	movs	r3, #1
 800aa32:	2103      	movs	r1, #3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff ff91 	bl	800a95c <stts751_write_reg>
 800aa3a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10a      	bne.n	800aa58 <stts751_temp_data_rate_set+0xa2>
 800aa42:	78fb      	ldrb	r3, [r7, #3]
 800aa44:	2b90      	cmp	r3, #144	@ 0x90
 800aa46:	d107      	bne.n	800aa58 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 800aa48:	f107 020b 	add.w	r2, r7, #11
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	210f      	movs	r1, #15
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f7ff ff83 	bl	800a95c <stts751_write_reg>
 800aa56:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800aa58:	697b      	ldr	r3, [r7, #20]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3718      	adds	r7, #24
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
	...

0800aa64 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800aa6e:	f107 0210 	add.w	r2, r7, #16
 800aa72:	2301      	movs	r3, #1
 800aa74:	2104      	movs	r1, #4
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f7ff ff58 	bl	800a92c <stts751_read_reg>
 800aa7c:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d107      	bne.n	800aa94 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800aa84:	f107 020c 	add.w	r2, r7, #12
 800aa88:	2301      	movs	r3, #1
 800aa8a:	2103      	movs	r1, #3
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7ff ff4d 	bl	800a92c <stts751_read_reg>
 800aa92:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 800aa94:	7b3b      	ldrb	r3, [r7, #12]
 800aa96:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	01db      	lsls	r3, r3, #7
 800aa9e:	7c3a      	ldrb	r2, [r7, #16]
 800aaa0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800aaa4:	b2d2      	uxtb	r2, r2
 800aaa6:	4413      	add	r3, r2
 800aaa8:	2b90      	cmp	r3, #144	@ 0x90
 800aaaa:	d025      	beq.n	800aaf8 <stts751_temp_data_rate_get+0x94>
 800aaac:	2b90      	cmp	r3, #144	@ 0x90
 800aaae:	dc4f      	bgt.n	800ab50 <stts751_temp_data_rate_get+0xec>
 800aab0:	2b09      	cmp	r3, #9
 800aab2:	dc1b      	bgt.n	800aaec <stts751_temp_data_rate_get+0x88>
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	db4b      	blt.n	800ab50 <stts751_temp_data_rate_get+0xec>
 800aab8:	2b09      	cmp	r3, #9
 800aaba:	d849      	bhi.n	800ab50 <stts751_temp_data_rate_get+0xec>
 800aabc:	a201      	add	r2, pc, #4	@ (adr r2, 800aac4 <stts751_temp_data_rate_get+0x60>)
 800aabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac2:	bf00      	nop
 800aac4:	0800ab01 	.word	0x0800ab01
 800aac8:	0800ab09 	.word	0x0800ab09
 800aacc:	0800ab11 	.word	0x0800ab11
 800aad0:	0800ab19 	.word	0x0800ab19
 800aad4:	0800ab21 	.word	0x0800ab21
 800aad8:	0800ab29 	.word	0x0800ab29
 800aadc:	0800ab31 	.word	0x0800ab31
 800aae0:	0800ab39 	.word	0x0800ab39
 800aae4:	0800ab41 	.word	0x0800ab41
 800aae8:	0800ab49 	.word	0x0800ab49
 800aaec:	2b80      	cmp	r3, #128	@ 0x80
 800aaee:	d12f      	bne.n	800ab50 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	2280      	movs	r2, #128	@ 0x80
 800aaf4:	701a      	strb	r2, [r3, #0]
      break;
 800aaf6:	e02f      	b.n	800ab58 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	2290      	movs	r2, #144	@ 0x90
 800aafc:	701a      	strb	r2, [r3, #0]
      break;
 800aafe:	e02b      	b.n	800ab58 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	2200      	movs	r2, #0
 800ab04:	701a      	strb	r2, [r3, #0]
      break;
 800ab06:	e027      	b.n	800ab58 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	701a      	strb	r2, [r3, #0]
      break;
 800ab0e:	e023      	b.n	800ab58 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	2202      	movs	r2, #2
 800ab14:	701a      	strb	r2, [r3, #0]
      break;
 800ab16:	e01f      	b.n	800ab58 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	2203      	movs	r2, #3
 800ab1c:	701a      	strb	r2, [r3, #0]
      break;
 800ab1e:	e01b      	b.n	800ab58 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	2204      	movs	r2, #4
 800ab24:	701a      	strb	r2, [r3, #0]
      break;
 800ab26:	e017      	b.n	800ab58 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	2205      	movs	r2, #5
 800ab2c:	701a      	strb	r2, [r3, #0]
      break;
 800ab2e:	e013      	b.n	800ab58 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	2206      	movs	r2, #6
 800ab34:	701a      	strb	r2, [r3, #0]
      break;
 800ab36:	e00f      	b.n	800ab58 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	2207      	movs	r2, #7
 800ab3c:	701a      	strb	r2, [r3, #0]
      break;
 800ab3e:	e00b      	b.n	800ab58 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	2208      	movs	r2, #8
 800ab44:	701a      	strb	r2, [r3, #0]
      break;
 800ab46:	e007      	b.n	800ab58 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2209      	movs	r2, #9
 800ab4c:	701a      	strb	r2, [r3, #0]
      break;
 800ab4e:	e003      	b.n	800ab58 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	2280      	movs	r2, #128	@ 0x80
 800ab54:	701a      	strb	r2, [r3, #0]
      break;
 800ab56:	bf00      	nop
  }

  return ret;
 800ab58:	697b      	ldr	r3, [r7, #20]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop

0800ab64 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800ab70:	f107 0208 	add.w	r2, r7, #8
 800ab74:	2301      	movs	r3, #1
 800ab76:	2103      	movs	r1, #3
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7ff fed7 	bl	800a92c <stts751_read_reg>
 800ab7e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10f      	bne.n	800aba6 <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 800ab86:	78fb      	ldrb	r3, [r7, #3]
 800ab88:	f003 0303 	and.w	r3, r3, #3
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	7a3b      	ldrb	r3, [r7, #8]
 800ab90:	f362 0383 	bfi	r3, r2, #2, #2
 800ab94:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800ab96:	f107 0208 	add.w	r2, r7, #8
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	2103      	movs	r1, #3
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f7ff fedc 	bl	800a95c <stts751_write_reg>
 800aba4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800aba6:	68fb      	ldr	r3, [r7, #12]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800abba:	f107 0208 	add.w	r2, r7, #8
 800abbe:	2301      	movs	r3, #1
 800abc0:	2103      	movs	r1, #3
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7ff feb2 	bl	800a92c <stts751_read_reg>
 800abc8:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 800abca:	7a3b      	ldrb	r3, [r7, #8]
 800abcc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	2b03      	cmp	r3, #3
 800abd4:	d81a      	bhi.n	800ac0c <stts751_resolution_get+0x5c>
 800abd6:	a201      	add	r2, pc, #4	@ (adr r2, 800abdc <stts751_resolution_get+0x2c>)
 800abd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abdc:	0800abf5 	.word	0x0800abf5
 800abe0:	0800abfd 	.word	0x0800abfd
 800abe4:	0800abed 	.word	0x0800abed
 800abe8:	0800ac05 	.word	0x0800ac05
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	2202      	movs	r2, #2
 800abf0:	701a      	strb	r2, [r3, #0]
      break;
 800abf2:	e00f      	b.n	800ac14 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2200      	movs	r2, #0
 800abf8:	701a      	strb	r2, [r3, #0]
      break;
 800abfa:	e00b      	b.n	800ac14 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	2201      	movs	r2, #1
 800ac00:	701a      	strb	r2, [r3, #0]
      break;
 800ac02:	e007      	b.n	800ac14 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	2203      	movs	r2, #3
 800ac08:	701a      	strb	r2, [r3, #0]
      break;
 800ac0a:	e003      	b.n	800ac14 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	701a      	strb	r2, [r3, #0]
      break;
 800ac12:	bf00      	nop
  }

  return ret;
 800ac14:	68fb      	ldr	r3, [r7, #12]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop

0800ac20 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 800ac2a:	f107 0308 	add.w	r3, r7, #8
 800ac2e:	1c5a      	adds	r2, r3, #1
 800ac30:	2301      	movs	r3, #1
 800ac32:	2100      	movs	r1, #0
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7ff fe79 	bl	800a92c <stts751_read_reg>
 800ac3a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d117      	bne.n	800ac72 <stts751_temperature_raw_get+0x52>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 800ac42:	f107 0208 	add.w	r2, r7, #8
 800ac46:	2301      	movs	r3, #1
 800ac48:	2102      	movs	r1, #2
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff fe6e 	bl	800a92c <stts751_read_reg>
 800ac50:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 800ac52:	7a7b      	ldrb	r3, [r7, #9]
 800ac54:	b21a      	sxth	r2, r3
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	021b      	lsls	r3, r3, #8
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	7a3a      	ldrb	r2, [r7, #8]
 800ac68:	4413      	add	r3, r2
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	b21a      	sxth	r2, r3
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800ac72:	68fb      	ldr	r3, [r7, #12]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 800ac88:	f107 0208 	add.w	r2, r7, #8
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	2103      	movs	r1, #3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7ff fe4b 	bl	800a92c <stts751_read_reg>
 800ac96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10f      	bne.n	800acbe <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 800ac9e:	78fb      	ldrb	r3, [r7, #3]
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	b2da      	uxtb	r2, r3
 800aca6:	7a3b      	ldrb	r3, [r7, #8]
 800aca8:	f362 13c7 	bfi	r3, r2, #7, #1
 800acac:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 800acae:	f107 0208 	add.w	r2, r7, #8
 800acb2:	2301      	movs	r3, #1
 800acb4:	2103      	movs	r1, #3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff fe50 	bl	800a95c <stts751_write_reg>
 800acbc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800acbe:	68fb      	ldr	r3, [r7, #12]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 800acd2:	683a      	ldr	r2, [r7, #0]
 800acd4:	2301      	movs	r3, #1
 800acd6:	21fd      	movs	r1, #253	@ 0xfd
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f7ff fe27 	bl	800a92c <stts751_read_reg>
 800acde:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d107      	bne.n	800acf6 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	1c5a      	adds	r2, r3, #1
 800acea:	2301      	movs	r3, #1
 800acec:	21fe      	movs	r1, #254	@ 0xfe
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7ff fe1c 	bl	800a92c <stts751_read_reg>
 800acf4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d107      	bne.n	800ad0c <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	1c9a      	adds	r2, r3, #2
 800ad00:	2301      	movs	r3, #1
 800ad02:	21ff      	movs	r1, #255	@ 0xff
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff fe11 	bl	800a92c <stts751_read_reg>
 800ad0a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
	...

0800ad18 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08c      	sub	sp, #48	@ 0x30
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800ad22:	2300      	movs	r3, #0
 800ad24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800ad26:	2301      	movs	r3, #1
 800ad28:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d07c      	beq.n	800ae2e <IKS01A3_ENV_SENSOR_Init+0x116>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	f200 80b2 	bhi.w	800aea0 <IKS01A3_ENV_SENSOR_Init+0x188>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d003      	beq.n	800ad4a <IKS01A3_ENV_SENSOR_Init+0x32>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d039      	beq.n	800adbc <IKS01A3_ENV_SENSOR_Init+0xa4>
 800ad48:	e0aa      	b.n	800aea0 <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800ad4a:	6838      	ldr	r0, [r7, #0]
 800ad4c:	f000 f9b6 	bl	800b0bc <HTS221_0_Probe>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d002      	beq.n	800ad5c <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800ad56:	f04f 33ff 	mov.w	r3, #4294967295
 800ad5a:	e0df      	b.n	800af1c <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800ad5c:	4a71      	ldr	r2, [pc, #452]	@ (800af24 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	4970      	ldr	r1, [pc, #448]	@ (800af28 <IKS01A3_ENV_SENSOR_Init+0x210>)
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ad6e:	f107 0108 	add.w	r1, r7, #8
 800ad72:	4610      	mov	r0, r2
 800ad74:	4798      	blx	r3
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d002      	beq.n	800ad82 <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ad7c:	f06f 0306 	mvn.w	r3, #6
 800ad80:	e0cc      	b.n	800af1c <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800ad82:	7a3b      	ldrb	r3, [r7, #8]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d103      	bne.n	800ad90 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 800ad88:	6a3b      	ldr	r3, [r7, #32]
 800ad8a:	f043 0301 	orr.w	r3, r3, #1
 800ad8e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800ad90:	7abb      	ldrb	r3, [r7, #10]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d103      	bne.n	800ad9e <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800ad96:	6a3b      	ldr	r3, [r7, #32]
 800ad98:	f043 0304 	orr.w	r3, r3, #4
 800ad9c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ad9e:	7a7b      	ldrb	r3, [r7, #9]
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d103      	bne.n	800adac <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	f043 0302 	orr.w	r3, r3, #2
 800adaa:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800adac:	7afb      	ldrb	r3, [r7, #11]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d17a      	bne.n	800aea8 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	f043 0308 	orr.w	r3, r3, #8
 800adb8:	623b      	str	r3, [r7, #32]
      }
      break;
 800adba:	e075      	b.n	800aea8 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 800adbc:	6838      	ldr	r0, [r7, #0]
 800adbe:	f000 fa47 	bl	800b250 <LPS22HH_0_Probe>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d002      	beq.n	800adce <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800adc8:	f04f 33ff 	mov.w	r3, #4294967295
 800adcc:	e0a6      	b.n	800af1c <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800adce:	4a55      	ldr	r2, [pc, #340]	@ (800af24 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	4953      	ldr	r1, [pc, #332]	@ (800af28 <IKS01A3_ENV_SENSOR_Init+0x210>)
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ade0:	f107 0108 	add.w	r1, r7, #8
 800ade4:	4610      	mov	r0, r2
 800ade6:	4798      	blx	r3
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d002      	beq.n	800adf4 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800adee:	f06f 0306 	mvn.w	r3, #6
 800adf2:	e093      	b.n	800af1c <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800adf4:	7a3b      	ldrb	r3, [r7, #8]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d103      	bne.n	800ae02 <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	f043 0301 	orr.w	r3, r3, #1
 800ae00:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800ae02:	7abb      	ldrb	r3, [r7, #10]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d103      	bne.n	800ae10 <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800ae08:	6a3b      	ldr	r3, [r7, #32]
 800ae0a:	f043 0304 	orr.w	r3, r3, #4
 800ae0e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ae10:	7a7b      	ldrb	r3, [r7, #9]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d103      	bne.n	800ae1e <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800ae16:	6a3b      	ldr	r3, [r7, #32]
 800ae18:	f043 0302 	orr.w	r3, r3, #2
 800ae1c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800ae1e:	7afb      	ldrb	r3, [r7, #11]
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d143      	bne.n	800aeac <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800ae24:	6a3b      	ldr	r3, [r7, #32]
 800ae26:	f043 0308 	orr.w	r3, r3, #8
 800ae2a:	623b      	str	r3, [r7, #32]
      }
      break;
 800ae2c:	e03e      	b.n	800aeac <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 800ae2e:	6838      	ldr	r0, [r7, #0]
 800ae30:	f000 fada 	bl	800b3e8 <STTS751_0_Probe>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d002      	beq.n	800ae40 <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800ae3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae3e:	e06d      	b.n	800af1c <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800ae40:	4a38      	ldr	r2, [pc, #224]	@ (800af24 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	4937      	ldr	r1, [pc, #220]	@ (800af28 <IKS01A3_ENV_SENSOR_Init+0x210>)
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ae52:	f107 0108 	add.w	r1, r7, #8
 800ae56:	4610      	mov	r0, r2
 800ae58:	4798      	blx	r3
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d002      	beq.n	800ae66 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ae60:	f06f 0306 	mvn.w	r3, #6
 800ae64:	e05a      	b.n	800af1c <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800ae66:	7a3b      	ldrb	r3, [r7, #8]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d103      	bne.n	800ae74 <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	f043 0301 	orr.w	r3, r3, #1
 800ae72:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800ae74:	7abb      	ldrb	r3, [r7, #10]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d103      	bne.n	800ae82 <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 800ae7a:	6a3b      	ldr	r3, [r7, #32]
 800ae7c:	f043 0304 	orr.w	r3, r3, #4
 800ae80:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ae82:	7a7b      	ldrb	r3, [r7, #9]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d103      	bne.n	800ae90 <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	f043 0302 	orr.w	r3, r3, #2
 800ae8e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800ae90:	7afb      	ldrb	r3, [r7, #11]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d10c      	bne.n	800aeb0 <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	f043 0308 	orr.w	r3, r3, #8
 800ae9c:	623b      	str	r3, [r7, #32]
      }
      break;
 800ae9e:	e007      	b.n	800aeb0 <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800aea0:	f06f 0301 	mvn.w	r3, #1
 800aea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800aea6:	e004      	b.n	800aeb2 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 800aea8:	bf00      	nop
 800aeaa:	e002      	b.n	800aeb2 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 800aeac:	bf00      	nop
 800aeae:	e000      	b.n	800aeb2 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 800aeb0:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800aeb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800aeb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeba:	e02f      	b.n	800af1c <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 800aebc:	2300      	movs	r3, #0
 800aebe:	627b      	str	r3, [r7, #36]	@ 0x24
 800aec0:	e028      	b.n	800af14 <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800aec2:	683a      	ldr	r2, [r7, #0]
 800aec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec6:	4013      	ands	r3, r2
 800aec8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d11c      	bne.n	800af08 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 800aece:	6a3a      	ldr	r2, [r7, #32]
 800aed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed2:	4013      	ands	r3, r2
 800aed4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d116      	bne.n	800af08 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800aeda:	4a14      	ldr	r2, [pc, #80]	@ (800af2c <IKS01A3_ENV_SENSOR_Init+0x214>)
 800aedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aee2:	4913      	ldr	r1, [pc, #76]	@ (800af30 <IKS01A3_ENV_SENSOR_Init+0x218>)
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	0092      	lsls	r2, r2, #2
 800aee8:	4413      	add	r3, r2
 800aeea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	490d      	ldr	r1, [pc, #52]	@ (800af28 <IKS01A3_ENV_SENSOR_Init+0x210>)
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aef8:	4610      	mov	r0, r2
 800aefa:	4798      	blx	r3
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d002      	beq.n	800af08 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800af02:	f06f 0304 	mvn.w	r3, #4
 800af06:	e009      	b.n	800af1c <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 800af08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0a:	005b      	lsls	r3, r3, #1
 800af0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 800af0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af10:	3301      	adds	r3, #1
 800af12:	627b      	str	r3, [r7, #36]	@ 0x24
 800af14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af16:	2b03      	cmp	r3, #3
 800af18:	d9d3      	bls.n	800aec2 <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800af1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3730      	adds	r7, #48	@ 0x30
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	200005c8 	.word	0x200005c8
 800af28:	2000058c 	.word	0x2000058c
 800af2c:	20000158 	.word	0x20000158
 800af30:	20000598 	.word	0x20000598

0800af34 <IKS01A3_ENV_SENSOR_Enable>:
  * @param  Instance environmental sensor instance to be used
  * @param  Function Environmental sensor function
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2b02      	cmp	r3, #2
 800af42:	d903      	bls.n	800af4c <IKS01A3_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800af44:	f06f 0301 	mvn.w	r3, #1
 800af48:	60fb      	str	r3, [r7, #12]
 800af4a:	e026      	b.n	800af9a <IKS01A3_ENV_SENSOR_Enable+0x66>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800af4c:	4a15      	ldr	r2, [pc, #84]	@ (800afa4 <IKS01A3_ENV_SENSOR_Enable+0x70>)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	4013      	ands	r3, r2
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d11a      	bne.n	800af94 <IKS01A3_ENV_SENSOR_Enable+0x60>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800af5e:	4a12      	ldr	r2, [pc, #72]	@ (800afa8 <IKS01A3_ENV_SENSOR_Enable+0x74>)
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af66:	4911      	ldr	r1, [pc, #68]	@ (800afac <IKS01A3_ENV_SENSOR_Enable+0x78>)
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	0092      	lsls	r2, r2, #2
 800af6c:	4413      	add	r3, r2
 800af6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	490e      	ldr	r1, [pc, #56]	@ (800afb0 <IKS01A3_ENV_SENSOR_Enable+0x7c>)
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af7c:	4610      	mov	r0, r2
 800af7e:	4798      	blx	r3
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d003      	beq.n	800af8e <IKS01A3_ENV_SENSOR_Enable+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800af86:	f06f 0304 	mvn.w	r3, #4
 800af8a:	60fb      	str	r3, [r7, #12]
 800af8c:	e005      	b.n	800af9a <IKS01A3_ENV_SENSOR_Enable+0x66>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800af8e:	2300      	movs	r3, #0
 800af90:	60fb      	str	r3, [r7, #12]
 800af92:	e002      	b.n	800af9a <IKS01A3_ENV_SENSOR_Enable+0x66>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800af94:	f06f 0301 	mvn.w	r3, #1
 800af98:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800af9a:	68fb      	ldr	r3, [r7, #12]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	200005d4 	.word	0x200005d4
 800afa8:	20000158 	.word	0x20000158
 800afac:	20000598 	.word	0x20000598
 800afb0:	2000058c 	.word	0x2000058c

0800afb4 <IKS01A3_ENV_SENSOR_SetOutputDataRate>:
  * @param  Function Environmental sensor function
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d903      	bls.n	800afce <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800afc6:	f06f 0301 	mvn.w	r3, #1
 800afca:	617b      	str	r3, [r7, #20]
 800afcc:	e027      	b.n	800b01e <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800afce:	4a16      	ldr	r2, [pc, #88]	@ (800b028 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x74>)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	4013      	ands	r3, r2
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d11b      	bne.n	800b018 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800afe0:	4a12      	ldr	r2, [pc, #72]	@ (800b02c <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x78>)
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afe8:	4911      	ldr	r1, [pc, #68]	@ (800b030 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x7c>)
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	0092      	lsls	r2, r2, #2
 800afee:	4413      	add	r3, r2
 800aff0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	490f      	ldr	r1, [pc, #60]	@ (800b034 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x80>)
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800affe:	6879      	ldr	r1, [r7, #4]
 800b000:	4610      	mov	r0, r2
 800b002:	4798      	blx	r3
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d003      	beq.n	800b012 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b00a:	f06f 0304 	mvn.w	r3, #4
 800b00e:	617b      	str	r3, [r7, #20]
 800b010:	e005      	b.n	800b01e <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b012:	2300      	movs	r3, #0
 800b014:	617b      	str	r3, [r7, #20]
 800b016:	e002      	b.n	800b01e <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b018:	f06f 0301 	mvn.w	r3, #1
 800b01c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b01e:	697b      	ldr	r3, [r7, #20]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3718      	adds	r7, #24
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	200005d4 	.word	0x200005d4
 800b02c:	20000158 	.word	0x20000158
 800b030:	20000598 	.word	0x20000598
 800b034:	2000058c 	.word	0x2000058c

0800b038 <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2b02      	cmp	r3, #2
 800b048:	d903      	bls.n	800b052 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b04a:	f06f 0301 	mvn.w	r3, #1
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	e027      	b.n	800b0a2 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800b052:	4a16      	ldr	r2, [pc, #88]	@ (800b0ac <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	4013      	ands	r3, r2
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	429a      	cmp	r2, r3
 800b062:	d11b      	bne.n	800b09c <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800b064:	4a12      	ldr	r2, [pc, #72]	@ (800b0b0 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b06c:	4911      	ldr	r1, [pc, #68]	@ (800b0b4 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	0092      	lsls	r2, r2, #2
 800b072:	4413      	add	r3, r2
 800b074:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	490f      	ldr	r1, [pc, #60]	@ (800b0b8 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b082:	6879      	ldr	r1, [r7, #4]
 800b084:	4610      	mov	r0, r2
 800b086:	4798      	blx	r3
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b08e:	f06f 0304 	mvn.w	r3, #4
 800b092:	617b      	str	r3, [r7, #20]
 800b094:	e005      	b.n	800b0a2 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b096:	2300      	movs	r3, #0
 800b098:	617b      	str	r3, [r7, #20]
 800b09a:	e002      	b.n	800b0a2 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b09c:	f06f 0301 	mvn.w	r3, #1
 800b0a0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b0a2:	697b      	ldr	r3, [r7, #20]
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3718      	adds	r7, #24
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	200005d4 	.word	0x200005d4
 800b0b0:	20000158 	.word	0x20000158
 800b0b4:	20000598 	.word	0x20000598
 800b0b8:	2000058c 	.word	0x2000058c

0800b0bc <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b092      	sub	sp, #72	@ 0x48
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	647b      	str	r3, [r7, #68]	@ 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800b0cc:	23bf      	movs	r3, #191	@ 0xbf
 800b0ce:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b0d2:	4b51      	ldr	r3, [pc, #324]	@ (800b218 <HTS221_0_Probe+0x15c>)
 800b0d4:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b0d6:	4b51      	ldr	r3, [pc, #324]	@ (800b21c <HTS221_0_Probe+0x160>)
 800b0d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b0da:	4b51      	ldr	r3, [pc, #324]	@ (800b220 <HTS221_0_Probe+0x164>)
 800b0dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b0de:	4b51      	ldr	r3, [pc, #324]	@ (800b224 <HTS221_0_Probe+0x168>)
 800b0e0:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b0e2:	4b51      	ldr	r3, [pc, #324]	@ (800b228 <HTS221_0_Probe+0x16c>)
 800b0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800b0e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	484f      	ldr	r0, [pc, #316]	@ (800b22c <HTS221_0_Probe+0x170>)
 800b0ee:	f7f7 fe6f 	bl	8002dd0 <HTS221_RegisterBusIO>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d003      	beq.n	800b100 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b0f8:	f06f 0306 	mvn.w	r3, #6
 800b0fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0fe:	e085      	b.n	800b20c <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800b100:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b104:	4619      	mov	r1, r3
 800b106:	4849      	ldr	r0, [pc, #292]	@ (800b22c <HTS221_0_Probe+0x170>)
 800b108:	f7f7 feeb 	bl	8002ee2 <HTS221_ReadID>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b112:	f06f 0306 	mvn.w	r3, #6
 800b116:	647b      	str	r3, [r7, #68]	@ 0x44
 800b118:	e078      	b.n	800b20c <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 800b11a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b11e:	2bbc      	cmp	r3, #188	@ 0xbc
 800b120:	d003      	beq.n	800b12a <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b122:	f06f 0306 	mvn.w	r3, #6
 800b126:	647b      	str	r3, [r7, #68]	@ 0x44
 800b128:	e070      	b.n	800b20c <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800b12a:	f107 0308 	add.w	r3, r7, #8
 800b12e:	4619      	mov	r1, r3
 800b130:	483e      	ldr	r0, [pc, #248]	@ (800b22c <HTS221_0_Probe+0x170>)
 800b132:	f7f7 feed 	bl	8002f10 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 800b136:	7a3b      	ldrb	r3, [r7, #8]
 800b138:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b13a:	7a7b      	ldrb	r3, [r7, #9]
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b140:	7abb      	ldrb	r3, [r7, #10]
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b146:	7afb      	ldrb	r3, [r7, #11]
 800b148:	00db      	lsls	r3, r3, #3
 800b14a:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 800b14c:	4a38      	ldr	r2, [pc, #224]	@ (800b230 <HTS221_0_Probe+0x174>)
 800b14e:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 800b150:	4b38      	ldr	r3, [pc, #224]	@ (800b234 <HTS221_0_Probe+0x178>)
 800b152:	4a36      	ldr	r2, [pc, #216]	@ (800b22c <HTS221_0_Probe+0x170>)
 800b154:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800b156:	4b38      	ldr	r3, [pc, #224]	@ (800b238 <HTS221_0_Probe+0x17c>)
 800b158:	4a38      	ldr	r2, [pc, #224]	@ (800b23c <HTS221_0_Probe+0x180>)
 800b15a:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b15c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d11d      	bne.n	800b19e <HTS221_0_Probe+0xe2>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f003 0301 	and.w	r3, r3, #1
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d018      	beq.n	800b19e <HTS221_0_Probe+0xe2>
 800b16c:	7a3b      	ldrb	r3, [r7, #8]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d115      	bne.n	800b19e <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800b172:	4b33      	ldr	r3, [pc, #204]	@ (800b240 <HTS221_0_Probe+0x184>)
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	4a33      	ldr	r2, [pc, #204]	@ (800b244 <HTS221_0_Probe+0x188>)
 800b178:	4933      	ldr	r1, [pc, #204]	@ (800b248 <HTS221_0_Probe+0x18c>)
 800b17a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800b17e:	4b2e      	ldr	r3, [pc, #184]	@ (800b238 <HTS221_0_Probe+0x17c>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a2b      	ldr	r2, [pc, #172]	@ (800b234 <HTS221_0_Probe+0x178>)
 800b186:	6812      	ldr	r2, [r2, #0]
 800b188:	4610      	mov	r0, r2
 800b18a:	4798      	blx	r3
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d003      	beq.n	800b19a <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b192:	f06f 0304 	mvn.w	r3, #4
 800b196:	647b      	str	r3, [r7, #68]	@ 0x44
 800b198:	e001      	b.n	800b19e <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b19a:	2300      	movs	r3, #0
 800b19c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800b19e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d11d      	bne.n	800b1e0 <HTS221_0_Probe+0x124>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f003 0304 	and.w	r3, r3, #4
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d018      	beq.n	800b1e0 <HTS221_0_Probe+0x124>
 800b1ae:	7abb      	ldrb	r3, [r7, #10]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d115      	bne.n	800b1e0 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800b1b4:	4b22      	ldr	r3, [pc, #136]	@ (800b240 <HTS221_0_Probe+0x184>)
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	4a22      	ldr	r2, [pc, #136]	@ (800b244 <HTS221_0_Probe+0x188>)
 800b1ba:	4924      	ldr	r1, [pc, #144]	@ (800b24c <HTS221_0_Probe+0x190>)
 800b1bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800b1c0:	4b1d      	ldr	r3, [pc, #116]	@ (800b238 <HTS221_0_Probe+0x17c>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a1b      	ldr	r2, [pc, #108]	@ (800b234 <HTS221_0_Probe+0x178>)
 800b1c8:	6812      	ldr	r2, [r2, #0]
 800b1ca:	4610      	mov	r0, r2
 800b1cc:	4798      	blx	r3
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d003      	beq.n	800b1dc <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1d4:	f06f 0304 	mvn.w	r3, #4
 800b1d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1da:	e001      	b.n	800b1e0 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b1e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d107      	bne.n	800b1f6 <HTS221_0_Probe+0x13a>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f003 0302 	and.w	r3, r3, #2
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1f0:	f06f 0304 	mvn.w	r3, #4
 800b1f4:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b1f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d107      	bne.n	800b20c <HTS221_0_Probe+0x150>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f003 0308 	and.w	r3, r3, #8
 800b202:	2b00      	cmp	r3, #0
 800b204:	d002      	beq.n	800b20c <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b206:	f06f 0304 	mvn.w	r3, #4
 800b20a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b20c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3748      	adds	r7, #72	@ 0x48
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	08002955 	.word	0x08002955
 800b21c:	080029b9 	.word	0x080029b9
 800b220:	08002a6d 	.word	0x08002a6d
 800b224:	08002a09 	.word	0x08002a09
 800b228:	08002ad1 	.word	0x08002ad1
 800b22c:	200005e0 	.word	0x200005e0
 800b230:	200005d4 	.word	0x200005d4
 800b234:	2000058c 	.word	0x2000058c
 800b238:	200005c8 	.word	0x200005c8
 800b23c:	20000004 	.word	0x20000004
 800b240:	20000158 	.word	0x20000158
 800b244:	20000598 	.word	0x20000598
 800b248:	20000028 	.word	0x20000028
 800b24c:	20000014 	.word	0x20000014

0800b250 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b092      	sub	sp, #72	@ 0x48
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b258:	2300      	movs	r3, #0
 800b25a:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 800b25c:	2300      	movs	r3, #0
 800b25e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 800b260:	23bb      	movs	r3, #187	@ 0xbb
 800b262:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b266:	4b52      	ldr	r3, [pc, #328]	@ (800b3b0 <LPS22HH_0_Probe+0x160>)
 800b268:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b26a:	4b52      	ldr	r3, [pc, #328]	@ (800b3b4 <LPS22HH_0_Probe+0x164>)
 800b26c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b26e:	4b52      	ldr	r3, [pc, #328]	@ (800b3b8 <LPS22HH_0_Probe+0x168>)
 800b270:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b272:	4b52      	ldr	r3, [pc, #328]	@ (800b3bc <LPS22HH_0_Probe+0x16c>)
 800b274:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b276:	4b52      	ldr	r3, [pc, #328]	@ (800b3c0 <LPS22HH_0_Probe+0x170>)
 800b278:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800b27a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b27e:	4619      	mov	r1, r3
 800b280:	4850      	ldr	r0, [pc, #320]	@ (800b3c4 <LPS22HH_0_Probe+0x174>)
 800b282:	f7fa ff05 	bl	8006090 <LPS22HH_RegisterBusIO>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d003      	beq.n	800b294 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b28c:	f06f 0306 	mvn.w	r3, #6
 800b290:	647b      	str	r3, [r7, #68]	@ 0x44
 800b292:	e087      	b.n	800b3a4 <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 800b294:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b298:	4619      	mov	r1, r3
 800b29a:	484a      	ldr	r0, [pc, #296]	@ (800b3c4 <LPS22HH_0_Probe+0x174>)
 800b29c:	f7fa ffa1 	bl	80061e2 <LPS22HH_ReadID>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d003      	beq.n	800b2ae <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2a6:	f06f 0306 	mvn.w	r3, #6
 800b2aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2ac:	e07a      	b.n	800b3a4 <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 800b2ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b2b2:	2bb3      	cmp	r3, #179	@ 0xb3
 800b2b4:	d003      	beq.n	800b2be <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2b6:	f06f 0306 	mvn.w	r3, #6
 800b2ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2bc:	e072      	b.n	800b3a4 <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 800b2be:	f107 0308 	add.w	r3, r7, #8
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	483f      	ldr	r0, [pc, #252]	@ (800b3c4 <LPS22HH_0_Probe+0x174>)
 800b2c6:	f7fa ffa3 	bl	8006210 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 800b2ca:	7a3b      	ldrb	r3, [r7, #8]
 800b2cc:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 800b2ce:	7a7b      	ldrb	r3, [r7, #9]
 800b2d0:	005b      	lsls	r3, r3, #1
 800b2d2:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 800b2d4:	7abb      	ldrb	r3, [r7, #10]
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 800b2da:	7afb      	ldrb	r3, [r7, #11]
 800b2dc:	00db      	lsls	r3, r3, #3
 800b2de:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 800b2e0:	4a39      	ldr	r2, [pc, #228]	@ (800b3c8 <LPS22HH_0_Probe+0x178>)
 800b2e2:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 800b2e4:	4b39      	ldr	r3, [pc, #228]	@ (800b3cc <LPS22HH_0_Probe+0x17c>)
 800b2e6:	4a37      	ldr	r2, [pc, #220]	@ (800b3c4 <LPS22HH_0_Probe+0x174>)
 800b2e8:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800b2ea:	4b39      	ldr	r3, [pc, #228]	@ (800b3d0 <LPS22HH_0_Probe+0x180>)
 800b2ec:	4a39      	ldr	r2, [pc, #228]	@ (800b3d4 <LPS22HH_0_Probe+0x184>)
 800b2ee:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b2f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d11e      	bne.n	800b334 <LPS22HH_0_Probe+0xe4>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f003 0301 	and.w	r3, r3, #1
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d019      	beq.n	800b334 <LPS22HH_0_Probe+0xe4>
 800b300:	7a3b      	ldrb	r3, [r7, #8]
 800b302:	2b01      	cmp	r3, #1
 800b304:	d116      	bne.n	800b334 <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800b306:	4b34      	ldr	r3, [pc, #208]	@ (800b3d8 <LPS22HH_0_Probe+0x188>)
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	4a34      	ldr	r2, [pc, #208]	@ (800b3dc <LPS22HH_0_Probe+0x18c>)
 800b30c:	3304      	adds	r3, #4
 800b30e:	4934      	ldr	r1, [pc, #208]	@ (800b3e0 <LPS22HH_0_Probe+0x190>)
 800b310:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800b314:	4b2e      	ldr	r3, [pc, #184]	@ (800b3d0 <LPS22HH_0_Probe+0x180>)
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a2c      	ldr	r2, [pc, #176]	@ (800b3cc <LPS22HH_0_Probe+0x17c>)
 800b31c:	6852      	ldr	r2, [r2, #4]
 800b31e:	4610      	mov	r0, r2
 800b320:	4798      	blx	r3
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d003      	beq.n	800b330 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b328:	f06f 0304 	mvn.w	r3, #4
 800b32c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b32e:	e001      	b.n	800b334 <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b330:	2300      	movs	r3, #0
 800b332:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800b334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b336:	2b00      	cmp	r3, #0
 800b338:	d11e      	bne.n	800b378 <LPS22HH_0_Probe+0x128>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f003 0302 	and.w	r3, r3, #2
 800b340:	2b00      	cmp	r3, #0
 800b342:	d019      	beq.n	800b378 <LPS22HH_0_Probe+0x128>
 800b344:	7a7b      	ldrb	r3, [r7, #9]
 800b346:	2b01      	cmp	r3, #1
 800b348:	d116      	bne.n	800b378 <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800b34a:	4b23      	ldr	r3, [pc, #140]	@ (800b3d8 <LPS22HH_0_Probe+0x188>)
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	4a23      	ldr	r2, [pc, #140]	@ (800b3dc <LPS22HH_0_Probe+0x18c>)
 800b350:	3304      	adds	r3, #4
 800b352:	4924      	ldr	r1, [pc, #144]	@ (800b3e4 <LPS22HH_0_Probe+0x194>)
 800b354:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800b358:	4b1d      	ldr	r3, [pc, #116]	@ (800b3d0 <LPS22HH_0_Probe+0x180>)
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a1b      	ldr	r2, [pc, #108]	@ (800b3cc <LPS22HH_0_Probe+0x17c>)
 800b360:	6852      	ldr	r2, [r2, #4]
 800b362:	4610      	mov	r0, r2
 800b364:	4798      	blx	r3
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b36c:	f06f 0304 	mvn.w	r3, #4
 800b370:	647b      	str	r3, [r7, #68]	@ 0x44
 800b372:	e001      	b.n	800b378 <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b374:	2300      	movs	r3, #0
 800b376:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d107      	bne.n	800b38e <LPS22HH_0_Probe+0x13e>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f003 0304 	and.w	r3, r3, #4
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b388:	f06f 0304 	mvn.w	r3, #4
 800b38c:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b38e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b390:	2b00      	cmp	r3, #0
 800b392:	d107      	bne.n	800b3a4 <LPS22HH_0_Probe+0x154>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f003 0308 	and.w	r3, r3, #8
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d002      	beq.n	800b3a4 <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b39e:	f06f 0304 	mvn.w	r3, #4
 800b3a2:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 800b3a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3748      	adds	r7, #72	@ 0x48
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	08002955 	.word	0x08002955
 800b3b4:	080029b9 	.word	0x080029b9
 800b3b8:	08002a6d 	.word	0x08002a6d
 800b3bc:	08002a09 	.word	0x08002a09
 800b3c0:	08002ad1 	.word	0x08002ad1
 800b3c4:	20000614 	.word	0x20000614
 800b3c8:	200005d4 	.word	0x200005d4
 800b3cc:	2000058c 	.word	0x2000058c
 800b3d0:	200005c8 	.word	0x200005c8
 800b3d4:	200000a4 	.word	0x200000a4
 800b3d8:	20000158 	.word	0x20000158
 800b3dc:	20000598 	.word	0x20000598
 800b3e0:	200000c8 	.word	0x200000c8
 800b3e4:	200000b4 	.word	0x200000b4

0800b3e8 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b092      	sub	sp, #72	@ 0x48
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 800b3f8:	2395      	movs	r3, #149	@ 0x95
 800b3fa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b3fe:	4b46      	ldr	r3, [pc, #280]	@ (800b518 <STTS751_0_Probe+0x130>)
 800b400:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b402:	4b46      	ldr	r3, [pc, #280]	@ (800b51c <STTS751_0_Probe+0x134>)
 800b404:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b406:	4b46      	ldr	r3, [pc, #280]	@ (800b520 <STTS751_0_Probe+0x138>)
 800b408:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b40a:	4b46      	ldr	r3, [pc, #280]	@ (800b524 <STTS751_0_Probe+0x13c>)
 800b40c:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b40e:	4b46      	ldr	r3, [pc, #280]	@ (800b528 <STTS751_0_Probe+0x140>)
 800b410:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 800b412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b416:	4619      	mov	r1, r3
 800b418:	4844      	ldr	r0, [pc, #272]	@ (800b52c <STTS751_0_Probe+0x144>)
 800b41a:	f7fe ff9d 	bl	800a358 <STTS751_RegisterBusIO>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d003      	beq.n	800b42c <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b424:	f06f 0306 	mvn.w	r3, #6
 800b428:	647b      	str	r3, [r7, #68]	@ 0x44
 800b42a:	e070      	b.n	800b50e <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 800b42c:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b430:	4619      	mov	r1, r3
 800b432:	483e      	ldr	r0, [pc, #248]	@ (800b52c <STTS751_0_Probe+0x144>)
 800b434:	f7ff f82f 	bl	800a496 <STTS751_ReadID>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b43e:	f06f 0306 	mvn.w	r3, #6
 800b442:	647b      	str	r3, [r7, #68]	@ 0x44
 800b444:	e063      	b.n	800b50e <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 800b446:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b44a:	2b53      	cmp	r3, #83	@ 0x53
 800b44c:	d003      	beq.n	800b456 <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b44e:	f06f 0306 	mvn.w	r3, #6
 800b452:	647b      	str	r3, [r7, #68]	@ 0x44
 800b454:	e05b      	b.n	800b50e <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 800b456:	f107 0308 	add.w	r3, r7, #8
 800b45a:	4619      	mov	r1, r3
 800b45c:	4833      	ldr	r0, [pc, #204]	@ (800b52c <STTS751_0_Probe+0x144>)
 800b45e:	f7ff f835 	bl	800a4cc <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 800b462:	7a3b      	ldrb	r3, [r7, #8]
 800b464:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 800b466:	7a7b      	ldrb	r3, [r7, #9]
 800b468:	005b      	lsls	r3, r3, #1
 800b46a:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 800b46c:	7abb      	ldrb	r3, [r7, #10]
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 800b472:	7afb      	ldrb	r3, [r7, #11]
 800b474:	00db      	lsls	r3, r3, #3
 800b476:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 800b478:	4a2d      	ldr	r2, [pc, #180]	@ (800b530 <STTS751_0_Probe+0x148>)
 800b47a:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 800b47c:	4b2d      	ldr	r3, [pc, #180]	@ (800b534 <STTS751_0_Probe+0x14c>)
 800b47e:	4a2b      	ldr	r2, [pc, #172]	@ (800b52c <STTS751_0_Probe+0x144>)
 800b480:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 800b482:	4b2d      	ldr	r3, [pc, #180]	@ (800b538 <STTS751_0_Probe+0x150>)
 800b484:	4a2d      	ldr	r2, [pc, #180]	@ (800b53c <STTS751_0_Probe+0x154>)
 800b486:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d11e      	bne.n	800b4cc <STTS751_0_Probe+0xe4>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f003 0301 	and.w	r3, r3, #1
 800b494:	2b00      	cmp	r3, #0
 800b496:	d019      	beq.n	800b4cc <STTS751_0_Probe+0xe4>
 800b498:	7a3b      	ldrb	r3, [r7, #8]
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d116      	bne.n	800b4cc <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 800b49e:	4b28      	ldr	r3, [pc, #160]	@ (800b540 <STTS751_0_Probe+0x158>)
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	4a28      	ldr	r2, [pc, #160]	@ (800b544 <STTS751_0_Probe+0x15c>)
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	4928      	ldr	r1, [pc, #160]	@ (800b548 <STTS751_0_Probe+0x160>)
 800b4a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 800b4ac:	4b22      	ldr	r3, [pc, #136]	@ (800b538 <STTS751_0_Probe+0x150>)
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a20      	ldr	r2, [pc, #128]	@ (800b534 <STTS751_0_Probe+0x14c>)
 800b4b4:	6892      	ldr	r2, [r2, #8]
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	4798      	blx	r3
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d003      	beq.n	800b4c8 <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4c0:	f06f 0304 	mvn.w	r3, #4
 800b4c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4c6:	e001      	b.n	800b4cc <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b4cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d107      	bne.n	800b4e2 <STTS751_0_Probe+0xfa>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f003 0304 	and.w	r3, r3, #4
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d002      	beq.n	800b4e2 <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4dc:	f06f 0304 	mvn.w	r3, #4
 800b4e0:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b4e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d107      	bne.n	800b4f8 <STTS751_0_Probe+0x110>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f003 0302 	and.w	r3, r3, #2
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d002      	beq.n	800b4f8 <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4f2:	f06f 0304 	mvn.w	r3, #4
 800b4f6:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b4f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d107      	bne.n	800b50e <STTS751_0_Probe+0x126>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f003 0308 	and.w	r3, r3, #8
 800b504:	2b00      	cmp	r3, #0
 800b506:	d002      	beq.n	800b50e <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b508:	f06f 0304 	mvn.w	r3, #4
 800b50c:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 800b50e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b510:	4618      	mov	r0, r3
 800b512:	3748      	adds	r7, #72	@ 0x48
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	08002955 	.word	0x08002955
 800b51c:	080029b9 	.word	0x080029b9
 800b520:	08002a6d 	.word	0x08002a6d
 800b524:	08002a09 	.word	0x08002a09
 800b528:	08002ad1 	.word	0x08002ad1
 800b52c:	20000648 	.word	0x20000648
 800b530:	200005d4 	.word	0x200005d4
 800b534:	2000058c 	.word	0x2000058c
 800b538:	200005c8 	.word	0x200005c8
 800b53c:	20000134 	.word	0x20000134
 800b540:	20000158 	.word	0x20000158
 800b544:	20000598 	.word	0x20000598
 800b548:	20000144 	.word	0x20000144

0800b54c <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08e      	sub	sp, #56	@ 0x38
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b556:	2300      	movs	r3, #0
 800b558:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800b55a:	2301      	movs	r3, #1
 800b55c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b02      	cmp	r3, #2
 800b566:	d06e      	beq.n	800b646 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	f200 809d 	bhi.w	800b6aa <IKS01A3_MOTION_SENSOR_Init+0x15e>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d003      	beq.n	800b57e <IKS01A3_MOTION_SENSOR_Init+0x32>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d032      	beq.n	800b5e2 <IKS01A3_MOTION_SENSOR_Init+0x96>
 800b57c:	e095      	b.n	800b6aa <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 800b57e:	6838      	ldr	r0, [r7, #0]
 800b580:	f000 f968 	bl	800b854 <LSM6DSO_0_Probe>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d002      	beq.n	800b590 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800b58a:	f04f 33ff 	mov.w	r3, #4294967295
 800b58e:	e0cc      	b.n	800b72a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b590:	4a68      	ldr	r2, [pc, #416]	@ (800b734 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	4967      	ldr	r1, [pc, #412]	@ (800b738 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b5a2:	f107 010c 	add.w	r1, r7, #12
 800b5a6:	4610      	mov	r0, r2
 800b5a8:	4798      	blx	r3
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b5b0:	f06f 0306 	mvn.w	r3, #6
 800b5b4:	e0b9      	b.n	800b72a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b5b6:	7b3b      	ldrb	r3, [r7, #12]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d103      	bne.n	800b5c4 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800b5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5be:	f043 0302 	orr.w	r3, r3, #2
 800b5c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b5c4:	7b7b      	ldrb	r3, [r7, #13]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d103      	bne.n	800b5d2 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800b5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5cc:	f043 0301 	orr.w	r3, r3, #1
 800b5d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b5d2:	7bbb      	ldrb	r3, [r7, #14]
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d16c      	bne.n	800b6b2 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800b5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5da:	f043 0304 	orr.w	r3, r3, #4
 800b5de:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b5e0:	e067      	b.n	800b6b2 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 800b5e2:	6838      	ldr	r0, [r7, #0]
 800b5e4:	f000 f9f6 	bl	800b9d4 <LIS2DW12_0_Probe>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800b5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b5f2:	e09a      	b.n	800b72a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b5f4:	4a4f      	ldr	r2, [pc, #316]	@ (800b734 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	494e      	ldr	r1, [pc, #312]	@ (800b738 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b606:	f107 010c 	add.w	r1, r7, #12
 800b60a:	4610      	mov	r0, r2
 800b60c:	4798      	blx	r3
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d002      	beq.n	800b61a <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b614:	f06f 0306 	mvn.w	r3, #6
 800b618:	e087      	b.n	800b72a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b61a:	7b3b      	ldrb	r3, [r7, #12]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d103      	bne.n	800b628 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800b620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b622:	f043 0302 	orr.w	r3, r3, #2
 800b626:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b628:	7b7b      	ldrb	r3, [r7, #13]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d103      	bne.n	800b636 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800b62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b630:	f043 0301 	orr.w	r3, r3, #1
 800b634:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b636:	7bbb      	ldrb	r3, [r7, #14]
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d13c      	bne.n	800b6b6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800b63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b63e:	f043 0304 	orr.w	r3, r3, #4
 800b642:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b644:	e037      	b.n	800b6b6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b646:	6838      	ldr	r0, [r7, #0]
 800b648:	f000 fa6c 	bl	800bb24 <LIS2MDL_0_Probe>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d002      	beq.n	800b658 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800b652:	f04f 33ff 	mov.w	r3, #4294967295
 800b656:	e068      	b.n	800b72a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b658:	4a36      	ldr	r2, [pc, #216]	@ (800b734 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	4935      	ldr	r1, [pc, #212]	@ (800b738 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b66a:	f107 010c 	add.w	r1, r7, #12
 800b66e:	4610      	mov	r0, r2
 800b670:	4798      	blx	r3
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d002      	beq.n	800b67e <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b678:	f06f 0306 	mvn.w	r3, #6
 800b67c:	e055      	b.n	800b72a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b67e:	7b3b      	ldrb	r3, [r7, #12]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d103      	bne.n	800b68c <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800b684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b686:	f043 0302 	orr.w	r3, r3, #2
 800b68a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b68c:	7b7b      	ldrb	r3, [r7, #13]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d103      	bne.n	800b69a <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800b692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b694:	f043 0301 	orr.w	r3, r3, #1
 800b698:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b69a:	7bbb      	ldrb	r3, [r7, #14]
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d10c      	bne.n	800b6ba <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800b6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a2:	f043 0304 	orr.w	r3, r3, #4
 800b6a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b6a8:	e007      	b.n	800b6ba <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b6aa:	f06f 0301 	mvn.w	r3, #1
 800b6ae:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800b6b0:	e004      	b.n	800b6bc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800b6b2:	bf00      	nop
 800b6b4:	e002      	b.n	800b6bc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800b6b6:	bf00      	nop
 800b6b8:	e000      	b.n	800b6bc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800b6ba:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800b6c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6c4:	e031      	b.n	800b72a <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6ca:	e02a      	b.n	800b722 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b6cc:	683a      	ldr	r2, [r7, #0]
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d11e      	bne.n	800b716 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 800b6d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6dc:	4013      	ands	r3, r2
 800b6de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d118      	bne.n	800b716 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b6e4:	4a15      	ldr	r2, [pc, #84]	@ (800b73c <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b6ec:	4814      	ldr	r0, [pc, #80]	@ (800b740 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	4613      	mov	r3, r2
 800b6f2:	005b      	lsls	r3, r3, #1
 800b6f4:	4413      	add	r3, r2
 800b6f6:	440b      	add	r3, r1
 800b6f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	490e      	ldr	r1, [pc, #56]	@ (800b738 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b706:	4610      	mov	r0, r2
 800b708:	4798      	blx	r3
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d002      	beq.n	800b716 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b710:	f06f 0304 	mvn.w	r3, #4
 800b714:	e009      	b.n	800b72a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800b716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b718:	005b      	lsls	r3, r3, #1
 800b71a:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800b71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b71e:	3301      	adds	r3, #1
 800b720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b724:	2b02      	cmp	r3, #2
 800b726:	d9d1      	bls.n	800b6cc <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800b728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3738      	adds	r7, #56	@ 0x38
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	200006b0 	.word	0x200006b0
 800b738:	20000680 	.word	0x20000680
 800b73c:	2000017c 	.word	0x2000017c
 800b740:	2000068c 	.word	0x2000068c

0800b744 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b086      	sub	sp, #24
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2b02      	cmp	r3, #2
 800b754:	d903      	bls.n	800b75e <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b756:	f06f 0301 	mvn.w	r3, #1
 800b75a:	617b      	str	r3, [r7, #20]
 800b75c:	e029      	b.n	800b7b2 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b75e:	4a17      	ldr	r2, [pc, #92]	@ (800b7bc <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x78>)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	4013      	ands	r3, r2
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d11d      	bne.n	800b7ac <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800b770:	4a13      	ldr	r2, [pc, #76]	@ (800b7c0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b778:	4812      	ldr	r0, [pc, #72]	@ (800b7c4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	4613      	mov	r3, r2
 800b77e:	005b      	lsls	r3, r3, #1
 800b780:	4413      	add	r3, r2
 800b782:	440b      	add	r3, r1
 800b784:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	490f      	ldr	r1, [pc, #60]	@ (800b7c8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b792:	6879      	ldr	r1, [r7, #4]
 800b794:	4610      	mov	r0, r2
 800b796:	4798      	blx	r3
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d003      	beq.n	800b7a6 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b79e:	f06f 0304 	mvn.w	r3, #4
 800b7a2:	617b      	str	r3, [r7, #20]
 800b7a4:	e005      	b.n	800b7b2 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	617b      	str	r3, [r7, #20]
 800b7aa:	e002      	b.n	800b7b2 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b7ac:	f06f 0301 	mvn.w	r3, #1
 800b7b0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b7b2:	697b      	ldr	r3, [r7, #20]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3718      	adds	r7, #24
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	200006bc 	.word	0x200006bc
 800b7c0:	2000017c 	.word	0x2000017c
 800b7c4:	2000068c 	.word	0x2000068c
 800b7c8:	20000680 	.word	0x20000680

0800b7cc <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d903      	bls.n	800b7e6 <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b7de:	f06f 0301 	mvn.w	r3, #1
 800b7e2:	617b      	str	r3, [r7, #20]
 800b7e4:	e029      	b.n	800b83a <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b7e6:	4a17      	ldr	r2, [pc, #92]	@ (800b844 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d11d      	bne.n	800b834 <IKS01A3_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800b7f8:	4a13      	ldr	r2, [pc, #76]	@ (800b848 <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b800:	4812      	ldr	r0, [pc, #72]	@ (800b84c <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	4613      	mov	r3, r2
 800b806:	005b      	lsls	r3, r3, #1
 800b808:	4413      	add	r3, r2
 800b80a:	440b      	add	r3, r1
 800b80c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b810:	699b      	ldr	r3, [r3, #24]
 800b812:	490f      	ldr	r1, [pc, #60]	@ (800b850 <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b81a:	6879      	ldr	r1, [r7, #4]
 800b81c:	4610      	mov	r0, r2
 800b81e:	4798      	blx	r3
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d003      	beq.n	800b82e <IKS01A3_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b826:	f06f 0304 	mvn.w	r3, #4
 800b82a:	617b      	str	r3, [r7, #20]
 800b82c:	e005      	b.n	800b83a <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b82e:	2300      	movs	r3, #0
 800b830:	617b      	str	r3, [r7, #20]
 800b832:	e002      	b.n	800b83a <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b834:	f06f 0301 	mvn.w	r3, #1
 800b838:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b83a:	697b      	ldr	r3, [r7, #20]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3718      	adds	r7, #24
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	200006bc 	.word	0x200006bc
 800b848:	2000017c 	.word	0x2000017c
 800b84c:	2000068c 	.word	0x2000068c
 800b850:	20000680 	.word	0x20000680

0800b854 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b094      	sub	sp, #80	@ 0x50
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800b85c:	2300      	movs	r3, #0
 800b85e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800b860:	2300      	movs	r3, #0
 800b862:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800b864:	23d7      	movs	r3, #215	@ 0xd7
 800b866:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b86a:	4b4b      	ldr	r3, [pc, #300]	@ (800b998 <LSM6DSO_0_Probe+0x144>)
 800b86c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b86e:	4b4b      	ldr	r3, [pc, #300]	@ (800b99c <LSM6DSO_0_Probe+0x148>)
 800b870:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b872:	4b4b      	ldr	r3, [pc, #300]	@ (800b9a0 <LSM6DSO_0_Probe+0x14c>)
 800b874:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b876:	4b4b      	ldr	r3, [pc, #300]	@ (800b9a4 <LSM6DSO_0_Probe+0x150>)
 800b878:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b87a:	4b4b      	ldr	r3, [pc, #300]	@ (800b9a8 <LSM6DSO_0_Probe+0x154>)
 800b87c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800b87e:	4b4b      	ldr	r3, [pc, #300]	@ (800b9ac <LSM6DSO_0_Probe+0x158>)
 800b880:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800b882:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b886:	4619      	mov	r1, r3
 800b888:	4849      	ldr	r0, [pc, #292]	@ (800b9b0 <LSM6DSO_0_Probe+0x15c>)
 800b88a:	f7fb fa3f 	bl	8006d0c <LSM6DSO_RegisterBusIO>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d003      	beq.n	800b89c <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b894:	f06f 0306 	mvn.w	r3, #6
 800b898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b89a:	e077      	b.n	800b98c <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800b89c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4843      	ldr	r0, [pc, #268]	@ (800b9b0 <LSM6DSO_0_Probe+0x15c>)
 800b8a4:	f7fb fb3c 	bl	8006f20 <LSM6DSO_ReadID>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d003      	beq.n	800b8b6 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b8ae:	f06f 0306 	mvn.w	r3, #6
 800b8b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8b4:	e06a      	b.n	800b98c <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 800b8b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b8ba:	2b6c      	cmp	r3, #108	@ 0x6c
 800b8bc:	d003      	beq.n	800b8c6 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b8be:	f06f 0306 	mvn.w	r3, #6
 800b8c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8c4:	e062      	b.n	800b98c <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800b8c6:	f107 030c 	add.w	r3, r7, #12
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	4838      	ldr	r0, [pc, #224]	@ (800b9b0 <LSM6DSO_0_Probe+0x15c>)
 800b8ce:	f7fb fb3d 	bl	8006f4c <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b8d2:	7b7b      	ldrb	r3, [r7, #13]
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	7b3b      	ldrb	r3, [r7, #12]
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	431a      	orrs	r2, r3
 800b8dc:	7bbb      	ldrb	r3, [r7, #14]
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	4a34      	ldr	r2, [pc, #208]	@ (800b9b4 <LSM6DSO_0_Probe+0x160>)
 800b8e4:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800b8e6:	4b34      	ldr	r3, [pc, #208]	@ (800b9b8 <LSM6DSO_0_Probe+0x164>)
 800b8e8:	4a31      	ldr	r2, [pc, #196]	@ (800b9b0 <LSM6DSO_0_Probe+0x15c>)
 800b8ea:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800b8ec:	4b33      	ldr	r3, [pc, #204]	@ (800b9bc <LSM6DSO_0_Probe+0x168>)
 800b8ee:	4a34      	ldr	r2, [pc, #208]	@ (800b9c0 <LSM6DSO_0_Probe+0x16c>)
 800b8f0:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b8f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d11d      	bne.n	800b934 <LSM6DSO_0_Probe+0xe0>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f003 0301 	and.w	r3, r3, #1
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d018      	beq.n	800b934 <LSM6DSO_0_Probe+0xe0>
 800b902:	7b7b      	ldrb	r3, [r7, #13]
 800b904:	2b01      	cmp	r3, #1
 800b906:	d115      	bne.n	800b934 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800b908:	4b2e      	ldr	r3, [pc, #184]	@ (800b9c4 <LSM6DSO_0_Probe+0x170>)
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	4a2e      	ldr	r2, [pc, #184]	@ (800b9c8 <LSM6DSO_0_Probe+0x174>)
 800b90e:	492f      	ldr	r1, [pc, #188]	@ (800b9cc <LSM6DSO_0_Probe+0x178>)
 800b910:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800b914:	4b29      	ldr	r3, [pc, #164]	@ (800b9bc <LSM6DSO_0_Probe+0x168>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a27      	ldr	r2, [pc, #156]	@ (800b9b8 <LSM6DSO_0_Probe+0x164>)
 800b91c:	6812      	ldr	r2, [r2, #0]
 800b91e:	4610      	mov	r0, r2
 800b920:	4798      	blx	r3
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d003      	beq.n	800b930 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b928:	f06f 0304 	mvn.w	r3, #4
 800b92c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b92e:	e001      	b.n	800b934 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b930:	2300      	movs	r3, #0
 800b932:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b936:	2b00      	cmp	r3, #0
 800b938:	d11d      	bne.n	800b976 <LSM6DSO_0_Probe+0x122>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f003 0302 	and.w	r3, r3, #2
 800b940:	2b00      	cmp	r3, #0
 800b942:	d018      	beq.n	800b976 <LSM6DSO_0_Probe+0x122>
 800b944:	7b3b      	ldrb	r3, [r7, #12]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d115      	bne.n	800b976 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b94a:	4b1e      	ldr	r3, [pc, #120]	@ (800b9c4 <LSM6DSO_0_Probe+0x170>)
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	4a1e      	ldr	r2, [pc, #120]	@ (800b9c8 <LSM6DSO_0_Probe+0x174>)
 800b950:	491f      	ldr	r1, [pc, #124]	@ (800b9d0 <LSM6DSO_0_Probe+0x17c>)
 800b952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800b956:	4b19      	ldr	r3, [pc, #100]	@ (800b9bc <LSM6DSO_0_Probe+0x168>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a16      	ldr	r2, [pc, #88]	@ (800b9b8 <LSM6DSO_0_Probe+0x164>)
 800b95e:	6812      	ldr	r2, [r2, #0]
 800b960:	4610      	mov	r0, r2
 800b962:	4798      	blx	r3
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d003      	beq.n	800b972 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b96a:	f06f 0304 	mvn.w	r3, #4
 800b96e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b970:	e001      	b.n	800b976 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b972:	2300      	movs	r3, #0
 800b974:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d107      	bne.n	800b98c <LSM6DSO_0_Probe+0x138>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f003 0304 	and.w	r3, r3, #4
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b986:	f06f 0304 	mvn.w	r3, #4
 800b98a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800b98c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3750      	adds	r7, #80	@ 0x50
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	08002955 	.word	0x08002955
 800b99c:	080029b9 	.word	0x080029b9
 800b9a0:	08002a6d 	.word	0x08002a6d
 800b9a4:	08002a09 	.word	0x08002a09
 800b9a8:	08002ad1 	.word	0x08002ad1
 800b9ac:	0800bdc9 	.word	0x0800bdc9
 800b9b0:	200006c8 	.word	0x200006c8
 800b9b4:	200006bc 	.word	0x200006bc
 800b9b8:	20000680 	.word	0x20000680
 800b9bc:	200006b0 	.word	0x200006b0
 800b9c0:	200000dc 	.word	0x200000dc
 800b9c4:	2000017c 	.word	0x2000017c
 800b9c8:	2000068c 	.word	0x2000068c
 800b9cc:	20000110 	.word	0x20000110
 800b9d0:	200000ec 	.word	0x200000ec

0800b9d4 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b094      	sub	sp, #80	@ 0x50
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800b9e4:	2333      	movs	r3, #51	@ 0x33
 800b9e6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b9ea:	4b40      	ldr	r3, [pc, #256]	@ (800baec <LIS2DW12_0_Probe+0x118>)
 800b9ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b9ee:	4b40      	ldr	r3, [pc, #256]	@ (800baf0 <LIS2DW12_0_Probe+0x11c>)
 800b9f0:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b9f2:	4b40      	ldr	r3, [pc, #256]	@ (800baf4 <LIS2DW12_0_Probe+0x120>)
 800b9f4:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b9f6:	4b40      	ldr	r3, [pc, #256]	@ (800baf8 <LIS2DW12_0_Probe+0x124>)
 800b9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b9fa:	4b40      	ldr	r3, [pc, #256]	@ (800bafc <LIS2DW12_0_Probe+0x128>)
 800b9fc:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800b9fe:	4b40      	ldr	r3, [pc, #256]	@ (800bb00 <LIS2DW12_0_Probe+0x12c>)
 800ba00:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800ba02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ba06:	4619      	mov	r1, r3
 800ba08:	483e      	ldr	r0, [pc, #248]	@ (800bb04 <LIS2DW12_0_Probe+0x130>)
 800ba0a:	f7f8 f801 	bl	8003a10 <LIS2DW12_RegisterBusIO>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d003      	beq.n	800ba1c <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba14:	f06f 0306 	mvn.w	r3, #6
 800ba18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba1a:	e062      	b.n	800bae2 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800ba1c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800ba20:	4619      	mov	r1, r3
 800ba22:	4838      	ldr	r0, [pc, #224]	@ (800bb04 <LIS2DW12_0_Probe+0x130>)
 800ba24:	f7f8 f8e2 	bl	8003bec <LIS2DW12_ReadID>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d003      	beq.n	800ba36 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba2e:	f06f 0306 	mvn.w	r3, #6
 800ba32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba34:	e055      	b.n	800bae2 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 800ba36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba3a:	2b44      	cmp	r3, #68	@ 0x44
 800ba3c:	d003      	beq.n	800ba46 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba3e:	f06f 0306 	mvn.w	r3, #6
 800ba42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba44:	e04d      	b.n	800bae2 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800ba46:	f107 030c 	add.w	r3, r7, #12
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	482d      	ldr	r0, [pc, #180]	@ (800bb04 <LIS2DW12_0_Probe+0x130>)
 800ba4e:	f7f8 f8e3 	bl	8003c18 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800ba52:	7b7b      	ldrb	r3, [r7, #13]
 800ba54:	461a      	mov	r2, r3
 800ba56:	7b3b      	ldrb	r3, [r7, #12]
 800ba58:	005b      	lsls	r3, r3, #1
 800ba5a:	431a      	orrs	r2, r3
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4313      	orrs	r3, r2
 800ba62:	4a29      	ldr	r2, [pc, #164]	@ (800bb08 <LIS2DW12_0_Probe+0x134>)
 800ba64:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800ba66:	4b29      	ldr	r3, [pc, #164]	@ (800bb0c <LIS2DW12_0_Probe+0x138>)
 800ba68:	4a26      	ldr	r2, [pc, #152]	@ (800bb04 <LIS2DW12_0_Probe+0x130>)
 800ba6a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800ba6c:	4b28      	ldr	r3, [pc, #160]	@ (800bb10 <LIS2DW12_0_Probe+0x13c>)
 800ba6e:	4a29      	ldr	r2, [pc, #164]	@ (800bb14 <LIS2DW12_0_Probe+0x140>)
 800ba70:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800ba72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d11e      	bne.n	800bab6 <LIS2DW12_0_Probe+0xe2>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f003 0302 	and.w	r3, r3, #2
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d019      	beq.n	800bab6 <LIS2DW12_0_Probe+0xe2>
 800ba82:	7b3b      	ldrb	r3, [r7, #12]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d116      	bne.n	800bab6 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800ba88:	4b23      	ldr	r3, [pc, #140]	@ (800bb18 <LIS2DW12_0_Probe+0x144>)
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	4a23      	ldr	r2, [pc, #140]	@ (800bb1c <LIS2DW12_0_Probe+0x148>)
 800ba8e:	3303      	adds	r3, #3
 800ba90:	4923      	ldr	r1, [pc, #140]	@ (800bb20 <LIS2DW12_0_Probe+0x14c>)
 800ba92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800ba96:	4b1e      	ldr	r3, [pc, #120]	@ (800bb10 <LIS2DW12_0_Probe+0x13c>)
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a1b      	ldr	r2, [pc, #108]	@ (800bb0c <LIS2DW12_0_Probe+0x138>)
 800ba9e:	6852      	ldr	r2, [r2, #4]
 800baa0:	4610      	mov	r0, r2
 800baa2:	4798      	blx	r3
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d003      	beq.n	800bab2 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800baaa:	f06f 0304 	mvn.w	r3, #4
 800baae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bab0:	e001      	b.n	800bab6 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bab2:	2300      	movs	r3, #0
 800bab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800bab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d107      	bne.n	800bacc <LIS2DW12_0_Probe+0xf8>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f003 0301 	and.w	r3, r3, #1
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d002      	beq.n	800bacc <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bac6:	f06f 0304 	mvn.w	r3, #4
 800baca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bacc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d107      	bne.n	800bae2 <LIS2DW12_0_Probe+0x10e>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f003 0304 	and.w	r3, r3, #4
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d002      	beq.n	800bae2 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800badc:	f06f 0304 	mvn.w	r3, #4
 800bae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800bae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3750      	adds	r7, #80	@ 0x50
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	08002955 	.word	0x08002955
 800baf0:	080029b9 	.word	0x080029b9
 800baf4:	08002a6d 	.word	0x08002a6d
 800baf8:	08002a09 	.word	0x08002a09
 800bafc:	08002ad1 	.word	0x08002ad1
 800bb00:	0800bdc9 	.word	0x0800bdc9
 800bb04:	20000700 	.word	0x20000700
 800bb08:	200006bc 	.word	0x200006bc
 800bb0c:	20000680 	.word	0x20000680
 800bb10:	200006b0 	.word	0x200006b0
 800bb14:	2000003c 	.word	0x2000003c
 800bb18:	2000017c 	.word	0x2000017c
 800bb1c:	2000068c 	.word	0x2000068c
 800bb20:	2000004c 	.word	0x2000004c

0800bb24 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b094      	sub	sp, #80	@ 0x50
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800bb30:	2300      	movs	r3, #0
 800bb32:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800bb34:	233d      	movs	r3, #61	@ 0x3d
 800bb36:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800bb3a:	4b40      	ldr	r3, [pc, #256]	@ (800bc3c <LIS2MDL_0_Probe+0x118>)
 800bb3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800bb3e:	4b40      	ldr	r3, [pc, #256]	@ (800bc40 <LIS2MDL_0_Probe+0x11c>)
 800bb40:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800bb42:	4b40      	ldr	r3, [pc, #256]	@ (800bc44 <LIS2MDL_0_Probe+0x120>)
 800bb44:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800bb46:	4b40      	ldr	r3, [pc, #256]	@ (800bc48 <LIS2MDL_0_Probe+0x124>)
 800bb48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800bb4a:	4b40      	ldr	r3, [pc, #256]	@ (800bc4c <LIS2MDL_0_Probe+0x128>)
 800bb4c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800bb4e:	4b40      	ldr	r3, [pc, #256]	@ (800bc50 <LIS2MDL_0_Probe+0x12c>)
 800bb50:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800bb52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bb56:	4619      	mov	r1, r3
 800bb58:	483e      	ldr	r0, [pc, #248]	@ (800bc54 <LIS2MDL_0_Probe+0x130>)
 800bb5a:	f7f9 fa9b 	bl	8005094 <LIS2MDL_RegisterBusIO>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d003      	beq.n	800bb6c <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bb64:	f06f 0306 	mvn.w	r3, #6
 800bb68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb6a:	e062      	b.n	800bc32 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800bb6c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bb70:	4619      	mov	r1, r3
 800bb72:	4838      	ldr	r0, [pc, #224]	@ (800bc54 <LIS2MDL_0_Probe+0x130>)
 800bb74:	f7f9 fbaa 	bl	80052cc <LIS2MDL_ReadID>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d003      	beq.n	800bb86 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bb7e:	f06f 0306 	mvn.w	r3, #6
 800bb82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb84:	e055      	b.n	800bc32 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 800bb86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb8a:	2b40      	cmp	r3, #64	@ 0x40
 800bb8c:	d003      	beq.n	800bb96 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bb8e:	f06f 0306 	mvn.w	r3, #6
 800bb92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb94:	e04d      	b.n	800bc32 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800bb96:	f107 030c 	add.w	r3, r7, #12
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	482d      	ldr	r0, [pc, #180]	@ (800bc54 <LIS2MDL_0_Probe+0x130>)
 800bb9e:	f7f9 fbbb 	bl	8005318 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bba2:	7b7b      	ldrb	r3, [r7, #13]
 800bba4:	461a      	mov	r2, r3
 800bba6:	7b3b      	ldrb	r3, [r7, #12]
 800bba8:	005b      	lsls	r3, r3, #1
 800bbaa:	431a      	orrs	r2, r3
 800bbac:	7bbb      	ldrb	r3, [r7, #14]
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	4a29      	ldr	r2, [pc, #164]	@ (800bc58 <LIS2MDL_0_Probe+0x134>)
 800bbb4:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800bbb6:	4b29      	ldr	r3, [pc, #164]	@ (800bc5c <LIS2MDL_0_Probe+0x138>)
 800bbb8:	4a26      	ldr	r2, [pc, #152]	@ (800bc54 <LIS2MDL_0_Probe+0x130>)
 800bbba:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800bbbc:	4b28      	ldr	r3, [pc, #160]	@ (800bc60 <LIS2MDL_0_Probe+0x13c>)
 800bbbe:	4a29      	ldr	r2, [pc, #164]	@ (800bc64 <LIS2MDL_0_Probe+0x140>)
 800bbc0:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800bbc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d11e      	bne.n	800bc06 <LIS2MDL_0_Probe+0xe2>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f003 0304 	and.w	r3, r3, #4
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d019      	beq.n	800bc06 <LIS2MDL_0_Probe+0xe2>
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d116      	bne.n	800bc06 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bbd8:	4b23      	ldr	r3, [pc, #140]	@ (800bc68 <LIS2MDL_0_Probe+0x144>)
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	4a23      	ldr	r2, [pc, #140]	@ (800bc6c <LIS2MDL_0_Probe+0x148>)
 800bbde:	3306      	adds	r3, #6
 800bbe0:	4923      	ldr	r1, [pc, #140]	@ (800bc70 <LIS2MDL_0_Probe+0x14c>)
 800bbe2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800bbe6:	4b1e      	ldr	r3, [pc, #120]	@ (800bc60 <LIS2MDL_0_Probe+0x13c>)
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a1b      	ldr	r2, [pc, #108]	@ (800bc5c <LIS2MDL_0_Probe+0x138>)
 800bbee:	6892      	ldr	r2, [r2, #8]
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	4798      	blx	r3
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d003      	beq.n	800bc02 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bbfa:	f06f 0304 	mvn.w	r3, #4
 800bbfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc00:	e001      	b.n	800bc06 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bc02:	2300      	movs	r3, #0
 800bc04:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800bc06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d107      	bne.n	800bc1c <LIS2MDL_0_Probe+0xf8>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f003 0302 	and.w	r3, r3, #2
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d002      	beq.n	800bc1c <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc16:	f06f 0304 	mvn.w	r3, #4
 800bc1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800bc1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d107      	bne.n	800bc32 <LIS2MDL_0_Probe+0x10e>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f003 0301 	and.w	r3, r3, #1
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d002      	beq.n	800bc32 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc2c:	f06f 0304 	mvn.w	r3, #4
 800bc30:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800bc32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3750      	adds	r7, #80	@ 0x50
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	08002955 	.word	0x08002955
 800bc40:	080029b9 	.word	0x080029b9
 800bc44:	08002a6d 	.word	0x08002a6d
 800bc48:	08002a09 	.word	0x08002a09
 800bc4c:	08002ad1 	.word	0x08002ad1
 800bc50:	0800bdc9 	.word	0x0800bdc9
 800bc54:	2000073c 	.word	0x2000073c
 800bc58:	200006bc 	.word	0x200006bc
 800bc5c:	20000680 	.word	0x20000680
 800bc60:	200006b0 	.word	0x200006b0
 800bc64:	20000070 	.word	0x20000070
 800bc68:	2000017c 	.word	0x2000017c
 800bc6c:	2000068c 	.word	0x2000068c
 800bc70:	20000080 	.word	0x20000080

0800bc74 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation>:
  * @param  IntPin the interrupt pin to be used
  * @note   This function sets the LSM6DSO accelerometer ODR to 416Hz and the LSM6DSO accelerometer full scale to 2g
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable_6D_Orientation(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d003      	beq.n	800bc8e <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x1a>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d013      	beq.n	800bcb4 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x40>
 800bc8c:	e023      	b.n	800bcd6 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x62>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Enable_6D_Orientation(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 800bc8e:	4a16      	ldr	r2, [pc, #88]	@ (800bce8 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x74>)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc96:	78fa      	ldrb	r2, [r7, #3]
 800bc98:	4611      	mov	r1, r2
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7fc f800 	bl	8007ca0 <LSM6DSO_ACC_Enable_6D_Orientation>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d003      	beq.n	800bcae <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x3a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bca6:	f06f 0304 	mvn.w	r3, #4
 800bcaa:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bcac:	e017      	b.n	800bcde <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x6a>
        ret = BSP_ERROR_NONE;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	60fb      	str	r3, [r7, #12]
      break;
 800bcb2:	e014      	b.n	800bcde <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x6a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      /* For LIS2DW12 the 6D Orientation event can be routed only on INT1 pin */
      if (LIS2DW12_ACC_Enable_6D_Orientation(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800bcb4:	4a0c      	ldr	r2, [pc, #48]	@ (800bce8 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x74>)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7f8 fbdb 	bl	8004478 <LIS2DW12_ACC_Enable_6D_Orientation>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d003      	beq.n	800bcd0 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x5c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcc8:	f06f 0304 	mvn.w	r3, #4
 800bccc:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bcce:	e006      	b.n	800bcde <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x6a>
        ret = BSP_ERROR_NONE;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	60fb      	str	r3, [r7, #12]
      break;
 800bcd4:	e003      	b.n	800bcde <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x6a>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bcd6:	f06f 0301 	mvn.w	r3, #1
 800bcda:	60fb      	str	r3, [r7, #12]
      break;
 800bcdc:	bf00      	nop
  }

  return ret;
 800bcde:	68fb      	ldr	r3, [r7, #12]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	20000680 	.word	0x20000680

0800bcec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bcf6:	2003      	movs	r0, #3
 800bcf8:	f000 fdf0 	bl	800c8dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	f000 f80d 	bl	800bd1c <HAL_InitTick>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d002      	beq.n	800bd0e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	71fb      	strb	r3, [r7, #7]
 800bd0c:	e001      	b.n	800bd12 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800bd0e:	f7f6 fb69 	bl	80023e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800bd12:	79fb      	ldrb	r3, [r7, #7]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800bd24:	2300      	movs	r3, #0
 800bd26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800bd28:	4b16      	ldr	r3, [pc, #88]	@ (800bd84 <HAL_InitTick+0x68>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d022      	beq.n	800bd76 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800bd30:	4b15      	ldr	r3, [pc, #84]	@ (800bd88 <HAL_InitTick+0x6c>)
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	4b13      	ldr	r3, [pc, #76]	@ (800bd84 <HAL_InitTick+0x68>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800bd3c:	fbb1 f3f3 	udiv	r3, r1, r3
 800bd40:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 fe0c 	bl	800c962 <HAL_SYSTICK_Config>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10f      	bne.n	800bd70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b0f      	cmp	r3, #15
 800bd54:	d809      	bhi.n	800bd6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bd56:	2200      	movs	r2, #0
 800bd58:	6879      	ldr	r1, [r7, #4]
 800bd5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5e:	f000 fdc8 	bl	800c8f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800bd62:	4a0a      	ldr	r2, [pc, #40]	@ (800bd8c <HAL_InitTick+0x70>)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6013      	str	r3, [r2, #0]
 800bd68:	e007      	b.n	800bd7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	73fb      	strb	r3, [r7, #15]
 800bd6e:	e004      	b.n	800bd7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	73fb      	strb	r3, [r7, #15]
 800bd74:	e001      	b.n	800bd7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800bd7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	20000194 	.word	0x20000194
 800bd88:	20000000 	.word	0x20000000
 800bd8c:	20000190 	.word	0x20000190

0800bd90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bd90:	b480      	push	{r7}
 800bd92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bd94:	4b05      	ldr	r3, [pc, #20]	@ (800bdac <HAL_IncTick+0x1c>)
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	4b05      	ldr	r3, [pc, #20]	@ (800bdb0 <HAL_IncTick+0x20>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	4a03      	ldr	r2, [pc, #12]	@ (800bdac <HAL_IncTick+0x1c>)
 800bda0:	6013      	str	r3, [r2, #0]
}
 800bda2:	bf00      	nop
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bc80      	pop	{r7}
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	20000770 	.word	0x20000770
 800bdb0:	20000194 	.word	0x20000194

0800bdb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	af00      	add	r7, sp, #0
  return uwTick;
 800bdb8:	4b02      	ldr	r3, [pc, #8]	@ (800bdc4 <HAL_GetTick+0x10>)
 800bdba:	681b      	ldr	r3, [r3, #0]
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bc80      	pop	{r7}
 800bdc2:	4770      	bx	lr
 800bdc4:	20000770 	.word	0x20000770

0800bdc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bdd0:	f7ff fff0 	bl	800bdb4 <HAL_GetTick>
 800bdd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde0:	d004      	beq.n	800bdec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800bde2:	4b09      	ldr	r3, [pc, #36]	@ (800be08 <HAL_Delay+0x40>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	4413      	add	r3, r2
 800bdea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bdec:	bf00      	nop
 800bdee:	f7ff ffe1 	bl	800bdb4 <HAL_GetTick>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d8f7      	bhi.n	800bdee <HAL_Delay+0x26>
  {
  }
}
 800bdfe:	bf00      	nop
 800be00:	bf00      	nop
 800be02:	3710      	adds	r7, #16
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	20000194 	.word	0x20000194

0800be0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b08e      	sub	sp, #56	@ 0x38
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800be14:	2300      	movs	r3, #0
 800be16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 800be1a:	2300      	movs	r3, #0
 800be1c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 800be1e:	2300      	movs	r3, #0
 800be20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d101      	bne.n	800be2c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800be28:	2301      	movs	r3, #1
 800be2a:	e127      	b.n	800c07c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be36:	2b00      	cmp	r3, #0
 800be38:	d115      	bne.n	800be66 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be48:	4b8e      	ldr	r3, [pc, #568]	@ (800c084 <HAL_ADC_Init+0x278>)
 800be4a:	6a1b      	ldr	r3, [r3, #32]
 800be4c:	4a8d      	ldr	r2, [pc, #564]	@ (800c084 <HAL_ADC_Init+0x278>)
 800be4e:	f043 0301 	orr.w	r3, r3, #1
 800be52:	6213      	str	r3, [r2, #32]
 800be54:	4b8b      	ldr	r3, [pc, #556]	@ (800c084 <HAL_ADC_Init+0x278>)
 800be56:	6a1b      	ldr	r3, [r3, #32]
 800be58:	f003 0301 	and.w	r3, r3, #1
 800be5c:	60bb      	str	r3, [r7, #8]
 800be5e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7f6 faef 	bl	8002444 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be6a:	f003 0310 	and.w	r3, r3, #16
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f040 80ff 	bne.w	800c072 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be78:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800be7c:	f023 0302 	bic.w	r3, r3, #2
 800be80:	f043 0202 	orr.w	r2, r3, #2
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800be88:	4b7f      	ldr	r3, [pc, #508]	@ (800c088 <HAL_ADC_Init+0x27c>)
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	497c      	ldr	r1, [pc, #496]	@ (800c088 <HAL_ADC_Init+0x27c>)
 800be96:	4313      	orrs	r3, r2
 800be98:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800bea2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800beaa:	4619      	mov	r1, r3
 800beac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800beb0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	fa93 f3a3 	rbit	r3, r3
 800beb8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	fab3 f383 	clz	r3, r3
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800bec6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800becc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bed4:	4619      	mov	r1, r3
 800bed6:	2302      	movs	r3, #2
 800bed8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800beda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bedc:	fa93 f3a3 	rbit	r3, r3
 800bee0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800bee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee4:	fab3 f383 	clz	r3, r3
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800beee:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800bef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bef2:	4313      	orrs	r3, r2
 800bef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800befa:	2b10      	cmp	r3, #16
 800befc:	d007      	beq.n	800bf0e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800bf06:	4313      	orrs	r3, r2
 800bf08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf18:	2b40      	cmp	r3, #64	@ 0x40
 800bf1a:	d04f      	beq.n	800bfbc <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	699b      	ldr	r3, [r3, #24]
 800bf20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf22:	4313      	orrs	r3, r2
 800bf24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800bf2e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	6912      	ldr	r2, [r2, #16]
 800bf34:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800bf38:	d003      	beq.n	800bf42 <HAL_ADC_Init+0x136>
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	6912      	ldr	r2, [r2, #16]
 800bf3e:	2a01      	cmp	r2, #1
 800bf40:	d102      	bne.n	800bf48 <HAL_ADC_Init+0x13c>
 800bf42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bf46:	e000      	b.n	800bf4a <HAL_ADC_Init+0x13e>
 800bf48:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800bf4a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800bf4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d125      	bne.n	800bfa8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d114      	bne.n	800bf90 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800bf70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf72:	69ba      	ldr	r2, [r7, #24]
 800bf74:	fa92 f2a2 	rbit	r2, r2
 800bf78:	617a      	str	r2, [r7, #20]
  return result;
 800bf7a:	697a      	ldr	r2, [r7, #20]
 800bf7c:	fab2 f282 	clz	r2, r2
 800bf80:	b2d2      	uxtb	r2, r2
 800bf82:	4093      	lsls	r3, r2
 800bf84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800bf88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf8e:	e00b      	b.n	800bfa8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf94:	f043 0220 	orr.w	r2, r3, #32
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfa0:	f043 0201 	orr.w	r2, r3, #1
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	685a      	ldr	r2, [r3, #4]
 800bfae:	4b37      	ldr	r3, [pc, #220]	@ (800c08c <HAL_ADC_Init+0x280>)
 800bfb0:	4013      	ands	r3, r2
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	6812      	ldr	r2, [r2, #0]
 800bfb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bfb8:	430b      	orrs	r3, r1
 800bfba:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	689a      	ldr	r2, [r3, #8]
 800bfc2:	4b33      	ldr	r3, [pc, #204]	@ (800c090 <HAL_ADC_Init+0x284>)
 800bfc4:	4013      	ands	r3, r2
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	6812      	ldr	r2, [r2, #0]
 800bfca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfcc:	430b      	orrs	r3, r1
 800bfce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfd8:	d003      	beq.n	800bfe2 <HAL_ADC_Init+0x1d6>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d119      	bne.n	800c016 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfe8:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bff0:	3b01      	subs	r3, #1
 800bff2:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 800bff6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bff8:	693a      	ldr	r2, [r7, #16]
 800bffa:	fa92 f2a2 	rbit	r2, r2
 800bffe:	60fa      	str	r2, [r7, #12]
  return result;
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	fab2 f282 	clz	r2, r2
 800c006:	b2d2      	uxtb	r2, r2
 800c008:	fa03 f202 	lsl.w	r2, r3, r2
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	430a      	orrs	r2, r1
 800c012:	631a      	str	r2, [r3, #48]	@ 0x30
 800c014:	e007      	b.n	800c026 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 800c024:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	689a      	ldr	r2, [r3, #8]
 800c02c:	4b19      	ldr	r3, [pc, #100]	@ (800c094 <HAL_ADC_Init+0x288>)
 800c02e:	4013      	ands	r3, r2
 800c030:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c032:	429a      	cmp	r2, r3
 800c034:	d10b      	bne.n	800c04e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c040:	f023 0303 	bic.w	r3, r3, #3
 800c044:	f043 0201 	orr.w	r2, r3, #1
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c04c:	e014      	b.n	800c078 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c052:	f023 0312 	bic.w	r3, r3, #18
 800c056:	f043 0210 	orr.w	r2, r3, #16
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c062:	f043 0201 	orr.w	r2, r3, #1
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c070:	e002      	b.n	800c078 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800c078:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3738      	adds	r7, #56	@ 0x38
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	40023800 	.word	0x40023800
 800c088:	40012700 	.word	0x40012700
 800c08c:	fcfc16ff 	.word	0xfcfc16ff
 800c090:	c0fff189 	.word	0xc0fff189
 800c094:	bf80fffe 	.word	0xbf80fffe

0800c098 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d101      	bne.n	800c0b2 <HAL_ADC_Start+0x1a>
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	e04e      	b.n	800c150 <HAL_ADC_Start+0xb8>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 fa80 	bl	800c5c0 <ADC_Enable>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800c0c4:	7bfb      	ldrb	r3, [r7, #15]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d141      	bne.n	800c14e <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0ce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800c0d2:	f023 0301 	bic.w	r3, r3, #1
 800c0d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d007      	beq.n	800c0fc <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800c0f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c108:	d106      	bne.n	800c118 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c10e:	f023 0206 	bic.w	r2, r3, #6
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	651a      	str	r2, [r3, #80]	@ 0x50
 800c116:	e002      	b.n	800c11e <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2200      	movs	r2, #0
 800c122:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800c12e:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d107      	bne.n	800c14e <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	689a      	ldr	r2, [r3, #8]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800c14c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800c14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c160:	2300      	movs	r3, #0
 800c162:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d101      	bne.n	800c172 <HAL_ADC_Stop+0x1a>
 800c16e:	2302      	movs	r3, #2
 800c170:	e01a      	b.n	800c1a8 <HAL_ADC_Stop+0x50>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2201      	movs	r2, #1
 800c176:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fa7c 	bl	800c678 <ADC_ConversionStop_Disable>
 800c180:	4603      	mov	r3, r0
 800c182:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800c184:	7bfb      	ldrb	r3, [r7, #15]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d109      	bne.n	800c19e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c18e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c192:	f023 0301 	bic.w	r3, r3, #1
 800c196:	f043 0201 	orr.w	r2, r3, #1
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800c1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c1c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1cc:	d113      	bne.n	800c1f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c1d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1dc:	d10b      	bne.n	800c1f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1e2:	f043 0220 	orr.w	r2, r3, #32
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e068      	b.n	800c2c8 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800c1f6:	f7ff fddd 	bl	800bdb4 <HAL_GetTick>
 800c1fa:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800c1fc:	e021      	b.n	800c242 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c204:	d01d      	beq.n	800c242 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d007      	beq.n	800c21c <HAL_ADC_PollForConversion+0x6c>
 800c20c:	f7ff fdd2 	bl	800bdb4 <HAL_GetTick>
 800c210:	4602      	mov	r2, r0
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	1ad3      	subs	r3, r2, r3
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d212      	bcs.n	800c242 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f003 0302 	and.w	r3, r3, #2
 800c226:	2b00      	cmp	r3, #0
 800c228:	d10b      	bne.n	800c242 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c22e:	f043 0204 	orr.w	r2, r3, #4
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 800c23e:	2303      	movs	r3, #3
 800c240:	e042      	b.n	800c2c8 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 0302 	and.w	r3, r3, #2
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d0d6      	beq.n	800c1fe <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	699b      	ldr	r3, [r3, #24]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d104      	bne.n	800c262 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f06f 0212 	mvn.w	r2, #18
 800c260:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c266:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d124      	bne.n	800c2c6 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c282:	2b00      	cmp	r3, #0
 800c284:	d11f      	bne.n	800c2c6 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c28c:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c290:	2b00      	cmp	r3, #0
 800c292:	d006      	beq.n	800c2a2 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d111      	bne.n	800c2c6 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d105      	bne.n	800c2c6 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2be:	f043 0201 	orr.w	r2, r3, #1
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	370c      	adds	r7, #12
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bc80      	pop	{r7}
 800c2e6:	4770      	bx	lr

0800c2e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c300:	2b01      	cmp	r3, #1
 800c302:	d101      	bne.n	800c308 <HAL_ADC_ConfigChannel+0x20>
 800c304:	2302      	movs	r3, #2
 800c306:	e14f      	b.n	800c5a8 <HAL_ADC_ConfigChannel+0x2c0>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	2b06      	cmp	r3, #6
 800c316:	d81c      	bhi.n	800c352 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	685a      	ldr	r2, [r3, #4]
 800c322:	4613      	mov	r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	3b05      	subs	r3, #5
 800c32a:	221f      	movs	r2, #31
 800c32c:	fa02 f303 	lsl.w	r3, r2, r3
 800c330:	43db      	mvns	r3, r3
 800c332:	4019      	ands	r1, r3
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	6818      	ldr	r0, [r3, #0]
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	685a      	ldr	r2, [r3, #4]
 800c33c:	4613      	mov	r3, r2
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4413      	add	r3, r2
 800c342:	3b05      	subs	r3, #5
 800c344:	fa00 f203 	lsl.w	r2, r0, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	430a      	orrs	r2, r1
 800c34e:	641a      	str	r2, [r3, #64]	@ 0x40
 800c350:	e07e      	b.n	800c450 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	2b0c      	cmp	r3, #12
 800c358:	d81c      	bhi.n	800c394 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	685a      	ldr	r2, [r3, #4]
 800c364:	4613      	mov	r3, r2
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	4413      	add	r3, r2
 800c36a:	3b23      	subs	r3, #35	@ 0x23
 800c36c:	221f      	movs	r2, #31
 800c36e:	fa02 f303 	lsl.w	r3, r2, r3
 800c372:	43db      	mvns	r3, r3
 800c374:	4019      	ands	r1, r3
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	6818      	ldr	r0, [r3, #0]
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	685a      	ldr	r2, [r3, #4]
 800c37e:	4613      	mov	r3, r2
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4413      	add	r3, r2
 800c384:	3b23      	subs	r3, #35	@ 0x23
 800c386:	fa00 f203 	lsl.w	r2, r0, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	430a      	orrs	r2, r1
 800c390:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c392:	e05d      	b.n	800c450 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	2b12      	cmp	r3, #18
 800c39a:	d81c      	bhi.n	800c3d6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	685a      	ldr	r2, [r3, #4]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	4413      	add	r3, r2
 800c3ac:	3b41      	subs	r3, #65	@ 0x41
 800c3ae:	221f      	movs	r2, #31
 800c3b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3b4:	43db      	mvns	r3, r3
 800c3b6:	4019      	ands	r1, r3
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	6818      	ldr	r0, [r3, #0]
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	685a      	ldr	r2, [r3, #4]
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	4413      	add	r3, r2
 800c3c6:	3b41      	subs	r3, #65	@ 0x41
 800c3c8:	fa00 f203 	lsl.w	r2, r0, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	430a      	orrs	r2, r1
 800c3d2:	639a      	str	r2, [r3, #56]	@ 0x38
 800c3d4:	e03c      	b.n	800c450 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	2b18      	cmp	r3, #24
 800c3dc:	d81c      	bhi.n	800c418 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	685a      	ldr	r2, [r3, #4]
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	4413      	add	r3, r2
 800c3ee:	3b5f      	subs	r3, #95	@ 0x5f
 800c3f0:	221f      	movs	r2, #31
 800c3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3f6:	43db      	mvns	r3, r3
 800c3f8:	4019      	ands	r1, r3
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	6818      	ldr	r0, [r3, #0]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	685a      	ldr	r2, [r3, #4]
 800c402:	4613      	mov	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4413      	add	r3, r2
 800c408:	3b5f      	subs	r3, #95	@ 0x5f
 800c40a:	fa00 f203 	lsl.w	r2, r0, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	635a      	str	r2, [r3, #52]	@ 0x34
 800c416:	e01b      	b.n	800c450 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	4613      	mov	r3, r2
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	4413      	add	r3, r2
 800c428:	3b7d      	subs	r3, #125	@ 0x7d
 800c42a:	221f      	movs	r2, #31
 800c42c:	fa02 f303 	lsl.w	r3, r2, r3
 800c430:	43db      	mvns	r3, r3
 800c432:	4019      	ands	r1, r3
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	6818      	ldr	r0, [r3, #0]
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	4613      	mov	r3, r2
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	4413      	add	r3, r2
 800c442:	3b7d      	subs	r3, #125	@ 0x7d
 800c444:	fa00 f203 	lsl.w	r2, r0, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	430a      	orrs	r2, r1
 800c44e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2b09      	cmp	r3, #9
 800c456:	d81a      	bhi.n	800c48e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6959      	ldr	r1, [r3, #20]
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	4613      	mov	r3, r2
 800c464:	005b      	lsls	r3, r3, #1
 800c466:	4413      	add	r3, r2
 800c468:	2207      	movs	r2, #7
 800c46a:	fa02 f303 	lsl.w	r3, r2, r3
 800c46e:	43db      	mvns	r3, r3
 800c470:	4019      	ands	r1, r3
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	6898      	ldr	r0, [r3, #8]
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	4613      	mov	r3, r2
 800c47c:	005b      	lsls	r3, r3, #1
 800c47e:	4413      	add	r3, r2
 800c480:	fa00 f203 	lsl.w	r2, r0, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	430a      	orrs	r2, r1
 800c48a:	615a      	str	r2, [r3, #20]
 800c48c:	e05d      	b.n	800c54a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b13      	cmp	r3, #19
 800c494:	d81c      	bhi.n	800c4d0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6919      	ldr	r1, [r3, #16]
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	005b      	lsls	r3, r3, #1
 800c4a4:	4413      	add	r3, r2
 800c4a6:	3b1e      	subs	r3, #30
 800c4a8:	2207      	movs	r2, #7
 800c4aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ae:	43db      	mvns	r3, r3
 800c4b0:	4019      	ands	r1, r3
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	6898      	ldr	r0, [r3, #8]
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	005b      	lsls	r3, r3, #1
 800c4be:	4413      	add	r3, r2
 800c4c0:	3b1e      	subs	r3, #30
 800c4c2:	fa00 f203 	lsl.w	r2, r0, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	430a      	orrs	r2, r1
 800c4cc:	611a      	str	r2, [r3, #16]
 800c4ce:	e03c      	b.n	800c54a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b1d      	cmp	r3, #29
 800c4d6:	d81c      	bhi.n	800c512 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	68d9      	ldr	r1, [r3, #12]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	4413      	add	r3, r2
 800c4e8:	3b3c      	subs	r3, #60	@ 0x3c
 800c4ea:	2207      	movs	r2, #7
 800c4ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c4f0:	43db      	mvns	r3, r3
 800c4f2:	4019      	ands	r1, r3
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	6898      	ldr	r0, [r3, #8]
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	005b      	lsls	r3, r3, #1
 800c500:	4413      	add	r3, r2
 800c502:	3b3c      	subs	r3, #60	@ 0x3c
 800c504:	fa00 f203 	lsl.w	r2, r0, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	430a      	orrs	r2, r1
 800c50e:	60da      	str	r2, [r3, #12]
 800c510:	e01b      	b.n	800c54a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	4613      	mov	r3, r2
 800c51e:	005b      	lsls	r3, r3, #1
 800c520:	4413      	add	r3, r2
 800c522:	3b5a      	subs	r3, #90	@ 0x5a
 800c524:	2207      	movs	r2, #7
 800c526:	fa02 f303 	lsl.w	r3, r2, r3
 800c52a:	43db      	mvns	r3, r3
 800c52c:	4019      	ands	r1, r3
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	6898      	ldr	r0, [r3, #8]
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	4613      	mov	r3, r2
 800c538:	005b      	lsls	r3, r3, #1
 800c53a:	4413      	add	r3, r2
 800c53c:	3b5a      	subs	r3, #90	@ 0x5a
 800c53e:	fa00 f203 	lsl.w	r2, r0, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	430a      	orrs	r2, r1
 800c548:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b10      	cmp	r3, #16
 800c550:	d003      	beq.n	800c55a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c556:	2b11      	cmp	r3, #17
 800c558:	d121      	bne.n	800c59e <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800c55a:	4b16      	ldr	r3, [pc, #88]	@ (800c5b4 <HAL_ADC_ConfigChannel+0x2cc>)
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c562:	2b00      	cmp	r3, #0
 800c564:	d11b      	bne.n	800c59e <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800c566:	4b13      	ldr	r3, [pc, #76]	@ (800c5b4 <HAL_ADC_ConfigChannel+0x2cc>)
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	4a12      	ldr	r2, [pc, #72]	@ (800c5b4 <HAL_ADC_ConfigChannel+0x2cc>)
 800c56c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c570:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b10      	cmp	r3, #16
 800c578:	d111      	bne.n	800c59e <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800c57a:	4b0f      	ldr	r3, [pc, #60]	@ (800c5b8 <HAL_ADC_ConfigChannel+0x2d0>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a0f      	ldr	r2, [pc, #60]	@ (800c5bc <HAL_ADC_ConfigChannel+0x2d4>)
 800c580:	fba2 2303 	umull	r2, r3, r2, r3
 800c584:	0c9a      	lsrs	r2, r3, #18
 800c586:	4613      	mov	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4413      	add	r3, r2
 800c58c:	005b      	lsls	r3, r3, #1
 800c58e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800c590:	e002      	b.n	800c598 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	3b01      	subs	r3, #1
 800c596:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1f9      	bne.n	800c592 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800c5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3714      	adds	r7, #20
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bc80      	pop	{r7}
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	40012700 	.word	0x40012700
 800c5b8:	20000000 	.word	0x20000000
 800c5bc:	431bde83 	.word	0x431bde83

0800c5c0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5da:	2b40      	cmp	r3, #64	@ 0x40
 800c5dc:	d043      	beq.n	800c666 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	689a      	ldr	r2, [r3, #8]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f042 0201 	orr.w	r2, r2, #1
 800c5ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800c5ee:	4b20      	ldr	r3, [pc, #128]	@ (800c670 <ADC_Enable+0xb0>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a20      	ldr	r2, [pc, #128]	@ (800c674 <ADC_Enable+0xb4>)
 800c5f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c5f8:	0c9a      	lsrs	r2, r3, #18
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	005b      	lsls	r3, r3, #1
 800c5fe:	4413      	add	r3, r2
 800c600:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800c602:	e002      	b.n	800c60a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	3b01      	subs	r3, #1
 800c608:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1f9      	bne.n	800c604 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800c610:	f7ff fbd0 	bl	800bdb4 <HAL_GetTick>
 800c614:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800c616:	e01f      	b.n	800c658 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800c618:	f7ff fbcc 	bl	800bdb4 <HAL_GetTick>
 800c61c:	4602      	mov	r2, r0
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	2b02      	cmp	r3, #2
 800c624:	d918      	bls.n	800c658 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c630:	2b40      	cmp	r3, #64	@ 0x40
 800c632:	d011      	beq.n	800c658 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c638:	f043 0210 	orr.w	r2, r3, #16
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c644:	f043 0201 	orr.w	r2, r3, #1
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 800c654:	2301      	movs	r3, #1
 800c656:	e007      	b.n	800c668 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c662:	2b40      	cmp	r3, #64	@ 0x40
 800c664:	d1d8      	bne.n	800c618 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	20000000 	.word	0x20000000
 800c674:	431bde83 	.word	0x431bde83

0800c678 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c680:	2300      	movs	r3, #0
 800c682:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c68e:	2b40      	cmp	r3, #64	@ 0x40
 800c690:	d12e      	bne.n	800c6f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	689a      	ldr	r2, [r3, #8]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f022 0201 	bic.w	r2, r2, #1
 800c6a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c6a2:	f7ff fb87 	bl	800bdb4 <HAL_GetTick>
 800c6a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 800c6a8:	e01b      	b.n	800c6e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800c6aa:	f7ff fb83 	bl	800bdb4 <HAL_GetTick>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	1ad3      	subs	r3, r2, r3
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d914      	bls.n	800c6e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6c2:	2b40      	cmp	r3, #64	@ 0x40
 800c6c4:	d10d      	bne.n	800c6e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6ca:	f043 0210 	orr.w	r2, r3, #16
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6d6:	f043 0201 	orr.w	r2, r3, #1
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e007      	b.n	800c6f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6ec:	2b40      	cmp	r3, #64	@ 0x40
 800c6ee:	d0dc      	beq.n	800c6aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3710      	adds	r7, #16
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
	...

0800c6fc <__NVIC_SetPriorityGrouping>:
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b085      	sub	sp, #20
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f003 0307 	and.w	r3, r3, #7
 800c70a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c70c:	4b0c      	ldr	r3, [pc, #48]	@ (800c740 <__NVIC_SetPriorityGrouping+0x44>)
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c712:	68ba      	ldr	r2, [r7, #8]
 800c714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c718:	4013      	ands	r3, r2
 800c71a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c72c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c72e:	4a04      	ldr	r2, [pc, #16]	@ (800c740 <__NVIC_SetPriorityGrouping+0x44>)
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	60d3      	str	r3, [r2, #12]
}
 800c734:	bf00      	nop
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	bc80      	pop	{r7}
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	e000ed00 	.word	0xe000ed00

0800c744 <__NVIC_GetPriorityGrouping>:
{
 800c744:	b480      	push	{r7}
 800c746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c748:	4b04      	ldr	r3, [pc, #16]	@ (800c75c <__NVIC_GetPriorityGrouping+0x18>)
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	0a1b      	lsrs	r3, r3, #8
 800c74e:	f003 0307 	and.w	r3, r3, #7
}
 800c752:	4618      	mov	r0, r3
 800c754:	46bd      	mov	sp, r7
 800c756:	bc80      	pop	{r7}
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	e000ed00 	.word	0xe000ed00

0800c760 <__NVIC_EnableIRQ>:
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	4603      	mov	r3, r0
 800c768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c76a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	db0b      	blt.n	800c78a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c772:	79fb      	ldrb	r3, [r7, #7]
 800c774:	f003 021f 	and.w	r2, r3, #31
 800c778:	4906      	ldr	r1, [pc, #24]	@ (800c794 <__NVIC_EnableIRQ+0x34>)
 800c77a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c77e:	095b      	lsrs	r3, r3, #5
 800c780:	2001      	movs	r0, #1
 800c782:	fa00 f202 	lsl.w	r2, r0, r2
 800c786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c78a:	bf00      	nop
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	bc80      	pop	{r7}
 800c792:	4770      	bx	lr
 800c794:	e000e100 	.word	0xe000e100

0800c798 <__NVIC_DisableIRQ>:
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	4603      	mov	r3, r0
 800c7a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c7a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	db12      	blt.n	800c7d0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c7aa:	79fb      	ldrb	r3, [r7, #7]
 800c7ac:	f003 021f 	and.w	r2, r3, #31
 800c7b0:	490a      	ldr	r1, [pc, #40]	@ (800c7dc <__NVIC_DisableIRQ+0x44>)
 800c7b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7b6:	095b      	lsrs	r3, r3, #5
 800c7b8:	2001      	movs	r0, #1
 800c7ba:	fa00 f202 	lsl.w	r2, r0, r2
 800c7be:	3320      	adds	r3, #32
 800c7c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c7c4:	f3bf 8f4f 	dsb	sy
}
 800c7c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c7ca:	f3bf 8f6f 	isb	sy
}
 800c7ce:	bf00      	nop
}
 800c7d0:	bf00      	nop
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bc80      	pop	{r7}
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	e000e100 	.word	0xe000e100

0800c7e0 <__NVIC_SetPriority>:
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	6039      	str	r1, [r7, #0]
 800c7ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c7ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	db0a      	blt.n	800c80a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	490c      	ldr	r1, [pc, #48]	@ (800c82c <__NVIC_SetPriority+0x4c>)
 800c7fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7fe:	0112      	lsls	r2, r2, #4
 800c800:	b2d2      	uxtb	r2, r2
 800c802:	440b      	add	r3, r1
 800c804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c808:	e00a      	b.n	800c820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	b2da      	uxtb	r2, r3
 800c80e:	4908      	ldr	r1, [pc, #32]	@ (800c830 <__NVIC_SetPriority+0x50>)
 800c810:	79fb      	ldrb	r3, [r7, #7]
 800c812:	f003 030f 	and.w	r3, r3, #15
 800c816:	3b04      	subs	r3, #4
 800c818:	0112      	lsls	r2, r2, #4
 800c81a:	b2d2      	uxtb	r2, r2
 800c81c:	440b      	add	r3, r1
 800c81e:	761a      	strb	r2, [r3, #24]
}
 800c820:	bf00      	nop
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	bc80      	pop	{r7}
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	e000e100 	.word	0xe000e100
 800c830:	e000ed00 	.word	0xe000ed00

0800c834 <NVIC_EncodePriority>:
{
 800c834:	b480      	push	{r7}
 800c836:	b089      	sub	sp, #36	@ 0x24
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f003 0307 	and.w	r3, r3, #7
 800c846:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	f1c3 0307 	rsb	r3, r3, #7
 800c84e:	2b04      	cmp	r3, #4
 800c850:	bf28      	it	cs
 800c852:	2304      	movcs	r3, #4
 800c854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	3304      	adds	r3, #4
 800c85a:	2b06      	cmp	r3, #6
 800c85c:	d902      	bls.n	800c864 <NVIC_EncodePriority+0x30>
 800c85e:	69fb      	ldr	r3, [r7, #28]
 800c860:	3b03      	subs	r3, #3
 800c862:	e000      	b.n	800c866 <NVIC_EncodePriority+0x32>
 800c864:	2300      	movs	r3, #0
 800c866:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c868:	f04f 32ff 	mov.w	r2, #4294967295
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	fa02 f303 	lsl.w	r3, r2, r3
 800c872:	43da      	mvns	r2, r3
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	401a      	ands	r2, r3
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c87c:	f04f 31ff 	mov.w	r1, #4294967295
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	fa01 f303 	lsl.w	r3, r1, r3
 800c886:	43d9      	mvns	r1, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c88c:	4313      	orrs	r3, r2
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3724      	adds	r7, #36	@ 0x24
 800c892:	46bd      	mov	sp, r7
 800c894:	bc80      	pop	{r7}
 800c896:	4770      	bx	lr

0800c898 <SysTick_Config>:
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c8a8:	d301      	bcc.n	800c8ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e00f      	b.n	800c8ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c8ae:	4a0a      	ldr	r2, [pc, #40]	@ (800c8d8 <SysTick_Config+0x40>)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	3b01      	subs	r3, #1
 800c8b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c8b6:	210f      	movs	r1, #15
 800c8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8bc:	f7ff ff90 	bl	800c7e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c8c0:	4b05      	ldr	r3, [pc, #20]	@ (800c8d8 <SysTick_Config+0x40>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c8c6:	4b04      	ldr	r3, [pc, #16]	@ (800c8d8 <SysTick_Config+0x40>)
 800c8c8:	2207      	movs	r2, #7
 800c8ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	e000e010 	.word	0xe000e010

0800c8dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f7ff ff09 	bl	800c6fc <__NVIC_SetPriorityGrouping>
}
 800c8ea:	bf00      	nop
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b086      	sub	sp, #24
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	60b9      	str	r1, [r7, #8]
 800c8fc:	607a      	str	r2, [r7, #4]
 800c8fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c900:	2300      	movs	r3, #0
 800c902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c904:	f7ff ff1e 	bl	800c744 <__NVIC_GetPriorityGrouping>
 800c908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	68b9      	ldr	r1, [r7, #8]
 800c90e:	6978      	ldr	r0, [r7, #20]
 800c910:	f7ff ff90 	bl	800c834 <NVIC_EncodePriority>
 800c914:	4602      	mov	r2, r0
 800c916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c91a:	4611      	mov	r1, r2
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7ff ff5f 	bl	800c7e0 <__NVIC_SetPriority>
}
 800c922:	bf00      	nop
 800c924:	3718      	adds	r7, #24
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b082      	sub	sp, #8
 800c92e:	af00      	add	r7, sp, #0
 800c930:	4603      	mov	r3, r0
 800c932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c938:	4618      	mov	r0, r3
 800c93a:	f7ff ff11 	bl	800c760 <__NVIC_EnableIRQ>
}
 800c93e:	bf00      	nop
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b082      	sub	sp, #8
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	4603      	mov	r3, r0
 800c94e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c954:	4618      	mov	r0, r3
 800c956:	f7ff ff1f 	bl	800c798 <__NVIC_DisableIRQ>
}
 800c95a:	bf00      	nop
 800c95c:	3708      	adds	r7, #8
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}

0800c962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c962:	b580      	push	{r7, lr}
 800c964:	b082      	sub	sp, #8
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7ff ff94 	bl	800c898 <SysTick_Config>
 800c970:	4603      	mov	r3, r0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b084      	sub	sp, #16
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c982:	2300      	movs	r3, #0
 800c984:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d005      	beq.n	800c99e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2204      	movs	r2, #4
 800c996:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800c998:	2301      	movs	r3, #1
 800c99a:	73fb      	strb	r3, [r7, #15]
 800c99c:	e029      	b.n	800c9f2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f022 020e 	bic.w	r2, r2, #14
 800c9ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f022 0201 	bic.w	r2, r2, #1
 800c9bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9c2:	f003 021c 	and.w	r2, r3, #28
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	fa01 f202 	lsl.w	r2, r1, r2
 800c9d0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d003      	beq.n	800c9f2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	4798      	blx	r3
    }
  }
  return status;
 800c9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ca0a:	b2db      	uxtb	r3, r3
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bc80      	pop	{r7}
 800ca14:	4770      	bx	lr
	...

0800ca18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b087      	sub	sp, #28
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800ca22:	2300      	movs	r3, #0
 800ca24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800ca26:	2300      	movs	r3, #0
 800ca28:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800ca2e:	e160      	b.n	800ccf2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	2101      	movs	r1, #1
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	fa01 f303 	lsl.w	r3, r1, r3
 800ca3c:	4013      	ands	r3, r2
 800ca3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f000 8152 	beq.w	800ccec <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	f003 0303 	and.w	r3, r3, #3
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d005      	beq.n	800ca60 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	d130      	bne.n	800cac2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	005b      	lsls	r3, r3, #1
 800ca6a:	2203      	movs	r2, #3
 800ca6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca70:	43db      	mvns	r3, r3
 800ca72:	693a      	ldr	r2, [r7, #16]
 800ca74:	4013      	ands	r3, r2
 800ca76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	68da      	ldr	r2, [r3, #12]
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	005b      	lsls	r3, r3, #1
 800ca80:	fa02 f303 	lsl.w	r3, r2, r3
 800ca84:	693a      	ldr	r2, [r7, #16]
 800ca86:	4313      	orrs	r3, r2
 800ca88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	693a      	ldr	r2, [r7, #16]
 800ca8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800ca96:	2201      	movs	r2, #1
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca9e:	43db      	mvns	r3, r3
 800caa0:	693a      	ldr	r2, [r7, #16]
 800caa2:	4013      	ands	r3, r2
 800caa4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	091b      	lsrs	r3, r3, #4
 800caac:	f003 0201 	and.w	r2, r3, #1
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	fa02 f303 	lsl.w	r3, r2, r3
 800cab6:	693a      	ldr	r2, [r7, #16]
 800cab8:	4313      	orrs	r3, r2
 800caba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	f003 0303 	and.w	r3, r3, #3
 800caca:	2b03      	cmp	r3, #3
 800cacc:	d017      	beq.n	800cafe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	005b      	lsls	r3, r3, #1
 800cad8:	2203      	movs	r2, #3
 800cada:	fa02 f303 	lsl.w	r3, r2, r3
 800cade:	43db      	mvns	r3, r3
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	4013      	ands	r3, r2
 800cae4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	689a      	ldr	r2, [r3, #8]
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	005b      	lsls	r3, r3, #1
 800caee:	fa02 f303 	lsl.w	r3, r2, r3
 800caf2:	693a      	ldr	r2, [r7, #16]
 800caf4:	4313      	orrs	r3, r2
 800caf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	693a      	ldr	r2, [r7, #16]
 800cafc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	f003 0303 	and.w	r3, r3, #3
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	d123      	bne.n	800cb52 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	08da      	lsrs	r2, r3, #3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	3208      	adds	r2, #8
 800cb12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb16:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	f003 0307 	and.w	r3, r3, #7
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	220f      	movs	r2, #15
 800cb22:	fa02 f303 	lsl.w	r3, r2, r3
 800cb26:	43db      	mvns	r3, r3
 800cb28:	693a      	ldr	r2, [r7, #16]
 800cb2a:	4013      	ands	r3, r2
 800cb2c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	691a      	ldr	r2, [r3, #16]
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f003 0307 	and.w	r3, r3, #7
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb3e:	693a      	ldr	r2, [r7, #16]
 800cb40:	4313      	orrs	r3, r2
 800cb42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	08da      	lsrs	r2, r3, #3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	3208      	adds	r2, #8
 800cb4c:	6939      	ldr	r1, [r7, #16]
 800cb4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	005b      	lsls	r3, r3, #1
 800cb5c:	2203      	movs	r2, #3
 800cb5e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb62:	43db      	mvns	r3, r3
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	4013      	ands	r3, r2
 800cb68:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	f003 0203 	and.w	r2, r3, #3
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	005b      	lsls	r3, r3, #1
 800cb76:	fa02 f303 	lsl.w	r3, r2, r3
 800cb7a:	693a      	ldr	r2, [r7, #16]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	f000 80ac 	beq.w	800ccec <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb94:	4b5e      	ldr	r3, [pc, #376]	@ (800cd10 <HAL_GPIO_Init+0x2f8>)
 800cb96:	6a1b      	ldr	r3, [r3, #32]
 800cb98:	4a5d      	ldr	r2, [pc, #372]	@ (800cd10 <HAL_GPIO_Init+0x2f8>)
 800cb9a:	f043 0301 	orr.w	r3, r3, #1
 800cb9e:	6213      	str	r3, [r2, #32]
 800cba0:	4b5b      	ldr	r3, [pc, #364]	@ (800cd10 <HAL_GPIO_Init+0x2f8>)
 800cba2:	6a1b      	ldr	r3, [r3, #32]
 800cba4:	f003 0301 	and.w	r3, r3, #1
 800cba8:	60bb      	str	r3, [r7, #8]
 800cbaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800cbac:	4a59      	ldr	r2, [pc, #356]	@ (800cd14 <HAL_GPIO_Init+0x2fc>)
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	089b      	lsrs	r3, r3, #2
 800cbb2:	3302      	adds	r3, #2
 800cbb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	f003 0303 	and.w	r3, r3, #3
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	220f      	movs	r2, #15
 800cbc4:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc8:	43db      	mvns	r3, r3
 800cbca:	693a      	ldr	r2, [r7, #16]
 800cbcc:	4013      	ands	r3, r2
 800cbce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	4a51      	ldr	r2, [pc, #324]	@ (800cd18 <HAL_GPIO_Init+0x300>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d025      	beq.n	800cc24 <HAL_GPIO_Init+0x20c>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4a50      	ldr	r2, [pc, #320]	@ (800cd1c <HAL_GPIO_Init+0x304>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d01f      	beq.n	800cc20 <HAL_GPIO_Init+0x208>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	4a4f      	ldr	r2, [pc, #316]	@ (800cd20 <HAL_GPIO_Init+0x308>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d019      	beq.n	800cc1c <HAL_GPIO_Init+0x204>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4a4e      	ldr	r2, [pc, #312]	@ (800cd24 <HAL_GPIO_Init+0x30c>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d013      	beq.n	800cc18 <HAL_GPIO_Init+0x200>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4a4d      	ldr	r2, [pc, #308]	@ (800cd28 <HAL_GPIO_Init+0x310>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d00d      	beq.n	800cc14 <HAL_GPIO_Init+0x1fc>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a4c      	ldr	r2, [pc, #304]	@ (800cd2c <HAL_GPIO_Init+0x314>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d007      	beq.n	800cc10 <HAL_GPIO_Init+0x1f8>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4a4b      	ldr	r2, [pc, #300]	@ (800cd30 <HAL_GPIO_Init+0x318>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d101      	bne.n	800cc0c <HAL_GPIO_Init+0x1f4>
 800cc08:	2306      	movs	r3, #6
 800cc0a:	e00c      	b.n	800cc26 <HAL_GPIO_Init+0x20e>
 800cc0c:	2307      	movs	r3, #7
 800cc0e:	e00a      	b.n	800cc26 <HAL_GPIO_Init+0x20e>
 800cc10:	2305      	movs	r3, #5
 800cc12:	e008      	b.n	800cc26 <HAL_GPIO_Init+0x20e>
 800cc14:	2304      	movs	r3, #4
 800cc16:	e006      	b.n	800cc26 <HAL_GPIO_Init+0x20e>
 800cc18:	2303      	movs	r3, #3
 800cc1a:	e004      	b.n	800cc26 <HAL_GPIO_Init+0x20e>
 800cc1c:	2302      	movs	r3, #2
 800cc1e:	e002      	b.n	800cc26 <HAL_GPIO_Init+0x20e>
 800cc20:	2301      	movs	r3, #1
 800cc22:	e000      	b.n	800cc26 <HAL_GPIO_Init+0x20e>
 800cc24:	2300      	movs	r3, #0
 800cc26:	697a      	ldr	r2, [r7, #20]
 800cc28:	f002 0203 	and.w	r2, r2, #3
 800cc2c:	0092      	lsls	r2, r2, #2
 800cc2e:	4093      	lsls	r3, r2
 800cc30:	693a      	ldr	r2, [r7, #16]
 800cc32:	4313      	orrs	r3, r2
 800cc34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800cc36:	4937      	ldr	r1, [pc, #220]	@ (800cd14 <HAL_GPIO_Init+0x2fc>)
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	089b      	lsrs	r3, r3, #2
 800cc3c:	3302      	adds	r3, #2
 800cc3e:	693a      	ldr	r2, [r7, #16]
 800cc40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cc44:	4b3b      	ldr	r3, [pc, #236]	@ (800cd34 <HAL_GPIO_Init+0x31c>)
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	43db      	mvns	r3, r3
 800cc4e:	693a      	ldr	r2, [r7, #16]
 800cc50:	4013      	ands	r3, r2
 800cc52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d003      	beq.n	800cc68 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800cc60:	693a      	ldr	r2, [r7, #16]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800cc68:	4a32      	ldr	r2, [pc, #200]	@ (800cd34 <HAL_GPIO_Init+0x31c>)
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cc6e:	4b31      	ldr	r3, [pc, #196]	@ (800cd34 <HAL_GPIO_Init+0x31c>)
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	43db      	mvns	r3, r3
 800cc78:	693a      	ldr	r2, [r7, #16]
 800cc7a:	4013      	ands	r3, r2
 800cc7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d003      	beq.n	800cc92 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800cc8a:	693a      	ldr	r2, [r7, #16]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800cc92:	4a28      	ldr	r2, [pc, #160]	@ (800cd34 <HAL_GPIO_Init+0x31c>)
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cc98:	4b26      	ldr	r3, [pc, #152]	@ (800cd34 <HAL_GPIO_Init+0x31c>)
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	43db      	mvns	r3, r3
 800cca2:	693a      	ldr	r2, [r7, #16]
 800cca4:	4013      	ands	r3, r2
 800cca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d003      	beq.n	800ccbc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800ccb4:	693a      	ldr	r2, [r7, #16]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800ccbc:	4a1d      	ldr	r2, [pc, #116]	@ (800cd34 <HAL_GPIO_Init+0x31c>)
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ccc2:	4b1c      	ldr	r3, [pc, #112]	@ (800cd34 <HAL_GPIO_Init+0x31c>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	43db      	mvns	r3, r3
 800cccc:	693a      	ldr	r2, [r7, #16]
 800ccce:	4013      	ands	r3, r2
 800ccd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d003      	beq.n	800cce6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	4313      	orrs	r3, r2
 800cce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800cce6:	4a13      	ldr	r2, [pc, #76]	@ (800cd34 <HAL_GPIO_Init+0x31c>)
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	3301      	adds	r3, #1
 800ccf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f47f ae97 	bne.w	800ca30 <HAL_GPIO_Init+0x18>
  }
}
 800cd02:	bf00      	nop
 800cd04:	bf00      	nop
 800cd06:	371c      	adds	r7, #28
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bc80      	pop	{r7}
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop
 800cd10:	40023800 	.word	0x40023800
 800cd14:	40010000 	.word	0x40010000
 800cd18:	40020000 	.word	0x40020000
 800cd1c:	40020400 	.word	0x40020400
 800cd20:	40020800 	.word	0x40020800
 800cd24:	40020c00 	.word	0x40020c00
 800cd28:	40021000 	.word	0x40021000
 800cd2c:	40021400 	.word	0x40021400
 800cd30:	40021800 	.word	0x40021800
 800cd34:	40010400 	.word	0x40010400

0800cd38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b087      	sub	sp, #28
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800cd42:	2300      	movs	r3, #0
 800cd44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800cd46:	2300      	movs	r3, #0
 800cd48:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800cd4e:	e0c4      	b.n	800ceda <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800cd50:	2201      	movs	r2, #1
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	fa02 f303 	lsl.w	r3, r2, r3
 800cd58:	683a      	ldr	r2, [r7, #0]
 800cd5a:	4013      	ands	r3, r2
 800cd5c:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 80b7 	beq.w	800ced4 <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 800cd66:	4a63      	ldr	r2, [pc, #396]	@ (800cef4 <HAL_GPIO_DeInit+0x1bc>)
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	089b      	lsrs	r3, r3, #2
 800cd6c:	3302      	adds	r3, #2
 800cd6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd72:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	f003 0303 	and.w	r3, r3, #3
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	220f      	movs	r2, #15
 800cd7e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd82:	68fa      	ldr	r2, [r7, #12]
 800cd84:	4013      	ands	r3, r2
 800cd86:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a5b      	ldr	r2, [pc, #364]	@ (800cef8 <HAL_GPIO_DeInit+0x1c0>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d025      	beq.n	800cddc <HAL_GPIO_DeInit+0xa4>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a5a      	ldr	r2, [pc, #360]	@ (800cefc <HAL_GPIO_DeInit+0x1c4>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d01f      	beq.n	800cdd8 <HAL_GPIO_DeInit+0xa0>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a59      	ldr	r2, [pc, #356]	@ (800cf00 <HAL_GPIO_DeInit+0x1c8>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d019      	beq.n	800cdd4 <HAL_GPIO_DeInit+0x9c>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4a58      	ldr	r2, [pc, #352]	@ (800cf04 <HAL_GPIO_DeInit+0x1cc>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d013      	beq.n	800cdd0 <HAL_GPIO_DeInit+0x98>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4a57      	ldr	r2, [pc, #348]	@ (800cf08 <HAL_GPIO_DeInit+0x1d0>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d00d      	beq.n	800cdcc <HAL_GPIO_DeInit+0x94>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	4a56      	ldr	r2, [pc, #344]	@ (800cf0c <HAL_GPIO_DeInit+0x1d4>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d007      	beq.n	800cdc8 <HAL_GPIO_DeInit+0x90>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4a55      	ldr	r2, [pc, #340]	@ (800cf10 <HAL_GPIO_DeInit+0x1d8>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d101      	bne.n	800cdc4 <HAL_GPIO_DeInit+0x8c>
 800cdc0:	2306      	movs	r3, #6
 800cdc2:	e00c      	b.n	800cdde <HAL_GPIO_DeInit+0xa6>
 800cdc4:	2307      	movs	r3, #7
 800cdc6:	e00a      	b.n	800cdde <HAL_GPIO_DeInit+0xa6>
 800cdc8:	2305      	movs	r3, #5
 800cdca:	e008      	b.n	800cdde <HAL_GPIO_DeInit+0xa6>
 800cdcc:	2304      	movs	r3, #4
 800cdce:	e006      	b.n	800cdde <HAL_GPIO_DeInit+0xa6>
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e004      	b.n	800cdde <HAL_GPIO_DeInit+0xa6>
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	e002      	b.n	800cdde <HAL_GPIO_DeInit+0xa6>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e000      	b.n	800cdde <HAL_GPIO_DeInit+0xa6>
 800cddc:	2300      	movs	r3, #0
 800cdde:	697a      	ldr	r2, [r7, #20]
 800cde0:	f002 0203 	and.w	r2, r2, #3
 800cde4:	0092      	lsls	r2, r2, #2
 800cde6:	4093      	lsls	r3, r2
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d132      	bne.n	800ce54 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800cdee:	4b49      	ldr	r3, [pc, #292]	@ (800cf14 <HAL_GPIO_DeInit+0x1dc>)
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	43db      	mvns	r3, r3
 800cdf6:	4947      	ldr	r1, [pc, #284]	@ (800cf14 <HAL_GPIO_DeInit+0x1dc>)
 800cdf8:	4013      	ands	r3, r2
 800cdfa:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800cdfc:	4b45      	ldr	r3, [pc, #276]	@ (800cf14 <HAL_GPIO_DeInit+0x1dc>)
 800cdfe:	685a      	ldr	r2, [r3, #4]
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	43db      	mvns	r3, r3
 800ce04:	4943      	ldr	r1, [pc, #268]	@ (800cf14 <HAL_GPIO_DeInit+0x1dc>)
 800ce06:	4013      	ands	r3, r2
 800ce08:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800ce0a:	4b42      	ldr	r3, [pc, #264]	@ (800cf14 <HAL_GPIO_DeInit+0x1dc>)
 800ce0c:	68da      	ldr	r2, [r3, #12]
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	43db      	mvns	r3, r3
 800ce12:	4940      	ldr	r1, [pc, #256]	@ (800cf14 <HAL_GPIO_DeInit+0x1dc>)
 800ce14:	4013      	ands	r3, r2
 800ce16:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800ce18:	4b3e      	ldr	r3, [pc, #248]	@ (800cf14 <HAL_GPIO_DeInit+0x1dc>)
 800ce1a:	689a      	ldr	r2, [r3, #8]
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	43db      	mvns	r3, r3
 800ce20:	493c      	ldr	r1, [pc, #240]	@ (800cf14 <HAL_GPIO_DeInit+0x1dc>)
 800ce22:	4013      	ands	r3, r2
 800ce24:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	f003 0303 	and.w	r3, r3, #3
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	220f      	movs	r2, #15
 800ce30:	fa02 f303 	lsl.w	r3, r2, r3
 800ce34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 800ce36:	4a2f      	ldr	r2, [pc, #188]	@ (800cef4 <HAL_GPIO_DeInit+0x1bc>)
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	089b      	lsrs	r3, r3, #2
 800ce3c:	3302      	adds	r3, #2
 800ce3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	43da      	mvns	r2, r3
 800ce46:	482b      	ldr	r0, [pc, #172]	@ (800cef4 <HAL_GPIO_DeInit+0x1bc>)
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	089b      	lsrs	r3, r3, #2
 800ce4c:	400a      	ands	r2, r1
 800ce4e:	3302      	adds	r3, #2
 800ce50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	2103      	movs	r1, #3
 800ce5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce62:	43db      	mvns	r3, r3
 800ce64:	401a      	ands	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	08da      	lsrs	r2, r3, #3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	3208      	adds	r2, #8
 800ce72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	f003 0307 	and.w	r3, r3, #7
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	220f      	movs	r2, #15
 800ce80:	fa02 f303 	lsl.w	r3, r2, r3
 800ce84:	43db      	mvns	r3, r3
 800ce86:	697a      	ldr	r2, [r7, #20]
 800ce88:	08d2      	lsrs	r2, r2, #3
 800ce8a:	4019      	ands	r1, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	3208      	adds	r2, #8
 800ce90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	68da      	ldr	r2, [r3, #12]
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	005b      	lsls	r3, r3, #1
 800ce9c:	2103      	movs	r1, #3
 800ce9e:	fa01 f303 	lsl.w	r3, r1, r3
 800cea2:	43db      	mvns	r3, r3
 800cea4:	401a      	ands	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	685a      	ldr	r2, [r3, #4]
 800ceae:	2101      	movs	r1, #1
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	fa01 f303 	lsl.w	r3, r1, r3
 800ceb6:	43db      	mvns	r3, r3
 800ceb8:	401a      	ands	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	689a      	ldr	r2, [r3, #8]
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	005b      	lsls	r3, r3, #1
 800cec6:	2103      	movs	r1, #3
 800cec8:	fa01 f303 	lsl.w	r3, r1, r3
 800cecc:	43db      	mvns	r3, r3
 800cece:	401a      	ands	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	609a      	str	r2, [r3, #8]
    }

    position++;
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	3301      	adds	r3, #1
 800ced8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	fa22 f303 	lsr.w	r3, r2, r3
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f47f af34 	bne.w	800cd50 <HAL_GPIO_DeInit+0x18>
  }
}
 800cee8:	bf00      	nop
 800ceea:	bf00      	nop
 800ceec:	371c      	adds	r7, #28
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bc80      	pop	{r7}
 800cef2:	4770      	bx	lr
 800cef4:	40010000 	.word	0x40010000
 800cef8:	40020000 	.word	0x40020000
 800cefc:	40020400 	.word	0x40020400
 800cf00:	40020800 	.word	0x40020800
 800cf04:	40020c00 	.word	0x40020c00
 800cf08:	40021000 	.word	0x40021000
 800cf0c:	40021400 	.word	0x40021400
 800cf10:	40021800 	.word	0x40021800
 800cf14:	40010400 	.word	0x40010400

0800cf18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	460b      	mov	r3, r1
 800cf22:	807b      	strh	r3, [r7, #2]
 800cf24:	4613      	mov	r3, r2
 800cf26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cf28:	787b      	ldrb	r3, [r7, #1]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d003      	beq.n	800cf36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800cf2e:	887a      	ldrh	r2, [r7, #2]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800cf34:	e003      	b.n	800cf3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800cf36:	887b      	ldrh	r3, [r7, #2]
 800cf38:	041a      	lsls	r2, r3, #16
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	619a      	str	r2, [r3, #24]
}
 800cf3e:	bf00      	nop
 800cf40:	370c      	adds	r7, #12
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bc80      	pop	{r7}
 800cf46:	4770      	bx	lr

0800cf48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b085      	sub	sp, #20
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	460b      	mov	r3, r1
 800cf52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	695b      	ldr	r3, [r3, #20]
 800cf58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cf5a:	887a      	ldrh	r2, [r7, #2]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	4013      	ands	r3, r2
 800cf60:	041a      	lsls	r2, r3, #16
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	43d9      	mvns	r1, r3
 800cf66:	887b      	ldrh	r3, [r7, #2]
 800cf68:	400b      	ands	r3, r1
 800cf6a:	431a      	orrs	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	619a      	str	r2, [r3, #24]
}
 800cf70:	bf00      	nop
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bc80      	pop	{r7}
 800cf78:	4770      	bx	lr
	...

0800cf7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	4603      	mov	r3, r0
 800cf84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800cf86:	4b08      	ldr	r3, [pc, #32]	@ (800cfa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800cf88:	695a      	ldr	r2, [r3, #20]
 800cf8a:	88fb      	ldrh	r3, [r7, #6]
 800cf8c:	4013      	ands	r3, r2
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d006      	beq.n	800cfa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800cf92:	4a05      	ldr	r2, [pc, #20]	@ (800cfa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800cf94:	88fb      	ldrh	r3, [r7, #6]
 800cf96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cf98:	88fb      	ldrh	r3, [r7, #6]
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7f5 fc72 	bl	8002884 <HAL_GPIO_EXTI_Callback>
  }
}
 800cfa0:	bf00      	nop
 800cfa2:	3708      	adds	r7, #8
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	40010400 	.word	0x40010400

0800cfac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d101      	bne.n	800cfbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e12b      	b.n	800d216 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d106      	bne.n	800cfd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f95d 	bl	800d292 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2224      	movs	r2, #36	@ 0x24
 800cfdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f022 0201 	bic.w	r2, r2, #1
 800cfee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	681a      	ldr	r2, [r3, #0]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cffe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d00e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d010:	f003 fa6c 	bl	80104ec <HAL_RCC_GetPCLK1Freq>
 800d014:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	685b      	ldr	r3, [r3, #4]
 800d01a:	4a81      	ldr	r2, [pc, #516]	@ (800d220 <HAL_I2C_Init+0x274>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d807      	bhi.n	800d030 <HAL_I2C_Init+0x84>
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	4a80      	ldr	r2, [pc, #512]	@ (800d224 <HAL_I2C_Init+0x278>)
 800d024:	4293      	cmp	r3, r2
 800d026:	bf94      	ite	ls
 800d028:	2301      	movls	r3, #1
 800d02a:	2300      	movhi	r3, #0
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	e006      	b.n	800d03e <HAL_I2C_Init+0x92>
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	4a7d      	ldr	r2, [pc, #500]	@ (800d228 <HAL_I2C_Init+0x27c>)
 800d034:	4293      	cmp	r3, r2
 800d036:	bf94      	ite	ls
 800d038:	2301      	movls	r3, #1
 800d03a:	2300      	movhi	r3, #0
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d001      	beq.n	800d046 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	e0e7      	b.n	800d216 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	4a78      	ldr	r2, [pc, #480]	@ (800d22c <HAL_I2C_Init+0x280>)
 800d04a:	fba2 2303 	umull	r2, r3, r2, r3
 800d04e:	0c9b      	lsrs	r3, r3, #18
 800d050:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	68ba      	ldr	r2, [r7, #8]
 800d062:	430a      	orrs	r2, r1
 800d064:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	6a1b      	ldr	r3, [r3, #32]
 800d06c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	4a6a      	ldr	r2, [pc, #424]	@ (800d220 <HAL_I2C_Init+0x274>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d802      	bhi.n	800d080 <HAL_I2C_Init+0xd4>
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	3301      	adds	r3, #1
 800d07e:	e009      	b.n	800d094 <HAL_I2C_Init+0xe8>
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d086:	fb02 f303 	mul.w	r3, r2, r3
 800d08a:	4a69      	ldr	r2, [pc, #420]	@ (800d230 <HAL_I2C_Init+0x284>)
 800d08c:	fba2 2303 	umull	r2, r3, r2, r3
 800d090:	099b      	lsrs	r3, r3, #6
 800d092:	3301      	adds	r3, #1
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	6812      	ldr	r2, [r2, #0]
 800d098:	430b      	orrs	r3, r1
 800d09a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	69db      	ldr	r3, [r3, #28]
 800d0a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800d0a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	495c      	ldr	r1, [pc, #368]	@ (800d220 <HAL_I2C_Init+0x274>)
 800d0b0:	428b      	cmp	r3, r1
 800d0b2:	d819      	bhi.n	800d0e8 <HAL_I2C_Init+0x13c>
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	1e59      	subs	r1, r3, #1
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	005b      	lsls	r3, r3, #1
 800d0be:	fbb1 f3f3 	udiv	r3, r1, r3
 800d0c2:	1c59      	adds	r1, r3, #1
 800d0c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d0c8:	400b      	ands	r3, r1
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00a      	beq.n	800d0e4 <HAL_I2C_Init+0x138>
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	1e59      	subs	r1, r3, #1
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	fbb1 f3f3 	udiv	r3, r1, r3
 800d0dc:	3301      	adds	r3, #1
 800d0de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0e2:	e051      	b.n	800d188 <HAL_I2C_Init+0x1dc>
 800d0e4:	2304      	movs	r3, #4
 800d0e6:	e04f      	b.n	800d188 <HAL_I2C_Init+0x1dc>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	689b      	ldr	r3, [r3, #8]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d111      	bne.n	800d114 <HAL_I2C_Init+0x168>
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	1e58      	subs	r0, r3, #1
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6859      	ldr	r1, [r3, #4]
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	005b      	lsls	r3, r3, #1
 800d0fc:	440b      	add	r3, r1
 800d0fe:	fbb0 f3f3 	udiv	r3, r0, r3
 800d102:	3301      	adds	r3, #1
 800d104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d108:	2b00      	cmp	r3, #0
 800d10a:	bf0c      	ite	eq
 800d10c:	2301      	moveq	r3, #1
 800d10e:	2300      	movne	r3, #0
 800d110:	b2db      	uxtb	r3, r3
 800d112:	e012      	b.n	800d13a <HAL_I2C_Init+0x18e>
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	1e58      	subs	r0, r3, #1
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6859      	ldr	r1, [r3, #4]
 800d11c:	460b      	mov	r3, r1
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	440b      	add	r3, r1
 800d122:	0099      	lsls	r1, r3, #2
 800d124:	440b      	add	r3, r1
 800d126:	fbb0 f3f3 	udiv	r3, r0, r3
 800d12a:	3301      	adds	r3, #1
 800d12c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d130:	2b00      	cmp	r3, #0
 800d132:	bf0c      	ite	eq
 800d134:	2301      	moveq	r3, #1
 800d136:	2300      	movne	r3, #0
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d001      	beq.n	800d142 <HAL_I2C_Init+0x196>
 800d13e:	2301      	movs	r3, #1
 800d140:	e022      	b.n	800d188 <HAL_I2C_Init+0x1dc>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d10e      	bne.n	800d168 <HAL_I2C_Init+0x1bc>
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	1e58      	subs	r0, r3, #1
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6859      	ldr	r1, [r3, #4]
 800d152:	460b      	mov	r3, r1
 800d154:	005b      	lsls	r3, r3, #1
 800d156:	440b      	add	r3, r1
 800d158:	fbb0 f3f3 	udiv	r3, r0, r3
 800d15c:	3301      	adds	r3, #1
 800d15e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d166:	e00f      	b.n	800d188 <HAL_I2C_Init+0x1dc>
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	1e58      	subs	r0, r3, #1
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6859      	ldr	r1, [r3, #4]
 800d170:	460b      	mov	r3, r1
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	440b      	add	r3, r1
 800d176:	0099      	lsls	r1, r3, #2
 800d178:	440b      	add	r3, r1
 800d17a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d17e:	3301      	adds	r3, #1
 800d180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d184:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d188:	6879      	ldr	r1, [r7, #4]
 800d18a:	6809      	ldr	r1, [r1, #0]
 800d18c:	4313      	orrs	r3, r2
 800d18e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	69da      	ldr	r2, [r3, #28]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a1b      	ldr	r3, [r3, #32]
 800d1a2:	431a      	orrs	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	430a      	orrs	r2, r1
 800d1aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800d1b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	6911      	ldr	r1, [r2, #16]
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	68d2      	ldr	r2, [r2, #12]
 800d1c2:	4311      	orrs	r1, r2
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	6812      	ldr	r2, [r2, #0]
 800d1c8:	430b      	orrs	r3, r1
 800d1ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	695a      	ldr	r2, [r3, #20]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	431a      	orrs	r2, r3
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	430a      	orrs	r2, r1
 800d1e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f042 0201 	orr.w	r2, r2, #1
 800d1f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2220      	movs	r2, #32
 800d202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2200      	movs	r2, #0
 800d20a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d214:	2300      	movs	r3, #0
}
 800d216:	4618      	mov	r0, r3
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	000186a0 	.word	0x000186a0
 800d224:	001e847f 	.word	0x001e847f
 800d228:	003d08ff 	.word	0x003d08ff
 800d22c:	431bde83 	.word	0x431bde83
 800d230:	10624dd3 	.word	0x10624dd3

0800d234 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d101      	bne.n	800d246 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800d242:	2301      	movs	r3, #1
 800d244:	e021      	b.n	800d28a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2224      	movs	r2, #36	@ 0x24
 800d24a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f022 0201 	bic.w	r2, r2, #1
 800d25c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 f820 	bl	800d2a4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2200      	movs	r2, #0
 800d26e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2200      	movs	r2, #0
 800d284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d288:	2300      	movs	r3, #0
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800d292:	b480      	push	{r7}
 800d294:	b083      	sub	sp, #12
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800d29a:	bf00      	nop
 800d29c:	370c      	adds	r7, #12
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bc80      	pop	{r7}
 800d2a2:	4770      	bx	lr

0800d2a4 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800d2ac:	bf00      	nop
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bc80      	pop	{r7}
 800d2b4:	4770      	bx	lr

0800d2b6 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800d2b6:	b480      	push	{r7}
 800d2b8:	b083      	sub	sp, #12
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	695b      	ldr	r3, [r3, #20]
 800d2c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2c8:	2b80      	cmp	r3, #128	@ 0x80
 800d2ca:	d103      	bne.n	800d2d4 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	611a      	str	r2, [r3, #16]
  }
}
 800d2d4:	bf00      	nop
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bc80      	pop	{r7}
 800d2dc:	4770      	bx	lr
	...

0800d2e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b088      	sub	sp, #32
 800d2e4:	af02      	add	r7, sp, #8
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	4608      	mov	r0, r1
 800d2ea:	4611      	mov	r1, r2
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	817b      	strh	r3, [r7, #10]
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	813b      	strh	r3, [r7, #8]
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d2fa:	f7fe fd5b 	bl	800bdb4 <HAL_GetTick>
 800d2fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d306:	b2db      	uxtb	r3, r3
 800d308:	2b20      	cmp	r3, #32
 800d30a:	f040 80d9 	bne.w	800d4c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	9300      	str	r3, [sp, #0]
 800d312:	2319      	movs	r3, #25
 800d314:	2201      	movs	r2, #1
 800d316:	496d      	ldr	r1, [pc, #436]	@ (800d4cc <HAL_I2C_Mem_Write+0x1ec>)
 800d318:	68f8      	ldr	r0, [r7, #12]
 800d31a:	f002 f8f7 	bl	800f50c <I2C_WaitOnFlagUntilTimeout>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d001      	beq.n	800d328 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d324:	2302      	movs	r3, #2
 800d326:	e0cc      	b.n	800d4c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d32e:	2b01      	cmp	r3, #1
 800d330:	d101      	bne.n	800d336 <HAL_I2C_Mem_Write+0x56>
 800d332:	2302      	movs	r3, #2
 800d334:	e0c5      	b.n	800d4c2 <HAL_I2C_Mem_Write+0x1e2>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2201      	movs	r2, #1
 800d33a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f003 0301 	and.w	r3, r3, #1
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d007      	beq.n	800d35c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f042 0201 	orr.w	r2, r2, #1
 800d35a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d36a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2221      	movs	r2, #33	@ 0x21
 800d370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2240      	movs	r2, #64	@ 0x40
 800d378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2200      	movs	r2, #0
 800d380:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6a3a      	ldr	r2, [r7, #32]
 800d386:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d38c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d392:	b29a      	uxth	r2, r3
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	4a4d      	ldr	r2, [pc, #308]	@ (800d4d0 <HAL_I2C_Mem_Write+0x1f0>)
 800d39c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d39e:	88f8      	ldrh	r0, [r7, #6]
 800d3a0:	893a      	ldrh	r2, [r7, #8]
 800d3a2:	8979      	ldrh	r1, [r7, #10]
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	9301      	str	r3, [sp, #4]
 800d3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3aa:	9300      	str	r3, [sp, #0]
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	68f8      	ldr	r0, [r7, #12]
 800d3b0:	f001 fe86 	bl	800f0c0 <I2C_RequestMemoryWrite>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d052      	beq.n	800d460 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	e081      	b.n	800d4c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d3be:	697a      	ldr	r2, [r7, #20]
 800d3c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f002 f9bc 	bl	800f740 <I2C_WaitOnTXEFlagUntilTimeout>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00d      	beq.n	800d3ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3d2:	2b04      	cmp	r3, #4
 800d3d4:	d107      	bne.n	800d3e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d3e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	e06b      	b.n	800d4c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3ee:	781a      	ldrb	r2, [r3, #0]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3fa:	1c5a      	adds	r2, r3, #1
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d404:	3b01      	subs	r3, #1
 800d406:	b29a      	uxth	r2, r3
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d410:	b29b      	uxth	r3, r3
 800d412:	3b01      	subs	r3, #1
 800d414:	b29a      	uxth	r2, r3
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	695b      	ldr	r3, [r3, #20]
 800d420:	f003 0304 	and.w	r3, r3, #4
 800d424:	2b04      	cmp	r3, #4
 800d426:	d11b      	bne.n	800d460 <HAL_I2C_Mem_Write+0x180>
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d017      	beq.n	800d460 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d434:	781a      	ldrb	r2, [r3, #0]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d440:	1c5a      	adds	r2, r3, #1
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d44a:	3b01      	subs	r3, #1
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d456:	b29b      	uxth	r3, r3
 800d458:	3b01      	subs	r3, #1
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d464:	2b00      	cmp	r3, #0
 800d466:	d1aa      	bne.n	800d3be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d468:	697a      	ldr	r2, [r7, #20]
 800d46a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d46c:	68f8      	ldr	r0, [r7, #12]
 800d46e:	f002 f9af 	bl	800f7d0 <I2C_WaitOnBTFFlagUntilTimeout>
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d00d      	beq.n	800d494 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d47c:	2b04      	cmp	r3, #4
 800d47e:	d107      	bne.n	800d490 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d48e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d490:	2301      	movs	r3, #1
 800d492:	e016      	b.n	800d4c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d4a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2220      	movs	r2, #32
 800d4a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	e000      	b.n	800d4c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d4c0:	2302      	movs	r3, #2
  }
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3718      	adds	r7, #24
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	00100002 	.word	0x00100002
 800d4d0:	ffff0000 	.word	0xffff0000

0800d4d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b08c      	sub	sp, #48	@ 0x30
 800d4d8:	af02      	add	r7, sp, #8
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	4608      	mov	r0, r1
 800d4de:	4611      	mov	r1, r2
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	817b      	strh	r3, [r7, #10]
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	813b      	strh	r3, [r7, #8]
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d4ee:	f7fe fc61 	bl	800bdb4 <HAL_GetTick>
 800d4f2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2b20      	cmp	r3, #32
 800d4fe:	f040 8208 	bne.w	800d912 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	2319      	movs	r3, #25
 800d508:	2201      	movs	r2, #1
 800d50a:	497b      	ldr	r1, [pc, #492]	@ (800d6f8 <HAL_I2C_Mem_Read+0x224>)
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	f001 fffd 	bl	800f50c <I2C_WaitOnFlagUntilTimeout>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d001      	beq.n	800d51c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d518:	2302      	movs	r3, #2
 800d51a:	e1fb      	b.n	800d914 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d522:	2b01      	cmp	r3, #1
 800d524:	d101      	bne.n	800d52a <HAL_I2C_Mem_Read+0x56>
 800d526:	2302      	movs	r3, #2
 800d528:	e1f4      	b.n	800d914 <HAL_I2C_Mem_Read+0x440>
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2201      	movs	r2, #1
 800d52e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f003 0301 	and.w	r3, r3, #1
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d007      	beq.n	800d550 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f042 0201 	orr.w	r2, r2, #1
 800d54e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	681a      	ldr	r2, [r3, #0]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d55e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2222      	movs	r2, #34	@ 0x22
 800d564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2240      	movs	r2, #64	@ 0x40
 800d56c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2200      	movs	r2, #0
 800d574:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d57a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800d580:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d586:	b29a      	uxth	r2, r3
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	4a5b      	ldr	r2, [pc, #364]	@ (800d6fc <HAL_I2C_Mem_Read+0x228>)
 800d590:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d592:	88f8      	ldrh	r0, [r7, #6]
 800d594:	893a      	ldrh	r2, [r7, #8]
 800d596:	8979      	ldrh	r1, [r7, #10]
 800d598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d59a:	9301      	str	r3, [sp, #4]
 800d59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	f001 fe22 	bl	800f1ec <I2C_RequestMemoryRead>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e1b0      	b.n	800d914 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d113      	bne.n	800d5e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	623b      	str	r3, [r7, #32]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	695b      	ldr	r3, [r3, #20]
 800d5c4:	623b      	str	r3, [r7, #32]
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	699b      	ldr	r3, [r3, #24]
 800d5cc:	623b      	str	r3, [r7, #32]
 800d5ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d5de:	601a      	str	r2, [r3, #0]
 800d5e0:	e184      	b.n	800d8ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d11b      	bne.n	800d622 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d5f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	61fb      	str	r3, [r7, #28]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	695b      	ldr	r3, [r3, #20]
 800d604:	61fb      	str	r3, [r7, #28]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	699b      	ldr	r3, [r3, #24]
 800d60c:	61fb      	str	r3, [r7, #28]
 800d60e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d61e:	601a      	str	r2, [r3, #0]
 800d620:	e164      	b.n	800d8ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d626:	2b02      	cmp	r3, #2
 800d628:	d11b      	bne.n	800d662 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d638:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d648:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d64a:	2300      	movs	r3, #0
 800d64c:	61bb      	str	r3, [r7, #24]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	695b      	ldr	r3, [r3, #20]
 800d654:	61bb      	str	r3, [r7, #24]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	699b      	ldr	r3, [r3, #24]
 800d65c:	61bb      	str	r3, [r7, #24]
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	e144      	b.n	800d8ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d662:	2300      	movs	r3, #0
 800d664:	617b      	str	r3, [r7, #20]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	695b      	ldr	r3, [r3, #20]
 800d66c:	617b      	str	r3, [r7, #20]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	699b      	ldr	r3, [r3, #24]
 800d674:	617b      	str	r3, [r7, #20]
 800d676:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d678:	e138      	b.n	800d8ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d67e:	2b03      	cmp	r3, #3
 800d680:	f200 80f1 	bhi.w	800d866 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d123      	bne.n	800d6d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d68c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d68e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d690:	68f8      	ldr	r0, [r7, #12]
 800d692:	f002 f917 	bl	800f8c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d001      	beq.n	800d6a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d69c:	2301      	movs	r3, #1
 800d69e:	e139      	b.n	800d914 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	691a      	ldr	r2, [r3, #16]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6aa:	b2d2      	uxtb	r2, r2
 800d6ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6b2:	1c5a      	adds	r2, r3, #1
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d6d2:	e10b      	b.n	800d8ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6d8:	2b02      	cmp	r3, #2
 800d6da:	d14e      	bne.n	800d77a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	4906      	ldr	r1, [pc, #24]	@ (800d700 <HAL_I2C_Mem_Read+0x22c>)
 800d6e6:	68f8      	ldr	r0, [r7, #12]
 800d6e8:	f001 ff10 	bl	800f50c <I2C_WaitOnFlagUntilTimeout>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d008      	beq.n	800d704 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e10e      	b.n	800d914 <HAL_I2C_Mem_Read+0x440>
 800d6f6:	bf00      	nop
 800d6f8:	00100002 	.word	0x00100002
 800d6fc:	ffff0000 	.word	0xffff0000
 800d700:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	691a      	ldr	r2, [r3, #16]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d71e:	b2d2      	uxtb	r2, r2
 800d720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d726:	1c5a      	adds	r2, r3, #1
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d730:	3b01      	subs	r3, #1
 800d732:	b29a      	uxth	r2, r3
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	3b01      	subs	r3, #1
 800d740:	b29a      	uxth	r2, r3
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	691a      	ldr	r2, [r3, #16]
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d750:	b2d2      	uxtb	r2, r2
 800d752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d758:	1c5a      	adds	r2, r3, #1
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d762:	3b01      	subs	r3, #1
 800d764:	b29a      	uxth	r2, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d76e:	b29b      	uxth	r3, r3
 800d770:	3b01      	subs	r3, #1
 800d772:	b29a      	uxth	r2, r3
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d778:	e0b8      	b.n	800d8ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d780:	2200      	movs	r2, #0
 800d782:	4966      	ldr	r1, [pc, #408]	@ (800d91c <HAL_I2C_Mem_Read+0x448>)
 800d784:	68f8      	ldr	r0, [r7, #12]
 800d786:	f001 fec1 	bl	800f50c <I2C_WaitOnFlagUntilTimeout>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d001      	beq.n	800d794 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d790:	2301      	movs	r3, #1
 800d792:	e0bf      	b.n	800d914 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d7a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	691a      	ldr	r2, [r3, #16]
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ae:	b2d2      	uxtb	r2, r2
 800d7b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7b6:	1c5a      	adds	r2, r3, #1
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7c0:	3b01      	subs	r3, #1
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	3b01      	subs	r3, #1
 800d7d0:	b29a      	uxth	r2, r3
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d8:	9300      	str	r3, [sp, #0]
 800d7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7dc:	2200      	movs	r2, #0
 800d7de:	494f      	ldr	r1, [pc, #316]	@ (800d91c <HAL_I2C_Mem_Read+0x448>)
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f001 fe93 	bl	800f50c <I2C_WaitOnFlagUntilTimeout>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d001      	beq.n	800d7f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e091      	b.n	800d914 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d7fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	691a      	ldr	r2, [r3, #16]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d80a:	b2d2      	uxtb	r2, r2
 800d80c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d812:	1c5a      	adds	r2, r3, #1
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d81c:	3b01      	subs	r3, #1
 800d81e:	b29a      	uxth	r2, r3
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d828:	b29b      	uxth	r3, r3
 800d82a:	3b01      	subs	r3, #1
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	691a      	ldr	r2, [r3, #16]
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d83c:	b2d2      	uxtb	r2, r2
 800d83e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d844:	1c5a      	adds	r2, r3, #1
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d84e:	3b01      	subs	r3, #1
 800d850:	b29a      	uxth	r2, r3
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	3b01      	subs	r3, #1
 800d85e:	b29a      	uxth	r2, r3
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d864:	e042      	b.n	800d8ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d868:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d86a:	68f8      	ldr	r0, [r7, #12]
 800d86c:	f002 f82a 	bl	800f8c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d001      	beq.n	800d87a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	e04c      	b.n	800d914 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	691a      	ldr	r2, [r3, #16]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d884:	b2d2      	uxtb	r2, r2
 800d886:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d88c:	1c5a      	adds	r2, r3, #1
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d896:	3b01      	subs	r3, #1
 800d898:	b29a      	uxth	r2, r3
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	b29a      	uxth	r2, r3
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	695b      	ldr	r3, [r3, #20]
 800d8b2:	f003 0304 	and.w	r3, r3, #4
 800d8b6:	2b04      	cmp	r3, #4
 800d8b8:	d118      	bne.n	800d8ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	691a      	ldr	r2, [r3, #16]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8c4:	b2d2      	uxtb	r2, r2
 800d8c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8cc:	1c5a      	adds	r2, r3, #1
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	b29a      	uxth	r2, r3
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	3b01      	subs	r3, #1
 800d8e6:	b29a      	uxth	r2, r3
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	f47f aec2 	bne.w	800d67a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2220      	movs	r2, #32
 800d8fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2200      	movs	r2, #0
 800d902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2200      	movs	r2, #0
 800d90a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d90e:	2300      	movs	r3, #0
 800d910:	e000      	b.n	800d914 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d912:	2302      	movs	r3, #2
  }
}
 800d914:	4618      	mov	r0, r3
 800d916:	3728      	adds	r7, #40	@ 0x28
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	00010004 	.word	0x00010004

0800d920 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b088      	sub	sp, #32
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800d928:	2300      	movs	r3, #0
 800d92a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d938:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d940:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d948:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d94a:	7bfb      	ldrb	r3, [r7, #15]
 800d94c:	2b10      	cmp	r3, #16
 800d94e:	d003      	beq.n	800d958 <HAL_I2C_EV_IRQHandler+0x38>
 800d950:	7bfb      	ldrb	r3, [r7, #15]
 800d952:	2b40      	cmp	r3, #64	@ 0x40
 800d954:	f040 80b1 	bne.w	800daba <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	699b      	ldr	r3, [r3, #24]
 800d95e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	695b      	ldr	r3, [r3, #20]
 800d966:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	f003 0301 	and.w	r3, r3, #1
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d10d      	bne.n	800d98e <HAL_I2C_EV_IRQHandler+0x6e>
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800d978:	d003      	beq.n	800d982 <HAL_I2C_EV_IRQHandler+0x62>
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800d980:	d101      	bne.n	800d986 <HAL_I2C_EV_IRQHandler+0x66>
 800d982:	2301      	movs	r3, #1
 800d984:	e000      	b.n	800d988 <HAL_I2C_EV_IRQHandler+0x68>
 800d986:	2300      	movs	r3, #0
 800d988:	2b01      	cmp	r3, #1
 800d98a:	f000 8114 	beq.w	800dbb6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	f003 0301 	and.w	r3, r3, #1
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00b      	beq.n	800d9b0 <HAL_I2C_EV_IRQHandler+0x90>
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d006      	beq.n	800d9b0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f002 f819 	bl	800f9da <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f000 fd70 	bl	800e48e <I2C_Master_SB>
 800d9ae:	e083      	b.n	800dab8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	f003 0308 	and.w	r3, r3, #8
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d008      	beq.n	800d9cc <HAL_I2C_EV_IRQHandler+0xac>
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d003      	beq.n	800d9cc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 fde7 	bl	800e598 <I2C_Master_ADD10>
 800d9ca:	e075      	b.n	800dab8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	f003 0302 	and.w	r3, r3, #2
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d008      	beq.n	800d9e8 <HAL_I2C_EV_IRQHandler+0xc8>
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d003      	beq.n	800d9e8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 fe02 	bl	800e5ea <I2C_Master_ADDR>
 800d9e6:	e067      	b.n	800dab8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800d9e8:	69bb      	ldr	r3, [r7, #24]
 800d9ea:	f003 0304 	and.w	r3, r3, #4
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d036      	beq.n	800da60 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d9fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800da00:	f000 80db 	beq.w	800dbba <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00d      	beq.n	800da2a <HAL_I2C_EV_IRQHandler+0x10a>
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da14:	2b00      	cmp	r3, #0
 800da16:	d008      	beq.n	800da2a <HAL_I2C_EV_IRQHandler+0x10a>
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	f003 0304 	and.w	r3, r3, #4
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d103      	bne.n	800da2a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f9e4 	bl	800ddf0 <I2C_MasterTransmit_TXE>
 800da28:	e046      	b.n	800dab8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	f003 0304 	and.w	r3, r3, #4
 800da30:	2b00      	cmp	r3, #0
 800da32:	f000 80c2 	beq.w	800dbba <HAL_I2C_EV_IRQHandler+0x29a>
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f000 80bc 	beq.w	800dbba <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800da42:	7bbb      	ldrb	r3, [r7, #14]
 800da44:	2b21      	cmp	r3, #33	@ 0x21
 800da46:	d103      	bne.n	800da50 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 fa6d 	bl	800df28 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800da4e:	e0b4      	b.n	800dbba <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800da50:	7bfb      	ldrb	r3, [r7, #15]
 800da52:	2b40      	cmp	r3, #64	@ 0x40
 800da54:	f040 80b1 	bne.w	800dbba <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 fadb 	bl	800e014 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800da5e:	e0ac      	b.n	800dbba <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800da6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800da6e:	f000 80a4 	beq.w	800dbba <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00d      	beq.n	800da98 <HAL_I2C_EV_IRQHandler+0x178>
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da82:	2b00      	cmp	r3, #0
 800da84:	d008      	beq.n	800da98 <HAL_I2C_EV_IRQHandler+0x178>
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	f003 0304 	and.w	r3, r3, #4
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d103      	bne.n	800da98 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 fb57 	bl	800e144 <I2C_MasterReceive_RXNE>
 800da96:	e00f      	b.n	800dab8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	f003 0304 	and.w	r3, r3, #4
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	f000 808b 	beq.w	800dbba <HAL_I2C_EV_IRQHandler+0x29a>
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800daaa:	2b00      	cmp	r3, #0
 800daac:	f000 8085 	beq.w	800dbba <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 fc02 	bl	800e2ba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800dab6:	e080      	b.n	800dbba <HAL_I2C_EV_IRQHandler+0x29a>
 800dab8:	e07f      	b.n	800dbba <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d004      	beq.n	800dacc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	695b      	ldr	r3, [r3, #20]
 800dac8:	61fb      	str	r3, [r7, #28]
 800daca:	e007      	b.n	800dadc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	699b      	ldr	r3, [r3, #24]
 800dad2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	695b      	ldr	r3, [r3, #20]
 800dada:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	f003 0302 	and.w	r3, r3, #2
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d011      	beq.n	800db0a <HAL_I2C_EV_IRQHandler+0x1ea>
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00c      	beq.n	800db0a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d003      	beq.n	800db00 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	699b      	ldr	r3, [r3, #24]
 800dafe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800db00:	69b9      	ldr	r1, [r7, #24]
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 ffbd 	bl	800ea82 <I2C_Slave_ADDR>
 800db08:	e05a      	b.n	800dbc0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	f003 0310 	and.w	r3, r3, #16
 800db10:	2b00      	cmp	r3, #0
 800db12:	d008      	beq.n	800db26 <HAL_I2C_EV_IRQHandler+0x206>
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d003      	beq.n	800db26 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 fff8 	bl	800eb14 <I2C_Slave_STOPF>
 800db24:	e04c      	b.n	800dbc0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800db26:	7bbb      	ldrb	r3, [r7, #14]
 800db28:	2b21      	cmp	r3, #33	@ 0x21
 800db2a:	d002      	beq.n	800db32 <HAL_I2C_EV_IRQHandler+0x212>
 800db2c:	7bbb      	ldrb	r3, [r7, #14]
 800db2e:	2b29      	cmp	r3, #41	@ 0x29
 800db30:	d120      	bne.n	800db74 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d00d      	beq.n	800db58 <HAL_I2C_EV_IRQHandler+0x238>
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db42:	2b00      	cmp	r3, #0
 800db44:	d008      	beq.n	800db58 <HAL_I2C_EV_IRQHandler+0x238>
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	f003 0304 	and.w	r3, r3, #4
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d103      	bne.n	800db58 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 feda 	bl	800e90a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800db56:	e032      	b.n	800dbbe <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	f003 0304 	and.w	r3, r3, #4
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d02d      	beq.n	800dbbe <HAL_I2C_EV_IRQHandler+0x29e>
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d028      	beq.n	800dbbe <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 ff09 	bl	800e984 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800db72:	e024      	b.n	800dbbe <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d00d      	beq.n	800db9a <HAL_I2C_EV_IRQHandler+0x27a>
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db84:	2b00      	cmp	r3, #0
 800db86:	d008      	beq.n	800db9a <HAL_I2C_EV_IRQHandler+0x27a>
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	f003 0304 	and.w	r3, r3, #4
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d103      	bne.n	800db9a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 ff16 	bl	800e9c4 <I2C_SlaveReceive_RXNE>
 800db98:	e012      	b.n	800dbc0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	f003 0304 	and.w	r3, r3, #4
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d00d      	beq.n	800dbc0 <HAL_I2C_EV_IRQHandler+0x2a0>
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d008      	beq.n	800dbc0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 ff46 	bl	800ea40 <I2C_SlaveReceive_BTF>
 800dbb4:	e004      	b.n	800dbc0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800dbb6:	bf00      	nop
 800dbb8:	e002      	b.n	800dbc0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800dbba:	bf00      	nop
 800dbbc:	e000      	b.n	800dbc0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800dbbe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800dbc0:	3720      	adds	r7, #32
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b08a      	sub	sp, #40	@ 0x28
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	695b      	ldr	r3, [r3, #20]
 800dbd4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dbe8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dbea:	6a3b      	ldr	r3, [r7, #32]
 800dbec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00d      	beq.n	800dc10 <HAL_I2C_ER_IRQHandler+0x4a>
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d008      	beq.n	800dc10 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800dbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc00:	f043 0301 	orr.w	r3, r3, #1
 800dc04:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dc0e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dc10:	6a3b      	ldr	r3, [r7, #32]
 800dc12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00d      	beq.n	800dc36 <HAL_I2C_ER_IRQHandler+0x70>
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d008      	beq.n	800dc36 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800dc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc26:	f043 0302 	orr.w	r3, r3, #2
 800dc2a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800dc34:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dc36:	6a3b      	ldr	r3, [r7, #32]
 800dc38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d03e      	beq.n	800dcbe <HAL_I2C_ER_IRQHandler+0xf8>
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d039      	beq.n	800dcbe <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800dc4a:	7efb      	ldrb	r3, [r7, #27]
 800dc4c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc5c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc62:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800dc64:	7ebb      	ldrb	r3, [r7, #26]
 800dc66:	2b20      	cmp	r3, #32
 800dc68:	d112      	bne.n	800dc90 <HAL_I2C_ER_IRQHandler+0xca>
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d10f      	bne.n	800dc90 <HAL_I2C_ER_IRQHandler+0xca>
 800dc70:	7cfb      	ldrb	r3, [r7, #19]
 800dc72:	2b21      	cmp	r3, #33	@ 0x21
 800dc74:	d008      	beq.n	800dc88 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800dc76:	7cfb      	ldrb	r3, [r7, #19]
 800dc78:	2b29      	cmp	r3, #41	@ 0x29
 800dc7a:	d005      	beq.n	800dc88 <HAL_I2C_ER_IRQHandler+0xc2>
 800dc7c:	7cfb      	ldrb	r3, [r7, #19]
 800dc7e:	2b28      	cmp	r3, #40	@ 0x28
 800dc80:	d106      	bne.n	800dc90 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2b21      	cmp	r3, #33	@ 0x21
 800dc86:	d103      	bne.n	800dc90 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f001 f873 	bl	800ed74 <I2C_Slave_AF>
 800dc8e:	e016      	b.n	800dcbe <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800dc98:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc9c:	f043 0304 	orr.w	r3, r3, #4
 800dca0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800dca2:	7efb      	ldrb	r3, [r7, #27]
 800dca4:	2b10      	cmp	r3, #16
 800dca6:	d002      	beq.n	800dcae <HAL_I2C_ER_IRQHandler+0xe8>
 800dca8:	7efb      	ldrb	r3, [r7, #27]
 800dcaa:	2b40      	cmp	r3, #64	@ 0x40
 800dcac:	d107      	bne.n	800dcbe <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dcbc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dcbe:	6a3b      	ldr	r3, [r7, #32]
 800dcc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d00d      	beq.n	800dce4 <HAL_I2C_ER_IRQHandler+0x11e>
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d008      	beq.n	800dce4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800dcd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd4:	f043 0308 	orr.w	r3, r3, #8
 800dcd8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800dce2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800dce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d008      	beq.n	800dcfc <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf0:	431a      	orrs	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f001 f8b0 	bl	800ee5c <I2C_ITError>
  }
}
 800dcfc:	bf00      	nop
 800dcfe:	3728      	adds	r7, #40	@ 0x28
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800dd0c:	bf00      	nop
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bc80      	pop	{r7}
 800dd14:	4770      	bx	lr

0800dd16 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dd16:	b480      	push	{r7}
 800dd18:	b083      	sub	sp, #12
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800dd1e:	bf00      	nop
 800dd20:	370c      	adds	r7, #12
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bc80      	pop	{r7}
 800dd26:	4770      	bx	lr

0800dd28 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800dd30:	bf00      	nop
 800dd32:	370c      	adds	r7, #12
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bc80      	pop	{r7}
 800dd38:	4770      	bx	lr

0800dd3a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	b083      	sub	sp, #12
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800dd42:	bf00      	nop
 800dd44:	370c      	adds	r7, #12
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bc80      	pop	{r7}
 800dd4a:	4770      	bx	lr

0800dd4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	460b      	mov	r3, r1
 800dd56:	70fb      	strb	r3, [r7, #3]
 800dd58:	4613      	mov	r3, r2
 800dd5a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800dd5c:	bf00      	nop
 800dd5e:	370c      	adds	r7, #12
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bc80      	pop	{r7}
 800dd64:	4770      	bx	lr

0800dd66 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dd66:	b480      	push	{r7}
 800dd68:	b083      	sub	sp, #12
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800dd6e:	bf00      	nop
 800dd70:	370c      	adds	r7, #12
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bc80      	pop	{r7}
 800dd76:	4770      	bx	lr

0800dd78 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b083      	sub	sp, #12
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800dd80:	bf00      	nop
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bc80      	pop	{r7}
 800dd88:	4770      	bx	lr

0800dd8a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dd8a:	b480      	push	{r7}
 800dd8c:	b083      	sub	sp, #12
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800dd92:	bf00      	nop
 800dd94:	370c      	adds	r7, #12
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bc80      	pop	{r7}
 800dd9a:	4770      	bx	lr

0800dd9c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800dda4:	bf00      	nop
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bc80      	pop	{r7}
 800ddac:	4770      	bx	lr

0800ddae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ddae:	b480      	push	{r7}
 800ddb0:	b083      	sub	sp, #12
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ddb6:	bf00      	nop
 800ddb8:	370c      	adds	r7, #12
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bc80      	pop	{r7}
 800ddbe:	4770      	bx	lr

0800ddc0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ddce:	b2db      	uxtb	r3, r3
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bc80      	pop	{r7}
 800ddd8:	4770      	bx	lr

0800ddda <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800ddda:	b480      	push	{r7}
 800dddc:	b083      	sub	sp, #12
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	370c      	adds	r7, #12
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bc80      	pop	{r7}
 800ddee:	4770      	bx	lr

0800ddf0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ddfe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800de06:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de0c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de12:	2b00      	cmp	r3, #0
 800de14:	d150      	bne.n	800deb8 <I2C_MasterTransmit_TXE+0xc8>
 800de16:	7bfb      	ldrb	r3, [r7, #15]
 800de18:	2b21      	cmp	r3, #33	@ 0x21
 800de1a:	d14d      	bne.n	800deb8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	2b08      	cmp	r3, #8
 800de20:	d01d      	beq.n	800de5e <I2C_MasterTransmit_TXE+0x6e>
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	2b20      	cmp	r3, #32
 800de26:	d01a      	beq.n	800de5e <I2C_MasterTransmit_TXE+0x6e>
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800de2e:	d016      	beq.n	800de5e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	685a      	ldr	r2, [r3, #4]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800de3e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2211      	movs	r2, #17
 800de44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2220      	movs	r2, #32
 800de52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f7ff ff54 	bl	800dd04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800de5c:	e060      	b.n	800df20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	685a      	ldr	r2, [r3, #4]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800de6c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800de7c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2220      	movs	r2, #32
 800de88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800de92:	b2db      	uxtb	r3, r3
 800de94:	2b40      	cmp	r3, #64	@ 0x40
 800de96:	d107      	bne.n	800dea8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7ff ff69 	bl	800dd78 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800dea6:	e03b      	b.n	800df20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2200      	movs	r2, #0
 800deac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f7ff ff27 	bl	800dd04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800deb6:	e033      	b.n	800df20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800deb8:	7bfb      	ldrb	r3, [r7, #15]
 800deba:	2b21      	cmp	r3, #33	@ 0x21
 800debc:	d005      	beq.n	800deca <I2C_MasterTransmit_TXE+0xda>
 800debe:	7bbb      	ldrb	r3, [r7, #14]
 800dec0:	2b40      	cmp	r3, #64	@ 0x40
 800dec2:	d12d      	bne.n	800df20 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800dec4:	7bfb      	ldrb	r3, [r7, #15]
 800dec6:	2b22      	cmp	r3, #34	@ 0x22
 800dec8:	d12a      	bne.n	800df20 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dece:	b29b      	uxth	r3, r3
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d108      	bne.n	800dee6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	685a      	ldr	r2, [r3, #4]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dee2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800dee4:	e01c      	b.n	800df20 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800deec:	b2db      	uxtb	r3, r3
 800deee:	2b40      	cmp	r3, #64	@ 0x40
 800def0:	d103      	bne.n	800defa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 f88e 	bl	800e014 <I2C_MemoryTransmit_TXE_BTF>
}
 800def8:	e012      	b.n	800df20 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800defe:	781a      	ldrb	r2, [r3, #0]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df0a:	1c5a      	adds	r2, r3, #1
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df14:	b29b      	uxth	r3, r3
 800df16:	3b01      	subs	r3, #1
 800df18:	b29a      	uxth	r2, r3
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800df1e:	e7ff      	b.n	800df20 <I2C_MasterTransmit_TXE+0x130>
 800df20:	bf00      	nop
 800df22:	3710      	adds	r7, #16
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df34:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	2b21      	cmp	r3, #33	@ 0x21
 800df40:	d164      	bne.n	800e00c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df46:	b29b      	uxth	r3, r3
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d012      	beq.n	800df72 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df50:	781a      	ldrb	r2, [r3, #0]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df5c:	1c5a      	adds	r2, r3, #1
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df66:	b29b      	uxth	r3, r3
 800df68:	3b01      	subs	r3, #1
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800df70:	e04c      	b.n	800e00c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2b08      	cmp	r3, #8
 800df76:	d01d      	beq.n	800dfb4 <I2C_MasterTransmit_BTF+0x8c>
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2b20      	cmp	r3, #32
 800df7c:	d01a      	beq.n	800dfb4 <I2C_MasterTransmit_BTF+0x8c>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800df84:	d016      	beq.n	800dfb4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800df94:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2211      	movs	r2, #17
 800df9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2220      	movs	r2, #32
 800dfa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7ff fea9 	bl	800dd04 <HAL_I2C_MasterTxCpltCallback>
}
 800dfb2:	e02b      	b.n	800e00c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	685a      	ldr	r2, [r3, #4]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800dfc2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	681a      	ldr	r2, [r3, #0]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dfd2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2220      	movs	r2, #32
 800dfde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	2b40      	cmp	r3, #64	@ 0x40
 800dfec:	d107      	bne.n	800dffe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2200      	movs	r2, #0
 800dff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7ff febe 	bl	800dd78 <HAL_I2C_MemTxCpltCallback>
}
 800dffc:	e006      	b.n	800e00c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f7ff fe7c 	bl	800dd04 <HAL_I2C_MasterTxCpltCallback>
}
 800e00c:	bf00      	nop
 800e00e:	3710      	adds	r7, #16
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e022:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d11d      	bne.n	800e068 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e030:	2b01      	cmp	r3, #1
 800e032:	d10b      	bne.n	800e04c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e038:	b2da      	uxtb	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e044:	1c9a      	adds	r2, r3, #2
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800e04a:	e077      	b.n	800e13c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e050:	b29b      	uxth	r3, r3
 800e052:	121b      	asrs	r3, r3, #8
 800e054:	b2da      	uxtb	r2, r3
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e060:	1c5a      	adds	r2, r3, #1
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800e066:	e069      	b.n	800e13c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d10b      	bne.n	800e088 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e074:	b2da      	uxtb	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e080:	1c5a      	adds	r2, r3, #1
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800e086:	e059      	b.n	800e13c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e08c:	2b02      	cmp	r3, #2
 800e08e:	d152      	bne.n	800e136 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800e090:	7bfb      	ldrb	r3, [r7, #15]
 800e092:	2b22      	cmp	r3, #34	@ 0x22
 800e094:	d10d      	bne.n	800e0b2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e0a4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0aa:	1c5a      	adds	r2, r3, #1
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800e0b0:	e044      	b.n	800e13c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d015      	beq.n	800e0e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800e0bc:	7bfb      	ldrb	r3, [r7, #15]
 800e0be:	2b21      	cmp	r3, #33	@ 0x21
 800e0c0:	d112      	bne.n	800e0e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0c6:	781a      	ldrb	r2, [r3, #0]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0d2:	1c5a      	adds	r2, r3, #1
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	b29a      	uxth	r2, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800e0e6:	e029      	b.n	800e13c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d124      	bne.n	800e13c <I2C_MemoryTransmit_TXE_BTF+0x128>
 800e0f2:	7bfb      	ldrb	r3, [r7, #15]
 800e0f4:	2b21      	cmp	r3, #33	@ 0x21
 800e0f6:	d121      	bne.n	800e13c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	685a      	ldr	r2, [r3, #4]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800e106:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e116:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2200      	movs	r2, #0
 800e11c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2220      	movs	r2, #32
 800e122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2200      	movs	r2, #0
 800e12a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f7ff fe22 	bl	800dd78 <HAL_I2C_MemTxCpltCallback>
}
 800e134:	e002      	b.n	800e13c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f7ff f8bd 	bl	800d2b6 <I2C_Flush_DR>
}
 800e13c:	bf00      	nop
 800e13e:	3710      	adds	r7, #16
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e152:	b2db      	uxtb	r3, r3
 800e154:	2b22      	cmp	r3, #34	@ 0x22
 800e156:	f040 80ac 	bne.w	800e2b2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e15e:	b29b      	uxth	r3, r3
 800e160:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2b03      	cmp	r3, #3
 800e166:	d921      	bls.n	800e1ac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	691a      	ldr	r2, [r3, #16]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e172:	b2d2      	uxtb	r2, r2
 800e174:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e17a:	1c5a      	adds	r2, r3, #1
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e184:	b29b      	uxth	r3, r3
 800e186:	3b01      	subs	r3, #1
 800e188:	b29a      	uxth	r2, r3
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e192:	b29b      	uxth	r3, r3
 800e194:	2b03      	cmp	r3, #3
 800e196:	f040 808c 	bne.w	800e2b2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	685a      	ldr	r2, [r3, #4]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1a8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800e1aa:	e082      	b.n	800e2b2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b0:	2b02      	cmp	r3, #2
 800e1b2:	d075      	beq.n	800e2a0 <I2C_MasterReceive_RXNE+0x15c>
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d002      	beq.n	800e1c0 <I2C_MasterReceive_RXNE+0x7c>
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d16f      	bne.n	800e2a0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f001 fb4d 	bl	800f860 <I2C_WaitOnSTOPRequestThroughIT>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d142      	bne.n	800e252 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	681a      	ldr	r2, [r3, #0]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1da:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	685a      	ldr	r2, [r3, #4]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800e1ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	691a      	ldr	r2, [r3, #16]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1f6:	b2d2      	uxtb	r2, r2
 800e1f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1fe:	1c5a      	adds	r2, r3, #1
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e208:	b29b      	uxth	r3, r3
 800e20a:	3b01      	subs	r3, #1
 800e20c:	b29a      	uxth	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2220      	movs	r2, #32
 800e216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e220:	b2db      	uxtb	r3, r3
 800e222:	2b40      	cmp	r3, #64	@ 0x40
 800e224:	d10a      	bne.n	800e23c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2200      	movs	r2, #0
 800e232:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f7ff fda8 	bl	800dd8a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800e23a:	e03a      	b.n	800e2b2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2200      	movs	r2, #0
 800e240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2212      	movs	r2, #18
 800e248:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f7ff fd63 	bl	800dd16 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800e250:	e02f      	b.n	800e2b2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	685a      	ldr	r2, [r3, #4]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800e260:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	691a      	ldr	r2, [r3, #16]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e26c:	b2d2      	uxtb	r2, r2
 800e26e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e274:	1c5a      	adds	r2, r3, #1
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e27e:	b29b      	uxth	r3, r3
 800e280:	3b01      	subs	r3, #1
 800e282:	b29a      	uxth	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2220      	movs	r2, #32
 800e28c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f7ff fd7f 	bl	800dd9c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800e29e:	e008      	b.n	800e2b2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	685a      	ldr	r2, [r3, #4]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e2ae:	605a      	str	r2, [r3, #4]
}
 800e2b0:	e7ff      	b.n	800e2b2 <I2C_MasterReceive_RXNE+0x16e>
 800e2b2:	bf00      	nop
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b084      	sub	sp, #16
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2c6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	2b04      	cmp	r3, #4
 800e2d0:	d11b      	bne.n	800e30a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	685a      	ldr	r2, [r3, #4]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e2e0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	691a      	ldr	r2, [r3, #16]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2ec:	b2d2      	uxtb	r2, r2
 800e2ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2f4:	1c5a      	adds	r2, r3, #1
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	3b01      	subs	r3, #1
 800e302:	b29a      	uxth	r2, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800e308:	e0bd      	b.n	800e486 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e30e:	b29b      	uxth	r3, r3
 800e310:	2b03      	cmp	r3, #3
 800e312:	d129      	bne.n	800e368 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	685a      	ldr	r2, [r3, #4]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e322:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2b04      	cmp	r3, #4
 800e328:	d00a      	beq.n	800e340 <I2C_MasterReceive_BTF+0x86>
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2b02      	cmp	r3, #2
 800e32e:	d007      	beq.n	800e340 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e33e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	691a      	ldr	r2, [r3, #16]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e34a:	b2d2      	uxtb	r2, r2
 800e34c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e352:	1c5a      	adds	r2, r3, #1
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	3b01      	subs	r3, #1
 800e360:	b29a      	uxth	r2, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800e366:	e08e      	b.n	800e486 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	2b02      	cmp	r3, #2
 800e370:	d176      	bne.n	800e460 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2b01      	cmp	r3, #1
 800e376:	d002      	beq.n	800e37e <I2C_MasterReceive_BTF+0xc4>
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2b10      	cmp	r3, #16
 800e37c:	d108      	bne.n	800e390 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e38c:	601a      	str	r2, [r3, #0]
 800e38e:	e019      	b.n	800e3c4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2b04      	cmp	r3, #4
 800e394:	d002      	beq.n	800e39c <I2C_MasterReceive_BTF+0xe2>
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2b02      	cmp	r3, #2
 800e39a:	d108      	bne.n	800e3ae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e3aa:	601a      	str	r2, [r3, #0]
 800e3ac:	e00a      	b.n	800e3c4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	2b10      	cmp	r3, #16
 800e3b2:	d007      	beq.n	800e3c4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e3c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	691a      	ldr	r2, [r3, #16]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ce:	b2d2      	uxtb	r2, r2
 800e3d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3d6:	1c5a      	adds	r2, r3, #1
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	3b01      	subs	r3, #1
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	691a      	ldr	r2, [r3, #16]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3f4:	b2d2      	uxtb	r2, r2
 800e3f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3fc:	1c5a      	adds	r2, r3, #1
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e406:	b29b      	uxth	r3, r3
 800e408:	3b01      	subs	r3, #1
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	685a      	ldr	r2, [r3, #4]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800e41e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2220      	movs	r2, #32
 800e424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e42e:	b2db      	uxtb	r3, r3
 800e430:	2b40      	cmp	r3, #64	@ 0x40
 800e432:	d10a      	bne.n	800e44a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f7ff fca1 	bl	800dd8a <HAL_I2C_MemRxCpltCallback>
}
 800e448:	e01d      	b.n	800e486 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2200      	movs	r2, #0
 800e44e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2212      	movs	r2, #18
 800e456:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f7ff fc5c 	bl	800dd16 <HAL_I2C_MasterRxCpltCallback>
}
 800e45e:	e012      	b.n	800e486 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	691a      	ldr	r2, [r3, #16]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e46a:	b2d2      	uxtb	r2, r2
 800e46c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e472:	1c5a      	adds	r2, r3, #1
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e47c:	b29b      	uxth	r3, r3
 800e47e:	3b01      	subs	r3, #1
 800e480:	b29a      	uxth	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800e486:	bf00      	nop
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800e48e:	b480      	push	{r7}
 800e490:	b083      	sub	sp, #12
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	2b40      	cmp	r3, #64	@ 0x40
 800e4a0:	d117      	bne.n	800e4d2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d109      	bne.n	800e4be <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e4ba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800e4bc:	e067      	b.n	800e58e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	f043 0301 	orr.w	r3, r3, #1
 800e4c8:	b2da      	uxtb	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	611a      	str	r2, [r3, #16]
}
 800e4d0:	e05d      	b.n	800e58e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	691b      	ldr	r3, [r3, #16]
 800e4d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4da:	d133      	bne.n	800e544 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	2b21      	cmp	r3, #33	@ 0x21
 800e4e6:	d109      	bne.n	800e4fc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e4f8:	611a      	str	r2, [r3, #16]
 800e4fa:	e008      	b.n	800e50e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e500:	b2db      	uxtb	r3, r3
 800e502:	f043 0301 	orr.w	r3, r3, #1
 800e506:	b2da      	uxtb	r2, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e512:	2b00      	cmp	r3, #0
 800e514:	d004      	beq.n	800e520 <I2C_Master_SB+0x92>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d108      	bne.n	800e532 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e524:	2b00      	cmp	r3, #0
 800e526:	d032      	beq.n	800e58e <I2C_Master_SB+0x100>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d02d      	beq.n	800e58e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	685a      	ldr	r2, [r3, #4]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e540:	605a      	str	r2, [r3, #4]
}
 800e542:	e024      	b.n	800e58e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d10e      	bne.n	800e56a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e550:	b29b      	uxth	r3, r3
 800e552:	11db      	asrs	r3, r3, #7
 800e554:	b2db      	uxtb	r3, r3
 800e556:	f003 0306 	and.w	r3, r3, #6
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	f063 030f 	orn	r3, r3, #15
 800e560:	b2da      	uxtb	r2, r3
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	611a      	str	r2, [r3, #16]
}
 800e568:	e011      	b.n	800e58e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d10d      	bne.n	800e58e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e576:	b29b      	uxth	r3, r3
 800e578:	11db      	asrs	r3, r3, #7
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	f003 0306 	and.w	r3, r3, #6
 800e580:	b2db      	uxtb	r3, r3
 800e582:	f063 030e 	orn	r3, r3, #14
 800e586:	b2da      	uxtb	r2, r3
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	611a      	str	r2, [r3, #16]
}
 800e58e:	bf00      	nop
 800e590:	370c      	adds	r7, #12
 800e592:	46bd      	mov	sp, r7
 800e594:	bc80      	pop	{r7}
 800e596:	4770      	bx	lr

0800e598 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5a4:	b2da      	uxtb	r2, r3
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d004      	beq.n	800e5be <I2C_Master_ADD10+0x26>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d108      	bne.n	800e5d0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d00c      	beq.n	800e5e0 <I2C_Master_ADD10+0x48>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d007      	beq.n	800e5e0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	685a      	ldr	r2, [r3, #4]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e5de:	605a      	str	r2, [r3, #4]
  }
}
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bc80      	pop	{r7}
 800e5e8:	4770      	bx	lr

0800e5ea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800e5ea:	b480      	push	{r7}
 800e5ec:	b091      	sub	sp, #68	@ 0x44
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e5f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e600:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e606:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	2b22      	cmp	r3, #34	@ 0x22
 800e612:	f040 8169 	bne.w	800e8e8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d10f      	bne.n	800e63e <I2C_Master_ADDR+0x54>
 800e61e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e622:	2b40      	cmp	r3, #64	@ 0x40
 800e624:	d10b      	bne.n	800e63e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e626:	2300      	movs	r3, #0
 800e628:	633b      	str	r3, [r7, #48]	@ 0x30
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	695b      	ldr	r3, [r3, #20]
 800e630:	633b      	str	r3, [r7, #48]	@ 0x30
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	699b      	ldr	r3, [r3, #24]
 800e638:	633b      	str	r3, [r7, #48]	@ 0x30
 800e63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e63c:	e160      	b.n	800e900 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e642:	2b00      	cmp	r3, #0
 800e644:	d11d      	bne.n	800e682 <I2C_Master_ADDR+0x98>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	691b      	ldr	r3, [r3, #16]
 800e64a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e64e:	d118      	bne.n	800e682 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e650:	2300      	movs	r3, #0
 800e652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	695b      	ldr	r3, [r3, #20]
 800e65a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	699b      	ldr	r3, [r3, #24]
 800e662:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e674:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e67a:	1c5a      	adds	r2, r3, #1
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	651a      	str	r2, [r3, #80]	@ 0x50
 800e680:	e13e      	b.n	800e900 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e686:	b29b      	uxth	r3, r3
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d113      	bne.n	800e6b4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e68c:	2300      	movs	r3, #0
 800e68e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	695b      	ldr	r3, [r3, #20]
 800e696:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	699b      	ldr	r3, [r3, #24]
 800e69e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e6b0:	601a      	str	r2, [r3, #0]
 800e6b2:	e115      	b.n	800e8e0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	2b01      	cmp	r3, #1
 800e6bc:	f040 808a 	bne.w	800e7d4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e6c6:	d137      	bne.n	800e738 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e6d6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e6e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e6e6:	d113      	bne.n	800e710 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e6f6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	695b      	ldr	r3, [r3, #20]
 800e702:	627b      	str	r3, [r7, #36]	@ 0x24
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	699b      	ldr	r3, [r3, #24]
 800e70a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e70e:	e0e7      	b.n	800e8e0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e710:	2300      	movs	r3, #0
 800e712:	623b      	str	r3, [r7, #32]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	695b      	ldr	r3, [r3, #20]
 800e71a:	623b      	str	r3, [r7, #32]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	699b      	ldr	r3, [r3, #24]
 800e722:	623b      	str	r3, [r7, #32]
 800e724:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	681a      	ldr	r2, [r3, #0]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e734:	601a      	str	r2, [r3, #0]
 800e736:	e0d3      	b.n	800e8e0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800e738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e73a:	2b08      	cmp	r3, #8
 800e73c:	d02e      	beq.n	800e79c <I2C_Master_ADDR+0x1b2>
 800e73e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e740:	2b20      	cmp	r3, #32
 800e742:	d02b      	beq.n	800e79c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800e744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e746:	2b12      	cmp	r3, #18
 800e748:	d102      	bne.n	800e750 <I2C_Master_ADDR+0x166>
 800e74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d125      	bne.n	800e79c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e752:	2b04      	cmp	r3, #4
 800e754:	d00e      	beq.n	800e774 <I2C_Master_ADDR+0x18a>
 800e756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e758:	2b02      	cmp	r3, #2
 800e75a:	d00b      	beq.n	800e774 <I2C_Master_ADDR+0x18a>
 800e75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e75e:	2b10      	cmp	r3, #16
 800e760:	d008      	beq.n	800e774 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	681a      	ldr	r2, [r3, #0]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e770:	601a      	str	r2, [r3, #0]
 800e772:	e007      	b.n	800e784 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	681a      	ldr	r2, [r3, #0]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e782:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e784:	2300      	movs	r3, #0
 800e786:	61fb      	str	r3, [r7, #28]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	695b      	ldr	r3, [r3, #20]
 800e78e:	61fb      	str	r3, [r7, #28]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	699b      	ldr	r3, [r3, #24]
 800e796:	61fb      	str	r3, [r7, #28]
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	e0a1      	b.n	800e8e0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	681a      	ldr	r2, [r3, #0]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e7aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	61bb      	str	r3, [r7, #24]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	695b      	ldr	r3, [r3, #20]
 800e7b6:	61bb      	str	r3, [r7, #24]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	699b      	ldr	r3, [r3, #24]
 800e7be:	61bb      	str	r3, [r7, #24]
 800e7c0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e7d0:	601a      	str	r2, [r3, #0]
 800e7d2:	e085      	b.n	800e8e0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	2b02      	cmp	r3, #2
 800e7dc:	d14d      	bne.n	800e87a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e0:	2b04      	cmp	r3, #4
 800e7e2:	d016      	beq.n	800e812 <I2C_Master_ADDR+0x228>
 800e7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e6:	2b02      	cmp	r3, #2
 800e7e8:	d013      	beq.n	800e812 <I2C_Master_ADDR+0x228>
 800e7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7ec:	2b10      	cmp	r3, #16
 800e7ee:	d010      	beq.n	800e812 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	681a      	ldr	r2, [r3, #0]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e7fe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e80e:	601a      	str	r2, [r3, #0]
 800e810:	e007      	b.n	800e822 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e820:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e82c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e830:	d117      	bne.n	800e862 <I2C_Master_ADDR+0x278>
 800e832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e834:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e838:	d00b      	beq.n	800e852 <I2C_Master_ADDR+0x268>
 800e83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d008      	beq.n	800e852 <I2C_Master_ADDR+0x268>
 800e840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e842:	2b08      	cmp	r3, #8
 800e844:	d005      	beq.n	800e852 <I2C_Master_ADDR+0x268>
 800e846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e848:	2b10      	cmp	r3, #16
 800e84a:	d002      	beq.n	800e852 <I2C_Master_ADDR+0x268>
 800e84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e84e:	2b20      	cmp	r3, #32
 800e850:	d107      	bne.n	800e862 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	685a      	ldr	r2, [r3, #4]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e860:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e862:	2300      	movs	r3, #0
 800e864:	617b      	str	r3, [r7, #20]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	695b      	ldr	r3, [r3, #20]
 800e86c:	617b      	str	r3, [r7, #20]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	699b      	ldr	r3, [r3, #24]
 800e874:	617b      	str	r3, [r7, #20]
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	e032      	b.n	800e8e0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e888:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e898:	d117      	bne.n	800e8ca <I2C_Master_ADDR+0x2e0>
 800e89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e89c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e8a0:	d00b      	beq.n	800e8ba <I2C_Master_ADDR+0x2d0>
 800e8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d008      	beq.n	800e8ba <I2C_Master_ADDR+0x2d0>
 800e8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8aa:	2b08      	cmp	r3, #8
 800e8ac:	d005      	beq.n	800e8ba <I2C_Master_ADDR+0x2d0>
 800e8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8b0:	2b10      	cmp	r3, #16
 800e8b2:	d002      	beq.n	800e8ba <I2C_Master_ADDR+0x2d0>
 800e8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8b6:	2b20      	cmp	r3, #32
 800e8b8:	d107      	bne.n	800e8ca <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	685a      	ldr	r2, [r3, #4]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e8c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	613b      	str	r3, [r7, #16]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	695b      	ldr	r3, [r3, #20]
 800e8d4:	613b      	str	r3, [r7, #16]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	699b      	ldr	r3, [r3, #24]
 800e8dc:	613b      	str	r3, [r7, #16]
 800e8de:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800e8e6:	e00b      	b.n	800e900 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	60fb      	str	r3, [r7, #12]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	695b      	ldr	r3, [r3, #20]
 800e8f2:	60fb      	str	r3, [r7, #12]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	699b      	ldr	r3, [r3, #24]
 800e8fa:	60fb      	str	r3, [r7, #12]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
}
 800e8fe:	e7ff      	b.n	800e900 <I2C_Master_ADDR+0x316>
 800e900:	bf00      	nop
 800e902:	3744      	adds	r7, #68	@ 0x44
 800e904:	46bd      	mov	sp, r7
 800e906:	bc80      	pop	{r7}
 800e908:	4770      	bx	lr

0800e90a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b084      	sub	sp, #16
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e918:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e91e:	b29b      	uxth	r3, r3
 800e920:	2b00      	cmp	r3, #0
 800e922:	d02b      	beq.n	800e97c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e928:	781a      	ldrb	r2, [r3, #0]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e934:	1c5a      	adds	r2, r3, #1
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e93e:	b29b      	uxth	r3, r3
 800e940:	3b01      	subs	r3, #1
 800e942:	b29a      	uxth	r2, r3
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e94c:	b29b      	uxth	r3, r3
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d114      	bne.n	800e97c <I2C_SlaveTransmit_TXE+0x72>
 800e952:	7bfb      	ldrb	r3, [r7, #15]
 800e954:	2b29      	cmp	r3, #41	@ 0x29
 800e956:	d111      	bne.n	800e97c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	685a      	ldr	r2, [r3, #4]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e966:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2221      	movs	r2, #33	@ 0x21
 800e96c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2228      	movs	r2, #40	@ 0x28
 800e972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f7ff f9d6 	bl	800dd28 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e97c:	bf00      	nop
 800e97e:	3710      	adds	r7, #16
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e990:	b29b      	uxth	r3, r3
 800e992:	2b00      	cmp	r3, #0
 800e994:	d011      	beq.n	800e9ba <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e99a:	781a      	ldrb	r2, [r3, #0]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9a6:	1c5a      	adds	r2, r3, #1
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	3b01      	subs	r3, #1
 800e9b4:	b29a      	uxth	r2, r3
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800e9ba:	bf00      	nop
 800e9bc:	370c      	adds	r7, #12
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bc80      	pop	{r7}
 800e9c2:	4770      	bx	lr

0800e9c4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e9d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d02c      	beq.n	800ea38 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	691a      	ldr	r2, [r3, #16]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9e8:	b2d2      	uxtb	r2, r2
 800e9ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9f0:	1c5a      	adds	r2, r3, #1
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d114      	bne.n	800ea38 <I2C_SlaveReceive_RXNE+0x74>
 800ea0e:	7bfb      	ldrb	r3, [r7, #15]
 800ea10:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea12:	d111      	bne.n	800ea38 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	685a      	ldr	r2, [r3, #4]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea22:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2222      	movs	r2, #34	@ 0x22
 800ea28:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2228      	movs	r2, #40	@ 0x28
 800ea2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f7ff f981 	bl	800dd3a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800ea38:	bf00      	nop
 800ea3a:	3710      	adds	r7, #16
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d012      	beq.n	800ea78 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	691a      	ldr	r2, [r3, #16]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea5c:	b2d2      	uxtb	r2, r2
 800ea5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea64:	1c5a      	adds	r2, r3, #1
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	3b01      	subs	r3, #1
 800ea72:	b29a      	uxth	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800ea78:	bf00      	nop
 800ea7a:	370c      	adds	r7, #12
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bc80      	pop	{r7}
 800ea80:	4770      	bx	lr

0800ea82 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b084      	sub	sp, #16
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
 800ea8a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ea9c:	2b28      	cmp	r3, #40	@ 0x28
 800ea9e:	d125      	bne.n	800eaec <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	685a      	ldr	r2, [r3, #4]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eaae:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	f003 0304 	and.w	r3, r3, #4
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d101      	bne.n	800eabe <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800eaba:	2301      	movs	r3, #1
 800eabc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d103      	bne.n	800ead0 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	81bb      	strh	r3, [r7, #12]
 800eace:	e002      	b.n	800ead6 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	699b      	ldr	r3, [r3, #24]
 800ead4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800eade:	89ba      	ldrh	r2, [r7, #12]
 800eae0:	7bfb      	ldrb	r3, [r7, #15]
 800eae2:	4619      	mov	r1, r3
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f7ff f931 	bl	800dd4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800eaea:	e00e      	b.n	800eb0a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800eaec:	2300      	movs	r3, #0
 800eaee:	60bb      	str	r3, [r7, #8]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	695b      	ldr	r3, [r3, #20]
 800eaf6:	60bb      	str	r3, [r7, #8]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	699b      	ldr	r3, [r3, #24]
 800eafe:	60bb      	str	r3, [r7, #8]
 800eb00:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2200      	movs	r2, #0
 800eb06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800eb0a:	bf00      	nop
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
	...

0800eb14 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb22:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	685a      	ldr	r2, [r3, #4]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800eb32:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800eb34:	2300      	movs	r3, #0
 800eb36:	60bb      	str	r3, [r7, #8]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	695b      	ldr	r3, [r3, #20]
 800eb3e:	60bb      	str	r3, [r7, #8]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f042 0201 	orr.w	r2, r2, #1
 800eb4e:	601a      	str	r2, [r3, #0]
 800eb50:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eb60:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eb6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eb70:	d172      	bne.n	800ec58 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800eb72:	7bfb      	ldrb	r3, [r7, #15]
 800eb74:	2b22      	cmp	r3, #34	@ 0x22
 800eb76:	d002      	beq.n	800eb7e <I2C_Slave_STOPF+0x6a>
 800eb78:	7bfb      	ldrb	r3, [r7, #15]
 800eb7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb7c:	d135      	bne.n	800ebea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	b29a      	uxth	r2, r3
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d005      	beq.n	800eba2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb9a:	f043 0204 	orr.w	r2, r3, #4
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	685a      	ldr	r2, [r3, #4]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ebb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7fd ff20 	bl	800c9fc <HAL_DMA_GetState>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	d049      	beq.n	800ec56 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebc6:	4a69      	ldr	r2, [pc, #420]	@ (800ed6c <I2C_Slave_STOPF+0x258>)
 800ebc8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7fd fed3 	bl	800c97a <HAL_DMA_Abort_IT>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d03d      	beq.n	800ec56 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ebe4:	4610      	mov	r0, r2
 800ebe6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ebe8:	e035      	b.n	800ec56 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d005      	beq.n	800ec0e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec06:	f043 0204 	orr.w	r2, r3, #4
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	685a      	ldr	r2, [r3, #4]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ec1c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fd feea 	bl	800c9fc <HAL_DMA_GetState>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d014      	beq.n	800ec58 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec32:	4a4e      	ldr	r2, [pc, #312]	@ (800ed6c <I2C_Slave_STOPF+0x258>)
 800ec34:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fd fe9d 	bl	800c97a <HAL_DMA_Abort_IT>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d008      	beq.n	800ec58 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ec50:	4610      	mov	r0, r2
 800ec52:	4798      	blx	r3
 800ec54:	e000      	b.n	800ec58 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ec56:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec5c:	b29b      	uxth	r3, r3
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d03e      	beq.n	800ece0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	695b      	ldr	r3, [r3, #20]
 800ec68:	f003 0304 	and.w	r3, r3, #4
 800ec6c:	2b04      	cmp	r3, #4
 800ec6e:	d112      	bne.n	800ec96 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	691a      	ldr	r2, [r3, #16]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec7a:	b2d2      	uxtb	r2, r2
 800ec7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec82:	1c5a      	adds	r2, r3, #1
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	b29a      	uxth	r2, r3
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	695b      	ldr	r3, [r3, #20]
 800ec9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eca0:	2b40      	cmp	r3, #64	@ 0x40
 800eca2:	d112      	bne.n	800ecca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	691a      	ldr	r2, [r3, #16]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecae:	b2d2      	uxtb	r2, r2
 800ecb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecb6:	1c5a      	adds	r2, r3, #1
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	3b01      	subs	r3, #1
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d005      	beq.n	800ece0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecd8:	f043 0204 	orr.w	r2, r3, #4
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d003      	beq.n	800ecf0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 f8b7 	bl	800ee5c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800ecee:	e039      	b.n	800ed64 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ecf0:	7bfb      	ldrb	r3, [r7, #15]
 800ecf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecf4:	d109      	bne.n	800ed0a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2228      	movs	r2, #40	@ 0x28
 800ed00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f7ff f818 	bl	800dd3a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ed10:	b2db      	uxtb	r3, r3
 800ed12:	2b28      	cmp	r3, #40	@ 0x28
 800ed14:	d111      	bne.n	800ed3a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	4a15      	ldr	r2, [pc, #84]	@ (800ed70 <I2C_Slave_STOPF+0x25c>)
 800ed1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2220      	movs	r2, #32
 800ed26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f7ff f817 	bl	800dd66 <HAL_I2C_ListenCpltCallback>
}
 800ed38:	e014      	b.n	800ed64 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed3e:	2b22      	cmp	r3, #34	@ 0x22
 800ed40:	d002      	beq.n	800ed48 <I2C_Slave_STOPF+0x234>
 800ed42:	7bfb      	ldrb	r3, [r7, #15]
 800ed44:	2b22      	cmp	r3, #34	@ 0x22
 800ed46:	d10d      	bne.n	800ed64 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2220      	movs	r2, #32
 800ed52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f7fe ffeb 	bl	800dd3a <HAL_I2C_SlaveRxCpltCallback>
}
 800ed64:	bf00      	nop
 800ed66:	3710      	adds	r7, #16
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	0800f3bd 	.word	0x0800f3bd
 800ed70:	ffff0000 	.word	0xffff0000

0800ed74 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ed82:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed88:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	2b08      	cmp	r3, #8
 800ed8e:	d002      	beq.n	800ed96 <I2C_Slave_AF+0x22>
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	2b20      	cmp	r3, #32
 800ed94:	d129      	bne.n	800edea <I2C_Slave_AF+0x76>
 800ed96:	7bfb      	ldrb	r3, [r7, #15]
 800ed98:	2b28      	cmp	r3, #40	@ 0x28
 800ed9a:	d126      	bne.n	800edea <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	4a2e      	ldr	r2, [pc, #184]	@ (800ee58 <I2C_Slave_AF+0xe4>)
 800eda0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	685a      	ldr	r2, [r3, #4]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800edb0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800edba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800edca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2220      	movs	r2, #32
 800edd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f7fe ffbf 	bl	800dd66 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800ede8:	e031      	b.n	800ee4e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800edea:	7bfb      	ldrb	r3, [r7, #15]
 800edec:	2b21      	cmp	r3, #33	@ 0x21
 800edee:	d129      	bne.n	800ee44 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	4a19      	ldr	r2, [pc, #100]	@ (800ee58 <I2C_Slave_AF+0xe4>)
 800edf4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2221      	movs	r2, #33	@ 0x21
 800edfa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2220      	movs	r2, #32
 800ee00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	685a      	ldr	r2, [r3, #4]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ee1a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ee24:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ee34:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f7fe fa3d 	bl	800d2b6 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7fe ff73 	bl	800dd28 <HAL_I2C_SlaveTxCpltCallback>
}
 800ee42:	e004      	b.n	800ee4e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ee4c:	615a      	str	r2, [r3, #20]
}
 800ee4e:	bf00      	nop
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	ffff0000 	.word	0xffff0000

0800ee5c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ee72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ee74:	7bbb      	ldrb	r3, [r7, #14]
 800ee76:	2b10      	cmp	r3, #16
 800ee78:	d002      	beq.n	800ee80 <I2C_ITError+0x24>
 800ee7a:	7bbb      	ldrb	r3, [r7, #14]
 800ee7c:	2b40      	cmp	r3, #64	@ 0x40
 800ee7e:	d10a      	bne.n	800ee96 <I2C_ITError+0x3a>
 800ee80:	7bfb      	ldrb	r3, [r7, #15]
 800ee82:	2b22      	cmp	r3, #34	@ 0x22
 800ee84:	d107      	bne.n	800ee96 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ee94:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ee96:	7bfb      	ldrb	r3, [r7, #15]
 800ee98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ee9c:	2b28      	cmp	r3, #40	@ 0x28
 800ee9e:	d107      	bne.n	800eeb0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2200      	movs	r2, #0
 800eea4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2228      	movs	r2, #40	@ 0x28
 800eeaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800eeae:	e015      	b.n	800eedc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eeba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eebe:	d00a      	beq.n	800eed6 <I2C_ITError+0x7a>
 800eec0:	7bfb      	ldrb	r3, [r7, #15]
 800eec2:	2b60      	cmp	r3, #96	@ 0x60
 800eec4:	d007      	beq.n	800eed6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2220      	movs	r2, #32
 800eeca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2200      	movs	r2, #0
 800eed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eee6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eeea:	d162      	bne.n	800efb2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	685a      	ldr	r2, [r3, #4]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800eefa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef00:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	2b01      	cmp	r3, #1
 800ef08:	d020      	beq.n	800ef4c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef0e:	4a6a      	ldr	r2, [pc, #424]	@ (800f0b8 <I2C_ITError+0x25c>)
 800ef10:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fd fd2f 	bl	800c97a <HAL_DMA_Abort_IT>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	f000 8089 	beq.w	800f036 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f022 0201 	bic.w	r2, r2, #1
 800ef32:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2220      	movs	r2, #32
 800ef38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ef46:	4610      	mov	r0, r2
 800ef48:	4798      	blx	r3
 800ef4a:	e074      	b.n	800f036 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef50:	4a59      	ldr	r2, [pc, #356]	@ (800f0b8 <I2C_ITError+0x25c>)
 800ef52:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7fd fd0e 	bl	800c97a <HAL_DMA_Abort_IT>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d068      	beq.n	800f036 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	695b      	ldr	r3, [r3, #20]
 800ef6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef6e:	2b40      	cmp	r3, #64	@ 0x40
 800ef70:	d10b      	bne.n	800ef8a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	691a      	ldr	r2, [r3, #16]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef7c:	b2d2      	uxtb	r2, r2
 800ef7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef84:	1c5a      	adds	r2, r3, #1
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f022 0201 	bic.w	r2, r2, #1
 800ef98:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2220      	movs	r2, #32
 800ef9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800efac:	4610      	mov	r0, r2
 800efae:	4798      	blx	r3
 800efb0:	e041      	b.n	800f036 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800efb8:	b2db      	uxtb	r3, r3
 800efba:	2b60      	cmp	r3, #96	@ 0x60
 800efbc:	d125      	bne.n	800f00a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2220      	movs	r2, #32
 800efc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	695b      	ldr	r3, [r3, #20]
 800efd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efd6:	2b40      	cmp	r3, #64	@ 0x40
 800efd8:	d10b      	bne.n	800eff2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	691a      	ldr	r2, [r3, #16]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efe4:	b2d2      	uxtb	r2, r2
 800efe6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efec:	1c5a      	adds	r2, r3, #1
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f022 0201 	bic.w	r2, r2, #1
 800f000:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f7fe fed3 	bl	800ddae <HAL_I2C_AbortCpltCallback>
 800f008:	e015      	b.n	800f036 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	695b      	ldr	r3, [r3, #20]
 800f010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f014:	2b40      	cmp	r3, #64	@ 0x40
 800f016:	d10b      	bne.n	800f030 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	691a      	ldr	r2, [r3, #16]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f022:	b2d2      	uxtb	r2, r2
 800f024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f02a:	1c5a      	adds	r2, r3, #1
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f7fe feb3 	bl	800dd9c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f03a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	f003 0301 	and.w	r3, r3, #1
 800f042:	2b00      	cmp	r3, #0
 800f044:	d10e      	bne.n	800f064 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d109      	bne.n	800f064 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800f056:	2b00      	cmp	r3, #0
 800f058:	d104      	bne.n	800f064 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800f060:	2b00      	cmp	r3, #0
 800f062:	d007      	beq.n	800f074 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	685a      	ldr	r2, [r3, #4]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800f072:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f07a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f080:	f003 0304 	and.w	r3, r3, #4
 800f084:	2b04      	cmp	r3, #4
 800f086:	d113      	bne.n	800f0b0 <I2C_ITError+0x254>
 800f088:	7bfb      	ldrb	r3, [r7, #15]
 800f08a:	2b28      	cmp	r3, #40	@ 0x28
 800f08c:	d110      	bne.n	800f0b0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4a0a      	ldr	r2, [pc, #40]	@ (800f0bc <I2C_ITError+0x260>)
 800f092:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2220      	movs	r2, #32
 800f09e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f7fe fe5b 	bl	800dd66 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f0b0:	bf00      	nop
 800f0b2:	3710      	adds	r7, #16
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}
 800f0b8:	0800f3bd 	.word	0x0800f3bd
 800f0bc:	ffff0000 	.word	0xffff0000

0800f0c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b088      	sub	sp, #32
 800f0c4:	af02      	add	r7, sp, #8
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	4608      	mov	r0, r1
 800f0ca:	4611      	mov	r1, r2
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	817b      	strh	r3, [r7, #10]
 800f0d2:	460b      	mov	r3, r1
 800f0d4:	813b      	strh	r3, [r7, #8]
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	681a      	ldr	r2, [r3, #0]
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f0e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ec:	9300      	str	r3, [sp, #0]
 800f0ee:	6a3b      	ldr	r3, [r7, #32]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800f0f6:	68f8      	ldr	r0, [r7, #12]
 800f0f8:	f000 fa08 	bl	800f50c <I2C_WaitOnFlagUntilTimeout>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d00d      	beq.n	800f11e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f10c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f110:	d103      	bne.n	800f11a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f118:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800f11a:	2303      	movs	r3, #3
 800f11c:	e05f      	b.n	800f1de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f11e:	897b      	ldrh	r3, [r7, #10]
 800f120:	b2db      	uxtb	r3, r3
 800f122:	461a      	mov	r2, r3
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800f12c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f130:	6a3a      	ldr	r2, [r7, #32]
 800f132:	492d      	ldr	r1, [pc, #180]	@ (800f1e8 <I2C_RequestMemoryWrite+0x128>)
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f000 fa63 	bl	800f600 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d001      	beq.n	800f144 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800f140:	2301      	movs	r3, #1
 800f142:	e04c      	b.n	800f1de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f144:	2300      	movs	r3, #0
 800f146:	617b      	str	r3, [r7, #20]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	695b      	ldr	r3, [r3, #20]
 800f14e:	617b      	str	r3, [r7, #20]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	699b      	ldr	r3, [r3, #24]
 800f156:	617b      	str	r3, [r7, #20]
 800f158:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f15a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f15c:	6a39      	ldr	r1, [r7, #32]
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f000 faee 	bl	800f740 <I2C_WaitOnTXEFlagUntilTimeout>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00d      	beq.n	800f186 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f16e:	2b04      	cmp	r3, #4
 800f170:	d107      	bne.n	800f182 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f180:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f182:	2301      	movs	r3, #1
 800f184:	e02b      	b.n	800f1de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f186:	88fb      	ldrh	r3, [r7, #6]
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d105      	bne.n	800f198 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f18c:	893b      	ldrh	r3, [r7, #8]
 800f18e:	b2da      	uxtb	r2, r3
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	611a      	str	r2, [r3, #16]
 800f196:	e021      	b.n	800f1dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800f198:	893b      	ldrh	r3, [r7, #8]
 800f19a:	0a1b      	lsrs	r3, r3, #8
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	b2da      	uxtb	r2, r3
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f1a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1a8:	6a39      	ldr	r1, [r7, #32]
 800f1aa:	68f8      	ldr	r0, [r7, #12]
 800f1ac:	f000 fac8 	bl	800f740 <I2C_WaitOnTXEFlagUntilTimeout>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d00d      	beq.n	800f1d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1ba:	2b04      	cmp	r3, #4
 800f1bc:	d107      	bne.n	800f1ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f1cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	e005      	b.n	800f1de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f1d2:	893b      	ldrh	r3, [r7, #8]
 800f1d4:	b2da      	uxtb	r2, r3
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800f1dc:	2300      	movs	r3, #0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3718      	adds	r7, #24
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	00010002 	.word	0x00010002

0800f1ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b088      	sub	sp, #32
 800f1f0:	af02      	add	r7, sp, #8
 800f1f2:	60f8      	str	r0, [r7, #12]
 800f1f4:	4608      	mov	r0, r1
 800f1f6:	4611      	mov	r1, r2
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	817b      	strh	r3, [r7, #10]
 800f1fe:	460b      	mov	r3, r1
 800f200:	813b      	strh	r3, [r7, #8]
 800f202:	4613      	mov	r3, r2
 800f204:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	681a      	ldr	r2, [r3, #0]
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f214:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	681a      	ldr	r2, [r3, #0]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f224:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f228:	9300      	str	r3, [sp, #0]
 800f22a:	6a3b      	ldr	r3, [r7, #32]
 800f22c:	2200      	movs	r2, #0
 800f22e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800f232:	68f8      	ldr	r0, [r7, #12]
 800f234:	f000 f96a 	bl	800f50c <I2C_WaitOnFlagUntilTimeout>
 800f238:	4603      	mov	r3, r0
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d00d      	beq.n	800f25a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f24c:	d103      	bne.n	800f256 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f254:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800f256:	2303      	movs	r3, #3
 800f258:	e0aa      	b.n	800f3b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f25a:	897b      	ldrh	r3, [r7, #10]
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	461a      	mov	r2, r3
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800f268:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f26c:	6a3a      	ldr	r2, [r7, #32]
 800f26e:	4952      	ldr	r1, [pc, #328]	@ (800f3b8 <I2C_RequestMemoryRead+0x1cc>)
 800f270:	68f8      	ldr	r0, [r7, #12]
 800f272:	f000 f9c5 	bl	800f600 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f276:	4603      	mov	r3, r0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d001      	beq.n	800f280 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800f27c:	2301      	movs	r3, #1
 800f27e:	e097      	b.n	800f3b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f280:	2300      	movs	r3, #0
 800f282:	617b      	str	r3, [r7, #20]
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	695b      	ldr	r3, [r3, #20]
 800f28a:	617b      	str	r3, [r7, #20]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	699b      	ldr	r3, [r3, #24]
 800f292:	617b      	str	r3, [r7, #20]
 800f294:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f298:	6a39      	ldr	r1, [r7, #32]
 800f29a:	68f8      	ldr	r0, [r7, #12]
 800f29c:	f000 fa50 	bl	800f740 <I2C_WaitOnTXEFlagUntilTimeout>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d00d      	beq.n	800f2c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2aa:	2b04      	cmp	r3, #4
 800f2ac:	d107      	bne.n	800f2be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f2bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e076      	b.n	800f3b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f2c2:	88fb      	ldrh	r3, [r7, #6]
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d105      	bne.n	800f2d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f2c8:	893b      	ldrh	r3, [r7, #8]
 800f2ca:	b2da      	uxtb	r2, r3
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	611a      	str	r2, [r3, #16]
 800f2d2:	e021      	b.n	800f318 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800f2d4:	893b      	ldrh	r3, [r7, #8]
 800f2d6:	0a1b      	lsrs	r3, r3, #8
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	b2da      	uxtb	r2, r3
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f2e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2e4:	6a39      	ldr	r1, [r7, #32]
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f000 fa2a 	bl	800f740 <I2C_WaitOnTXEFlagUntilTimeout>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d00d      	beq.n	800f30e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2f6:	2b04      	cmp	r3, #4
 800f2f8:	d107      	bne.n	800f30a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f308:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800f30a:	2301      	movs	r3, #1
 800f30c:	e050      	b.n	800f3b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f30e:	893b      	ldrh	r3, [r7, #8]
 800f310:	b2da      	uxtb	r2, r3
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f31a:	6a39      	ldr	r1, [r7, #32]
 800f31c:	68f8      	ldr	r0, [r7, #12]
 800f31e:	f000 fa0f 	bl	800f740 <I2C_WaitOnTXEFlagUntilTimeout>
 800f322:	4603      	mov	r3, r0
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00d      	beq.n	800f344 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f32c:	2b04      	cmp	r3, #4
 800f32e:	d107      	bne.n	800f340 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f33e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f340:	2301      	movs	r3, #1
 800f342:	e035      	b.n	800f3b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f352:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f356:	9300      	str	r3, [sp, #0]
 800f358:	6a3b      	ldr	r3, [r7, #32]
 800f35a:	2200      	movs	r2, #0
 800f35c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800f360:	68f8      	ldr	r0, [r7, #12]
 800f362:	f000 f8d3 	bl	800f50c <I2C_WaitOnFlagUntilTimeout>
 800f366:	4603      	mov	r3, r0
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d00d      	beq.n	800f388 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f37a:	d103      	bne.n	800f384 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f382:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800f384:	2303      	movs	r3, #3
 800f386:	e013      	b.n	800f3b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800f388:	897b      	ldrh	r3, [r7, #10]
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	f043 0301 	orr.w	r3, r3, #1
 800f390:	b2da      	uxtb	r2, r3
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f39a:	6a3a      	ldr	r2, [r7, #32]
 800f39c:	4906      	ldr	r1, [pc, #24]	@ (800f3b8 <I2C_RequestMemoryRead+0x1cc>)
 800f39e:	68f8      	ldr	r0, [r7, #12]
 800f3a0:	f000 f92e 	bl	800f600 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d001      	beq.n	800f3ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e000      	b.n	800f3b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800f3ae:	2300      	movs	r3, #0
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3718      	adds	r7, #24
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}
 800f3b8:	00010002 	.word	0x00010002

0800f3bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b086      	sub	sp, #24
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f3d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800f3d6:	4b4b      	ldr	r3, [pc, #300]	@ (800f504 <I2C_DMAAbort+0x148>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	08db      	lsrs	r3, r3, #3
 800f3dc:	4a4a      	ldr	r2, [pc, #296]	@ (800f508 <I2C_DMAAbort+0x14c>)
 800f3de:	fba2 2303 	umull	r2, r3, r2, r3
 800f3e2:	0a1a      	lsrs	r2, r3, #8
 800f3e4:	4613      	mov	r3, r2
 800f3e6:	009b      	lsls	r3, r3, #2
 800f3e8:	4413      	add	r3, r2
 800f3ea:	00da      	lsls	r2, r3, #3
 800f3ec:	1ad3      	subs	r3, r2, r3
 800f3ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d106      	bne.n	800f404 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3fa:	f043 0220 	orr.w	r2, r3, #32
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800f402:	e00a      	b.n	800f41a <I2C_DMAAbort+0x5e>
    }
    count--;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	3b01      	subs	r3, #1
 800f408:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f418:	d0ea      	beq.n	800f3f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d003      	beq.n	800f42a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f426:	2200      	movs	r2, #0
 800f428:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d003      	beq.n	800f43a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f436:	2200      	movs	r2, #0
 800f438:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f448:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	2200      	movs	r2, #0
 800f44e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f454:	2b00      	cmp	r3, #0
 800f456:	d003      	beq.n	800f460 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f45c:	2200      	movs	r2, #0
 800f45e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f464:	2b00      	cmp	r3, #0
 800f466:	d003      	beq.n	800f470 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f46c:	2200      	movs	r2, #0
 800f46e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f022 0201 	bic.w	r2, r2, #1
 800f47e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f486:	b2db      	uxtb	r3, r3
 800f488:	2b60      	cmp	r3, #96	@ 0x60
 800f48a:	d10e      	bne.n	800f4aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	2220      	movs	r2, #32
 800f490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	2200      	movs	r2, #0
 800f498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800f4a2:	6978      	ldr	r0, [r7, #20]
 800f4a4:	f7fe fc83 	bl	800ddae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f4a8:	e027      	b.n	800f4fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f4aa:	7cfb      	ldrb	r3, [r7, #19]
 800f4ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800f4b0:	2b28      	cmp	r3, #40	@ 0x28
 800f4b2:	d117      	bne.n	800f4e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f042 0201 	orr.w	r2, r2, #1
 800f4c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f4d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	2228      	movs	r2, #40	@ 0x28
 800f4de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800f4e2:	e007      	b.n	800f4f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	2220      	movs	r2, #32
 800f4e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800f4f4:	6978      	ldr	r0, [r7, #20]
 800f4f6:	f7fe fc51 	bl	800dd9c <HAL_I2C_ErrorCallback>
}
 800f4fa:	bf00      	nop
 800f4fc:	3718      	adds	r7, #24
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	20000000 	.word	0x20000000
 800f508:	14f8b589 	.word	0x14f8b589

0800f50c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	603b      	str	r3, [r7, #0]
 800f518:	4613      	mov	r3, r2
 800f51a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f51c:	e048      	b.n	800f5b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f524:	d044      	beq.n	800f5b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f526:	f7fc fc45 	bl	800bdb4 <HAL_GetTick>
 800f52a:	4602      	mov	r2, r0
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	1ad3      	subs	r3, r2, r3
 800f530:	683a      	ldr	r2, [r7, #0]
 800f532:	429a      	cmp	r2, r3
 800f534:	d302      	bcc.n	800f53c <I2C_WaitOnFlagUntilTimeout+0x30>
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d139      	bne.n	800f5b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	0c1b      	lsrs	r3, r3, #16
 800f540:	b2db      	uxtb	r3, r3
 800f542:	2b01      	cmp	r3, #1
 800f544:	d10d      	bne.n	800f562 <I2C_WaitOnFlagUntilTimeout+0x56>
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	695b      	ldr	r3, [r3, #20]
 800f54c:	43da      	mvns	r2, r3
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	4013      	ands	r3, r2
 800f552:	b29b      	uxth	r3, r3
 800f554:	2b00      	cmp	r3, #0
 800f556:	bf0c      	ite	eq
 800f558:	2301      	moveq	r3, #1
 800f55a:	2300      	movne	r3, #0
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	461a      	mov	r2, r3
 800f560:	e00c      	b.n	800f57c <I2C_WaitOnFlagUntilTimeout+0x70>
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	699b      	ldr	r3, [r3, #24]
 800f568:	43da      	mvns	r2, r3
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	4013      	ands	r3, r2
 800f56e:	b29b      	uxth	r3, r3
 800f570:	2b00      	cmp	r3, #0
 800f572:	bf0c      	ite	eq
 800f574:	2301      	moveq	r3, #1
 800f576:	2300      	movne	r3, #0
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	461a      	mov	r2, r3
 800f57c:	79fb      	ldrb	r3, [r7, #7]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d116      	bne.n	800f5b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2200      	movs	r2, #0
 800f586:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2220      	movs	r2, #32
 800f58c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2200      	movs	r2, #0
 800f594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f59c:	f043 0220 	orr.w	r2, r3, #32
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	e023      	b.n	800f5f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	0c1b      	lsrs	r3, r3, #16
 800f5b4:	b2db      	uxtb	r3, r3
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d10d      	bne.n	800f5d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	695b      	ldr	r3, [r3, #20]
 800f5c0:	43da      	mvns	r2, r3
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	4013      	ands	r3, r2
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	bf0c      	ite	eq
 800f5cc:	2301      	moveq	r3, #1
 800f5ce:	2300      	movne	r3, #0
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	e00c      	b.n	800f5f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	699b      	ldr	r3, [r3, #24]
 800f5dc:	43da      	mvns	r2, r3
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	4013      	ands	r3, r2
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	bf0c      	ite	eq
 800f5e8:	2301      	moveq	r3, #1
 800f5ea:	2300      	movne	r3, #0
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	79fb      	ldrb	r3, [r7, #7]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d093      	beq.n	800f51e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f5f6:	2300      	movs	r3, #0
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	607a      	str	r2, [r7, #4]
 800f60c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f60e:	e071      	b.n	800f6f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	695b      	ldr	r3, [r3, #20]
 800f616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f61a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f61e:	d123      	bne.n	800f668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f62e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f638:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	2200      	movs	r2, #0
 800f63e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	2220      	movs	r2, #32
 800f644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2200      	movs	r2, #0
 800f64c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f654:	f043 0204 	orr.w	r2, r3, #4
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2200      	movs	r2, #0
 800f660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800f664:	2301      	movs	r3, #1
 800f666:	e067      	b.n	800f738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f66e:	d041      	beq.n	800f6f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f670:	f7fc fba0 	bl	800bdb4 <HAL_GetTick>
 800f674:	4602      	mov	r2, r0
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	1ad3      	subs	r3, r2, r3
 800f67a:	687a      	ldr	r2, [r7, #4]
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d302      	bcc.n	800f686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d136      	bne.n	800f6f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	0c1b      	lsrs	r3, r3, #16
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d10c      	bne.n	800f6aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	695b      	ldr	r3, [r3, #20]
 800f696:	43da      	mvns	r2, r3
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	4013      	ands	r3, r2
 800f69c:	b29b      	uxth	r3, r3
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	bf14      	ite	ne
 800f6a2:	2301      	movne	r3, #1
 800f6a4:	2300      	moveq	r3, #0
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	e00b      	b.n	800f6c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	699b      	ldr	r3, [r3, #24]
 800f6b0:	43da      	mvns	r2, r3
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	4013      	ands	r3, r2
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	bf14      	ite	ne
 800f6bc:	2301      	movne	r3, #1
 800f6be:	2300      	moveq	r3, #0
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d016      	beq.n	800f6f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	2220      	movs	r2, #32
 800f6d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6e0:	f043 0220 	orr.w	r2, r3, #32
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	e021      	b.n	800f738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	0c1b      	lsrs	r3, r3, #16
 800f6f8:	b2db      	uxtb	r3, r3
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d10c      	bne.n	800f718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	695b      	ldr	r3, [r3, #20]
 800f704:	43da      	mvns	r2, r3
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	4013      	ands	r3, r2
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	bf14      	ite	ne
 800f710:	2301      	movne	r3, #1
 800f712:	2300      	moveq	r3, #0
 800f714:	b2db      	uxtb	r3, r3
 800f716:	e00b      	b.n	800f730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	699b      	ldr	r3, [r3, #24]
 800f71e:	43da      	mvns	r2, r3
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	4013      	ands	r3, r2
 800f724:	b29b      	uxth	r3, r3
 800f726:	2b00      	cmp	r3, #0
 800f728:	bf14      	ite	ne
 800f72a:	2301      	movne	r3, #1
 800f72c:	2300      	moveq	r3, #0
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	2b00      	cmp	r3, #0
 800f732:	f47f af6d 	bne.w	800f610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800f736:	2300      	movs	r3, #0
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3710      	adds	r7, #16
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	60f8      	str	r0, [r7, #12]
 800f748:	60b9      	str	r1, [r7, #8]
 800f74a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f74c:	e034      	b.n	800f7b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f74e:	68f8      	ldr	r0, [r7, #12]
 800f750:	f000 f915 	bl	800f97e <I2C_IsAcknowledgeFailed>
 800f754:	4603      	mov	r3, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	d001      	beq.n	800f75e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f75a:	2301      	movs	r3, #1
 800f75c:	e034      	b.n	800f7c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f764:	d028      	beq.n	800f7b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f766:	f7fc fb25 	bl	800bdb4 <HAL_GetTick>
 800f76a:	4602      	mov	r2, r0
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	1ad3      	subs	r3, r2, r3
 800f770:	68ba      	ldr	r2, [r7, #8]
 800f772:	429a      	cmp	r2, r3
 800f774:	d302      	bcc.n	800f77c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d11d      	bne.n	800f7b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	695b      	ldr	r3, [r3, #20]
 800f782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f786:	2b80      	cmp	r3, #128	@ 0x80
 800f788:	d016      	beq.n	800f7b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	2200      	movs	r2, #0
 800f78e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2220      	movs	r2, #32
 800f794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2200      	movs	r2, #0
 800f79c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7a4:	f043 0220 	orr.w	r2, r3, #32
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e007      	b.n	800f7c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	695b      	ldr	r3, [r3, #20]
 800f7be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7c2:	2b80      	cmp	r3, #128	@ 0x80
 800f7c4:	d1c3      	bne.n	800f74e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f7c6:	2300      	movs	r3, #0
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3710      	adds	r7, #16
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f7dc:	e034      	b.n	800f848 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f7de:	68f8      	ldr	r0, [r7, #12]
 800f7e0:	f000 f8cd 	bl	800f97e <I2C_IsAcknowledgeFailed>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d001      	beq.n	800f7ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	e034      	b.n	800f858 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f4:	d028      	beq.n	800f848 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7f6:	f7fc fadd 	bl	800bdb4 <HAL_GetTick>
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	1ad3      	subs	r3, r2, r3
 800f800:	68ba      	ldr	r2, [r7, #8]
 800f802:	429a      	cmp	r2, r3
 800f804:	d302      	bcc.n	800f80c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d11d      	bne.n	800f848 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	695b      	ldr	r3, [r3, #20]
 800f812:	f003 0304 	and.w	r3, r3, #4
 800f816:	2b04      	cmp	r3, #4
 800f818:	d016      	beq.n	800f848 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	2200      	movs	r2, #0
 800f81e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2220      	movs	r2, #32
 800f824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f834:	f043 0220 	orr.w	r2, r3, #32
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2200      	movs	r2, #0
 800f840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f844:	2301      	movs	r3, #1
 800f846:	e007      	b.n	800f858 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	695b      	ldr	r3, [r3, #20]
 800f84e:	f003 0304 	and.w	r3, r3, #4
 800f852:	2b04      	cmp	r3, #4
 800f854:	d1c3      	bne.n	800f7de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f856:	2300      	movs	r3, #0
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3710      	adds	r7, #16
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800f860:	b480      	push	{r7}
 800f862:	b085      	sub	sp, #20
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f868:	2300      	movs	r3, #0
 800f86a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800f86c:	4b13      	ldr	r3, [pc, #76]	@ (800f8bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	08db      	lsrs	r3, r3, #3
 800f872:	4a13      	ldr	r2, [pc, #76]	@ (800f8c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800f874:	fba2 2303 	umull	r2, r3, r2, r3
 800f878:	0a1a      	lsrs	r2, r3, #8
 800f87a:	4613      	mov	r3, r2
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	4413      	add	r3, r2
 800f880:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	3b01      	subs	r3, #1
 800f886:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d107      	bne.n	800f89e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f892:	f043 0220 	orr.w	r2, r3, #32
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800f89a:	2301      	movs	r3, #1
 800f89c:	e008      	b.n	800f8b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f8a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8ac:	d0e9      	beq.n	800f882 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800f8ae:	2300      	movs	r3, #0
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3714      	adds	r7, #20
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bc80      	pop	{r7}
 800f8b8:	4770      	bx	lr
 800f8ba:	bf00      	nop
 800f8bc:	20000000 	.word	0x20000000
 800f8c0:	14f8b589 	.word	0x14f8b589

0800f8c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	60f8      	str	r0, [r7, #12]
 800f8cc:	60b9      	str	r1, [r7, #8]
 800f8ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f8d0:	e049      	b.n	800f966 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	695b      	ldr	r3, [r3, #20]
 800f8d8:	f003 0310 	and.w	r3, r3, #16
 800f8dc:	2b10      	cmp	r3, #16
 800f8de:	d119      	bne.n	800f914 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f06f 0210 	mvn.w	r2, #16
 800f8e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2220      	movs	r2, #32
 800f8f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2200      	movs	r2, #0
 800f90c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800f910:	2301      	movs	r3, #1
 800f912:	e030      	b.n	800f976 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f914:	f7fc fa4e 	bl	800bdb4 <HAL_GetTick>
 800f918:	4602      	mov	r2, r0
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	1ad3      	subs	r3, r2, r3
 800f91e:	68ba      	ldr	r2, [r7, #8]
 800f920:	429a      	cmp	r2, r3
 800f922:	d302      	bcc.n	800f92a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d11d      	bne.n	800f966 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	695b      	ldr	r3, [r3, #20]
 800f930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f934:	2b40      	cmp	r3, #64	@ 0x40
 800f936:	d016      	beq.n	800f966 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2200      	movs	r2, #0
 800f93c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	2220      	movs	r2, #32
 800f942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2200      	movs	r2, #0
 800f94a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f952:	f043 0220 	orr.w	r2, r3, #32
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	2200      	movs	r2, #0
 800f95e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800f962:	2301      	movs	r3, #1
 800f964:	e007      	b.n	800f976 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	695b      	ldr	r3, [r3, #20]
 800f96c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f970:	2b40      	cmp	r3, #64	@ 0x40
 800f972:	d1ae      	bne.n	800f8d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f974:	2300      	movs	r3, #0
}
 800f976:	4618      	mov	r0, r3
 800f978:	3710      	adds	r7, #16
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800f97e:	b480      	push	{r7}
 800f980:	b083      	sub	sp, #12
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	695b      	ldr	r3, [r3, #20]
 800f98c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f994:	d11b      	bne.n	800f9ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f99e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2220      	movs	r2, #32
 800f9aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9ba:	f043 0204 	orr.w	r2, r3, #4
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	e000      	b.n	800f9d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f9ce:	2300      	movs	r3, #0
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bc80      	pop	{r7}
 800f9d8:	4770      	bx	lr

0800f9da <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800f9da:	b480      	push	{r7}
 800f9dc:	b083      	sub	sp, #12
 800f9de:	af00      	add	r7, sp, #0
 800f9e0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9e6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800f9ea:	d103      	bne.n	800f9f4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800f9f2:	e007      	b.n	800fa04 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800f9fc:	d102      	bne.n	800fa04 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2208      	movs	r2, #8
 800fa02:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800fa04:	bf00      	nop
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bc80      	pop	{r7}
 800fa0c:	4770      	bx	lr
	...

0800fa10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b088      	sub	sp, #32
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d101      	bne.n	800fa22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800fa1e:	2301      	movs	r3, #1
 800fa20:	e31d      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fa22:	4b94      	ldr	r3, [pc, #592]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fa24:	689b      	ldr	r3, [r3, #8]
 800fa26:	f003 030c 	and.w	r3, r3, #12
 800fa2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fa2c:	4b91      	ldr	r3, [pc, #580]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fa2e:	689b      	ldr	r3, [r3, #8]
 800fa30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fa34:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	f003 0301 	and.w	r3, r3, #1
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d07b      	beq.n	800fb3a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	2b08      	cmp	r3, #8
 800fa46:	d006      	beq.n	800fa56 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800fa48:	69bb      	ldr	r3, [r7, #24]
 800fa4a:	2b0c      	cmp	r3, #12
 800fa4c:	d10f      	bne.n	800fa6e <HAL_RCC_OscConfig+0x5e>
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa54:	d10b      	bne.n	800fa6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fa56:	4b87      	ldr	r3, [pc, #540]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d06a      	beq.n	800fb38 <HAL_RCC_OscConfig+0x128>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	685b      	ldr	r3, [r3, #4]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d166      	bne.n	800fb38 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	e2f7      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d106      	bne.n	800fa84 <HAL_RCC_OscConfig+0x74>
 800fa76:	4b7f      	ldr	r3, [pc, #508]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	4a7e      	ldr	r2, [pc, #504]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fa7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fa80:	6013      	str	r3, [r2, #0]
 800fa82:	e02d      	b.n	800fae0 <HAL_RCC_OscConfig+0xd0>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d10c      	bne.n	800faa6 <HAL_RCC_OscConfig+0x96>
 800fa8c:	4b79      	ldr	r3, [pc, #484]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	4a78      	ldr	r2, [pc, #480]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fa92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fa96:	6013      	str	r3, [r2, #0]
 800fa98:	4b76      	ldr	r3, [pc, #472]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	4a75      	ldr	r2, [pc, #468]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fa9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800faa2:	6013      	str	r3, [r2, #0]
 800faa4:	e01c      	b.n	800fae0 <HAL_RCC_OscConfig+0xd0>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	2b05      	cmp	r3, #5
 800faac:	d10c      	bne.n	800fac8 <HAL_RCC_OscConfig+0xb8>
 800faae:	4b71      	ldr	r3, [pc, #452]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	4a70      	ldr	r2, [pc, #448]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800fab8:	6013      	str	r3, [r2, #0]
 800faba:	4b6e      	ldr	r3, [pc, #440]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4a6d      	ldr	r2, [pc, #436]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fac4:	6013      	str	r3, [r2, #0]
 800fac6:	e00b      	b.n	800fae0 <HAL_RCC_OscConfig+0xd0>
 800fac8:	4b6a      	ldr	r3, [pc, #424]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4a69      	ldr	r2, [pc, #420]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800face:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fad2:	6013      	str	r3, [r2, #0]
 800fad4:	4b67      	ldr	r3, [pc, #412]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4a66      	ldr	r2, [pc, #408]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d013      	beq.n	800fb10 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fae8:	f7fc f964 	bl	800bdb4 <HAL_GetTick>
 800faec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800faee:	e008      	b.n	800fb02 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800faf0:	f7fc f960 	bl	800bdb4 <HAL_GetTick>
 800faf4:	4602      	mov	r2, r0
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	1ad3      	subs	r3, r2, r3
 800fafa:	2b64      	cmp	r3, #100	@ 0x64
 800fafc:	d901      	bls.n	800fb02 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800fafe:	2303      	movs	r3, #3
 800fb00:	e2ad      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fb02:	4b5c      	ldr	r3, [pc, #368]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d0f0      	beq.n	800faf0 <HAL_RCC_OscConfig+0xe0>
 800fb0e:	e014      	b.n	800fb3a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fb10:	f7fc f950 	bl	800bdb4 <HAL_GetTick>
 800fb14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fb16:	e008      	b.n	800fb2a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fb18:	f7fc f94c 	bl	800bdb4 <HAL_GetTick>
 800fb1c:	4602      	mov	r2, r0
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	1ad3      	subs	r3, r2, r3
 800fb22:	2b64      	cmp	r3, #100	@ 0x64
 800fb24:	d901      	bls.n	800fb2a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800fb26:	2303      	movs	r3, #3
 800fb28:	e299      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fb2a:	4b52      	ldr	r3, [pc, #328]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1f0      	bne.n	800fb18 <HAL_RCC_OscConfig+0x108>
 800fb36:	e000      	b.n	800fb3a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fb38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f003 0302 	and.w	r3, r3, #2
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d05a      	beq.n	800fbfc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800fb46:	69bb      	ldr	r3, [r7, #24]
 800fb48:	2b04      	cmp	r3, #4
 800fb4a:	d005      	beq.n	800fb58 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800fb4c:	69bb      	ldr	r3, [r7, #24]
 800fb4e:	2b0c      	cmp	r3, #12
 800fb50:	d119      	bne.n	800fb86 <HAL_RCC_OscConfig+0x176>
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d116      	bne.n	800fb86 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fb58:	4b46      	ldr	r3, [pc, #280]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f003 0302 	and.w	r3, r3, #2
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d005      	beq.n	800fb70 <HAL_RCC_OscConfig+0x160>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	68db      	ldr	r3, [r3, #12]
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d001      	beq.n	800fb70 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	e276      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fb70:	4b40      	ldr	r3, [pc, #256]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	691b      	ldr	r3, [r3, #16]
 800fb7c:	021b      	lsls	r3, r3, #8
 800fb7e:	493d      	ldr	r1, [pc, #244]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fb80:	4313      	orrs	r3, r2
 800fb82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fb84:	e03a      	b.n	800fbfc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	68db      	ldr	r3, [r3, #12]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d020      	beq.n	800fbd0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fb8e:	4b3a      	ldr	r3, [pc, #232]	@ (800fc78 <HAL_RCC_OscConfig+0x268>)
 800fb90:	2201      	movs	r2, #1
 800fb92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fb94:	f7fc f90e 	bl	800bdb4 <HAL_GetTick>
 800fb98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fb9a:	e008      	b.n	800fbae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fb9c:	f7fc f90a 	bl	800bdb4 <HAL_GetTick>
 800fba0:	4602      	mov	r2, r0
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	1ad3      	subs	r3, r2, r3
 800fba6:	2b02      	cmp	r3, #2
 800fba8:	d901      	bls.n	800fbae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800fbaa:	2303      	movs	r3, #3
 800fbac:	e257      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fbae:	4b31      	ldr	r3, [pc, #196]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f003 0302 	and.w	r3, r3, #2
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d0f0      	beq.n	800fb9c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fbba:	4b2e      	ldr	r3, [pc, #184]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	021b      	lsls	r3, r3, #8
 800fbc8:	492a      	ldr	r1, [pc, #168]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	604b      	str	r3, [r1, #4]
 800fbce:	e015      	b.n	800fbfc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fbd0:	4b29      	ldr	r3, [pc, #164]	@ (800fc78 <HAL_RCC_OscConfig+0x268>)
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fbd6:	f7fc f8ed 	bl	800bdb4 <HAL_GetTick>
 800fbda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fbdc:	e008      	b.n	800fbf0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fbde:	f7fc f8e9 	bl	800bdb4 <HAL_GetTick>
 800fbe2:	4602      	mov	r2, r0
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	1ad3      	subs	r3, r2, r3
 800fbe8:	2b02      	cmp	r3, #2
 800fbea:	d901      	bls.n	800fbf0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800fbec:	2303      	movs	r3, #3
 800fbee:	e236      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fbf0:	4b20      	ldr	r3, [pc, #128]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f003 0302 	and.w	r3, r3, #2
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d1f0      	bne.n	800fbde <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f003 0310 	and.w	r3, r3, #16
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	f000 80b8 	beq.w	800fd7a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d170      	bne.n	800fcf2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800fc10:	4b18      	ldr	r3, [pc, #96]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d005      	beq.n	800fc28 <HAL_RCC_OscConfig+0x218>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	699b      	ldr	r3, [r3, #24]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d101      	bne.n	800fc28 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800fc24:	2301      	movs	r3, #1
 800fc26:	e21a      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	6a1a      	ldr	r2, [r3, #32]
 800fc2c:	4b11      	ldr	r3, [pc, #68]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d921      	bls.n	800fc7c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6a1b      	ldr	r3, [r3, #32]
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f000 fc7d 	bl	801053c <RCC_SetFlashLatencyFromMSIRange>
 800fc42:	4603      	mov	r3, r0
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d001      	beq.n	800fc4c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800fc48:	2301      	movs	r3, #1
 800fc4a:	e208      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fc4c:	4b09      	ldr	r3, [pc, #36]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	6a1b      	ldr	r3, [r3, #32]
 800fc58:	4906      	ldr	r1, [pc, #24]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fc5a:	4313      	orrs	r3, r2
 800fc5c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fc5e:	4b05      	ldr	r3, [pc, #20]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	69db      	ldr	r3, [r3, #28]
 800fc6a:	061b      	lsls	r3, r3, #24
 800fc6c:	4901      	ldr	r1, [pc, #4]	@ (800fc74 <HAL_RCC_OscConfig+0x264>)
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	604b      	str	r3, [r1, #4]
 800fc72:	e020      	b.n	800fcb6 <HAL_RCC_OscConfig+0x2a6>
 800fc74:	40023800 	.word	0x40023800
 800fc78:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fc7c:	4b99      	ldr	r3, [pc, #612]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6a1b      	ldr	r3, [r3, #32]
 800fc88:	4996      	ldr	r1, [pc, #600]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fc8e:	4b95      	ldr	r3, [pc, #596]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	69db      	ldr	r3, [r3, #28]
 800fc9a:	061b      	lsls	r3, r3, #24
 800fc9c:	4991      	ldr	r1, [pc, #580]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6a1b      	ldr	r3, [r3, #32]
 800fca6:	4618      	mov	r0, r3
 800fca8:	f000 fc48 	bl	801053c <RCC_SetFlashLatencyFromMSIRange>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d001      	beq.n	800fcb6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	e1d3      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6a1b      	ldr	r3, [r3, #32]
 800fcba:	0b5b      	lsrs	r3, r3, #13
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800fcc2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800fcc6:	4a87      	ldr	r2, [pc, #540]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fcc8:	6892      	ldr	r2, [r2, #8]
 800fcca:	0912      	lsrs	r2, r2, #4
 800fccc:	f002 020f 	and.w	r2, r2, #15
 800fcd0:	4985      	ldr	r1, [pc, #532]	@ (800fee8 <HAL_RCC_OscConfig+0x4d8>)
 800fcd2:	5c8a      	ldrb	r2, [r1, r2]
 800fcd4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fcd6:	4a85      	ldr	r2, [pc, #532]	@ (800feec <HAL_RCC_OscConfig+0x4dc>)
 800fcd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800fcda:	4b85      	ldr	r3, [pc, #532]	@ (800fef0 <HAL_RCC_OscConfig+0x4e0>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7fc f81c 	bl	800bd1c <HAL_InitTick>
 800fce4:	4603      	mov	r3, r0
 800fce6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800fce8:	7bfb      	ldrb	r3, [r7, #15]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d045      	beq.n	800fd7a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800fcee:	7bfb      	ldrb	r3, [r7, #15]
 800fcf0:	e1b5      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	699b      	ldr	r3, [r3, #24]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d029      	beq.n	800fd4e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800fcfa:	4b7e      	ldr	r3, [pc, #504]	@ (800fef4 <HAL_RCC_OscConfig+0x4e4>)
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd00:	f7fc f858 	bl	800bdb4 <HAL_GetTick>
 800fd04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fd06:	e008      	b.n	800fd1a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fd08:	f7fc f854 	bl	800bdb4 <HAL_GetTick>
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	1ad3      	subs	r3, r2, r3
 800fd12:	2b02      	cmp	r3, #2
 800fd14:	d901      	bls.n	800fd1a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800fd16:	2303      	movs	r3, #3
 800fd18:	e1a1      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fd1a:	4b72      	ldr	r3, [pc, #456]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d0f0      	beq.n	800fd08 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fd26:	4b6f      	ldr	r3, [pc, #444]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6a1b      	ldr	r3, [r3, #32]
 800fd32:	496c      	ldr	r1, [pc, #432]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fd34:	4313      	orrs	r3, r2
 800fd36:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fd38:	4b6a      	ldr	r3, [pc, #424]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	69db      	ldr	r3, [r3, #28]
 800fd44:	061b      	lsls	r3, r3, #24
 800fd46:	4967      	ldr	r1, [pc, #412]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fd48:	4313      	orrs	r3, r2
 800fd4a:	604b      	str	r3, [r1, #4]
 800fd4c:	e015      	b.n	800fd7a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fd4e:	4b69      	ldr	r3, [pc, #420]	@ (800fef4 <HAL_RCC_OscConfig+0x4e4>)
 800fd50:	2200      	movs	r2, #0
 800fd52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd54:	f7fc f82e 	bl	800bdb4 <HAL_GetTick>
 800fd58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fd5a:	e008      	b.n	800fd6e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fd5c:	f7fc f82a 	bl	800bdb4 <HAL_GetTick>
 800fd60:	4602      	mov	r2, r0
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	1ad3      	subs	r3, r2, r3
 800fd66:	2b02      	cmp	r3, #2
 800fd68:	d901      	bls.n	800fd6e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800fd6a:	2303      	movs	r3, #3
 800fd6c:	e177      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fd6e:	4b5d      	ldr	r3, [pc, #372]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d1f0      	bne.n	800fd5c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f003 0308 	and.w	r3, r3, #8
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d030      	beq.n	800fde8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	695b      	ldr	r3, [r3, #20]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d016      	beq.n	800fdbc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fd8e:	4b5a      	ldr	r3, [pc, #360]	@ (800fef8 <HAL_RCC_OscConfig+0x4e8>)
 800fd90:	2201      	movs	r2, #1
 800fd92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fd94:	f7fc f80e 	bl	800bdb4 <HAL_GetTick>
 800fd98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fd9a:	e008      	b.n	800fdae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fd9c:	f7fc f80a 	bl	800bdb4 <HAL_GetTick>
 800fda0:	4602      	mov	r2, r0
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	1ad3      	subs	r3, r2, r3
 800fda6:	2b02      	cmp	r3, #2
 800fda8:	d901      	bls.n	800fdae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800fdaa:	2303      	movs	r3, #3
 800fdac:	e157      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fdae:	4b4d      	ldr	r3, [pc, #308]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fdb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fdb2:	f003 0302 	and.w	r3, r3, #2
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d0f0      	beq.n	800fd9c <HAL_RCC_OscConfig+0x38c>
 800fdba:	e015      	b.n	800fde8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fdbc:	4b4e      	ldr	r3, [pc, #312]	@ (800fef8 <HAL_RCC_OscConfig+0x4e8>)
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fdc2:	f7fb fff7 	bl	800bdb4 <HAL_GetTick>
 800fdc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fdc8:	e008      	b.n	800fddc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fdca:	f7fb fff3 	bl	800bdb4 <HAL_GetTick>
 800fdce:	4602      	mov	r2, r0
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	1ad3      	subs	r3, r2, r3
 800fdd4:	2b02      	cmp	r3, #2
 800fdd6:	d901      	bls.n	800fddc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800fdd8:	2303      	movs	r3, #3
 800fdda:	e140      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fddc:	4b41      	ldr	r3, [pc, #260]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fdde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fde0:	f003 0302 	and.w	r3, r3, #2
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d1f0      	bne.n	800fdca <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f003 0304 	and.w	r3, r3, #4
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	f000 80b5 	beq.w	800ff60 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fdfa:	4b3a      	ldr	r3, [pc, #232]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fdfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d10d      	bne.n	800fe22 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fe06:	4b37      	ldr	r3, [pc, #220]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fe08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe0a:	4a36      	ldr	r2, [pc, #216]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fe0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fe10:	6253      	str	r3, [r2, #36]	@ 0x24
 800fe12:	4b34      	ldr	r3, [pc, #208]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fe14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fe1a:	60bb      	str	r3, [r7, #8]
 800fe1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fe1e:	2301      	movs	r3, #1
 800fe20:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe22:	4b36      	ldr	r3, [pc, #216]	@ (800fefc <HAL_RCC_OscConfig+0x4ec>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d118      	bne.n	800fe60 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fe2e:	4b33      	ldr	r3, [pc, #204]	@ (800fefc <HAL_RCC_OscConfig+0x4ec>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4a32      	ldr	r2, [pc, #200]	@ (800fefc <HAL_RCC_OscConfig+0x4ec>)
 800fe34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fe38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fe3a:	f7fb ffbb 	bl	800bdb4 <HAL_GetTick>
 800fe3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe40:	e008      	b.n	800fe54 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fe42:	f7fb ffb7 	bl	800bdb4 <HAL_GetTick>
 800fe46:	4602      	mov	r2, r0
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	1ad3      	subs	r3, r2, r3
 800fe4c:	2b64      	cmp	r3, #100	@ 0x64
 800fe4e:	d901      	bls.n	800fe54 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800fe50:	2303      	movs	r3, #3
 800fe52:	e104      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe54:	4b29      	ldr	r3, [pc, #164]	@ (800fefc <HAL_RCC_OscConfig+0x4ec>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d0f0      	beq.n	800fe42 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	689b      	ldr	r3, [r3, #8]
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d106      	bne.n	800fe76 <HAL_RCC_OscConfig+0x466>
 800fe68:	4b1e      	ldr	r3, [pc, #120]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fe6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe6c:	4a1d      	ldr	r2, [pc, #116]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fe6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fe72:	6353      	str	r3, [r2, #52]	@ 0x34
 800fe74:	e02d      	b.n	800fed2 <HAL_RCC_OscConfig+0x4c2>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	689b      	ldr	r3, [r3, #8]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d10c      	bne.n	800fe98 <HAL_RCC_OscConfig+0x488>
 800fe7e:	4b19      	ldr	r3, [pc, #100]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fe80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe82:	4a18      	ldr	r2, [pc, #96]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fe84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fe88:	6353      	str	r3, [r2, #52]	@ 0x34
 800fe8a:	4b16      	ldr	r3, [pc, #88]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fe8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe8e:	4a15      	ldr	r2, [pc, #84]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fe90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fe94:	6353      	str	r3, [r2, #52]	@ 0x34
 800fe96:	e01c      	b.n	800fed2 <HAL_RCC_OscConfig+0x4c2>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	689b      	ldr	r3, [r3, #8]
 800fe9c:	2b05      	cmp	r3, #5
 800fe9e:	d10c      	bne.n	800feba <HAL_RCC_OscConfig+0x4aa>
 800fea0:	4b10      	ldr	r3, [pc, #64]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fea4:	4a0f      	ldr	r2, [pc, #60]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fea6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800feaa:	6353      	str	r3, [r2, #52]	@ 0x34
 800feac:	4b0d      	ldr	r3, [pc, #52]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800feae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800feb0:	4a0c      	ldr	r2, [pc, #48]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800feb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800feb6:	6353      	str	r3, [r2, #52]	@ 0x34
 800feb8:	e00b      	b.n	800fed2 <HAL_RCC_OscConfig+0x4c2>
 800feba:	4b0a      	ldr	r3, [pc, #40]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800febc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800febe:	4a09      	ldr	r2, [pc, #36]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fec4:	6353      	str	r3, [r2, #52]	@ 0x34
 800fec6:	4b07      	ldr	r3, [pc, #28]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800feca:	4a06      	ldr	r2, [pc, #24]	@ (800fee4 <HAL_RCC_OscConfig+0x4d4>)
 800fecc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fed0:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	689b      	ldr	r3, [r3, #8]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d024      	beq.n	800ff24 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800feda:	f7fb ff6b 	bl	800bdb4 <HAL_GetTick>
 800fede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fee0:	e019      	b.n	800ff16 <HAL_RCC_OscConfig+0x506>
 800fee2:	bf00      	nop
 800fee4:	40023800 	.word	0x40023800
 800fee8:	0801406c 	.word	0x0801406c
 800feec:	20000000 	.word	0x20000000
 800fef0:	20000190 	.word	0x20000190
 800fef4:	42470020 	.word	0x42470020
 800fef8:	42470680 	.word	0x42470680
 800fefc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff00:	f7fb ff58 	bl	800bdb4 <HAL_GetTick>
 800ff04:	4602      	mov	r2, r0
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	d901      	bls.n	800ff16 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800ff12:	2303      	movs	r3, #3
 800ff14:	e0a3      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ff16:	4b54      	ldr	r3, [pc, #336]	@ (8010068 <HAL_RCC_OscConfig+0x658>)
 800ff18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d0ee      	beq.n	800ff00 <HAL_RCC_OscConfig+0x4f0>
 800ff22:	e014      	b.n	800ff4e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ff24:	f7fb ff46 	bl	800bdb4 <HAL_GetTick>
 800ff28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ff2a:	e00a      	b.n	800ff42 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff2c:	f7fb ff42 	bl	800bdb4 <HAL_GetTick>
 800ff30:	4602      	mov	r2, r0
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	1ad3      	subs	r3, r2, r3
 800ff36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d901      	bls.n	800ff42 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800ff3e:	2303      	movs	r3, #3
 800ff40:	e08d      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ff42:	4b49      	ldr	r3, [pc, #292]	@ (8010068 <HAL_RCC_OscConfig+0x658>)
 800ff44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d1ee      	bne.n	800ff2c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ff4e:	7ffb      	ldrb	r3, [r7, #31]
 800ff50:	2b01      	cmp	r3, #1
 800ff52:	d105      	bne.n	800ff60 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ff54:	4b44      	ldr	r3, [pc, #272]	@ (8010068 <HAL_RCC_OscConfig+0x658>)
 800ff56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff58:	4a43      	ldr	r2, [pc, #268]	@ (8010068 <HAL_RCC_OscConfig+0x658>)
 800ff5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ff5e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d079      	beq.n	801005c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ff68:	69bb      	ldr	r3, [r7, #24]
 800ff6a:	2b0c      	cmp	r3, #12
 800ff6c:	d056      	beq.n	801001c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff72:	2b02      	cmp	r3, #2
 800ff74:	d13b      	bne.n	800ffee <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ff76:	4b3d      	ldr	r3, [pc, #244]	@ (801006c <HAL_RCC_OscConfig+0x65c>)
 800ff78:	2200      	movs	r2, #0
 800ff7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff7c:	f7fb ff1a 	bl	800bdb4 <HAL_GetTick>
 800ff80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ff82:	e008      	b.n	800ff96 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ff84:	f7fb ff16 	bl	800bdb4 <HAL_GetTick>
 800ff88:	4602      	mov	r2, r0
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	1ad3      	subs	r3, r2, r3
 800ff8e:	2b02      	cmp	r3, #2
 800ff90:	d901      	bls.n	800ff96 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800ff92:	2303      	movs	r3, #3
 800ff94:	e063      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ff96:	4b34      	ldr	r3, [pc, #208]	@ (8010068 <HAL_RCC_OscConfig+0x658>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d1f0      	bne.n	800ff84 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ffa2:	4b31      	ldr	r3, [pc, #196]	@ (8010068 <HAL_RCC_OscConfig+0x658>)
 800ffa4:	689b      	ldr	r3, [r3, #8]
 800ffa6:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffb2:	4319      	orrs	r1, r3
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffb8:	430b      	orrs	r3, r1
 800ffba:	492b      	ldr	r1, [pc, #172]	@ (8010068 <HAL_RCC_OscConfig+0x658>)
 800ffbc:	4313      	orrs	r3, r2
 800ffbe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ffc0:	4b2a      	ldr	r3, [pc, #168]	@ (801006c <HAL_RCC_OscConfig+0x65c>)
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ffc6:	f7fb fef5 	bl	800bdb4 <HAL_GetTick>
 800ffca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ffcc:	e008      	b.n	800ffe0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ffce:	f7fb fef1 	bl	800bdb4 <HAL_GetTick>
 800ffd2:	4602      	mov	r2, r0
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	1ad3      	subs	r3, r2, r3
 800ffd8:	2b02      	cmp	r3, #2
 800ffda:	d901      	bls.n	800ffe0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800ffdc:	2303      	movs	r3, #3
 800ffde:	e03e      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ffe0:	4b21      	ldr	r3, [pc, #132]	@ (8010068 <HAL_RCC_OscConfig+0x658>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d0f0      	beq.n	800ffce <HAL_RCC_OscConfig+0x5be>
 800ffec:	e036      	b.n	801005c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ffee:	4b1f      	ldr	r3, [pc, #124]	@ (801006c <HAL_RCC_OscConfig+0x65c>)
 800fff0:	2200      	movs	r2, #0
 800fff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fff4:	f7fb fede 	bl	800bdb4 <HAL_GetTick>
 800fff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fffa:	e008      	b.n	801000e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fffc:	f7fb feda 	bl	800bdb4 <HAL_GetTick>
 8010000:	4602      	mov	r2, r0
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	2b02      	cmp	r3, #2
 8010008:	d901      	bls.n	801000e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 801000a:	2303      	movs	r3, #3
 801000c:	e027      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801000e:	4b16      	ldr	r3, [pc, #88]	@ (8010068 <HAL_RCC_OscConfig+0x658>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010016:	2b00      	cmp	r3, #0
 8010018:	d1f0      	bne.n	800fffc <HAL_RCC_OscConfig+0x5ec>
 801001a:	e01f      	b.n	801005c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010020:	2b01      	cmp	r3, #1
 8010022:	d101      	bne.n	8010028 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8010024:	2301      	movs	r3, #1
 8010026:	e01a      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8010028:	4b0f      	ldr	r3, [pc, #60]	@ (8010068 <HAL_RCC_OscConfig+0x658>)
 801002a:	689b      	ldr	r3, [r3, #8]
 801002c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010038:	429a      	cmp	r2, r3
 801003a:	d10d      	bne.n	8010058 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010046:	429a      	cmp	r2, r3
 8010048:	d106      	bne.n	8010058 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8010054:	429a      	cmp	r2, r3
 8010056:	d001      	beq.n	801005c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8010058:	2301      	movs	r3, #1
 801005a:	e000      	b.n	801005e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 801005c:	2300      	movs	r3, #0
}
 801005e:	4618      	mov	r0, r3
 8010060:	3720      	adds	r7, #32
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	40023800 	.word	0x40023800
 801006c:	42470060 	.word	0x42470060

08010070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d101      	bne.n	8010084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010080:	2301      	movs	r3, #1
 8010082:	e11a      	b.n	80102ba <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010084:	4b8f      	ldr	r3, [pc, #572]	@ (80102c4 <HAL_RCC_ClockConfig+0x254>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f003 0301 	and.w	r3, r3, #1
 801008c:	683a      	ldr	r2, [r7, #0]
 801008e:	429a      	cmp	r2, r3
 8010090:	d919      	bls.n	80100c6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	2b01      	cmp	r3, #1
 8010096:	d105      	bne.n	80100a4 <HAL_RCC_ClockConfig+0x34>
 8010098:	4b8a      	ldr	r3, [pc, #552]	@ (80102c4 <HAL_RCC_ClockConfig+0x254>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4a89      	ldr	r2, [pc, #548]	@ (80102c4 <HAL_RCC_ClockConfig+0x254>)
 801009e:	f043 0304 	orr.w	r3, r3, #4
 80100a2:	6013      	str	r3, [r2, #0]
 80100a4:	4b87      	ldr	r3, [pc, #540]	@ (80102c4 <HAL_RCC_ClockConfig+0x254>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f023 0201 	bic.w	r2, r3, #1
 80100ac:	4985      	ldr	r1, [pc, #532]	@ (80102c4 <HAL_RCC_ClockConfig+0x254>)
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	4313      	orrs	r3, r2
 80100b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80100b4:	4b83      	ldr	r3, [pc, #524]	@ (80102c4 <HAL_RCC_ClockConfig+0x254>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	f003 0301 	and.w	r3, r3, #1
 80100bc:	683a      	ldr	r2, [r7, #0]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d001      	beq.n	80100c6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80100c2:	2301      	movs	r3, #1
 80100c4:	e0f9      	b.n	80102ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	f003 0302 	and.w	r3, r3, #2
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d008      	beq.n	80100e4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80100d2:	4b7d      	ldr	r3, [pc, #500]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 80100d4:	689b      	ldr	r3, [r3, #8]
 80100d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	497a      	ldr	r1, [pc, #488]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 80100e0:	4313      	orrs	r3, r2
 80100e2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f003 0301 	and.w	r3, r3, #1
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	f000 808e 	beq.w	801020e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	685b      	ldr	r3, [r3, #4]
 80100f6:	2b02      	cmp	r3, #2
 80100f8:	d107      	bne.n	801010a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80100fa:	4b73      	ldr	r3, [pc, #460]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010102:	2b00      	cmp	r3, #0
 8010104:	d121      	bne.n	801014a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8010106:	2301      	movs	r3, #1
 8010108:	e0d7      	b.n	80102ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	2b03      	cmp	r3, #3
 8010110:	d107      	bne.n	8010122 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010112:	4b6d      	ldr	r3, [pc, #436]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801011a:	2b00      	cmp	r3, #0
 801011c:	d115      	bne.n	801014a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 801011e:	2301      	movs	r3, #1
 8010120:	e0cb      	b.n	80102ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	685b      	ldr	r3, [r3, #4]
 8010126:	2b01      	cmp	r3, #1
 8010128:	d107      	bne.n	801013a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801012a:	4b67      	ldr	r3, [pc, #412]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	f003 0302 	and.w	r3, r3, #2
 8010132:	2b00      	cmp	r3, #0
 8010134:	d109      	bne.n	801014a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8010136:	2301      	movs	r3, #1
 8010138:	e0bf      	b.n	80102ba <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801013a:	4b63      	ldr	r3, [pc, #396]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010142:	2b00      	cmp	r3, #0
 8010144:	d101      	bne.n	801014a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8010146:	2301      	movs	r3, #1
 8010148:	e0b7      	b.n	80102ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801014a:	4b5f      	ldr	r3, [pc, #380]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 801014c:	689b      	ldr	r3, [r3, #8]
 801014e:	f023 0203 	bic.w	r2, r3, #3
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	495c      	ldr	r1, [pc, #368]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 8010158:	4313      	orrs	r3, r2
 801015a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801015c:	f7fb fe2a 	bl	800bdb4 <HAL_GetTick>
 8010160:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	2b02      	cmp	r3, #2
 8010168:	d112      	bne.n	8010190 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801016a:	e00a      	b.n	8010182 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801016c:	f7fb fe22 	bl	800bdb4 <HAL_GetTick>
 8010170:	4602      	mov	r2, r0
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	1ad3      	subs	r3, r2, r3
 8010176:	f241 3288 	movw	r2, #5000	@ 0x1388
 801017a:	4293      	cmp	r3, r2
 801017c:	d901      	bls.n	8010182 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 801017e:	2303      	movs	r3, #3
 8010180:	e09b      	b.n	80102ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010182:	4b51      	ldr	r3, [pc, #324]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 8010184:	689b      	ldr	r3, [r3, #8]
 8010186:	f003 030c 	and.w	r3, r3, #12
 801018a:	2b08      	cmp	r3, #8
 801018c:	d1ee      	bne.n	801016c <HAL_RCC_ClockConfig+0xfc>
 801018e:	e03e      	b.n	801020e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	2b03      	cmp	r3, #3
 8010196:	d112      	bne.n	80101be <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010198:	e00a      	b.n	80101b0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801019a:	f7fb fe0b 	bl	800bdb4 <HAL_GetTick>
 801019e:	4602      	mov	r2, r0
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	1ad3      	subs	r3, r2, r3
 80101a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101a8:	4293      	cmp	r3, r2
 80101aa:	d901      	bls.n	80101b0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80101ac:	2303      	movs	r3, #3
 80101ae:	e084      	b.n	80102ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80101b0:	4b45      	ldr	r3, [pc, #276]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 80101b2:	689b      	ldr	r3, [r3, #8]
 80101b4:	f003 030c 	and.w	r3, r3, #12
 80101b8:	2b0c      	cmp	r3, #12
 80101ba:	d1ee      	bne.n	801019a <HAL_RCC_ClockConfig+0x12a>
 80101bc:	e027      	b.n	801020e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	2b01      	cmp	r3, #1
 80101c4:	d11d      	bne.n	8010202 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80101c6:	e00a      	b.n	80101de <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80101c8:	f7fb fdf4 	bl	800bdb4 <HAL_GetTick>
 80101cc:	4602      	mov	r2, r0
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	1ad3      	subs	r3, r2, r3
 80101d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d901      	bls.n	80101de <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80101da:	2303      	movs	r3, #3
 80101dc:	e06d      	b.n	80102ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80101de:	4b3a      	ldr	r3, [pc, #232]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 80101e0:	689b      	ldr	r3, [r3, #8]
 80101e2:	f003 030c 	and.w	r3, r3, #12
 80101e6:	2b04      	cmp	r3, #4
 80101e8:	d1ee      	bne.n	80101c8 <HAL_RCC_ClockConfig+0x158>
 80101ea:	e010      	b.n	801020e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80101ec:	f7fb fde2 	bl	800bdb4 <HAL_GetTick>
 80101f0:	4602      	mov	r2, r0
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	1ad3      	subs	r3, r2, r3
 80101f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d901      	bls.n	8010202 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80101fe:	2303      	movs	r3, #3
 8010200:	e05b      	b.n	80102ba <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8010202:	4b31      	ldr	r3, [pc, #196]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 8010204:	689b      	ldr	r3, [r3, #8]
 8010206:	f003 030c 	and.w	r3, r3, #12
 801020a:	2b00      	cmp	r3, #0
 801020c:	d1ee      	bne.n	80101ec <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801020e:	4b2d      	ldr	r3, [pc, #180]	@ (80102c4 <HAL_RCC_ClockConfig+0x254>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f003 0301 	and.w	r3, r3, #1
 8010216:	683a      	ldr	r2, [r7, #0]
 8010218:	429a      	cmp	r2, r3
 801021a:	d219      	bcs.n	8010250 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	2b01      	cmp	r3, #1
 8010220:	d105      	bne.n	801022e <HAL_RCC_ClockConfig+0x1be>
 8010222:	4b28      	ldr	r3, [pc, #160]	@ (80102c4 <HAL_RCC_ClockConfig+0x254>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	4a27      	ldr	r2, [pc, #156]	@ (80102c4 <HAL_RCC_ClockConfig+0x254>)
 8010228:	f043 0304 	orr.w	r3, r3, #4
 801022c:	6013      	str	r3, [r2, #0]
 801022e:	4b25      	ldr	r3, [pc, #148]	@ (80102c4 <HAL_RCC_ClockConfig+0x254>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	f023 0201 	bic.w	r2, r3, #1
 8010236:	4923      	ldr	r1, [pc, #140]	@ (80102c4 <HAL_RCC_ClockConfig+0x254>)
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	4313      	orrs	r3, r2
 801023c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801023e:	4b21      	ldr	r3, [pc, #132]	@ (80102c4 <HAL_RCC_ClockConfig+0x254>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	f003 0301 	and.w	r3, r3, #1
 8010246:	683a      	ldr	r2, [r7, #0]
 8010248:	429a      	cmp	r2, r3
 801024a:	d001      	beq.n	8010250 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 801024c:	2301      	movs	r3, #1
 801024e:	e034      	b.n	80102ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f003 0304 	and.w	r3, r3, #4
 8010258:	2b00      	cmp	r3, #0
 801025a:	d008      	beq.n	801026e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801025c:	4b1a      	ldr	r3, [pc, #104]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 801025e:	689b      	ldr	r3, [r3, #8]
 8010260:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	4917      	ldr	r1, [pc, #92]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 801026a:	4313      	orrs	r3, r2
 801026c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	f003 0308 	and.w	r3, r3, #8
 8010276:	2b00      	cmp	r3, #0
 8010278:	d009      	beq.n	801028e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801027a:	4b13      	ldr	r3, [pc, #76]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 801027c:	689b      	ldr	r3, [r3, #8]
 801027e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	691b      	ldr	r3, [r3, #16]
 8010286:	00db      	lsls	r3, r3, #3
 8010288:	490f      	ldr	r1, [pc, #60]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 801028a:	4313      	orrs	r3, r2
 801028c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801028e:	f000 f823 	bl	80102d8 <HAL_RCC_GetSysClockFreq>
 8010292:	4602      	mov	r2, r0
 8010294:	4b0c      	ldr	r3, [pc, #48]	@ (80102c8 <HAL_RCC_ClockConfig+0x258>)
 8010296:	689b      	ldr	r3, [r3, #8]
 8010298:	091b      	lsrs	r3, r3, #4
 801029a:	f003 030f 	and.w	r3, r3, #15
 801029e:	490b      	ldr	r1, [pc, #44]	@ (80102cc <HAL_RCC_ClockConfig+0x25c>)
 80102a0:	5ccb      	ldrb	r3, [r1, r3]
 80102a2:	fa22 f303 	lsr.w	r3, r2, r3
 80102a6:	4a0a      	ldr	r2, [pc, #40]	@ (80102d0 <HAL_RCC_ClockConfig+0x260>)
 80102a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80102aa:	4b0a      	ldr	r3, [pc, #40]	@ (80102d4 <HAL_RCC_ClockConfig+0x264>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fb fd34 	bl	800bd1c <HAL_InitTick>
 80102b4:	4603      	mov	r3, r0
 80102b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80102b8:	7afb      	ldrb	r3, [r7, #11]
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3710      	adds	r7, #16
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	40023c00 	.word	0x40023c00
 80102c8:	40023800 	.word	0x40023800
 80102cc:	0801406c 	.word	0x0801406c
 80102d0:	20000000 	.word	0x20000000
 80102d4:	20000190 	.word	0x20000190

080102d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80102d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80102dc:	b092      	sub	sp, #72	@ 0x48
 80102de:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80102e0:	4b79      	ldr	r3, [pc, #484]	@ (80104c8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80102e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102e8:	f003 030c 	and.w	r3, r3, #12
 80102ec:	2b0c      	cmp	r3, #12
 80102ee:	d00d      	beq.n	801030c <HAL_RCC_GetSysClockFreq+0x34>
 80102f0:	2b0c      	cmp	r3, #12
 80102f2:	f200 80d5 	bhi.w	80104a0 <HAL_RCC_GetSysClockFreq+0x1c8>
 80102f6:	2b04      	cmp	r3, #4
 80102f8:	d002      	beq.n	8010300 <HAL_RCC_GetSysClockFreq+0x28>
 80102fa:	2b08      	cmp	r3, #8
 80102fc:	d003      	beq.n	8010306 <HAL_RCC_GetSysClockFreq+0x2e>
 80102fe:	e0cf      	b.n	80104a0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010300:	4b72      	ldr	r3, [pc, #456]	@ (80104cc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8010302:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8010304:	e0da      	b.n	80104bc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8010306:	4b72      	ldr	r3, [pc, #456]	@ (80104d0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8010308:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 801030a:	e0d7      	b.n	80104bc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801030c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801030e:	0c9b      	lsrs	r3, r3, #18
 8010310:	f003 020f 	and.w	r2, r3, #15
 8010314:	4b6f      	ldr	r3, [pc, #444]	@ (80104d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8010316:	5c9b      	ldrb	r3, [r3, r2]
 8010318:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801031a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801031c:	0d9b      	lsrs	r3, r3, #22
 801031e:	f003 0303 	and.w	r3, r3, #3
 8010322:	3301      	adds	r3, #1
 8010324:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010326:	4b68      	ldr	r3, [pc, #416]	@ (80104c8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8010328:	689b      	ldr	r3, [r3, #8]
 801032a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801032e:	2b00      	cmp	r3, #0
 8010330:	d05d      	beq.n	80103ee <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8010332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010334:	2200      	movs	r2, #0
 8010336:	4618      	mov	r0, r3
 8010338:	4611      	mov	r1, r2
 801033a:	4604      	mov	r4, r0
 801033c:	460d      	mov	r5, r1
 801033e:	4622      	mov	r2, r4
 8010340:	462b      	mov	r3, r5
 8010342:	f04f 0000 	mov.w	r0, #0
 8010346:	f04f 0100 	mov.w	r1, #0
 801034a:	0159      	lsls	r1, r3, #5
 801034c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010350:	0150      	lsls	r0, r2, #5
 8010352:	4602      	mov	r2, r0
 8010354:	460b      	mov	r3, r1
 8010356:	4621      	mov	r1, r4
 8010358:	1a51      	subs	r1, r2, r1
 801035a:	6139      	str	r1, [r7, #16]
 801035c:	4629      	mov	r1, r5
 801035e:	eb63 0301 	sbc.w	r3, r3, r1
 8010362:	617b      	str	r3, [r7, #20]
 8010364:	f04f 0200 	mov.w	r2, #0
 8010368:	f04f 0300 	mov.w	r3, #0
 801036c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010370:	4659      	mov	r1, fp
 8010372:	018b      	lsls	r3, r1, #6
 8010374:	4651      	mov	r1, sl
 8010376:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801037a:	4651      	mov	r1, sl
 801037c:	018a      	lsls	r2, r1, #6
 801037e:	46d4      	mov	ip, sl
 8010380:	ebb2 080c 	subs.w	r8, r2, ip
 8010384:	4659      	mov	r1, fp
 8010386:	eb63 0901 	sbc.w	r9, r3, r1
 801038a:	f04f 0200 	mov.w	r2, #0
 801038e:	f04f 0300 	mov.w	r3, #0
 8010392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801039a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801039e:	4690      	mov	r8, r2
 80103a0:	4699      	mov	r9, r3
 80103a2:	4623      	mov	r3, r4
 80103a4:	eb18 0303 	adds.w	r3, r8, r3
 80103a8:	60bb      	str	r3, [r7, #8]
 80103aa:	462b      	mov	r3, r5
 80103ac:	eb49 0303 	adc.w	r3, r9, r3
 80103b0:	60fb      	str	r3, [r7, #12]
 80103b2:	f04f 0200 	mov.w	r2, #0
 80103b6:	f04f 0300 	mov.w	r3, #0
 80103ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80103be:	4629      	mov	r1, r5
 80103c0:	024b      	lsls	r3, r1, #9
 80103c2:	4620      	mov	r0, r4
 80103c4:	4629      	mov	r1, r5
 80103c6:	4604      	mov	r4, r0
 80103c8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80103cc:	4601      	mov	r1, r0
 80103ce:	024a      	lsls	r2, r1, #9
 80103d0:	4610      	mov	r0, r2
 80103d2:	4619      	mov	r1, r3
 80103d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103d6:	2200      	movs	r2, #0
 80103d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80103da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80103dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80103e0:	f7f0 fecc 	bl	800117c <__aeabi_uldivmod>
 80103e4:	4602      	mov	r2, r0
 80103e6:	460b      	mov	r3, r1
 80103e8:	4613      	mov	r3, r2
 80103ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80103ec:	e055      	b.n	801049a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80103ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103f0:	2200      	movs	r2, #0
 80103f2:	623b      	str	r3, [r7, #32]
 80103f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80103f6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80103fa:	4642      	mov	r2, r8
 80103fc:	464b      	mov	r3, r9
 80103fe:	f04f 0000 	mov.w	r0, #0
 8010402:	f04f 0100 	mov.w	r1, #0
 8010406:	0159      	lsls	r1, r3, #5
 8010408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801040c:	0150      	lsls	r0, r2, #5
 801040e:	4602      	mov	r2, r0
 8010410:	460b      	mov	r3, r1
 8010412:	46c4      	mov	ip, r8
 8010414:	ebb2 0a0c 	subs.w	sl, r2, ip
 8010418:	4640      	mov	r0, r8
 801041a:	4649      	mov	r1, r9
 801041c:	468c      	mov	ip, r1
 801041e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8010422:	f04f 0200 	mov.w	r2, #0
 8010426:	f04f 0300 	mov.w	r3, #0
 801042a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801042e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8010432:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8010436:	ebb2 040a 	subs.w	r4, r2, sl
 801043a:	eb63 050b 	sbc.w	r5, r3, fp
 801043e:	f04f 0200 	mov.w	r2, #0
 8010442:	f04f 0300 	mov.w	r3, #0
 8010446:	00eb      	lsls	r3, r5, #3
 8010448:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801044c:	00e2      	lsls	r2, r4, #3
 801044e:	4614      	mov	r4, r2
 8010450:	461d      	mov	r5, r3
 8010452:	4603      	mov	r3, r0
 8010454:	18e3      	adds	r3, r4, r3
 8010456:	603b      	str	r3, [r7, #0]
 8010458:	460b      	mov	r3, r1
 801045a:	eb45 0303 	adc.w	r3, r5, r3
 801045e:	607b      	str	r3, [r7, #4]
 8010460:	f04f 0200 	mov.w	r2, #0
 8010464:	f04f 0300 	mov.w	r3, #0
 8010468:	e9d7 4500 	ldrd	r4, r5, [r7]
 801046c:	4629      	mov	r1, r5
 801046e:	028b      	lsls	r3, r1, #10
 8010470:	4620      	mov	r0, r4
 8010472:	4629      	mov	r1, r5
 8010474:	4604      	mov	r4, r0
 8010476:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 801047a:	4601      	mov	r1, r0
 801047c:	028a      	lsls	r2, r1, #10
 801047e:	4610      	mov	r0, r2
 8010480:	4619      	mov	r1, r3
 8010482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010484:	2200      	movs	r2, #0
 8010486:	61bb      	str	r3, [r7, #24]
 8010488:	61fa      	str	r2, [r7, #28]
 801048a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801048e:	f7f0 fe75 	bl	800117c <__aeabi_uldivmod>
 8010492:	4602      	mov	r2, r0
 8010494:	460b      	mov	r3, r1
 8010496:	4613      	mov	r3, r2
 8010498:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 801049a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801049c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 801049e:	e00d      	b.n	80104bc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80104a0:	4b09      	ldr	r3, [pc, #36]	@ (80104c8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80104a2:	685b      	ldr	r3, [r3, #4]
 80104a4:	0b5b      	lsrs	r3, r3, #13
 80104a6:	f003 0307 	and.w	r3, r3, #7
 80104aa:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80104ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ae:	3301      	adds	r3, #1
 80104b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80104b4:	fa02 f303 	lsl.w	r3, r2, r3
 80104b8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80104ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80104bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3748      	adds	r7, #72	@ 0x48
 80104c2:	46bd      	mov	sp, r7
 80104c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80104c8:	40023800 	.word	0x40023800
 80104cc:	00f42400 	.word	0x00f42400
 80104d0:	007a1200 	.word	0x007a1200
 80104d4:	08014060 	.word	0x08014060

080104d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80104d8:	b480      	push	{r7}
 80104da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80104dc:	4b02      	ldr	r3, [pc, #8]	@ (80104e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80104de:	681b      	ldr	r3, [r3, #0]
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bc80      	pop	{r7}
 80104e6:	4770      	bx	lr
 80104e8:	20000000 	.word	0x20000000

080104ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80104f0:	f7ff fff2 	bl	80104d8 <HAL_RCC_GetHCLKFreq>
 80104f4:	4602      	mov	r2, r0
 80104f6:	4b05      	ldr	r3, [pc, #20]	@ (801050c <HAL_RCC_GetPCLK1Freq+0x20>)
 80104f8:	689b      	ldr	r3, [r3, #8]
 80104fa:	0a1b      	lsrs	r3, r3, #8
 80104fc:	f003 0307 	and.w	r3, r3, #7
 8010500:	4903      	ldr	r1, [pc, #12]	@ (8010510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010502:	5ccb      	ldrb	r3, [r1, r3]
 8010504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010508:	4618      	mov	r0, r3
 801050a:	bd80      	pop	{r7, pc}
 801050c:	40023800 	.word	0x40023800
 8010510:	0801407c 	.word	0x0801407c

08010514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8010518:	f7ff ffde 	bl	80104d8 <HAL_RCC_GetHCLKFreq>
 801051c:	4602      	mov	r2, r0
 801051e:	4b05      	ldr	r3, [pc, #20]	@ (8010534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010520:	689b      	ldr	r3, [r3, #8]
 8010522:	0adb      	lsrs	r3, r3, #11
 8010524:	f003 0307 	and.w	r3, r3, #7
 8010528:	4903      	ldr	r1, [pc, #12]	@ (8010538 <HAL_RCC_GetPCLK2Freq+0x24>)
 801052a:	5ccb      	ldrb	r3, [r1, r3]
 801052c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010530:	4618      	mov	r0, r3
 8010532:	bd80      	pop	{r7, pc}
 8010534:	40023800 	.word	0x40023800
 8010538:	0801407c 	.word	0x0801407c

0801053c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 801053c:	b480      	push	{r7}
 801053e:	b087      	sub	sp, #28
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8010544:	2300      	movs	r3, #0
 8010546:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8010548:	4b29      	ldr	r3, [pc, #164]	@ (80105f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 801054a:	689b      	ldr	r3, [r3, #8]
 801054c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010550:	2b00      	cmp	r3, #0
 8010552:	d12c      	bne.n	80105ae <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010554:	4b26      	ldr	r3, [pc, #152]	@ (80105f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8010556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801055c:	2b00      	cmp	r3, #0
 801055e:	d005      	beq.n	801056c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8010560:	4b24      	ldr	r3, [pc, #144]	@ (80105f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8010568:	617b      	str	r3, [r7, #20]
 801056a:	e016      	b.n	801059a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801056c:	4b20      	ldr	r3, [pc, #128]	@ (80105f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 801056e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010570:	4a1f      	ldr	r2, [pc, #124]	@ (80105f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8010572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010576:	6253      	str	r3, [r2, #36]	@ 0x24
 8010578:	4b1d      	ldr	r3, [pc, #116]	@ (80105f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 801057a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801057c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010580:	60fb      	str	r3, [r7, #12]
 8010582:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8010584:	4b1b      	ldr	r3, [pc, #108]	@ (80105f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 801058c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 801058e:	4b18      	ldr	r3, [pc, #96]	@ (80105f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8010590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010592:	4a17      	ldr	r2, [pc, #92]	@ (80105f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8010594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010598:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 801059a:	697b      	ldr	r3, [r7, #20]
 801059c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80105a0:	d105      	bne.n	80105ae <RCC_SetFlashLatencyFromMSIRange+0x72>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80105a8:	d101      	bne.n	80105ae <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80105aa:	2301      	movs	r3, #1
 80105ac:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d105      	bne.n	80105c0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80105b4:	4b10      	ldr	r3, [pc, #64]	@ (80105f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	4a0f      	ldr	r2, [pc, #60]	@ (80105f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80105ba:	f043 0304 	orr.w	r3, r3, #4
 80105be:	6013      	str	r3, [r2, #0]
 80105c0:	4b0d      	ldr	r3, [pc, #52]	@ (80105f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	f023 0201 	bic.w	r2, r3, #1
 80105c8:	490b      	ldr	r1, [pc, #44]	@ (80105f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	4313      	orrs	r3, r2
 80105ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80105d0:	4b09      	ldr	r3, [pc, #36]	@ (80105f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f003 0301 	and.w	r3, r3, #1
 80105d8:	693a      	ldr	r2, [r7, #16]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d001      	beq.n	80105e2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80105de:	2301      	movs	r3, #1
 80105e0:	e000      	b.n	80105e4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80105e2:	2300      	movs	r3, #0
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	371c      	adds	r7, #28
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bc80      	pop	{r7}
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop
 80105f0:	40023800 	.word	0x40023800
 80105f4:	40007000 	.word	0x40007000
 80105f8:	40023c00 	.word	0x40023c00

080105fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d101      	bne.n	801060e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801060a:	2301      	movs	r3, #1
 801060c:	e07b      	b.n	8010706 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010612:	2b00      	cmp	r3, #0
 8010614:	d108      	bne.n	8010628 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801061e:	d009      	beq.n	8010634 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	61da      	str	r2, [r3, #28]
 8010626:	e005      	b.n	8010634 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2200      	movs	r2, #0
 801062c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2200      	movs	r2, #0
 8010632:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2200      	movs	r2, #0
 8010638:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010640:	b2db      	uxtb	r3, r3
 8010642:	2b00      	cmp	r3, #0
 8010644:	d106      	bne.n	8010654 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2200      	movs	r2, #0
 801064a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f7f1 ff38 	bl	80024c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2202      	movs	r2, #2
 8010658:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801066a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	689b      	ldr	r3, [r3, #8]
 8010678:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 801067c:	431a      	orrs	r2, r3
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	68db      	ldr	r3, [r3, #12]
 8010682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010686:	431a      	orrs	r2, r3
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	691b      	ldr	r3, [r3, #16]
 801068c:	f003 0302 	and.w	r3, r3, #2
 8010690:	431a      	orrs	r2, r3
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	695b      	ldr	r3, [r3, #20]
 8010696:	f003 0301 	and.w	r3, r3, #1
 801069a:	431a      	orrs	r2, r3
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	699b      	ldr	r3, [r3, #24]
 80106a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80106a4:	431a      	orrs	r2, r3
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	69db      	ldr	r3, [r3, #28]
 80106aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80106ae:	431a      	orrs	r2, r3
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6a1b      	ldr	r3, [r3, #32]
 80106b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106b8:	ea42 0103 	orr.w	r1, r2, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	430a      	orrs	r2, r1
 80106ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	699b      	ldr	r3, [r3, #24]
 80106d0:	0c1b      	lsrs	r3, r3, #16
 80106d2:	f003 0104 	and.w	r1, r3, #4
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106da:	f003 0210 	and.w	r2, r3, #16
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	430a      	orrs	r2, r1
 80106e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	69da      	ldr	r2, [r3, #28]
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80106f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2200      	movs	r2, #0
 80106fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2201      	movs	r2, #1
 8010700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8010704:	2300      	movs	r3, #0
}
 8010706:	4618      	mov	r0, r3
 8010708:	3708      	adds	r7, #8
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}

0801070e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801070e:	b580      	push	{r7, lr}
 8010710:	b088      	sub	sp, #32
 8010712:	af00      	add	r7, sp, #0
 8010714:	60f8      	str	r0, [r7, #12]
 8010716:	60b9      	str	r1, [r7, #8]
 8010718:	603b      	str	r3, [r7, #0]
 801071a:	4613      	mov	r3, r2
 801071c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801071e:	2300      	movs	r3, #0
 8010720:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010728:	2b01      	cmp	r3, #1
 801072a:	d101      	bne.n	8010730 <HAL_SPI_Transmit+0x22>
 801072c:	2302      	movs	r3, #2
 801072e:	e12d      	b.n	801098c <HAL_SPI_Transmit+0x27e>
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2201      	movs	r2, #1
 8010734:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010738:	f7fb fb3c 	bl	800bdb4 <HAL_GetTick>
 801073c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801073e:	88fb      	ldrh	r3, [r7, #6]
 8010740:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010748:	b2db      	uxtb	r3, r3
 801074a:	2b01      	cmp	r3, #1
 801074c:	d002      	beq.n	8010754 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801074e:	2302      	movs	r3, #2
 8010750:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010752:	e116      	b.n	8010982 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d002      	beq.n	8010760 <HAL_SPI_Transmit+0x52>
 801075a:	88fb      	ldrh	r3, [r7, #6]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d102      	bne.n	8010766 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010760:	2301      	movs	r3, #1
 8010762:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010764:	e10d      	b.n	8010982 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2203      	movs	r2, #3
 801076a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	2200      	movs	r2, #0
 8010772:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	68ba      	ldr	r2, [r7, #8]
 8010778:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	88fa      	ldrh	r2, [r7, #6]
 801077e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	88fa      	ldrh	r2, [r7, #6]
 8010784:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	2200      	movs	r2, #0
 801078a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2200      	movs	r2, #0
 8010790:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	2200      	movs	r2, #0
 8010796:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2200      	movs	r2, #0
 801079c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	2200      	movs	r2, #0
 80107a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	689b      	ldr	r3, [r3, #8]
 80107a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80107ac:	d10f      	bne.n	80107ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80107bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	681a      	ldr	r2, [r3, #0]
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80107cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107d8:	2b40      	cmp	r3, #64	@ 0x40
 80107da:	d007      	beq.n	80107ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	681a      	ldr	r2, [r3, #0]
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80107ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	68db      	ldr	r3, [r3, #12]
 80107f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80107f4:	d14f      	bne.n	8010896 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d002      	beq.n	8010804 <HAL_SPI_Transmit+0xf6>
 80107fe:	8afb      	ldrh	r3, [r7, #22]
 8010800:	2b01      	cmp	r3, #1
 8010802:	d142      	bne.n	801088a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010808:	881a      	ldrh	r2, [r3, #0]
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010814:	1c9a      	adds	r2, r3, #2
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801081e:	b29b      	uxth	r3, r3
 8010820:	3b01      	subs	r3, #1
 8010822:	b29a      	uxth	r2, r3
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010828:	e02f      	b.n	801088a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	689b      	ldr	r3, [r3, #8]
 8010830:	f003 0302 	and.w	r3, r3, #2
 8010834:	2b02      	cmp	r3, #2
 8010836:	d112      	bne.n	801085e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801083c:	881a      	ldrh	r2, [r3, #0]
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010848:	1c9a      	adds	r2, r3, #2
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010852:	b29b      	uxth	r3, r3
 8010854:	3b01      	subs	r3, #1
 8010856:	b29a      	uxth	r2, r3
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	86da      	strh	r2, [r3, #54]	@ 0x36
 801085c:	e015      	b.n	801088a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801085e:	f7fb faa9 	bl	800bdb4 <HAL_GetTick>
 8010862:	4602      	mov	r2, r0
 8010864:	69bb      	ldr	r3, [r7, #24]
 8010866:	1ad3      	subs	r3, r2, r3
 8010868:	683a      	ldr	r2, [r7, #0]
 801086a:	429a      	cmp	r2, r3
 801086c:	d803      	bhi.n	8010876 <HAL_SPI_Transmit+0x168>
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010874:	d102      	bne.n	801087c <HAL_SPI_Transmit+0x16e>
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d106      	bne.n	801088a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 801087c:	2303      	movs	r3, #3
 801087e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2201      	movs	r2, #1
 8010884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8010888:	e07b      	b.n	8010982 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801088e:	b29b      	uxth	r3, r3
 8010890:	2b00      	cmp	r3, #0
 8010892:	d1ca      	bne.n	801082a <HAL_SPI_Transmit+0x11c>
 8010894:	e050      	b.n	8010938 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	685b      	ldr	r3, [r3, #4]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d002      	beq.n	80108a4 <HAL_SPI_Transmit+0x196>
 801089e:	8afb      	ldrh	r3, [r7, #22]
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d144      	bne.n	801092e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	330c      	adds	r3, #12
 80108ae:	7812      	ldrb	r2, [r2, #0]
 80108b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108b6:	1c5a      	adds	r2, r3, #1
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	3b01      	subs	r3, #1
 80108c4:	b29a      	uxth	r2, r3
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80108ca:	e030      	b.n	801092e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	689b      	ldr	r3, [r3, #8]
 80108d2:	f003 0302 	and.w	r3, r3, #2
 80108d6:	2b02      	cmp	r3, #2
 80108d8:	d113      	bne.n	8010902 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	330c      	adds	r3, #12
 80108e4:	7812      	ldrb	r2, [r2, #0]
 80108e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108ec:	1c5a      	adds	r2, r3, #1
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80108f6:	b29b      	uxth	r3, r3
 80108f8:	3b01      	subs	r3, #1
 80108fa:	b29a      	uxth	r2, r3
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8010900:	e015      	b.n	801092e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010902:	f7fb fa57 	bl	800bdb4 <HAL_GetTick>
 8010906:	4602      	mov	r2, r0
 8010908:	69bb      	ldr	r3, [r7, #24]
 801090a:	1ad3      	subs	r3, r2, r3
 801090c:	683a      	ldr	r2, [r7, #0]
 801090e:	429a      	cmp	r2, r3
 8010910:	d803      	bhi.n	801091a <HAL_SPI_Transmit+0x20c>
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010918:	d102      	bne.n	8010920 <HAL_SPI_Transmit+0x212>
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d106      	bne.n	801092e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8010920:	2303      	movs	r3, #3
 8010922:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	2201      	movs	r2, #1
 8010928:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 801092c:	e029      	b.n	8010982 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010932:	b29b      	uxth	r3, r3
 8010934:	2b00      	cmp	r3, #0
 8010936:	d1c9      	bne.n	80108cc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010938:	69ba      	ldr	r2, [r7, #24]
 801093a:	6839      	ldr	r1, [r7, #0]
 801093c:	68f8      	ldr	r0, [r7, #12]
 801093e:	f000 f8b1 	bl	8010aa4 <SPI_EndRxTxTransaction>
 8010942:	4603      	mov	r3, r0
 8010944:	2b00      	cmp	r3, #0
 8010946:	d002      	beq.n	801094e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2220      	movs	r2, #32
 801094c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	689b      	ldr	r3, [r3, #8]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d10a      	bne.n	801096c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010956:	2300      	movs	r3, #0
 8010958:	613b      	str	r3, [r7, #16]
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	68db      	ldr	r3, [r3, #12]
 8010960:	613b      	str	r3, [r7, #16]
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	689b      	ldr	r3, [r3, #8]
 8010968:	613b      	str	r3, [r7, #16]
 801096a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010970:	2b00      	cmp	r3, #0
 8010972:	d002      	beq.n	801097a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8010974:	2301      	movs	r3, #1
 8010976:	77fb      	strb	r3, [r7, #31]
 8010978:	e003      	b.n	8010982 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2201      	movs	r2, #1
 801097e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	2200      	movs	r2, #0
 8010986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 801098a:	7ffb      	ldrb	r3, [r7, #31]
}
 801098c:	4618      	mov	r0, r3
 801098e:	3720      	adds	r7, #32
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}

08010994 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b088      	sub	sp, #32
 8010998:	af00      	add	r7, sp, #0
 801099a:	60f8      	str	r0, [r7, #12]
 801099c:	60b9      	str	r1, [r7, #8]
 801099e:	603b      	str	r3, [r7, #0]
 80109a0:	4613      	mov	r3, r2
 80109a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80109a4:	f7fb fa06 	bl	800bdb4 <HAL_GetTick>
 80109a8:	4602      	mov	r2, r0
 80109aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109ac:	1a9b      	subs	r3, r3, r2
 80109ae:	683a      	ldr	r2, [r7, #0]
 80109b0:	4413      	add	r3, r2
 80109b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80109b4:	f7fb f9fe 	bl	800bdb4 <HAL_GetTick>
 80109b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80109ba:	4b39      	ldr	r3, [pc, #228]	@ (8010aa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	015b      	lsls	r3, r3, #5
 80109c0:	0d1b      	lsrs	r3, r3, #20
 80109c2:	69fa      	ldr	r2, [r7, #28]
 80109c4:	fb02 f303 	mul.w	r3, r2, r3
 80109c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80109ca:	e054      	b.n	8010a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109d2:	d050      	beq.n	8010a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80109d4:	f7fb f9ee 	bl	800bdb4 <HAL_GetTick>
 80109d8:	4602      	mov	r2, r0
 80109da:	69bb      	ldr	r3, [r7, #24]
 80109dc:	1ad3      	subs	r3, r2, r3
 80109de:	69fa      	ldr	r2, [r7, #28]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d902      	bls.n	80109ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80109e4:	69fb      	ldr	r3, [r7, #28]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d13d      	bne.n	8010a66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	685a      	ldr	r2, [r3, #4]
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80109f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010a02:	d111      	bne.n	8010a28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	689b      	ldr	r3, [r3, #8]
 8010a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010a0c:	d004      	beq.n	8010a18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	689b      	ldr	r3, [r3, #8]
 8010a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010a16:	d107      	bne.n	8010a28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	681a      	ldr	r2, [r3, #0]
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010a26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010a30:	d10f      	bne.n	8010a52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	681a      	ldr	r2, [r3, #0]
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010a40:	601a      	str	r2, [r3, #0]
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	681a      	ldr	r2, [r3, #0]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010a50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	2201      	movs	r2, #1
 8010a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8010a62:	2303      	movs	r3, #3
 8010a64:	e017      	b.n	8010a96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010a66:	697b      	ldr	r3, [r7, #20]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d101      	bne.n	8010a70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	3b01      	subs	r3, #1
 8010a74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	689a      	ldr	r2, [r3, #8]
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	4013      	ands	r3, r2
 8010a80:	68ba      	ldr	r2, [r7, #8]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	bf0c      	ite	eq
 8010a86:	2301      	moveq	r3, #1
 8010a88:	2300      	movne	r3, #0
 8010a8a:	b2db      	uxtb	r3, r3
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	79fb      	ldrb	r3, [r7, #7]
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d19b      	bne.n	80109cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010a94:	2300      	movs	r3, #0
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	3720      	adds	r7, #32
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}
 8010a9e:	bf00      	nop
 8010aa0:	20000000 	.word	0x20000000

08010aa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b088      	sub	sp, #32
 8010aa8:	af02      	add	r7, sp, #8
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8010b20 <SPI_EndRxTxTransaction+0x7c>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8010b24 <SPI_EndRxTxTransaction+0x80>)
 8010ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8010aba:	0d5b      	lsrs	r3, r3, #21
 8010abc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010ac0:	fb02 f303 	mul.w	r3, r2, r3
 8010ac4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010ace:	d112      	bne.n	8010af6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	9300      	str	r3, [sp, #0]
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	2180      	movs	r1, #128	@ 0x80
 8010ada:	68f8      	ldr	r0, [r7, #12]
 8010adc:	f7ff ff5a 	bl	8010994 <SPI_WaitFlagStateUntilTimeout>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d016      	beq.n	8010b14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010aea:	f043 0220 	orr.w	r2, r3, #32
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8010af2:	2303      	movs	r3, #3
 8010af4:	e00f      	b.n	8010b16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d00a      	beq.n	8010b12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	3b01      	subs	r3, #1
 8010b00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	689b      	ldr	r3, [r3, #8]
 8010b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b0c:	2b80      	cmp	r3, #128	@ 0x80
 8010b0e:	d0f2      	beq.n	8010af6 <SPI_EndRxTxTransaction+0x52>
 8010b10:	e000      	b.n	8010b14 <SPI_EndRxTxTransaction+0x70>
        break;
 8010b12:	bf00      	nop
  }

  return HAL_OK;
 8010b14:	2300      	movs	r3, #0
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3718      	adds	r7, #24
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
 8010b1e:	bf00      	nop
 8010b20:	20000000 	.word	0x20000000
 8010b24:	165e9f81 	.word	0x165e9f81

08010b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d101      	bne.n	8010b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010b36:	2301      	movs	r3, #1
 8010b38:	e031      	b.n	8010b9e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d106      	bne.n	8010b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f7f1 fcfc 	bl	800254c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2202      	movs	r2, #2
 8010b58:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	3304      	adds	r3, #4
 8010b64:	4619      	mov	r1, r3
 8010b66:	4610      	mov	r0, r2
 8010b68:	f000 fcd4 	bl	8011514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2201      	movs	r2, #1
 8010b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2201      	movs	r2, #1
 8010b78:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2201      	movs	r2, #1
 8010b80:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2201      	movs	r2, #1
 8010b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2201      	movs	r2, #1
 8010b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2201      	movs	r2, #1
 8010b98:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8010b9c:	2300      	movs	r3, #0
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3708      	adds	r7, #8
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
	...

08010ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b085      	sub	sp, #20
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8010bb6:	b2db      	uxtb	r3, r3
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d001      	beq.n	8010bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	e03a      	b.n	8010c36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2202      	movs	r2, #2
 8010bc4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	68da      	ldr	r2, [r3, #12]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	f042 0201 	orr.w	r2, r2, #1
 8010bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010be0:	d00e      	beq.n	8010c00 <HAL_TIM_Base_Start_IT+0x58>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	4a16      	ldr	r2, [pc, #88]	@ (8010c40 <HAL_TIM_Base_Start_IT+0x98>)
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d009      	beq.n	8010c00 <HAL_TIM_Base_Start_IT+0x58>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	4a14      	ldr	r2, [pc, #80]	@ (8010c44 <HAL_TIM_Base_Start_IT+0x9c>)
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	d004      	beq.n	8010c00 <HAL_TIM_Base_Start_IT+0x58>
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	4a13      	ldr	r2, [pc, #76]	@ (8010c48 <HAL_TIM_Base_Start_IT+0xa0>)
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d111      	bne.n	8010c24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	689b      	ldr	r3, [r3, #8]
 8010c06:	f003 0307 	and.w	r3, r3, #7
 8010c0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	2b06      	cmp	r3, #6
 8010c10:	d010      	beq.n	8010c34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	681a      	ldr	r2, [r3, #0]
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	f042 0201 	orr.w	r2, r2, #1
 8010c20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c22:	e007      	b.n	8010c34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	681a      	ldr	r2, [r3, #0]
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f042 0201 	orr.w	r2, r2, #1
 8010c32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010c34:	2300      	movs	r3, #0
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3714      	adds	r7, #20
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bc80      	pop	{r7}
 8010c3e:	4770      	bx	lr
 8010c40:	40000400 	.word	0x40000400
 8010c44:	40000800 	.word	0x40000800
 8010c48:	40010800 	.word	0x40010800

08010c4c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b083      	sub	sp, #12
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	68da      	ldr	r2, [r3, #12]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f022 0201 	bic.w	r2, r2, #1
 8010c62:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	6a1a      	ldr	r2, [r3, #32]
 8010c6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010c6e:	4013      	ands	r3, r2
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d107      	bne.n	8010c84 <HAL_TIM_Base_Stop_IT+0x38>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f022 0201 	bic.w	r2, r2, #1
 8010c82:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2201      	movs	r2, #1
 8010c88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Return function status */
  return HAL_OK;
 8010c8c:	2300      	movs	r3, #0
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	370c      	adds	r7, #12
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bc80      	pop	{r7}
 8010c96:	4770      	bx	lr

08010c98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d101      	bne.n	8010caa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	e031      	b.n	8010d0e <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d106      	bne.n	8010cc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 f829 	bl	8010d16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2202      	movs	r2, #2
 8010cc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681a      	ldr	r2, [r3, #0]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	3304      	adds	r3, #4
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	4610      	mov	r0, r2
 8010cd8:	f000 fc1c 	bl	8011514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2201      	movs	r2, #1
 8010ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2201      	movs	r2, #1
 8010cf0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2201      	movs	r2, #1
 8010cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2201      	movs	r2, #1
 8010d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2201      	movs	r2, #1
 8010d08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8010d0c:	2300      	movs	r3, #0
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3708      	adds	r7, #8
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}

08010d16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010d16:	b480      	push	{r7}
 8010d18:	b083      	sub	sp, #12
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010d1e:	bf00      	nop
 8010d20:	370c      	adds	r7, #12
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bc80      	pop	{r7}
 8010d26:	4770      	bx	lr

08010d28 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b084      	sub	sp, #16
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010d32:	2300      	movs	r3, #0
 8010d34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d109      	bne.n	8010d50 <HAL_TIM_PWM_Start_IT+0x28>
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8010d42:	b2db      	uxtb	r3, r3
 8010d44:	2b01      	cmp	r3, #1
 8010d46:	bf14      	ite	ne
 8010d48:	2301      	movne	r3, #1
 8010d4a:	2300      	moveq	r3, #0
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	e022      	b.n	8010d96 <HAL_TIM_PWM_Start_IT+0x6e>
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	2b04      	cmp	r3, #4
 8010d54:	d109      	bne.n	8010d6a <HAL_TIM_PWM_Start_IT+0x42>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010d5c:	b2db      	uxtb	r3, r3
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	bf14      	ite	ne
 8010d62:	2301      	movne	r3, #1
 8010d64:	2300      	moveq	r3, #0
 8010d66:	b2db      	uxtb	r3, r3
 8010d68:	e015      	b.n	8010d96 <HAL_TIM_PWM_Start_IT+0x6e>
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	2b08      	cmp	r3, #8
 8010d6e:	d109      	bne.n	8010d84 <HAL_TIM_PWM_Start_IT+0x5c>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	2b01      	cmp	r3, #1
 8010d7a:	bf14      	ite	ne
 8010d7c:	2301      	movne	r3, #1
 8010d7e:	2300      	moveq	r3, #0
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	e008      	b.n	8010d96 <HAL_TIM_PWM_Start_IT+0x6e>
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	2b01      	cmp	r3, #1
 8010d8e:	bf14      	ite	ne
 8010d90:	2301      	movne	r3, #1
 8010d92:	2300      	moveq	r3, #0
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d001      	beq.n	8010d9e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	e09c      	b.n	8010ed8 <HAL_TIM_PWM_Start_IT+0x1b0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d104      	bne.n	8010dae <HAL_TIM_PWM_Start_IT+0x86>
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2202      	movs	r2, #2
 8010da8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8010dac:	e013      	b.n	8010dd6 <HAL_TIM_PWM_Start_IT+0xae>
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	2b04      	cmp	r3, #4
 8010db2:	d104      	bne.n	8010dbe <HAL_TIM_PWM_Start_IT+0x96>
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2202      	movs	r2, #2
 8010db8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8010dbc:	e00b      	b.n	8010dd6 <HAL_TIM_PWM_Start_IT+0xae>
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	2b08      	cmp	r3, #8
 8010dc2:	d104      	bne.n	8010dce <HAL_TIM_PWM_Start_IT+0xa6>
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2202      	movs	r2, #2
 8010dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010dcc:	e003      	b.n	8010dd6 <HAL_TIM_PWM_Start_IT+0xae>
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2202      	movs	r2, #2
 8010dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	2b0c      	cmp	r3, #12
 8010dda:	d841      	bhi.n	8010e60 <HAL_TIM_PWM_Start_IT+0x138>
 8010ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8010de4 <HAL_TIM_PWM_Start_IT+0xbc>)
 8010dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de2:	bf00      	nop
 8010de4:	08010e19 	.word	0x08010e19
 8010de8:	08010e61 	.word	0x08010e61
 8010dec:	08010e61 	.word	0x08010e61
 8010df0:	08010e61 	.word	0x08010e61
 8010df4:	08010e2b 	.word	0x08010e2b
 8010df8:	08010e61 	.word	0x08010e61
 8010dfc:	08010e61 	.word	0x08010e61
 8010e00:	08010e61 	.word	0x08010e61
 8010e04:	08010e3d 	.word	0x08010e3d
 8010e08:	08010e61 	.word	0x08010e61
 8010e0c:	08010e61 	.word	0x08010e61
 8010e10:	08010e61 	.word	0x08010e61
 8010e14:	08010e4f 	.word	0x08010e4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	68da      	ldr	r2, [r3, #12]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f042 0202 	orr.w	r2, r2, #2
 8010e26:	60da      	str	r2, [r3, #12]
      break;
 8010e28:	e01d      	b.n	8010e66 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	68da      	ldr	r2, [r3, #12]
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	f042 0204 	orr.w	r2, r2, #4
 8010e38:	60da      	str	r2, [r3, #12]
      break;
 8010e3a:	e014      	b.n	8010e66 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	68da      	ldr	r2, [r3, #12]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f042 0208 	orr.w	r2, r2, #8
 8010e4a:	60da      	str	r2, [r3, #12]
      break;
 8010e4c:	e00b      	b.n	8010e66 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	68da      	ldr	r2, [r3, #12]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	f042 0210 	orr.w	r2, r2, #16
 8010e5c:	60da      	str	r2, [r3, #12]
      break;
 8010e5e:	e002      	b.n	8010e66 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8010e60:	2301      	movs	r3, #1
 8010e62:	73fb      	strb	r3, [r7, #15]
      break;
 8010e64:	bf00      	nop
  }

  if (status == HAL_OK)
 8010e66:	7bfb      	ldrb	r3, [r7, #15]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d134      	bne.n	8010ed6 <HAL_TIM_PWM_Start_IT+0x1ae>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	2201      	movs	r2, #1
 8010e72:	6839      	ldr	r1, [r7, #0]
 8010e74:	4618      	mov	r0, r3
 8010e76:	f000 fd48 	bl	801190a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e82:	d00e      	beq.n	8010ea2 <HAL_TIM_PWM_Start_IT+0x17a>
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	4a15      	ldr	r2, [pc, #84]	@ (8010ee0 <HAL_TIM_PWM_Start_IT+0x1b8>)
 8010e8a:	4293      	cmp	r3, r2
 8010e8c:	d009      	beq.n	8010ea2 <HAL_TIM_PWM_Start_IT+0x17a>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	4a14      	ldr	r2, [pc, #80]	@ (8010ee4 <HAL_TIM_PWM_Start_IT+0x1bc>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d004      	beq.n	8010ea2 <HAL_TIM_PWM_Start_IT+0x17a>
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	4a12      	ldr	r2, [pc, #72]	@ (8010ee8 <HAL_TIM_PWM_Start_IT+0x1c0>)
 8010e9e:	4293      	cmp	r3, r2
 8010ea0:	d111      	bne.n	8010ec6 <HAL_TIM_PWM_Start_IT+0x19e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	689b      	ldr	r3, [r3, #8]
 8010ea8:	f003 0307 	and.w	r3, r3, #7
 8010eac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	2b06      	cmp	r3, #6
 8010eb2:	d010      	beq.n	8010ed6 <HAL_TIM_PWM_Start_IT+0x1ae>
      {
        __HAL_TIM_ENABLE(htim);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	681a      	ldr	r2, [r3, #0]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f042 0201 	orr.w	r2, r2, #1
 8010ec2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ec4:	e007      	b.n	8010ed6 <HAL_TIM_PWM_Start_IT+0x1ae>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f042 0201 	orr.w	r2, r2, #1
 8010ed4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8010ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3710      	adds	r7, #16
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	40000400 	.word	0x40000400
 8010ee4:	40000800 	.word	0x40000800
 8010ee8:	40010800 	.word	0x40010800

08010eec <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b084      	sub	sp, #16
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	2b0c      	cmp	r3, #12
 8010efe:	d841      	bhi.n	8010f84 <HAL_TIM_PWM_Stop_IT+0x98>
 8010f00:	a201      	add	r2, pc, #4	@ (adr r2, 8010f08 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8010f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f06:	bf00      	nop
 8010f08:	08010f3d 	.word	0x08010f3d
 8010f0c:	08010f85 	.word	0x08010f85
 8010f10:	08010f85 	.word	0x08010f85
 8010f14:	08010f85 	.word	0x08010f85
 8010f18:	08010f4f 	.word	0x08010f4f
 8010f1c:	08010f85 	.word	0x08010f85
 8010f20:	08010f85 	.word	0x08010f85
 8010f24:	08010f85 	.word	0x08010f85
 8010f28:	08010f61 	.word	0x08010f61
 8010f2c:	08010f85 	.word	0x08010f85
 8010f30:	08010f85 	.word	0x08010f85
 8010f34:	08010f85 	.word	0x08010f85
 8010f38:	08010f73 	.word	0x08010f73
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	68da      	ldr	r2, [r3, #12]
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	f022 0202 	bic.w	r2, r2, #2
 8010f4a:	60da      	str	r2, [r3, #12]
      break;
 8010f4c:	e01d      	b.n	8010f8a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	68da      	ldr	r2, [r3, #12]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	f022 0204 	bic.w	r2, r2, #4
 8010f5c:	60da      	str	r2, [r3, #12]
      break;
 8010f5e:	e014      	b.n	8010f8a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	68da      	ldr	r2, [r3, #12]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	f022 0208 	bic.w	r2, r2, #8
 8010f6e:	60da      	str	r2, [r3, #12]
      break;
 8010f70:	e00b      	b.n	8010f8a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	68da      	ldr	r2, [r3, #12]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f022 0210 	bic.w	r2, r2, #16
 8010f80:	60da      	str	r2, [r3, #12]
      break;
 8010f82:	e002      	b.n	8010f8a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8010f84:	2301      	movs	r3, #1
 8010f86:	73fb      	strb	r3, [r7, #15]
      break;
 8010f88:	bf00      	nop
  }

  if (status == HAL_OK)
 8010f8a:	7bfb      	ldrb	r3, [r7, #15]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d132      	bne.n	8010ff6 <HAL_TIM_PWM_Stop_IT+0x10a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	2200      	movs	r2, #0
 8010f96:	6839      	ldr	r1, [r7, #0]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f000 fcb6 	bl	801190a <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	6a1a      	ldr	r2, [r3, #32]
 8010fa4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010fa8:	4013      	ands	r3, r2
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d107      	bne.n	8010fbe <HAL_TIM_PWM_Stop_IT+0xd2>
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	681a      	ldr	r2, [r3, #0]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f022 0201 	bic.w	r2, r2, #1
 8010fbc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d104      	bne.n	8010fce <HAL_TIM_PWM_Stop_IT+0xe2>
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8010fcc:	e013      	b.n	8010ff6 <HAL_TIM_PWM_Stop_IT+0x10a>
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	2b04      	cmp	r3, #4
 8010fd2:	d104      	bne.n	8010fde <HAL_TIM_PWM_Stop_IT+0xf2>
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8010fdc:	e00b      	b.n	8010ff6 <HAL_TIM_PWM_Stop_IT+0x10a>
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	2b08      	cmp	r3, #8
 8010fe2:	d104      	bne.n	8010fee <HAL_TIM_PWM_Stop_IT+0x102>
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010fec:	e003      	b.n	8010ff6 <HAL_TIM_PWM_Stop_IT+0x10a>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2201      	movs	r2, #1
 8010ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  /* Return function status */
  return status;
 8010ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3710      	adds	r7, #16
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}

08011000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b082      	sub	sp, #8
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	691b      	ldr	r3, [r3, #16]
 801100e:	f003 0302 	and.w	r3, r3, #2
 8011012:	2b02      	cmp	r3, #2
 8011014:	d122      	bne.n	801105c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	68db      	ldr	r3, [r3, #12]
 801101c:	f003 0302 	and.w	r3, r3, #2
 8011020:	2b02      	cmp	r3, #2
 8011022:	d11b      	bne.n	801105c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	f06f 0202 	mvn.w	r2, #2
 801102c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2201      	movs	r2, #1
 8011032:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	699b      	ldr	r3, [r3, #24]
 801103a:	f003 0303 	and.w	r3, r3, #3
 801103e:	2b00      	cmp	r3, #0
 8011040:	d003      	beq.n	801104a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f000 fa4a 	bl	80114dc <HAL_TIM_IC_CaptureCallback>
 8011048:	e005      	b.n	8011056 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 fa3d 	bl	80114ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f000 fa4c 	bl	80114ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2200      	movs	r2, #0
 801105a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	691b      	ldr	r3, [r3, #16]
 8011062:	f003 0304 	and.w	r3, r3, #4
 8011066:	2b04      	cmp	r3, #4
 8011068:	d122      	bne.n	80110b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	f003 0304 	and.w	r3, r3, #4
 8011074:	2b04      	cmp	r3, #4
 8011076:	d11b      	bne.n	80110b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	f06f 0204 	mvn.w	r2, #4
 8011080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2202      	movs	r2, #2
 8011086:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	699b      	ldr	r3, [r3, #24]
 801108e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011092:	2b00      	cmp	r3, #0
 8011094:	d003      	beq.n	801109e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f000 fa20 	bl	80114dc <HAL_TIM_IC_CaptureCallback>
 801109c:	e005      	b.n	80110aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f000 fa13 	bl	80114ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f000 fa22 	bl	80114ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2200      	movs	r2, #0
 80110ae:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	691b      	ldr	r3, [r3, #16]
 80110b6:	f003 0308 	and.w	r3, r3, #8
 80110ba:	2b08      	cmp	r3, #8
 80110bc:	d122      	bne.n	8011104 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	68db      	ldr	r3, [r3, #12]
 80110c4:	f003 0308 	and.w	r3, r3, #8
 80110c8:	2b08      	cmp	r3, #8
 80110ca:	d11b      	bne.n	8011104 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	f06f 0208 	mvn.w	r2, #8
 80110d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2204      	movs	r2, #4
 80110da:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	69db      	ldr	r3, [r3, #28]
 80110e2:	f003 0303 	and.w	r3, r3, #3
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d003      	beq.n	80110f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f000 f9f6 	bl	80114dc <HAL_TIM_IC_CaptureCallback>
 80110f0:	e005      	b.n	80110fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f000 f9e9 	bl	80114ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 f9f8 	bl	80114ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2200      	movs	r2, #0
 8011102:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	691b      	ldr	r3, [r3, #16]
 801110a:	f003 0310 	and.w	r3, r3, #16
 801110e:	2b10      	cmp	r3, #16
 8011110:	d122      	bne.n	8011158 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	68db      	ldr	r3, [r3, #12]
 8011118:	f003 0310 	and.w	r3, r3, #16
 801111c:	2b10      	cmp	r3, #16
 801111e:	d11b      	bne.n	8011158 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	f06f 0210 	mvn.w	r2, #16
 8011128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	2208      	movs	r2, #8
 801112e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	69db      	ldr	r3, [r3, #28]
 8011136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801113a:	2b00      	cmp	r3, #0
 801113c:	d003      	beq.n	8011146 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f000 f9cc 	bl	80114dc <HAL_TIM_IC_CaptureCallback>
 8011144:	e005      	b.n	8011152 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f000 f9bf 	bl	80114ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f000 f9ce 	bl	80114ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2200      	movs	r2, #0
 8011156:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	691b      	ldr	r3, [r3, #16]
 801115e:	f003 0301 	and.w	r3, r3, #1
 8011162:	2b01      	cmp	r3, #1
 8011164:	d10e      	bne.n	8011184 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	68db      	ldr	r3, [r3, #12]
 801116c:	f003 0301 	and.w	r3, r3, #1
 8011170:	2b01      	cmp	r3, #1
 8011172:	d107      	bne.n	8011184 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	f06f 0201 	mvn.w	r2, #1
 801117c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f7f1 fbcc 	bl	800291c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	691b      	ldr	r3, [r3, #16]
 801118a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801118e:	2b40      	cmp	r3, #64	@ 0x40
 8011190:	d10e      	bne.n	80111b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	68db      	ldr	r3, [r3, #12]
 8011198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801119c:	2b40      	cmp	r3, #64	@ 0x40
 801119e:	d107      	bne.n	80111b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80111a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f000 f9a8 	bl	8011500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80111b0:	bf00      	nop
 80111b2:	3708      	adds	r7, #8
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b086      	sub	sp, #24
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	60b9      	str	r1, [r7, #8]
 80111c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80111c4:	2300      	movs	r3, #0
 80111c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	d101      	bne.n	80111d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80111d2:	2302      	movs	r3, #2
 80111d4:	e0ae      	b.n	8011334 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	2201      	movs	r2, #1
 80111da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2b0c      	cmp	r3, #12
 80111e2:	f200 809f 	bhi.w	8011324 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80111e6:	a201      	add	r2, pc, #4	@ (adr r2, 80111ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80111e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ec:	08011221 	.word	0x08011221
 80111f0:	08011325 	.word	0x08011325
 80111f4:	08011325 	.word	0x08011325
 80111f8:	08011325 	.word	0x08011325
 80111fc:	08011261 	.word	0x08011261
 8011200:	08011325 	.word	0x08011325
 8011204:	08011325 	.word	0x08011325
 8011208:	08011325 	.word	0x08011325
 801120c:	080112a3 	.word	0x080112a3
 8011210:	08011325 	.word	0x08011325
 8011214:	08011325 	.word	0x08011325
 8011218:	08011325 	.word	0x08011325
 801121c:	080112e3 	.word	0x080112e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	68b9      	ldr	r1, [r7, #8]
 8011226:	4618      	mov	r0, r3
 8011228:	f000 f9e4 	bl	80115f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	699a      	ldr	r2, [r3, #24]
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f042 0208 	orr.w	r2, r2, #8
 801123a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	699a      	ldr	r2, [r3, #24]
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f022 0204 	bic.w	r2, r2, #4
 801124a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	6999      	ldr	r1, [r3, #24]
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	68da      	ldr	r2, [r3, #12]
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	430a      	orrs	r2, r1
 801125c:	619a      	str	r2, [r3, #24]
      break;
 801125e:	e064      	b.n	801132a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	68b9      	ldr	r1, [r7, #8]
 8011266:	4618      	mov	r0, r3
 8011268:	f000 fa00 	bl	801166c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	699a      	ldr	r2, [r3, #24]
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801127a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	699a      	ldr	r2, [r3, #24]
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801128a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	6999      	ldr	r1, [r3, #24]
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	68db      	ldr	r3, [r3, #12]
 8011296:	021a      	lsls	r2, r3, #8
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	430a      	orrs	r2, r1
 801129e:	619a      	str	r2, [r3, #24]
      break;
 80112a0:	e043      	b.n	801132a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	68b9      	ldr	r1, [r7, #8]
 80112a8:	4618      	mov	r0, r3
 80112aa:	f000 fa1d 	bl	80116e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	69da      	ldr	r2, [r3, #28]
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f042 0208 	orr.w	r2, r2, #8
 80112bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	69da      	ldr	r2, [r3, #28]
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f022 0204 	bic.w	r2, r2, #4
 80112cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	69d9      	ldr	r1, [r3, #28]
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	68da      	ldr	r2, [r3, #12]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	430a      	orrs	r2, r1
 80112de:	61da      	str	r2, [r3, #28]
      break;
 80112e0:	e023      	b.n	801132a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	68b9      	ldr	r1, [r7, #8]
 80112e8:	4618      	mov	r0, r3
 80112ea:	f000 fa3a 	bl	8011762 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	69da      	ldr	r2, [r3, #28]
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80112fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	69da      	ldr	r2, [r3, #28]
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801130c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	69d9      	ldr	r1, [r3, #28]
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	021a      	lsls	r2, r3, #8
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	430a      	orrs	r2, r1
 8011320:	61da      	str	r2, [r3, #28]
      break;
 8011322:	e002      	b.n	801132a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8011324:	2301      	movs	r3, #1
 8011326:	75fb      	strb	r3, [r7, #23]
      break;
 8011328:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	2200      	movs	r2, #0
 801132e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8011332:	7dfb      	ldrb	r3, [r7, #23]
}
 8011334:	4618      	mov	r0, r3
 8011336:	3718      	adds	r7, #24
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}

0801133c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b084      	sub	sp, #16
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011346:	2300      	movs	r3, #0
 8011348:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011350:	2b01      	cmp	r3, #1
 8011352:	d101      	bne.n	8011358 <HAL_TIM_ConfigClockSource+0x1c>
 8011354:	2302      	movs	r3, #2
 8011356:	e0b4      	b.n	80114c2 <HAL_TIM_ConfigClockSource+0x186>
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2201      	movs	r2, #1
 801135c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2202      	movs	r2, #2
 8011364:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	689b      	ldr	r3, [r3, #8]
 801136e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8011376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011378:	68bb      	ldr	r3, [r7, #8]
 801137a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801137e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	68ba      	ldr	r2, [r7, #8]
 8011386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011390:	d03e      	beq.n	8011410 <HAL_TIM_ConfigClockSource+0xd4>
 8011392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011396:	f200 8087 	bhi.w	80114a8 <HAL_TIM_ConfigClockSource+0x16c>
 801139a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801139e:	f000 8086 	beq.w	80114ae <HAL_TIM_ConfigClockSource+0x172>
 80113a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80113a6:	d87f      	bhi.n	80114a8 <HAL_TIM_ConfigClockSource+0x16c>
 80113a8:	2b70      	cmp	r3, #112	@ 0x70
 80113aa:	d01a      	beq.n	80113e2 <HAL_TIM_ConfigClockSource+0xa6>
 80113ac:	2b70      	cmp	r3, #112	@ 0x70
 80113ae:	d87b      	bhi.n	80114a8 <HAL_TIM_ConfigClockSource+0x16c>
 80113b0:	2b60      	cmp	r3, #96	@ 0x60
 80113b2:	d050      	beq.n	8011456 <HAL_TIM_ConfigClockSource+0x11a>
 80113b4:	2b60      	cmp	r3, #96	@ 0x60
 80113b6:	d877      	bhi.n	80114a8 <HAL_TIM_ConfigClockSource+0x16c>
 80113b8:	2b50      	cmp	r3, #80	@ 0x50
 80113ba:	d03c      	beq.n	8011436 <HAL_TIM_ConfigClockSource+0xfa>
 80113bc:	2b50      	cmp	r3, #80	@ 0x50
 80113be:	d873      	bhi.n	80114a8 <HAL_TIM_ConfigClockSource+0x16c>
 80113c0:	2b40      	cmp	r3, #64	@ 0x40
 80113c2:	d058      	beq.n	8011476 <HAL_TIM_ConfigClockSource+0x13a>
 80113c4:	2b40      	cmp	r3, #64	@ 0x40
 80113c6:	d86f      	bhi.n	80114a8 <HAL_TIM_ConfigClockSource+0x16c>
 80113c8:	2b30      	cmp	r3, #48	@ 0x30
 80113ca:	d064      	beq.n	8011496 <HAL_TIM_ConfigClockSource+0x15a>
 80113cc:	2b30      	cmp	r3, #48	@ 0x30
 80113ce:	d86b      	bhi.n	80114a8 <HAL_TIM_ConfigClockSource+0x16c>
 80113d0:	2b20      	cmp	r3, #32
 80113d2:	d060      	beq.n	8011496 <HAL_TIM_ConfigClockSource+0x15a>
 80113d4:	2b20      	cmp	r3, #32
 80113d6:	d867      	bhi.n	80114a8 <HAL_TIM_ConfigClockSource+0x16c>
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d05c      	beq.n	8011496 <HAL_TIM_ConfigClockSource+0x15a>
 80113dc:	2b10      	cmp	r3, #16
 80113de:	d05a      	beq.n	8011496 <HAL_TIM_ConfigClockSource+0x15a>
 80113e0:	e062      	b.n	80114a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80113f2:	f000 fa6b 	bl	80118cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	689b      	ldr	r3, [r3, #8]
 80113fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8011404:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	68ba      	ldr	r2, [r7, #8]
 801140c:	609a      	str	r2, [r3, #8]
      break;
 801140e:	e04f      	b.n	80114b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011420:	f000 fa54 	bl	80118cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	689a      	ldr	r2, [r3, #8]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011432:	609a      	str	r2, [r3, #8]
      break;
 8011434:	e03c      	b.n	80114b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011442:	461a      	mov	r2, r3
 8011444:	f000 f9cb 	bl	80117de <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	2150      	movs	r1, #80	@ 0x50
 801144e:	4618      	mov	r0, r3
 8011450:	f000 fa22 	bl	8011898 <TIM_ITRx_SetConfig>
      break;
 8011454:	e02c      	b.n	80114b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011462:	461a      	mov	r2, r3
 8011464:	f000 f9e9 	bl	801183a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	2160      	movs	r1, #96	@ 0x60
 801146e:	4618      	mov	r0, r3
 8011470:	f000 fa12 	bl	8011898 <TIM_ITRx_SetConfig>
      break;
 8011474:	e01c      	b.n	80114b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011482:	461a      	mov	r2, r3
 8011484:	f000 f9ab 	bl	80117de <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	2140      	movs	r1, #64	@ 0x40
 801148e:	4618      	mov	r0, r3
 8011490:	f000 fa02 	bl	8011898 <TIM_ITRx_SetConfig>
      break;
 8011494:	e00c      	b.n	80114b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	4619      	mov	r1, r3
 80114a0:	4610      	mov	r0, r2
 80114a2:	f000 f9f9 	bl	8011898 <TIM_ITRx_SetConfig>
      break;
 80114a6:	e003      	b.n	80114b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80114a8:	2301      	movs	r3, #1
 80114aa:	73fb      	strb	r3, [r7, #15]
      break;
 80114ac:	e000      	b.n	80114b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80114ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2201      	movs	r2, #1
 80114b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2200      	movs	r2, #0
 80114bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80114c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3710      	adds	r7, #16
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80114ca:	b480      	push	{r7}
 80114cc:	b083      	sub	sp, #12
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80114d2:	bf00      	nop
 80114d4:	370c      	adds	r7, #12
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bc80      	pop	{r7}
 80114da:	4770      	bx	lr

080114dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80114dc:	b480      	push	{r7}
 80114de:	b083      	sub	sp, #12
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80114e4:	bf00      	nop
 80114e6:	370c      	adds	r7, #12
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bc80      	pop	{r7}
 80114ec:	4770      	bx	lr

080114ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80114ee:	b480      	push	{r7}
 80114f0:	b083      	sub	sp, #12
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80114f6:	bf00      	nop
 80114f8:	370c      	adds	r7, #12
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bc80      	pop	{r7}
 80114fe:	4770      	bx	lr

08011500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011500:	b480      	push	{r7}
 8011502:	b083      	sub	sp, #12
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011508:	bf00      	nop
 801150a:	370c      	adds	r7, #12
 801150c:	46bd      	mov	sp, r7
 801150e:	bc80      	pop	{r7}
 8011510:	4770      	bx	lr
	...

08011514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011514:	b480      	push	{r7}
 8011516:	b085      	sub	sp, #20
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
 801151c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801152a:	d00f      	beq.n	801154c <TIM_Base_SetConfig+0x38>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	4a2b      	ldr	r2, [pc, #172]	@ (80115dc <TIM_Base_SetConfig+0xc8>)
 8011530:	4293      	cmp	r3, r2
 8011532:	d00b      	beq.n	801154c <TIM_Base_SetConfig+0x38>
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	4a2a      	ldr	r2, [pc, #168]	@ (80115e0 <TIM_Base_SetConfig+0xcc>)
 8011538:	4293      	cmp	r3, r2
 801153a:	d007      	beq.n	801154c <TIM_Base_SetConfig+0x38>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	4a29      	ldr	r2, [pc, #164]	@ (80115e4 <TIM_Base_SetConfig+0xd0>)
 8011540:	4293      	cmp	r3, r2
 8011542:	d003      	beq.n	801154c <TIM_Base_SetConfig+0x38>
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	4a28      	ldr	r2, [pc, #160]	@ (80115e8 <TIM_Base_SetConfig+0xd4>)
 8011548:	4293      	cmp	r3, r2
 801154a:	d108      	bne.n	801155e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	685b      	ldr	r3, [r3, #4]
 8011558:	68fa      	ldr	r2, [r7, #12]
 801155a:	4313      	orrs	r3, r2
 801155c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011564:	d017      	beq.n	8011596 <TIM_Base_SetConfig+0x82>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	4a1c      	ldr	r2, [pc, #112]	@ (80115dc <TIM_Base_SetConfig+0xc8>)
 801156a:	4293      	cmp	r3, r2
 801156c:	d013      	beq.n	8011596 <TIM_Base_SetConfig+0x82>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	4a1b      	ldr	r2, [pc, #108]	@ (80115e0 <TIM_Base_SetConfig+0xcc>)
 8011572:	4293      	cmp	r3, r2
 8011574:	d00f      	beq.n	8011596 <TIM_Base_SetConfig+0x82>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	4a1a      	ldr	r2, [pc, #104]	@ (80115e4 <TIM_Base_SetConfig+0xd0>)
 801157a:	4293      	cmp	r3, r2
 801157c:	d00b      	beq.n	8011596 <TIM_Base_SetConfig+0x82>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	4a19      	ldr	r2, [pc, #100]	@ (80115e8 <TIM_Base_SetConfig+0xd4>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d007      	beq.n	8011596 <TIM_Base_SetConfig+0x82>
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	4a18      	ldr	r2, [pc, #96]	@ (80115ec <TIM_Base_SetConfig+0xd8>)
 801158a:	4293      	cmp	r3, r2
 801158c:	d003      	beq.n	8011596 <TIM_Base_SetConfig+0x82>
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	4a17      	ldr	r2, [pc, #92]	@ (80115f0 <TIM_Base_SetConfig+0xdc>)
 8011592:	4293      	cmp	r3, r2
 8011594:	d108      	bne.n	80115a8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801159c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	68db      	ldr	r3, [r3, #12]
 80115a2:	68fa      	ldr	r2, [r7, #12]
 80115a4:	4313      	orrs	r3, r2
 80115a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	691b      	ldr	r3, [r3, #16]
 80115b2:	4313      	orrs	r3, r2
 80115b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	68fa      	ldr	r2, [r7, #12]
 80115ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	689a      	ldr	r2, [r3, #8]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2201      	movs	r2, #1
 80115d0:	615a      	str	r2, [r3, #20]
}
 80115d2:	bf00      	nop
 80115d4:	3714      	adds	r7, #20
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bc80      	pop	{r7}
 80115da:	4770      	bx	lr
 80115dc:	40000400 	.word	0x40000400
 80115e0:	40000800 	.word	0x40000800
 80115e4:	40000c00 	.word	0x40000c00
 80115e8:	40010800 	.word	0x40010800
 80115ec:	40010c00 	.word	0x40010c00
 80115f0:	40011000 	.word	0x40011000

080115f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80115f4:	b480      	push	{r7}
 80115f6:	b087      	sub	sp, #28
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6a1b      	ldr	r3, [r3, #32]
 8011602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6a1b      	ldr	r3, [r3, #32]
 8011608:	f023 0201 	bic.w	r2, r3, #1
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	699b      	ldr	r3, [r3, #24]
 801161a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f023 0303 	bic.w	r3, r3, #3
 801162a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	68fa      	ldr	r2, [r7, #12]
 8011632:	4313      	orrs	r3, r2
 8011634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	f023 0302 	bic.w	r3, r3, #2
 801163c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	689b      	ldr	r3, [r3, #8]
 8011642:	697a      	ldr	r2, [r7, #20]
 8011644:	4313      	orrs	r3, r2
 8011646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	693a      	ldr	r2, [r7, #16]
 801164c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	68fa      	ldr	r2, [r7, #12]
 8011652:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	685a      	ldr	r2, [r3, #4]
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	697a      	ldr	r2, [r7, #20]
 8011660:	621a      	str	r2, [r3, #32]
}
 8011662:	bf00      	nop
 8011664:	371c      	adds	r7, #28
 8011666:	46bd      	mov	sp, r7
 8011668:	bc80      	pop	{r7}
 801166a:	4770      	bx	lr

0801166c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801166c:	b480      	push	{r7}
 801166e:	b087      	sub	sp, #28
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6a1b      	ldr	r3, [r3, #32]
 801167a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6a1b      	ldr	r3, [r3, #32]
 8011680:	f023 0210 	bic.w	r2, r3, #16
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	685b      	ldr	r3, [r3, #4]
 801168c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	699b      	ldr	r3, [r3, #24]
 8011692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801169a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80116a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	021b      	lsls	r3, r3, #8
 80116aa:	68fa      	ldr	r2, [r7, #12]
 80116ac:	4313      	orrs	r3, r2
 80116ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	f023 0320 	bic.w	r3, r3, #32
 80116b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	689b      	ldr	r3, [r3, #8]
 80116bc:	011b      	lsls	r3, r3, #4
 80116be:	697a      	ldr	r2, [r7, #20]
 80116c0:	4313      	orrs	r3, r2
 80116c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	693a      	ldr	r2, [r7, #16]
 80116c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	68fa      	ldr	r2, [r7, #12]
 80116ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	685a      	ldr	r2, [r3, #4]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	697a      	ldr	r2, [r7, #20]
 80116dc:	621a      	str	r2, [r3, #32]
}
 80116de:	bf00      	nop
 80116e0:	371c      	adds	r7, #28
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bc80      	pop	{r7}
 80116e6:	4770      	bx	lr

080116e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80116e8:	b480      	push	{r7}
 80116ea:	b087      	sub	sp, #28
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6a1b      	ldr	r3, [r3, #32]
 80116f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6a1b      	ldr	r3, [r3, #32]
 80116fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	685b      	ldr	r3, [r3, #4]
 8011708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	69db      	ldr	r3, [r3, #28]
 801170e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	f023 0303 	bic.w	r3, r3, #3
 801171e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	68fa      	ldr	r2, [r7, #12]
 8011726:	4313      	orrs	r3, r2
 8011728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	689b      	ldr	r3, [r3, #8]
 8011736:	021b      	lsls	r3, r3, #8
 8011738:	697a      	ldr	r2, [r7, #20]
 801173a:	4313      	orrs	r3, r2
 801173c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	693a      	ldr	r2, [r7, #16]
 8011742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	68fa      	ldr	r2, [r7, #12]
 8011748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	685a      	ldr	r2, [r3, #4]
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	697a      	ldr	r2, [r7, #20]
 8011756:	621a      	str	r2, [r3, #32]
}
 8011758:	bf00      	nop
 801175a:	371c      	adds	r7, #28
 801175c:	46bd      	mov	sp, r7
 801175e:	bc80      	pop	{r7}
 8011760:	4770      	bx	lr

08011762 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011762:	b480      	push	{r7}
 8011764:	b087      	sub	sp, #28
 8011766:	af00      	add	r7, sp, #0
 8011768:	6078      	str	r0, [r7, #4]
 801176a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6a1b      	ldr	r3, [r3, #32]
 8011770:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6a1b      	ldr	r3, [r3, #32]
 8011776:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	69db      	ldr	r3, [r3, #28]
 8011788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011790:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011798:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	021b      	lsls	r3, r3, #8
 80117a0:	68fa      	ldr	r2, [r7, #12]
 80117a2:	4313      	orrs	r3, r2
 80117a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80117ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	689b      	ldr	r3, [r3, #8]
 80117b2:	031b      	lsls	r3, r3, #12
 80117b4:	697a      	ldr	r2, [r7, #20]
 80117b6:	4313      	orrs	r3, r2
 80117b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	693a      	ldr	r2, [r7, #16]
 80117be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	68fa      	ldr	r2, [r7, #12]
 80117c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	685a      	ldr	r2, [r3, #4]
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	697a      	ldr	r2, [r7, #20]
 80117d2:	621a      	str	r2, [r3, #32]
}
 80117d4:	bf00      	nop
 80117d6:	371c      	adds	r7, #28
 80117d8:	46bd      	mov	sp, r7
 80117da:	bc80      	pop	{r7}
 80117dc:	4770      	bx	lr

080117de <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80117de:	b480      	push	{r7}
 80117e0:	b087      	sub	sp, #28
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	60f8      	str	r0, [r7, #12]
 80117e6:	60b9      	str	r1, [r7, #8]
 80117e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	6a1b      	ldr	r3, [r3, #32]
 80117ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	6a1b      	ldr	r3, [r3, #32]
 80117f4:	f023 0201 	bic.w	r2, r3, #1
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	699b      	ldr	r3, [r3, #24]
 8011800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011802:	693b      	ldr	r3, [r7, #16]
 8011804:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011808:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	011b      	lsls	r3, r3, #4
 801180e:	693a      	ldr	r2, [r7, #16]
 8011810:	4313      	orrs	r3, r2
 8011812:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	f023 030a 	bic.w	r3, r3, #10
 801181a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801181c:	697a      	ldr	r2, [r7, #20]
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	4313      	orrs	r3, r2
 8011822:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	693a      	ldr	r2, [r7, #16]
 8011828:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	697a      	ldr	r2, [r7, #20]
 801182e:	621a      	str	r2, [r3, #32]
}
 8011830:	bf00      	nop
 8011832:	371c      	adds	r7, #28
 8011834:	46bd      	mov	sp, r7
 8011836:	bc80      	pop	{r7}
 8011838:	4770      	bx	lr

0801183a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801183a:	b480      	push	{r7}
 801183c:	b087      	sub	sp, #28
 801183e:	af00      	add	r7, sp, #0
 8011840:	60f8      	str	r0, [r7, #12]
 8011842:	60b9      	str	r1, [r7, #8]
 8011844:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	6a1b      	ldr	r3, [r3, #32]
 801184a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	6a1b      	ldr	r3, [r3, #32]
 8011850:	f023 0210 	bic.w	r2, r3, #16
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	699b      	ldr	r3, [r3, #24]
 801185c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	031b      	lsls	r3, r3, #12
 801186a:	693a      	ldr	r2, [r7, #16]
 801186c:	4313      	orrs	r3, r2
 801186e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011876:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	011b      	lsls	r3, r3, #4
 801187c:	697a      	ldr	r2, [r7, #20]
 801187e:	4313      	orrs	r3, r2
 8011880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	693a      	ldr	r2, [r7, #16]
 8011886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	697a      	ldr	r2, [r7, #20]
 801188c:	621a      	str	r2, [r3, #32]
}
 801188e:	bf00      	nop
 8011890:	371c      	adds	r7, #28
 8011892:	46bd      	mov	sp, r7
 8011894:	bc80      	pop	{r7}
 8011896:	4770      	bx	lr

08011898 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011898:	b480      	push	{r7}
 801189a:	b085      	sub	sp, #20
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
 80118a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	689b      	ldr	r3, [r3, #8]
 80118a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80118ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80118b0:	683a      	ldr	r2, [r7, #0]
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	4313      	orrs	r3, r2
 80118b6:	f043 0307 	orr.w	r3, r3, #7
 80118ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	68fa      	ldr	r2, [r7, #12]
 80118c0:	609a      	str	r2, [r3, #8]
}
 80118c2:	bf00      	nop
 80118c4:	3714      	adds	r7, #20
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bc80      	pop	{r7}
 80118ca:	4770      	bx	lr

080118cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80118cc:	b480      	push	{r7}
 80118ce:	b087      	sub	sp, #28
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	60b9      	str	r1, [r7, #8]
 80118d6:	607a      	str	r2, [r7, #4]
 80118d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	689b      	ldr	r3, [r3, #8]
 80118de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80118e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	021a      	lsls	r2, r3, #8
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	431a      	orrs	r2, r3
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	4313      	orrs	r3, r2
 80118f4:	697a      	ldr	r2, [r7, #20]
 80118f6:	4313      	orrs	r3, r2
 80118f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	697a      	ldr	r2, [r7, #20]
 80118fe:	609a      	str	r2, [r3, #8]
}
 8011900:	bf00      	nop
 8011902:	371c      	adds	r7, #28
 8011904:	46bd      	mov	sp, r7
 8011906:	bc80      	pop	{r7}
 8011908:	4770      	bx	lr

0801190a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801190a:	b480      	push	{r7}
 801190c:	b087      	sub	sp, #28
 801190e:	af00      	add	r7, sp, #0
 8011910:	60f8      	str	r0, [r7, #12]
 8011912:	60b9      	str	r1, [r7, #8]
 8011914:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	f003 031f 	and.w	r3, r3, #31
 801191c:	2201      	movs	r2, #1
 801191e:	fa02 f303 	lsl.w	r3, r2, r3
 8011922:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	6a1a      	ldr	r2, [r3, #32]
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	43db      	mvns	r3, r3
 801192c:	401a      	ands	r2, r3
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	6a1a      	ldr	r2, [r3, #32]
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	f003 031f 	and.w	r3, r3, #31
 801193c:	6879      	ldr	r1, [r7, #4]
 801193e:	fa01 f303 	lsl.w	r3, r1, r3
 8011942:	431a      	orrs	r2, r3
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	621a      	str	r2, [r3, #32]
}
 8011948:	bf00      	nop
 801194a:	371c      	adds	r7, #28
 801194c:	46bd      	mov	sp, r7
 801194e:	bc80      	pop	{r7}
 8011950:	4770      	bx	lr
	...

08011954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011954:	b480      	push	{r7}
 8011956:	b085      	sub	sp, #20
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011964:	2b01      	cmp	r3, #1
 8011966:	d101      	bne.n	801196c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011968:	2302      	movs	r3, #2
 801196a:	e046      	b.n	80119fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2201      	movs	r2, #1
 8011970:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2202      	movs	r2, #2
 8011978:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	689b      	ldr	r3, [r3, #8]
 801198a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	68fa      	ldr	r2, [r7, #12]
 801199a:	4313      	orrs	r3, r2
 801199c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	68fa      	ldr	r2, [r7, #12]
 80119a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80119ae:	d00e      	beq.n	80119ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	4a13      	ldr	r2, [pc, #76]	@ (8011a04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80119b6:	4293      	cmp	r3, r2
 80119b8:	d009      	beq.n	80119ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	4a12      	ldr	r2, [pc, #72]	@ (8011a08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80119c0:	4293      	cmp	r3, r2
 80119c2:	d004      	beq.n	80119ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	4a10      	ldr	r2, [pc, #64]	@ (8011a0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80119ca:	4293      	cmp	r3, r2
 80119cc:	d10c      	bne.n	80119e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80119d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	68ba      	ldr	r2, [r7, #8]
 80119dc:	4313      	orrs	r3, r2
 80119de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	68ba      	ldr	r2, [r7, #8]
 80119e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2201      	movs	r2, #1
 80119ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2200      	movs	r2, #0
 80119f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80119f8:	2300      	movs	r3, #0
}
 80119fa:	4618      	mov	r0, r3
 80119fc:	3714      	adds	r7, #20
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bc80      	pop	{r7}
 8011a02:	4770      	bx	lr
 8011a04:	40000400 	.word	0x40000400
 8011a08:	40000800 	.word	0x40000800
 8011a0c:	40010800 	.word	0x40010800

08011a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b082      	sub	sp, #8
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d101      	bne.n	8011a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011a1e:	2301      	movs	r3, #1
 8011a20:	e042      	b.n	8011aa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011a28:	b2db      	uxtb	r3, r3
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d106      	bne.n	8011a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2200      	movs	r2, #0
 8011a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011a36:	6878      	ldr	r0, [r7, #4]
 8011a38:	f7f0 fe56 	bl	80026e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2224      	movs	r2, #36	@ 0x24
 8011a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	68da      	ldr	r2, [r3, #12]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f000 f82b 	bl	8011ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	691a      	ldr	r2, [r3, #16]
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	695a      	ldr	r2, [r3, #20]
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	68da      	ldr	r2, [r3, #12]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2220      	movs	r2, #32
 8011a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2220      	movs	r2, #32
 8011a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8011aa6:	2300      	movs	r3, #0
}
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	3708      	adds	r7, #8
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}

08011ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b084      	sub	sp, #16
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	691b      	ldr	r3, [r3, #16]
 8011abe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	68da      	ldr	r2, [r3, #12]
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	430a      	orrs	r2, r1
 8011acc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	689a      	ldr	r2, [r3, #8]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	691b      	ldr	r3, [r3, #16]
 8011ad6:	431a      	orrs	r2, r3
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	695b      	ldr	r3, [r3, #20]
 8011adc:	431a      	orrs	r2, r3
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	69db      	ldr	r3, [r3, #28]
 8011ae2:	4313      	orrs	r3, r2
 8011ae4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	68db      	ldr	r3, [r3, #12]
 8011aec:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8011af0:	f023 030c 	bic.w	r3, r3, #12
 8011af4:	687a      	ldr	r2, [r7, #4]
 8011af6:	6812      	ldr	r2, [r2, #0]
 8011af8:	68b9      	ldr	r1, [r7, #8]
 8011afa:	430b      	orrs	r3, r1
 8011afc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	695b      	ldr	r3, [r3, #20]
 8011b04:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	699a      	ldr	r2, [r3, #24]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	430a      	orrs	r2, r1
 8011b12:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	4a55      	ldr	r2, [pc, #340]	@ (8011c70 <UART_SetConfig+0x1c0>)
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	d103      	bne.n	8011b26 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8011b1e:	f7fe fcf9 	bl	8010514 <HAL_RCC_GetPCLK2Freq>
 8011b22:	60f8      	str	r0, [r7, #12]
 8011b24:	e002      	b.n	8011b2c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8011b26:	f7fe fce1 	bl	80104ec <HAL_RCC_GetPCLK1Freq>
 8011b2a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	69db      	ldr	r3, [r3, #28]
 8011b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011b34:	d14c      	bne.n	8011bd0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011b36:	68fa      	ldr	r2, [r7, #12]
 8011b38:	4613      	mov	r3, r2
 8011b3a:	009b      	lsls	r3, r3, #2
 8011b3c:	4413      	add	r3, r2
 8011b3e:	009a      	lsls	r2, r3, #2
 8011b40:	441a      	add	r2, r3
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	685b      	ldr	r3, [r3, #4]
 8011b46:	005b      	lsls	r3, r3, #1
 8011b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b4c:	4a49      	ldr	r2, [pc, #292]	@ (8011c74 <UART_SetConfig+0x1c4>)
 8011b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8011b52:	095b      	lsrs	r3, r3, #5
 8011b54:	0119      	lsls	r1, r3, #4
 8011b56:	68fa      	ldr	r2, [r7, #12]
 8011b58:	4613      	mov	r3, r2
 8011b5a:	009b      	lsls	r3, r3, #2
 8011b5c:	4413      	add	r3, r2
 8011b5e:	009a      	lsls	r2, r3, #2
 8011b60:	441a      	add	r2, r3
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	685b      	ldr	r3, [r3, #4]
 8011b66:	005b      	lsls	r3, r3, #1
 8011b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8011b6c:	4b41      	ldr	r3, [pc, #260]	@ (8011c74 <UART_SetConfig+0x1c4>)
 8011b6e:	fba3 0302 	umull	r0, r3, r3, r2
 8011b72:	095b      	lsrs	r3, r3, #5
 8011b74:	2064      	movs	r0, #100	@ 0x64
 8011b76:	fb00 f303 	mul.w	r3, r0, r3
 8011b7a:	1ad3      	subs	r3, r2, r3
 8011b7c:	00db      	lsls	r3, r3, #3
 8011b7e:	3332      	adds	r3, #50	@ 0x32
 8011b80:	4a3c      	ldr	r2, [pc, #240]	@ (8011c74 <UART_SetConfig+0x1c4>)
 8011b82:	fba2 2303 	umull	r2, r3, r2, r3
 8011b86:	095b      	lsrs	r3, r3, #5
 8011b88:	005b      	lsls	r3, r3, #1
 8011b8a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8011b8e:	4419      	add	r1, r3
 8011b90:	68fa      	ldr	r2, [r7, #12]
 8011b92:	4613      	mov	r3, r2
 8011b94:	009b      	lsls	r3, r3, #2
 8011b96:	4413      	add	r3, r2
 8011b98:	009a      	lsls	r2, r3, #2
 8011b9a:	441a      	add	r2, r3
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	005b      	lsls	r3, r3, #1
 8011ba2:	fbb2 f2f3 	udiv	r2, r2, r3
 8011ba6:	4b33      	ldr	r3, [pc, #204]	@ (8011c74 <UART_SetConfig+0x1c4>)
 8011ba8:	fba3 0302 	umull	r0, r3, r3, r2
 8011bac:	095b      	lsrs	r3, r3, #5
 8011bae:	2064      	movs	r0, #100	@ 0x64
 8011bb0:	fb00 f303 	mul.w	r3, r0, r3
 8011bb4:	1ad3      	subs	r3, r2, r3
 8011bb6:	00db      	lsls	r3, r3, #3
 8011bb8:	3332      	adds	r3, #50	@ 0x32
 8011bba:	4a2e      	ldr	r2, [pc, #184]	@ (8011c74 <UART_SetConfig+0x1c4>)
 8011bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8011bc0:	095b      	lsrs	r3, r3, #5
 8011bc2:	f003 0207 	and.w	r2, r3, #7
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	440a      	add	r2, r1
 8011bcc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011bce:	e04a      	b.n	8011c66 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011bd0:	68fa      	ldr	r2, [r7, #12]
 8011bd2:	4613      	mov	r3, r2
 8011bd4:	009b      	lsls	r3, r3, #2
 8011bd6:	4413      	add	r3, r2
 8011bd8:	009a      	lsls	r2, r3, #2
 8011bda:	441a      	add	r2, r3
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	685b      	ldr	r3, [r3, #4]
 8011be0:	009b      	lsls	r3, r3, #2
 8011be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011be6:	4a23      	ldr	r2, [pc, #140]	@ (8011c74 <UART_SetConfig+0x1c4>)
 8011be8:	fba2 2303 	umull	r2, r3, r2, r3
 8011bec:	095b      	lsrs	r3, r3, #5
 8011bee:	0119      	lsls	r1, r3, #4
 8011bf0:	68fa      	ldr	r2, [r7, #12]
 8011bf2:	4613      	mov	r3, r2
 8011bf4:	009b      	lsls	r3, r3, #2
 8011bf6:	4413      	add	r3, r2
 8011bf8:	009a      	lsls	r2, r3, #2
 8011bfa:	441a      	add	r2, r3
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	fbb2 f2f3 	udiv	r2, r2, r3
 8011c06:	4b1b      	ldr	r3, [pc, #108]	@ (8011c74 <UART_SetConfig+0x1c4>)
 8011c08:	fba3 0302 	umull	r0, r3, r3, r2
 8011c0c:	095b      	lsrs	r3, r3, #5
 8011c0e:	2064      	movs	r0, #100	@ 0x64
 8011c10:	fb00 f303 	mul.w	r3, r0, r3
 8011c14:	1ad3      	subs	r3, r2, r3
 8011c16:	011b      	lsls	r3, r3, #4
 8011c18:	3332      	adds	r3, #50	@ 0x32
 8011c1a:	4a16      	ldr	r2, [pc, #88]	@ (8011c74 <UART_SetConfig+0x1c4>)
 8011c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8011c20:	095b      	lsrs	r3, r3, #5
 8011c22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011c26:	4419      	add	r1, r3
 8011c28:	68fa      	ldr	r2, [r7, #12]
 8011c2a:	4613      	mov	r3, r2
 8011c2c:	009b      	lsls	r3, r3, #2
 8011c2e:	4413      	add	r3, r2
 8011c30:	009a      	lsls	r2, r3, #2
 8011c32:	441a      	add	r2, r3
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	685b      	ldr	r3, [r3, #4]
 8011c38:	009b      	lsls	r3, r3, #2
 8011c3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8011c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8011c74 <UART_SetConfig+0x1c4>)
 8011c40:	fba3 0302 	umull	r0, r3, r3, r2
 8011c44:	095b      	lsrs	r3, r3, #5
 8011c46:	2064      	movs	r0, #100	@ 0x64
 8011c48:	fb00 f303 	mul.w	r3, r0, r3
 8011c4c:	1ad3      	subs	r3, r2, r3
 8011c4e:	011b      	lsls	r3, r3, #4
 8011c50:	3332      	adds	r3, #50	@ 0x32
 8011c52:	4a08      	ldr	r2, [pc, #32]	@ (8011c74 <UART_SetConfig+0x1c4>)
 8011c54:	fba2 2303 	umull	r2, r3, r2, r3
 8011c58:	095b      	lsrs	r3, r3, #5
 8011c5a:	f003 020f 	and.w	r2, r3, #15
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	440a      	add	r2, r1
 8011c64:	609a      	str	r2, [r3, #8]
}
 8011c66:	bf00      	nop
 8011c68:	3710      	adds	r7, #16
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	40013800 	.word	0x40013800
 8011c74:	51eb851f 	.word	0x51eb851f

08011c78 <std>:
 8011c78:	2300      	movs	r3, #0
 8011c7a:	b510      	push	{r4, lr}
 8011c7c:	4604      	mov	r4, r0
 8011c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8011c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c86:	6083      	str	r3, [r0, #8]
 8011c88:	8181      	strh	r1, [r0, #12]
 8011c8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8011c8c:	81c2      	strh	r2, [r0, #14]
 8011c8e:	6183      	str	r3, [r0, #24]
 8011c90:	4619      	mov	r1, r3
 8011c92:	2208      	movs	r2, #8
 8011c94:	305c      	adds	r0, #92	@ 0x5c
 8011c96:	f000 fa55 	bl	8012144 <memset>
 8011c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8011cd0 <std+0x58>)
 8011c9c:	6224      	str	r4, [r4, #32]
 8011c9e:	6263      	str	r3, [r4, #36]	@ 0x24
 8011ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8011cd4 <std+0x5c>)
 8011ca2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8011cd8 <std+0x60>)
 8011ca6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8011cdc <std+0x64>)
 8011caa:	6323      	str	r3, [r4, #48]	@ 0x30
 8011cac:	4b0c      	ldr	r3, [pc, #48]	@ (8011ce0 <std+0x68>)
 8011cae:	429c      	cmp	r4, r3
 8011cb0:	d006      	beq.n	8011cc0 <std+0x48>
 8011cb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011cb6:	4294      	cmp	r4, r2
 8011cb8:	d002      	beq.n	8011cc0 <std+0x48>
 8011cba:	33d0      	adds	r3, #208	@ 0xd0
 8011cbc:	429c      	cmp	r4, r3
 8011cbe:	d105      	bne.n	8011ccc <std+0x54>
 8011cc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cc8:	f000 bab4 	b.w	8012234 <__retarget_lock_init_recursive>
 8011ccc:	bd10      	pop	{r4, pc}
 8011cce:	bf00      	nop
 8011cd0:	08011f95 	.word	0x08011f95
 8011cd4:	08011fb7 	.word	0x08011fb7
 8011cd8:	08011fef 	.word	0x08011fef
 8011cdc:	08012013 	.word	0x08012013
 8011ce0:	20000774 	.word	0x20000774

08011ce4 <stdio_exit_handler>:
 8011ce4:	4a02      	ldr	r2, [pc, #8]	@ (8011cf0 <stdio_exit_handler+0xc>)
 8011ce6:	4903      	ldr	r1, [pc, #12]	@ (8011cf4 <stdio_exit_handler+0x10>)
 8011ce8:	4803      	ldr	r0, [pc, #12]	@ (8011cf8 <stdio_exit_handler+0x14>)
 8011cea:	f000 b869 	b.w	8011dc0 <_fwalk_sglue>
 8011cee:	bf00      	nop
 8011cf0:	20000198 	.word	0x20000198
 8011cf4:	08012d7d 	.word	0x08012d7d
 8011cf8:	200001a8 	.word	0x200001a8

08011cfc <cleanup_stdio>:
 8011cfc:	6841      	ldr	r1, [r0, #4]
 8011cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8011d30 <cleanup_stdio+0x34>)
 8011d00:	b510      	push	{r4, lr}
 8011d02:	4299      	cmp	r1, r3
 8011d04:	4604      	mov	r4, r0
 8011d06:	d001      	beq.n	8011d0c <cleanup_stdio+0x10>
 8011d08:	f001 f838 	bl	8012d7c <_fflush_r>
 8011d0c:	68a1      	ldr	r1, [r4, #8]
 8011d0e:	4b09      	ldr	r3, [pc, #36]	@ (8011d34 <cleanup_stdio+0x38>)
 8011d10:	4299      	cmp	r1, r3
 8011d12:	d002      	beq.n	8011d1a <cleanup_stdio+0x1e>
 8011d14:	4620      	mov	r0, r4
 8011d16:	f001 f831 	bl	8012d7c <_fflush_r>
 8011d1a:	68e1      	ldr	r1, [r4, #12]
 8011d1c:	4b06      	ldr	r3, [pc, #24]	@ (8011d38 <cleanup_stdio+0x3c>)
 8011d1e:	4299      	cmp	r1, r3
 8011d20:	d004      	beq.n	8011d2c <cleanup_stdio+0x30>
 8011d22:	4620      	mov	r0, r4
 8011d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d28:	f001 b828 	b.w	8012d7c <_fflush_r>
 8011d2c:	bd10      	pop	{r4, pc}
 8011d2e:	bf00      	nop
 8011d30:	20000774 	.word	0x20000774
 8011d34:	200007dc 	.word	0x200007dc
 8011d38:	20000844 	.word	0x20000844

08011d3c <global_stdio_init.part.0>:
 8011d3c:	b510      	push	{r4, lr}
 8011d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8011d6c <global_stdio_init.part.0+0x30>)
 8011d40:	4c0b      	ldr	r4, [pc, #44]	@ (8011d70 <global_stdio_init.part.0+0x34>)
 8011d42:	4a0c      	ldr	r2, [pc, #48]	@ (8011d74 <global_stdio_init.part.0+0x38>)
 8011d44:	4620      	mov	r0, r4
 8011d46:	601a      	str	r2, [r3, #0]
 8011d48:	2104      	movs	r1, #4
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	f7ff ff94 	bl	8011c78 <std>
 8011d50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011d54:	2201      	movs	r2, #1
 8011d56:	2109      	movs	r1, #9
 8011d58:	f7ff ff8e 	bl	8011c78 <std>
 8011d5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011d60:	2202      	movs	r2, #2
 8011d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d66:	2112      	movs	r1, #18
 8011d68:	f7ff bf86 	b.w	8011c78 <std>
 8011d6c:	200008ac 	.word	0x200008ac
 8011d70:	20000774 	.word	0x20000774
 8011d74:	08011ce5 	.word	0x08011ce5

08011d78 <__sfp_lock_acquire>:
 8011d78:	4801      	ldr	r0, [pc, #4]	@ (8011d80 <__sfp_lock_acquire+0x8>)
 8011d7a:	f000 ba5c 	b.w	8012236 <__retarget_lock_acquire_recursive>
 8011d7e:	bf00      	nop
 8011d80:	200008b5 	.word	0x200008b5

08011d84 <__sfp_lock_release>:
 8011d84:	4801      	ldr	r0, [pc, #4]	@ (8011d8c <__sfp_lock_release+0x8>)
 8011d86:	f000 ba57 	b.w	8012238 <__retarget_lock_release_recursive>
 8011d8a:	bf00      	nop
 8011d8c:	200008b5 	.word	0x200008b5

08011d90 <__sinit>:
 8011d90:	b510      	push	{r4, lr}
 8011d92:	4604      	mov	r4, r0
 8011d94:	f7ff fff0 	bl	8011d78 <__sfp_lock_acquire>
 8011d98:	6a23      	ldr	r3, [r4, #32]
 8011d9a:	b11b      	cbz	r3, 8011da4 <__sinit+0x14>
 8011d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011da0:	f7ff bff0 	b.w	8011d84 <__sfp_lock_release>
 8011da4:	4b04      	ldr	r3, [pc, #16]	@ (8011db8 <__sinit+0x28>)
 8011da6:	6223      	str	r3, [r4, #32]
 8011da8:	4b04      	ldr	r3, [pc, #16]	@ (8011dbc <__sinit+0x2c>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d1f5      	bne.n	8011d9c <__sinit+0xc>
 8011db0:	f7ff ffc4 	bl	8011d3c <global_stdio_init.part.0>
 8011db4:	e7f2      	b.n	8011d9c <__sinit+0xc>
 8011db6:	bf00      	nop
 8011db8:	08011cfd 	.word	0x08011cfd
 8011dbc:	200008ac 	.word	0x200008ac

08011dc0 <_fwalk_sglue>:
 8011dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dc4:	4607      	mov	r7, r0
 8011dc6:	4688      	mov	r8, r1
 8011dc8:	4614      	mov	r4, r2
 8011dca:	2600      	movs	r6, #0
 8011dcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011dd0:	f1b9 0901 	subs.w	r9, r9, #1
 8011dd4:	d505      	bpl.n	8011de2 <_fwalk_sglue+0x22>
 8011dd6:	6824      	ldr	r4, [r4, #0]
 8011dd8:	2c00      	cmp	r4, #0
 8011dda:	d1f7      	bne.n	8011dcc <_fwalk_sglue+0xc>
 8011ddc:	4630      	mov	r0, r6
 8011dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011de2:	89ab      	ldrh	r3, [r5, #12]
 8011de4:	2b01      	cmp	r3, #1
 8011de6:	d907      	bls.n	8011df8 <_fwalk_sglue+0x38>
 8011de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011dec:	3301      	adds	r3, #1
 8011dee:	d003      	beq.n	8011df8 <_fwalk_sglue+0x38>
 8011df0:	4629      	mov	r1, r5
 8011df2:	4638      	mov	r0, r7
 8011df4:	47c0      	blx	r8
 8011df6:	4306      	orrs	r6, r0
 8011df8:	3568      	adds	r5, #104	@ 0x68
 8011dfa:	e7e9      	b.n	8011dd0 <_fwalk_sglue+0x10>

08011dfc <iprintf>:
 8011dfc:	b40f      	push	{r0, r1, r2, r3}
 8011dfe:	b507      	push	{r0, r1, r2, lr}
 8011e00:	4906      	ldr	r1, [pc, #24]	@ (8011e1c <iprintf+0x20>)
 8011e02:	ab04      	add	r3, sp, #16
 8011e04:	6808      	ldr	r0, [r1, #0]
 8011e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e0a:	6881      	ldr	r1, [r0, #8]
 8011e0c:	9301      	str	r3, [sp, #4]
 8011e0e:	f000 fc8b 	bl	8012728 <_vfiprintf_r>
 8011e12:	b003      	add	sp, #12
 8011e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e18:	b004      	add	sp, #16
 8011e1a:	4770      	bx	lr
 8011e1c:	200001a4 	.word	0x200001a4

08011e20 <putchar>:
 8011e20:	4b02      	ldr	r3, [pc, #8]	@ (8011e2c <putchar+0xc>)
 8011e22:	4601      	mov	r1, r0
 8011e24:	6818      	ldr	r0, [r3, #0]
 8011e26:	6882      	ldr	r2, [r0, #8]
 8011e28:	f001 b831 	b.w	8012e8e <_putc_r>
 8011e2c:	200001a4 	.word	0x200001a4

08011e30 <_puts_r>:
 8011e30:	6a03      	ldr	r3, [r0, #32]
 8011e32:	b570      	push	{r4, r5, r6, lr}
 8011e34:	4605      	mov	r5, r0
 8011e36:	460e      	mov	r6, r1
 8011e38:	6884      	ldr	r4, [r0, #8]
 8011e3a:	b90b      	cbnz	r3, 8011e40 <_puts_r+0x10>
 8011e3c:	f7ff ffa8 	bl	8011d90 <__sinit>
 8011e40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011e42:	07db      	lsls	r3, r3, #31
 8011e44:	d405      	bmi.n	8011e52 <_puts_r+0x22>
 8011e46:	89a3      	ldrh	r3, [r4, #12]
 8011e48:	0598      	lsls	r0, r3, #22
 8011e4a:	d402      	bmi.n	8011e52 <_puts_r+0x22>
 8011e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e4e:	f000 f9f2 	bl	8012236 <__retarget_lock_acquire_recursive>
 8011e52:	89a3      	ldrh	r3, [r4, #12]
 8011e54:	0719      	lsls	r1, r3, #28
 8011e56:	d502      	bpl.n	8011e5e <_puts_r+0x2e>
 8011e58:	6923      	ldr	r3, [r4, #16]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d135      	bne.n	8011eca <_puts_r+0x9a>
 8011e5e:	4621      	mov	r1, r4
 8011e60:	4628      	mov	r0, r5
 8011e62:	f000 f919 	bl	8012098 <__swsetup_r>
 8011e66:	b380      	cbz	r0, 8011eca <_puts_r+0x9a>
 8011e68:	f04f 35ff 	mov.w	r5, #4294967295
 8011e6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011e6e:	07da      	lsls	r2, r3, #31
 8011e70:	d405      	bmi.n	8011e7e <_puts_r+0x4e>
 8011e72:	89a3      	ldrh	r3, [r4, #12]
 8011e74:	059b      	lsls	r3, r3, #22
 8011e76:	d402      	bmi.n	8011e7e <_puts_r+0x4e>
 8011e78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e7a:	f000 f9dd 	bl	8012238 <__retarget_lock_release_recursive>
 8011e7e:	4628      	mov	r0, r5
 8011e80:	bd70      	pop	{r4, r5, r6, pc}
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	da04      	bge.n	8011e90 <_puts_r+0x60>
 8011e86:	69a2      	ldr	r2, [r4, #24]
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	dc17      	bgt.n	8011ebc <_puts_r+0x8c>
 8011e8c:	290a      	cmp	r1, #10
 8011e8e:	d015      	beq.n	8011ebc <_puts_r+0x8c>
 8011e90:	6823      	ldr	r3, [r4, #0]
 8011e92:	1c5a      	adds	r2, r3, #1
 8011e94:	6022      	str	r2, [r4, #0]
 8011e96:	7019      	strb	r1, [r3, #0]
 8011e98:	68a3      	ldr	r3, [r4, #8]
 8011e9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011e9e:	3b01      	subs	r3, #1
 8011ea0:	60a3      	str	r3, [r4, #8]
 8011ea2:	2900      	cmp	r1, #0
 8011ea4:	d1ed      	bne.n	8011e82 <_puts_r+0x52>
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	da11      	bge.n	8011ece <_puts_r+0x9e>
 8011eaa:	4622      	mov	r2, r4
 8011eac:	210a      	movs	r1, #10
 8011eae:	4628      	mov	r0, r5
 8011eb0:	f000 f8b3 	bl	801201a <__swbuf_r>
 8011eb4:	3001      	adds	r0, #1
 8011eb6:	d0d7      	beq.n	8011e68 <_puts_r+0x38>
 8011eb8:	250a      	movs	r5, #10
 8011eba:	e7d7      	b.n	8011e6c <_puts_r+0x3c>
 8011ebc:	4622      	mov	r2, r4
 8011ebe:	4628      	mov	r0, r5
 8011ec0:	f000 f8ab 	bl	801201a <__swbuf_r>
 8011ec4:	3001      	adds	r0, #1
 8011ec6:	d1e7      	bne.n	8011e98 <_puts_r+0x68>
 8011ec8:	e7ce      	b.n	8011e68 <_puts_r+0x38>
 8011eca:	3e01      	subs	r6, #1
 8011ecc:	e7e4      	b.n	8011e98 <_puts_r+0x68>
 8011ece:	6823      	ldr	r3, [r4, #0]
 8011ed0:	1c5a      	adds	r2, r3, #1
 8011ed2:	6022      	str	r2, [r4, #0]
 8011ed4:	220a      	movs	r2, #10
 8011ed6:	701a      	strb	r2, [r3, #0]
 8011ed8:	e7ee      	b.n	8011eb8 <_puts_r+0x88>
	...

08011edc <puts>:
 8011edc:	4b02      	ldr	r3, [pc, #8]	@ (8011ee8 <puts+0xc>)
 8011ede:	4601      	mov	r1, r0
 8011ee0:	6818      	ldr	r0, [r3, #0]
 8011ee2:	f7ff bfa5 	b.w	8011e30 <_puts_r>
 8011ee6:	bf00      	nop
 8011ee8:	200001a4 	.word	0x200001a4

08011eec <sniprintf>:
 8011eec:	b40c      	push	{r2, r3}
 8011eee:	b530      	push	{r4, r5, lr}
 8011ef0:	4b17      	ldr	r3, [pc, #92]	@ (8011f50 <sniprintf+0x64>)
 8011ef2:	1e0c      	subs	r4, r1, #0
 8011ef4:	681d      	ldr	r5, [r3, #0]
 8011ef6:	b09d      	sub	sp, #116	@ 0x74
 8011ef8:	da08      	bge.n	8011f0c <sniprintf+0x20>
 8011efa:	238b      	movs	r3, #139	@ 0x8b
 8011efc:	f04f 30ff 	mov.w	r0, #4294967295
 8011f00:	602b      	str	r3, [r5, #0]
 8011f02:	b01d      	add	sp, #116	@ 0x74
 8011f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f08:	b002      	add	sp, #8
 8011f0a:	4770      	bx	lr
 8011f0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011f10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011f14:	bf0c      	ite	eq
 8011f16:	4623      	moveq	r3, r4
 8011f18:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011f1c:	9304      	str	r3, [sp, #16]
 8011f1e:	9307      	str	r3, [sp, #28]
 8011f20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011f24:	9002      	str	r0, [sp, #8]
 8011f26:	9006      	str	r0, [sp, #24]
 8011f28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	ab21      	add	r3, sp, #132	@ 0x84
 8011f30:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011f32:	a902      	add	r1, sp, #8
 8011f34:	9301      	str	r3, [sp, #4]
 8011f36:	f000 fad3 	bl	80124e0 <_svfiprintf_r>
 8011f3a:	1c43      	adds	r3, r0, #1
 8011f3c:	bfbc      	itt	lt
 8011f3e:	238b      	movlt	r3, #139	@ 0x8b
 8011f40:	602b      	strlt	r3, [r5, #0]
 8011f42:	2c00      	cmp	r4, #0
 8011f44:	d0dd      	beq.n	8011f02 <sniprintf+0x16>
 8011f46:	2200      	movs	r2, #0
 8011f48:	9b02      	ldr	r3, [sp, #8]
 8011f4a:	701a      	strb	r2, [r3, #0]
 8011f4c:	e7d9      	b.n	8011f02 <sniprintf+0x16>
 8011f4e:	bf00      	nop
 8011f50:	200001a4 	.word	0x200001a4

08011f54 <siprintf>:
 8011f54:	b40e      	push	{r1, r2, r3}
 8011f56:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011f5a:	b500      	push	{lr}
 8011f5c:	b09c      	sub	sp, #112	@ 0x70
 8011f5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8011f60:	9002      	str	r0, [sp, #8]
 8011f62:	9006      	str	r0, [sp, #24]
 8011f64:	9107      	str	r1, [sp, #28]
 8011f66:	9104      	str	r1, [sp, #16]
 8011f68:	4808      	ldr	r0, [pc, #32]	@ (8011f8c <siprintf+0x38>)
 8011f6a:	4909      	ldr	r1, [pc, #36]	@ (8011f90 <siprintf+0x3c>)
 8011f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f70:	9105      	str	r1, [sp, #20]
 8011f72:	6800      	ldr	r0, [r0, #0]
 8011f74:	a902      	add	r1, sp, #8
 8011f76:	9301      	str	r3, [sp, #4]
 8011f78:	f000 fab2 	bl	80124e0 <_svfiprintf_r>
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	9b02      	ldr	r3, [sp, #8]
 8011f80:	701a      	strb	r2, [r3, #0]
 8011f82:	b01c      	add	sp, #112	@ 0x70
 8011f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f88:	b003      	add	sp, #12
 8011f8a:	4770      	bx	lr
 8011f8c:	200001a4 	.word	0x200001a4
 8011f90:	ffff0208 	.word	0xffff0208

08011f94 <__sread>:
 8011f94:	b510      	push	{r4, lr}
 8011f96:	460c      	mov	r4, r1
 8011f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f9c:	f000 f8fc 	bl	8012198 <_read_r>
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	bfab      	itete	ge
 8011fa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8011fa8:	181b      	addge	r3, r3, r0
 8011faa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011fae:	bfac      	ite	ge
 8011fb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011fb2:	81a3      	strhlt	r3, [r4, #12]
 8011fb4:	bd10      	pop	{r4, pc}

08011fb6 <__swrite>:
 8011fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fba:	461f      	mov	r7, r3
 8011fbc:	898b      	ldrh	r3, [r1, #12]
 8011fbe:	4605      	mov	r5, r0
 8011fc0:	05db      	lsls	r3, r3, #23
 8011fc2:	460c      	mov	r4, r1
 8011fc4:	4616      	mov	r6, r2
 8011fc6:	d505      	bpl.n	8011fd4 <__swrite+0x1e>
 8011fc8:	2302      	movs	r3, #2
 8011fca:	2200      	movs	r2, #0
 8011fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fd0:	f000 f8d0 	bl	8012174 <_lseek_r>
 8011fd4:	89a3      	ldrh	r3, [r4, #12]
 8011fd6:	4632      	mov	r2, r6
 8011fd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011fdc:	81a3      	strh	r3, [r4, #12]
 8011fde:	4628      	mov	r0, r5
 8011fe0:	463b      	mov	r3, r7
 8011fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fea:	f000 b8e7 	b.w	80121bc <_write_r>

08011fee <__sseek>:
 8011fee:	b510      	push	{r4, lr}
 8011ff0:	460c      	mov	r4, r1
 8011ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ff6:	f000 f8bd 	bl	8012174 <_lseek_r>
 8011ffa:	1c43      	adds	r3, r0, #1
 8011ffc:	89a3      	ldrh	r3, [r4, #12]
 8011ffe:	bf15      	itete	ne
 8012000:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012002:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012006:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801200a:	81a3      	strheq	r3, [r4, #12]
 801200c:	bf18      	it	ne
 801200e:	81a3      	strhne	r3, [r4, #12]
 8012010:	bd10      	pop	{r4, pc}

08012012 <__sclose>:
 8012012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012016:	f000 b89d 	b.w	8012154 <_close_r>

0801201a <__swbuf_r>:
 801201a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801201c:	460e      	mov	r6, r1
 801201e:	4614      	mov	r4, r2
 8012020:	4605      	mov	r5, r0
 8012022:	b118      	cbz	r0, 801202c <__swbuf_r+0x12>
 8012024:	6a03      	ldr	r3, [r0, #32]
 8012026:	b90b      	cbnz	r3, 801202c <__swbuf_r+0x12>
 8012028:	f7ff feb2 	bl	8011d90 <__sinit>
 801202c:	69a3      	ldr	r3, [r4, #24]
 801202e:	60a3      	str	r3, [r4, #8]
 8012030:	89a3      	ldrh	r3, [r4, #12]
 8012032:	071a      	lsls	r2, r3, #28
 8012034:	d501      	bpl.n	801203a <__swbuf_r+0x20>
 8012036:	6923      	ldr	r3, [r4, #16]
 8012038:	b943      	cbnz	r3, 801204c <__swbuf_r+0x32>
 801203a:	4621      	mov	r1, r4
 801203c:	4628      	mov	r0, r5
 801203e:	f000 f82b 	bl	8012098 <__swsetup_r>
 8012042:	b118      	cbz	r0, 801204c <__swbuf_r+0x32>
 8012044:	f04f 37ff 	mov.w	r7, #4294967295
 8012048:	4638      	mov	r0, r7
 801204a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801204c:	6823      	ldr	r3, [r4, #0]
 801204e:	6922      	ldr	r2, [r4, #16]
 8012050:	b2f6      	uxtb	r6, r6
 8012052:	1a98      	subs	r0, r3, r2
 8012054:	6963      	ldr	r3, [r4, #20]
 8012056:	4637      	mov	r7, r6
 8012058:	4283      	cmp	r3, r0
 801205a:	dc05      	bgt.n	8012068 <__swbuf_r+0x4e>
 801205c:	4621      	mov	r1, r4
 801205e:	4628      	mov	r0, r5
 8012060:	f000 fe8c 	bl	8012d7c <_fflush_r>
 8012064:	2800      	cmp	r0, #0
 8012066:	d1ed      	bne.n	8012044 <__swbuf_r+0x2a>
 8012068:	68a3      	ldr	r3, [r4, #8]
 801206a:	3b01      	subs	r3, #1
 801206c:	60a3      	str	r3, [r4, #8]
 801206e:	6823      	ldr	r3, [r4, #0]
 8012070:	1c5a      	adds	r2, r3, #1
 8012072:	6022      	str	r2, [r4, #0]
 8012074:	701e      	strb	r6, [r3, #0]
 8012076:	6962      	ldr	r2, [r4, #20]
 8012078:	1c43      	adds	r3, r0, #1
 801207a:	429a      	cmp	r2, r3
 801207c:	d004      	beq.n	8012088 <__swbuf_r+0x6e>
 801207e:	89a3      	ldrh	r3, [r4, #12]
 8012080:	07db      	lsls	r3, r3, #31
 8012082:	d5e1      	bpl.n	8012048 <__swbuf_r+0x2e>
 8012084:	2e0a      	cmp	r6, #10
 8012086:	d1df      	bne.n	8012048 <__swbuf_r+0x2e>
 8012088:	4621      	mov	r1, r4
 801208a:	4628      	mov	r0, r5
 801208c:	f000 fe76 	bl	8012d7c <_fflush_r>
 8012090:	2800      	cmp	r0, #0
 8012092:	d0d9      	beq.n	8012048 <__swbuf_r+0x2e>
 8012094:	e7d6      	b.n	8012044 <__swbuf_r+0x2a>
	...

08012098 <__swsetup_r>:
 8012098:	b538      	push	{r3, r4, r5, lr}
 801209a:	4b29      	ldr	r3, [pc, #164]	@ (8012140 <__swsetup_r+0xa8>)
 801209c:	4605      	mov	r5, r0
 801209e:	6818      	ldr	r0, [r3, #0]
 80120a0:	460c      	mov	r4, r1
 80120a2:	b118      	cbz	r0, 80120ac <__swsetup_r+0x14>
 80120a4:	6a03      	ldr	r3, [r0, #32]
 80120a6:	b90b      	cbnz	r3, 80120ac <__swsetup_r+0x14>
 80120a8:	f7ff fe72 	bl	8011d90 <__sinit>
 80120ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120b0:	0719      	lsls	r1, r3, #28
 80120b2:	d422      	bmi.n	80120fa <__swsetup_r+0x62>
 80120b4:	06da      	lsls	r2, r3, #27
 80120b6:	d407      	bmi.n	80120c8 <__swsetup_r+0x30>
 80120b8:	2209      	movs	r2, #9
 80120ba:	602a      	str	r2, [r5, #0]
 80120bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120c0:	f04f 30ff 	mov.w	r0, #4294967295
 80120c4:	81a3      	strh	r3, [r4, #12]
 80120c6:	e033      	b.n	8012130 <__swsetup_r+0x98>
 80120c8:	0758      	lsls	r0, r3, #29
 80120ca:	d512      	bpl.n	80120f2 <__swsetup_r+0x5a>
 80120cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80120ce:	b141      	cbz	r1, 80120e2 <__swsetup_r+0x4a>
 80120d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120d4:	4299      	cmp	r1, r3
 80120d6:	d002      	beq.n	80120de <__swsetup_r+0x46>
 80120d8:	4628      	mov	r0, r5
 80120da:	f000 f8af 	bl	801223c <_free_r>
 80120de:	2300      	movs	r3, #0
 80120e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80120e2:	89a3      	ldrh	r3, [r4, #12]
 80120e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80120e8:	81a3      	strh	r3, [r4, #12]
 80120ea:	2300      	movs	r3, #0
 80120ec:	6063      	str	r3, [r4, #4]
 80120ee:	6923      	ldr	r3, [r4, #16]
 80120f0:	6023      	str	r3, [r4, #0]
 80120f2:	89a3      	ldrh	r3, [r4, #12]
 80120f4:	f043 0308 	orr.w	r3, r3, #8
 80120f8:	81a3      	strh	r3, [r4, #12]
 80120fa:	6923      	ldr	r3, [r4, #16]
 80120fc:	b94b      	cbnz	r3, 8012112 <__swsetup_r+0x7a>
 80120fe:	89a3      	ldrh	r3, [r4, #12]
 8012100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012108:	d003      	beq.n	8012112 <__swsetup_r+0x7a>
 801210a:	4621      	mov	r1, r4
 801210c:	4628      	mov	r0, r5
 801210e:	f000 fe82 	bl	8012e16 <__smakebuf_r>
 8012112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012116:	f013 0201 	ands.w	r2, r3, #1
 801211a:	d00a      	beq.n	8012132 <__swsetup_r+0x9a>
 801211c:	2200      	movs	r2, #0
 801211e:	60a2      	str	r2, [r4, #8]
 8012120:	6962      	ldr	r2, [r4, #20]
 8012122:	4252      	negs	r2, r2
 8012124:	61a2      	str	r2, [r4, #24]
 8012126:	6922      	ldr	r2, [r4, #16]
 8012128:	b942      	cbnz	r2, 801213c <__swsetup_r+0xa4>
 801212a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801212e:	d1c5      	bne.n	80120bc <__swsetup_r+0x24>
 8012130:	bd38      	pop	{r3, r4, r5, pc}
 8012132:	0799      	lsls	r1, r3, #30
 8012134:	bf58      	it	pl
 8012136:	6962      	ldrpl	r2, [r4, #20]
 8012138:	60a2      	str	r2, [r4, #8]
 801213a:	e7f4      	b.n	8012126 <__swsetup_r+0x8e>
 801213c:	2000      	movs	r0, #0
 801213e:	e7f7      	b.n	8012130 <__swsetup_r+0x98>
 8012140:	200001a4 	.word	0x200001a4

08012144 <memset>:
 8012144:	4603      	mov	r3, r0
 8012146:	4402      	add	r2, r0
 8012148:	4293      	cmp	r3, r2
 801214a:	d100      	bne.n	801214e <memset+0xa>
 801214c:	4770      	bx	lr
 801214e:	f803 1b01 	strb.w	r1, [r3], #1
 8012152:	e7f9      	b.n	8012148 <memset+0x4>

08012154 <_close_r>:
 8012154:	b538      	push	{r3, r4, r5, lr}
 8012156:	2300      	movs	r3, #0
 8012158:	4d05      	ldr	r5, [pc, #20]	@ (8012170 <_close_r+0x1c>)
 801215a:	4604      	mov	r4, r0
 801215c:	4608      	mov	r0, r1
 801215e:	602b      	str	r3, [r5, #0]
 8012160:	f7f0 fda3 	bl	8002caa <_close>
 8012164:	1c43      	adds	r3, r0, #1
 8012166:	d102      	bne.n	801216e <_close_r+0x1a>
 8012168:	682b      	ldr	r3, [r5, #0]
 801216a:	b103      	cbz	r3, 801216e <_close_r+0x1a>
 801216c:	6023      	str	r3, [r4, #0]
 801216e:	bd38      	pop	{r3, r4, r5, pc}
 8012170:	200008b0 	.word	0x200008b0

08012174 <_lseek_r>:
 8012174:	b538      	push	{r3, r4, r5, lr}
 8012176:	4604      	mov	r4, r0
 8012178:	4608      	mov	r0, r1
 801217a:	4611      	mov	r1, r2
 801217c:	2200      	movs	r2, #0
 801217e:	4d05      	ldr	r5, [pc, #20]	@ (8012194 <_lseek_r+0x20>)
 8012180:	602a      	str	r2, [r5, #0]
 8012182:	461a      	mov	r2, r3
 8012184:	f7f0 fdb5 	bl	8002cf2 <_lseek>
 8012188:	1c43      	adds	r3, r0, #1
 801218a:	d102      	bne.n	8012192 <_lseek_r+0x1e>
 801218c:	682b      	ldr	r3, [r5, #0]
 801218e:	b103      	cbz	r3, 8012192 <_lseek_r+0x1e>
 8012190:	6023      	str	r3, [r4, #0]
 8012192:	bd38      	pop	{r3, r4, r5, pc}
 8012194:	200008b0 	.word	0x200008b0

08012198 <_read_r>:
 8012198:	b538      	push	{r3, r4, r5, lr}
 801219a:	4604      	mov	r4, r0
 801219c:	4608      	mov	r0, r1
 801219e:	4611      	mov	r1, r2
 80121a0:	2200      	movs	r2, #0
 80121a2:	4d05      	ldr	r5, [pc, #20]	@ (80121b8 <_read_r+0x20>)
 80121a4:	602a      	str	r2, [r5, #0]
 80121a6:	461a      	mov	r2, r3
 80121a8:	f7f0 fd46 	bl	8002c38 <_read>
 80121ac:	1c43      	adds	r3, r0, #1
 80121ae:	d102      	bne.n	80121b6 <_read_r+0x1e>
 80121b0:	682b      	ldr	r3, [r5, #0]
 80121b2:	b103      	cbz	r3, 80121b6 <_read_r+0x1e>
 80121b4:	6023      	str	r3, [r4, #0]
 80121b6:	bd38      	pop	{r3, r4, r5, pc}
 80121b8:	200008b0 	.word	0x200008b0

080121bc <_write_r>:
 80121bc:	b538      	push	{r3, r4, r5, lr}
 80121be:	4604      	mov	r4, r0
 80121c0:	4608      	mov	r0, r1
 80121c2:	4611      	mov	r1, r2
 80121c4:	2200      	movs	r2, #0
 80121c6:	4d05      	ldr	r5, [pc, #20]	@ (80121dc <_write_r+0x20>)
 80121c8:	602a      	str	r2, [r5, #0]
 80121ca:	461a      	mov	r2, r3
 80121cc:	f7f0 fd51 	bl	8002c72 <_write>
 80121d0:	1c43      	adds	r3, r0, #1
 80121d2:	d102      	bne.n	80121da <_write_r+0x1e>
 80121d4:	682b      	ldr	r3, [r5, #0]
 80121d6:	b103      	cbz	r3, 80121da <_write_r+0x1e>
 80121d8:	6023      	str	r3, [r4, #0]
 80121da:	bd38      	pop	{r3, r4, r5, pc}
 80121dc:	200008b0 	.word	0x200008b0

080121e0 <__errno>:
 80121e0:	4b01      	ldr	r3, [pc, #4]	@ (80121e8 <__errno+0x8>)
 80121e2:	6818      	ldr	r0, [r3, #0]
 80121e4:	4770      	bx	lr
 80121e6:	bf00      	nop
 80121e8:	200001a4 	.word	0x200001a4

080121ec <__libc_init_array>:
 80121ec:	b570      	push	{r4, r5, r6, lr}
 80121ee:	2600      	movs	r6, #0
 80121f0:	4d0c      	ldr	r5, [pc, #48]	@ (8012224 <__libc_init_array+0x38>)
 80121f2:	4c0d      	ldr	r4, [pc, #52]	@ (8012228 <__libc_init_array+0x3c>)
 80121f4:	1b64      	subs	r4, r4, r5
 80121f6:	10a4      	asrs	r4, r4, #2
 80121f8:	42a6      	cmp	r6, r4
 80121fa:	d109      	bne.n	8012210 <__libc_init_array+0x24>
 80121fc:	f001 fe5c 	bl	8013eb8 <_init>
 8012200:	2600      	movs	r6, #0
 8012202:	4d0a      	ldr	r5, [pc, #40]	@ (801222c <__libc_init_array+0x40>)
 8012204:	4c0a      	ldr	r4, [pc, #40]	@ (8012230 <__libc_init_array+0x44>)
 8012206:	1b64      	subs	r4, r4, r5
 8012208:	10a4      	asrs	r4, r4, #2
 801220a:	42a6      	cmp	r6, r4
 801220c:	d105      	bne.n	801221a <__libc_init_array+0x2e>
 801220e:	bd70      	pop	{r4, r5, r6, pc}
 8012210:	f855 3b04 	ldr.w	r3, [r5], #4
 8012214:	4798      	blx	r3
 8012216:	3601      	adds	r6, #1
 8012218:	e7ee      	b.n	80121f8 <__libc_init_array+0xc>
 801221a:	f855 3b04 	ldr.w	r3, [r5], #4
 801221e:	4798      	blx	r3
 8012220:	3601      	adds	r6, #1
 8012222:	e7f2      	b.n	801220a <__libc_init_array+0x1e>
 8012224:	080140f0 	.word	0x080140f0
 8012228:	080140f0 	.word	0x080140f0
 801222c:	080140f0 	.word	0x080140f0
 8012230:	080140f4 	.word	0x080140f4

08012234 <__retarget_lock_init_recursive>:
 8012234:	4770      	bx	lr

08012236 <__retarget_lock_acquire_recursive>:
 8012236:	4770      	bx	lr

08012238 <__retarget_lock_release_recursive>:
 8012238:	4770      	bx	lr
	...

0801223c <_free_r>:
 801223c:	b538      	push	{r3, r4, r5, lr}
 801223e:	4605      	mov	r5, r0
 8012240:	2900      	cmp	r1, #0
 8012242:	d040      	beq.n	80122c6 <_free_r+0x8a>
 8012244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012248:	1f0c      	subs	r4, r1, #4
 801224a:	2b00      	cmp	r3, #0
 801224c:	bfb8      	it	lt
 801224e:	18e4      	addlt	r4, r4, r3
 8012250:	f000 f8de 	bl	8012410 <__malloc_lock>
 8012254:	4a1c      	ldr	r2, [pc, #112]	@ (80122c8 <_free_r+0x8c>)
 8012256:	6813      	ldr	r3, [r2, #0]
 8012258:	b933      	cbnz	r3, 8012268 <_free_r+0x2c>
 801225a:	6063      	str	r3, [r4, #4]
 801225c:	6014      	str	r4, [r2, #0]
 801225e:	4628      	mov	r0, r5
 8012260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012264:	f000 b8da 	b.w	801241c <__malloc_unlock>
 8012268:	42a3      	cmp	r3, r4
 801226a:	d908      	bls.n	801227e <_free_r+0x42>
 801226c:	6820      	ldr	r0, [r4, #0]
 801226e:	1821      	adds	r1, r4, r0
 8012270:	428b      	cmp	r3, r1
 8012272:	bf01      	itttt	eq
 8012274:	6819      	ldreq	r1, [r3, #0]
 8012276:	685b      	ldreq	r3, [r3, #4]
 8012278:	1809      	addeq	r1, r1, r0
 801227a:	6021      	streq	r1, [r4, #0]
 801227c:	e7ed      	b.n	801225a <_free_r+0x1e>
 801227e:	461a      	mov	r2, r3
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	b10b      	cbz	r3, 8012288 <_free_r+0x4c>
 8012284:	42a3      	cmp	r3, r4
 8012286:	d9fa      	bls.n	801227e <_free_r+0x42>
 8012288:	6811      	ldr	r1, [r2, #0]
 801228a:	1850      	adds	r0, r2, r1
 801228c:	42a0      	cmp	r0, r4
 801228e:	d10b      	bne.n	80122a8 <_free_r+0x6c>
 8012290:	6820      	ldr	r0, [r4, #0]
 8012292:	4401      	add	r1, r0
 8012294:	1850      	adds	r0, r2, r1
 8012296:	4283      	cmp	r3, r0
 8012298:	6011      	str	r1, [r2, #0]
 801229a:	d1e0      	bne.n	801225e <_free_r+0x22>
 801229c:	6818      	ldr	r0, [r3, #0]
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	4408      	add	r0, r1
 80122a2:	6010      	str	r0, [r2, #0]
 80122a4:	6053      	str	r3, [r2, #4]
 80122a6:	e7da      	b.n	801225e <_free_r+0x22>
 80122a8:	d902      	bls.n	80122b0 <_free_r+0x74>
 80122aa:	230c      	movs	r3, #12
 80122ac:	602b      	str	r3, [r5, #0]
 80122ae:	e7d6      	b.n	801225e <_free_r+0x22>
 80122b0:	6820      	ldr	r0, [r4, #0]
 80122b2:	1821      	adds	r1, r4, r0
 80122b4:	428b      	cmp	r3, r1
 80122b6:	bf01      	itttt	eq
 80122b8:	6819      	ldreq	r1, [r3, #0]
 80122ba:	685b      	ldreq	r3, [r3, #4]
 80122bc:	1809      	addeq	r1, r1, r0
 80122be:	6021      	streq	r1, [r4, #0]
 80122c0:	6063      	str	r3, [r4, #4]
 80122c2:	6054      	str	r4, [r2, #4]
 80122c4:	e7cb      	b.n	801225e <_free_r+0x22>
 80122c6:	bd38      	pop	{r3, r4, r5, pc}
 80122c8:	200008bc 	.word	0x200008bc

080122cc <sbrk_aligned>:
 80122cc:	b570      	push	{r4, r5, r6, lr}
 80122ce:	4e0f      	ldr	r6, [pc, #60]	@ (801230c <sbrk_aligned+0x40>)
 80122d0:	460c      	mov	r4, r1
 80122d2:	6831      	ldr	r1, [r6, #0]
 80122d4:	4605      	mov	r5, r0
 80122d6:	b911      	cbnz	r1, 80122de <sbrk_aligned+0x12>
 80122d8:	f000 fe4a 	bl	8012f70 <_sbrk_r>
 80122dc:	6030      	str	r0, [r6, #0]
 80122de:	4621      	mov	r1, r4
 80122e0:	4628      	mov	r0, r5
 80122e2:	f000 fe45 	bl	8012f70 <_sbrk_r>
 80122e6:	1c43      	adds	r3, r0, #1
 80122e8:	d103      	bne.n	80122f2 <sbrk_aligned+0x26>
 80122ea:	f04f 34ff 	mov.w	r4, #4294967295
 80122ee:	4620      	mov	r0, r4
 80122f0:	bd70      	pop	{r4, r5, r6, pc}
 80122f2:	1cc4      	adds	r4, r0, #3
 80122f4:	f024 0403 	bic.w	r4, r4, #3
 80122f8:	42a0      	cmp	r0, r4
 80122fa:	d0f8      	beq.n	80122ee <sbrk_aligned+0x22>
 80122fc:	1a21      	subs	r1, r4, r0
 80122fe:	4628      	mov	r0, r5
 8012300:	f000 fe36 	bl	8012f70 <_sbrk_r>
 8012304:	3001      	adds	r0, #1
 8012306:	d1f2      	bne.n	80122ee <sbrk_aligned+0x22>
 8012308:	e7ef      	b.n	80122ea <sbrk_aligned+0x1e>
 801230a:	bf00      	nop
 801230c:	200008b8 	.word	0x200008b8

08012310 <_malloc_r>:
 8012310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012314:	1ccd      	adds	r5, r1, #3
 8012316:	f025 0503 	bic.w	r5, r5, #3
 801231a:	3508      	adds	r5, #8
 801231c:	2d0c      	cmp	r5, #12
 801231e:	bf38      	it	cc
 8012320:	250c      	movcc	r5, #12
 8012322:	2d00      	cmp	r5, #0
 8012324:	4606      	mov	r6, r0
 8012326:	db01      	blt.n	801232c <_malloc_r+0x1c>
 8012328:	42a9      	cmp	r1, r5
 801232a:	d904      	bls.n	8012336 <_malloc_r+0x26>
 801232c:	230c      	movs	r3, #12
 801232e:	6033      	str	r3, [r6, #0]
 8012330:	2000      	movs	r0, #0
 8012332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801240c <_malloc_r+0xfc>
 801233a:	f000 f869 	bl	8012410 <__malloc_lock>
 801233e:	f8d8 3000 	ldr.w	r3, [r8]
 8012342:	461c      	mov	r4, r3
 8012344:	bb44      	cbnz	r4, 8012398 <_malloc_r+0x88>
 8012346:	4629      	mov	r1, r5
 8012348:	4630      	mov	r0, r6
 801234a:	f7ff ffbf 	bl	80122cc <sbrk_aligned>
 801234e:	1c43      	adds	r3, r0, #1
 8012350:	4604      	mov	r4, r0
 8012352:	d158      	bne.n	8012406 <_malloc_r+0xf6>
 8012354:	f8d8 4000 	ldr.w	r4, [r8]
 8012358:	4627      	mov	r7, r4
 801235a:	2f00      	cmp	r7, #0
 801235c:	d143      	bne.n	80123e6 <_malloc_r+0xd6>
 801235e:	2c00      	cmp	r4, #0
 8012360:	d04b      	beq.n	80123fa <_malloc_r+0xea>
 8012362:	6823      	ldr	r3, [r4, #0]
 8012364:	4639      	mov	r1, r7
 8012366:	4630      	mov	r0, r6
 8012368:	eb04 0903 	add.w	r9, r4, r3
 801236c:	f000 fe00 	bl	8012f70 <_sbrk_r>
 8012370:	4581      	cmp	r9, r0
 8012372:	d142      	bne.n	80123fa <_malloc_r+0xea>
 8012374:	6821      	ldr	r1, [r4, #0]
 8012376:	4630      	mov	r0, r6
 8012378:	1a6d      	subs	r5, r5, r1
 801237a:	4629      	mov	r1, r5
 801237c:	f7ff ffa6 	bl	80122cc <sbrk_aligned>
 8012380:	3001      	adds	r0, #1
 8012382:	d03a      	beq.n	80123fa <_malloc_r+0xea>
 8012384:	6823      	ldr	r3, [r4, #0]
 8012386:	442b      	add	r3, r5
 8012388:	6023      	str	r3, [r4, #0]
 801238a:	f8d8 3000 	ldr.w	r3, [r8]
 801238e:	685a      	ldr	r2, [r3, #4]
 8012390:	bb62      	cbnz	r2, 80123ec <_malloc_r+0xdc>
 8012392:	f8c8 7000 	str.w	r7, [r8]
 8012396:	e00f      	b.n	80123b8 <_malloc_r+0xa8>
 8012398:	6822      	ldr	r2, [r4, #0]
 801239a:	1b52      	subs	r2, r2, r5
 801239c:	d420      	bmi.n	80123e0 <_malloc_r+0xd0>
 801239e:	2a0b      	cmp	r2, #11
 80123a0:	d917      	bls.n	80123d2 <_malloc_r+0xc2>
 80123a2:	1961      	adds	r1, r4, r5
 80123a4:	42a3      	cmp	r3, r4
 80123a6:	6025      	str	r5, [r4, #0]
 80123a8:	bf18      	it	ne
 80123aa:	6059      	strne	r1, [r3, #4]
 80123ac:	6863      	ldr	r3, [r4, #4]
 80123ae:	bf08      	it	eq
 80123b0:	f8c8 1000 	streq.w	r1, [r8]
 80123b4:	5162      	str	r2, [r4, r5]
 80123b6:	604b      	str	r3, [r1, #4]
 80123b8:	4630      	mov	r0, r6
 80123ba:	f000 f82f 	bl	801241c <__malloc_unlock>
 80123be:	f104 000b 	add.w	r0, r4, #11
 80123c2:	1d23      	adds	r3, r4, #4
 80123c4:	f020 0007 	bic.w	r0, r0, #7
 80123c8:	1ac2      	subs	r2, r0, r3
 80123ca:	bf1c      	itt	ne
 80123cc:	1a1b      	subne	r3, r3, r0
 80123ce:	50a3      	strne	r3, [r4, r2]
 80123d0:	e7af      	b.n	8012332 <_malloc_r+0x22>
 80123d2:	6862      	ldr	r2, [r4, #4]
 80123d4:	42a3      	cmp	r3, r4
 80123d6:	bf0c      	ite	eq
 80123d8:	f8c8 2000 	streq.w	r2, [r8]
 80123dc:	605a      	strne	r2, [r3, #4]
 80123de:	e7eb      	b.n	80123b8 <_malloc_r+0xa8>
 80123e0:	4623      	mov	r3, r4
 80123e2:	6864      	ldr	r4, [r4, #4]
 80123e4:	e7ae      	b.n	8012344 <_malloc_r+0x34>
 80123e6:	463c      	mov	r4, r7
 80123e8:	687f      	ldr	r7, [r7, #4]
 80123ea:	e7b6      	b.n	801235a <_malloc_r+0x4a>
 80123ec:	461a      	mov	r2, r3
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	42a3      	cmp	r3, r4
 80123f2:	d1fb      	bne.n	80123ec <_malloc_r+0xdc>
 80123f4:	2300      	movs	r3, #0
 80123f6:	6053      	str	r3, [r2, #4]
 80123f8:	e7de      	b.n	80123b8 <_malloc_r+0xa8>
 80123fa:	230c      	movs	r3, #12
 80123fc:	4630      	mov	r0, r6
 80123fe:	6033      	str	r3, [r6, #0]
 8012400:	f000 f80c 	bl	801241c <__malloc_unlock>
 8012404:	e794      	b.n	8012330 <_malloc_r+0x20>
 8012406:	6005      	str	r5, [r0, #0]
 8012408:	e7d6      	b.n	80123b8 <_malloc_r+0xa8>
 801240a:	bf00      	nop
 801240c:	200008bc 	.word	0x200008bc

08012410 <__malloc_lock>:
 8012410:	4801      	ldr	r0, [pc, #4]	@ (8012418 <__malloc_lock+0x8>)
 8012412:	f7ff bf10 	b.w	8012236 <__retarget_lock_acquire_recursive>
 8012416:	bf00      	nop
 8012418:	200008b4 	.word	0x200008b4

0801241c <__malloc_unlock>:
 801241c:	4801      	ldr	r0, [pc, #4]	@ (8012424 <__malloc_unlock+0x8>)
 801241e:	f7ff bf0b 	b.w	8012238 <__retarget_lock_release_recursive>
 8012422:	bf00      	nop
 8012424:	200008b4 	.word	0x200008b4

08012428 <__ssputs_r>:
 8012428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801242c:	461f      	mov	r7, r3
 801242e:	688e      	ldr	r6, [r1, #8]
 8012430:	4682      	mov	sl, r0
 8012432:	42be      	cmp	r6, r7
 8012434:	460c      	mov	r4, r1
 8012436:	4690      	mov	r8, r2
 8012438:	680b      	ldr	r3, [r1, #0]
 801243a:	d82d      	bhi.n	8012498 <__ssputs_r+0x70>
 801243c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012440:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012444:	d026      	beq.n	8012494 <__ssputs_r+0x6c>
 8012446:	6965      	ldr	r5, [r4, #20]
 8012448:	6909      	ldr	r1, [r1, #16]
 801244a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801244e:	eba3 0901 	sub.w	r9, r3, r1
 8012452:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012456:	1c7b      	adds	r3, r7, #1
 8012458:	444b      	add	r3, r9
 801245a:	106d      	asrs	r5, r5, #1
 801245c:	429d      	cmp	r5, r3
 801245e:	bf38      	it	cc
 8012460:	461d      	movcc	r5, r3
 8012462:	0553      	lsls	r3, r2, #21
 8012464:	d527      	bpl.n	80124b6 <__ssputs_r+0x8e>
 8012466:	4629      	mov	r1, r5
 8012468:	f7ff ff52 	bl	8012310 <_malloc_r>
 801246c:	4606      	mov	r6, r0
 801246e:	b360      	cbz	r0, 80124ca <__ssputs_r+0xa2>
 8012470:	464a      	mov	r2, r9
 8012472:	6921      	ldr	r1, [r4, #16]
 8012474:	f000 fd9a 	bl	8012fac <memcpy>
 8012478:	89a3      	ldrh	r3, [r4, #12]
 801247a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801247e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012482:	81a3      	strh	r3, [r4, #12]
 8012484:	6126      	str	r6, [r4, #16]
 8012486:	444e      	add	r6, r9
 8012488:	6026      	str	r6, [r4, #0]
 801248a:	463e      	mov	r6, r7
 801248c:	6165      	str	r5, [r4, #20]
 801248e:	eba5 0509 	sub.w	r5, r5, r9
 8012492:	60a5      	str	r5, [r4, #8]
 8012494:	42be      	cmp	r6, r7
 8012496:	d900      	bls.n	801249a <__ssputs_r+0x72>
 8012498:	463e      	mov	r6, r7
 801249a:	4632      	mov	r2, r6
 801249c:	4641      	mov	r1, r8
 801249e:	6820      	ldr	r0, [r4, #0]
 80124a0:	f000 fd29 	bl	8012ef6 <memmove>
 80124a4:	2000      	movs	r0, #0
 80124a6:	68a3      	ldr	r3, [r4, #8]
 80124a8:	1b9b      	subs	r3, r3, r6
 80124aa:	60a3      	str	r3, [r4, #8]
 80124ac:	6823      	ldr	r3, [r4, #0]
 80124ae:	4433      	add	r3, r6
 80124b0:	6023      	str	r3, [r4, #0]
 80124b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124b6:	462a      	mov	r2, r5
 80124b8:	f000 fd86 	bl	8012fc8 <_realloc_r>
 80124bc:	4606      	mov	r6, r0
 80124be:	2800      	cmp	r0, #0
 80124c0:	d1e0      	bne.n	8012484 <__ssputs_r+0x5c>
 80124c2:	4650      	mov	r0, sl
 80124c4:	6921      	ldr	r1, [r4, #16]
 80124c6:	f7ff feb9 	bl	801223c <_free_r>
 80124ca:	230c      	movs	r3, #12
 80124cc:	f8ca 3000 	str.w	r3, [sl]
 80124d0:	89a3      	ldrh	r3, [r4, #12]
 80124d2:	f04f 30ff 	mov.w	r0, #4294967295
 80124d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124da:	81a3      	strh	r3, [r4, #12]
 80124dc:	e7e9      	b.n	80124b2 <__ssputs_r+0x8a>
	...

080124e0 <_svfiprintf_r>:
 80124e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e4:	4698      	mov	r8, r3
 80124e6:	898b      	ldrh	r3, [r1, #12]
 80124e8:	4607      	mov	r7, r0
 80124ea:	061b      	lsls	r3, r3, #24
 80124ec:	460d      	mov	r5, r1
 80124ee:	4614      	mov	r4, r2
 80124f0:	b09d      	sub	sp, #116	@ 0x74
 80124f2:	d510      	bpl.n	8012516 <_svfiprintf_r+0x36>
 80124f4:	690b      	ldr	r3, [r1, #16]
 80124f6:	b973      	cbnz	r3, 8012516 <_svfiprintf_r+0x36>
 80124f8:	2140      	movs	r1, #64	@ 0x40
 80124fa:	f7ff ff09 	bl	8012310 <_malloc_r>
 80124fe:	6028      	str	r0, [r5, #0]
 8012500:	6128      	str	r0, [r5, #16]
 8012502:	b930      	cbnz	r0, 8012512 <_svfiprintf_r+0x32>
 8012504:	230c      	movs	r3, #12
 8012506:	603b      	str	r3, [r7, #0]
 8012508:	f04f 30ff 	mov.w	r0, #4294967295
 801250c:	b01d      	add	sp, #116	@ 0x74
 801250e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012512:	2340      	movs	r3, #64	@ 0x40
 8012514:	616b      	str	r3, [r5, #20]
 8012516:	2300      	movs	r3, #0
 8012518:	9309      	str	r3, [sp, #36]	@ 0x24
 801251a:	2320      	movs	r3, #32
 801251c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012520:	2330      	movs	r3, #48	@ 0x30
 8012522:	f04f 0901 	mov.w	r9, #1
 8012526:	f8cd 800c 	str.w	r8, [sp, #12]
 801252a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80126c4 <_svfiprintf_r+0x1e4>
 801252e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012532:	4623      	mov	r3, r4
 8012534:	469a      	mov	sl, r3
 8012536:	f813 2b01 	ldrb.w	r2, [r3], #1
 801253a:	b10a      	cbz	r2, 8012540 <_svfiprintf_r+0x60>
 801253c:	2a25      	cmp	r2, #37	@ 0x25
 801253e:	d1f9      	bne.n	8012534 <_svfiprintf_r+0x54>
 8012540:	ebba 0b04 	subs.w	fp, sl, r4
 8012544:	d00b      	beq.n	801255e <_svfiprintf_r+0x7e>
 8012546:	465b      	mov	r3, fp
 8012548:	4622      	mov	r2, r4
 801254a:	4629      	mov	r1, r5
 801254c:	4638      	mov	r0, r7
 801254e:	f7ff ff6b 	bl	8012428 <__ssputs_r>
 8012552:	3001      	adds	r0, #1
 8012554:	f000 80a7 	beq.w	80126a6 <_svfiprintf_r+0x1c6>
 8012558:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801255a:	445a      	add	r2, fp
 801255c:	9209      	str	r2, [sp, #36]	@ 0x24
 801255e:	f89a 3000 	ldrb.w	r3, [sl]
 8012562:	2b00      	cmp	r3, #0
 8012564:	f000 809f 	beq.w	80126a6 <_svfiprintf_r+0x1c6>
 8012568:	2300      	movs	r3, #0
 801256a:	f04f 32ff 	mov.w	r2, #4294967295
 801256e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012572:	f10a 0a01 	add.w	sl, sl, #1
 8012576:	9304      	str	r3, [sp, #16]
 8012578:	9307      	str	r3, [sp, #28]
 801257a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801257e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012580:	4654      	mov	r4, sl
 8012582:	2205      	movs	r2, #5
 8012584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012588:	484e      	ldr	r0, [pc, #312]	@ (80126c4 <_svfiprintf_r+0x1e4>)
 801258a:	f000 fd01 	bl	8012f90 <memchr>
 801258e:	9a04      	ldr	r2, [sp, #16]
 8012590:	b9d8      	cbnz	r0, 80125ca <_svfiprintf_r+0xea>
 8012592:	06d0      	lsls	r0, r2, #27
 8012594:	bf44      	itt	mi
 8012596:	2320      	movmi	r3, #32
 8012598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801259c:	0711      	lsls	r1, r2, #28
 801259e:	bf44      	itt	mi
 80125a0:	232b      	movmi	r3, #43	@ 0x2b
 80125a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125a6:	f89a 3000 	ldrb.w	r3, [sl]
 80125aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80125ac:	d015      	beq.n	80125da <_svfiprintf_r+0xfa>
 80125ae:	4654      	mov	r4, sl
 80125b0:	2000      	movs	r0, #0
 80125b2:	f04f 0c0a 	mov.w	ip, #10
 80125b6:	9a07      	ldr	r2, [sp, #28]
 80125b8:	4621      	mov	r1, r4
 80125ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125be:	3b30      	subs	r3, #48	@ 0x30
 80125c0:	2b09      	cmp	r3, #9
 80125c2:	d94b      	bls.n	801265c <_svfiprintf_r+0x17c>
 80125c4:	b1b0      	cbz	r0, 80125f4 <_svfiprintf_r+0x114>
 80125c6:	9207      	str	r2, [sp, #28]
 80125c8:	e014      	b.n	80125f4 <_svfiprintf_r+0x114>
 80125ca:	eba0 0308 	sub.w	r3, r0, r8
 80125ce:	fa09 f303 	lsl.w	r3, r9, r3
 80125d2:	4313      	orrs	r3, r2
 80125d4:	46a2      	mov	sl, r4
 80125d6:	9304      	str	r3, [sp, #16]
 80125d8:	e7d2      	b.n	8012580 <_svfiprintf_r+0xa0>
 80125da:	9b03      	ldr	r3, [sp, #12]
 80125dc:	1d19      	adds	r1, r3, #4
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	9103      	str	r1, [sp, #12]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	bfbb      	ittet	lt
 80125e6:	425b      	neglt	r3, r3
 80125e8:	f042 0202 	orrlt.w	r2, r2, #2
 80125ec:	9307      	strge	r3, [sp, #28]
 80125ee:	9307      	strlt	r3, [sp, #28]
 80125f0:	bfb8      	it	lt
 80125f2:	9204      	strlt	r2, [sp, #16]
 80125f4:	7823      	ldrb	r3, [r4, #0]
 80125f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80125f8:	d10a      	bne.n	8012610 <_svfiprintf_r+0x130>
 80125fa:	7863      	ldrb	r3, [r4, #1]
 80125fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80125fe:	d132      	bne.n	8012666 <_svfiprintf_r+0x186>
 8012600:	9b03      	ldr	r3, [sp, #12]
 8012602:	3402      	adds	r4, #2
 8012604:	1d1a      	adds	r2, r3, #4
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	9203      	str	r2, [sp, #12]
 801260a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801260e:	9305      	str	r3, [sp, #20]
 8012610:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80126c8 <_svfiprintf_r+0x1e8>
 8012614:	2203      	movs	r2, #3
 8012616:	4650      	mov	r0, sl
 8012618:	7821      	ldrb	r1, [r4, #0]
 801261a:	f000 fcb9 	bl	8012f90 <memchr>
 801261e:	b138      	cbz	r0, 8012630 <_svfiprintf_r+0x150>
 8012620:	2240      	movs	r2, #64	@ 0x40
 8012622:	9b04      	ldr	r3, [sp, #16]
 8012624:	eba0 000a 	sub.w	r0, r0, sl
 8012628:	4082      	lsls	r2, r0
 801262a:	4313      	orrs	r3, r2
 801262c:	3401      	adds	r4, #1
 801262e:	9304      	str	r3, [sp, #16]
 8012630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012634:	2206      	movs	r2, #6
 8012636:	4825      	ldr	r0, [pc, #148]	@ (80126cc <_svfiprintf_r+0x1ec>)
 8012638:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801263c:	f000 fca8 	bl	8012f90 <memchr>
 8012640:	2800      	cmp	r0, #0
 8012642:	d036      	beq.n	80126b2 <_svfiprintf_r+0x1d2>
 8012644:	4b22      	ldr	r3, [pc, #136]	@ (80126d0 <_svfiprintf_r+0x1f0>)
 8012646:	bb1b      	cbnz	r3, 8012690 <_svfiprintf_r+0x1b0>
 8012648:	9b03      	ldr	r3, [sp, #12]
 801264a:	3307      	adds	r3, #7
 801264c:	f023 0307 	bic.w	r3, r3, #7
 8012650:	3308      	adds	r3, #8
 8012652:	9303      	str	r3, [sp, #12]
 8012654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012656:	4433      	add	r3, r6
 8012658:	9309      	str	r3, [sp, #36]	@ 0x24
 801265a:	e76a      	b.n	8012532 <_svfiprintf_r+0x52>
 801265c:	460c      	mov	r4, r1
 801265e:	2001      	movs	r0, #1
 8012660:	fb0c 3202 	mla	r2, ip, r2, r3
 8012664:	e7a8      	b.n	80125b8 <_svfiprintf_r+0xd8>
 8012666:	2300      	movs	r3, #0
 8012668:	f04f 0c0a 	mov.w	ip, #10
 801266c:	4619      	mov	r1, r3
 801266e:	3401      	adds	r4, #1
 8012670:	9305      	str	r3, [sp, #20]
 8012672:	4620      	mov	r0, r4
 8012674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012678:	3a30      	subs	r2, #48	@ 0x30
 801267a:	2a09      	cmp	r2, #9
 801267c:	d903      	bls.n	8012686 <_svfiprintf_r+0x1a6>
 801267e:	2b00      	cmp	r3, #0
 8012680:	d0c6      	beq.n	8012610 <_svfiprintf_r+0x130>
 8012682:	9105      	str	r1, [sp, #20]
 8012684:	e7c4      	b.n	8012610 <_svfiprintf_r+0x130>
 8012686:	4604      	mov	r4, r0
 8012688:	2301      	movs	r3, #1
 801268a:	fb0c 2101 	mla	r1, ip, r1, r2
 801268e:	e7f0      	b.n	8012672 <_svfiprintf_r+0x192>
 8012690:	ab03      	add	r3, sp, #12
 8012692:	9300      	str	r3, [sp, #0]
 8012694:	462a      	mov	r2, r5
 8012696:	4638      	mov	r0, r7
 8012698:	4b0e      	ldr	r3, [pc, #56]	@ (80126d4 <_svfiprintf_r+0x1f4>)
 801269a:	a904      	add	r1, sp, #16
 801269c:	f3af 8000 	nop.w
 80126a0:	1c42      	adds	r2, r0, #1
 80126a2:	4606      	mov	r6, r0
 80126a4:	d1d6      	bne.n	8012654 <_svfiprintf_r+0x174>
 80126a6:	89ab      	ldrh	r3, [r5, #12]
 80126a8:	065b      	lsls	r3, r3, #25
 80126aa:	f53f af2d 	bmi.w	8012508 <_svfiprintf_r+0x28>
 80126ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126b0:	e72c      	b.n	801250c <_svfiprintf_r+0x2c>
 80126b2:	ab03      	add	r3, sp, #12
 80126b4:	9300      	str	r3, [sp, #0]
 80126b6:	462a      	mov	r2, r5
 80126b8:	4638      	mov	r0, r7
 80126ba:	4b06      	ldr	r3, [pc, #24]	@ (80126d4 <_svfiprintf_r+0x1f4>)
 80126bc:	a904      	add	r1, sp, #16
 80126be:	f000 f9bd 	bl	8012a3c <_printf_i>
 80126c2:	e7ed      	b.n	80126a0 <_svfiprintf_r+0x1c0>
 80126c4:	08014084 	.word	0x08014084
 80126c8:	0801408a 	.word	0x0801408a
 80126cc:	0801408e 	.word	0x0801408e
 80126d0:	00000000 	.word	0x00000000
 80126d4:	08012429 	.word	0x08012429

080126d8 <__sfputc_r>:
 80126d8:	6893      	ldr	r3, [r2, #8]
 80126da:	b410      	push	{r4}
 80126dc:	3b01      	subs	r3, #1
 80126de:	2b00      	cmp	r3, #0
 80126e0:	6093      	str	r3, [r2, #8]
 80126e2:	da07      	bge.n	80126f4 <__sfputc_r+0x1c>
 80126e4:	6994      	ldr	r4, [r2, #24]
 80126e6:	42a3      	cmp	r3, r4
 80126e8:	db01      	blt.n	80126ee <__sfputc_r+0x16>
 80126ea:	290a      	cmp	r1, #10
 80126ec:	d102      	bne.n	80126f4 <__sfputc_r+0x1c>
 80126ee:	bc10      	pop	{r4}
 80126f0:	f7ff bc93 	b.w	801201a <__swbuf_r>
 80126f4:	6813      	ldr	r3, [r2, #0]
 80126f6:	1c58      	adds	r0, r3, #1
 80126f8:	6010      	str	r0, [r2, #0]
 80126fa:	7019      	strb	r1, [r3, #0]
 80126fc:	4608      	mov	r0, r1
 80126fe:	bc10      	pop	{r4}
 8012700:	4770      	bx	lr

08012702 <__sfputs_r>:
 8012702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012704:	4606      	mov	r6, r0
 8012706:	460f      	mov	r7, r1
 8012708:	4614      	mov	r4, r2
 801270a:	18d5      	adds	r5, r2, r3
 801270c:	42ac      	cmp	r4, r5
 801270e:	d101      	bne.n	8012714 <__sfputs_r+0x12>
 8012710:	2000      	movs	r0, #0
 8012712:	e007      	b.n	8012724 <__sfputs_r+0x22>
 8012714:	463a      	mov	r2, r7
 8012716:	4630      	mov	r0, r6
 8012718:	f814 1b01 	ldrb.w	r1, [r4], #1
 801271c:	f7ff ffdc 	bl	80126d8 <__sfputc_r>
 8012720:	1c43      	adds	r3, r0, #1
 8012722:	d1f3      	bne.n	801270c <__sfputs_r+0xa>
 8012724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012728 <_vfiprintf_r>:
 8012728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801272c:	460d      	mov	r5, r1
 801272e:	4614      	mov	r4, r2
 8012730:	4698      	mov	r8, r3
 8012732:	4606      	mov	r6, r0
 8012734:	b09d      	sub	sp, #116	@ 0x74
 8012736:	b118      	cbz	r0, 8012740 <_vfiprintf_r+0x18>
 8012738:	6a03      	ldr	r3, [r0, #32]
 801273a:	b90b      	cbnz	r3, 8012740 <_vfiprintf_r+0x18>
 801273c:	f7ff fb28 	bl	8011d90 <__sinit>
 8012740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012742:	07d9      	lsls	r1, r3, #31
 8012744:	d405      	bmi.n	8012752 <_vfiprintf_r+0x2a>
 8012746:	89ab      	ldrh	r3, [r5, #12]
 8012748:	059a      	lsls	r2, r3, #22
 801274a:	d402      	bmi.n	8012752 <_vfiprintf_r+0x2a>
 801274c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801274e:	f7ff fd72 	bl	8012236 <__retarget_lock_acquire_recursive>
 8012752:	89ab      	ldrh	r3, [r5, #12]
 8012754:	071b      	lsls	r3, r3, #28
 8012756:	d501      	bpl.n	801275c <_vfiprintf_r+0x34>
 8012758:	692b      	ldr	r3, [r5, #16]
 801275a:	b99b      	cbnz	r3, 8012784 <_vfiprintf_r+0x5c>
 801275c:	4629      	mov	r1, r5
 801275e:	4630      	mov	r0, r6
 8012760:	f7ff fc9a 	bl	8012098 <__swsetup_r>
 8012764:	b170      	cbz	r0, 8012784 <_vfiprintf_r+0x5c>
 8012766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012768:	07dc      	lsls	r4, r3, #31
 801276a:	d504      	bpl.n	8012776 <_vfiprintf_r+0x4e>
 801276c:	f04f 30ff 	mov.w	r0, #4294967295
 8012770:	b01d      	add	sp, #116	@ 0x74
 8012772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012776:	89ab      	ldrh	r3, [r5, #12]
 8012778:	0598      	lsls	r0, r3, #22
 801277a:	d4f7      	bmi.n	801276c <_vfiprintf_r+0x44>
 801277c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801277e:	f7ff fd5b 	bl	8012238 <__retarget_lock_release_recursive>
 8012782:	e7f3      	b.n	801276c <_vfiprintf_r+0x44>
 8012784:	2300      	movs	r3, #0
 8012786:	9309      	str	r3, [sp, #36]	@ 0x24
 8012788:	2320      	movs	r3, #32
 801278a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801278e:	2330      	movs	r3, #48	@ 0x30
 8012790:	f04f 0901 	mov.w	r9, #1
 8012794:	f8cd 800c 	str.w	r8, [sp, #12]
 8012798:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8012944 <_vfiprintf_r+0x21c>
 801279c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80127a0:	4623      	mov	r3, r4
 80127a2:	469a      	mov	sl, r3
 80127a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127a8:	b10a      	cbz	r2, 80127ae <_vfiprintf_r+0x86>
 80127aa:	2a25      	cmp	r2, #37	@ 0x25
 80127ac:	d1f9      	bne.n	80127a2 <_vfiprintf_r+0x7a>
 80127ae:	ebba 0b04 	subs.w	fp, sl, r4
 80127b2:	d00b      	beq.n	80127cc <_vfiprintf_r+0xa4>
 80127b4:	465b      	mov	r3, fp
 80127b6:	4622      	mov	r2, r4
 80127b8:	4629      	mov	r1, r5
 80127ba:	4630      	mov	r0, r6
 80127bc:	f7ff ffa1 	bl	8012702 <__sfputs_r>
 80127c0:	3001      	adds	r0, #1
 80127c2:	f000 80a7 	beq.w	8012914 <_vfiprintf_r+0x1ec>
 80127c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127c8:	445a      	add	r2, fp
 80127ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80127cc:	f89a 3000 	ldrb.w	r3, [sl]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	f000 809f 	beq.w	8012914 <_vfiprintf_r+0x1ec>
 80127d6:	2300      	movs	r3, #0
 80127d8:	f04f 32ff 	mov.w	r2, #4294967295
 80127dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127e0:	f10a 0a01 	add.w	sl, sl, #1
 80127e4:	9304      	str	r3, [sp, #16]
 80127e6:	9307      	str	r3, [sp, #28]
 80127e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80127ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80127ee:	4654      	mov	r4, sl
 80127f0:	2205      	movs	r2, #5
 80127f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127f6:	4853      	ldr	r0, [pc, #332]	@ (8012944 <_vfiprintf_r+0x21c>)
 80127f8:	f000 fbca 	bl	8012f90 <memchr>
 80127fc:	9a04      	ldr	r2, [sp, #16]
 80127fe:	b9d8      	cbnz	r0, 8012838 <_vfiprintf_r+0x110>
 8012800:	06d1      	lsls	r1, r2, #27
 8012802:	bf44      	itt	mi
 8012804:	2320      	movmi	r3, #32
 8012806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801280a:	0713      	lsls	r3, r2, #28
 801280c:	bf44      	itt	mi
 801280e:	232b      	movmi	r3, #43	@ 0x2b
 8012810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012814:	f89a 3000 	ldrb.w	r3, [sl]
 8012818:	2b2a      	cmp	r3, #42	@ 0x2a
 801281a:	d015      	beq.n	8012848 <_vfiprintf_r+0x120>
 801281c:	4654      	mov	r4, sl
 801281e:	2000      	movs	r0, #0
 8012820:	f04f 0c0a 	mov.w	ip, #10
 8012824:	9a07      	ldr	r2, [sp, #28]
 8012826:	4621      	mov	r1, r4
 8012828:	f811 3b01 	ldrb.w	r3, [r1], #1
 801282c:	3b30      	subs	r3, #48	@ 0x30
 801282e:	2b09      	cmp	r3, #9
 8012830:	d94b      	bls.n	80128ca <_vfiprintf_r+0x1a2>
 8012832:	b1b0      	cbz	r0, 8012862 <_vfiprintf_r+0x13a>
 8012834:	9207      	str	r2, [sp, #28]
 8012836:	e014      	b.n	8012862 <_vfiprintf_r+0x13a>
 8012838:	eba0 0308 	sub.w	r3, r0, r8
 801283c:	fa09 f303 	lsl.w	r3, r9, r3
 8012840:	4313      	orrs	r3, r2
 8012842:	46a2      	mov	sl, r4
 8012844:	9304      	str	r3, [sp, #16]
 8012846:	e7d2      	b.n	80127ee <_vfiprintf_r+0xc6>
 8012848:	9b03      	ldr	r3, [sp, #12]
 801284a:	1d19      	adds	r1, r3, #4
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	9103      	str	r1, [sp, #12]
 8012850:	2b00      	cmp	r3, #0
 8012852:	bfbb      	ittet	lt
 8012854:	425b      	neglt	r3, r3
 8012856:	f042 0202 	orrlt.w	r2, r2, #2
 801285a:	9307      	strge	r3, [sp, #28]
 801285c:	9307      	strlt	r3, [sp, #28]
 801285e:	bfb8      	it	lt
 8012860:	9204      	strlt	r2, [sp, #16]
 8012862:	7823      	ldrb	r3, [r4, #0]
 8012864:	2b2e      	cmp	r3, #46	@ 0x2e
 8012866:	d10a      	bne.n	801287e <_vfiprintf_r+0x156>
 8012868:	7863      	ldrb	r3, [r4, #1]
 801286a:	2b2a      	cmp	r3, #42	@ 0x2a
 801286c:	d132      	bne.n	80128d4 <_vfiprintf_r+0x1ac>
 801286e:	9b03      	ldr	r3, [sp, #12]
 8012870:	3402      	adds	r4, #2
 8012872:	1d1a      	adds	r2, r3, #4
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	9203      	str	r2, [sp, #12]
 8012878:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801287c:	9305      	str	r3, [sp, #20]
 801287e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8012948 <_vfiprintf_r+0x220>
 8012882:	2203      	movs	r2, #3
 8012884:	4650      	mov	r0, sl
 8012886:	7821      	ldrb	r1, [r4, #0]
 8012888:	f000 fb82 	bl	8012f90 <memchr>
 801288c:	b138      	cbz	r0, 801289e <_vfiprintf_r+0x176>
 801288e:	2240      	movs	r2, #64	@ 0x40
 8012890:	9b04      	ldr	r3, [sp, #16]
 8012892:	eba0 000a 	sub.w	r0, r0, sl
 8012896:	4082      	lsls	r2, r0
 8012898:	4313      	orrs	r3, r2
 801289a:	3401      	adds	r4, #1
 801289c:	9304      	str	r3, [sp, #16]
 801289e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128a2:	2206      	movs	r2, #6
 80128a4:	4829      	ldr	r0, [pc, #164]	@ (801294c <_vfiprintf_r+0x224>)
 80128a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80128aa:	f000 fb71 	bl	8012f90 <memchr>
 80128ae:	2800      	cmp	r0, #0
 80128b0:	d03f      	beq.n	8012932 <_vfiprintf_r+0x20a>
 80128b2:	4b27      	ldr	r3, [pc, #156]	@ (8012950 <_vfiprintf_r+0x228>)
 80128b4:	bb1b      	cbnz	r3, 80128fe <_vfiprintf_r+0x1d6>
 80128b6:	9b03      	ldr	r3, [sp, #12]
 80128b8:	3307      	adds	r3, #7
 80128ba:	f023 0307 	bic.w	r3, r3, #7
 80128be:	3308      	adds	r3, #8
 80128c0:	9303      	str	r3, [sp, #12]
 80128c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128c4:	443b      	add	r3, r7
 80128c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80128c8:	e76a      	b.n	80127a0 <_vfiprintf_r+0x78>
 80128ca:	460c      	mov	r4, r1
 80128cc:	2001      	movs	r0, #1
 80128ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80128d2:	e7a8      	b.n	8012826 <_vfiprintf_r+0xfe>
 80128d4:	2300      	movs	r3, #0
 80128d6:	f04f 0c0a 	mov.w	ip, #10
 80128da:	4619      	mov	r1, r3
 80128dc:	3401      	adds	r4, #1
 80128de:	9305      	str	r3, [sp, #20]
 80128e0:	4620      	mov	r0, r4
 80128e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128e6:	3a30      	subs	r2, #48	@ 0x30
 80128e8:	2a09      	cmp	r2, #9
 80128ea:	d903      	bls.n	80128f4 <_vfiprintf_r+0x1cc>
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d0c6      	beq.n	801287e <_vfiprintf_r+0x156>
 80128f0:	9105      	str	r1, [sp, #20]
 80128f2:	e7c4      	b.n	801287e <_vfiprintf_r+0x156>
 80128f4:	4604      	mov	r4, r0
 80128f6:	2301      	movs	r3, #1
 80128f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80128fc:	e7f0      	b.n	80128e0 <_vfiprintf_r+0x1b8>
 80128fe:	ab03      	add	r3, sp, #12
 8012900:	9300      	str	r3, [sp, #0]
 8012902:	462a      	mov	r2, r5
 8012904:	4630      	mov	r0, r6
 8012906:	4b13      	ldr	r3, [pc, #76]	@ (8012954 <_vfiprintf_r+0x22c>)
 8012908:	a904      	add	r1, sp, #16
 801290a:	f3af 8000 	nop.w
 801290e:	4607      	mov	r7, r0
 8012910:	1c78      	adds	r0, r7, #1
 8012912:	d1d6      	bne.n	80128c2 <_vfiprintf_r+0x19a>
 8012914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012916:	07d9      	lsls	r1, r3, #31
 8012918:	d405      	bmi.n	8012926 <_vfiprintf_r+0x1fe>
 801291a:	89ab      	ldrh	r3, [r5, #12]
 801291c:	059a      	lsls	r2, r3, #22
 801291e:	d402      	bmi.n	8012926 <_vfiprintf_r+0x1fe>
 8012920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012922:	f7ff fc89 	bl	8012238 <__retarget_lock_release_recursive>
 8012926:	89ab      	ldrh	r3, [r5, #12]
 8012928:	065b      	lsls	r3, r3, #25
 801292a:	f53f af1f 	bmi.w	801276c <_vfiprintf_r+0x44>
 801292e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012930:	e71e      	b.n	8012770 <_vfiprintf_r+0x48>
 8012932:	ab03      	add	r3, sp, #12
 8012934:	9300      	str	r3, [sp, #0]
 8012936:	462a      	mov	r2, r5
 8012938:	4630      	mov	r0, r6
 801293a:	4b06      	ldr	r3, [pc, #24]	@ (8012954 <_vfiprintf_r+0x22c>)
 801293c:	a904      	add	r1, sp, #16
 801293e:	f000 f87d 	bl	8012a3c <_printf_i>
 8012942:	e7e4      	b.n	801290e <_vfiprintf_r+0x1e6>
 8012944:	08014084 	.word	0x08014084
 8012948:	0801408a 	.word	0x0801408a
 801294c:	0801408e 	.word	0x0801408e
 8012950:	00000000 	.word	0x00000000
 8012954:	08012703 	.word	0x08012703

08012958 <_printf_common>:
 8012958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801295c:	4616      	mov	r6, r2
 801295e:	4698      	mov	r8, r3
 8012960:	688a      	ldr	r2, [r1, #8]
 8012962:	690b      	ldr	r3, [r1, #16]
 8012964:	4607      	mov	r7, r0
 8012966:	4293      	cmp	r3, r2
 8012968:	bfb8      	it	lt
 801296a:	4613      	movlt	r3, r2
 801296c:	6033      	str	r3, [r6, #0]
 801296e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012972:	460c      	mov	r4, r1
 8012974:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012978:	b10a      	cbz	r2, 801297e <_printf_common+0x26>
 801297a:	3301      	adds	r3, #1
 801297c:	6033      	str	r3, [r6, #0]
 801297e:	6823      	ldr	r3, [r4, #0]
 8012980:	0699      	lsls	r1, r3, #26
 8012982:	bf42      	ittt	mi
 8012984:	6833      	ldrmi	r3, [r6, #0]
 8012986:	3302      	addmi	r3, #2
 8012988:	6033      	strmi	r3, [r6, #0]
 801298a:	6825      	ldr	r5, [r4, #0]
 801298c:	f015 0506 	ands.w	r5, r5, #6
 8012990:	d106      	bne.n	80129a0 <_printf_common+0x48>
 8012992:	f104 0a19 	add.w	sl, r4, #25
 8012996:	68e3      	ldr	r3, [r4, #12]
 8012998:	6832      	ldr	r2, [r6, #0]
 801299a:	1a9b      	subs	r3, r3, r2
 801299c:	42ab      	cmp	r3, r5
 801299e:	dc2b      	bgt.n	80129f8 <_printf_common+0xa0>
 80129a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80129a4:	6822      	ldr	r2, [r4, #0]
 80129a6:	3b00      	subs	r3, #0
 80129a8:	bf18      	it	ne
 80129aa:	2301      	movne	r3, #1
 80129ac:	0692      	lsls	r2, r2, #26
 80129ae:	d430      	bmi.n	8012a12 <_printf_common+0xba>
 80129b0:	4641      	mov	r1, r8
 80129b2:	4638      	mov	r0, r7
 80129b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80129b8:	47c8      	blx	r9
 80129ba:	3001      	adds	r0, #1
 80129bc:	d023      	beq.n	8012a06 <_printf_common+0xae>
 80129be:	6823      	ldr	r3, [r4, #0]
 80129c0:	6922      	ldr	r2, [r4, #16]
 80129c2:	f003 0306 	and.w	r3, r3, #6
 80129c6:	2b04      	cmp	r3, #4
 80129c8:	bf14      	ite	ne
 80129ca:	2500      	movne	r5, #0
 80129cc:	6833      	ldreq	r3, [r6, #0]
 80129ce:	f04f 0600 	mov.w	r6, #0
 80129d2:	bf08      	it	eq
 80129d4:	68e5      	ldreq	r5, [r4, #12]
 80129d6:	f104 041a 	add.w	r4, r4, #26
 80129da:	bf08      	it	eq
 80129dc:	1aed      	subeq	r5, r5, r3
 80129de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80129e2:	bf08      	it	eq
 80129e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129e8:	4293      	cmp	r3, r2
 80129ea:	bfc4      	itt	gt
 80129ec:	1a9b      	subgt	r3, r3, r2
 80129ee:	18ed      	addgt	r5, r5, r3
 80129f0:	42b5      	cmp	r5, r6
 80129f2:	d11a      	bne.n	8012a2a <_printf_common+0xd2>
 80129f4:	2000      	movs	r0, #0
 80129f6:	e008      	b.n	8012a0a <_printf_common+0xb2>
 80129f8:	2301      	movs	r3, #1
 80129fa:	4652      	mov	r2, sl
 80129fc:	4641      	mov	r1, r8
 80129fe:	4638      	mov	r0, r7
 8012a00:	47c8      	blx	r9
 8012a02:	3001      	adds	r0, #1
 8012a04:	d103      	bne.n	8012a0e <_printf_common+0xb6>
 8012a06:	f04f 30ff 	mov.w	r0, #4294967295
 8012a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a0e:	3501      	adds	r5, #1
 8012a10:	e7c1      	b.n	8012996 <_printf_common+0x3e>
 8012a12:	2030      	movs	r0, #48	@ 0x30
 8012a14:	18e1      	adds	r1, r4, r3
 8012a16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012a1a:	1c5a      	adds	r2, r3, #1
 8012a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012a20:	4422      	add	r2, r4
 8012a22:	3302      	adds	r3, #2
 8012a24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012a28:	e7c2      	b.n	80129b0 <_printf_common+0x58>
 8012a2a:	2301      	movs	r3, #1
 8012a2c:	4622      	mov	r2, r4
 8012a2e:	4641      	mov	r1, r8
 8012a30:	4638      	mov	r0, r7
 8012a32:	47c8      	blx	r9
 8012a34:	3001      	adds	r0, #1
 8012a36:	d0e6      	beq.n	8012a06 <_printf_common+0xae>
 8012a38:	3601      	adds	r6, #1
 8012a3a:	e7d9      	b.n	80129f0 <_printf_common+0x98>

08012a3c <_printf_i>:
 8012a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a40:	7e0f      	ldrb	r7, [r1, #24]
 8012a42:	4691      	mov	r9, r2
 8012a44:	2f78      	cmp	r7, #120	@ 0x78
 8012a46:	4680      	mov	r8, r0
 8012a48:	460c      	mov	r4, r1
 8012a4a:	469a      	mov	sl, r3
 8012a4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012a4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012a52:	d807      	bhi.n	8012a64 <_printf_i+0x28>
 8012a54:	2f62      	cmp	r7, #98	@ 0x62
 8012a56:	d80a      	bhi.n	8012a6e <_printf_i+0x32>
 8012a58:	2f00      	cmp	r7, #0
 8012a5a:	f000 80d3 	beq.w	8012c04 <_printf_i+0x1c8>
 8012a5e:	2f58      	cmp	r7, #88	@ 0x58
 8012a60:	f000 80ba 	beq.w	8012bd8 <_printf_i+0x19c>
 8012a64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012a68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012a6c:	e03a      	b.n	8012ae4 <_printf_i+0xa8>
 8012a6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012a72:	2b15      	cmp	r3, #21
 8012a74:	d8f6      	bhi.n	8012a64 <_printf_i+0x28>
 8012a76:	a101      	add	r1, pc, #4	@ (adr r1, 8012a7c <_printf_i+0x40>)
 8012a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a7c:	08012ad5 	.word	0x08012ad5
 8012a80:	08012ae9 	.word	0x08012ae9
 8012a84:	08012a65 	.word	0x08012a65
 8012a88:	08012a65 	.word	0x08012a65
 8012a8c:	08012a65 	.word	0x08012a65
 8012a90:	08012a65 	.word	0x08012a65
 8012a94:	08012ae9 	.word	0x08012ae9
 8012a98:	08012a65 	.word	0x08012a65
 8012a9c:	08012a65 	.word	0x08012a65
 8012aa0:	08012a65 	.word	0x08012a65
 8012aa4:	08012a65 	.word	0x08012a65
 8012aa8:	08012beb 	.word	0x08012beb
 8012aac:	08012b13 	.word	0x08012b13
 8012ab0:	08012ba5 	.word	0x08012ba5
 8012ab4:	08012a65 	.word	0x08012a65
 8012ab8:	08012a65 	.word	0x08012a65
 8012abc:	08012c0d 	.word	0x08012c0d
 8012ac0:	08012a65 	.word	0x08012a65
 8012ac4:	08012b13 	.word	0x08012b13
 8012ac8:	08012a65 	.word	0x08012a65
 8012acc:	08012a65 	.word	0x08012a65
 8012ad0:	08012bad 	.word	0x08012bad
 8012ad4:	6833      	ldr	r3, [r6, #0]
 8012ad6:	1d1a      	adds	r2, r3, #4
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	6032      	str	r2, [r6, #0]
 8012adc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012ae0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	e09e      	b.n	8012c26 <_printf_i+0x1ea>
 8012ae8:	6833      	ldr	r3, [r6, #0]
 8012aea:	6820      	ldr	r0, [r4, #0]
 8012aec:	1d19      	adds	r1, r3, #4
 8012aee:	6031      	str	r1, [r6, #0]
 8012af0:	0606      	lsls	r6, r0, #24
 8012af2:	d501      	bpl.n	8012af8 <_printf_i+0xbc>
 8012af4:	681d      	ldr	r5, [r3, #0]
 8012af6:	e003      	b.n	8012b00 <_printf_i+0xc4>
 8012af8:	0645      	lsls	r5, r0, #25
 8012afa:	d5fb      	bpl.n	8012af4 <_printf_i+0xb8>
 8012afc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012b00:	2d00      	cmp	r5, #0
 8012b02:	da03      	bge.n	8012b0c <_printf_i+0xd0>
 8012b04:	232d      	movs	r3, #45	@ 0x2d
 8012b06:	426d      	negs	r5, r5
 8012b08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b0c:	230a      	movs	r3, #10
 8012b0e:	4859      	ldr	r0, [pc, #356]	@ (8012c74 <_printf_i+0x238>)
 8012b10:	e011      	b.n	8012b36 <_printf_i+0xfa>
 8012b12:	6821      	ldr	r1, [r4, #0]
 8012b14:	6833      	ldr	r3, [r6, #0]
 8012b16:	0608      	lsls	r0, r1, #24
 8012b18:	f853 5b04 	ldr.w	r5, [r3], #4
 8012b1c:	d402      	bmi.n	8012b24 <_printf_i+0xe8>
 8012b1e:	0649      	lsls	r1, r1, #25
 8012b20:	bf48      	it	mi
 8012b22:	b2ad      	uxthmi	r5, r5
 8012b24:	2f6f      	cmp	r7, #111	@ 0x6f
 8012b26:	6033      	str	r3, [r6, #0]
 8012b28:	bf14      	ite	ne
 8012b2a:	230a      	movne	r3, #10
 8012b2c:	2308      	moveq	r3, #8
 8012b2e:	4851      	ldr	r0, [pc, #324]	@ (8012c74 <_printf_i+0x238>)
 8012b30:	2100      	movs	r1, #0
 8012b32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012b36:	6866      	ldr	r6, [r4, #4]
 8012b38:	2e00      	cmp	r6, #0
 8012b3a:	bfa8      	it	ge
 8012b3c:	6821      	ldrge	r1, [r4, #0]
 8012b3e:	60a6      	str	r6, [r4, #8]
 8012b40:	bfa4      	itt	ge
 8012b42:	f021 0104 	bicge.w	r1, r1, #4
 8012b46:	6021      	strge	r1, [r4, #0]
 8012b48:	b90d      	cbnz	r5, 8012b4e <_printf_i+0x112>
 8012b4a:	2e00      	cmp	r6, #0
 8012b4c:	d04b      	beq.n	8012be6 <_printf_i+0x1aa>
 8012b4e:	4616      	mov	r6, r2
 8012b50:	fbb5 f1f3 	udiv	r1, r5, r3
 8012b54:	fb03 5711 	mls	r7, r3, r1, r5
 8012b58:	5dc7      	ldrb	r7, [r0, r7]
 8012b5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012b5e:	462f      	mov	r7, r5
 8012b60:	42bb      	cmp	r3, r7
 8012b62:	460d      	mov	r5, r1
 8012b64:	d9f4      	bls.n	8012b50 <_printf_i+0x114>
 8012b66:	2b08      	cmp	r3, #8
 8012b68:	d10b      	bne.n	8012b82 <_printf_i+0x146>
 8012b6a:	6823      	ldr	r3, [r4, #0]
 8012b6c:	07df      	lsls	r7, r3, #31
 8012b6e:	d508      	bpl.n	8012b82 <_printf_i+0x146>
 8012b70:	6923      	ldr	r3, [r4, #16]
 8012b72:	6861      	ldr	r1, [r4, #4]
 8012b74:	4299      	cmp	r1, r3
 8012b76:	bfde      	ittt	le
 8012b78:	2330      	movle	r3, #48	@ 0x30
 8012b7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012b7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012b82:	1b92      	subs	r2, r2, r6
 8012b84:	6122      	str	r2, [r4, #16]
 8012b86:	464b      	mov	r3, r9
 8012b88:	4621      	mov	r1, r4
 8012b8a:	4640      	mov	r0, r8
 8012b8c:	f8cd a000 	str.w	sl, [sp]
 8012b90:	aa03      	add	r2, sp, #12
 8012b92:	f7ff fee1 	bl	8012958 <_printf_common>
 8012b96:	3001      	adds	r0, #1
 8012b98:	d14a      	bne.n	8012c30 <_printf_i+0x1f4>
 8012b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8012b9e:	b004      	add	sp, #16
 8012ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ba4:	6823      	ldr	r3, [r4, #0]
 8012ba6:	f043 0320 	orr.w	r3, r3, #32
 8012baa:	6023      	str	r3, [r4, #0]
 8012bac:	2778      	movs	r7, #120	@ 0x78
 8012bae:	4832      	ldr	r0, [pc, #200]	@ (8012c78 <_printf_i+0x23c>)
 8012bb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012bb4:	6823      	ldr	r3, [r4, #0]
 8012bb6:	6831      	ldr	r1, [r6, #0]
 8012bb8:	061f      	lsls	r7, r3, #24
 8012bba:	f851 5b04 	ldr.w	r5, [r1], #4
 8012bbe:	d402      	bmi.n	8012bc6 <_printf_i+0x18a>
 8012bc0:	065f      	lsls	r7, r3, #25
 8012bc2:	bf48      	it	mi
 8012bc4:	b2ad      	uxthmi	r5, r5
 8012bc6:	6031      	str	r1, [r6, #0]
 8012bc8:	07d9      	lsls	r1, r3, #31
 8012bca:	bf44      	itt	mi
 8012bcc:	f043 0320 	orrmi.w	r3, r3, #32
 8012bd0:	6023      	strmi	r3, [r4, #0]
 8012bd2:	b11d      	cbz	r5, 8012bdc <_printf_i+0x1a0>
 8012bd4:	2310      	movs	r3, #16
 8012bd6:	e7ab      	b.n	8012b30 <_printf_i+0xf4>
 8012bd8:	4826      	ldr	r0, [pc, #152]	@ (8012c74 <_printf_i+0x238>)
 8012bda:	e7e9      	b.n	8012bb0 <_printf_i+0x174>
 8012bdc:	6823      	ldr	r3, [r4, #0]
 8012bde:	f023 0320 	bic.w	r3, r3, #32
 8012be2:	6023      	str	r3, [r4, #0]
 8012be4:	e7f6      	b.n	8012bd4 <_printf_i+0x198>
 8012be6:	4616      	mov	r6, r2
 8012be8:	e7bd      	b.n	8012b66 <_printf_i+0x12a>
 8012bea:	6833      	ldr	r3, [r6, #0]
 8012bec:	6825      	ldr	r5, [r4, #0]
 8012bee:	1d18      	adds	r0, r3, #4
 8012bf0:	6961      	ldr	r1, [r4, #20]
 8012bf2:	6030      	str	r0, [r6, #0]
 8012bf4:	062e      	lsls	r6, r5, #24
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	d501      	bpl.n	8012bfe <_printf_i+0x1c2>
 8012bfa:	6019      	str	r1, [r3, #0]
 8012bfc:	e002      	b.n	8012c04 <_printf_i+0x1c8>
 8012bfe:	0668      	lsls	r0, r5, #25
 8012c00:	d5fb      	bpl.n	8012bfa <_printf_i+0x1be>
 8012c02:	8019      	strh	r1, [r3, #0]
 8012c04:	2300      	movs	r3, #0
 8012c06:	4616      	mov	r6, r2
 8012c08:	6123      	str	r3, [r4, #16]
 8012c0a:	e7bc      	b.n	8012b86 <_printf_i+0x14a>
 8012c0c:	6833      	ldr	r3, [r6, #0]
 8012c0e:	2100      	movs	r1, #0
 8012c10:	1d1a      	adds	r2, r3, #4
 8012c12:	6032      	str	r2, [r6, #0]
 8012c14:	681e      	ldr	r6, [r3, #0]
 8012c16:	6862      	ldr	r2, [r4, #4]
 8012c18:	4630      	mov	r0, r6
 8012c1a:	f000 f9b9 	bl	8012f90 <memchr>
 8012c1e:	b108      	cbz	r0, 8012c24 <_printf_i+0x1e8>
 8012c20:	1b80      	subs	r0, r0, r6
 8012c22:	6060      	str	r0, [r4, #4]
 8012c24:	6863      	ldr	r3, [r4, #4]
 8012c26:	6123      	str	r3, [r4, #16]
 8012c28:	2300      	movs	r3, #0
 8012c2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c2e:	e7aa      	b.n	8012b86 <_printf_i+0x14a>
 8012c30:	4632      	mov	r2, r6
 8012c32:	4649      	mov	r1, r9
 8012c34:	4640      	mov	r0, r8
 8012c36:	6923      	ldr	r3, [r4, #16]
 8012c38:	47d0      	blx	sl
 8012c3a:	3001      	adds	r0, #1
 8012c3c:	d0ad      	beq.n	8012b9a <_printf_i+0x15e>
 8012c3e:	6823      	ldr	r3, [r4, #0]
 8012c40:	079b      	lsls	r3, r3, #30
 8012c42:	d413      	bmi.n	8012c6c <_printf_i+0x230>
 8012c44:	68e0      	ldr	r0, [r4, #12]
 8012c46:	9b03      	ldr	r3, [sp, #12]
 8012c48:	4298      	cmp	r0, r3
 8012c4a:	bfb8      	it	lt
 8012c4c:	4618      	movlt	r0, r3
 8012c4e:	e7a6      	b.n	8012b9e <_printf_i+0x162>
 8012c50:	2301      	movs	r3, #1
 8012c52:	4632      	mov	r2, r6
 8012c54:	4649      	mov	r1, r9
 8012c56:	4640      	mov	r0, r8
 8012c58:	47d0      	blx	sl
 8012c5a:	3001      	adds	r0, #1
 8012c5c:	d09d      	beq.n	8012b9a <_printf_i+0x15e>
 8012c5e:	3501      	adds	r5, #1
 8012c60:	68e3      	ldr	r3, [r4, #12]
 8012c62:	9903      	ldr	r1, [sp, #12]
 8012c64:	1a5b      	subs	r3, r3, r1
 8012c66:	42ab      	cmp	r3, r5
 8012c68:	dcf2      	bgt.n	8012c50 <_printf_i+0x214>
 8012c6a:	e7eb      	b.n	8012c44 <_printf_i+0x208>
 8012c6c:	2500      	movs	r5, #0
 8012c6e:	f104 0619 	add.w	r6, r4, #25
 8012c72:	e7f5      	b.n	8012c60 <_printf_i+0x224>
 8012c74:	08014095 	.word	0x08014095
 8012c78:	080140a6 	.word	0x080140a6

08012c7c <__sflush_r>:
 8012c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c82:	0716      	lsls	r6, r2, #28
 8012c84:	4605      	mov	r5, r0
 8012c86:	460c      	mov	r4, r1
 8012c88:	d454      	bmi.n	8012d34 <__sflush_r+0xb8>
 8012c8a:	684b      	ldr	r3, [r1, #4]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	dc02      	bgt.n	8012c96 <__sflush_r+0x1a>
 8012c90:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	dd48      	ble.n	8012d28 <__sflush_r+0xac>
 8012c96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012c98:	2e00      	cmp	r6, #0
 8012c9a:	d045      	beq.n	8012d28 <__sflush_r+0xac>
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012ca2:	682f      	ldr	r7, [r5, #0]
 8012ca4:	6a21      	ldr	r1, [r4, #32]
 8012ca6:	602b      	str	r3, [r5, #0]
 8012ca8:	d030      	beq.n	8012d0c <__sflush_r+0x90>
 8012caa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012cac:	89a3      	ldrh	r3, [r4, #12]
 8012cae:	0759      	lsls	r1, r3, #29
 8012cb0:	d505      	bpl.n	8012cbe <__sflush_r+0x42>
 8012cb2:	6863      	ldr	r3, [r4, #4]
 8012cb4:	1ad2      	subs	r2, r2, r3
 8012cb6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012cb8:	b10b      	cbz	r3, 8012cbe <__sflush_r+0x42>
 8012cba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012cbc:	1ad2      	subs	r2, r2, r3
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	4628      	mov	r0, r5
 8012cc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012cc4:	6a21      	ldr	r1, [r4, #32]
 8012cc6:	47b0      	blx	r6
 8012cc8:	1c43      	adds	r3, r0, #1
 8012cca:	89a3      	ldrh	r3, [r4, #12]
 8012ccc:	d106      	bne.n	8012cdc <__sflush_r+0x60>
 8012cce:	6829      	ldr	r1, [r5, #0]
 8012cd0:	291d      	cmp	r1, #29
 8012cd2:	d82b      	bhi.n	8012d2c <__sflush_r+0xb0>
 8012cd4:	4a28      	ldr	r2, [pc, #160]	@ (8012d78 <__sflush_r+0xfc>)
 8012cd6:	410a      	asrs	r2, r1
 8012cd8:	07d6      	lsls	r6, r2, #31
 8012cda:	d427      	bmi.n	8012d2c <__sflush_r+0xb0>
 8012cdc:	2200      	movs	r2, #0
 8012cde:	6062      	str	r2, [r4, #4]
 8012ce0:	6922      	ldr	r2, [r4, #16]
 8012ce2:	04d9      	lsls	r1, r3, #19
 8012ce4:	6022      	str	r2, [r4, #0]
 8012ce6:	d504      	bpl.n	8012cf2 <__sflush_r+0x76>
 8012ce8:	1c42      	adds	r2, r0, #1
 8012cea:	d101      	bne.n	8012cf0 <__sflush_r+0x74>
 8012cec:	682b      	ldr	r3, [r5, #0]
 8012cee:	b903      	cbnz	r3, 8012cf2 <__sflush_r+0x76>
 8012cf0:	6560      	str	r0, [r4, #84]	@ 0x54
 8012cf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012cf4:	602f      	str	r7, [r5, #0]
 8012cf6:	b1b9      	cbz	r1, 8012d28 <__sflush_r+0xac>
 8012cf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012cfc:	4299      	cmp	r1, r3
 8012cfe:	d002      	beq.n	8012d06 <__sflush_r+0x8a>
 8012d00:	4628      	mov	r0, r5
 8012d02:	f7ff fa9b 	bl	801223c <_free_r>
 8012d06:	2300      	movs	r3, #0
 8012d08:	6363      	str	r3, [r4, #52]	@ 0x34
 8012d0a:	e00d      	b.n	8012d28 <__sflush_r+0xac>
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	4628      	mov	r0, r5
 8012d10:	47b0      	blx	r6
 8012d12:	4602      	mov	r2, r0
 8012d14:	1c50      	adds	r0, r2, #1
 8012d16:	d1c9      	bne.n	8012cac <__sflush_r+0x30>
 8012d18:	682b      	ldr	r3, [r5, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d0c6      	beq.n	8012cac <__sflush_r+0x30>
 8012d1e:	2b1d      	cmp	r3, #29
 8012d20:	d001      	beq.n	8012d26 <__sflush_r+0xaa>
 8012d22:	2b16      	cmp	r3, #22
 8012d24:	d11d      	bne.n	8012d62 <__sflush_r+0xe6>
 8012d26:	602f      	str	r7, [r5, #0]
 8012d28:	2000      	movs	r0, #0
 8012d2a:	e021      	b.n	8012d70 <__sflush_r+0xf4>
 8012d2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d30:	b21b      	sxth	r3, r3
 8012d32:	e01a      	b.n	8012d6a <__sflush_r+0xee>
 8012d34:	690f      	ldr	r7, [r1, #16]
 8012d36:	2f00      	cmp	r7, #0
 8012d38:	d0f6      	beq.n	8012d28 <__sflush_r+0xac>
 8012d3a:	0793      	lsls	r3, r2, #30
 8012d3c:	bf18      	it	ne
 8012d3e:	2300      	movne	r3, #0
 8012d40:	680e      	ldr	r6, [r1, #0]
 8012d42:	bf08      	it	eq
 8012d44:	694b      	ldreq	r3, [r1, #20]
 8012d46:	1bf6      	subs	r6, r6, r7
 8012d48:	600f      	str	r7, [r1, #0]
 8012d4a:	608b      	str	r3, [r1, #8]
 8012d4c:	2e00      	cmp	r6, #0
 8012d4e:	ddeb      	ble.n	8012d28 <__sflush_r+0xac>
 8012d50:	4633      	mov	r3, r6
 8012d52:	463a      	mov	r2, r7
 8012d54:	4628      	mov	r0, r5
 8012d56:	6a21      	ldr	r1, [r4, #32]
 8012d58:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8012d5c:	47e0      	blx	ip
 8012d5e:	2800      	cmp	r0, #0
 8012d60:	dc07      	bgt.n	8012d72 <__sflush_r+0xf6>
 8012d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d6e:	81a3      	strh	r3, [r4, #12]
 8012d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d72:	4407      	add	r7, r0
 8012d74:	1a36      	subs	r6, r6, r0
 8012d76:	e7e9      	b.n	8012d4c <__sflush_r+0xd0>
 8012d78:	dfbffffe 	.word	0xdfbffffe

08012d7c <_fflush_r>:
 8012d7c:	b538      	push	{r3, r4, r5, lr}
 8012d7e:	690b      	ldr	r3, [r1, #16]
 8012d80:	4605      	mov	r5, r0
 8012d82:	460c      	mov	r4, r1
 8012d84:	b913      	cbnz	r3, 8012d8c <_fflush_r+0x10>
 8012d86:	2500      	movs	r5, #0
 8012d88:	4628      	mov	r0, r5
 8012d8a:	bd38      	pop	{r3, r4, r5, pc}
 8012d8c:	b118      	cbz	r0, 8012d96 <_fflush_r+0x1a>
 8012d8e:	6a03      	ldr	r3, [r0, #32]
 8012d90:	b90b      	cbnz	r3, 8012d96 <_fflush_r+0x1a>
 8012d92:	f7fe fffd 	bl	8011d90 <__sinit>
 8012d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d0f3      	beq.n	8012d86 <_fflush_r+0xa>
 8012d9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012da0:	07d0      	lsls	r0, r2, #31
 8012da2:	d404      	bmi.n	8012dae <_fflush_r+0x32>
 8012da4:	0599      	lsls	r1, r3, #22
 8012da6:	d402      	bmi.n	8012dae <_fflush_r+0x32>
 8012da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012daa:	f7ff fa44 	bl	8012236 <__retarget_lock_acquire_recursive>
 8012dae:	4628      	mov	r0, r5
 8012db0:	4621      	mov	r1, r4
 8012db2:	f7ff ff63 	bl	8012c7c <__sflush_r>
 8012db6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012db8:	4605      	mov	r5, r0
 8012dba:	07da      	lsls	r2, r3, #31
 8012dbc:	d4e4      	bmi.n	8012d88 <_fflush_r+0xc>
 8012dbe:	89a3      	ldrh	r3, [r4, #12]
 8012dc0:	059b      	lsls	r3, r3, #22
 8012dc2:	d4e1      	bmi.n	8012d88 <_fflush_r+0xc>
 8012dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012dc6:	f7ff fa37 	bl	8012238 <__retarget_lock_release_recursive>
 8012dca:	e7dd      	b.n	8012d88 <_fflush_r+0xc>

08012dcc <__swhatbuf_r>:
 8012dcc:	b570      	push	{r4, r5, r6, lr}
 8012dce:	460c      	mov	r4, r1
 8012dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dd4:	4615      	mov	r5, r2
 8012dd6:	2900      	cmp	r1, #0
 8012dd8:	461e      	mov	r6, r3
 8012dda:	b096      	sub	sp, #88	@ 0x58
 8012ddc:	da0c      	bge.n	8012df8 <__swhatbuf_r+0x2c>
 8012dde:	89a3      	ldrh	r3, [r4, #12]
 8012de0:	2100      	movs	r1, #0
 8012de2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012de6:	bf14      	ite	ne
 8012de8:	2340      	movne	r3, #64	@ 0x40
 8012dea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012dee:	2000      	movs	r0, #0
 8012df0:	6031      	str	r1, [r6, #0]
 8012df2:	602b      	str	r3, [r5, #0]
 8012df4:	b016      	add	sp, #88	@ 0x58
 8012df6:	bd70      	pop	{r4, r5, r6, pc}
 8012df8:	466a      	mov	r2, sp
 8012dfa:	f000 f897 	bl	8012f2c <_fstat_r>
 8012dfe:	2800      	cmp	r0, #0
 8012e00:	dbed      	blt.n	8012dde <__swhatbuf_r+0x12>
 8012e02:	9901      	ldr	r1, [sp, #4]
 8012e04:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012e08:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012e0c:	4259      	negs	r1, r3
 8012e0e:	4159      	adcs	r1, r3
 8012e10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012e14:	e7eb      	b.n	8012dee <__swhatbuf_r+0x22>

08012e16 <__smakebuf_r>:
 8012e16:	898b      	ldrh	r3, [r1, #12]
 8012e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e1a:	079d      	lsls	r5, r3, #30
 8012e1c:	4606      	mov	r6, r0
 8012e1e:	460c      	mov	r4, r1
 8012e20:	d507      	bpl.n	8012e32 <__smakebuf_r+0x1c>
 8012e22:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012e26:	6023      	str	r3, [r4, #0]
 8012e28:	6123      	str	r3, [r4, #16]
 8012e2a:	2301      	movs	r3, #1
 8012e2c:	6163      	str	r3, [r4, #20]
 8012e2e:	b003      	add	sp, #12
 8012e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e32:	466a      	mov	r2, sp
 8012e34:	ab01      	add	r3, sp, #4
 8012e36:	f7ff ffc9 	bl	8012dcc <__swhatbuf_r>
 8012e3a:	9f00      	ldr	r7, [sp, #0]
 8012e3c:	4605      	mov	r5, r0
 8012e3e:	4639      	mov	r1, r7
 8012e40:	4630      	mov	r0, r6
 8012e42:	f7ff fa65 	bl	8012310 <_malloc_r>
 8012e46:	b948      	cbnz	r0, 8012e5c <__smakebuf_r+0x46>
 8012e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e4c:	059a      	lsls	r2, r3, #22
 8012e4e:	d4ee      	bmi.n	8012e2e <__smakebuf_r+0x18>
 8012e50:	f023 0303 	bic.w	r3, r3, #3
 8012e54:	f043 0302 	orr.w	r3, r3, #2
 8012e58:	81a3      	strh	r3, [r4, #12]
 8012e5a:	e7e2      	b.n	8012e22 <__smakebuf_r+0xc>
 8012e5c:	89a3      	ldrh	r3, [r4, #12]
 8012e5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e66:	81a3      	strh	r3, [r4, #12]
 8012e68:	9b01      	ldr	r3, [sp, #4]
 8012e6a:	6020      	str	r0, [r4, #0]
 8012e6c:	b15b      	cbz	r3, 8012e86 <__smakebuf_r+0x70>
 8012e6e:	4630      	mov	r0, r6
 8012e70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e74:	f000 f86c 	bl	8012f50 <_isatty_r>
 8012e78:	b128      	cbz	r0, 8012e86 <__smakebuf_r+0x70>
 8012e7a:	89a3      	ldrh	r3, [r4, #12]
 8012e7c:	f023 0303 	bic.w	r3, r3, #3
 8012e80:	f043 0301 	orr.w	r3, r3, #1
 8012e84:	81a3      	strh	r3, [r4, #12]
 8012e86:	89a3      	ldrh	r3, [r4, #12]
 8012e88:	431d      	orrs	r5, r3
 8012e8a:	81a5      	strh	r5, [r4, #12]
 8012e8c:	e7cf      	b.n	8012e2e <__smakebuf_r+0x18>

08012e8e <_putc_r>:
 8012e8e:	b570      	push	{r4, r5, r6, lr}
 8012e90:	460d      	mov	r5, r1
 8012e92:	4614      	mov	r4, r2
 8012e94:	4606      	mov	r6, r0
 8012e96:	b118      	cbz	r0, 8012ea0 <_putc_r+0x12>
 8012e98:	6a03      	ldr	r3, [r0, #32]
 8012e9a:	b90b      	cbnz	r3, 8012ea0 <_putc_r+0x12>
 8012e9c:	f7fe ff78 	bl	8011d90 <__sinit>
 8012ea0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012ea2:	07d8      	lsls	r0, r3, #31
 8012ea4:	d405      	bmi.n	8012eb2 <_putc_r+0x24>
 8012ea6:	89a3      	ldrh	r3, [r4, #12]
 8012ea8:	0599      	lsls	r1, r3, #22
 8012eaa:	d402      	bmi.n	8012eb2 <_putc_r+0x24>
 8012eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012eae:	f7ff f9c2 	bl	8012236 <__retarget_lock_acquire_recursive>
 8012eb2:	68a3      	ldr	r3, [r4, #8]
 8012eb4:	3b01      	subs	r3, #1
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	60a3      	str	r3, [r4, #8]
 8012eba:	da05      	bge.n	8012ec8 <_putc_r+0x3a>
 8012ebc:	69a2      	ldr	r2, [r4, #24]
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	db12      	blt.n	8012ee8 <_putc_r+0x5a>
 8012ec2:	b2eb      	uxtb	r3, r5
 8012ec4:	2b0a      	cmp	r3, #10
 8012ec6:	d00f      	beq.n	8012ee8 <_putc_r+0x5a>
 8012ec8:	6823      	ldr	r3, [r4, #0]
 8012eca:	1c5a      	adds	r2, r3, #1
 8012ecc:	6022      	str	r2, [r4, #0]
 8012ece:	701d      	strb	r5, [r3, #0]
 8012ed0:	b2ed      	uxtb	r5, r5
 8012ed2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012ed4:	07da      	lsls	r2, r3, #31
 8012ed6:	d405      	bmi.n	8012ee4 <_putc_r+0x56>
 8012ed8:	89a3      	ldrh	r3, [r4, #12]
 8012eda:	059b      	lsls	r3, r3, #22
 8012edc:	d402      	bmi.n	8012ee4 <_putc_r+0x56>
 8012ede:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012ee0:	f7ff f9aa 	bl	8012238 <__retarget_lock_release_recursive>
 8012ee4:	4628      	mov	r0, r5
 8012ee6:	bd70      	pop	{r4, r5, r6, pc}
 8012ee8:	4629      	mov	r1, r5
 8012eea:	4622      	mov	r2, r4
 8012eec:	4630      	mov	r0, r6
 8012eee:	f7ff f894 	bl	801201a <__swbuf_r>
 8012ef2:	4605      	mov	r5, r0
 8012ef4:	e7ed      	b.n	8012ed2 <_putc_r+0x44>

08012ef6 <memmove>:
 8012ef6:	4288      	cmp	r0, r1
 8012ef8:	b510      	push	{r4, lr}
 8012efa:	eb01 0402 	add.w	r4, r1, r2
 8012efe:	d902      	bls.n	8012f06 <memmove+0x10>
 8012f00:	4284      	cmp	r4, r0
 8012f02:	4623      	mov	r3, r4
 8012f04:	d807      	bhi.n	8012f16 <memmove+0x20>
 8012f06:	1e43      	subs	r3, r0, #1
 8012f08:	42a1      	cmp	r1, r4
 8012f0a:	d008      	beq.n	8012f1e <memmove+0x28>
 8012f0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f10:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012f14:	e7f8      	b.n	8012f08 <memmove+0x12>
 8012f16:	4601      	mov	r1, r0
 8012f18:	4402      	add	r2, r0
 8012f1a:	428a      	cmp	r2, r1
 8012f1c:	d100      	bne.n	8012f20 <memmove+0x2a>
 8012f1e:	bd10      	pop	{r4, pc}
 8012f20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f24:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012f28:	e7f7      	b.n	8012f1a <memmove+0x24>
	...

08012f2c <_fstat_r>:
 8012f2c:	b538      	push	{r3, r4, r5, lr}
 8012f2e:	2300      	movs	r3, #0
 8012f30:	4d06      	ldr	r5, [pc, #24]	@ (8012f4c <_fstat_r+0x20>)
 8012f32:	4604      	mov	r4, r0
 8012f34:	4608      	mov	r0, r1
 8012f36:	4611      	mov	r1, r2
 8012f38:	602b      	str	r3, [r5, #0]
 8012f3a:	f7ef fec1 	bl	8002cc0 <_fstat>
 8012f3e:	1c43      	adds	r3, r0, #1
 8012f40:	d102      	bne.n	8012f48 <_fstat_r+0x1c>
 8012f42:	682b      	ldr	r3, [r5, #0]
 8012f44:	b103      	cbz	r3, 8012f48 <_fstat_r+0x1c>
 8012f46:	6023      	str	r3, [r4, #0]
 8012f48:	bd38      	pop	{r3, r4, r5, pc}
 8012f4a:	bf00      	nop
 8012f4c:	200008b0 	.word	0x200008b0

08012f50 <_isatty_r>:
 8012f50:	b538      	push	{r3, r4, r5, lr}
 8012f52:	2300      	movs	r3, #0
 8012f54:	4d05      	ldr	r5, [pc, #20]	@ (8012f6c <_isatty_r+0x1c>)
 8012f56:	4604      	mov	r4, r0
 8012f58:	4608      	mov	r0, r1
 8012f5a:	602b      	str	r3, [r5, #0]
 8012f5c:	f7ef febf 	bl	8002cde <_isatty>
 8012f60:	1c43      	adds	r3, r0, #1
 8012f62:	d102      	bne.n	8012f6a <_isatty_r+0x1a>
 8012f64:	682b      	ldr	r3, [r5, #0]
 8012f66:	b103      	cbz	r3, 8012f6a <_isatty_r+0x1a>
 8012f68:	6023      	str	r3, [r4, #0]
 8012f6a:	bd38      	pop	{r3, r4, r5, pc}
 8012f6c:	200008b0 	.word	0x200008b0

08012f70 <_sbrk_r>:
 8012f70:	b538      	push	{r3, r4, r5, lr}
 8012f72:	2300      	movs	r3, #0
 8012f74:	4d05      	ldr	r5, [pc, #20]	@ (8012f8c <_sbrk_r+0x1c>)
 8012f76:	4604      	mov	r4, r0
 8012f78:	4608      	mov	r0, r1
 8012f7a:	602b      	str	r3, [r5, #0]
 8012f7c:	f7ef fec6 	bl	8002d0c <_sbrk>
 8012f80:	1c43      	adds	r3, r0, #1
 8012f82:	d102      	bne.n	8012f8a <_sbrk_r+0x1a>
 8012f84:	682b      	ldr	r3, [r5, #0]
 8012f86:	b103      	cbz	r3, 8012f8a <_sbrk_r+0x1a>
 8012f88:	6023      	str	r3, [r4, #0]
 8012f8a:	bd38      	pop	{r3, r4, r5, pc}
 8012f8c:	200008b0 	.word	0x200008b0

08012f90 <memchr>:
 8012f90:	4603      	mov	r3, r0
 8012f92:	b510      	push	{r4, lr}
 8012f94:	b2c9      	uxtb	r1, r1
 8012f96:	4402      	add	r2, r0
 8012f98:	4293      	cmp	r3, r2
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	d101      	bne.n	8012fa2 <memchr+0x12>
 8012f9e:	2000      	movs	r0, #0
 8012fa0:	e003      	b.n	8012faa <memchr+0x1a>
 8012fa2:	7804      	ldrb	r4, [r0, #0]
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	428c      	cmp	r4, r1
 8012fa8:	d1f6      	bne.n	8012f98 <memchr+0x8>
 8012faa:	bd10      	pop	{r4, pc}

08012fac <memcpy>:
 8012fac:	440a      	add	r2, r1
 8012fae:	4291      	cmp	r1, r2
 8012fb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8012fb4:	d100      	bne.n	8012fb8 <memcpy+0xc>
 8012fb6:	4770      	bx	lr
 8012fb8:	b510      	push	{r4, lr}
 8012fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fbe:	4291      	cmp	r1, r2
 8012fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fc4:	d1f9      	bne.n	8012fba <memcpy+0xe>
 8012fc6:	bd10      	pop	{r4, pc}

08012fc8 <_realloc_r>:
 8012fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fcc:	4680      	mov	r8, r0
 8012fce:	4615      	mov	r5, r2
 8012fd0:	460c      	mov	r4, r1
 8012fd2:	b921      	cbnz	r1, 8012fde <_realloc_r+0x16>
 8012fd4:	4611      	mov	r1, r2
 8012fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fda:	f7ff b999 	b.w	8012310 <_malloc_r>
 8012fde:	b92a      	cbnz	r2, 8012fec <_realloc_r+0x24>
 8012fe0:	f7ff f92c 	bl	801223c <_free_r>
 8012fe4:	2400      	movs	r4, #0
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fec:	f000 f81a 	bl	8013024 <_malloc_usable_size_r>
 8012ff0:	4285      	cmp	r5, r0
 8012ff2:	4606      	mov	r6, r0
 8012ff4:	d802      	bhi.n	8012ffc <_realloc_r+0x34>
 8012ff6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012ffa:	d8f4      	bhi.n	8012fe6 <_realloc_r+0x1e>
 8012ffc:	4629      	mov	r1, r5
 8012ffe:	4640      	mov	r0, r8
 8013000:	f7ff f986 	bl	8012310 <_malloc_r>
 8013004:	4607      	mov	r7, r0
 8013006:	2800      	cmp	r0, #0
 8013008:	d0ec      	beq.n	8012fe4 <_realloc_r+0x1c>
 801300a:	42b5      	cmp	r5, r6
 801300c:	462a      	mov	r2, r5
 801300e:	4621      	mov	r1, r4
 8013010:	bf28      	it	cs
 8013012:	4632      	movcs	r2, r6
 8013014:	f7ff ffca 	bl	8012fac <memcpy>
 8013018:	4621      	mov	r1, r4
 801301a:	4640      	mov	r0, r8
 801301c:	f7ff f90e 	bl	801223c <_free_r>
 8013020:	463c      	mov	r4, r7
 8013022:	e7e0      	b.n	8012fe6 <_realloc_r+0x1e>

08013024 <_malloc_usable_size_r>:
 8013024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013028:	1f18      	subs	r0, r3, #4
 801302a:	2b00      	cmp	r3, #0
 801302c:	bfbc      	itt	lt
 801302e:	580b      	ldrlt	r3, [r1, r0]
 8013030:	18c0      	addlt	r0, r0, r3
 8013032:	4770      	bx	lr

08013034 <pow>:
 8013034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013038:	4614      	mov	r4, r2
 801303a:	461d      	mov	r5, r3
 801303c:	4680      	mov	r8, r0
 801303e:	4689      	mov	r9, r1
 8013040:	f000 f89a 	bl	8013178 <__ieee754_pow>
 8013044:	4622      	mov	r2, r4
 8013046:	4606      	mov	r6, r0
 8013048:	460f      	mov	r7, r1
 801304a:	462b      	mov	r3, r5
 801304c:	4620      	mov	r0, r4
 801304e:	4629      	mov	r1, r5
 8013050:	f7ed fcec 	bl	8000a2c <__aeabi_dcmpun>
 8013054:	bbc8      	cbnz	r0, 80130ca <pow+0x96>
 8013056:	2200      	movs	r2, #0
 8013058:	2300      	movs	r3, #0
 801305a:	4640      	mov	r0, r8
 801305c:	4649      	mov	r1, r9
 801305e:	f7ed fcb3 	bl	80009c8 <__aeabi_dcmpeq>
 8013062:	b1b8      	cbz	r0, 8013094 <pow+0x60>
 8013064:	2200      	movs	r2, #0
 8013066:	2300      	movs	r3, #0
 8013068:	4620      	mov	r0, r4
 801306a:	4629      	mov	r1, r5
 801306c:	f7ed fcac 	bl	80009c8 <__aeabi_dcmpeq>
 8013070:	2800      	cmp	r0, #0
 8013072:	d141      	bne.n	80130f8 <pow+0xc4>
 8013074:	4620      	mov	r0, r4
 8013076:	4629      	mov	r1, r5
 8013078:	f000 f844 	bl	8013104 <finite>
 801307c:	b328      	cbz	r0, 80130ca <pow+0x96>
 801307e:	2200      	movs	r2, #0
 8013080:	2300      	movs	r3, #0
 8013082:	4620      	mov	r0, r4
 8013084:	4629      	mov	r1, r5
 8013086:	f7ed fca9 	bl	80009dc <__aeabi_dcmplt>
 801308a:	b1f0      	cbz	r0, 80130ca <pow+0x96>
 801308c:	f7ff f8a8 	bl	80121e0 <__errno>
 8013090:	2322      	movs	r3, #34	@ 0x22
 8013092:	e019      	b.n	80130c8 <pow+0x94>
 8013094:	4630      	mov	r0, r6
 8013096:	4639      	mov	r1, r7
 8013098:	f000 f834 	bl	8013104 <finite>
 801309c:	b9c8      	cbnz	r0, 80130d2 <pow+0x9e>
 801309e:	4640      	mov	r0, r8
 80130a0:	4649      	mov	r1, r9
 80130a2:	f000 f82f 	bl	8013104 <finite>
 80130a6:	b1a0      	cbz	r0, 80130d2 <pow+0x9e>
 80130a8:	4620      	mov	r0, r4
 80130aa:	4629      	mov	r1, r5
 80130ac:	f000 f82a 	bl	8013104 <finite>
 80130b0:	b178      	cbz	r0, 80130d2 <pow+0x9e>
 80130b2:	4632      	mov	r2, r6
 80130b4:	463b      	mov	r3, r7
 80130b6:	4630      	mov	r0, r6
 80130b8:	4639      	mov	r1, r7
 80130ba:	f7ed fcb7 	bl	8000a2c <__aeabi_dcmpun>
 80130be:	2800      	cmp	r0, #0
 80130c0:	d0e4      	beq.n	801308c <pow+0x58>
 80130c2:	f7ff f88d 	bl	80121e0 <__errno>
 80130c6:	2321      	movs	r3, #33	@ 0x21
 80130c8:	6003      	str	r3, [r0, #0]
 80130ca:	4630      	mov	r0, r6
 80130cc:	4639      	mov	r1, r7
 80130ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130d2:	2200      	movs	r2, #0
 80130d4:	2300      	movs	r3, #0
 80130d6:	4630      	mov	r0, r6
 80130d8:	4639      	mov	r1, r7
 80130da:	f7ed fc75 	bl	80009c8 <__aeabi_dcmpeq>
 80130de:	2800      	cmp	r0, #0
 80130e0:	d0f3      	beq.n	80130ca <pow+0x96>
 80130e2:	4640      	mov	r0, r8
 80130e4:	4649      	mov	r1, r9
 80130e6:	f000 f80d 	bl	8013104 <finite>
 80130ea:	2800      	cmp	r0, #0
 80130ec:	d0ed      	beq.n	80130ca <pow+0x96>
 80130ee:	4620      	mov	r0, r4
 80130f0:	4629      	mov	r1, r5
 80130f2:	f000 f807 	bl	8013104 <finite>
 80130f6:	e7c8      	b.n	801308a <pow+0x56>
 80130f8:	2600      	movs	r6, #0
 80130fa:	4f01      	ldr	r7, [pc, #4]	@ (8013100 <pow+0xcc>)
 80130fc:	e7e5      	b.n	80130ca <pow+0x96>
 80130fe:	bf00      	nop
 8013100:	3ff00000 	.word	0x3ff00000

08013104 <finite>:
 8013104:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8013108:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801310c:	0fc0      	lsrs	r0, r0, #31
 801310e:	4770      	bx	lr

08013110 <trunc>:
 8013110:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
 8013114:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8013118:	f2a5 34ff 	subw	r4, r5, #1023	@ 0x3ff
 801311c:	2c13      	cmp	r4, #19
 801311e:	4683      	mov	fp, r0
 8013120:	468c      	mov	ip, r1
 8013122:	dc13      	bgt.n	801314c <trunc+0x3c>
 8013124:	2c00      	cmp	r4, #0
 8013126:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 801312a:	da06      	bge.n	801313a <trunc+0x2a>
 801312c:	2200      	movs	r2, #0
 801312e:	46ac      	mov	ip, r5
 8013130:	4693      	mov	fp, r2
 8013132:	4658      	mov	r0, fp
 8013134:	4661      	mov	r1, ip
 8013136:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
 801313a:	2000      	movs	r0, #0
 801313c:	4b0c      	ldr	r3, [pc, #48]	@ (8013170 <trunc+0x60>)
 801313e:	4123      	asrs	r3, r4
 8013140:	400b      	ands	r3, r1
 8013142:	ea43 0105 	orr.w	r1, r3, r5
 8013146:	4683      	mov	fp, r0
 8013148:	468c      	mov	ip, r1
 801314a:	e7f2      	b.n	8013132 <trunc+0x22>
 801314c:	2c33      	cmp	r4, #51	@ 0x33
 801314e:	dd07      	ble.n	8013160 <trunc+0x50>
 8013150:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 8013154:	d1ed      	bne.n	8013132 <trunc+0x22>
 8013156:	4602      	mov	r2, r0
 8013158:	460b      	mov	r3, r1
 801315a:	f7ed f817 	bl	800018c <__adddf3>
 801315e:	e7f2      	b.n	8013146 <trunc+0x36>
 8013160:	f04f 33ff 	mov.w	r3, #4294967295
 8013164:	f2a5 4513 	subw	r5, r5, #1043	@ 0x413
 8013168:	40eb      	lsrs	r3, r5
 801316a:	ea20 0003 	bic.w	r0, r0, r3
 801316e:	e7ea      	b.n	8013146 <trunc+0x36>
 8013170:	fff00000 	.word	0xfff00000
 8013174:	00000000 	.word	0x00000000

08013178 <__ieee754_pow>:
 8013178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801317c:	b091      	sub	sp, #68	@ 0x44
 801317e:	e9cd 2300 	strd	r2, r3, [sp]
 8013182:	468b      	mov	fp, r1
 8013184:	e9dd 1800 	ldrd	r1, r8, [sp]
 8013188:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 801318c:	4682      	mov	sl, r0
 801318e:	ea57 0001 	orrs.w	r0, r7, r1
 8013192:	d112      	bne.n	80131ba <__ieee754_pow+0x42>
 8013194:	4653      	mov	r3, sl
 8013196:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 801319a:	18db      	adds	r3, r3, r3
 801319c:	4152      	adcs	r2, r2
 801319e:	4298      	cmp	r0, r3
 80131a0:	4b91      	ldr	r3, [pc, #580]	@ (80133e8 <__ieee754_pow+0x270>)
 80131a2:	4193      	sbcs	r3, r2
 80131a4:	f080 84ce 	bcs.w	8013b44 <__ieee754_pow+0x9cc>
 80131a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131ac:	4650      	mov	r0, sl
 80131ae:	4659      	mov	r1, fp
 80131b0:	f7ec ffec 	bl	800018c <__adddf3>
 80131b4:	b011      	add	sp, #68	@ 0x44
 80131b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ba:	4b8c      	ldr	r3, [pc, #560]	@ (80133ec <__ieee754_pow+0x274>)
 80131bc:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80131c0:	429e      	cmp	r6, r3
 80131c2:	465d      	mov	r5, fp
 80131c4:	46d1      	mov	r9, sl
 80131c6:	d807      	bhi.n	80131d8 <__ieee754_pow+0x60>
 80131c8:	d102      	bne.n	80131d0 <__ieee754_pow+0x58>
 80131ca:	f1ba 0f00 	cmp.w	sl, #0
 80131ce:	d1eb      	bne.n	80131a8 <__ieee754_pow+0x30>
 80131d0:	429f      	cmp	r7, r3
 80131d2:	d801      	bhi.n	80131d8 <__ieee754_pow+0x60>
 80131d4:	d10f      	bne.n	80131f6 <__ieee754_pow+0x7e>
 80131d6:	b171      	cbz	r1, 80131f6 <__ieee754_pow+0x7e>
 80131d8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80131dc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80131e0:	ea55 0509 	orrs.w	r5, r5, r9
 80131e4:	d1e0      	bne.n	80131a8 <__ieee754_pow+0x30>
 80131e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80131ea:	18db      	adds	r3, r3, r3
 80131ec:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80131f0:	4152      	adcs	r2, r2
 80131f2:	429d      	cmp	r5, r3
 80131f4:	e7d4      	b.n	80131a0 <__ieee754_pow+0x28>
 80131f6:	2d00      	cmp	r5, #0
 80131f8:	4633      	mov	r3, r6
 80131fa:	da39      	bge.n	8013270 <__ieee754_pow+0xf8>
 80131fc:	4a7c      	ldr	r2, [pc, #496]	@ (80133f0 <__ieee754_pow+0x278>)
 80131fe:	4297      	cmp	r7, r2
 8013200:	d84e      	bhi.n	80132a0 <__ieee754_pow+0x128>
 8013202:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8013206:	4297      	cmp	r7, r2
 8013208:	f240 84ab 	bls.w	8013b62 <__ieee754_pow+0x9ea>
 801320c:	153a      	asrs	r2, r7, #20
 801320e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013212:	2a14      	cmp	r2, #20
 8013214:	dd0f      	ble.n	8013236 <__ieee754_pow+0xbe>
 8013216:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801321a:	fa21 f402 	lsr.w	r4, r1, r2
 801321e:	fa04 f202 	lsl.w	r2, r4, r2
 8013222:	428a      	cmp	r2, r1
 8013224:	f040 849d 	bne.w	8013b62 <__ieee754_pow+0x9ea>
 8013228:	f004 0401 	and.w	r4, r4, #1
 801322c:	f1c4 0402 	rsb	r4, r4, #2
 8013230:	2900      	cmp	r1, #0
 8013232:	d15a      	bne.n	80132ea <__ieee754_pow+0x172>
 8013234:	e00e      	b.n	8013254 <__ieee754_pow+0xdc>
 8013236:	2900      	cmp	r1, #0
 8013238:	d156      	bne.n	80132e8 <__ieee754_pow+0x170>
 801323a:	f1c2 0214 	rsb	r2, r2, #20
 801323e:	fa47 f402 	asr.w	r4, r7, r2
 8013242:	fa04 f202 	lsl.w	r2, r4, r2
 8013246:	42ba      	cmp	r2, r7
 8013248:	f040 8488 	bne.w	8013b5c <__ieee754_pow+0x9e4>
 801324c:	f004 0401 	and.w	r4, r4, #1
 8013250:	f1c4 0402 	rsb	r4, r4, #2
 8013254:	4a67      	ldr	r2, [pc, #412]	@ (80133f4 <__ieee754_pow+0x27c>)
 8013256:	4297      	cmp	r7, r2
 8013258:	d130      	bne.n	80132bc <__ieee754_pow+0x144>
 801325a:	f1b8 0f00 	cmp.w	r8, #0
 801325e:	f280 8479 	bge.w	8013b54 <__ieee754_pow+0x9dc>
 8013262:	4652      	mov	r2, sl
 8013264:	465b      	mov	r3, fp
 8013266:	2000      	movs	r0, #0
 8013268:	4962      	ldr	r1, [pc, #392]	@ (80133f4 <__ieee754_pow+0x27c>)
 801326a:	f7ed fa6f 	bl	800074c <__aeabi_ddiv>
 801326e:	e7a1      	b.n	80131b4 <__ieee754_pow+0x3c>
 8013270:	2400      	movs	r4, #0
 8013272:	2900      	cmp	r1, #0
 8013274:	d139      	bne.n	80132ea <__ieee754_pow+0x172>
 8013276:	4a5d      	ldr	r2, [pc, #372]	@ (80133ec <__ieee754_pow+0x274>)
 8013278:	4297      	cmp	r7, r2
 801327a:	d1eb      	bne.n	8013254 <__ieee754_pow+0xdc>
 801327c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8013280:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8013284:	ea53 0309 	orrs.w	r3, r3, r9
 8013288:	f000 845c 	beq.w	8013b44 <__ieee754_pow+0x9cc>
 801328c:	4b5a      	ldr	r3, [pc, #360]	@ (80133f8 <__ieee754_pow+0x280>)
 801328e:	429e      	cmp	r6, r3
 8013290:	d908      	bls.n	80132a4 <__ieee754_pow+0x12c>
 8013292:	f1b8 0f00 	cmp.w	r8, #0
 8013296:	f2c0 8459 	blt.w	8013b4c <__ieee754_pow+0x9d4>
 801329a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801329e:	e789      	b.n	80131b4 <__ieee754_pow+0x3c>
 80132a0:	2402      	movs	r4, #2
 80132a2:	e7e6      	b.n	8013272 <__ieee754_pow+0xfa>
 80132a4:	f1b8 0f00 	cmp.w	r8, #0
 80132a8:	f04f 0000 	mov.w	r0, #0
 80132ac:	f04f 0100 	mov.w	r1, #0
 80132b0:	da80      	bge.n	80131b4 <__ieee754_pow+0x3c>
 80132b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80132b6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80132ba:	e77b      	b.n	80131b4 <__ieee754_pow+0x3c>
 80132bc:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80132c0:	d106      	bne.n	80132d0 <__ieee754_pow+0x158>
 80132c2:	4652      	mov	r2, sl
 80132c4:	465b      	mov	r3, fp
 80132c6:	4650      	mov	r0, sl
 80132c8:	4659      	mov	r1, fp
 80132ca:	f7ed f915 	bl	80004f8 <__aeabi_dmul>
 80132ce:	e771      	b.n	80131b4 <__ieee754_pow+0x3c>
 80132d0:	4a4a      	ldr	r2, [pc, #296]	@ (80133fc <__ieee754_pow+0x284>)
 80132d2:	4590      	cmp	r8, r2
 80132d4:	d109      	bne.n	80132ea <__ieee754_pow+0x172>
 80132d6:	2d00      	cmp	r5, #0
 80132d8:	db07      	blt.n	80132ea <__ieee754_pow+0x172>
 80132da:	4650      	mov	r0, sl
 80132dc:	4659      	mov	r1, fp
 80132de:	b011      	add	sp, #68	@ 0x44
 80132e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132e4:	f000 bd12 	b.w	8013d0c <__ieee754_sqrt>
 80132e8:	2400      	movs	r4, #0
 80132ea:	4650      	mov	r0, sl
 80132ec:	4659      	mov	r1, fp
 80132ee:	9302      	str	r3, [sp, #8]
 80132f0:	f000 fc6a 	bl	8013bc8 <fabs>
 80132f4:	9b02      	ldr	r3, [sp, #8]
 80132f6:	f1b9 0f00 	cmp.w	r9, #0
 80132fa:	d127      	bne.n	801334c <__ieee754_pow+0x1d4>
 80132fc:	4a3d      	ldr	r2, [pc, #244]	@ (80133f4 <__ieee754_pow+0x27c>)
 80132fe:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8013302:	4594      	cmp	ip, r2
 8013304:	d000      	beq.n	8013308 <__ieee754_pow+0x190>
 8013306:	bb0e      	cbnz	r6, 801334c <__ieee754_pow+0x1d4>
 8013308:	f1b8 0f00 	cmp.w	r8, #0
 801330c:	da05      	bge.n	801331a <__ieee754_pow+0x1a2>
 801330e:	4602      	mov	r2, r0
 8013310:	460b      	mov	r3, r1
 8013312:	2000      	movs	r0, #0
 8013314:	4937      	ldr	r1, [pc, #220]	@ (80133f4 <__ieee754_pow+0x27c>)
 8013316:	f7ed fa19 	bl	800074c <__aeabi_ddiv>
 801331a:	2d00      	cmp	r5, #0
 801331c:	f6bf af4a 	bge.w	80131b4 <__ieee754_pow+0x3c>
 8013320:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8013324:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8013328:	4326      	orrs	r6, r4
 801332a:	d108      	bne.n	801333e <__ieee754_pow+0x1c6>
 801332c:	4602      	mov	r2, r0
 801332e:	460b      	mov	r3, r1
 8013330:	4610      	mov	r0, r2
 8013332:	4619      	mov	r1, r3
 8013334:	f7ec ff28 	bl	8000188 <__aeabi_dsub>
 8013338:	4602      	mov	r2, r0
 801333a:	460b      	mov	r3, r1
 801333c:	e795      	b.n	801326a <__ieee754_pow+0xf2>
 801333e:	2c01      	cmp	r4, #1
 8013340:	f47f af38 	bne.w	80131b4 <__ieee754_pow+0x3c>
 8013344:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013348:	4619      	mov	r1, r3
 801334a:	e733      	b.n	80131b4 <__ieee754_pow+0x3c>
 801334c:	0fea      	lsrs	r2, r5, #31
 801334e:	3a01      	subs	r2, #1
 8013350:	ea52 0c04 	orrs.w	ip, r2, r4
 8013354:	d102      	bne.n	801335c <__ieee754_pow+0x1e4>
 8013356:	4652      	mov	r2, sl
 8013358:	465b      	mov	r3, fp
 801335a:	e7e9      	b.n	8013330 <__ieee754_pow+0x1b8>
 801335c:	f04f 0900 	mov.w	r9, #0
 8013360:	3c01      	subs	r4, #1
 8013362:	4314      	orrs	r4, r2
 8013364:	bf14      	ite	ne
 8013366:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80133f4 <__ieee754_pow+0x27c>
 801336a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8013400 <__ieee754_pow+0x288>
 801336e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8013372:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8013376:	f240 8107 	bls.w	8013588 <__ieee754_pow+0x410>
 801337a:	4b22      	ldr	r3, [pc, #136]	@ (8013404 <__ieee754_pow+0x28c>)
 801337c:	429f      	cmp	r7, r3
 801337e:	4b1e      	ldr	r3, [pc, #120]	@ (80133f8 <__ieee754_pow+0x280>)
 8013380:	d913      	bls.n	80133aa <__ieee754_pow+0x232>
 8013382:	429e      	cmp	r6, r3
 8013384:	d808      	bhi.n	8013398 <__ieee754_pow+0x220>
 8013386:	f1b8 0f00 	cmp.w	r8, #0
 801338a:	da08      	bge.n	801339e <__ieee754_pow+0x226>
 801338c:	2000      	movs	r0, #0
 801338e:	b011      	add	sp, #68	@ 0x44
 8013390:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013394:	f000 bcb4 	b.w	8013d00 <__math_oflow>
 8013398:	f1b8 0f00 	cmp.w	r8, #0
 801339c:	dcf6      	bgt.n	801338c <__ieee754_pow+0x214>
 801339e:	2000      	movs	r0, #0
 80133a0:	b011      	add	sp, #68	@ 0x44
 80133a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a6:	f000 bca6 	b.w	8013cf6 <__math_uflow>
 80133aa:	429e      	cmp	r6, r3
 80133ac:	d20c      	bcs.n	80133c8 <__ieee754_pow+0x250>
 80133ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133b2:	2200      	movs	r2, #0
 80133b4:	2300      	movs	r3, #0
 80133b6:	f7ed fb11 	bl	80009dc <__aeabi_dcmplt>
 80133ba:	3800      	subs	r0, #0
 80133bc:	bf18      	it	ne
 80133be:	2001      	movne	r0, #1
 80133c0:	f1b8 0f00 	cmp.w	r8, #0
 80133c4:	daec      	bge.n	80133a0 <__ieee754_pow+0x228>
 80133c6:	e7e2      	b.n	801338e <__ieee754_pow+0x216>
 80133c8:	4b0a      	ldr	r3, [pc, #40]	@ (80133f4 <__ieee754_pow+0x27c>)
 80133ca:	2200      	movs	r2, #0
 80133cc:	429e      	cmp	r6, r3
 80133ce:	d91b      	bls.n	8013408 <__ieee754_pow+0x290>
 80133d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133d4:	2300      	movs	r3, #0
 80133d6:	f7ed fb01 	bl	80009dc <__aeabi_dcmplt>
 80133da:	3800      	subs	r0, #0
 80133dc:	bf18      	it	ne
 80133de:	2001      	movne	r0, #1
 80133e0:	f1b8 0f00 	cmp.w	r8, #0
 80133e4:	dcd3      	bgt.n	801338e <__ieee754_pow+0x216>
 80133e6:	e7db      	b.n	80133a0 <__ieee754_pow+0x228>
 80133e8:	fff00000 	.word	0xfff00000
 80133ec:	7ff00000 	.word	0x7ff00000
 80133f0:	433fffff 	.word	0x433fffff
 80133f4:	3ff00000 	.word	0x3ff00000
 80133f8:	3fefffff 	.word	0x3fefffff
 80133fc:	3fe00000 	.word	0x3fe00000
 8013400:	bff00000 	.word	0xbff00000
 8013404:	43f00000 	.word	0x43f00000
 8013408:	4b5b      	ldr	r3, [pc, #364]	@ (8013578 <__ieee754_pow+0x400>)
 801340a:	f7ec febd 	bl	8000188 <__aeabi_dsub>
 801340e:	a352      	add	r3, pc, #328	@ (adr r3, 8013558 <__ieee754_pow+0x3e0>)
 8013410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013414:	4604      	mov	r4, r0
 8013416:	460d      	mov	r5, r1
 8013418:	f7ed f86e 	bl	80004f8 <__aeabi_dmul>
 801341c:	a350      	add	r3, pc, #320	@ (adr r3, 8013560 <__ieee754_pow+0x3e8>)
 801341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013422:	4606      	mov	r6, r0
 8013424:	460f      	mov	r7, r1
 8013426:	4620      	mov	r0, r4
 8013428:	4629      	mov	r1, r5
 801342a:	f7ed f865 	bl	80004f8 <__aeabi_dmul>
 801342e:	2200      	movs	r2, #0
 8013430:	4682      	mov	sl, r0
 8013432:	468b      	mov	fp, r1
 8013434:	4620      	mov	r0, r4
 8013436:	4629      	mov	r1, r5
 8013438:	4b50      	ldr	r3, [pc, #320]	@ (801357c <__ieee754_pow+0x404>)
 801343a:	f7ed f85d 	bl	80004f8 <__aeabi_dmul>
 801343e:	4602      	mov	r2, r0
 8013440:	460b      	mov	r3, r1
 8013442:	a149      	add	r1, pc, #292	@ (adr r1, 8013568 <__ieee754_pow+0x3f0>)
 8013444:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013448:	f7ec fe9e 	bl	8000188 <__aeabi_dsub>
 801344c:	4622      	mov	r2, r4
 801344e:	462b      	mov	r3, r5
 8013450:	f7ed f852 	bl	80004f8 <__aeabi_dmul>
 8013454:	4602      	mov	r2, r0
 8013456:	460b      	mov	r3, r1
 8013458:	2000      	movs	r0, #0
 801345a:	4949      	ldr	r1, [pc, #292]	@ (8013580 <__ieee754_pow+0x408>)
 801345c:	f7ec fe94 	bl	8000188 <__aeabi_dsub>
 8013460:	4622      	mov	r2, r4
 8013462:	4680      	mov	r8, r0
 8013464:	4689      	mov	r9, r1
 8013466:	462b      	mov	r3, r5
 8013468:	4620      	mov	r0, r4
 801346a:	4629      	mov	r1, r5
 801346c:	f7ed f844 	bl	80004f8 <__aeabi_dmul>
 8013470:	4602      	mov	r2, r0
 8013472:	460b      	mov	r3, r1
 8013474:	4640      	mov	r0, r8
 8013476:	4649      	mov	r1, r9
 8013478:	f7ed f83e 	bl	80004f8 <__aeabi_dmul>
 801347c:	a33c      	add	r3, pc, #240	@ (adr r3, 8013570 <__ieee754_pow+0x3f8>)
 801347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013482:	f7ed f839 	bl	80004f8 <__aeabi_dmul>
 8013486:	4602      	mov	r2, r0
 8013488:	460b      	mov	r3, r1
 801348a:	4650      	mov	r0, sl
 801348c:	4659      	mov	r1, fp
 801348e:	f7ec fe7b 	bl	8000188 <__aeabi_dsub>
 8013492:	2400      	movs	r4, #0
 8013494:	4602      	mov	r2, r0
 8013496:	460b      	mov	r3, r1
 8013498:	4680      	mov	r8, r0
 801349a:	4689      	mov	r9, r1
 801349c:	4630      	mov	r0, r6
 801349e:	4639      	mov	r1, r7
 80134a0:	f7ec fe74 	bl	800018c <__adddf3>
 80134a4:	4632      	mov	r2, r6
 80134a6:	463b      	mov	r3, r7
 80134a8:	4620      	mov	r0, r4
 80134aa:	460d      	mov	r5, r1
 80134ac:	f7ec fe6c 	bl	8000188 <__aeabi_dsub>
 80134b0:	4602      	mov	r2, r0
 80134b2:	460b      	mov	r3, r1
 80134b4:	4640      	mov	r0, r8
 80134b6:	4649      	mov	r1, r9
 80134b8:	f7ec fe66 	bl	8000188 <__aeabi_dsub>
 80134bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80134c4:	2300      	movs	r3, #0
 80134c6:	9304      	str	r3, [sp, #16]
 80134c8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80134cc:	4606      	mov	r6, r0
 80134ce:	460f      	mov	r7, r1
 80134d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80134d4:	4652      	mov	r2, sl
 80134d6:	465b      	mov	r3, fp
 80134d8:	f7ec fe56 	bl	8000188 <__aeabi_dsub>
 80134dc:	4622      	mov	r2, r4
 80134de:	462b      	mov	r3, r5
 80134e0:	f7ed f80a 	bl	80004f8 <__aeabi_dmul>
 80134e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134e8:	4680      	mov	r8, r0
 80134ea:	4689      	mov	r9, r1
 80134ec:	4630      	mov	r0, r6
 80134ee:	4639      	mov	r1, r7
 80134f0:	f7ed f802 	bl	80004f8 <__aeabi_dmul>
 80134f4:	4602      	mov	r2, r0
 80134f6:	460b      	mov	r3, r1
 80134f8:	4640      	mov	r0, r8
 80134fa:	4649      	mov	r1, r9
 80134fc:	f7ec fe46 	bl	800018c <__adddf3>
 8013500:	4652      	mov	r2, sl
 8013502:	465b      	mov	r3, fp
 8013504:	4606      	mov	r6, r0
 8013506:	460f      	mov	r7, r1
 8013508:	4620      	mov	r0, r4
 801350a:	4629      	mov	r1, r5
 801350c:	f7ec fff4 	bl	80004f8 <__aeabi_dmul>
 8013510:	460b      	mov	r3, r1
 8013512:	4602      	mov	r2, r0
 8013514:	4680      	mov	r8, r0
 8013516:	4689      	mov	r9, r1
 8013518:	4630      	mov	r0, r6
 801351a:	4639      	mov	r1, r7
 801351c:	f7ec fe36 	bl	800018c <__adddf3>
 8013520:	4b18      	ldr	r3, [pc, #96]	@ (8013584 <__ieee754_pow+0x40c>)
 8013522:	4604      	mov	r4, r0
 8013524:	4299      	cmp	r1, r3
 8013526:	460d      	mov	r5, r1
 8013528:	468a      	mov	sl, r1
 801352a:	468b      	mov	fp, r1
 801352c:	f340 82e0 	ble.w	8013af0 <__ieee754_pow+0x978>
 8013530:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013534:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013538:	4303      	orrs	r3, r0
 801353a:	f000 81df 	beq.w	80138fc <__ieee754_pow+0x784>
 801353e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013542:	2200      	movs	r2, #0
 8013544:	2300      	movs	r3, #0
 8013546:	f7ed fa49 	bl	80009dc <__aeabi_dcmplt>
 801354a:	3800      	subs	r0, #0
 801354c:	bf18      	it	ne
 801354e:	2001      	movne	r0, #1
 8013550:	e71d      	b.n	801338e <__ieee754_pow+0x216>
 8013552:	bf00      	nop
 8013554:	f3af 8000 	nop.w
 8013558:	60000000 	.word	0x60000000
 801355c:	3ff71547 	.word	0x3ff71547
 8013560:	f85ddf44 	.word	0xf85ddf44
 8013564:	3e54ae0b 	.word	0x3e54ae0b
 8013568:	55555555 	.word	0x55555555
 801356c:	3fd55555 	.word	0x3fd55555
 8013570:	652b82fe 	.word	0x652b82fe
 8013574:	3ff71547 	.word	0x3ff71547
 8013578:	3ff00000 	.word	0x3ff00000
 801357c:	3fd00000 	.word	0x3fd00000
 8013580:	3fe00000 	.word	0x3fe00000
 8013584:	408fffff 	.word	0x408fffff
 8013588:	4ad3      	ldr	r2, [pc, #844]	@ (80138d8 <__ieee754_pow+0x760>)
 801358a:	402a      	ands	r2, r5
 801358c:	2a00      	cmp	r2, #0
 801358e:	f040 817a 	bne.w	8013886 <__ieee754_pow+0x70e>
 8013592:	4bd2      	ldr	r3, [pc, #840]	@ (80138dc <__ieee754_pow+0x764>)
 8013594:	2200      	movs	r2, #0
 8013596:	f7ec ffaf 	bl	80004f8 <__aeabi_dmul>
 801359a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 801359e:	460b      	mov	r3, r1
 80135a0:	151a      	asrs	r2, r3, #20
 80135a2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80135a6:	4422      	add	r2, r4
 80135a8:	920a      	str	r2, [sp, #40]	@ 0x28
 80135aa:	4acd      	ldr	r2, [pc, #820]	@ (80138e0 <__ieee754_pow+0x768>)
 80135ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80135b0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80135b4:	4293      	cmp	r3, r2
 80135b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80135ba:	dd08      	ble.n	80135ce <__ieee754_pow+0x456>
 80135bc:	4ac9      	ldr	r2, [pc, #804]	@ (80138e4 <__ieee754_pow+0x76c>)
 80135be:	4293      	cmp	r3, r2
 80135c0:	f340 8163 	ble.w	801388a <__ieee754_pow+0x712>
 80135c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135c6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80135ca:	3301      	adds	r3, #1
 80135cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80135ce:	2600      	movs	r6, #0
 80135d0:	00f3      	lsls	r3, r6, #3
 80135d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80135d4:	4bc4      	ldr	r3, [pc, #784]	@ (80138e8 <__ieee754_pow+0x770>)
 80135d6:	4629      	mov	r1, r5
 80135d8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80135dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80135e0:	461a      	mov	r2, r3
 80135e2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80135e6:	4623      	mov	r3, r4
 80135e8:	4682      	mov	sl, r0
 80135ea:	f7ec fdcd 	bl	8000188 <__aeabi_dsub>
 80135ee:	4652      	mov	r2, sl
 80135f0:	462b      	mov	r3, r5
 80135f2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80135f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80135fa:	f7ec fdc7 	bl	800018c <__adddf3>
 80135fe:	4602      	mov	r2, r0
 8013600:	460b      	mov	r3, r1
 8013602:	2000      	movs	r0, #0
 8013604:	49b9      	ldr	r1, [pc, #740]	@ (80138ec <__ieee754_pow+0x774>)
 8013606:	f7ed f8a1 	bl	800074c <__aeabi_ddiv>
 801360a:	4602      	mov	r2, r0
 801360c:	460b      	mov	r3, r1
 801360e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013612:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013616:	f7ec ff6f 	bl	80004f8 <__aeabi_dmul>
 801361a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801361e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8013622:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013626:	2300      	movs	r3, #0
 8013628:	2200      	movs	r2, #0
 801362a:	46ab      	mov	fp, r5
 801362c:	106d      	asrs	r5, r5, #1
 801362e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013632:	9304      	str	r3, [sp, #16]
 8013634:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013638:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801363c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8013640:	4640      	mov	r0, r8
 8013642:	4649      	mov	r1, r9
 8013644:	4614      	mov	r4, r2
 8013646:	461d      	mov	r5, r3
 8013648:	f7ec ff56 	bl	80004f8 <__aeabi_dmul>
 801364c:	4602      	mov	r2, r0
 801364e:	460b      	mov	r3, r1
 8013650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013654:	f7ec fd98 	bl	8000188 <__aeabi_dsub>
 8013658:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801365c:	4606      	mov	r6, r0
 801365e:	460f      	mov	r7, r1
 8013660:	4620      	mov	r0, r4
 8013662:	4629      	mov	r1, r5
 8013664:	f7ec fd90 	bl	8000188 <__aeabi_dsub>
 8013668:	4602      	mov	r2, r0
 801366a:	460b      	mov	r3, r1
 801366c:	4650      	mov	r0, sl
 801366e:	4659      	mov	r1, fp
 8013670:	f7ec fd8a 	bl	8000188 <__aeabi_dsub>
 8013674:	4642      	mov	r2, r8
 8013676:	464b      	mov	r3, r9
 8013678:	f7ec ff3e 	bl	80004f8 <__aeabi_dmul>
 801367c:	4602      	mov	r2, r0
 801367e:	460b      	mov	r3, r1
 8013680:	4630      	mov	r0, r6
 8013682:	4639      	mov	r1, r7
 8013684:	f7ec fd80 	bl	8000188 <__aeabi_dsub>
 8013688:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801368c:	f7ec ff34 	bl	80004f8 <__aeabi_dmul>
 8013690:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013694:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013698:	4610      	mov	r0, r2
 801369a:	4619      	mov	r1, r3
 801369c:	f7ec ff2c 	bl	80004f8 <__aeabi_dmul>
 80136a0:	a37b      	add	r3, pc, #492	@ (adr r3, 8013890 <__ieee754_pow+0x718>)
 80136a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a6:	4604      	mov	r4, r0
 80136a8:	460d      	mov	r5, r1
 80136aa:	f7ec ff25 	bl	80004f8 <__aeabi_dmul>
 80136ae:	a37a      	add	r3, pc, #488	@ (adr r3, 8013898 <__ieee754_pow+0x720>)
 80136b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b4:	f7ec fd6a 	bl	800018c <__adddf3>
 80136b8:	4622      	mov	r2, r4
 80136ba:	462b      	mov	r3, r5
 80136bc:	f7ec ff1c 	bl	80004f8 <__aeabi_dmul>
 80136c0:	a377      	add	r3, pc, #476	@ (adr r3, 80138a0 <__ieee754_pow+0x728>)
 80136c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c6:	f7ec fd61 	bl	800018c <__adddf3>
 80136ca:	4622      	mov	r2, r4
 80136cc:	462b      	mov	r3, r5
 80136ce:	f7ec ff13 	bl	80004f8 <__aeabi_dmul>
 80136d2:	a375      	add	r3, pc, #468	@ (adr r3, 80138a8 <__ieee754_pow+0x730>)
 80136d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d8:	f7ec fd58 	bl	800018c <__adddf3>
 80136dc:	4622      	mov	r2, r4
 80136de:	462b      	mov	r3, r5
 80136e0:	f7ec ff0a 	bl	80004f8 <__aeabi_dmul>
 80136e4:	a372      	add	r3, pc, #456	@ (adr r3, 80138b0 <__ieee754_pow+0x738>)
 80136e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ea:	f7ec fd4f 	bl	800018c <__adddf3>
 80136ee:	4622      	mov	r2, r4
 80136f0:	462b      	mov	r3, r5
 80136f2:	f7ec ff01 	bl	80004f8 <__aeabi_dmul>
 80136f6:	a370      	add	r3, pc, #448	@ (adr r3, 80138b8 <__ieee754_pow+0x740>)
 80136f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136fc:	f7ec fd46 	bl	800018c <__adddf3>
 8013700:	4622      	mov	r2, r4
 8013702:	4606      	mov	r6, r0
 8013704:	460f      	mov	r7, r1
 8013706:	462b      	mov	r3, r5
 8013708:	4620      	mov	r0, r4
 801370a:	4629      	mov	r1, r5
 801370c:	f7ec fef4 	bl	80004f8 <__aeabi_dmul>
 8013710:	4602      	mov	r2, r0
 8013712:	460b      	mov	r3, r1
 8013714:	4630      	mov	r0, r6
 8013716:	4639      	mov	r1, r7
 8013718:	f7ec feee 	bl	80004f8 <__aeabi_dmul>
 801371c:	4604      	mov	r4, r0
 801371e:	460d      	mov	r5, r1
 8013720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013724:	4642      	mov	r2, r8
 8013726:	464b      	mov	r3, r9
 8013728:	f7ec fd30 	bl	800018c <__adddf3>
 801372c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013730:	f7ec fee2 	bl	80004f8 <__aeabi_dmul>
 8013734:	4622      	mov	r2, r4
 8013736:	462b      	mov	r3, r5
 8013738:	f7ec fd28 	bl	800018c <__adddf3>
 801373c:	4642      	mov	r2, r8
 801373e:	4682      	mov	sl, r0
 8013740:	468b      	mov	fp, r1
 8013742:	464b      	mov	r3, r9
 8013744:	4640      	mov	r0, r8
 8013746:	4649      	mov	r1, r9
 8013748:	f7ec fed6 	bl	80004f8 <__aeabi_dmul>
 801374c:	2200      	movs	r2, #0
 801374e:	4b68      	ldr	r3, [pc, #416]	@ (80138f0 <__ieee754_pow+0x778>)
 8013750:	4606      	mov	r6, r0
 8013752:	460f      	mov	r7, r1
 8013754:	f7ec fd1a 	bl	800018c <__adddf3>
 8013758:	4652      	mov	r2, sl
 801375a:	465b      	mov	r3, fp
 801375c:	f7ec fd16 	bl	800018c <__adddf3>
 8013760:	2400      	movs	r4, #0
 8013762:	460d      	mov	r5, r1
 8013764:	4622      	mov	r2, r4
 8013766:	460b      	mov	r3, r1
 8013768:	4640      	mov	r0, r8
 801376a:	4649      	mov	r1, r9
 801376c:	f7ec fec4 	bl	80004f8 <__aeabi_dmul>
 8013770:	2200      	movs	r2, #0
 8013772:	4680      	mov	r8, r0
 8013774:	4689      	mov	r9, r1
 8013776:	4620      	mov	r0, r4
 8013778:	4629      	mov	r1, r5
 801377a:	4b5d      	ldr	r3, [pc, #372]	@ (80138f0 <__ieee754_pow+0x778>)
 801377c:	f7ec fd04 	bl	8000188 <__aeabi_dsub>
 8013780:	4632      	mov	r2, r6
 8013782:	463b      	mov	r3, r7
 8013784:	f7ec fd00 	bl	8000188 <__aeabi_dsub>
 8013788:	4602      	mov	r2, r0
 801378a:	460b      	mov	r3, r1
 801378c:	4650      	mov	r0, sl
 801378e:	4659      	mov	r1, fp
 8013790:	f7ec fcfa 	bl	8000188 <__aeabi_dsub>
 8013794:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013798:	f7ec feae 	bl	80004f8 <__aeabi_dmul>
 801379c:	4622      	mov	r2, r4
 801379e:	4606      	mov	r6, r0
 80137a0:	460f      	mov	r7, r1
 80137a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80137a6:	462b      	mov	r3, r5
 80137a8:	f7ec fea6 	bl	80004f8 <__aeabi_dmul>
 80137ac:	4602      	mov	r2, r0
 80137ae:	460b      	mov	r3, r1
 80137b0:	4630      	mov	r0, r6
 80137b2:	4639      	mov	r1, r7
 80137b4:	f7ec fcea 	bl	800018c <__adddf3>
 80137b8:	2400      	movs	r4, #0
 80137ba:	4606      	mov	r6, r0
 80137bc:	460f      	mov	r7, r1
 80137be:	4602      	mov	r2, r0
 80137c0:	460b      	mov	r3, r1
 80137c2:	4640      	mov	r0, r8
 80137c4:	4649      	mov	r1, r9
 80137c6:	f7ec fce1 	bl	800018c <__adddf3>
 80137ca:	a33d      	add	r3, pc, #244	@ (adr r3, 80138c0 <__ieee754_pow+0x748>)
 80137cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137d0:	4620      	mov	r0, r4
 80137d2:	460d      	mov	r5, r1
 80137d4:	f7ec fe90 	bl	80004f8 <__aeabi_dmul>
 80137d8:	4642      	mov	r2, r8
 80137da:	464b      	mov	r3, r9
 80137dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80137e0:	4620      	mov	r0, r4
 80137e2:	4629      	mov	r1, r5
 80137e4:	f7ec fcd0 	bl	8000188 <__aeabi_dsub>
 80137e8:	4602      	mov	r2, r0
 80137ea:	460b      	mov	r3, r1
 80137ec:	4630      	mov	r0, r6
 80137ee:	4639      	mov	r1, r7
 80137f0:	f7ec fcca 	bl	8000188 <__aeabi_dsub>
 80137f4:	a334      	add	r3, pc, #208	@ (adr r3, 80138c8 <__ieee754_pow+0x750>)
 80137f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137fa:	f7ec fe7d 	bl	80004f8 <__aeabi_dmul>
 80137fe:	a334      	add	r3, pc, #208	@ (adr r3, 80138d0 <__ieee754_pow+0x758>)
 8013800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013804:	4606      	mov	r6, r0
 8013806:	460f      	mov	r7, r1
 8013808:	4620      	mov	r0, r4
 801380a:	4629      	mov	r1, r5
 801380c:	f7ec fe74 	bl	80004f8 <__aeabi_dmul>
 8013810:	4602      	mov	r2, r0
 8013812:	460b      	mov	r3, r1
 8013814:	4630      	mov	r0, r6
 8013816:	4639      	mov	r1, r7
 8013818:	f7ec fcb8 	bl	800018c <__adddf3>
 801381c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801381e:	4b35      	ldr	r3, [pc, #212]	@ (80138f4 <__ieee754_pow+0x77c>)
 8013820:	2400      	movs	r4, #0
 8013822:	4413      	add	r3, r2
 8013824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013828:	f7ec fcb0 	bl	800018c <__adddf3>
 801382c:	4682      	mov	sl, r0
 801382e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013830:	468b      	mov	fp, r1
 8013832:	f7ec fdf7 	bl	8000424 <__aeabi_i2d>
 8013836:	4606      	mov	r6, r0
 8013838:	460f      	mov	r7, r1
 801383a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801383c:	4b2e      	ldr	r3, [pc, #184]	@ (80138f8 <__ieee754_pow+0x780>)
 801383e:	4413      	add	r3, r2
 8013840:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013844:	4652      	mov	r2, sl
 8013846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801384a:	465b      	mov	r3, fp
 801384c:	f7ec fc9e 	bl	800018c <__adddf3>
 8013850:	4642      	mov	r2, r8
 8013852:	464b      	mov	r3, r9
 8013854:	f7ec fc9a 	bl	800018c <__adddf3>
 8013858:	4632      	mov	r2, r6
 801385a:	463b      	mov	r3, r7
 801385c:	f7ec fc96 	bl	800018c <__adddf3>
 8013860:	4632      	mov	r2, r6
 8013862:	463b      	mov	r3, r7
 8013864:	4620      	mov	r0, r4
 8013866:	460d      	mov	r5, r1
 8013868:	f7ec fc8e 	bl	8000188 <__aeabi_dsub>
 801386c:	4642      	mov	r2, r8
 801386e:	464b      	mov	r3, r9
 8013870:	f7ec fc8a 	bl	8000188 <__aeabi_dsub>
 8013874:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013878:	f7ec fc86 	bl	8000188 <__aeabi_dsub>
 801387c:	4602      	mov	r2, r0
 801387e:	460b      	mov	r3, r1
 8013880:	4650      	mov	r0, sl
 8013882:	4659      	mov	r1, fp
 8013884:	e618      	b.n	80134b8 <__ieee754_pow+0x340>
 8013886:	2400      	movs	r4, #0
 8013888:	e68a      	b.n	80135a0 <__ieee754_pow+0x428>
 801388a:	2601      	movs	r6, #1
 801388c:	e6a0      	b.n	80135d0 <__ieee754_pow+0x458>
 801388e:	bf00      	nop
 8013890:	4a454eef 	.word	0x4a454eef
 8013894:	3fca7e28 	.word	0x3fca7e28
 8013898:	93c9db65 	.word	0x93c9db65
 801389c:	3fcd864a 	.word	0x3fcd864a
 80138a0:	a91d4101 	.word	0xa91d4101
 80138a4:	3fd17460 	.word	0x3fd17460
 80138a8:	518f264d 	.word	0x518f264d
 80138ac:	3fd55555 	.word	0x3fd55555
 80138b0:	db6fabff 	.word	0xdb6fabff
 80138b4:	3fdb6db6 	.word	0x3fdb6db6
 80138b8:	33333303 	.word	0x33333303
 80138bc:	3fe33333 	.word	0x3fe33333
 80138c0:	e0000000 	.word	0xe0000000
 80138c4:	3feec709 	.word	0x3feec709
 80138c8:	dc3a03fd 	.word	0xdc3a03fd
 80138cc:	3feec709 	.word	0x3feec709
 80138d0:	145b01f5 	.word	0x145b01f5
 80138d4:	be3e2fe0 	.word	0xbe3e2fe0
 80138d8:	7ff00000 	.word	0x7ff00000
 80138dc:	43400000 	.word	0x43400000
 80138e0:	0003988e 	.word	0x0003988e
 80138e4:	000bb679 	.word	0x000bb679
 80138e8:	080140d8 	.word	0x080140d8
 80138ec:	3ff00000 	.word	0x3ff00000
 80138f0:	40080000 	.word	0x40080000
 80138f4:	080140b8 	.word	0x080140b8
 80138f8:	080140c8 	.word	0x080140c8
 80138fc:	a39a      	add	r3, pc, #616	@ (adr r3, 8013b68 <__ieee754_pow+0x9f0>)
 80138fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013902:	4630      	mov	r0, r6
 8013904:	4639      	mov	r1, r7
 8013906:	f7ec fc41 	bl	800018c <__adddf3>
 801390a:	4642      	mov	r2, r8
 801390c:	e9cd 0100 	strd	r0, r1, [sp]
 8013910:	464b      	mov	r3, r9
 8013912:	4620      	mov	r0, r4
 8013914:	4629      	mov	r1, r5
 8013916:	f7ec fc37 	bl	8000188 <__aeabi_dsub>
 801391a:	4602      	mov	r2, r0
 801391c:	460b      	mov	r3, r1
 801391e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013922:	f7ed f879 	bl	8000a18 <__aeabi_dcmpgt>
 8013926:	2800      	cmp	r0, #0
 8013928:	f47f ae09 	bne.w	801353e <__ieee754_pow+0x3c6>
 801392c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013930:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8013934:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8013938:	fa43 fa0a 	asr.w	sl, r3, sl
 801393c:	44da      	add	sl, fp
 801393e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013942:	489b      	ldr	r0, [pc, #620]	@ (8013bb0 <__ieee754_pow+0xa38>)
 8013944:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013948:	4108      	asrs	r0, r1
 801394a:	ea00 030a 	and.w	r3, r0, sl
 801394e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013952:	f1c1 0114 	rsb	r1, r1, #20
 8013956:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801395a:	4640      	mov	r0, r8
 801395c:	fa4a fa01 	asr.w	sl, sl, r1
 8013960:	f1bb 0f00 	cmp.w	fp, #0
 8013964:	4649      	mov	r1, r9
 8013966:	f04f 0200 	mov.w	r2, #0
 801396a:	bfb8      	it	lt
 801396c:	f1ca 0a00 	rsblt	sl, sl, #0
 8013970:	f7ec fc0a 	bl	8000188 <__aeabi_dsub>
 8013974:	4680      	mov	r8, r0
 8013976:	4689      	mov	r9, r1
 8013978:	2400      	movs	r4, #0
 801397a:	4632      	mov	r2, r6
 801397c:	463b      	mov	r3, r7
 801397e:	4640      	mov	r0, r8
 8013980:	4649      	mov	r1, r9
 8013982:	f7ec fc03 	bl	800018c <__adddf3>
 8013986:	a37a      	add	r3, pc, #488	@ (adr r3, 8013b70 <__ieee754_pow+0x9f8>)
 8013988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801398c:	4620      	mov	r0, r4
 801398e:	460d      	mov	r5, r1
 8013990:	f7ec fdb2 	bl	80004f8 <__aeabi_dmul>
 8013994:	4642      	mov	r2, r8
 8013996:	464b      	mov	r3, r9
 8013998:	e9cd 0100 	strd	r0, r1, [sp]
 801399c:	4620      	mov	r0, r4
 801399e:	4629      	mov	r1, r5
 80139a0:	f7ec fbf2 	bl	8000188 <__aeabi_dsub>
 80139a4:	4602      	mov	r2, r0
 80139a6:	460b      	mov	r3, r1
 80139a8:	4630      	mov	r0, r6
 80139aa:	4639      	mov	r1, r7
 80139ac:	f7ec fbec 	bl	8000188 <__aeabi_dsub>
 80139b0:	a371      	add	r3, pc, #452	@ (adr r3, 8013b78 <__ieee754_pow+0xa00>)
 80139b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b6:	f7ec fd9f 	bl	80004f8 <__aeabi_dmul>
 80139ba:	a371      	add	r3, pc, #452	@ (adr r3, 8013b80 <__ieee754_pow+0xa08>)
 80139bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c0:	4680      	mov	r8, r0
 80139c2:	4689      	mov	r9, r1
 80139c4:	4620      	mov	r0, r4
 80139c6:	4629      	mov	r1, r5
 80139c8:	f7ec fd96 	bl	80004f8 <__aeabi_dmul>
 80139cc:	4602      	mov	r2, r0
 80139ce:	460b      	mov	r3, r1
 80139d0:	4640      	mov	r0, r8
 80139d2:	4649      	mov	r1, r9
 80139d4:	f7ec fbda 	bl	800018c <__adddf3>
 80139d8:	4604      	mov	r4, r0
 80139da:	460d      	mov	r5, r1
 80139dc:	4602      	mov	r2, r0
 80139de:	460b      	mov	r3, r1
 80139e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80139e4:	f7ec fbd2 	bl	800018c <__adddf3>
 80139e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80139ec:	4680      	mov	r8, r0
 80139ee:	4689      	mov	r9, r1
 80139f0:	f7ec fbca 	bl	8000188 <__aeabi_dsub>
 80139f4:	4602      	mov	r2, r0
 80139f6:	460b      	mov	r3, r1
 80139f8:	4620      	mov	r0, r4
 80139fa:	4629      	mov	r1, r5
 80139fc:	f7ec fbc4 	bl	8000188 <__aeabi_dsub>
 8013a00:	4642      	mov	r2, r8
 8013a02:	4606      	mov	r6, r0
 8013a04:	460f      	mov	r7, r1
 8013a06:	464b      	mov	r3, r9
 8013a08:	4640      	mov	r0, r8
 8013a0a:	4649      	mov	r1, r9
 8013a0c:	f7ec fd74 	bl	80004f8 <__aeabi_dmul>
 8013a10:	a35d      	add	r3, pc, #372	@ (adr r3, 8013b88 <__ieee754_pow+0xa10>)
 8013a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a16:	4604      	mov	r4, r0
 8013a18:	460d      	mov	r5, r1
 8013a1a:	f7ec fd6d 	bl	80004f8 <__aeabi_dmul>
 8013a1e:	a35c      	add	r3, pc, #368	@ (adr r3, 8013b90 <__ieee754_pow+0xa18>)
 8013a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a24:	f7ec fbb0 	bl	8000188 <__aeabi_dsub>
 8013a28:	4622      	mov	r2, r4
 8013a2a:	462b      	mov	r3, r5
 8013a2c:	f7ec fd64 	bl	80004f8 <__aeabi_dmul>
 8013a30:	a359      	add	r3, pc, #356	@ (adr r3, 8013b98 <__ieee754_pow+0xa20>)
 8013a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a36:	f7ec fba9 	bl	800018c <__adddf3>
 8013a3a:	4622      	mov	r2, r4
 8013a3c:	462b      	mov	r3, r5
 8013a3e:	f7ec fd5b 	bl	80004f8 <__aeabi_dmul>
 8013a42:	a357      	add	r3, pc, #348	@ (adr r3, 8013ba0 <__ieee754_pow+0xa28>)
 8013a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a48:	f7ec fb9e 	bl	8000188 <__aeabi_dsub>
 8013a4c:	4622      	mov	r2, r4
 8013a4e:	462b      	mov	r3, r5
 8013a50:	f7ec fd52 	bl	80004f8 <__aeabi_dmul>
 8013a54:	a354      	add	r3, pc, #336	@ (adr r3, 8013ba8 <__ieee754_pow+0xa30>)
 8013a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a5a:	f7ec fb97 	bl	800018c <__adddf3>
 8013a5e:	4622      	mov	r2, r4
 8013a60:	462b      	mov	r3, r5
 8013a62:	f7ec fd49 	bl	80004f8 <__aeabi_dmul>
 8013a66:	4602      	mov	r2, r0
 8013a68:	460b      	mov	r3, r1
 8013a6a:	4640      	mov	r0, r8
 8013a6c:	4649      	mov	r1, r9
 8013a6e:	f7ec fb8b 	bl	8000188 <__aeabi_dsub>
 8013a72:	4604      	mov	r4, r0
 8013a74:	460d      	mov	r5, r1
 8013a76:	4602      	mov	r2, r0
 8013a78:	460b      	mov	r3, r1
 8013a7a:	4640      	mov	r0, r8
 8013a7c:	4649      	mov	r1, r9
 8013a7e:	f7ec fd3b 	bl	80004f8 <__aeabi_dmul>
 8013a82:	2200      	movs	r2, #0
 8013a84:	e9cd 0100 	strd	r0, r1, [sp]
 8013a88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	4629      	mov	r1, r5
 8013a90:	f7ec fb7a 	bl	8000188 <__aeabi_dsub>
 8013a94:	4602      	mov	r2, r0
 8013a96:	460b      	mov	r3, r1
 8013a98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a9c:	f7ec fe56 	bl	800074c <__aeabi_ddiv>
 8013aa0:	4632      	mov	r2, r6
 8013aa2:	4604      	mov	r4, r0
 8013aa4:	460d      	mov	r5, r1
 8013aa6:	463b      	mov	r3, r7
 8013aa8:	4640      	mov	r0, r8
 8013aaa:	4649      	mov	r1, r9
 8013aac:	f7ec fd24 	bl	80004f8 <__aeabi_dmul>
 8013ab0:	4632      	mov	r2, r6
 8013ab2:	463b      	mov	r3, r7
 8013ab4:	f7ec fb6a 	bl	800018c <__adddf3>
 8013ab8:	4602      	mov	r2, r0
 8013aba:	460b      	mov	r3, r1
 8013abc:	4620      	mov	r0, r4
 8013abe:	4629      	mov	r1, r5
 8013ac0:	f7ec fb62 	bl	8000188 <__aeabi_dsub>
 8013ac4:	4642      	mov	r2, r8
 8013ac6:	464b      	mov	r3, r9
 8013ac8:	f7ec fb5e 	bl	8000188 <__aeabi_dsub>
 8013acc:	4602      	mov	r2, r0
 8013ace:	460b      	mov	r3, r1
 8013ad0:	2000      	movs	r0, #0
 8013ad2:	4938      	ldr	r1, [pc, #224]	@ (8013bb4 <__ieee754_pow+0xa3c>)
 8013ad4:	f7ec fb58 	bl	8000188 <__aeabi_dsub>
 8013ad8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8013adc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8013ae0:	da2e      	bge.n	8013b40 <__ieee754_pow+0x9c8>
 8013ae2:	4652      	mov	r2, sl
 8013ae4:	f000 f874 	bl	8013bd0 <scalbn>
 8013ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013aec:	f7ff bbed 	b.w	80132ca <__ieee754_pow+0x152>
 8013af0:	4c31      	ldr	r4, [pc, #196]	@ (8013bb8 <__ieee754_pow+0xa40>)
 8013af2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013af6:	42a3      	cmp	r3, r4
 8013af8:	d91a      	bls.n	8013b30 <__ieee754_pow+0x9b8>
 8013afa:	4b30      	ldr	r3, [pc, #192]	@ (8013bbc <__ieee754_pow+0xa44>)
 8013afc:	440b      	add	r3, r1
 8013afe:	4303      	orrs	r3, r0
 8013b00:	d009      	beq.n	8013b16 <__ieee754_pow+0x99e>
 8013b02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b06:	2200      	movs	r2, #0
 8013b08:	2300      	movs	r3, #0
 8013b0a:	f7ec ff67 	bl	80009dc <__aeabi_dcmplt>
 8013b0e:	3800      	subs	r0, #0
 8013b10:	bf18      	it	ne
 8013b12:	2001      	movne	r0, #1
 8013b14:	e444      	b.n	80133a0 <__ieee754_pow+0x228>
 8013b16:	4642      	mov	r2, r8
 8013b18:	464b      	mov	r3, r9
 8013b1a:	f7ec fb35 	bl	8000188 <__aeabi_dsub>
 8013b1e:	4632      	mov	r2, r6
 8013b20:	463b      	mov	r3, r7
 8013b22:	f7ec ff6f 	bl	8000a04 <__aeabi_dcmpge>
 8013b26:	2800      	cmp	r0, #0
 8013b28:	d1eb      	bne.n	8013b02 <__ieee754_pow+0x98a>
 8013b2a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8013bc0 <__ieee754_pow+0xa48>
 8013b2e:	e6fd      	b.n	801392c <__ieee754_pow+0x7b4>
 8013b30:	469a      	mov	sl, r3
 8013b32:	4b24      	ldr	r3, [pc, #144]	@ (8013bc4 <__ieee754_pow+0xa4c>)
 8013b34:	459a      	cmp	sl, r3
 8013b36:	f63f aef9 	bhi.w	801392c <__ieee754_pow+0x7b4>
 8013b3a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013b3e:	e71b      	b.n	8013978 <__ieee754_pow+0x800>
 8013b40:	4621      	mov	r1, r4
 8013b42:	e7d1      	b.n	8013ae8 <__ieee754_pow+0x970>
 8013b44:	2000      	movs	r0, #0
 8013b46:	491b      	ldr	r1, [pc, #108]	@ (8013bb4 <__ieee754_pow+0xa3c>)
 8013b48:	f7ff bb34 	b.w	80131b4 <__ieee754_pow+0x3c>
 8013b4c:	2000      	movs	r0, #0
 8013b4e:	2100      	movs	r1, #0
 8013b50:	f7ff bb30 	b.w	80131b4 <__ieee754_pow+0x3c>
 8013b54:	4650      	mov	r0, sl
 8013b56:	4659      	mov	r1, fp
 8013b58:	f7ff bb2c 	b.w	80131b4 <__ieee754_pow+0x3c>
 8013b5c:	460c      	mov	r4, r1
 8013b5e:	f7ff bb79 	b.w	8013254 <__ieee754_pow+0xdc>
 8013b62:	2400      	movs	r4, #0
 8013b64:	f7ff bb64 	b.w	8013230 <__ieee754_pow+0xb8>
 8013b68:	652b82fe 	.word	0x652b82fe
 8013b6c:	3c971547 	.word	0x3c971547
 8013b70:	00000000 	.word	0x00000000
 8013b74:	3fe62e43 	.word	0x3fe62e43
 8013b78:	fefa39ef 	.word	0xfefa39ef
 8013b7c:	3fe62e42 	.word	0x3fe62e42
 8013b80:	0ca86c39 	.word	0x0ca86c39
 8013b84:	be205c61 	.word	0xbe205c61
 8013b88:	72bea4d0 	.word	0x72bea4d0
 8013b8c:	3e663769 	.word	0x3e663769
 8013b90:	c5d26bf1 	.word	0xc5d26bf1
 8013b94:	3ebbbd41 	.word	0x3ebbbd41
 8013b98:	af25de2c 	.word	0xaf25de2c
 8013b9c:	3f11566a 	.word	0x3f11566a
 8013ba0:	16bebd93 	.word	0x16bebd93
 8013ba4:	3f66c16c 	.word	0x3f66c16c
 8013ba8:	5555553e 	.word	0x5555553e
 8013bac:	3fc55555 	.word	0x3fc55555
 8013bb0:	fff00000 	.word	0xfff00000
 8013bb4:	3ff00000 	.word	0x3ff00000
 8013bb8:	4090cbff 	.word	0x4090cbff
 8013bbc:	3f6f3400 	.word	0x3f6f3400
 8013bc0:	4090cc00 	.word	0x4090cc00
 8013bc4:	3fe00000 	.word	0x3fe00000

08013bc8 <fabs>:
 8013bc8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013bcc:	4619      	mov	r1, r3
 8013bce:	4770      	bx	lr

08013bd0 <scalbn>:
 8013bd0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8013bd4:	4616      	mov	r6, r2
 8013bd6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013bda:	4683      	mov	fp, r0
 8013bdc:	468c      	mov	ip, r1
 8013bde:	460b      	mov	r3, r1
 8013be0:	b982      	cbnz	r2, 8013c04 <scalbn+0x34>
 8013be2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013be6:	4303      	orrs	r3, r0
 8013be8:	d039      	beq.n	8013c5e <scalbn+0x8e>
 8013bea:	4b2f      	ldr	r3, [pc, #188]	@ (8013ca8 <scalbn+0xd8>)
 8013bec:	2200      	movs	r2, #0
 8013bee:	f7ec fc83 	bl	80004f8 <__aeabi_dmul>
 8013bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8013cac <scalbn+0xdc>)
 8013bf4:	4683      	mov	fp, r0
 8013bf6:	429e      	cmp	r6, r3
 8013bf8:	468c      	mov	ip, r1
 8013bfa:	da0d      	bge.n	8013c18 <scalbn+0x48>
 8013bfc:	a326      	add	r3, pc, #152	@ (adr r3, 8013c98 <scalbn+0xc8>)
 8013bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c02:	e01b      	b.n	8013c3c <scalbn+0x6c>
 8013c04:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8013c08:	42ba      	cmp	r2, r7
 8013c0a:	d109      	bne.n	8013c20 <scalbn+0x50>
 8013c0c:	4602      	mov	r2, r0
 8013c0e:	f7ec fabd 	bl	800018c <__adddf3>
 8013c12:	4683      	mov	fp, r0
 8013c14:	468c      	mov	ip, r1
 8013c16:	e022      	b.n	8013c5e <scalbn+0x8e>
 8013c18:	460b      	mov	r3, r1
 8013c1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013c1e:	3a36      	subs	r2, #54	@ 0x36
 8013c20:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013c24:	428e      	cmp	r6, r1
 8013c26:	dd0c      	ble.n	8013c42 <scalbn+0x72>
 8013c28:	a31d      	add	r3, pc, #116	@ (adr r3, 8013ca0 <scalbn+0xd0>)
 8013c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c2e:	461c      	mov	r4, r3
 8013c30:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8013c34:	f361 74df 	bfi	r4, r1, #31, #1
 8013c38:	4621      	mov	r1, r4
 8013c3a:	481d      	ldr	r0, [pc, #116]	@ (8013cb0 <scalbn+0xe0>)
 8013c3c:	f7ec fc5c 	bl	80004f8 <__aeabi_dmul>
 8013c40:	e7e7      	b.n	8013c12 <scalbn+0x42>
 8013c42:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013c46:	4432      	add	r2, r6
 8013c48:	428a      	cmp	r2, r1
 8013c4a:	dced      	bgt.n	8013c28 <scalbn+0x58>
 8013c4c:	2a00      	cmp	r2, #0
 8013c4e:	dd0a      	ble.n	8013c66 <scalbn+0x96>
 8013c50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013c54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013c58:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013c5c:	46ac      	mov	ip, r5
 8013c5e:	4658      	mov	r0, fp
 8013c60:	4661      	mov	r1, ip
 8013c62:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8013c66:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013c6a:	da09      	bge.n	8013c80 <scalbn+0xb0>
 8013c6c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8013c70:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8013c74:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8013c78:	480e      	ldr	r0, [pc, #56]	@ (8013cb4 <scalbn+0xe4>)
 8013c7a:	f041 011f 	orr.w	r1, r1, #31
 8013c7e:	e7bd      	b.n	8013bfc <scalbn+0x2c>
 8013c80:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013c84:	3236      	adds	r2, #54	@ 0x36
 8013c86:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013c8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013c8e:	4658      	mov	r0, fp
 8013c90:	4629      	mov	r1, r5
 8013c92:	2200      	movs	r2, #0
 8013c94:	4b08      	ldr	r3, [pc, #32]	@ (8013cb8 <scalbn+0xe8>)
 8013c96:	e7d1      	b.n	8013c3c <scalbn+0x6c>
 8013c98:	c2f8f359 	.word	0xc2f8f359
 8013c9c:	01a56e1f 	.word	0x01a56e1f
 8013ca0:	8800759c 	.word	0x8800759c
 8013ca4:	7e37e43c 	.word	0x7e37e43c
 8013ca8:	43500000 	.word	0x43500000
 8013cac:	ffff3cb0 	.word	0xffff3cb0
 8013cb0:	8800759c 	.word	0x8800759c
 8013cb4:	c2f8f359 	.word	0xc2f8f359
 8013cb8:	3c900000 	.word	0x3c900000

08013cbc <with_errno>:
 8013cbc:	b570      	push	{r4, r5, r6, lr}
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	460d      	mov	r5, r1
 8013cc2:	4616      	mov	r6, r2
 8013cc4:	f7fe fa8c 	bl	80121e0 <__errno>
 8013cc8:	4629      	mov	r1, r5
 8013cca:	6006      	str	r6, [r0, #0]
 8013ccc:	4620      	mov	r0, r4
 8013cce:	bd70      	pop	{r4, r5, r6, pc}

08013cd0 <xflow>:
 8013cd0:	b513      	push	{r0, r1, r4, lr}
 8013cd2:	4604      	mov	r4, r0
 8013cd4:	4619      	mov	r1, r3
 8013cd6:	4610      	mov	r0, r2
 8013cd8:	b10c      	cbz	r4, 8013cde <xflow+0xe>
 8013cda:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013cde:	e9cd 2300 	strd	r2, r3, [sp]
 8013ce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ce6:	f7ec fc07 	bl	80004f8 <__aeabi_dmul>
 8013cea:	2222      	movs	r2, #34	@ 0x22
 8013cec:	b002      	add	sp, #8
 8013cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cf2:	f7ff bfe3 	b.w	8013cbc <with_errno>

08013cf6 <__math_uflow>:
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8013cfc:	f7ff bfe8 	b.w	8013cd0 <xflow>

08013d00 <__math_oflow>:
 8013d00:	2200      	movs	r2, #0
 8013d02:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8013d06:	f7ff bfe3 	b.w	8013cd0 <xflow>
	...

08013d0c <__ieee754_sqrt>:
 8013d0c:	4a67      	ldr	r2, [pc, #412]	@ (8013eac <__ieee754_sqrt+0x1a0>)
 8013d0e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d12:	438a      	bics	r2, r1
 8013d14:	4606      	mov	r6, r0
 8013d16:	460f      	mov	r7, r1
 8013d18:	460b      	mov	r3, r1
 8013d1a:	4604      	mov	r4, r0
 8013d1c:	d10e      	bne.n	8013d3c <__ieee754_sqrt+0x30>
 8013d1e:	4602      	mov	r2, r0
 8013d20:	f7ec fbea 	bl	80004f8 <__aeabi_dmul>
 8013d24:	4602      	mov	r2, r0
 8013d26:	460b      	mov	r3, r1
 8013d28:	4630      	mov	r0, r6
 8013d2a:	4639      	mov	r1, r7
 8013d2c:	f7ec fa2e 	bl	800018c <__adddf3>
 8013d30:	4606      	mov	r6, r0
 8013d32:	460f      	mov	r7, r1
 8013d34:	4630      	mov	r0, r6
 8013d36:	4639      	mov	r1, r7
 8013d38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d3c:	2900      	cmp	r1, #0
 8013d3e:	dc0c      	bgt.n	8013d5a <__ieee754_sqrt+0x4e>
 8013d40:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8013d44:	4302      	orrs	r2, r0
 8013d46:	d0f5      	beq.n	8013d34 <__ieee754_sqrt+0x28>
 8013d48:	b189      	cbz	r1, 8013d6e <__ieee754_sqrt+0x62>
 8013d4a:	4602      	mov	r2, r0
 8013d4c:	f7ec fa1c 	bl	8000188 <__aeabi_dsub>
 8013d50:	4602      	mov	r2, r0
 8013d52:	460b      	mov	r3, r1
 8013d54:	f7ec fcfa 	bl	800074c <__aeabi_ddiv>
 8013d58:	e7ea      	b.n	8013d30 <__ieee754_sqrt+0x24>
 8013d5a:	150a      	asrs	r2, r1, #20
 8013d5c:	d115      	bne.n	8013d8a <__ieee754_sqrt+0x7e>
 8013d5e:	2100      	movs	r1, #0
 8013d60:	e009      	b.n	8013d76 <__ieee754_sqrt+0x6a>
 8013d62:	0ae3      	lsrs	r3, r4, #11
 8013d64:	3a15      	subs	r2, #21
 8013d66:	0564      	lsls	r4, r4, #21
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d0fa      	beq.n	8013d62 <__ieee754_sqrt+0x56>
 8013d6c:	e7f7      	b.n	8013d5e <__ieee754_sqrt+0x52>
 8013d6e:	460a      	mov	r2, r1
 8013d70:	e7fa      	b.n	8013d68 <__ieee754_sqrt+0x5c>
 8013d72:	005b      	lsls	r3, r3, #1
 8013d74:	3101      	adds	r1, #1
 8013d76:	02d8      	lsls	r0, r3, #11
 8013d78:	d5fb      	bpl.n	8013d72 <__ieee754_sqrt+0x66>
 8013d7a:	1e48      	subs	r0, r1, #1
 8013d7c:	1a12      	subs	r2, r2, r0
 8013d7e:	f1c1 0020 	rsb	r0, r1, #32
 8013d82:	fa24 f000 	lsr.w	r0, r4, r0
 8013d86:	4303      	orrs	r3, r0
 8013d88:	408c      	lsls	r4, r1
 8013d8a:	2600      	movs	r6, #0
 8013d8c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8013d90:	2116      	movs	r1, #22
 8013d92:	07d2      	lsls	r2, r2, #31
 8013d94:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8013d98:	4632      	mov	r2, r6
 8013d9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013da2:	bf5c      	itt	pl
 8013da4:	005b      	lslpl	r3, r3, #1
 8013da6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8013daa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013dae:	bf58      	it	pl
 8013db0:	0064      	lslpl	r4, r4, #1
 8013db2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8013db6:	107f      	asrs	r7, r7, #1
 8013db8:	0064      	lsls	r4, r4, #1
 8013dba:	1815      	adds	r5, r2, r0
 8013dbc:	429d      	cmp	r5, r3
 8013dbe:	bfde      	ittt	le
 8013dc0:	182a      	addle	r2, r5, r0
 8013dc2:	1b5b      	suble	r3, r3, r5
 8013dc4:	1836      	addle	r6, r6, r0
 8013dc6:	0fe5      	lsrs	r5, r4, #31
 8013dc8:	3901      	subs	r1, #1
 8013dca:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8013dce:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8013dd2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8013dd6:	d1f0      	bne.n	8013dba <__ieee754_sqrt+0xae>
 8013dd8:	460d      	mov	r5, r1
 8013dda:	f04f 0a20 	mov.w	sl, #32
 8013dde:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8013de2:	429a      	cmp	r2, r3
 8013de4:	eb01 0c00 	add.w	ip, r1, r0
 8013de8:	db02      	blt.n	8013df0 <__ieee754_sqrt+0xe4>
 8013dea:	d113      	bne.n	8013e14 <__ieee754_sqrt+0x108>
 8013dec:	45a4      	cmp	ip, r4
 8013dee:	d811      	bhi.n	8013e14 <__ieee754_sqrt+0x108>
 8013df0:	f1bc 0f00 	cmp.w	ip, #0
 8013df4:	eb0c 0100 	add.w	r1, ip, r0
 8013df8:	da42      	bge.n	8013e80 <__ieee754_sqrt+0x174>
 8013dfa:	2900      	cmp	r1, #0
 8013dfc:	db40      	blt.n	8013e80 <__ieee754_sqrt+0x174>
 8013dfe:	f102 0e01 	add.w	lr, r2, #1
 8013e02:	1a9b      	subs	r3, r3, r2
 8013e04:	4672      	mov	r2, lr
 8013e06:	45a4      	cmp	ip, r4
 8013e08:	bf88      	it	hi
 8013e0a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013e0e:	eba4 040c 	sub.w	r4, r4, ip
 8013e12:	4405      	add	r5, r0
 8013e14:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8013e18:	f1ba 0a01 	subs.w	sl, sl, #1
 8013e1c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8013e20:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8013e24:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8013e28:	d1db      	bne.n	8013de2 <__ieee754_sqrt+0xd6>
 8013e2a:	431c      	orrs	r4, r3
 8013e2c:	d01a      	beq.n	8013e64 <__ieee754_sqrt+0x158>
 8013e2e:	4c20      	ldr	r4, [pc, #128]	@ (8013eb0 <__ieee754_sqrt+0x1a4>)
 8013e30:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8013eb4 <__ieee754_sqrt+0x1a8>
 8013e34:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013e38:	e9db 2300 	ldrd	r2, r3, [fp]
 8013e3c:	f7ec f9a4 	bl	8000188 <__aeabi_dsub>
 8013e40:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013e44:	4602      	mov	r2, r0
 8013e46:	460b      	mov	r3, r1
 8013e48:	4640      	mov	r0, r8
 8013e4a:	4649      	mov	r1, r9
 8013e4c:	f7ec fdd0 	bl	80009f0 <__aeabi_dcmple>
 8013e50:	b140      	cbz	r0, 8013e64 <__ieee754_sqrt+0x158>
 8013e52:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013e56:	e9db 2300 	ldrd	r2, r3, [fp]
 8013e5a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8013e5e:	d111      	bne.n	8013e84 <__ieee754_sqrt+0x178>
 8013e60:	4655      	mov	r5, sl
 8013e62:	3601      	adds	r6, #1
 8013e64:	1072      	asrs	r2, r6, #1
 8013e66:	086b      	lsrs	r3, r5, #1
 8013e68:	07f1      	lsls	r1, r6, #31
 8013e6a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013e6e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8013e72:	bf48      	it	mi
 8013e74:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8013e78:	4618      	mov	r0, r3
 8013e7a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8013e7e:	e757      	b.n	8013d30 <__ieee754_sqrt+0x24>
 8013e80:	4696      	mov	lr, r2
 8013e82:	e7be      	b.n	8013e02 <__ieee754_sqrt+0xf6>
 8013e84:	f7ec f982 	bl	800018c <__adddf3>
 8013e88:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013e8c:	4602      	mov	r2, r0
 8013e8e:	460b      	mov	r3, r1
 8013e90:	4640      	mov	r0, r8
 8013e92:	4649      	mov	r1, r9
 8013e94:	f7ec fda2 	bl	80009dc <__aeabi_dcmplt>
 8013e98:	b120      	cbz	r0, 8013ea4 <__ieee754_sqrt+0x198>
 8013e9a:	1ca8      	adds	r0, r5, #2
 8013e9c:	bf08      	it	eq
 8013e9e:	3601      	addeq	r6, #1
 8013ea0:	3502      	adds	r5, #2
 8013ea2:	e7df      	b.n	8013e64 <__ieee754_sqrt+0x158>
 8013ea4:	1c6b      	adds	r3, r5, #1
 8013ea6:	f023 0501 	bic.w	r5, r3, #1
 8013eaa:	e7db      	b.n	8013e64 <__ieee754_sqrt+0x158>
 8013eac:	7ff00000 	.word	0x7ff00000
 8013eb0:	20000200 	.word	0x20000200
 8013eb4:	200001f8 	.word	0x200001f8

08013eb8 <_init>:
 8013eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eba:	bf00      	nop
 8013ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ebe:	bc08      	pop	{r3}
 8013ec0:	469e      	mov	lr, r3
 8013ec2:	4770      	bx	lr

08013ec4 <_fini>:
 8013ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ec6:	bf00      	nop
 8013ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013eca:	bc08      	pop	{r3}
 8013ecc:	469e      	mov	lr, r3
 8013ece:	4770      	bx	lr
