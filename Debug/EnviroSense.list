
EnviroSense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ef8  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002034  08002034  00003034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002058  08002058  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002058  08002058  00003058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002060  08002060  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002060  08002060  00003060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002064  08002064  00003064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002068  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002074  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002074  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009519  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ff  00000000  00000000  0000d54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0000eb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f7  00000000  00000000  0000f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015508  00000000  00000000  0000fb1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b574  00000000  00000000  00025027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000866a7  00000000  00000000  0003059b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6c42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024e8  00000000  00000000  000b6c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000b9170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800201c 	.word	0x0800201c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	0800201c 	.word	0x0800201c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b968 	b.w	8000464 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	fb07 1114 	mls	r1, r7, r4, r1
 80001e6:	fa1f f68c 	uxth.w	r6, ip
 80001ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000202:	f080 8110 	bcs.w	8000426 <__udivmoddi4+0x27a>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810d 	bls.w	8000426 <__udivmoddi4+0x27a>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	fb00 f606 	mul.w	r6, r0, r6
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000232:	f080 80fa 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f7 	bls.w	800042a <__udivmoddi4+0x27e>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	1b9b      	subs	r3, r3, r6
 8000244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80ee 	bcc.w	8000454 <__udivmoddi4+0x2a8>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 808f 	bne.w	80003ae <__udivmoddi4+0x202>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	2101      	movs	r1, #1
 8000296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	fb07 f006 	mul.w	r0, r7, r6
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cb 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	fb00 f707 	mul.w	r7, r0, r7
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80ae 	bhi.w	800044e <__udivmoddi4+0x2a2>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0720 	rsb	r7, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 fc07 	lsr.w	ip, r2, r7
 8000306:	ea4c 0c03 	orr.w	ip, ip, r3
 800030a:	fa24 f607 	lsr.w	r6, r4, r7
 800030e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000312:	fbb6 f8f9 	udiv	r8, r6, r9
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	fb09 6618 	mls	r6, r9, r8, r6
 800031e:	fa20 f307 	lsr.w	r3, r0, r7
 8000322:	408c      	lsls	r4, r1
 8000324:	fa00 fa01 	lsl.w	sl, r0, r1
 8000328:	fb08 f00e 	mul.w	r0, r8, lr
 800032c:	431c      	orrs	r4, r3
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000334:	4298      	cmp	r0, r3
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	eb1c 0303 	adds.w	r3, ip, r3
 8000340:	f108 36ff 	add.w	r6, r8, #4294967295
 8000344:	f080 8081 	bcs.w	800044a <__udivmoddi4+0x29e>
 8000348:	4298      	cmp	r0, r3
 800034a:	d97e      	bls.n	800044a <__udivmoddi4+0x29e>
 800034c:	f1a8 0802 	sub.w	r8, r8, #2
 8000350:	4463      	add	r3, ip
 8000352:	1a1e      	subs	r6, r3, r0
 8000354:	fbb6 f3f9 	udiv	r3, r6, r9
 8000358:	fb09 6613 	mls	r6, r9, r3, r6
 800035c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000360:	b2a4      	uxth	r4, r4
 8000362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000366:	45a6      	cmp	lr, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1d0>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000372:	d266      	bcs.n	8000442 <__udivmoddi4+0x296>
 8000374:	45a6      	cmp	lr, r4
 8000376:	d964      	bls.n	8000442 <__udivmoddi4+0x296>
 8000378:	3b02      	subs	r3, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	fba0 8302 	umull	r8, r3, r0, r2
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	429c      	cmp	r4, r3
 800038a:	46c6      	mov	lr, r8
 800038c:	461e      	mov	r6, r3
 800038e:	d350      	bcc.n	8000432 <__udivmoddi4+0x286>
 8000390:	d04d      	beq.n	800042e <__udivmoddi4+0x282>
 8000392:	b155      	cbz	r5, 80003aa <__udivmoddi4+0x1fe>
 8000394:	ebba 030e 	subs.w	r3, sl, lr
 8000398:	eb64 0406 	sbc.w	r4, r4, r6
 800039c:	fa04 f707 	lsl.w	r7, r4, r7
 80003a0:	40cb      	lsrs	r3, r1
 80003a2:	431f      	orrs	r7, r3
 80003a4:	40cc      	lsrs	r4, r1
 80003a6:	e9c5 7400 	strd	r7, r4, [r5]
 80003aa:	2100      	movs	r1, #0
 80003ac:	e751      	b.n	8000252 <__udivmoddi4+0xa6>
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	f1c2 0320 	rsb	r3, r2, #32
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa20 f303 	lsr.w	r3, r0, r3
 80003c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003c8:	fb08 1110 	mls	r1, r8, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	431c      	orrs	r4, r3
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x248>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29a>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29a>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fa:	fb08 3311 	mls	r3, r8, r1, r3
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x272>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x292>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x292>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e73b      	b.n	800029e <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f2      	b.n	8000210 <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e708      	b.n	8000240 <__udivmoddi4+0x94>
 800042e:	45c2      	cmp	sl, r8
 8000430:	d2af      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 8000432:	ebb8 0e02 	subs.w	lr, r8, r2
 8000436:	eb63 060c 	sbc.w	r6, r3, ip
 800043a:	3801      	subs	r0, #1
 800043c:	e7a9      	b.n	8000392 <__udivmoddi4+0x1e6>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x272>
 8000442:	4603      	mov	r3, r0
 8000444:	e79a      	b.n	800037c <__udivmoddi4+0x1d0>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x248>
 800044a:	46b0      	mov	r8, r6
 800044c:	e781      	b.n	8000352 <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74f      	b.n	80002f4 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e711      	b.n	8000280 <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e732      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046c:	f000 fa41 	bl	80008f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000470:	f000 f808 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000474:	f000 f8ac 	bl	80005d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000478:	f000 f880 	bl	800057c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800047c:	f000 f850 	bl	8000520 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <main+0x18>

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b092      	sub	sp, #72	@ 0x48
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	2234      	movs	r2, #52	@ 0x34
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f001 fd96 	bl	8001fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	463b      	mov	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a6:	4b1d      	ldr	r3, [pc, #116]	@ (800051c <SystemClock_Config+0x98>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80004ae:	4a1b      	ldr	r2, [pc, #108]	@ (800051c <SystemClock_Config+0x98>)
 80004b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004b4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b6:	2302      	movs	r3, #2
 80004b8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ba:	2301      	movs	r3, #1
 80004bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004be:	2310      	movs	r3, #16
 80004c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c2:	2302      	movs	r3, #2
 80004c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c6:	2300      	movs	r3, #0
 80004c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004ca:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80004ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80004d0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80004d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 fe48 	bl	8001170 <HAL_RCC_OscConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004e6:	f000 f8ef 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ea:	230f      	movs	r3, #15
 80004ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ee:	2303      	movs	r3, #3
 80004f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004fe:	463b      	mov	r3, r7
 8000500:	2101      	movs	r1, #1
 8000502:	4618      	mov	r0, r3
 8000504:	f001 f964 	bl	80017d0 <HAL_RCC_ClockConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800050e:	f000 f8db 	bl	80006c8 <Error_Handler>
  }
}
 8000512:	bf00      	nop
 8000514:	3748      	adds	r7, #72	@ 0x48
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40007000 	.word	0x40007000

08000520 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <MX_I2C1_Init+0x50>)
 8000526:	4a13      	ldr	r2, [pc, #76]	@ (8000574 <MX_I2C1_Init+0x54>)
 8000528:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800052a:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <MX_I2C1_Init+0x50>)
 800052c:	4a12      	ldr	r2, [pc, #72]	@ (8000578 <MX_I2C1_Init+0x58>)
 800052e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000530:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <MX_I2C1_Init+0x50>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000536:	4b0e      	ldr	r3, [pc, #56]	@ (8000570 <MX_I2C1_Init+0x50>)
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800053c:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <MX_I2C1_Init+0x50>)
 800053e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000542:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000544:	4b0a      	ldr	r3, [pc, #40]	@ (8000570 <MX_I2C1_Init+0x50>)
 8000546:	2200      	movs	r2, #0
 8000548:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <MX_I2C1_Init+0x50>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000550:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <MX_I2C1_Init+0x50>)
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <MX_I2C1_Init+0x50>)
 8000558:	2200      	movs	r2, #0
 800055a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800055c:	4804      	ldr	r0, [pc, #16]	@ (8000570 <MX_I2C1_Init+0x50>)
 800055e:	f000 fcc3 	bl	8000ee8 <HAL_I2C_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000568:	f000 f8ae 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000028 	.word	0x20000028
 8000574:	40005400 	.word	0x40005400
 8000578:	00061a80 	.word	0x00061a80

0800057c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000580:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <MX_USART2_UART_Init+0x4c>)
 8000582:	4a12      	ldr	r2, [pc, #72]	@ (80005cc <MX_USART2_UART_Init+0x50>)
 8000584:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000586:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <MX_USART2_UART_Init+0x4c>)
 8000588:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800058c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800058e:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <MX_USART2_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000594:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <MX_USART2_UART_Init+0x4c>)
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800059a:	4b0b      	ldr	r3, [pc, #44]	@ (80005c8 <MX_USART2_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005a0:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <MX_USART2_UART_Init+0x4c>)
 80005a2:	220c      	movs	r2, #12
 80005a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a6:	4b08      	ldr	r3, [pc, #32]	@ (80005c8 <MX_USART2_UART_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <MX_USART2_UART_Init+0x4c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005b2:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_USART2_UART_Init+0x4c>)
 80005b4:	f001 fbd2 	bl	8001d5c <HAL_UART_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005be:	f000 f883 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	2000007c 	.word	0x2000007c
 80005cc:	40004400 	.word	0x40004400

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	4b34      	ldr	r3, [pc, #208]	@ (80006b8 <MX_GPIO_Init+0xe8>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	4a33      	ldr	r2, [pc, #204]	@ (80006b8 <MX_GPIO_Init+0xe8>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	61d3      	str	r3, [r2, #28]
 80005f2:	4b31      	ldr	r3, [pc, #196]	@ (80006b8 <MX_GPIO_Init+0xe8>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	4b2e      	ldr	r3, [pc, #184]	@ (80006b8 <MX_GPIO_Init+0xe8>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	4a2d      	ldr	r2, [pc, #180]	@ (80006b8 <MX_GPIO_Init+0xe8>)
 8000604:	f043 0320 	orr.w	r3, r3, #32
 8000608:	61d3      	str	r3, [r2, #28]
 800060a:	4b2b      	ldr	r3, [pc, #172]	@ (80006b8 <MX_GPIO_Init+0xe8>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	f003 0320 	and.w	r3, r3, #32
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b28      	ldr	r3, [pc, #160]	@ (80006b8 <MX_GPIO_Init+0xe8>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a27      	ldr	r2, [pc, #156]	@ (80006b8 <MX_GPIO_Init+0xe8>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b25      	ldr	r3, [pc, #148]	@ (80006b8 <MX_GPIO_Init+0xe8>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <MX_GPIO_Init+0xe8>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <MX_GPIO_Init+0xe8>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <MX_GPIO_Init+0xe8>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2120      	movs	r1, #32
 800064a:	481c      	ldr	r0, [pc, #112]	@ (80006bc <MX_GPIO_Init+0xec>)
 800064c:	f000 fc34 	bl	8000eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2101      	movs	r1, #1
 8000654:	481a      	ldr	r0, [pc, #104]	@ (80006c0 <MX_GPIO_Init+0xf0>)
 8000656:	f000 fc2f 	bl	8000eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000660:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4814      	ldr	r0, [pc, #80]	@ (80006c4 <MX_GPIO_Init+0xf4>)
 8000672:	f000 fa91 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000676:	2320      	movs	r3, #32
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	480b      	ldr	r0, [pc, #44]	@ (80006bc <MX_GPIO_Init+0xec>)
 800068e:	f000 fa83 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000692:	2301      	movs	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800069a:	2301      	movs	r3, #1
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_GPIO_Init+0xf0>)
 80006aa:	f000 fa75 	bl	8000b98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	@ 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40020400 	.word	0x40020400
 80006c4:	40020800 	.word	0x40020800

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <Error_Handler+0x8>

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <HAL_MspInit+0x5c>)
 80006dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006de:	4a14      	ldr	r2, [pc, #80]	@ (8000730 <HAL_MspInit+0x5c>)
 80006e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006e4:	6253      	str	r3, [r2, #36]	@ 0x24
 80006e6:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <HAL_MspInit+0x5c>)
 80006e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <HAL_MspInit+0x5c>)
 80006f4:	6a1b      	ldr	r3, [r3, #32]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000730 <HAL_MspInit+0x5c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6213      	str	r3, [r2, #32]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <HAL_MspInit+0x5c>)
 8000700:	6a1b      	ldr	r3, [r3, #32]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <HAL_MspInit+0x5c>)
 800070c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800070e:	4a08      	ldr	r2, [pc, #32]	@ (8000730 <HAL_MspInit+0x5c>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000714:	6253      	str	r3, [r2, #36]	@ 0x24
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <HAL_MspInit+0x5c>)
 8000718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800071a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000722:	2007      	movs	r0, #7
 8000724:	f000 fa04 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800

08000734 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a17      	ldr	r2, [pc, #92]	@ (80007b0 <HAL_I2C_MspInit+0x7c>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d128      	bne.n	80007a8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <HAL_I2C_MspInit+0x80>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a16      	ldr	r2, [pc, #88]	@ (80007b4 <HAL_I2C_MspInit+0x80>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <HAL_I2C_MspInit+0x80>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800076e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000774:	2312      	movs	r3, #18
 8000776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000780:	2304      	movs	r3, #4
 8000782:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <HAL_I2C_MspInit+0x84>)
 800078c:	f000 fa04 	bl	8000b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <HAL_I2C_MspInit+0x80>)
 8000792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000794:	4a07      	ldr	r2, [pc, #28]	@ (80007b4 <HAL_I2C_MspInit+0x80>)
 8000796:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800079a:	6253      	str	r3, [r2, #36]	@ 0x24
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <HAL_I2C_MspInit+0x80>)
 800079e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	@ 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40005400 	.word	0x40005400
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020400 	.word	0x40020400

080007bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <HAL_UART_MspInit+0x7c>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d127      	bne.n	800082e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007de:	4b17      	ldr	r3, [pc, #92]	@ (800083c <HAL_UART_MspInit+0x80>)
 80007e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007e2:	4a16      	ldr	r2, [pc, #88]	@ (800083c <HAL_UART_MspInit+0x80>)
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e8:	6253      	str	r3, [r2, #36]	@ 0x24
 80007ea:	4b14      	ldr	r3, [pc, #80]	@ (800083c <HAL_UART_MspInit+0x80>)
 80007ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <HAL_UART_MspInit+0x80>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a10      	ldr	r2, [pc, #64]	@ (800083c <HAL_UART_MspInit+0x80>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <HAL_UART_MspInit+0x80>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080e:	230c      	movs	r3, #12
 8000810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081e:	2307      	movs	r3, #7
 8000820:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	@ (8000840 <HAL_UART_MspInit+0x84>)
 800082a:	f000 f9b5 	bl	8000b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	@ 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40004400 	.word	0x40004400
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <NMI_Handler+0x4>

0800084c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <MemManage_Handler+0x4>

0800085c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <UsageFault_Handler+0x4>

0800086c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f000 f880 	bl	8000998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a8:	f7ff fff8 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ac:	480b      	ldr	r0, [pc, #44]	@ (80008dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008ae:	490c      	ldr	r1, [pc, #48]	@ (80008e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008b0:	4a0c      	ldr	r2, [pc, #48]	@ (80008e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a09      	ldr	r2, [pc, #36]	@ (80008e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008c4:	4c09      	ldr	r4, [pc, #36]	@ (80008ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d2:	f001 fb7f 	bl	8001fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d6:	f7ff fdc7 	bl	8000468 <main>
  bx lr
 80008da:	4770      	bx	lr
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e4:	08002068 	.word	0x08002068
  ldr r2, =_sbss
 80008e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008ec:	200000c8 	.word	0x200000c8

080008f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_IRQHandler>

080008f2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 f917 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000902:	2000      	movs	r0, #0
 8000904:	f000 f80e 	bl	8000924 <HAL_InitTick>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	71fb      	strb	r3, [r7, #7]
 8000912:	e001      	b.n	8000918 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000914:	f7ff fede 	bl	80006d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000918:	79fb      	ldrb	r3, [r7, #7]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800092c:	2300      	movs	r3, #0
 800092e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000930:	4b16      	ldr	r3, [pc, #88]	@ (800098c <HAL_InitTick+0x68>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d022      	beq.n	800097e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000938:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <HAL_InitTick+0x6c>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <HAL_InitTick+0x68>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000944:	fbb1 f3f3 	udiv	r3, r1, r3
 8000948:	fbb2 f3f3 	udiv	r3, r2, r3
 800094c:	4618      	mov	r0, r3
 800094e:	f000 f916 	bl	8000b7e <HAL_SYSTICK_Config>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10f      	bne.n	8000978 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b0f      	cmp	r3, #15
 800095c:	d809      	bhi.n	8000972 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095e:	2200      	movs	r2, #0
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	f04f 30ff 	mov.w	r0, #4294967295
 8000966:	f000 f8ee 	bl	8000b46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800096a:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <HAL_InitTick+0x70>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	e007      	b.n	8000982 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	e004      	b.n	8000982 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	73fb      	strb	r3, [r7, #15]
 800097c:	e001      	b.n	8000982 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000982:	7bfb      	ldrb	r3, [r7, #15]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000008 	.word	0x20000008
 8000990:	20000000 	.word	0x20000000
 8000994:	20000004 	.word	0x20000004

08000998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800099c:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <HAL_IncTick+0x1c>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <HAL_IncTick+0x20>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a03      	ldr	r2, [pc, #12]	@ (80009b4 <HAL_IncTick+0x1c>)
 80009a8:	6013      	str	r3, [r2, #0]
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	200000c4 	.word	0x200000c4
 80009b8:	20000008 	.word	0x20000008

080009bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b02      	ldr	r3, [pc, #8]	@ (80009cc <HAL_GetTick+0x10>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	200000c4 	.word	0x200000c4

080009d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a02:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	60d3      	str	r3, [r2, #12]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <__NVIC_GetPriorityGrouping+0x18>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	f003 0307 	and.w	r3, r3, #7
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0a      	blt.n	8000a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	490c      	ldr	r1, [pc, #48]	@ (8000a80 <__NVIC_SetPriority+0x4c>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	440b      	add	r3, r1
 8000a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a5c:	e00a      	b.n	8000a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4908      	ldr	r1, [pc, #32]	@ (8000a84 <__NVIC_SetPriority+0x50>)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	0112      	lsls	r2, r2, #4
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	761a      	strb	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	@ 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf28      	it	cs
 8000aa6:	2304      	movcs	r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3304      	adds	r3, #4
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d902      	bls.n	8000ab8 <NVIC_EncodePriority+0x30>
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	e000      	b.n	8000aba <NVIC_EncodePriority+0x32>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	4313      	orrs	r3, r2
         );
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	@ 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000afc:	d301      	bcc.n	8000b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00f      	b.n	8000b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <SysTick_Config+0x40>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f7ff ff90 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <SysTick_Config+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <SysTick_Config+0x40>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff49 	bl	80009d0 <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff5e 	bl	8000a18 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff90 	bl	8000a88 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5f 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffb0 	bl	8000aec <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bae:	e160      	b.n	8000e72 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 8152 	beq.w	8000e6c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d005      	beq.n	8000be0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d130      	bne.n	8000c42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2203      	movs	r2, #3
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000c16:	2201      	movs	r2, #1
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	f003 0201 	and.w	r2, r3, #1
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0303 	and.w	r3, r3, #3
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d017      	beq.n	8000c7e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0303 	and.w	r3, r3, #3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d123      	bne.n	8000cd2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	08da      	lsrs	r2, r3, #3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3208      	adds	r2, #8
 8000c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c96:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	220f      	movs	r2, #15
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	691a      	ldr	r2, [r3, #16]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	08da      	lsrs	r2, r3, #3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3208      	adds	r2, #8
 8000ccc:	6939      	ldr	r1, [r7, #16]
 8000cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	2203      	movs	r2, #3
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0203 	and.w	r2, r3, #3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 80ac 	beq.w	8000e6c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d14:	4b5e      	ldr	r3, [pc, #376]	@ (8000e90 <HAL_GPIO_Init+0x2f8>)
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	4a5d      	ldr	r2, [pc, #372]	@ (8000e90 <HAL_GPIO_Init+0x2f8>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	6213      	str	r3, [r2, #32]
 8000d20:	4b5b      	ldr	r3, [pc, #364]	@ (8000e90 <HAL_GPIO_Init+0x2f8>)
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000d2c:	4a59      	ldr	r2, [pc, #356]	@ (8000e94 <HAL_GPIO_Init+0x2fc>)
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	089b      	lsrs	r3, r3, #2
 8000d32:	3302      	adds	r3, #2
 8000d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	220f      	movs	r2, #15
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a51      	ldr	r2, [pc, #324]	@ (8000e98 <HAL_GPIO_Init+0x300>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d025      	beq.n	8000da4 <HAL_GPIO_Init+0x20c>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a50      	ldr	r2, [pc, #320]	@ (8000e9c <HAL_GPIO_Init+0x304>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d01f      	beq.n	8000da0 <HAL_GPIO_Init+0x208>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a4f      	ldr	r2, [pc, #316]	@ (8000ea0 <HAL_GPIO_Init+0x308>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d019      	beq.n	8000d9c <HAL_GPIO_Init+0x204>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a4e      	ldr	r2, [pc, #312]	@ (8000ea4 <HAL_GPIO_Init+0x30c>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d013      	beq.n	8000d98 <HAL_GPIO_Init+0x200>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a4d      	ldr	r2, [pc, #308]	@ (8000ea8 <HAL_GPIO_Init+0x310>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d00d      	beq.n	8000d94 <HAL_GPIO_Init+0x1fc>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a4c      	ldr	r2, [pc, #304]	@ (8000eac <HAL_GPIO_Init+0x314>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d007      	beq.n	8000d90 <HAL_GPIO_Init+0x1f8>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a4b      	ldr	r2, [pc, #300]	@ (8000eb0 <HAL_GPIO_Init+0x318>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d101      	bne.n	8000d8c <HAL_GPIO_Init+0x1f4>
 8000d88:	2306      	movs	r3, #6
 8000d8a:	e00c      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	e00a      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000d90:	2305      	movs	r3, #5
 8000d92:	e008      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000d94:	2304      	movs	r3, #4
 8000d96:	e006      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e004      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e002      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000da4:	2300      	movs	r3, #0
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	f002 0203 	and.w	r2, r2, #3
 8000dac:	0092      	lsls	r2, r2, #2
 8000dae:	4093      	lsls	r3, r2
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000db6:	4937      	ldr	r1, [pc, #220]	@ (8000e94 <HAL_GPIO_Init+0x2fc>)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000de8:	4a32      	ldr	r2, [pc, #200]	@ (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dee:	4b31      	ldr	r3, [pc, #196]	@ (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e12:	4a28      	ldr	r2, [pc, #160]	@ (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e18:	4b26      	ldr	r3, [pc, #152]	@ (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e66:	4a13      	ldr	r2, [pc, #76]	@ (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f47f ae97 	bne.w	8000bb0 <HAL_GPIO_Init+0x18>
  }
}
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
 8000e86:	371c      	adds	r7, #28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40010000 	.word	0x40010000
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40021400 	.word	0x40021400
 8000eb0:	40021800 	.word	0x40021800
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec8:	787b      	ldrb	r3, [r7, #1]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ece:	887a      	ldrh	r2, [r7, #2]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000ed4:	e003      	b.n	8000ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	041a      	lsls	r2, r3, #16
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	619a      	str	r2, [r3, #24]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e12b      	b.n	8001152 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d106      	bne.n	8000f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fc10 	bl	8000734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2224      	movs	r2, #36	@ 0x24
 8000f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f4c:	f000 fe7e 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8000f50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	4a81      	ldr	r2, [pc, #516]	@ (800115c <HAL_I2C_Init+0x274>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d807      	bhi.n	8000f6c <HAL_I2C_Init+0x84>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4a80      	ldr	r2, [pc, #512]	@ (8001160 <HAL_I2C_Init+0x278>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	bf94      	ite	ls
 8000f64:	2301      	movls	r3, #1
 8000f66:	2300      	movhi	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	e006      	b.n	8000f7a <HAL_I2C_Init+0x92>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4a7d      	ldr	r2, [pc, #500]	@ (8001164 <HAL_I2C_Init+0x27c>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	bf94      	ite	ls
 8000f74:	2301      	movls	r3, #1
 8000f76:	2300      	movhi	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e0e7      	b.n	8001152 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4a78      	ldr	r2, [pc, #480]	@ (8001168 <HAL_I2C_Init+0x280>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	0c9b      	lsrs	r3, r3, #18
 8000f8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	4a6a      	ldr	r2, [pc, #424]	@ (800115c <HAL_I2C_Init+0x274>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d802      	bhi.n	8000fbc <HAL_I2C_Init+0xd4>
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	e009      	b.n	8000fd0 <HAL_I2C_Init+0xe8>
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	4a69      	ldr	r2, [pc, #420]	@ (800116c <HAL_I2C_Init+0x284>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	099b      	lsrs	r3, r3, #6
 8000fce:	3301      	adds	r3, #1
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	430b      	orrs	r3, r1
 8000fd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000fe2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	495c      	ldr	r1, [pc, #368]	@ (800115c <HAL_I2C_Init+0x274>)
 8000fec:	428b      	cmp	r3, r1
 8000fee:	d819      	bhi.n	8001024 <HAL_I2C_Init+0x13c>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	1e59      	subs	r1, r3, #1
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ffe:	1c59      	adds	r1, r3, #1
 8001000:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001004:	400b      	ands	r3, r1
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00a      	beq.n	8001020 <HAL_I2C_Init+0x138>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1e59      	subs	r1, r3, #1
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fbb1 f3f3 	udiv	r3, r1, r3
 8001018:	3301      	adds	r3, #1
 800101a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800101e:	e051      	b.n	80010c4 <HAL_I2C_Init+0x1dc>
 8001020:	2304      	movs	r3, #4
 8001022:	e04f      	b.n	80010c4 <HAL_I2C_Init+0x1dc>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d111      	bne.n	8001050 <HAL_I2C_Init+0x168>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	1e58      	subs	r0, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6859      	ldr	r1, [r3, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	440b      	add	r3, r1
 800103a:	fbb0 f3f3 	udiv	r3, r0, r3
 800103e:	3301      	adds	r3, #1
 8001040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001044:	2b00      	cmp	r3, #0
 8001046:	bf0c      	ite	eq
 8001048:	2301      	moveq	r3, #1
 800104a:	2300      	movne	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	e012      	b.n	8001076 <HAL_I2C_Init+0x18e>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	1e58      	subs	r0, r3, #1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6859      	ldr	r1, [r3, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	0099      	lsls	r1, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	fbb0 f3f3 	udiv	r3, r0, r3
 8001066:	3301      	adds	r3, #1
 8001068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800106c:	2b00      	cmp	r3, #0
 800106e:	bf0c      	ite	eq
 8001070:	2301      	moveq	r3, #1
 8001072:	2300      	movne	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_I2C_Init+0x196>
 800107a:	2301      	movs	r3, #1
 800107c:	e022      	b.n	80010c4 <HAL_I2C_Init+0x1dc>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10e      	bne.n	80010a4 <HAL_I2C_Init+0x1bc>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	1e58      	subs	r0, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6859      	ldr	r1, [r3, #4]
 800108e:	460b      	mov	r3, r1
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	440b      	add	r3, r1
 8001094:	fbb0 f3f3 	udiv	r3, r0, r3
 8001098:	3301      	adds	r3, #1
 800109a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800109e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010a2:	e00f      	b.n	80010c4 <HAL_I2C_Init+0x1dc>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	1e58      	subs	r0, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6859      	ldr	r1, [r3, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	0099      	lsls	r1, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ba:	3301      	adds	r3, #1
 80010bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	6809      	ldr	r1, [r1, #0]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69da      	ldr	r2, [r3, #28]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	431a      	orrs	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80010f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6911      	ldr	r1, [r2, #16]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68d2      	ldr	r2, [r2, #12]
 80010fe:	4311      	orrs	r1, r2
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	430b      	orrs	r3, r1
 8001106:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2220      	movs	r2, #32
 800113e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	000186a0 	.word	0x000186a0
 8001160:	001e847f 	.word	0x001e847f
 8001164:	003d08ff 	.word	0x003d08ff
 8001168:	431bde83 	.word	0x431bde83
 800116c:	10624dd3 	.word	0x10624dd3

08001170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e31d      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001182:	4b94      	ldr	r3, [pc, #592]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800118c:	4b91      	ldr	r3, [pc, #580]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001194:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d07b      	beq.n	800129a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d006      	beq.n	80011b6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2b0c      	cmp	r3, #12
 80011ac:	d10f      	bne.n	80011ce <HAL_RCC_OscConfig+0x5e>
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011b4:	d10b      	bne.n	80011ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b6:	4b87      	ldr	r3, [pc, #540]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d06a      	beq.n	8001298 <HAL_RCC_OscConfig+0x128>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d166      	bne.n	8001298 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e2f7      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d106      	bne.n	80011e4 <HAL_RCC_OscConfig+0x74>
 80011d6:	4b7f      	ldr	r3, [pc, #508]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a7e      	ldr	r2, [pc, #504]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e02d      	b.n	8001240 <HAL_RCC_OscConfig+0xd0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10c      	bne.n	8001206 <HAL_RCC_OscConfig+0x96>
 80011ec:	4b79      	ldr	r3, [pc, #484]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a78      	ldr	r2, [pc, #480]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80011f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b76      	ldr	r3, [pc, #472]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a75      	ldr	r2, [pc, #468]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80011fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	e01c      	b.n	8001240 <HAL_RCC_OscConfig+0xd0>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b05      	cmp	r3, #5
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0xb8>
 800120e:	4b71      	ldr	r3, [pc, #452]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a70      	ldr	r2, [pc, #448]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 8001214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b6e      	ldr	r3, [pc, #440]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a6d      	ldr	r2, [pc, #436]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 8001220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e00b      	b.n	8001240 <HAL_RCC_OscConfig+0xd0>
 8001228:	4b6a      	ldr	r3, [pc, #424]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a69      	ldr	r2, [pc, #420]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 800122e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b67      	ldr	r3, [pc, #412]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a66      	ldr	r2, [pc, #408]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 800123a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d013      	beq.n	8001270 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fbb8 	bl	80009bc <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001250:	f7ff fbb4 	bl	80009bc <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	@ 0x64
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e2ad      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001262:	4b5c      	ldr	r3, [pc, #368]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0xe0>
 800126e:	e014      	b.n	800129a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fba4 	bl	80009bc <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fba0 	bl	80009bc <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	@ 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e299      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800128a:	4b52      	ldr	r3, [pc, #328]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0x108>
 8001296:	e000      	b.n	800129a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d05a      	beq.n	800135c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d005      	beq.n	80012b8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	2b0c      	cmp	r3, #12
 80012b0:	d119      	bne.n	80012e6 <HAL_RCC_OscConfig+0x176>
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d116      	bne.n	80012e6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b8:	4b46      	ldr	r3, [pc, #280]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_OscConfig+0x160>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e276      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d0:	4b40      	ldr	r3, [pc, #256]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	493d      	ldr	r1, [pc, #244]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e4:	e03a      	b.n	800135c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d020      	beq.n	8001330 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ee:	4b3a      	ldr	r3, [pc, #232]	@ (80013d8 <HAL_RCC_OscConfig+0x268>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fb62 	bl	80009bc <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fc:	f7ff fb5e 	bl	80009bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e257      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800130e:	4b31      	ldr	r3, [pc, #196]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131a:	4b2e      	ldr	r3, [pc, #184]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	492a      	ldr	r1, [pc, #168]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]
 800132e:	e015      	b.n	800135c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <HAL_RCC_OscConfig+0x268>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fb41 	bl	80009bc <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133e:	f7ff fb3d 	bl	80009bc <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e236      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001350:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80b8 	beq.w	80014da <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d170      	bne.n	8001452 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001370:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <HAL_RCC_OscConfig+0x218>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e21a      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1a      	ldr	r2, [r3, #32]
 800138c:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001394:	429a      	cmp	r2, r3
 8001396:	d921      	bls.n	80013dc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fc7d 	bl	8001c9c <RCC_SetFlashLatencyFromMSIRange>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e208      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4906      	ldr	r1, [pc, #24]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013be:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	061b      	lsls	r3, r3, #24
 80013cc:	4901      	ldr	r1, [pc, #4]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
 80013d2:	e020      	b.n	8001416 <HAL_RCC_OscConfig+0x2a6>
 80013d4:	40023800 	.word	0x40023800
 80013d8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013dc:	4b99      	ldr	r3, [pc, #612]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4996      	ldr	r1, [pc, #600]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ee:	4b95      	ldr	r3, [pc, #596]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	061b      	lsls	r3, r3, #24
 80013fc:	4991      	ldr	r1, [pc, #580]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fc48 	bl	8001c9c <RCC_SetFlashLatencyFromMSIRange>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1d3      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	0b5b      	lsrs	r3, r3, #13
 800141c:	3301      	adds	r3, #1
 800141e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001426:	4a87      	ldr	r2, [pc, #540]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 8001428:	6892      	ldr	r2, [r2, #8]
 800142a:	0912      	lsrs	r2, r2, #4
 800142c:	f002 020f 	and.w	r2, r2, #15
 8001430:	4985      	ldr	r1, [pc, #532]	@ (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001432:	5c8a      	ldrb	r2, [r1, r2]
 8001434:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001436:	4a85      	ldr	r2, [pc, #532]	@ (800164c <HAL_RCC_OscConfig+0x4dc>)
 8001438:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800143a:	4b85      	ldr	r3, [pc, #532]	@ (8001650 <HAL_RCC_OscConfig+0x4e0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fa70 	bl	8000924 <HAL_InitTick>
 8001444:	4603      	mov	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d045      	beq.n	80014da <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	e1b5      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d029      	beq.n	80014ae <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800145a:	4b7e      	ldr	r3, [pc, #504]	@ (8001654 <HAL_RCC_OscConfig+0x4e4>)
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff faac 	bl	80009bc <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001468:	f7ff faa8 	bl	80009bc <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1a1      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800147a:	4b72      	ldr	r3, [pc, #456]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001486:	4b6f      	ldr	r3, [pc, #444]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	496c      	ldr	r1, [pc, #432]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001498:	4b6a      	ldr	r3, [pc, #424]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	061b      	lsls	r3, r3, #24
 80014a6:	4967      	ldr	r1, [pc, #412]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
 80014ac:	e015      	b.n	80014da <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014ae:	4b69      	ldr	r3, [pc, #420]	@ (8001654 <HAL_RCC_OscConfig+0x4e4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fa82 	bl	80009bc <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014bc:	f7ff fa7e 	bl	80009bc <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e177      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d030      	beq.n	8001548 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d016      	beq.n	800151c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001658 <HAL_RCC_OscConfig+0x4e8>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f4:	f7ff fa62 	bl	80009bc <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fa5e 	bl	80009bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e157      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800150e:	4b4d      	ldr	r3, [pc, #308]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 8001510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x38c>
 800151a:	e015      	b.n	8001548 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151c:	4b4e      	ldr	r3, [pc, #312]	@ (8001658 <HAL_RCC_OscConfig+0x4e8>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff fa4b 	bl	80009bc <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff fa47 	bl	80009bc <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e140      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800153c:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 800153e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f0      	bne.n	800152a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80b5 	beq.w	80016c0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155a:	4b3a      	ldr	r3, [pc, #232]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10d      	bne.n	8001582 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b37      	ldr	r3, [pc, #220]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 8001568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156a:	4a36      	ldr	r2, [pc, #216]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001570:	6253      	str	r3, [r2, #36]	@ 0x24
 8001572:	4b34      	ldr	r3, [pc, #208]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157e:	2301      	movs	r3, #1
 8001580:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001582:	4b36      	ldr	r3, [pc, #216]	@ (800165c <HAL_RCC_OscConfig+0x4ec>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158a:	2b00      	cmp	r3, #0
 800158c:	d118      	bne.n	80015c0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158e:	4b33      	ldr	r3, [pc, #204]	@ (800165c <HAL_RCC_OscConfig+0x4ec>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a32      	ldr	r2, [pc, #200]	@ (800165c <HAL_RCC_OscConfig+0x4ec>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159a:	f7ff fa0f 	bl	80009bc <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a2:	f7ff fa0b 	bl	80009bc <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b64      	cmp	r3, #100	@ 0x64
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e104      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	4b29      	ldr	r3, [pc, #164]	@ (800165c <HAL_RCC_OscConfig+0x4ec>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x466>
 80015c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 80015ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 80015ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80015d4:	e02d      	b.n	8001632 <HAL_RCC_OscConfig+0x4c2>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x488>
 80015de:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 80015e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015e2:	4a18      	ldr	r2, [pc, #96]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 80015e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015e8:	6353      	str	r3, [r2, #52]	@ 0x34
 80015ea:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 80015ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ee:	4a15      	ldr	r2, [pc, #84]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 80015f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80015f4:	6353      	str	r3, [r2, #52]	@ 0x34
 80015f6:	e01c      	b.n	8001632 <HAL_RCC_OscConfig+0x4c2>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d10c      	bne.n	800161a <HAL_RCC_OscConfig+0x4aa>
 8001600:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 8001602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001604:	4a0f      	ldr	r2, [pc, #60]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 8001606:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800160a:	6353      	str	r3, [r2, #52]	@ 0x34
 800160c:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 800160e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001610:	4a0c      	ldr	r2, [pc, #48]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 8001612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001616:	6353      	str	r3, [r2, #52]	@ 0x34
 8001618:	e00b      	b.n	8001632 <HAL_RCC_OscConfig+0x4c2>
 800161a:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 800161c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800161e:	4a09      	ldr	r2, [pc, #36]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 8001620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001624:	6353      	str	r3, [r2, #52]	@ 0x34
 8001626:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 8001628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800162a:	4a06      	ldr	r2, [pc, #24]	@ (8001644 <HAL_RCC_OscConfig+0x4d4>)
 800162c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001630:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d024      	beq.n	8001684 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff f9bf 	bl	80009bc <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001640:	e019      	b.n	8001676 <HAL_RCC_OscConfig+0x506>
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	08002040 	.word	0x08002040
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004
 8001654:	42470020 	.word	0x42470020
 8001658:	42470680 	.word	0x42470680
 800165c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001660:	f7ff f9ac 	bl	80009bc <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e0a3      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001676:	4b54      	ldr	r3, [pc, #336]	@ (80017c8 <HAL_RCC_OscConfig+0x658>)
 8001678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800167a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0ee      	beq.n	8001660 <HAL_RCC_OscConfig+0x4f0>
 8001682:	e014      	b.n	80016ae <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff f99a 	bl	80009bc <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff f996 	bl	80009bc <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e08d      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016a2:	4b49      	ldr	r3, [pc, #292]	@ (80017c8 <HAL_RCC_OscConfig+0x658>)
 80016a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ee      	bne.n	800168c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016ae:	7ffb      	ldrb	r3, [r7, #31]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b4:	4b44      	ldr	r3, [pc, #272]	@ (80017c8 <HAL_RCC_OscConfig+0x658>)
 80016b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b8:	4a43      	ldr	r2, [pc, #268]	@ (80017c8 <HAL_RCC_OscConfig+0x658>)
 80016ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016be:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d079      	beq.n	80017bc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	d056      	beq.n	800177c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d13b      	bne.n	800174e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d6:	4b3d      	ldr	r3, [pc, #244]	@ (80017cc <HAL_RCC_OscConfig+0x65c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff f96e 	bl	80009bc <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e4:	f7ff f96a 	bl	80009bc <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e063      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016f6:	4b34      	ldr	r3, [pc, #208]	@ (80017c8 <HAL_RCC_OscConfig+0x658>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001702:	4b31      	ldr	r3, [pc, #196]	@ (80017c8 <HAL_RCC_OscConfig+0x658>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001712:	4319      	orrs	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001718:	430b      	orrs	r3, r1
 800171a:	492b      	ldr	r1, [pc, #172]	@ (80017c8 <HAL_RCC_OscConfig+0x658>)
 800171c:	4313      	orrs	r3, r2
 800171e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001720:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <HAL_RCC_OscConfig+0x65c>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff f949 	bl	80009bc <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff f945 	bl	80009bc <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e03e      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001740:	4b21      	ldr	r3, [pc, #132]	@ (80017c8 <HAL_RCC_OscConfig+0x658>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x5be>
 800174c:	e036      	b.n	80017bc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <HAL_RCC_OscConfig+0x65c>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff f932 	bl	80009bc <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff f92e 	bl	80009bc <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e027      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800176e:	4b16      	ldr	r3, [pc, #88]	@ (80017c8 <HAL_RCC_OscConfig+0x658>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x5ec>
 800177a:	e01f      	b.n	80017bc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e01a      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <HAL_RCC_OscConfig+0x658>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001798:	429a      	cmp	r2, r3
 800179a:	d10d      	bne.n	80017b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	42470060 	.word	0x42470060

080017d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e11a      	b.n	8001a1a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e4:	4b8f      	ldr	r3, [pc, #572]	@ (8001a24 <HAL_RCC_ClockConfig+0x254>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d919      	bls.n	8001826 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_ClockConfig+0x34>
 80017f8:	4b8a      	ldr	r3, [pc, #552]	@ (8001a24 <HAL_RCC_ClockConfig+0x254>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a89      	ldr	r2, [pc, #548]	@ (8001a24 <HAL_RCC_ClockConfig+0x254>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b87      	ldr	r3, [pc, #540]	@ (8001a24 <HAL_RCC_ClockConfig+0x254>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f023 0201 	bic.w	r2, r3, #1
 800180c:	4985      	ldr	r1, [pc, #532]	@ (8001a24 <HAL_RCC_ClockConfig+0x254>)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	4313      	orrs	r3, r2
 8001812:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001814:	4b83      	ldr	r3, [pc, #524]	@ (8001a24 <HAL_RCC_ClockConfig+0x254>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d001      	beq.n	8001826 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0f9      	b.n	8001a1a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d008      	beq.n	8001844 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001832:	4b7d      	ldr	r3, [pc, #500]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	497a      	ldr	r1, [pc, #488]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 8001840:	4313      	orrs	r3, r2
 8001842:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 808e 	beq.w	800196e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800185a:	4b73      	ldr	r3, [pc, #460]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d121      	bne.n	80018aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0d7      	b.n	8001a1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001872:	4b6d      	ldr	r3, [pc, #436]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d115      	bne.n	80018aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0cb      	b.n	8001a1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800188a:	4b67      	ldr	r3, [pc, #412]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0bf      	b.n	8001a1a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800189a:	4b63      	ldr	r3, [pc, #396]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0b7      	b.n	8001a1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f023 0203 	bic.w	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	495c      	ldr	r1, [pc, #368]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018bc:	f7ff f87e 	bl	80009bc <HAL_GetTick>
 80018c0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d112      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018cc:	f7ff f876 	bl	80009bc <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e09b      	b.n	8001a1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e2:	4b51      	ldr	r3, [pc, #324]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d1ee      	bne.n	80018cc <HAL_RCC_ClockConfig+0xfc>
 80018ee:	e03e      	b.n	800196e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d112      	bne.n	800191e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fa:	f7ff f85f 	bl	80009bc <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e084      	b.n	8001a1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001910:	4b45      	ldr	r3, [pc, #276]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b0c      	cmp	r3, #12
 800191a:	d1ee      	bne.n	80018fa <HAL_RCC_ClockConfig+0x12a>
 800191c:	e027      	b.n	800196e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d11d      	bne.n	8001962 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001926:	e00a      	b.n	800193e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001928:	f7ff f848 	bl	80009bc <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e06d      	b.n	8001a1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800193e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b04      	cmp	r3, #4
 8001948:	d1ee      	bne.n	8001928 <HAL_RCC_ClockConfig+0x158>
 800194a:	e010      	b.n	800196e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194c:	f7ff f836 	bl	80009bc <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e05b      	b.n	8001a1a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001962:	4b31      	ldr	r3, [pc, #196]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ee      	bne.n	800194c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800196e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a24 <HAL_RCC_ClockConfig+0x254>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d219      	bcs.n	80019b0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d105      	bne.n	800198e <HAL_RCC_ClockConfig+0x1be>
 8001982:	4b28      	ldr	r3, [pc, #160]	@ (8001a24 <HAL_RCC_ClockConfig+0x254>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a27      	ldr	r2, [pc, #156]	@ (8001a24 <HAL_RCC_ClockConfig+0x254>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b25      	ldr	r3, [pc, #148]	@ (8001a24 <HAL_RCC_ClockConfig+0x254>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 0201 	bic.w	r2, r3, #1
 8001996:	4923      	ldr	r1, [pc, #140]	@ (8001a24 <HAL_RCC_ClockConfig+0x254>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b21      	ldr	r3, [pc, #132]	@ (8001a24 <HAL_RCC_ClockConfig+0x254>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e034      	b.n	8001a1a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4917      	ldr	r1, [pc, #92]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019da:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	490f      	ldr	r1, [pc, #60]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ee:	f000 f823 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 80019f2:	4602      	mov	r2, r0
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <HAL_RCC_ClockConfig+0x258>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	490b      	ldr	r1, [pc, #44]	@ (8001a2c <HAL_RCC_ClockConfig+0x25c>)
 8001a00:	5ccb      	ldrb	r3, [r1, r3]
 8001a02:	fa22 f303 	lsr.w	r3, r2, r3
 8001a06:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <HAL_RCC_ClockConfig+0x260>)
 8001a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe ff88 	bl	8000924 <HAL_InitTick>
 8001a14:	4603      	mov	r3, r0
 8001a16:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a18:	7afb      	ldrb	r3, [r7, #11]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023c00 	.word	0x40023c00
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	08002040 	.word	0x08002040
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a3c:	b092      	sub	sp, #72	@ 0x48
 8001a3e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a40:	4b79      	ldr	r3, [pc, #484]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	d00d      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x34>
 8001a50:	2b0c      	cmp	r3, #12
 8001a52:	f200 80d5 	bhi.w	8001c00 <HAL_RCC_GetSysClockFreq+0x1c8>
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d002      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x28>
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0x2e>
 8001a5e:	e0cf      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a60:	4b72      	ldr	r3, [pc, #456]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001a62:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001a64:	e0da      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a66:	4b72      	ldr	r3, [pc, #456]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001a68:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001a6a:	e0d7      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a6e:	0c9b      	lsrs	r3, r3, #18
 8001a70:	f003 020f 	and.w	r2, r3, #15
 8001a74:	4b6f      	ldr	r3, [pc, #444]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001a76:	5c9b      	ldrb	r3, [r3, r2]
 8001a78:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a7c:	0d9b      	lsrs	r3, r3, #22
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	3301      	adds	r3, #1
 8001a84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a86:	4b68      	ldr	r3, [pc, #416]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d05d      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a94:	2200      	movs	r2, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	460d      	mov	r5, r1
 8001a9e:	4622      	mov	r2, r4
 8001aa0:	462b      	mov	r3, r5
 8001aa2:	f04f 0000 	mov.w	r0, #0
 8001aa6:	f04f 0100 	mov.w	r1, #0
 8001aaa:	0159      	lsls	r1, r3, #5
 8001aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab0:	0150      	lsls	r0, r2, #5
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	1a51      	subs	r1, r2, r1
 8001aba:	6139      	str	r1, [r7, #16]
 8001abc:	4629      	mov	r1, r5
 8001abe:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ad0:	4659      	mov	r1, fp
 8001ad2:	018b      	lsls	r3, r1, #6
 8001ad4:	4651      	mov	r1, sl
 8001ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ada:	4651      	mov	r1, sl
 8001adc:	018a      	lsls	r2, r1, #6
 8001ade:	46d4      	mov	ip, sl
 8001ae0:	ebb2 080c 	subs.w	r8, r2, ip
 8001ae4:	4659      	mov	r1, fp
 8001ae6:	eb63 0901 	sbc.w	r9, r3, r1
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001afe:	4690      	mov	r8, r2
 8001b00:	4699      	mov	r9, r3
 8001b02:	4623      	mov	r3, r4
 8001b04:	eb18 0303 	adds.w	r3, r8, r3
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	462b      	mov	r3, r5
 8001b0c:	eb49 0303 	adc.w	r3, r9, r3
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b1e:	4629      	mov	r1, r5
 8001b20:	024b      	lsls	r3, r1, #9
 8001b22:	4620      	mov	r0, r4
 8001b24:	4629      	mov	r1, r5
 8001b26:	4604      	mov	r4, r0
 8001b28:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001b2c:	4601      	mov	r1, r0
 8001b2e:	024a      	lsls	r2, r1, #9
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b36:	2200      	movs	r2, #0
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b40:	f7fe fb1c 	bl	800017c <__aeabi_uldivmod>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b4c:	e055      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b50:	2200      	movs	r2, #0
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b56:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b5a:	4642      	mov	r2, r8
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	f04f 0000 	mov.w	r0, #0
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	0159      	lsls	r1, r3, #5
 8001b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6c:	0150      	lsls	r0, r2, #5
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	46c4      	mov	ip, r8
 8001b74:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001b78:	4640      	mov	r0, r8
 8001b7a:	4649      	mov	r1, r9
 8001b7c:	468c      	mov	ip, r1
 8001b7e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b8e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b92:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b96:	ebb2 040a 	subs.w	r4, r2, sl
 8001b9a:	eb63 050b 	sbc.w	r5, r3, fp
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	00eb      	lsls	r3, r5, #3
 8001ba8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bac:	00e2      	lsls	r2, r4, #3
 8001bae:	4614      	mov	r4, r2
 8001bb0:	461d      	mov	r5, r3
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	18e3      	adds	r3, r4, r3
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	eb45 0303 	adc.w	r3, r5, r3
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bcc:	4629      	mov	r1, r5
 8001bce:	028b      	lsls	r3, r1, #10
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	4604      	mov	r4, r0
 8001bd6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001bda:	4601      	mov	r1, r0
 8001bdc:	028a      	lsls	r2, r1, #10
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be4:	2200      	movs	r2, #0
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	61fa      	str	r2, [r7, #28]
 8001bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bee:	f7fe fac5 	bl	800017c <__aeabi_uldivmod>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8001bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bfc:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001bfe:	e00d      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c00:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	0b5b      	lsrs	r3, r3, #13
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001c1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3748      	adds	r7, #72	@ 0x48
 8001c22:	46bd      	mov	sp, r7
 8001c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	00f42400 	.word	0x00f42400
 8001c30:	007a1200 	.word	0x007a1200
 8001c34:	08002034 	.word	0x08002034

08001c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c3c:	4b02      	ldr	r3, [pc, #8]	@ (8001c48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	20000000 	.word	0x20000000

08001c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c50:	f7ff fff2 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4903      	ldr	r1, [pc, #12]	@ (8001c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	08002050 	.word	0x08002050

08001c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c78:	f7ff ffde 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	0adb      	lsrs	r3, r3, #11
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	4903      	ldr	r1, [pc, #12]	@ (8001c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	08002050 	.word	0x08002050

08001c9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ca8:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d12c      	bne.n	8001d0e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cb4:	4b26      	ldr	r3, [pc, #152]	@ (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001cc0:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e016      	b.n	8001cfa <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ccc:	4b20      	ldr	r3, [pc, #128]	@ (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	6253      	str	r3, [r2, #36]	@ 0x24
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001cec:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cee:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf2:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cf8:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001d00:	d105      	bne.n	8001d0e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001d08:	d101      	bne.n	8001d0e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d105      	bne.n	8001d20 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001d14:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0f      	ldr	r2, [pc, #60]	@ (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f023 0201 	bic.w	r2, r3, #1
 8001d28:	490b      	ldr	r1, [pc, #44]	@ (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d30:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d001      	beq.n	8001d42 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40007000 	.word	0x40007000
 8001d58:	40023c00 	.word	0x40023c00

08001d5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e042      	b.n	8001df4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe fd1a 	bl	80007bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2224      	movs	r2, #36	@ 0x24
 8001d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f82b 	bl	8001dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001db4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695a      	ldr	r2, [r3, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001dc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001dd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001e3c:	f023 030c 	bic.w	r3, r3, #12
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	430b      	orrs	r3, r1
 8001e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699a      	ldr	r2, [r3, #24]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a55      	ldr	r2, [pc, #340]	@ (8001fbc <UART_SetConfig+0x1c0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d103      	bne.n	8001e72 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e6a:	f7ff ff03 	bl	8001c74 <HAL_RCC_GetPCLK2Freq>
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	e002      	b.n	8001e78 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e72:	f7ff feeb 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8001e76:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e80:	d14c      	bne.n	8001f1c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	009a      	lsls	r2, r3, #2
 8001e8c:	441a      	add	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	4a49      	ldr	r2, [pc, #292]	@ (8001fc0 <UART_SetConfig+0x1c4>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	0119      	lsls	r1, r3, #4
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009a      	lsls	r2, r3, #2
 8001eac:	441a      	add	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eb8:	4b41      	ldr	r3, [pc, #260]	@ (8001fc0 <UART_SetConfig+0x1c4>)
 8001eba:	fba3 0302 	umull	r0, r3, r3, r2
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2064      	movs	r0, #100	@ 0x64
 8001ec2:	fb00 f303 	mul.w	r3, r0, r3
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	3332      	adds	r3, #50	@ 0x32
 8001ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8001fc0 <UART_SetConfig+0x1c4>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001eda:	4419      	add	r1, r3
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009a      	lsls	r2, r3, #2
 8001ee6:	441a      	add	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ef2:	4b33      	ldr	r3, [pc, #204]	@ (8001fc0 <UART_SetConfig+0x1c4>)
 8001ef4:	fba3 0302 	umull	r0, r3, r3, r2
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	2064      	movs	r0, #100	@ 0x64
 8001efc:	fb00 f303 	mul.w	r3, r0, r3
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	3332      	adds	r3, #50	@ 0x32
 8001f06:	4a2e      	ldr	r2, [pc, #184]	@ (8001fc0 <UART_SetConfig+0x1c4>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	f003 0207 	and.w	r2, r3, #7
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	440a      	add	r2, r1
 8001f18:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f1a:	e04a      	b.n	8001fb2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	009a      	lsls	r2, r3, #2
 8001f26:	441a      	add	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	4a23      	ldr	r2, [pc, #140]	@ (8001fc0 <UART_SetConfig+0x1c4>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	0119      	lsls	r1, r3, #4
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	009a      	lsls	r2, r3, #2
 8001f46:	441a      	add	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f52:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <UART_SetConfig+0x1c4>)
 8001f54:	fba3 0302 	umull	r0, r3, r3, r2
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	2064      	movs	r0, #100	@ 0x64
 8001f5c:	fb00 f303 	mul.w	r3, r0, r3
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	3332      	adds	r3, #50	@ 0x32
 8001f66:	4a16      	ldr	r2, [pc, #88]	@ (8001fc0 <UART_SetConfig+0x1c4>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f72:	4419      	add	r1, r3
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009a      	lsls	r2, r3, #2
 8001f7e:	441a      	add	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc0 <UART_SetConfig+0x1c4>)
 8001f8c:	fba3 0302 	umull	r0, r3, r3, r2
 8001f90:	095b      	lsrs	r3, r3, #5
 8001f92:	2064      	movs	r0, #100	@ 0x64
 8001f94:	fb00 f303 	mul.w	r3, r0, r3
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	3332      	adds	r3, #50	@ 0x32
 8001f9e:	4a08      	ldr	r2, [pc, #32]	@ (8001fc0 <UART_SetConfig+0x1c4>)
 8001fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa4:	095b      	lsrs	r3, r3, #5
 8001fa6:	f003 020f 	and.w	r2, r3, #15
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	440a      	add	r2, r1
 8001fb0:	609a      	str	r2, [r3, #8]
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40013800 	.word	0x40013800
 8001fc0:	51eb851f 	.word	0x51eb851f

08001fc4 <memset>:
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4402      	add	r2, r0
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d100      	bne.n	8001fce <memset+0xa>
 8001fcc:	4770      	bx	lr
 8001fce:	f803 1b01 	strb.w	r1, [r3], #1
 8001fd2:	e7f9      	b.n	8001fc8 <memset+0x4>

08001fd4 <__libc_init_array>:
 8001fd4:	b570      	push	{r4, r5, r6, lr}
 8001fd6:	2600      	movs	r6, #0
 8001fd8:	4d0c      	ldr	r5, [pc, #48]	@ (800200c <__libc_init_array+0x38>)
 8001fda:	4c0d      	ldr	r4, [pc, #52]	@ (8002010 <__libc_init_array+0x3c>)
 8001fdc:	1b64      	subs	r4, r4, r5
 8001fde:	10a4      	asrs	r4, r4, #2
 8001fe0:	42a6      	cmp	r6, r4
 8001fe2:	d109      	bne.n	8001ff8 <__libc_init_array+0x24>
 8001fe4:	f000 f81a 	bl	800201c <_init>
 8001fe8:	2600      	movs	r6, #0
 8001fea:	4d0a      	ldr	r5, [pc, #40]	@ (8002014 <__libc_init_array+0x40>)
 8001fec:	4c0a      	ldr	r4, [pc, #40]	@ (8002018 <__libc_init_array+0x44>)
 8001fee:	1b64      	subs	r4, r4, r5
 8001ff0:	10a4      	asrs	r4, r4, #2
 8001ff2:	42a6      	cmp	r6, r4
 8001ff4:	d105      	bne.n	8002002 <__libc_init_array+0x2e>
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}
 8001ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ffc:	4798      	blx	r3
 8001ffe:	3601      	adds	r6, #1
 8002000:	e7ee      	b.n	8001fe0 <__libc_init_array+0xc>
 8002002:	f855 3b04 	ldr.w	r3, [r5], #4
 8002006:	4798      	blx	r3
 8002008:	3601      	adds	r6, #1
 800200a:	e7f2      	b.n	8001ff2 <__libc_init_array+0x1e>
 800200c:	08002060 	.word	0x08002060
 8002010:	08002060 	.word	0x08002060
 8002014:	08002060 	.word	0x08002060
 8002018:	08002064 	.word	0x08002064

0800201c <_init>:
 800201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201e:	bf00      	nop
 8002020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002022:	bc08      	pop	{r3}
 8002024:	469e      	mov	lr, r3
 8002026:	4770      	bx	lr

08002028 <_fini>:
 8002028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202a:	bf00      	nop
 800202c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202e:	bc08      	pop	{r3}
 8002030:	469e      	mov	lr, r3
 8002032:	4770      	bx	lr
