
EnviroSense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b90  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08013cd0  08013cd0  00014cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ec8  08013ec8  00015208  2**0
                  CONTENTS
  4 .ARM          00000008  08013ec8  08013ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013ed0  08013ed0  00015208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ed0  08013ed0  00014ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013ed4  08013ed4  00014ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  08013ed8  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000208  080140e0  00015208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c0  080140e0  000157c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00015208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038b9b  00000000  00000000  00015231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fb8  00000000  00000000  0004ddcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000032b8  00000000  00000000  00052d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000272a  00000000  00000000  00056040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7c0  00000000  00000000  0005876a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aea7  00000000  00000000  00074f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab58e  00000000  00000000  0009fdd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b35f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ea40  00000000  00000000  0014b3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00159de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000208 	.word	0x20000208
 800015c:	00000000 	.word	0x00000000
 8000160:	08013cb8 	.word	0x08013cb8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000020c 	.word	0x2000020c
 800017c:	08013cb8 	.word	0x08013cb8

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	@ 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_fmul>:
 8000d64:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d72:	ea92 0f0c 	teqne	r2, ip
 8000d76:	ea93 0f0c 	teqne	r3, ip
 8000d7a:	d06f      	beq.n	8000e5c <__aeabi_fmul+0xf8>
 8000d7c:	441a      	add	r2, r3
 8000d7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d82:	0240      	lsls	r0, r0, #9
 8000d84:	bf18      	it	ne
 8000d86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8a:	d01e      	beq.n	8000dca <__aeabi_fmul+0x66>
 8000d8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d98:	fba0 3101 	umull	r3, r1, r0, r1
 8000d9c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000da0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000da4:	bf3e      	ittt	cc
 8000da6:	0049      	lslcc	r1, r1, #1
 8000da8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	ea40 0001 	orr.w	r0, r0, r1
 8000db2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000db6:	2afd      	cmp	r2, #253	@ 0xfd
 8000db8:	d81d      	bhi.n	8000df6 <__aeabi_fmul+0x92>
 8000dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc2:	bf08      	it	eq
 8000dc4:	f020 0001 	biceq.w	r0, r0, #1
 8000dc8:	4770      	bx	lr
 8000dca:	f090 0f00 	teq	r0, #0
 8000dce:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dd2:	bf08      	it	eq
 8000dd4:	0249      	lsleq	r1, r1, #9
 8000dd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dde:	3a7f      	subs	r2, #127	@ 0x7f
 8000de0:	bfc2      	ittt	gt
 8000de2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000de6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dea:	4770      	bxgt	lr
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	3a01      	subs	r2, #1
 8000df6:	dc5d      	bgt.n	8000eb4 <__aeabi_fmul+0x150>
 8000df8:	f112 0f19 	cmn.w	r2, #25
 8000dfc:	bfdc      	itt	le
 8000dfe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e02:	4770      	bxle	lr
 8000e04:	f1c2 0200 	rsb	r2, r2, #0
 8000e08:	0041      	lsls	r1, r0, #1
 8000e0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e0e:	f1c2 0220 	rsb	r2, r2, #32
 8000e12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1a:	f140 0000 	adc.w	r0, r0, #0
 8000e1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e22:	bf08      	it	eq
 8000e24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e28:	4770      	bx	lr
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xce>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xe6>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e78f      	b.n	8000d7c <__aeabi_fmul+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	bf18      	it	ne
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d00a      	beq.n	8000e82 <__aeabi_fmul+0x11e>
 8000e6c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e70:	bf18      	it	ne
 8000e72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e76:	d1d8      	bne.n	8000e2a <__aeabi_fmul+0xc6>
 8000e78:	ea80 0001 	eor.w	r0, r0, r1
 8000e7c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	bf17      	itett	ne
 8000e88:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e8c:	4608      	moveq	r0, r1
 8000e8e:	f091 0f00 	teqne	r1, #0
 8000e92:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e96:	d014      	beq.n	8000ec2 <__aeabi_fmul+0x15e>
 8000e98:	ea92 0f0c 	teq	r2, ip
 8000e9c:	d101      	bne.n	8000ea2 <__aeabi_fmul+0x13e>
 8000e9e:	0242      	lsls	r2, r0, #9
 8000ea0:	d10f      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000ea2:	ea93 0f0c 	teq	r3, ip
 8000ea6:	d103      	bne.n	8000eb0 <__aeabi_fmul+0x14c>
 8000ea8:	024b      	lsls	r3, r1, #9
 8000eaa:	bf18      	it	ne
 8000eac:	4608      	movne	r0, r1
 8000eae:	d108      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000eb0:	ea80 0001 	eor.w	r0, r0, r1
 8000eb4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ebc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ec0:	4770      	bx	lr
 8000ec2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ec6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eca:	4770      	bx	lr

08000ecc <__aeabi_fdiv>:
 8000ecc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ed0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed4:	bf1e      	ittt	ne
 8000ed6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eda:	ea92 0f0c 	teqne	r2, ip
 8000ede:	ea93 0f0c 	teqne	r3, ip
 8000ee2:	d069      	beq.n	8000fb8 <__aeabi_fdiv+0xec>
 8000ee4:	eba2 0203 	sub.w	r2, r2, r3
 8000ee8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eec:	0249      	lsls	r1, r1, #9
 8000eee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef2:	d037      	beq.n	8000f64 <__aeabi_fdiv+0x98>
 8000ef4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ef8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000efc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f00:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f04:	428b      	cmp	r3, r1
 8000f06:	bf38      	it	cc
 8000f08:	005b      	lslcc	r3, r3, #1
 8000f0a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f0e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f12:	428b      	cmp	r3, r1
 8000f14:	bf24      	itt	cs
 8000f16:	1a5b      	subcs	r3, r3, r1
 8000f18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f2e:	bf24      	itt	cs
 8000f30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	bf18      	it	ne
 8000f4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f4e:	d1e0      	bne.n	8000f12 <__aeabi_fdiv+0x46>
 8000f50:	2afd      	cmp	r2, #253	@ 0xfd
 8000f52:	f63f af50 	bhi.w	8000df6 <__aeabi_fmul+0x92>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f5c:	bf08      	it	eq
 8000f5e:	f020 0001 	biceq.w	r0, r0, #1
 8000f62:	4770      	bx	lr
 8000f64:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f6c:	327f      	adds	r2, #127	@ 0x7f
 8000f6e:	bfc2      	ittt	gt
 8000f70:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f78:	4770      	bxgt	lr
 8000f7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	3a01      	subs	r2, #1
 8000f84:	e737      	b.n	8000df6 <__aeabi_fmul+0x92>
 8000f86:	f092 0f00 	teq	r2, #0
 8000f8a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0040      	lsleq	r0, r0, #1
 8000f92:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f96:	3a01      	subeq	r2, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xc2>
 8000f9a:	ea40 000c 	orr.w	r0, r0, ip
 8000f9e:	f093 0f00 	teq	r3, #0
 8000fa2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0049      	lsleq	r1, r1, #1
 8000faa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fae:	3b01      	subeq	r3, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xda>
 8000fb2:	ea41 010c 	orr.w	r1, r1, ip
 8000fb6:	e795      	b.n	8000ee4 <__aeabi_fdiv+0x18>
 8000fb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fbc:	ea92 0f0c 	teq	r2, ip
 8000fc0:	d108      	bne.n	8000fd4 <__aeabi_fdiv+0x108>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	f47f af7d 	bne.w	8000ec2 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	f47f af70 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e776      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fd4:	ea93 0f0c 	teq	r3, ip
 8000fd8:	d104      	bne.n	8000fe4 <__aeabi_fdiv+0x118>
 8000fda:	024b      	lsls	r3, r1, #9
 8000fdc:	f43f af4c 	beq.w	8000e78 <__aeabi_fmul+0x114>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e76e      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fe4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fe8:	bf18      	it	ne
 8000fea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fee:	d1ca      	bne.n	8000f86 <__aeabi_fdiv+0xba>
 8000ff0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ff4:	f47f af5c 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000ff8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ffc:	f47f af3c 	bne.w	8000e78 <__aeabi_fmul+0x114>
 8001000:	e75f      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8001002:	bf00      	nop

08001004 <__gesf2>:
 8001004:	f04f 3cff 	mov.w	ip, #4294967295
 8001008:	e006      	b.n	8001018 <__cmpsf2+0x4>
 800100a:	bf00      	nop

0800100c <__lesf2>:
 800100c:	f04f 0c01 	mov.w	ip, #1
 8001010:	e002      	b.n	8001018 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__cmpsf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	f84d cd04 	str.w	ip, [sp, #-4]!
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	bf18      	it	ne
 800102a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800102e:	d011      	beq.n	8001054 <__cmpsf2+0x40>
 8001030:	b001      	add	sp, #4
 8001032:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001036:	bf18      	it	ne
 8001038:	ea90 0f01 	teqne	r0, r1
 800103c:	bf58      	it	pl
 800103e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001042:	bf88      	it	hi
 8001044:	17c8      	asrhi	r0, r1, #31
 8001046:	bf38      	it	cc
 8001048:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800104c:	bf18      	it	ne
 800104e:	f040 0001 	orrne.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001058:	d102      	bne.n	8001060 <__cmpsf2+0x4c>
 800105a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800105e:	d105      	bne.n	800106c <__cmpsf2+0x58>
 8001060:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001064:	d1e4      	bne.n	8001030 <__cmpsf2+0x1c>
 8001066:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106a:	d0e1      	beq.n	8001030 <__cmpsf2+0x1c>
 800106c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <__aeabi_cfrcmple>:
 8001074:	4684      	mov	ip, r0
 8001076:	4608      	mov	r0, r1
 8001078:	4661      	mov	r1, ip
 800107a:	e7ff      	b.n	800107c <__aeabi_cfcmpeq>

0800107c <__aeabi_cfcmpeq>:
 800107c:	b50f      	push	{r0, r1, r2, r3, lr}
 800107e:	f7ff ffc9 	bl	8001014 <__cmpsf2>
 8001082:	2800      	cmp	r0, #0
 8001084:	bf48      	it	mi
 8001086:	f110 0f00 	cmnmi.w	r0, #0
 800108a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800108c <__aeabi_fcmpeq>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff fff4 	bl	800107c <__aeabi_cfcmpeq>
 8001094:	bf0c      	ite	eq
 8001096:	2001      	moveq	r0, #1
 8001098:	2000      	movne	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmplt>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffea 	bl	800107c <__aeabi_cfcmpeq>
 80010a8:	bf34      	ite	cc
 80010aa:	2001      	movcc	r0, #1
 80010ac:	2000      	movcs	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmple>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffe0 	bl	800107c <__aeabi_cfcmpeq>
 80010bc:	bf94      	ite	ls
 80010be:	2001      	movls	r0, #1
 80010c0:	2000      	movhi	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_fcmpge>:
 80010c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010cc:	f7ff ffd2 	bl	8001074 <__aeabi_cfrcmple>
 80010d0:	bf94      	ite	ls
 80010d2:	2001      	movls	r0, #1
 80010d4:	2000      	movhi	r0, #0
 80010d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010da:	bf00      	nop

080010dc <__aeabi_fcmpgt>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff ffc8 	bl	8001074 <__aeabi_cfrcmple>
 80010e4:	bf34      	ite	cc
 80010e6:	2001      	movcc	r0, #1
 80010e8:	2000      	movcs	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_f2iz>:
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010f8:	d30f      	bcc.n	800111a <__aeabi_f2iz+0x2a>
 80010fa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001102:	d90d      	bls.n	8001120 <__aeabi_f2iz+0x30>
 8001104:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001108:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800110c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001110:	fa23 f002 	lsr.w	r0, r3, r2
 8001114:	bf18      	it	ne
 8001116:	4240      	negne	r0, r0
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr
 8001120:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001124:	d101      	bne.n	800112a <__aeabi_f2iz+0x3a>
 8001126:	0242      	lsls	r2, r0, #9
 8001128:	d105      	bne.n	8001136 <__aeabi_f2iz+0x46>
 800112a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800112e:	bf08      	it	eq
 8001130:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2uiz>:
 800113c:	0042      	lsls	r2, r0, #1
 800113e:	d20e      	bcs.n	800115e <__aeabi_f2uiz+0x22>
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30b      	bcc.n	800115e <__aeabi_f2uiz+0x22>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d409      	bmi.n	8001164 <__aeabi_f2uiz+0x28>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	fa23 f002 	lsr.w	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2uiz+0x32>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d102      	bne.n	8001174 <__aeabi_f2uiz+0x38>
 800116e:	f04f 30ff 	mov.w	r0, #4294967295
 8001172:	4770      	bx	lr
 8001174:	f04f 0000 	mov.w	r0, #0
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <__aeabi_uldivmod>:
 800117c:	b953      	cbnz	r3, 8001194 <__aeabi_uldivmod+0x18>
 800117e:	b94a      	cbnz	r2, 8001194 <__aeabi_uldivmod+0x18>
 8001180:	2900      	cmp	r1, #0
 8001182:	bf08      	it	eq
 8001184:	2800      	cmpeq	r0, #0
 8001186:	bf1c      	itt	ne
 8001188:	f04f 31ff 	movne.w	r1, #4294967295
 800118c:	f04f 30ff 	movne.w	r0, #4294967295
 8001190:	f000 b968 	b.w	8001464 <__aeabi_idiv0>
 8001194:	f1ad 0c08 	sub.w	ip, sp, #8
 8001198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800119c:	f000 f806 	bl	80011ac <__udivmoddi4>
 80011a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011a8:	b004      	add	sp, #16
 80011aa:	4770      	bx	lr

080011ac <__udivmoddi4>:
 80011ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b0:	9d08      	ldr	r5, [sp, #32]
 80011b2:	460c      	mov	r4, r1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d14e      	bne.n	8001256 <__udivmoddi4+0xaa>
 80011b8:	4694      	mov	ip, r2
 80011ba:	458c      	cmp	ip, r1
 80011bc:	4686      	mov	lr, r0
 80011be:	fab2 f282 	clz	r2, r2
 80011c2:	d962      	bls.n	800128a <__udivmoddi4+0xde>
 80011c4:	b14a      	cbz	r2, 80011da <__udivmoddi4+0x2e>
 80011c6:	f1c2 0320 	rsb	r3, r2, #32
 80011ca:	4091      	lsls	r1, r2
 80011cc:	fa20 f303 	lsr.w	r3, r0, r3
 80011d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011d4:	4319      	orrs	r1, r3
 80011d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80011da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011de:	fbb1 f4f7 	udiv	r4, r1, r7
 80011e2:	fb07 1114 	mls	r1, r7, r4, r1
 80011e6:	fa1f f68c 	uxth.w	r6, ip
 80011ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011f2:	fb04 f106 	mul.w	r1, r4, r6
 80011f6:	4299      	cmp	r1, r3
 80011f8:	d90a      	bls.n	8001210 <__udivmoddi4+0x64>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8001202:	f080 8110 	bcs.w	8001426 <__udivmoddi4+0x27a>
 8001206:	4299      	cmp	r1, r3
 8001208:	f240 810d 	bls.w	8001426 <__udivmoddi4+0x27a>
 800120c:	3c02      	subs	r4, #2
 800120e:	4463      	add	r3, ip
 8001210:	1a59      	subs	r1, r3, r1
 8001212:	fbb1 f0f7 	udiv	r0, r1, r7
 8001216:	fb07 1110 	mls	r1, r7, r0, r1
 800121a:	fb00 f606 	mul.w	r6, r0, r6
 800121e:	fa1f f38e 	uxth.w	r3, lr
 8001222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001226:	429e      	cmp	r6, r3
 8001228:	d90a      	bls.n	8001240 <__udivmoddi4+0x94>
 800122a:	eb1c 0303 	adds.w	r3, ip, r3
 800122e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001232:	f080 80fa 	bcs.w	800142a <__udivmoddi4+0x27e>
 8001236:	429e      	cmp	r6, r3
 8001238:	f240 80f7 	bls.w	800142a <__udivmoddi4+0x27e>
 800123c:	4463      	add	r3, ip
 800123e:	3802      	subs	r0, #2
 8001240:	2100      	movs	r1, #0
 8001242:	1b9b      	subs	r3, r3, r6
 8001244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001248:	b11d      	cbz	r5, 8001252 <__udivmoddi4+0xa6>
 800124a:	40d3      	lsrs	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	e9c5 3200 	strd	r3, r2, [r5]
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	428b      	cmp	r3, r1
 8001258:	d905      	bls.n	8001266 <__udivmoddi4+0xba>
 800125a:	b10d      	cbz	r5, 8001260 <__udivmoddi4+0xb4>
 800125c:	e9c5 0100 	strd	r0, r1, [r5]
 8001260:	2100      	movs	r1, #0
 8001262:	4608      	mov	r0, r1
 8001264:	e7f5      	b.n	8001252 <__udivmoddi4+0xa6>
 8001266:	fab3 f183 	clz	r1, r3
 800126a:	2900      	cmp	r1, #0
 800126c:	d146      	bne.n	80012fc <__udivmoddi4+0x150>
 800126e:	42a3      	cmp	r3, r4
 8001270:	d302      	bcc.n	8001278 <__udivmoddi4+0xcc>
 8001272:	4290      	cmp	r0, r2
 8001274:	f0c0 80ee 	bcc.w	8001454 <__udivmoddi4+0x2a8>
 8001278:	1a86      	subs	r6, r0, r2
 800127a:	eb64 0303 	sbc.w	r3, r4, r3
 800127e:	2001      	movs	r0, #1
 8001280:	2d00      	cmp	r5, #0
 8001282:	d0e6      	beq.n	8001252 <__udivmoddi4+0xa6>
 8001284:	e9c5 6300 	strd	r6, r3, [r5]
 8001288:	e7e3      	b.n	8001252 <__udivmoddi4+0xa6>
 800128a:	2a00      	cmp	r2, #0
 800128c:	f040 808f 	bne.w	80013ae <__udivmoddi4+0x202>
 8001290:	eba1 040c 	sub.w	r4, r1, ip
 8001294:	2101      	movs	r1, #1
 8001296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800129a:	fa1f f78c 	uxth.w	r7, ip
 800129e:	fbb4 f6f8 	udiv	r6, r4, r8
 80012a2:	fb08 4416 	mls	r4, r8, r6, r4
 80012a6:	fb07 f006 	mul.w	r0, r7, r6
 80012aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d908      	bls.n	80012c8 <__udivmoddi4+0x11c>
 80012b6:	eb1c 0303 	adds.w	r3, ip, r3
 80012ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80012be:	d202      	bcs.n	80012c6 <__udivmoddi4+0x11a>
 80012c0:	4298      	cmp	r0, r3
 80012c2:	f200 80cb 	bhi.w	800145c <__udivmoddi4+0x2b0>
 80012c6:	4626      	mov	r6, r4
 80012c8:	1a1c      	subs	r4, r3, r0
 80012ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80012ce:	fb08 4410 	mls	r4, r8, r0, r4
 80012d2:	fb00 f707 	mul.w	r7, r0, r7
 80012d6:	fa1f f38e 	uxth.w	r3, lr
 80012da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012de:	429f      	cmp	r7, r3
 80012e0:	d908      	bls.n	80012f4 <__udivmoddi4+0x148>
 80012e2:	eb1c 0303 	adds.w	r3, ip, r3
 80012e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80012ea:	d202      	bcs.n	80012f2 <__udivmoddi4+0x146>
 80012ec:	429f      	cmp	r7, r3
 80012ee:	f200 80ae 	bhi.w	800144e <__udivmoddi4+0x2a2>
 80012f2:	4620      	mov	r0, r4
 80012f4:	1bdb      	subs	r3, r3, r7
 80012f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012fa:	e7a5      	b.n	8001248 <__udivmoddi4+0x9c>
 80012fc:	f1c1 0720 	rsb	r7, r1, #32
 8001300:	408b      	lsls	r3, r1
 8001302:	fa22 fc07 	lsr.w	ip, r2, r7
 8001306:	ea4c 0c03 	orr.w	ip, ip, r3
 800130a:	fa24 f607 	lsr.w	r6, r4, r7
 800130e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001312:	fbb6 f8f9 	udiv	r8, r6, r9
 8001316:	fa1f fe8c 	uxth.w	lr, ip
 800131a:	fb09 6618 	mls	r6, r9, r8, r6
 800131e:	fa20 f307 	lsr.w	r3, r0, r7
 8001322:	408c      	lsls	r4, r1
 8001324:	fa00 fa01 	lsl.w	sl, r0, r1
 8001328:	fb08 f00e 	mul.w	r0, r8, lr
 800132c:	431c      	orrs	r4, r3
 800132e:	0c23      	lsrs	r3, r4, #16
 8001330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001334:	4298      	cmp	r0, r3
 8001336:	fa02 f201 	lsl.w	r2, r2, r1
 800133a:	d90a      	bls.n	8001352 <__udivmoddi4+0x1a6>
 800133c:	eb1c 0303 	adds.w	r3, ip, r3
 8001340:	f108 36ff 	add.w	r6, r8, #4294967295
 8001344:	f080 8081 	bcs.w	800144a <__udivmoddi4+0x29e>
 8001348:	4298      	cmp	r0, r3
 800134a:	d97e      	bls.n	800144a <__udivmoddi4+0x29e>
 800134c:	f1a8 0802 	sub.w	r8, r8, #2
 8001350:	4463      	add	r3, ip
 8001352:	1a1e      	subs	r6, r3, r0
 8001354:	fbb6 f3f9 	udiv	r3, r6, r9
 8001358:	fb09 6613 	mls	r6, r9, r3, r6
 800135c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001360:	b2a4      	uxth	r4, r4
 8001362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001366:	45a6      	cmp	lr, r4
 8001368:	d908      	bls.n	800137c <__udivmoddi4+0x1d0>
 800136a:	eb1c 0404 	adds.w	r4, ip, r4
 800136e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001372:	d266      	bcs.n	8001442 <__udivmoddi4+0x296>
 8001374:	45a6      	cmp	lr, r4
 8001376:	d964      	bls.n	8001442 <__udivmoddi4+0x296>
 8001378:	3b02      	subs	r3, #2
 800137a:	4464      	add	r4, ip
 800137c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001380:	fba0 8302 	umull	r8, r3, r0, r2
 8001384:	eba4 040e 	sub.w	r4, r4, lr
 8001388:	429c      	cmp	r4, r3
 800138a:	46c6      	mov	lr, r8
 800138c:	461e      	mov	r6, r3
 800138e:	d350      	bcc.n	8001432 <__udivmoddi4+0x286>
 8001390:	d04d      	beq.n	800142e <__udivmoddi4+0x282>
 8001392:	b155      	cbz	r5, 80013aa <__udivmoddi4+0x1fe>
 8001394:	ebba 030e 	subs.w	r3, sl, lr
 8001398:	eb64 0406 	sbc.w	r4, r4, r6
 800139c:	fa04 f707 	lsl.w	r7, r4, r7
 80013a0:	40cb      	lsrs	r3, r1
 80013a2:	431f      	orrs	r7, r3
 80013a4:	40cc      	lsrs	r4, r1
 80013a6:	e9c5 7400 	strd	r7, r4, [r5]
 80013aa:	2100      	movs	r1, #0
 80013ac:	e751      	b.n	8001252 <__udivmoddi4+0xa6>
 80013ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80013b2:	f1c2 0320 	rsb	r3, r2, #32
 80013b6:	40d9      	lsrs	r1, r3
 80013b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013bc:	fa20 f303 	lsr.w	r3, r0, r3
 80013c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80013c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80013c8:	fb08 1110 	mls	r1, r8, r0, r1
 80013cc:	4094      	lsls	r4, r2
 80013ce:	431c      	orrs	r4, r3
 80013d0:	fa1f f78c 	uxth.w	r7, ip
 80013d4:	0c23      	lsrs	r3, r4, #16
 80013d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013da:	fb00 f107 	mul.w	r1, r0, r7
 80013de:	4299      	cmp	r1, r3
 80013e0:	d908      	bls.n	80013f4 <__udivmoddi4+0x248>
 80013e2:	eb1c 0303 	adds.w	r3, ip, r3
 80013e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013ea:	d22c      	bcs.n	8001446 <__udivmoddi4+0x29a>
 80013ec:	4299      	cmp	r1, r3
 80013ee:	d92a      	bls.n	8001446 <__udivmoddi4+0x29a>
 80013f0:	3802      	subs	r0, #2
 80013f2:	4463      	add	r3, ip
 80013f4:	1a5b      	subs	r3, r3, r1
 80013f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80013fa:	fb08 3311 	mls	r3, r8, r1, r3
 80013fe:	b2a4      	uxth	r4, r4
 8001400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001404:	fb01 f307 	mul.w	r3, r1, r7
 8001408:	42a3      	cmp	r3, r4
 800140a:	d908      	bls.n	800141e <__udivmoddi4+0x272>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f101 36ff 	add.w	r6, r1, #4294967295
 8001414:	d213      	bcs.n	800143e <__udivmoddi4+0x292>
 8001416:	42a3      	cmp	r3, r4
 8001418:	d911      	bls.n	800143e <__udivmoddi4+0x292>
 800141a:	3902      	subs	r1, #2
 800141c:	4464      	add	r4, ip
 800141e:	1ae4      	subs	r4, r4, r3
 8001420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001424:	e73b      	b.n	800129e <__udivmoddi4+0xf2>
 8001426:	4604      	mov	r4, r0
 8001428:	e6f2      	b.n	8001210 <__udivmoddi4+0x64>
 800142a:	4608      	mov	r0, r1
 800142c:	e708      	b.n	8001240 <__udivmoddi4+0x94>
 800142e:	45c2      	cmp	sl, r8
 8001430:	d2af      	bcs.n	8001392 <__udivmoddi4+0x1e6>
 8001432:	ebb8 0e02 	subs.w	lr, r8, r2
 8001436:	eb63 060c 	sbc.w	r6, r3, ip
 800143a:	3801      	subs	r0, #1
 800143c:	e7a9      	b.n	8001392 <__udivmoddi4+0x1e6>
 800143e:	4631      	mov	r1, r6
 8001440:	e7ed      	b.n	800141e <__udivmoddi4+0x272>
 8001442:	4603      	mov	r3, r0
 8001444:	e79a      	b.n	800137c <__udivmoddi4+0x1d0>
 8001446:	4630      	mov	r0, r6
 8001448:	e7d4      	b.n	80013f4 <__udivmoddi4+0x248>
 800144a:	46b0      	mov	r8, r6
 800144c:	e781      	b.n	8001352 <__udivmoddi4+0x1a6>
 800144e:	4463      	add	r3, ip
 8001450:	3802      	subs	r0, #2
 8001452:	e74f      	b.n	80012f4 <__udivmoddi4+0x148>
 8001454:	4606      	mov	r6, r0
 8001456:	4623      	mov	r3, r4
 8001458:	4608      	mov	r0, r1
 800145a:	e711      	b.n	8001280 <__udivmoddi4+0xd4>
 800145c:	3e02      	subs	r6, #2
 800145e:	4463      	add	r3, ip
 8001460:	e732      	b.n	80012c8 <__udivmoddi4+0x11c>
 8001462:	bf00      	nop

08001464 <__aeabi_idiv0>:
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <GestionLed>:

# include <stdio.h>
#include <main.h>

void GestionLed(int LedState)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

	switch(LedState)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b05      	cmp	r3, #5
 8001474:	f200 80bb 	bhi.w	80015ee <GestionLed+0x186>
 8001478:	a201      	add	r2, pc, #4	@ (adr r2, 8001480 <GestionLed+0x18>)
 800147a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147e:	bf00      	nop
 8001480:	08001499 	.word	0x08001499
 8001484:	080014d1 	.word	0x080014d1
 8001488:	08001509 	.word	0x08001509
 800148c:	08001541 	.word	0x08001541
 8001490:	0800157b 	.word	0x0800157b
 8001494:	080015b5 	.word	0x080015b5
	{
	case 0:// Affichage de la temperature
		  HAL_GPIO_TogglePin(GPIOB,L0_Pin);
 8001498:	2102      	movs	r1, #2
 800149a:	4857      	ldr	r0, [pc, #348]	@ (80015f8 <GestionLed+0x190>)
 800149c:	f00b fcc6 	bl	800ce2c <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2104      	movs	r1, #4
 80014a4:	4854      	ldr	r0, [pc, #336]	@ (80015f8 <GestionLed+0x190>)
 80014a6:	f00b fca9 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014b0:	4851      	ldr	r0, [pc, #324]	@ (80015f8 <GestionLed+0x190>)
 80014b2:	f00b fca3 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014bc:	484e      	ldr	r0, [pc, #312]	@ (80015f8 <GestionLed+0x190>)
 80014be:	f00b fc9d 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014c8:	484b      	ldr	r0, [pc, #300]	@ (80015f8 <GestionLed+0x190>)
 80014ca:	f00b fc97 	bl	800cdfc <HAL_GPIO_WritePin>
	break;
 80014ce:	e08e      	b.n	80015ee <GestionLed+0x186>

	case 1:// Affichage de la consigne
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2102      	movs	r1, #2
 80014d4:	4848      	ldr	r0, [pc, #288]	@ (80015f8 <GestionLed+0x190>)
 80014d6:	f00b fc91 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(GPIOB,L1_Pin);
 80014da:	2104      	movs	r1, #4
 80014dc:	4846      	ldr	r0, [pc, #280]	@ (80015f8 <GestionLed+0x190>)
 80014de:	f00b fca5 	bl	800ce2c <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014e8:	4843      	ldr	r0, [pc, #268]	@ (80015f8 <GestionLed+0x190>)
 80014ea:	f00b fc87 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014f4:	4840      	ldr	r0, [pc, #256]	@ (80015f8 <GestionLed+0x190>)
 80014f6:	f00b fc81 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001500:	483d      	ldr	r0, [pc, #244]	@ (80015f8 <GestionLed+0x190>)
 8001502:	f00b fc7b 	bl	800cdfc <HAL_GPIO_WritePin>
	break;
 8001506:	e072      	b.n	80015ee <GestionLed+0x186>

	case 2:// Affichage de l'alarme temp
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2102      	movs	r1, #2
 800150c:	483a      	ldr	r0, [pc, #232]	@ (80015f8 <GestionLed+0x190>)
 800150e:	f00b fc75 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2104      	movs	r1, #4
 8001516:	4838      	ldr	r0, [pc, #224]	@ (80015f8 <GestionLed+0x190>)
 8001518:	f00b fc70 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(GPIOB,L2_Pin);
 800151c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001520:	4835      	ldr	r0, [pc, #212]	@ (80015f8 <GestionLed+0x190>)
 8001522:	f00b fc83 	bl	800ce2c <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800152c:	4832      	ldr	r0, [pc, #200]	@ (80015f8 <GestionLed+0x190>)
 800152e:	f00b fc65 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001538:	482f      	ldr	r0, [pc, #188]	@ (80015f8 <GestionLed+0x190>)
 800153a:	f00b fc5f 	bl	800cdfc <HAL_GPIO_WritePin>
	break;
 800153e:	e056      	b.n	80015ee <GestionLed+0x186>

	case 3:// Affichage de l'alarm accel
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2102      	movs	r1, #2
 8001544:	482c      	ldr	r0, [pc, #176]	@ (80015f8 <GestionLed+0x190>)
 8001546:	f00b fc59 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2104      	movs	r1, #4
 800154e:	482a      	ldr	r0, [pc, #168]	@ (80015f8 <GestionLed+0x190>)
 8001550:	f00b fc54 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800155a:	4827      	ldr	r0, [pc, #156]	@ (80015f8 <GestionLed+0x190>)
 800155c:	f00b fc4e 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001566:	4824      	ldr	r0, [pc, #144]	@ (80015f8 <GestionLed+0x190>)
 8001568:	f00b fc48 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001572:	4821      	ldr	r0, [pc, #132]	@ (80015f8 <GestionLed+0x190>)
 8001574:	f00b fc42 	bl	800cdfc <HAL_GPIO_WritePin>
	break;
 8001578:	e039      	b.n	80015ee <GestionLed+0x186>

	case 4:// Extinction des leds
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2102      	movs	r1, #2
 800157e:	481e      	ldr	r0, [pc, #120]	@ (80015f8 <GestionLed+0x190>)
 8001580:	f00b fc3c 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2104      	movs	r1, #4
 8001588:	481b      	ldr	r0, [pc, #108]	@ (80015f8 <GestionLed+0x190>)
 800158a:	f00b fc37 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001594:	4818      	ldr	r0, [pc, #96]	@ (80015f8 <GestionLed+0x190>)
 8001596:	f00b fc31 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015a0:	4815      	ldr	r0, [pc, #84]	@ (80015f8 <GestionLed+0x190>)
 80015a2:	f00b fc2b 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015ac:	4812      	ldr	r0, [pc, #72]	@ (80015f8 <GestionLed+0x190>)
 80015ae:	f00b fc25 	bl	800cdfc <HAL_GPIO_WritePin>
	break;
 80015b2:	e01c      	b.n	80015ee <GestionLed+0x186>

	case 5:// Extinction des leds
		  HAL_GPIO_WritePin(GPIOB, L0_Pin, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2102      	movs	r1, #2
 80015b8:	480f      	ldr	r0, [pc, #60]	@ (80015f8 <GestionLed+0x190>)
 80015ba:	f00b fc1f 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L1_Pin, 1);
 80015be:	2201      	movs	r2, #1
 80015c0:	2104      	movs	r1, #4
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <GestionLed+0x190>)
 80015c4:	f00b fc1a 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L2_Pin, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015ce:	480a      	ldr	r0, [pc, #40]	@ (80015f8 <GestionLed+0x190>)
 80015d0:	f00b fc14 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L3_Pin, 1);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015da:	4807      	ldr	r0, [pc, #28]	@ (80015f8 <GestionLed+0x190>)
 80015dc:	f00b fc0e 	bl	800cdfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, L4_Pin, 1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015e6:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <GestionLed+0x190>)
 80015e8:	f00b fc08 	bl	800cdfc <HAL_GPIO_WritePin>
	break;
 80015ec:	bf00      	nop

	}
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40020400 	.word	0x40020400

080015fc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001604:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001608:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001614:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001618:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800161c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001624:	e000      	b.n	8001628 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001626:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001628:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f9      	beq.n	8001626 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001632:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800163c:	687b      	ldr	r3, [r7, #4]
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <TIM6_IRQ>:
  uint32_t out_int;
  uint32_t out_dec;
} displayFloatToInt_t;

void TIM6_IRQ(void)	//Interruption du timer 6 à 1 seconde
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	if(flag_irq){
 800164c:	4b07      	ldr	r3, [pc, #28]	@ (800166c <TIM6_IRQ+0x24>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <TIM6_IRQ+0x14>
		flag_irq = 0;
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <TIM6_IRQ+0x24>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
	}else{
		flag_irq = 1;
	}

}
 800165a:	e002      	b.n	8001662 <TIM6_IRQ+0x1a>
		flag_irq = 1;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <TIM6_IRQ+0x24>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	2000041c 	.word	0x2000041c

08001670 <TIM7_IRQ>:
void TIM7_IRQ(void)//Interruption du timer 7 à 1/2 seconde
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
		display_cons();
 8001674:	f000 f900 	bl	8001878 <display_cons>
		flag_irq = 0;
 8001678:	4b02      	ldr	r3, [pc, #8]	@ (8001684 <TIM7_IRQ+0x14>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000041c 	.word	0x2000041c

08001688 <ACCEL_IRQ>:

void ACCEL_IRQ(void)//Interruprion de l'accel
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
	flag_irq2 = 1;
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <ACCEL_IRQ+0x14>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	2000041d 	.word	0x2000041d

080016a0 <floatToInt>:
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  if(in >= 0.0f)
 80016ac:	f04f 0100 	mov.w	r1, #0
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff fd09 	bl	80010c8 <__aeabi_fcmpge>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <floatToInt+0x24>
  {
    out_value->sign = 0;
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e006      	b.n	80016d2 <floatToInt+0x32>
  }else
  {
    out_value->sign = 1;
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
    in = -in;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80016d0:	60fb      	str	r3, [r7, #12]
  }

  in = in + (0.5 / pow(10, dec_prec));
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f7fe feb8 	bl	8000448 <__aeabi_f2d>
 80016d8:	4604      	mov	r4, r0
 80016da:	460d      	mov	r5, r1
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7fe fea1 	bl	8000424 <__aeabi_i2d>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	f04f 0000 	mov.w	r0, #0
 80016ea:	492a      	ldr	r1, [pc, #168]	@ (8001794 <floatToInt+0xf4>)
 80016ec:	f011 fba4 	bl	8012e38 <pow>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	f04f 0000 	mov.w	r0, #0
 80016f8:	4927      	ldr	r1, [pc, #156]	@ (8001798 <floatToInt+0xf8>)
 80016fa:	f7ff f827 	bl	800074c <__aeabi_ddiv>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4620      	mov	r0, r4
 8001704:	4629      	mov	r1, r5
 8001706:	f7fe fd41 	bl	800018c <__adddf3>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff f9c9 	bl	8000aa8 <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7ff fce8 	bl	80010f0 <__aeabi_f2iz>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fac1 	bl	8000cb4 <__aeabi_ui2f>
 8001732:	4603      	mov	r3, r0
 8001734:	4619      	mov	r1, r3
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f7ff fa0a 	bl	8000b50 <__aeabi_fsub>
 800173c:	4603      	mov	r3, r0
 800173e:	60fb      	str	r3, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7fe fe81 	bl	8000448 <__aeabi_f2d>
 8001746:	4604      	mov	r4, r0
 8001748:	460d      	mov	r5, r1
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe fe6a 	bl	8000424 <__aeabi_i2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	f04f 0000 	mov.w	r0, #0
 8001758:	490e      	ldr	r1, [pc, #56]	@ (8001794 <floatToInt+0xf4>)
 800175a:	f011 fb6d 	bl	8012e38 <pow>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe fec7 	bl	80004f8 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f011 fbcf 	bl	8012f14 <trunc>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff f96b 	bl	8000a58 <__aeabi_d2iz>
 8001782:	4603      	mov	r3, r0
 8001784:	461a      	mov	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	609a      	str	r2, [r3, #8]
}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bdb0      	pop	{r4, r5, r7, pc}
 8001792:	bf00      	nop
 8001794:	40240000 	.word	0x40240000
 8001798:	3fe00000 	.word	0x3fe00000

0800179c <Conf_TEMP>:
/*Fonction d'initialisation du capteur de temperature */
int Conf_TEMP(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	 if(IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE) != BSP_ERROR_NONE)
 80017a0:	2101      	movs	r1, #1
 80017a2:	2002      	movs	r0, #2
 80017a4:	f009 fa6a 	bl	800ac7c <IKS01A3_ENV_SENSOR_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <Conf_TEMP+0x16>
	 {
		 return 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00b      	b.n	80017ca <Conf_TEMP+0x2e>
	 }
	 if(IKS01A3_ENV_SENSOR_SetOutputDataRate(IKS01A3_STTS751_0, ENV_TEMPERATURE, 4.0f) != BSP_ERROR_NONE)
 80017b2:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80017b6:	2101      	movs	r1, #1
 80017b8:	2002      	movs	r0, #2
 80017ba:	f009 fb6d 	bl	800ae98 <IKS01A3_ENV_SENSOR_SetOutputDataRate>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <Conf_TEMP+0x2c>
	 {
		 return 1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <Conf_TEMP+0x2e>
	 }
	return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <Aquire_temp>:

void Aquire_temp(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &Temperature);
 80017d4:	4a09      	ldr	r2, [pc, #36]	@ (80017fc <Aquire_temp+0x2c>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	2002      	movs	r0, #2
 80017da:	f009 fb9f 	bl	800af1c <IKS01A3_ENV_SENSOR_GetValue>
	comp.temp = Temperature*100;
 80017de:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <Aquire_temp+0x2c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4907      	ldr	r1, [pc, #28]	@ (8001800 <Aquire_temp+0x30>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fabd 	bl	8000d64 <__aeabi_fmul>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fca5 	bl	800113c <__aeabi_f2uiz>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a03      	ldr	r2, [pc, #12]	@ (8001804 <Aquire_temp+0x34>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000418 	.word	0x20000418
 8001800:	42c80000 	.word	0x42c80000
 8001804:	20000424 	.word	0x20000424

08001808 <display_temp>:
/*Fonction d'affichage de la temperature sur les 7 segments*/
void display_temp(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
	displayFloatToInt_t out_value;
	floatToInt(Temperature, &out_value, 2);
 800180e:	4b17      	ldr	r3, [pc, #92]	@ (800186c <display_temp+0x64>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1d39      	adds	r1, r7, #4
 8001814:	2202      	movs	r2, #2
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff42 	bl	80016a0 <floatToInt>
	sprintf(buff, "%d", (int)out_value.out_int);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	461a      	mov	r2, r3
 8001820:	4913      	ldr	r1, [pc, #76]	@ (8001870 <display_temp+0x68>)
 8001822:	4814      	ldr	r0, [pc, #80]	@ (8001874 <display_temp+0x6c>)
 8001824:	f010 facc 	bl	8011dc0 <siprintf>
	MAX7219_DisplayChar('1',buff[0]);
 8001828:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <display_temp+0x6c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	2031      	movs	r0, #49	@ 0x31
 8001830:	f000 fce3 	bl	80021fa <MAX7219_DisplayChar>
	MAX7219_DisplayChar1('2',buff[1]);
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <display_temp+0x6c>)
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	4619      	mov	r1, r3
 800183a:	2032      	movs	r0, #50	@ 0x32
 800183c:	f000 fcf4 	bl	8002228 <MAX7219_DisplayChar1>
	sprintf(buff, "%d", (int)out_value.out_dec);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	461a      	mov	r2, r3
 8001844:	490a      	ldr	r1, [pc, #40]	@ (8001870 <display_temp+0x68>)
 8001846:	480b      	ldr	r0, [pc, #44]	@ (8001874 <display_temp+0x6c>)
 8001848:	f010 faba 	bl	8011dc0 <siprintf>
	MAX7219_DisplayChar('3',buff[0]);
 800184c:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <display_temp+0x6c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	2033      	movs	r0, #51	@ 0x33
 8001854:	f000 fcd1 	bl	80021fa <MAX7219_DisplayChar>
	MAX7219_DisplayChar('4',buff[1]);
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <display_temp+0x6c>)
 800185a:	785b      	ldrb	r3, [r3, #1]
 800185c:	4619      	mov	r1, r3
 800185e:	2034      	movs	r0, #52	@ 0x34
 8001860:	f000 fccb 	bl	80021fa <MAX7219_DisplayChar>
}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000418 	.word	0x20000418
 8001870:	08013cd0 	.word	0x08013cd0
 8001874:	20000420 	.word	0x20000420

08001878 <display_cons>:
/*Fonction d'affichage de la temperature sur les 7 segments*/
void display_cons(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
	GestionLed(Aff_Cons);
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff fdf2 	bl	8001468 <GestionLed>
	char buff[4];
	uint32_t cons;
	cons = Aquire_cons();
 8001884:	f000 f822 	bl	80018cc <Aquire_cons>
 8001888:	6078      	str	r0, [r7, #4]
	sprintf(buff, "%4ld", cons);
 800188a:	463b      	mov	r3, r7
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	490e      	ldr	r1, [pc, #56]	@ (80018c8 <display_cons+0x50>)
 8001890:	4618      	mov	r0, r3
 8001892:	f010 fa95 	bl	8011dc0 <siprintf>
	MAX7219_DisplayChar('1',buff[0]);
 8001896:	783b      	ldrb	r3, [r7, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	2031      	movs	r0, #49	@ 0x31
 800189c:	f000 fcad 	bl	80021fa <MAX7219_DisplayChar>
	MAX7219_DisplayChar1('2',buff[1]);
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	4619      	mov	r1, r3
 80018a4:	2032      	movs	r0, #50	@ 0x32
 80018a6:	f000 fcbf 	bl	8002228 <MAX7219_DisplayChar1>
	MAX7219_DisplayChar('3',buff[2]);
 80018aa:	78bb      	ldrb	r3, [r7, #2]
 80018ac:	4619      	mov	r1, r3
 80018ae:	2033      	movs	r0, #51	@ 0x33
 80018b0:	f000 fca3 	bl	80021fa <MAX7219_DisplayChar>
	MAX7219_DisplayChar('4',buff[3]);
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	4619      	mov	r1, r3
 80018b8:	2034      	movs	r0, #52	@ 0x34
 80018ba:	f000 fc9e 	bl	80021fa <MAX7219_DisplayChar>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	08013cd4 	.word	0x08013cd4

080018cc <Aquire_cons>:
	snprintf(dataOut1, MAX_BUF_SIZE, "Temperature: %c%d.%02d degC ", ((out_value.sign > 0) ? '-' : '+'), (int)out_value.out_int, (int)out_value.out_dec);
	printf("%s \r\n", dataOut1);
}
/*Fonction pour recuperer la valeur sur l'ADC*/
uint32_t Aquire_cons(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
	uint32_t Consigne = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc);
 80018d6:	480b      	ldr	r0, [pc, #44]	@ (8001904 <Aquire_cons+0x38>)
 80018d8:	f00a fb50 	bl	800bf7c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1000);
 80018dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018e0:	4808      	ldr	r0, [pc, #32]	@ (8001904 <Aquire_cons+0x38>)
 80018e2:	f00a fbd7 	bl	800c094 <HAL_ADC_PollForConversion>
	Consigne = HAL_ADC_GetValue(&hadc);
 80018e6:	4807      	ldr	r0, [pc, #28]	@ (8001904 <Aquire_cons+0x38>)
 80018e8:	f00a fc64 	bl	800c1b4 <HAL_ADC_GetValue>
 80018ec:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc);
 80018ee:	4805      	ldr	r0, [pc, #20]	@ (8001904 <Aquire_cons+0x38>)
 80018f0:	f00a fba4 	bl	800c03c <HAL_ADC_Stop>
	comp.cons = Consigne;
 80018f4:	4a04      	ldr	r2, [pc, #16]	@ (8001908 <Aquire_cons+0x3c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6053      	str	r3, [r2, #4]
	return Consigne;
 80018fa:	687b      	ldr	r3, [r7, #4]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000224 	.word	0x20000224
 8001908:	20000424 	.word	0x20000424

0800190c <motor>:

void motor(int MotorState)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	if(MotorState){
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00c      	beq.n	8001934 <motor+0x28>

		TIM3->PSC = 32000;
 800191a:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <motor+0x40>)
 800191c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001920:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 1000;
 8001922:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <motor+0x40>)
 8001924:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001928:	62da      	str	r2, [r3, #44]	@ 0x2c
		HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);
 800192a:	2100      	movs	r1, #0
 800192c:	4808      	ldr	r0, [pc, #32]	@ (8001950 <motor+0x44>)
 800192e:	f00f f96d 	bl	8010c0c <HAL_TIM_PWM_Start_IT>
	else{
		GestionLed(All_Off);
		HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_1);
		//printf("Motor Disable \n\r");
	}
}
 8001932:	e006      	b.n	8001942 <motor+0x36>
		GestionLed(All_Off);
 8001934:	2004      	movs	r0, #4
 8001936:	f7ff fd97 	bl	8001468 <GestionLed>
		HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_1);
 800193a:	2100      	movs	r1, #0
 800193c:	4804      	ldr	r0, [pc, #16]	@ (8001950 <motor+0x44>)
 800193e:	f00f fa47 	bl	8010dd0 <HAL_TIM_PWM_Stop_IT>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40000400 	.word	0x40000400
 8001950:	20000310 	.word	0x20000310

08001954 <buzzer>:

void buzzer (int BuzzerState)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	if(BuzzerState)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00e      	beq.n	8001980 <buzzer+0x2c>
	{
		GestionLed(Aff_AlarmAccel);
 8001962:	2003      	movs	r0, #3
 8001964:	f7ff fd80 	bl	8001468 <GestionLed>
		TIM3->PSC = 31;
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <buzzer+0x44>)
 800196a:	221f      	movs	r2, #31
 800196c:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 2278;
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <buzzer+0x44>)
 8001970:	f640 02e6 	movw	r2, #2278	@ 0x8e6
 8001974:	62da      	str	r2, [r3, #44]	@ 0x2c
		HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);
 8001976:	2104      	movs	r1, #4
 8001978:	4808      	ldr	r0, [pc, #32]	@ (800199c <buzzer+0x48>)
 800197a:	f00f f947 	bl	8010c0c <HAL_TIM_PWM_Start_IT>
	}
	else{
		GestionLed(All_Off);
		HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_2);
	}
}
 800197e:	e006      	b.n	800198e <buzzer+0x3a>
		GestionLed(All_Off);
 8001980:	2004      	movs	r0, #4
 8001982:	f7ff fd71 	bl	8001468 <GestionLed>
		HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_2);
 8001986:	2104      	movs	r1, #4
 8001988:	4804      	ldr	r0, [pc, #16]	@ (800199c <buzzer+0x48>)
 800198a:	f00f fa21 	bl	8010dd0 <HAL_TIM_PWM_Stop_IT>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40000400 	.word	0x40000400
 800199c:	20000310 	.word	0x20000310

080019a0 <Conf_ACCEL>:

int Conf_ACCEL(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	  if(IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO) != BSP_ERROR_NONE)
 80019a4:	2102      	movs	r1, #2
 80019a6:	2001      	movs	r0, #1
 80019a8:	f009 fd42 	bl	800b430 <IKS01A3_MOTION_SENSOR_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <Conf_ACCEL+0x1c>
	  {
	 	  printf("Pb of SENSOR_Init\n\r");
 80019b2:	4817      	ldr	r0, [pc, #92]	@ (8001a10 <Conf_ACCEL+0x70>)
 80019b4:	f010 f994 	bl	8011ce0 <iprintf>
	 	  return 1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e026      	b.n	8001a0a <Conf_ACCEL+0x6a>
	  }

	  if(IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE)
 80019bc:	2202      	movs	r2, #2
 80019be:	2102      	movs	r1, #2
 80019c0:	2001      	movs	r0, #1
 80019c2:	f009 fe75 	bl	800b6b0 <IKS01A3_MOTION_SENSOR_SetFullScale>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <Conf_ACCEL+0x36>
	   {
	  	  printf("Pb of SENSOR_SetFullScale\n\r");
 80019cc:	4811      	ldr	r0, [pc, #68]	@ (8001a14 <Conf_ACCEL+0x74>)
 80019ce:	f010 f987 	bl	8011ce0 <iprintf>
	  	  return 1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e019      	b.n	8001a0a <Conf_ACCEL+0x6a>
	   }

	  if(IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, 200.0) != BSP_ERROR_NONE)
 80019d6:	4a10      	ldr	r2, [pc, #64]	@ (8001a18 <Conf_ACCEL+0x78>)
 80019d8:	2102      	movs	r1, #2
 80019da:	2001      	movs	r0, #1
 80019dc:	f009 fe24 	bl	800b628 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d004      	beq.n	80019f0 <Conf_ACCEL+0x50>
	   {
	  	  printf("Pb of accelerometer SENSOR_SetOutputDataRate\n\r");
 80019e6:	480d      	ldr	r0, [pc, #52]	@ (8001a1c <Conf_ACCEL+0x7c>)
 80019e8:	f010 f97a 	bl	8011ce0 <iprintf>
	  	  return 1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e00c      	b.n	8001a0a <Conf_ACCEL+0x6a>
	   }

	  if(IKS01A3_MOTION_SENSOR_Enable_6D_Orientation(IKS01A3_LIS2DW12_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 80019f0:	2100      	movs	r1, #0
 80019f2:	2001      	movs	r0, #1
 80019f4:	f00a f8b0 	bl	800bb58 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d004      	beq.n	8001a08 <Conf_ACCEL+0x68>
		{
		  printf("Pb of accelerometer SENSOR_SetOutputDataRate\n\r");
 80019fe:	4807      	ldr	r0, [pc, #28]	@ (8001a1c <Conf_ACCEL+0x7c>)
 8001a00:	f010 f96e 	bl	8011ce0 <iprintf>
		  return 1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <Conf_ACCEL+0x6a>
		}
return 0;
 8001a08:	2300      	movs	r3, #0

}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	08013d04 	.word	0x08013d04
 8001a14:	08013d18 	.word	0x08013d18
 8001a18:	43480000 	.word	0x43480000
 8001a1c:	08013d34 	.word	0x08013d34

08001a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a24:	f00a f8d4 	bl	800bbd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a28:	f000 f87c 	bl	8001b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a2c:	f000 fabc 	bl	8001fa8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a30:	f000 fa90 	bl	8001f54 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001a34:	f000 f91c 	bl	8001c70 <MX_SPI1_Init>
  MX_ADC_Init();
 8001a38:	f000 f8c2 	bl	8001bc0 <MX_ADC_Init>
  MX_TIM3_Init();
 8001a3c:	f000 f99a 	bl	8001d74 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001a40:	f000 fa1c 	bl	8001e7c <MX_TIM6_Init>
  MX_TIM7_Init();
 8001a44:	f000 fa50 	bl	8001ee8 <MX_TIM7_Init>
  MX_TIM2_Init();
 8001a48:	f000 f948 	bl	8001cdc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("PROJET EnviroSense !!! \r\n");
 8001a4c:	482b      	ldr	r0, [pc, #172]	@ (8001afc <main+0xdc>)
 8001a4e:	f010 f9af 	bl	8011db0 <puts>
  MAX7219_Init();
 8001a52:	f000 fb7d 	bl	8002150 <MAX7219_Init>
  MAX7219_DisplayTestStart();
 8001a56:	f000 fb98 	bl	800218a <MAX7219_DisplayTestStart>
  HAL_Delay(2000);
 8001a5a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a5e:	f00a f925 	bl	800bcac <HAL_Delay>
  MAX7219_DisplayTestStop();
 8001a62:	f000 fb9a 	bl	800219a <MAX7219_DisplayTestStop>
  printf("Display test finished \r\n");
 8001a66:	4826      	ldr	r0, [pc, #152]	@ (8001b00 <main+0xe0>)
 8001a68:	f010 f9a2 	bl	8011db0 <puts>
  Conf_TEMP();
 8001a6c:	f7ff fe96 	bl	800179c <Conf_TEMP>
  Conf_ACCEL();
 8001a70:	f7ff ff96 	bl	80019a0 <Conf_ACCEL>
  if(HAL_TIM_Base_Start_IT(&htim6)!= HAL_OK)
 8001a74:	4823      	ldr	r0, [pc, #140]	@ (8001b04 <main+0xe4>)
 8001a76:	f00f f809 	bl	8010a8c <HAL_TIM_Base_Start_IT>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <main+0x64>
  {
    Error_Handler();
 8001a80:	f000 fb49 	bl	8002116 <Error_Handler>
  }
  printf("Timer 6 enabled\r\n");
 8001a84:	4820      	ldr	r0, [pc, #128]	@ (8001b08 <main+0xe8>)
 8001a86:	f010 f993 	bl	8011db0 <puts>

  HAL_TIM_Base_Start_IT(&htim3);
 8001a8a:	4820      	ldr	r0, [pc, #128]	@ (8001b0c <main+0xec>)
 8001a8c:	f00e fffe 	bl	8010a8c <HAL_TIM_Base_Start_IT>
  Aquire_cons();
 8001a90:	f7ff ff1c 	bl	80018cc <Aquire_cons>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Aquire_temp();	//Aquisition de la temperature
 8001a94:	f7ff fe9c 	bl	80017d0 <Aquire_temp>

	  if(flag_irq ==1) //On test le flag du timer 6
 8001a98:	4b1d      	ldr	r3, [pc, #116]	@ (8001b10 <main+0xf0>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d117      	bne.n	8001ad0 <main+0xb0>
	  {
		  display_temp();	//Affichage de la température sur les afficheurs 7 segments
 8001aa0:	f7ff feb2 	bl	8001808 <display_temp>
		  if(comp.cons < comp.temp){
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <main+0xf4>)
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <main+0xf4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d209      	bcs.n	8001ac4 <main+0xa4>
			  printf("consigne < temperature !! \r\n");
 8001ab0:	4819      	ldr	r0, [pc, #100]	@ (8001b18 <main+0xf8>)
 8001ab2:	f010 f97d 	bl	8011db0 <puts>
			  GestionLed(Aff_AlarmTemp);
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	f7ff fcd6 	bl	8001468 <GestionLed>
			  motor(1);//On active le moteur
 8001abc:	2001      	movs	r0, #1
 8001abe:	f7ff ff25 	bl	800190c <motor>
 8001ac2:	e005      	b.n	8001ad0 <main+0xb0>
		  }
		  else{
			  GestionLed(Aff_Temp);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff fccf 	bl	8001468 <GestionLed>
			 motor(0);//On eteind le moteur
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7ff ff1e 	bl	800190c <motor>
		  }
	  }
	  if(flag_irq2 ==1)//On test le flag de l'interruption de l'accel
 8001ad0:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <main+0xfc>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d1dd      	bne.n	8001a94 <main+0x74>
	  {
		  flag_irq2 = 0;
 8001ad8:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <main+0xfc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
		  printf("je buzzz !! \r\n");
 8001ade:	4810      	ldr	r0, [pc, #64]	@ (8001b20 <main+0x100>)
 8001ae0:	f010 f966 	bl	8011db0 <puts>
		  buzzer (1);// On buzzz
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f7ff ff35 	bl	8001954 <buzzer>
		  HAL_Delay(1000); //On attend 1 seconde
 8001aea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aee:	f00a f8dd 	bl	800bcac <HAL_Delay>
		  buzzer(0);//On eteind le buzzer
 8001af2:	2000      	movs	r0, #0
 8001af4:	f7ff ff2e 	bl	8001954 <buzzer>
	  Aquire_temp();	//Aquisition de la temperature
 8001af8:	e7cc      	b.n	8001a94 <main+0x74>
 8001afa:	bf00      	nop
 8001afc:	08013d64 	.word	0x08013d64
 8001b00:	08013d80 	.word	0x08013d80
 8001b04:	20000350 	.word	0x20000350
 8001b08:	08013d98 	.word	0x08013d98
 8001b0c:	20000310 	.word	0x20000310
 8001b10:	2000041c 	.word	0x2000041c
 8001b14:	20000424 	.word	0x20000424
 8001b18:	08013dac 	.word	0x08013dac
 8001b1c:	2000041d 	.word	0x2000041d
 8001b20:	08013dc8 	.word	0x08013dc8

08001b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b092      	sub	sp, #72	@ 0x48
 8001b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	2234      	movs	r2, #52	@ 0x34
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f010 fa3c 	bl	8011fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b46:	4b1d      	ldr	r3, [pc, #116]	@ (8001bbc <SystemClock_Config+0x98>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001bbc <SystemClock_Config+0x98>)
 8001b50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b54:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b56:	2302      	movs	r3, #2
 8001b58:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b5e:	2310      	movs	r3, #16
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b62:	2302      	movs	r3, #2
 8001b64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b66:	2300      	movs	r3, #0
 8001b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001b6a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001b70:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001b74:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f00d feba 	bl	800f8f4 <HAL_RCC_OscConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b86:	f000 fac6 	bl	8002116 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b8a:	230f      	movs	r3, #15
 8001b8c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f00e f9d6 	bl	800ff54 <HAL_RCC_ClockConfig>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001bae:	f000 fab2 	bl	8002116 <Error_Handler>
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3748      	adds	r7, #72	@ 0x48
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40007000 	.word	0x40007000

08001bc0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001bd0:	4b25      	ldr	r3, [pc, #148]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001bd2:	4a26      	ldr	r2, [pc, #152]	@ (8001c6c <MX_ADC_Init+0xac>)
 8001bd4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bd6:	4b24      	ldr	r3, [pc, #144]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001bdc:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001be2:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001be8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001bee:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001c00:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001c06:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8001c0e:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001c1e:	2210      	movs	r2, #16
 8001c20:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c22:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001c30:	480d      	ldr	r0, [pc, #52]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001c32:	f00a f85d 	bl	800bcf0 <HAL_ADC_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001c3c:	f000 fa6b 	bl	8002116 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	@ (8001c68 <MX_ADC_Init+0xa8>)
 8001c52:	f00a fabb 	bl	800c1cc <HAL_ADC_ConfigChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001c5c:	f000 fa5b 	bl	8002116 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000224 	.word	0x20000224
 8001c6c:	40012400 	.word	0x40012400

08001c70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c74:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <MX_SPI1_Init+0x64>)
 8001c76:	4a18      	ldr	r2, [pc, #96]	@ (8001cd8 <MX_SPI1_Init+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c7a:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <MX_SPI1_Init+0x64>)
 8001c7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c82:	4b14      	ldr	r3, [pc, #80]	@ (8001cd4 <MX_SPI1_Init+0x64>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c88:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <MX_SPI1_Init+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <MX_SPI1_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <MX_SPI1_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <MX_SPI1_Init+0x64>)
 8001c9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ca0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <MX_SPI1_Init+0x64>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <MX_SPI1_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cae:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <MX_SPI1_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb4:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <MX_SPI1_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cba:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <MX_SPI1_Init+0x64>)
 8001cbc:	220a      	movs	r2, #10
 8001cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cc0:	4804      	ldr	r0, [pc, #16]	@ (8001cd4 <MX_SPI1_Init+0x64>)
 8001cc2:	f00e fc0d 	bl	80104e0 <HAL_SPI_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ccc:	f000 fa23 	bl	8002116 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000278 	.word	0x20000278
 8001cd8:	40013000 	.word	0x40013000

08001cdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce2:	f107 0308 	add.w	r3, r7, #8
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d70 <MX_TIM2_Init+0x94>)
 8001cfa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8001d00:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <MX_TIM2_Init+0x94>)
 8001d02:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001d06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d08:	4b19      	ldr	r3, [pc, #100]	@ (8001d70 <MX_TIM2_Init+0x94>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8001d0e:	4b18      	ldr	r3, [pc, #96]	@ (8001d70 <MX_TIM2_Init+0x94>)
 8001d10:	22c8      	movs	r2, #200	@ 0xc8
 8001d12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d14:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <MX_TIM2_Init+0x94>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1a:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <MX_TIM2_Init+0x94>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d20:	4813      	ldr	r0, [pc, #76]	@ (8001d70 <MX_TIM2_Init+0x94>)
 8001d22:	f00e fe73 	bl	8010a0c <HAL_TIM_Base_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d2c:	f000 f9f3 	bl	8002116 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480c      	ldr	r0, [pc, #48]	@ (8001d70 <MX_TIM2_Init+0x94>)
 8001d3e:	f00f fa6f 	bl	8011220 <HAL_TIM_ConfigClockSource>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d48:	f000 f9e5 	bl	8002116 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d54:	463b      	mov	r3, r7
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <MX_TIM2_Init+0x94>)
 8001d5a:	f00f fd6d 	bl	8011838 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d64:	f000 f9d7 	bl	8002116 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200002d0 	.word	0x200002d0

08001d74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	@ 0x28
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7a:	f107 0318 	add.w	r3, r7, #24
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d92:	463b      	mov	r3, r7
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d9e:	4b35      	ldr	r3, [pc, #212]	@ (8001e74 <MX_TIM3_Init+0x100>)
 8001da0:	4a35      	ldr	r2, [pc, #212]	@ (8001e78 <MX_TIM3_Init+0x104>)
 8001da2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000;
 8001da4:	4b33      	ldr	r3, [pc, #204]	@ (8001e74 <MX_TIM3_Init+0x100>)
 8001da6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001daa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dac:	4b31      	ldr	r3, [pc, #196]	@ (8001e74 <MX_TIM3_Init+0x100>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001db2:	4b30      	ldr	r3, [pc, #192]	@ (8001e74 <MX_TIM3_Init+0x100>)
 8001db4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001db8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dba:	4b2e      	ldr	r3, [pc, #184]	@ (8001e74 <MX_TIM3_Init+0x100>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e74 <MX_TIM3_Init+0x100>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dc6:	482b      	ldr	r0, [pc, #172]	@ (8001e74 <MX_TIM3_Init+0x100>)
 8001dc8:	f00e fe20 	bl	8010a0c <HAL_TIM_Base_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001dd2:	f000 f9a0 	bl	8002116 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dda:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ddc:	f107 0318 	add.w	r3, r7, #24
 8001de0:	4619      	mov	r1, r3
 8001de2:	4824      	ldr	r0, [pc, #144]	@ (8001e74 <MX_TIM3_Init+0x100>)
 8001de4:	f00f fa1c 	bl	8011220 <HAL_TIM_ConfigClockSource>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001dee:	f000 f992 	bl	8002116 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001df2:	4820      	ldr	r0, [pc, #128]	@ (8001e74 <MX_TIM3_Init+0x100>)
 8001df4:	f00e fec2 	bl	8010b7c <HAL_TIM_PWM_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001dfe:	f000 f98a 	bl	8002116 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e0a:	f107 0310 	add.w	r3, r7, #16
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4818      	ldr	r0, [pc, #96]	@ (8001e74 <MX_TIM3_Init+0x100>)
 8001e12:	f00f fd11 	bl	8011838 <HAL_TIMEx_MasterConfigSynchronization>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001e1c:	f000 f97b 	bl	8002116 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e20:	2360      	movs	r3, #96	@ 0x60
 8001e22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001e24:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e32:	463b      	mov	r3, r7
 8001e34:	2200      	movs	r2, #0
 8001e36:	4619      	mov	r1, r3
 8001e38:	480e      	ldr	r0, [pc, #56]	@ (8001e74 <MX_TIM3_Init+0x100>)
 8001e3a:	f00f f92f 	bl	801109c <HAL_TIM_PWM_ConfigChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001e44:	f000 f967 	bl	8002116 <Error_Handler>
  }
  sConfigOC.Pulse = 1319;
 8001e48:	f240 5327 	movw	r3, #1319	@ 0x527
 8001e4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e4e:	463b      	mov	r3, r7
 8001e50:	2204      	movs	r2, #4
 8001e52:	4619      	mov	r1, r3
 8001e54:	4807      	ldr	r0, [pc, #28]	@ (8001e74 <MX_TIM3_Init+0x100>)
 8001e56:	f00f f921 	bl	801109c <HAL_TIM_PWM_ConfigChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001e60:	f000 f959 	bl	8002116 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e64:	4803      	ldr	r0, [pc, #12]	@ (8001e74 <MX_TIM3_Init+0x100>)
 8001e66:	f000 fb9b 	bl	80025a0 <HAL_TIM_MspPostInit>

}
 8001e6a:	bf00      	nop
 8001e6c:	3728      	adds	r7, #40	@ 0x28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000310 	.word	0x20000310
 8001e78:	40000400 	.word	0x40000400

08001e7c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e82:	463b      	mov	r3, r7
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <MX_TIM6_Init+0x64>)
 8001e8c:	4a15      	ldr	r2, [pc, #84]	@ (8001ee4 <MX_TIM6_Init+0x68>)
 8001e8e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000;
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <MX_TIM6_Init+0x64>)
 8001e92:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001e96:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <MX_TIM6_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <MX_TIM6_Init+0x64>)
 8001ea0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ea4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <MX_TIM6_Init+0x64>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001eac:	480c      	ldr	r0, [pc, #48]	@ (8001ee0 <MX_TIM6_Init+0x64>)
 8001eae:	f00e fdad 	bl	8010a0c <HAL_TIM_Base_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001eb8:	f000 f92d 	bl	8002116 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <MX_TIM6_Init+0x64>)
 8001eca:	f00f fcb5 	bl	8011838 <HAL_TIMEx_MasterConfigSynchronization>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ed4:	f000 f91f 	bl	8002116 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000350 	.word	0x20000350
 8001ee4:	40001000 	.word	0x40001000

08001ee8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eee:	463b      	mov	r3, r7
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <MX_TIM7_Init+0x64>)
 8001ef8:	4a15      	ldr	r2, [pc, #84]	@ (8001f50 <MX_TIM7_Init+0x68>)
 8001efa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32000;
 8001efc:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <MX_TIM7_Init+0x64>)
 8001efe:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001f02:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f04:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <MX_TIM7_Init+0x64>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <MX_TIM7_Init+0x64>)
 8001f0c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001f10:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <MX_TIM7_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f18:	480c      	ldr	r0, [pc, #48]	@ (8001f4c <MX_TIM7_Init+0x64>)
 8001f1a:	f00e fd77 	bl	8010a0c <HAL_TIM_Base_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001f24:	f000 f8f7 	bl	8002116 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f30:	463b      	mov	r3, r7
 8001f32:	4619      	mov	r1, r3
 8001f34:	4805      	ldr	r0, [pc, #20]	@ (8001f4c <MX_TIM7_Init+0x64>)
 8001f36:	f00f fc7f 	bl	8011838 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001f40:	f000 f8e9 	bl	8002116 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000390 	.word	0x20000390
 8001f50:	40001400 	.word	0x40001400

08001f54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f58:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	@ (8001fa4 <MX_USART2_UART_Init+0x50>)
 8001f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f5e:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f78:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f84:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f8a:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f8c:	f00f fcb2 	bl	80118f4 <HAL_UART_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f96:	f000 f8be 	bl	8002116 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200003d0 	.word	0x200003d0
 8001fa4:	40004400 	.word	0x40004400

08001fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80020ec <MX_GPIO_Init+0x144>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a4a      	ldr	r2, [pc, #296]	@ (80020ec <MX_GPIO_Init+0x144>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	61d3      	str	r3, [r2, #28]
 8001fca:	4b48      	ldr	r3, [pc, #288]	@ (80020ec <MX_GPIO_Init+0x144>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd6:	4b45      	ldr	r3, [pc, #276]	@ (80020ec <MX_GPIO_Init+0x144>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a44      	ldr	r2, [pc, #272]	@ (80020ec <MX_GPIO_Init+0x144>)
 8001fdc:	f043 0320 	orr.w	r3, r3, #32
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	4b42      	ldr	r3, [pc, #264]	@ (80020ec <MX_GPIO_Init+0x144>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	4b3f      	ldr	r3, [pc, #252]	@ (80020ec <MX_GPIO_Init+0x144>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	4a3e      	ldr	r2, [pc, #248]	@ (80020ec <MX_GPIO_Init+0x144>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	61d3      	str	r3, [r2, #28]
 8001ffa:	4b3c      	ldr	r3, [pc, #240]	@ (80020ec <MX_GPIO_Init+0x144>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	4b39      	ldr	r3, [pc, #228]	@ (80020ec <MX_GPIO_Init+0x144>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a38      	ldr	r2, [pc, #224]	@ (80020ec <MX_GPIO_Init+0x144>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b36      	ldr	r3, [pc, #216]	@ (80020ec <MX_GPIO_Init+0x144>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L0_Pin|L1_Pin|L2_Pin|L3_Pin
 800201e:	2200      	movs	r2, #0
 8002020:	f641 4106 	movw	r1, #7174	@ 0x1c06
 8002024:	4832      	ldr	r0, [pc, #200]	@ (80020f0 <MX_GPIO_Init+0x148>)
 8002026:	f00a fee9 	bl	800cdfc <HAL_GPIO_WritePin>
                          |L4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800202a:	2200      	movs	r2, #0
 800202c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002030:	4830      	ldr	r0, [pc, #192]	@ (80020f4 <MX_GPIO_Init+0x14c>)
 8002032:	f00a fee3 	bl	800cdfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002036:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800203a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800203c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002042:	2302      	movs	r3, #2
 8002044:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	482a      	ldr	r0, [pc, #168]	@ (80020f8 <MX_GPIO_Init+0x150>)
 800204e:	f00a fc55 	bl	800c8fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Accel_INT_Pin */
  GPIO_InitStruct.Pin = Accel_INT_Pin;
 8002052:	2301      	movs	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002056:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800205a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Accel_INT_GPIO_Port, &GPIO_InitStruct);
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4619      	mov	r1, r3
 8002066:	4822      	ldr	r0, [pc, #136]	@ (80020f0 <MX_GPIO_Init+0x148>)
 8002068:	f00a fc48 	bl	800c8fc <HAL_GPIO_Init>

  /*Configure GPIO pins : L0_Pin L1_Pin L2_Pin L3_Pin
                           L4_Pin */
  GPIO_InitStruct.Pin = L0_Pin|L1_Pin|L2_Pin|L3_Pin
 800206c:	f641 4306 	movw	r3, #7174	@ 0x1c06
 8002070:	617b      	str	r3, [r7, #20]
                          |L4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	481a      	ldr	r0, [pc, #104]	@ (80020f0 <MX_GPIO_Init+0x148>)
 8002086:	f00a fc39 	bl	800c8fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800208a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800208e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002090:	2301      	movs	r3, #1
 8002092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	4814      	ldr	r0, [pc, #80]	@ (80020f4 <MX_GPIO_Init+0x14c>)
 80020a4:	f00a fc2a 	bl	800c8fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020a8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80020ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <MX_GPIO_Init+0x14c>)
 80020c0:	f00a fc1c 	bl	800c8fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	2006      	movs	r0, #6
 80020ca:	f00a fb84 	bl	800c7d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020ce:	2006      	movs	r0, #6
 80020d0:	f00a fb9d 	bl	800c80e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2100      	movs	r1, #0
 80020d8:	2028      	movs	r0, #40	@ 0x28
 80020da:	f00a fb7c 	bl	800c7d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020de:	2028      	movs	r0, #40	@ 0x28
 80020e0:	f00a fb95 	bl	800c80e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020e4:	bf00      	nop
 80020e6:	3728      	adds	r7, #40	@ 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020400 	.word	0x40020400
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020800 	.word	0x40020800

080020fc <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
	ITM_SendChar(ch);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fa78 	bl	80015fc <ITM_SendChar>
	return(ch);
 800210c:	687b      	ldr	r3, [r7, #4]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq(); //Modif pour eviter le freeze
  while (1)
 800211a:	bf00      	nop
 800211c:	e7fd      	b.n	800211a <Error_Handler+0x4>
	...

08002120 <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8002124:	2201      	movs	r2, #1
 8002126:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800212a:	4802      	ldr	r0, [pc, #8]	@ (8002134 <SPI_CS_High+0x14>)
 800212c:	f00a fe66 	bl	800cdfc <HAL_GPIO_WritePin>
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40020000 	.word	0x40020000

08002138 <SPI_CS_Low>:

 void SPI_CS_Low()
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800213c:	2200      	movs	r2, #0
 800213e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002142:	4802      	ldr	r0, [pc, #8]	@ (800214c <SPI_CS_Low+0x14>)
 8002144:	f00a fe5a 	bl	800cdfc <HAL_GPIO_WritePin>
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40020000 	.word	0x40020000

08002150 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 8002154:	2107      	movs	r1, #7
 8002156:	200b      	movs	r0, #11
 8002158:	f000 f8ca 	bl	80022f0 <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 800215c:	2100      	movs	r1, #0
 800215e:	2009      	movs	r0, #9
 8002160:	f000 f8c6 	bl	80022f0 <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 8002164:	f000 f809 	bl	800217a <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8002168:	f000 f817 	bl	800219a <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 800216c:	f000 f82f 	bl	80021ce <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8002170:	200f      	movs	r0, #15
 8002172:	f000 f81a 	bl	80021aa <MAX7219_SetBrightness>
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}

0800217a <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 800217e:	2101      	movs	r1, #1
 8002180:	200c      	movs	r0, #12
 8002182:	f000 f8b5 	bl	80022f0 <MAX7219_Write>
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}

0800218a <MAX7219_DisplayTestStart>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStart (void)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 1);                 // put MAX7219 into "display test" mode
 800218e:	2101      	movs	r1, #1
 8002190:	200f      	movs	r0, #15
 8002192:	f000 f8ad 	bl	80022f0 <MAX7219_Write>
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}

0800219a <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 800219e:	2100      	movs	r1, #0
 80021a0:	200f      	movs	r0, #15
 80021a2:	f000 f8a5 	bl	80022f0 <MAX7219_Write>
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}

080021aa <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4619      	mov	r1, r3
 80021c0:	200a      	movs	r0, #10
 80021c2:	f000 f895 	bl	80022f0 <MAX7219_Write>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 80021d4:	2300      	movs	r3, #0
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	e007      	b.n	80021ea <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f886 	bl	80022f0 <MAX7219_Write>
  for (i=0; i < 8; i++)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	3301      	adds	r3, #1
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	2b07      	cmp	r3, #7
 80021ee:	d9f4      	bls.n	80021da <MAX7219_Clear+0xc>
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <MAX7219_DisplayChar>:
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar (char digit, char character)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	460a      	mov	r2, r1
 8002204:	71fb      	strb	r3, [r7, #7]
 8002206:	4613      	mov	r3, r2
 8002208:	71bb      	strb	r3, [r7, #6]
  MAX7219_Write(digit, MAX7219_LookupCode(character));
 800220a:	79bb      	ldrb	r3, [r7, #6]
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f823 	bl	8002258 <MAX7219_LookupCode>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f868 	bl	80022f0 <MAX7219_Write>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <MAX7219_DisplayChar1>:

void MAX7219_DisplayChar1 (char digit, char character)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	460a      	mov	r2, r1
 8002232:	71fb      	strb	r3, [r7, #7]
 8002234:	4613      	mov	r3, r2
 8002236:	71bb      	strb	r3, [r7, #6]
  MAX7219_Write(digit, MAX7219_LookupCode1(character));
 8002238:	79bb      	ldrb	r3, [r7, #6]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f832 	bl	80022a4 <MAX7219_LookupCode1>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f000 f851 	bl	80022f0 <MAX7219_Write>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <MAX7219_LookupCode>:
* Arguments  : character to display
* Returns    : segment code
*********************************************************************************************************
*/
static unsigned char MAX7219_LookupCode (char character)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e00f      	b.n	8002288 <MAX7219_LookupCode+0x30>
    if (character == MAX7219_Font[i].ascii)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	4a0d      	ldr	r2, [pc, #52]	@ (80022a0 <MAX7219_LookupCode+0x48>)
 800226c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002270:	79fa      	ldrb	r2, [r7, #7]
 8002272:	429a      	cmp	r2, r3
 8002274:	d105      	bne.n	8002282 <MAX7219_LookupCode+0x2a>
      return MAX7219_Font[i].segs;                    // return segments code
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	4a09      	ldr	r2, [pc, #36]	@ (80022a0 <MAX7219_LookupCode+0x48>)
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	785b      	ldrb	r3, [r3, #1]
 8002280:	e009      	b.n	8002296 <MAX7219_LookupCode+0x3e>
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	3301      	adds	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	4a05      	ldr	r2, [pc, #20]	@ (80022a0 <MAX7219_LookupCode+0x48>)
 800228c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e9      	bne.n	8002268 <MAX7219_LookupCode+0x10>
  return 0;                                           // code not found, return null (blank)
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	08013df0 	.word	0x08013df0

080022a4 <MAX7219_LookupCode1>:

static unsigned char MAX7219_LookupCode1 (char character)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font1[i].ascii1; i++)             // scan font table for ascii code
 80022ae:	2300      	movs	r3, #0
 80022b0:	73fb      	strb	r3, [r7, #15]
 80022b2:	e00f      	b.n	80022d4 <MAX7219_LookupCode1+0x30>
    if (character == MAX7219_Font1[i].ascii1)
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	4a0d      	ldr	r2, [pc, #52]	@ (80022ec <MAX7219_LookupCode1+0x48>)
 80022b8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80022bc:	79fa      	ldrb	r2, [r7, #7]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d105      	bne.n	80022ce <MAX7219_LookupCode1+0x2a>
      return MAX7219_Font1[i].segs1;                    // return segments code
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	4a09      	ldr	r2, [pc, #36]	@ (80022ec <MAX7219_LookupCode1+0x48>)
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	785b      	ldrb	r3, [r3, #1]
 80022cc:	e009      	b.n	80022e2 <MAX7219_LookupCode1+0x3e>
  for (i = 0; MAX7219_Font1[i].ascii1; i++)             // scan font table for ascii code
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	3301      	adds	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	4a05      	ldr	r2, [pc, #20]	@ (80022ec <MAX7219_LookupCode1+0x48>)
 80022d8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e9      	bne.n	80022b4 <MAX7219_LookupCode1+0x10>
  return 0;                                           // code not found, return null (blank)
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	08013e2c 	.word	0x08013e2c

080022f0 <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	460a      	mov	r2, r1
 80022fa:	71fb      	strb	r3, [r7, #7]
 80022fc:	4613      	mov	r3, r2
 80022fe:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 8002300:	f7ff ff1a 	bl	8002138 <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f80c 	bl	8002324 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 800230c:	79bb      	ldrb	r3, [r7, #6]
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f808 	bl	8002324 <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 8002314:	f7ff ff04 	bl	8002120 <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 8002318:	f7ff ff0e 	bl	8002138 <SPI_CS_Low>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 800232e:	1df9      	adds	r1, r7, #7
 8002330:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002334:	2201      	movs	r2, #1
 8002336:	4803      	ldr	r0, [pc, #12]	@ (8002344 <MAX7219_SendByte+0x20>)
 8002338:	f00e f95b 	bl	80105f2 <HAL_SPI_Transmit>
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000278 	.word	0x20000278

08002348 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800234e:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <HAL_MspInit+0x5c>)
 8002350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002352:	4a14      	ldr	r2, [pc, #80]	@ (80023a4 <HAL_MspInit+0x5c>)
 8002354:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002358:	6253      	str	r3, [r2, #36]	@ 0x24
 800235a:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <HAL_MspInit+0x5c>)
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	4b0f      	ldr	r3, [pc, #60]	@ (80023a4 <HAL_MspInit+0x5c>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4a0e      	ldr	r2, [pc, #56]	@ (80023a4 <HAL_MspInit+0x5c>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6213      	str	r3, [r2, #32]
 8002372:	4b0c      	ldr	r3, [pc, #48]	@ (80023a4 <HAL_MspInit+0x5c>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	4b09      	ldr	r3, [pc, #36]	@ (80023a4 <HAL_MspInit+0x5c>)
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	4a08      	ldr	r2, [pc, #32]	@ (80023a4 <HAL_MspInit+0x5c>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002388:	6253      	str	r3, [r2, #36]	@ 0x24
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_MspInit+0x5c>)
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002396:	2007      	movs	r0, #7
 8002398:	f00a fa12 	bl	800c7c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800

080023a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	@ 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a15      	ldr	r2, [pc, #84]	@ (800241c <HAL_ADC_MspInit+0x74>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d123      	bne.n	8002412 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <HAL_ADC_MspInit+0x78>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a14      	ldr	r2, [pc, #80]	@ (8002420 <HAL_ADC_MspInit+0x78>)
 80023d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023d4:	6213      	str	r3, [r2, #32]
 80023d6:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <HAL_ADC_MspInit+0x78>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <HAL_ADC_MspInit+0x78>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002420 <HAL_ADC_MspInit+0x78>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	61d3      	str	r3, [r2, #28]
 80023ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <HAL_ADC_MspInit+0x78>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023fa:	2301      	movs	r3, #1
 80023fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023fe:	2303      	movs	r3, #3
 8002400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	@ (8002424 <HAL_ADC_MspInit+0x7c>)
 800240e:	f00a fa75 	bl	800c8fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	@ 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40012400 	.word	0x40012400
 8002420:	40023800 	.word	0x40023800
 8002424:	40020000 	.word	0x40020000

08002428 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a17      	ldr	r2, [pc, #92]	@ (80024a4 <HAL_SPI_MspInit+0x7c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d127      	bne.n	800249a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800244a:	4b17      	ldr	r3, [pc, #92]	@ (80024a8 <HAL_SPI_MspInit+0x80>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4a16      	ldr	r2, [pc, #88]	@ (80024a8 <HAL_SPI_MspInit+0x80>)
 8002450:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002454:	6213      	str	r3, [r2, #32]
 8002456:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <HAL_SPI_MspInit+0x80>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_SPI_MspInit+0x80>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a10      	ldr	r2, [pc, #64]	@ (80024a8 <HAL_SPI_MspInit+0x80>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	61d3      	str	r3, [r2, #28]
 800246e:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <HAL_SPI_MspInit+0x80>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800247a:	23e0      	movs	r3, #224	@ 0xe0
 800247c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002486:	2303      	movs	r3, #3
 8002488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800248a:	2305      	movs	r3, #5
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	4619      	mov	r1, r3
 8002494:	4805      	ldr	r0, [pc, #20]	@ (80024ac <HAL_SPI_MspInit+0x84>)
 8002496:	f00a fa31 	bl	800c8fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800249a:	bf00      	nop
 800249c:	3728      	adds	r7, #40	@ 0x28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40013000 	.word	0x40013000
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020000 	.word	0x40020000

080024b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c0:	d114      	bne.n	80024ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024c2:	4b33      	ldr	r3, [pc, #204]	@ (8002590 <HAL_TIM_Base_MspInit+0xe0>)
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	4a32      	ldr	r2, [pc, #200]	@ (8002590 <HAL_TIM_Base_MspInit+0xe0>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6253      	str	r3, [r2, #36]	@ 0x24
 80024ce:	4b30      	ldr	r3, [pc, #192]	@ (8002590 <HAL_TIM_Base_MspInit+0xe0>)
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	201c      	movs	r0, #28
 80024e0:	f00a f979 	bl	800c7d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024e4:	201c      	movs	r0, #28
 80024e6:	f00a f992 	bl	800c80e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80024ea:	e04c      	b.n	8002586 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a28      	ldr	r2, [pc, #160]	@ (8002594 <HAL_TIM_Base_MspInit+0xe4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d114      	bne.n	8002520 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024f6:	4b26      	ldr	r3, [pc, #152]	@ (8002590 <HAL_TIM_Base_MspInit+0xe0>)
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	4a25      	ldr	r2, [pc, #148]	@ (8002590 <HAL_TIM_Base_MspInit+0xe0>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	6253      	str	r3, [r2, #36]	@ 0x24
 8002502:	4b23      	ldr	r3, [pc, #140]	@ (8002590 <HAL_TIM_Base_MspInit+0xe0>)
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	2100      	movs	r1, #0
 8002512:	201d      	movs	r0, #29
 8002514:	f00a f95f 	bl	800c7d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002518:	201d      	movs	r0, #29
 800251a:	f00a f978 	bl	800c80e <HAL_NVIC_EnableIRQ>
}
 800251e:	e032      	b.n	8002586 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1c      	ldr	r2, [pc, #112]	@ (8002598 <HAL_TIM_Base_MspInit+0xe8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d114      	bne.n	8002554 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800252a:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <HAL_TIM_Base_MspInit+0xe0>)
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	4a18      	ldr	r2, [pc, #96]	@ (8002590 <HAL_TIM_Base_MspInit+0xe0>)
 8002530:	f043 0310 	orr.w	r3, r3, #16
 8002534:	6253      	str	r3, [r2, #36]	@ 0x24
 8002536:	4b16      	ldr	r3, [pc, #88]	@ (8002590 <HAL_TIM_Base_MspInit+0xe0>)
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	202b      	movs	r0, #43	@ 0x2b
 8002548:	f00a f945 	bl	800c7d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800254c:	202b      	movs	r0, #43	@ 0x2b
 800254e:	f00a f95e 	bl	800c80e <HAL_NVIC_EnableIRQ>
}
 8002552:	e018      	b.n	8002586 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a10      	ldr	r2, [pc, #64]	@ (800259c <HAL_TIM_Base_MspInit+0xec>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d113      	bne.n	8002586 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800255e:	4b0c      	ldr	r3, [pc, #48]	@ (8002590 <HAL_TIM_Base_MspInit+0xe0>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	4a0b      	ldr	r2, [pc, #44]	@ (8002590 <HAL_TIM_Base_MspInit+0xe0>)
 8002564:	f043 0320 	orr.w	r3, r3, #32
 8002568:	6253      	str	r3, [r2, #36]	@ 0x24
 800256a:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <HAL_TIM_Base_MspInit+0xe0>)
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 1);
 8002576:	2201      	movs	r2, #1
 8002578:	2100      	movs	r1, #0
 800257a:	202c      	movs	r0, #44	@ 0x2c
 800257c:	f00a f92b 	bl	800c7d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002580:	202c      	movs	r0, #44	@ 0x2c
 8002582:	f00a f944 	bl	800c80e <HAL_NVIC_EnableIRQ>
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
 8002594:	40000400 	.word	0x40000400
 8002598:	40001000 	.word	0x40001000
 800259c:	40001400 	.word	0x40001400

080025a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	@ 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1f      	ldr	r2, [pc, #124]	@ (800263c <HAL_TIM_MspPostInit+0x9c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d137      	bne.n	8002632 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002640 <HAL_TIM_MspPostInit+0xa0>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002640 <HAL_TIM_MspPostInit+0xa0>)
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	61d3      	str	r3, [r2, #28]
 80025ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002640 <HAL_TIM_MspPostInit+0xa0>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025da:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <HAL_TIM_MspPostInit+0xa0>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	4a18      	ldr	r2, [pc, #96]	@ (8002640 <HAL_TIM_MspPostInit+0xa0>)
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	61d3      	str	r3, [r2, #28]
 80025e6:	4b16      	ldr	r3, [pc, #88]	@ (8002640 <HAL_TIM_MspPostInit+0xa0>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzz_Pin;
 80025f2:	2380      	movs	r3, #128	@ 0x80
 80025f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002602:	2302      	movs	r3, #2
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Buzz_GPIO_Port, &GPIO_InitStruct);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	4619      	mov	r1, r3
 800260c:	480d      	ldr	r0, [pc, #52]	@ (8002644 <HAL_TIM_MspPostInit+0xa4>)
 800260e:	f00a f975 	bl	800c8fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002612:	2310      	movs	r3, #16
 8002614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002622:	2302      	movs	r3, #2
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	4619      	mov	r1, r3
 800262c:	4806      	ldr	r0, [pc, #24]	@ (8002648 <HAL_TIM_MspPostInit+0xa8>)
 800262e:	f00a f965 	bl	800c8fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002632:	bf00      	nop
 8002634:	3728      	adds	r7, #40	@ 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40000400 	.word	0x40000400
 8002640:	40023800 	.word	0x40023800
 8002644:	40020800 	.word	0x40020800
 8002648:	40020400 	.word	0x40020400

0800264c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	@ 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a17      	ldr	r2, [pc, #92]	@ (80026c8 <HAL_UART_MspInit+0x7c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d127      	bne.n	80026be <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800266e:	4b17      	ldr	r3, [pc, #92]	@ (80026cc <HAL_UART_MspInit+0x80>)
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	4a16      	ldr	r2, [pc, #88]	@ (80026cc <HAL_UART_MspInit+0x80>)
 8002674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002678:	6253      	str	r3, [r2, #36]	@ 0x24
 800267a:	4b14      	ldr	r3, [pc, #80]	@ (80026cc <HAL_UART_MspInit+0x80>)
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <HAL_UART_MspInit+0x80>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a10      	ldr	r2, [pc, #64]	@ (80026cc <HAL_UART_MspInit+0x80>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	61d3      	str	r3, [r2, #28]
 8002692:	4b0e      	ldr	r3, [pc, #56]	@ (80026cc <HAL_UART_MspInit+0x80>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800269e:	230c      	movs	r3, #12
 80026a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026aa:	2303      	movs	r3, #3
 80026ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ae:	2307      	movs	r3, #7
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	4805      	ldr	r0, [pc, #20]	@ (80026d0 <HAL_UART_MspInit+0x84>)
 80026ba:	f00a f91f 	bl	800c8fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026be:	bf00      	nop
 80026c0:	3728      	adds	r7, #40	@ 0x28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40004400 	.word	0x40004400
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020000 	.word	0x40020000

080026d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026d8:	bf00      	nop
 80026da:	e7fd      	b.n	80026d8 <NMI_Handler+0x4>

080026dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <HardFault_Handler+0x4>

080026e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <MemManage_Handler+0x4>

080026ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <BusFault_Handler+0x4>

080026f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <UsageFault_Handler+0x4>

080026fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002724:	f009 faa6 	bl	800bc74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}

0800272c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accel_INT_Pin);
 8002730:	2001      	movs	r0, #1
 8002732:	f00a fb95 	bl	800ce60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  printf("INT Accel !! \r\n");
 8002736:	4803      	ldr	r0, [pc, #12]	@ (8002744 <EXTI0_IRQHandler+0x18>)
 8002738:	f00f fb3a 	bl	8011db0 <puts>
  ACCEL_IRQ();
 800273c:	f7fe ffa4 	bl	8001688 <ACCEL_IRQ>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	08013dd8 	.word	0x08013dd8

08002748 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800274c:	4802      	ldr	r0, [pc, #8]	@ (8002758 <TIM2_IRQHandler+0x10>)
 800274e:	f00e fbc9 	bl	8010ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200002d0 	.word	0x200002d0

0800275c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002760:	4802      	ldr	r0, [pc, #8]	@ (800276c <TIM3_IRQHandler+0x10>)
 8002762:	f00e fbbf 	bl	8010ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000310 	.word	0x20000310

08002770 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002774:	4802      	ldr	r0, [pc, #8]	@ (8002780 <I2C1_EV_IRQHandler+0x10>)
 8002776:	f00b f845 	bl	800d804 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000430 	.word	0x20000430

08002784 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002788:	4802      	ldr	r0, [pc, #8]	@ (8002794 <I2C1_ER_IRQHandler+0x10>)
 800278a:	f00b f98e 	bl	800daaa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000430 	.word	0x20000430

08002798 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800279c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80027a0:	f00a fb5e 	bl	800ce60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80027a4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80027a8:	f00a fb5a 	bl	800ce60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80027ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80027b0:	f00a fb56 	bl	800ce60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027bc:	4803      	ldr	r0, [pc, #12]	@ (80027cc <TIM6_IRQHandler+0x14>)
 80027be:	f00e fb91 	bl	8010ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  //buzzer (0);
  TIM6_IRQ();
 80027c2:	f7fe ff41 	bl	8001648 <TIM6_IRQ>
  //printf("T6\r\n");
  /* USER CODE END TIM6_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000350 	.word	0x20000350

080027d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80027d4:	4803      	ldr	r0, [pc, #12]	@ (80027e4 <TIM7_IRQHandler+0x14>)
 80027d6:	f00e fb85 	bl	8010ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
	TIM7_IRQ();
 80027da:	f7fe ff49 	bl	8001670 <TIM7_IRQ>
	//printf("T7\r\n");
  /* USER CODE END TIM7_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000390 	.word	0x20000390

080027e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_11){
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027f8:	d131      	bne.n	800285e <HAL_GPIO_EXTI_Callback+0x76>
		if(!debounce_flag1){
 80027fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002868 <HAL_GPIO_EXTI_Callback+0x80>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d12c      	bne.n	800285e <HAL_GPIO_EXTI_Callback+0x76>
			debounce_flag1 = 1;
 8002804:	4b18      	ldr	r3, [pc, #96]	@ (8002868 <HAL_GPIO_EXTI_Callback+0x80>)
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
			printf("BTN1\r\n");
 800280a:	4818      	ldr	r0, [pc, #96]	@ (800286c <HAL_GPIO_EXTI_Callback+0x84>)
 800280c:	f00f fad0 	bl	8011db0 <puts>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002810:	4b17      	ldr	r3, [pc, #92]	@ (8002870 <HAL_GPIO_EXTI_Callback+0x88>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2200      	movs	r2, #0
 8002816:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Start_IT(&htim2);
 8002818:	4815      	ldr	r0, [pc, #84]	@ (8002870 <HAL_GPIO_EXTI_Callback+0x88>)
 800281a:	f00e f937 	bl	8010a8c <HAL_TIM_Base_Start_IT>
			if (bp1_state){
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00d      	beq.n	8002844 <HAL_GPIO_EXTI_Callback+0x5c>
				bp1_state = 0;
 8002828:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <HAL_GPIO_EXTI_Callback+0x8c>)
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 800282e:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_GPIO_EXTI_Callback+0x90>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Base_Start_IT(&htim6);
 8002836:	4810      	ldr	r0, [pc, #64]	@ (8002878 <HAL_GPIO_EXTI_Callback+0x90>)
 8002838:	f00e f928 	bl	8010a8c <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Stop_IT(&htim7);
 800283c:	480f      	ldr	r0, [pc, #60]	@ (800287c <HAL_GPIO_EXTI_Callback+0x94>)
 800283e:	f00e f977 	bl	8010b30 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Start_IT(&htim7);
				HAL_TIM_Base_Stop_IT(&htim6);
				bp1_state = 1;
			}
		}}
}
 8002842:	e00c      	b.n	800285e <HAL_GPIO_EXTI_Callback+0x76>
				__HAL_TIM_SET_COUNTER(&htim7, 0);
 8002844:	4b0d      	ldr	r3, [pc, #52]	@ (800287c <HAL_GPIO_EXTI_Callback+0x94>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Base_Start_IT(&htim7);
 800284c:	480b      	ldr	r0, [pc, #44]	@ (800287c <HAL_GPIO_EXTI_Callback+0x94>)
 800284e:	f00e f91d 	bl	8010a8c <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Stop_IT(&htim6);
 8002852:	4809      	ldr	r0, [pc, #36]	@ (8002878 <HAL_GPIO_EXTI_Callback+0x90>)
 8002854:	f00e f96c 	bl	8010b30 <HAL_TIM_Base_Stop_IT>
				bp1_state = 1;
 8002858:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <HAL_GPIO_EXTI_Callback+0x8c>)
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	2000042d 	.word	0x2000042d
 800286c:	08013de8 	.word	0x08013de8
 8002870:	200002d0 	.word	0x200002d0
 8002874:	2000042c 	.word	0x2000042c
 8002878:	20000350 	.word	0x20000350
 800287c:	20000390 	.word	0x20000390

08002880 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2){
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002890:	d10a      	bne.n	80028a8 <HAL_TIM_PeriodElapsedCallback+0x28>

        if (debounce_flag1)
 8002892:	4b07      	ldr	r3, [pc, #28]	@ (80028b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_TIM_PeriodElapsedCallback+0x22>
        {
            debounce_flag1 = 0;
 800289c:	4b04      	ldr	r3, [pc, #16]	@ (80028b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
        }
        HAL_TIM_Base_Stop_IT(&htim2); // Stop the timer
 80028a2:	4804      	ldr	r0, [pc, #16]	@ (80028b4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80028a4:	f00e f944 	bl	8010b30 <HAL_TIM_Base_Stop_IT>
    }
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	2000042d 	.word	0x2000042d
 80028b4:	200002d0 	.word	0x200002d0

080028b8 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80028c2:	4b13      	ldr	r3, [pc, #76]	@ (8002910 <BSP_I2C1_Init+0x58>)
 80028c4:	4a13      	ldr	r2, [pc, #76]	@ (8002914 <BSP_I2C1_Init+0x5c>)
 80028c6:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80028c8:	4b13      	ldr	r3, [pc, #76]	@ (8002918 <BSP_I2C1_Init+0x60>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	4912      	ldr	r1, [pc, #72]	@ (8002918 <BSP_I2C1_Init+0x60>)
 80028d0:	600a      	str	r2, [r1, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d117      	bne.n	8002906 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80028d6:	480e      	ldr	r0, [pc, #56]	@ (8002910 <BSP_I2C1_Init+0x58>)
 80028d8:	f00b f9e4 	bl	800dca4 <HAL_I2C_GetState>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d111      	bne.n	8002906 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80028e2:	480b      	ldr	r0, [pc, #44]	@ (8002910 <BSP_I2C1_Init+0x58>)
 80028e4:	f000 f8e2 	bl	8002aac <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10b      	bne.n	8002906 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80028ee:	4808      	ldr	r0, [pc, #32]	@ (8002910 <BSP_I2C1_Init+0x58>)
 80028f0:	f000 f8a8 	bl	8002a44 <MX_I2C1_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80028fa:	f06f 0307 	mvn.w	r3, #7
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	e001      	b.n	8002906 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002906:	687b      	ldr	r3, [r7, #4]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000430 	.word	0x20000430
 8002914:	40005400 	.word	0x40005400
 8002918:	20000484 	.word	0x20000484

0800291c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002926:	4b0f      	ldr	r3, [pc, #60]	@ (8002964 <BSP_I2C1_DeInit+0x48>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d014      	beq.n	8002958 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <BSP_I2C1_DeInit+0x48>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3b01      	subs	r3, #1
 8002934:	4a0b      	ldr	r2, [pc, #44]	@ (8002964 <BSP_I2C1_DeInit+0x48>)
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <BSP_I2C1_DeInit+0x48>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002940:	4809      	ldr	r0, [pc, #36]	@ (8002968 <BSP_I2C1_DeInit+0x4c>)
 8002942:	f000 f909 	bl	8002b58 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002946:	4808      	ldr	r0, [pc, #32]	@ (8002968 <BSP_I2C1_DeInit+0x4c>)
 8002948:	f00a fbe6 	bl	800d118 <HAL_I2C_DeInit>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002952:	f06f 0307 	mvn.w	r3, #7
 8002956:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002958:	687b      	ldr	r3, [r7, #4]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000484 	.word	0x20000484
 8002968:	20000430 	.word	0x20000430

0800296c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	@ 0x28
 8002970:	af04      	add	r7, sp, #16
 8002972:	60ba      	str	r2, [r7, #8]
 8002974:	461a      	mov	r2, r3
 8002976:	4603      	mov	r3, r0
 8002978:	81fb      	strh	r3, [r7, #14]
 800297a:	460b      	mov	r3, r1
 800297c:	81bb      	strh	r3, [r7, #12]
 800297e:	4613      	mov	r3, r2
 8002980:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002986:	89ba      	ldrh	r2, [r7, #12]
 8002988:	89f9      	ldrh	r1, [r7, #14]
 800298a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800298e:	9302      	str	r3, [sp, #8]
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	9301      	str	r3, [sp, #4]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2301      	movs	r3, #1
 800299a:	480c      	ldr	r0, [pc, #48]	@ (80029cc <BSP_I2C1_WriteReg+0x60>)
 800299c:	f00a fc12 	bl	800d1c4 <HAL_I2C_Mem_Write>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80029a6:	4809      	ldr	r0, [pc, #36]	@ (80029cc <BSP_I2C1_WriteReg+0x60>)
 80029a8:	f00b f989 	bl	800dcbe <HAL_I2C_GetError>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d103      	bne.n	80029ba <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80029b2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	e002      	b.n	80029c0 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80029ba:	f06f 0303 	mvn.w	r3, #3
 80029be:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80029c0:	697b      	ldr	r3, [r7, #20]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000430 	.word	0x20000430

080029d0 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	@ 0x28
 80029d4:	af04      	add	r7, sp, #16
 80029d6:	60ba      	str	r2, [r7, #8]
 80029d8:	461a      	mov	r2, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	81fb      	strh	r3, [r7, #14]
 80029de:	460b      	mov	r3, r1
 80029e0:	81bb      	strh	r3, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80029ea:	89ba      	ldrh	r2, [r7, #12]
 80029ec:	89f9      	ldrh	r1, [r7, #14]
 80029ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029f2:	9302      	str	r3, [sp, #8]
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2301      	movs	r3, #1
 80029fe:	480c      	ldr	r0, [pc, #48]	@ (8002a30 <BSP_I2C1_ReadReg+0x60>)
 8002a00:	f00a fcda 	bl	800d3b8 <HAL_I2C_Mem_Read>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00c      	beq.n	8002a24 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002a0a:	4809      	ldr	r0, [pc, #36]	@ (8002a30 <BSP_I2C1_ReadReg+0x60>)
 8002a0c:	f00b f957 	bl	800dcbe <HAL_I2C_GetError>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d103      	bne.n	8002a1e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002a16:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e002      	b.n	8002a24 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002a1e:	f06f 0303 	mvn.w	r3, #3
 8002a22:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002a24:	697b      	ldr	r3, [r7, #20]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000430 	.word	0x20000430

08002a34 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002a38:	f009 f92e 	bl	800bc98 <HAL_GetTick>
 8002a3c:	4603      	mov	r3, r0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a14      	ldr	r2, [pc, #80]	@ (8002aa4 <MX_I2C1_Init+0x60>)
 8002a54:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a13      	ldr	r2, [pc, #76]	@ (8002aa8 <MX_I2C1_Init+0x64>)
 8002a5a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a6e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f00a fa01 	bl	800ce90 <HAL_I2C_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40005400 	.word	0x40005400
 8002aa8:	00061a80 	.word	0x00061a80

08002aac <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	@ 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab4:	4b26      	ldr	r3, [pc, #152]	@ (8002b50 <I2C1_MspInit+0xa4>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	4a25      	ldr	r2, [pc, #148]	@ (8002b50 <I2C1_MspInit+0xa4>)
 8002aba:	f043 0302 	orr.w	r3, r3, #2
 8002abe:	61d3      	str	r3, [r2, #28]
 8002ac0:	4b23      	ldr	r3, [pc, #140]	@ (8002b50 <I2C1_MspInit+0xa4>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad2:	2312      	movs	r3, #18
 8002ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002ade:	2304      	movs	r3, #4
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	481a      	ldr	r0, [pc, #104]	@ (8002b54 <I2C1_MspInit+0xa8>)
 8002aea:	f009 ff07 	bl	800c8fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002aee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af4:	2312      	movs	r3, #18
 8002af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afc:	2303      	movs	r3, #3
 8002afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002b00:	2304      	movs	r3, #4
 8002b02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4812      	ldr	r0, [pc, #72]	@ (8002b54 <I2C1_MspInit+0xa8>)
 8002b0c:	f009 fef6 	bl	800c8fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b10:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <I2C1_MspInit+0xa4>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	4a0e      	ldr	r2, [pc, #56]	@ (8002b50 <I2C1_MspInit+0xa4>)
 8002b16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b1a:	6253      	str	r3, [r2, #36]	@ 0x24
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <I2C1_MspInit+0xa4>)
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	201f      	movs	r0, #31
 8002b2e:	f009 fe52 	bl	800c7d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002b32:	201f      	movs	r0, #31
 8002b34:	f009 fe6b 	bl	800c80e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	2020      	movs	r0, #32
 8002b3e:	f009 fe4a 	bl	800c7d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002b42:	2020      	movs	r0, #32
 8002b44:	f009 fe63 	bl	800c80e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	3728      	adds	r7, #40	@ 0x28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40020400 	.word	0x40020400

08002b58 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002b60:	4b0c      	ldr	r3, [pc, #48]	@ (8002b94 <I2C1_MspDeInit+0x3c>)
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	4a0b      	ldr	r2, [pc, #44]	@ (8002b94 <I2C1_MspDeInit+0x3c>)
 8002b66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b6a:	6253      	str	r3, [r2, #36]	@ 0x24

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002b6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b70:	4809      	ldr	r0, [pc, #36]	@ (8002b98 <I2C1_MspDeInit+0x40>)
 8002b72:	f00a f853 	bl	800cc1c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002b76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b7a:	4807      	ldr	r0, [pc, #28]	@ (8002b98 <I2C1_MspDeInit+0x40>)
 8002b7c:	f00a f84e 	bl	800cc1c <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002b80:	201f      	movs	r0, #31
 8002b82:	f009 fe52 	bl	800c82a <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002b86:	2020      	movs	r0, #32
 8002b88:	f009 fe4f 	bl	800c82a <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40020400 	.word	0x40020400

08002b9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	e00a      	b.n	8002bc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bae:	f3af 8000 	nop.w
 8002bb2:	4601      	mov	r1, r0
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	60ba      	str	r2, [r7, #8]
 8002bba:	b2ca      	uxtb	r2, r1
 8002bbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	dbf0      	blt.n	8002bae <_read+0x12>
  }

  return len;
 8002bcc:	687b      	ldr	r3, [r7, #4]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	e009      	b.n	8002bfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	60ba      	str	r2, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fa83 	bl	80020fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	dbf1      	blt.n	8002be8 <_write+0x12>
  }
  return len;
 8002c04:	687b      	ldr	r3, [r7, #4]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <_close>:

int _close(int file)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c34:	605a      	str	r2, [r3, #4]
  return 0;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <_isatty>:

int _isatty(int file)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c4a:	2301      	movs	r3, #1
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
	...

08002c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c78:	4a14      	ldr	r2, [pc, #80]	@ (8002ccc <_sbrk+0x5c>)
 8002c7a:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <_sbrk+0x60>)
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c84:	4b13      	ldr	r3, [pc, #76]	@ (8002cd4 <_sbrk+0x64>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d102      	bne.n	8002c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c8c:	4b11      	ldr	r3, [pc, #68]	@ (8002cd4 <_sbrk+0x64>)
 8002c8e:	4a12      	ldr	r2, [pc, #72]	@ (8002cd8 <_sbrk+0x68>)
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c92:	4b10      	ldr	r3, [pc, #64]	@ (8002cd4 <_sbrk+0x64>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d207      	bcs.n	8002cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca0:	f00f f9d4 	bl	801204c <__errno>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	220c      	movs	r2, #12
 8002ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cae:	e009      	b.n	8002cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb0:	4b08      	ldr	r3, [pc, #32]	@ (8002cd4 <_sbrk+0x64>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cb6:	4b07      	ldr	r3, [pc, #28]	@ (8002cd4 <_sbrk+0x64>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	4a05      	ldr	r2, [pc, #20]	@ (8002cd4 <_sbrk+0x64>)
 8002cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20014000 	.word	0x20014000
 8002cd0:	00000400 	.word	0x00000400
 8002cd4:	20000488 	.word	0x20000488
 8002cd8:	200007c0 	.word	0x200007c0

08002cdc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ce8:	f7ff fff8 	bl	8002cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cec:	480b      	ldr	r0, [pc, #44]	@ (8002d1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cee:	490c      	ldr	r1, [pc, #48]	@ (8002d20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8002d24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf4:	e002      	b.n	8002cfc <LoopCopyDataInit>

08002cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfa:	3304      	adds	r3, #4

08002cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d00:	d3f9      	bcc.n	8002cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d02:	4a09      	ldr	r2, [pc, #36]	@ (8002d28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d04:	4c09      	ldr	r4, [pc, #36]	@ (8002d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d08:	e001      	b.n	8002d0e <LoopFillZerobss>

08002d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d0c:	3204      	adds	r2, #4

08002d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d10:	d3fb      	bcc.n	8002d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d12:	f00f f9a1 	bl	8012058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d16:	f7fe fe83 	bl	8001a20 <main>
  bx lr
 8002d1a:	4770      	bx	lr
  ldr r0, =_sdata
 8002d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d20:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002d24:	08013ed8 	.word	0x08013ed8
  ldr r2, =_sbss
 8002d28:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002d2c:	200007c0 	.word	0x200007c0

08002d30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d30:	e7fe      	b.n	8002d30 <ADC1_IRQHandler>
	...

08002d34 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d103      	bne.n	8002d4c <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	e034      	b.n	8002db6 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	7b1a      	ldrb	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	699a      	ldr	r2, [r3, #24]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc0 <HTS221_RegisterBusIO+0x8c>)
 8002d88:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc4 <HTS221_RegisterBusIO+0x90>)
 8002d8e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4798      	blx	r3
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	e002      	b.n	8002db6 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295
 8002db4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002db6:	68fb      	ldr	r3, [r7, #12]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	080033fd 	.word	0x080033fd
 8002dc4:	0800345f 	.word	0x0800345f

08002dc8 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fa9e 	bl	800331c <HTS221_Initialize>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dea:	e004      	b.n	8002df6 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d111      	bne.n	8002e34 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f87e 	bl	8002f12 <HTS221_HUM_Disable>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8002e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e20:	e00d      	b.n	8002e3e <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f95f 	bl	80030e6 <HTS221_TEMP_Disable>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	e004      	b.n	8002e3e <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3320      	adds	r3, #32
 8002e54:	6839      	ldr	r1, [r7, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fc2a 	bl	80036b0 <hts221_device_id_get>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
 8002e66:	e000      	b.n	8002e6a <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2201      	movs	r2, #1
 8002e82:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2200      	movs	r2, #0
 8002e88:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	4a09      	ldr	r2, [pc, #36]	@ (8002ec4 <HTS221_GetCapabilities+0x50>)
 8002ea0:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	4a07      	ldr	r2, [pc, #28]	@ (8002ec4 <HTS221_GetCapabilities+0x50>)
 8002ea6:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	41480000 	.word	0x41480000

08002ec8 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e015      	b.n	8002f0a <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10b      	bne.n	8002f00 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3320      	adds	r3, #32
 8002eec:	2101      	movs	r1, #1
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fbef 	bl	80036d2 <hts221_power_on_set>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	e004      	b.n	8002f0a <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e015      	b.n	8002f54 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10b      	bne.n	8002f4a <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3320      	adds	r3, #32
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fbca 	bl	80036d2 <hts221_power_on_set>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295
 8002f48:	e004      	b.n	8002f54 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002f66:	6839      	ldr	r1, [r7, #0]
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f965 	bl	8003238 <HTS221_GetOutputDataRate>
 8002f6e:	4603      	mov	r3, r0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002f82:	6839      	ldr	r1, [r7, #0]
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f99b 	bl	80032c0 <HTS221_SetOutputDataRate>
 8002f8a:	4603      	mov	r3, r0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3320      	adds	r3, #32
 8002fa2:	f107 020c 	add.w	r2, r7, #12
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fc5e 	bl	800386a <hts221_hum_adc_point_0_get>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8002fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb8:	e069      	b.n	800308e <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f103 0220 	add.w	r2, r3, #32
 8002fc0:	f107 030c 	add.w	r3, r7, #12
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f000 fba8 	bl	800371e <hts221_hum_rh_point_0_get>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8002fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd8:	e059      	b.n	800308e <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f103 0220 	add.w	r2, r3, #32
 8002fe0:	f107 030c 	add.w	r3, r7, #12
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f000 fc5f 	bl	80038ac <hts221_hum_adc_point_1_get>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8002ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff8:	e049      	b.n	800308e <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f103 0220 	add.w	r2, r3, #32
 8003000:	f107 030c 	add.w	r3, r7, #12
 8003004:	330c      	adds	r3, #12
 8003006:	4619      	mov	r1, r3
 8003008:	4610      	mov	r0, r2
 800300a:	f000 fba8 	bl	800375e <hts221_hum_rh_point_1_get>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8003014:	f04f 33ff 	mov.w	r3, #4294967295
 8003018:	e039      	b.n	800308e <HTS221_HUM_GetHumidity+0xfa>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 800301a:	2300      	movs	r3, #0
 800301c:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3320      	adds	r3, #32
 8003022:	f107 021c 	add.w	r2, r7, #28
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fafd 	bl	8003628 <hts221_humidity_raw_get>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8003034:	f04f 33ff 	mov.w	r3, #4294967295
 8003038:	e029      	b.n	800308e <HTS221_HUM_GetHumidity+0xfa>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 800303a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fe3c 	bl	8000cbc <__aeabi_i2f>
 8003044:	4602      	mov	r2, r0
 8003046:	f107 030c 	add.w	r3, r7, #12
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f991 	bl	8003374 <Linear_Interpolation>
 8003052:	4602      	mov	r2, r0
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f04f 0100 	mov.w	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe f81d 	bl	80010a0 <__aeabi_fcmplt>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HTS221_HUM_GetHumidity+0xe0>
  {
    *Value = 0.0f;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4907      	ldr	r1, [pc, #28]	@ (8003098 <HTS221_HUM_GetHumidity+0x104>)
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe f82e 	bl	80010dc <__aeabi_fcmpgt>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HTS221_HUM_GetHumidity+0xf8>
  {
    *Value = 100.0f;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	4a03      	ldr	r2, [pc, #12]	@ (8003098 <HTS221_HUM_GetHumidity+0x104>)
 800308a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3720      	adds	r7, #32
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	42c80000 	.word	0x42c80000

0800309c <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e015      	b.n	80030de <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3320      	adds	r3, #32
 80030c0:	2101      	movs	r1, #1
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fb05 	bl	80036d2 <hts221_power_on_set>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80030ce:	f04f 33ff 	mov.w	r3, #4294967295
 80030d2:	e004      	b.n	80030de <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e015      	b.n	8003128 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3320      	adds	r3, #32
 800310a:	2100      	movs	r1, #0
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fae0 	bl	80036d2 <hts221_power_on_set>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8003118:	f04f 33ff 	mov.w	r3, #4294967295
 800311c:	e004      	b.n	8003128 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800313a:	6839      	ldr	r1, [r7, #0]
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f87b 	bl	8003238 <HTS221_GetOutputDataRate>
 8003142:	4603      	mov	r3, r0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003156:	6839      	ldr	r1, [r7, #0]
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f8b1 	bl	80032c0 <HTS221_SetOutputDataRate>
 800315e:	4603      	mov	r3, r0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3320      	adds	r3, #32
 8003176:	f107 020c 	add.w	r2, r7, #12
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fbb6 	bl	80038ee <hts221_temp_adc_point_0_get>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003188:	f04f 33ff 	mov.w	r3, #4294967295
 800318c:	e04f      	b.n	800322e <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f103 0220 	add.w	r2, r3, #32
 8003194:	f107 030c 	add.w	r3, r7, #12
 8003198:	3304      	adds	r3, #4
 800319a:	4619      	mov	r1, r3
 800319c:	4610      	mov	r0, r2
 800319e:	f000 fafe 	bl	800379e <hts221_temp_deg_point_0_get>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 80031a8:	f04f 33ff 	mov.w	r3, #4294967295
 80031ac:	e03f      	b.n	800322e <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f103 0220 	add.w	r2, r3, #32
 80031b4:	f107 030c 	add.w	r3, r7, #12
 80031b8:	3308      	adds	r3, #8
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f000 fbb7 	bl	8003930 <hts221_temp_adc_point_1_get>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295
 80031cc:	e02f      	b.n	800322e <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f103 0220 	add.w	r2, r3, #32
 80031d4:	f107 030c 	add.w	r3, r7, #12
 80031d8:	330c      	adds	r3, #12
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f000 fb11 	bl	8003804 <hts221_temp_deg_point_1_get>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80031e8:	f04f 33ff 	mov.w	r3, #4294967295
 80031ec:	e01f      	b.n	800322e <HTS221_TEMP_GetTemperature+0xc6>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 80031ee:	2300      	movs	r3, #0
 80031f0:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3320      	adds	r3, #32
 80031f6:	f107 021c 	add.w	r2, r7, #28
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fa35 	bl	800366c <hts221_temperature_raw_get>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8003208:	f04f 33ff 	mov.w	r3, #4294967295
 800320c:	e00f      	b.n	800322e <HTS221_TEMP_GetTemperature+0xc6>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800320e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd fd52 	bl	8000cbc <__aeabi_i2f>
 8003218:	4602      	mov	r2, r0
 800321a:	f107 030c 	add.w	r3, r7, #12
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f8a7 	bl	8003374 <Linear_Interpolation>
 8003226:	4602      	mov	r2, r0
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3320      	adds	r3, #32
 800324a:	f107 020b 	add.w	r2, r7, #11
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f000 f98b 	bl	800356c <hts221_data_rate_get>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 800325c:	f04f 33ff 	mov.w	r3, #4294967295
 8003260:	e025      	b.n	80032ae <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8003262:	7afb      	ldrb	r3, [r7, #11]
 8003264:	2b03      	cmp	r3, #3
 8003266:	d81d      	bhi.n	80032a4 <HTS221_GetOutputDataRate+0x6c>
 8003268:	a201      	add	r2, pc, #4	@ (adr r2, 8003270 <HTS221_GetOutputDataRate+0x38>)
 800326a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326e:	bf00      	nop
 8003270:	08003281 	.word	0x08003281
 8003274:	0800328b 	.word	0x0800328b
 8003278:	08003295 	.word	0x08003295
 800327c:	0800329d 	.word	0x0800329d
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
      break;
 8003288:	e010      	b.n	80032ac <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003290:	601a      	str	r2, [r3, #0]
      break;
 8003292:	e00b      	b.n	80032ac <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4a08      	ldr	r2, [pc, #32]	@ (80032b8 <HTS221_GetOutputDataRate+0x80>)
 8003298:	601a      	str	r2, [r3, #0]
      break;
 800329a:	e007      	b.n	80032ac <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4a07      	ldr	r2, [pc, #28]	@ (80032bc <HTS221_GetOutputDataRate+0x84>)
 80032a0:	601a      	str	r2, [r3, #0]
      break;
 80032a2:	e003      	b.n	80032ac <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295
 80032a8:	60fb      	str	r3, [r7, #12]
      break;
 80032aa:	bf00      	nop
  }

  return ret;
 80032ac:	68fb      	ldr	r3, [r7, #12]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40e00000 	.word	0x40e00000
 80032bc:	41480000 	.word	0x41480000

080032c0 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80032ca:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80032ce:	6838      	ldr	r0, [r7, #0]
 80032d0:	f7fd fef0 	bl	80010b4 <__aeabi_fcmple>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HTS221_SetOutputDataRate+0x1e>
 80032da:	2301      	movs	r3, #1
 80032dc:	e009      	b.n	80032f2 <HTS221_SetOutputDataRate+0x32>
 80032de:	490e      	ldr	r1, [pc, #56]	@ (8003318 <HTS221_SetOutputDataRate+0x58>)
 80032e0:	6838      	ldr	r0, [r7, #0]
 80032e2:	f7fd fee7 	bl	80010b4 <__aeabi_fcmple>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HTS221_SetOutputDataRate+0x30>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e000      	b.n	80032f2 <HTS221_SetOutputDataRate+0x32>
 80032f0:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80032f2:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3320      	adds	r3, #32
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f90f 	bl	8003520 <hts221_data_rate_set>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HTS221_SetOutputDataRate+0x4e>
  {
    return HTS221_ERROR;
 8003308:	f04f 33ff 	mov.w	r3, #4294967295
 800330c:	e000      	b.n	8003310 <HTS221_SetOutputDataRate+0x50>
  }

  return HTS221_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40e00000 	.word	0x40e00000

0800331c <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3320      	adds	r3, #32
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f9d1 	bl	80036d2 <hts221_power_on_set>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8003336:	f04f 33ff 	mov.w	r3, #4294967295
 800333a:	e017      	b.n	800336c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3320      	adds	r3, #32
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f000 f94a 	bl	80035dc <hts221_block_data_update_set>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800334e:	f04f 33ff 	mov.w	r3, #4294967295
 8003352:	e00b      	b.n	800336c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003354:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ffb1 	bl	80032c0 <HTS221_SetOutputDataRate>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003364:	f04f 33ff 	mov.w	r3, #4294967295
 8003368:	e000      	b.n	800336c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003374:	b5b0      	push	{r4, r5, r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4619      	mov	r1, r3
 8003388:	4610      	mov	r0, r2
 800338a:	f7fd fbe1 	bl	8000b50 <__aeabi_fsub>
 800338e:	4603      	mov	r3, r0
 8003390:	6839      	ldr	r1, [r7, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fd fce6 	bl	8000d64 <__aeabi_fmul>
 8003398:	4603      	mov	r3, r0
 800339a:	461c      	mov	r4, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f7fd fcdc 	bl	8000d64 <__aeabi_fmul>
 80033ac:	4603      	mov	r3, r0
 80033ae:	461d      	mov	r5, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f7fd fcd2 	bl	8000d64 <__aeabi_fmul>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4619      	mov	r1, r3
 80033c4:	4628      	mov	r0, r5
 80033c6:	f7fd fbc3 	bl	8000b50 <__aeabi_fsub>
 80033ca:	4603      	mov	r3, r0
 80033cc:	4619      	mov	r1, r3
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7fd fbc0 	bl	8000b54 <__addsf3>
 80033d4:	4603      	mov	r3, r0
 80033d6:	461c      	mov	r4, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4619      	mov	r1, r3
 80033e2:	4610      	mov	r0, r2
 80033e4:	f7fd fbb4 	bl	8000b50 <__aeabi_fsub>
 80033e8:	4603      	mov	r3, r0
 80033ea:	4619      	mov	r1, r3
 80033ec:	4620      	mov	r0, r4
 80033ee:	f7fd fd6d 	bl	8000ecc <__aeabi_fdiv>
 80033f2:	4603      	mov	r3, r0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bdb0      	pop	{r4, r5, r7, pc}

080033fc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	461a      	mov	r2, r3
 8003408:	460b      	mov	r3, r1
 800340a:	72fb      	strb	r3, [r7, #11]
 800340c:	4613      	mov	r3, r2
 800340e:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10e      	bne.n	800343a <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	695c      	ldr	r4, [r3, #20]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	7b1b      	ldrb	r3, [r3, #12]
 8003424:	4618      	mov	r0, r3
 8003426:	7afb      	ldrb	r3, [r7, #11]
 8003428:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800342c:	b2db      	uxtb	r3, r3
 800342e:	4619      	mov	r1, r3
 8003430:	893b      	ldrh	r3, [r7, #8]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	47a0      	blx	r4
 8003436:	4603      	mov	r3, r0
 8003438:	e00d      	b.n	8003456 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	695c      	ldr	r4, [r3, #20]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	7b1b      	ldrb	r3, [r3, #12]
 8003442:	4618      	mov	r0, r3
 8003444:	7afb      	ldrb	r3, [r7, #11]
 8003446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800344a:	b2db      	uxtb	r3, r3
 800344c:	4619      	mov	r1, r3
 800344e:	893b      	ldrh	r3, [r7, #8]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	47a0      	blx	r4
 8003454:	4603      	mov	r3, r0
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bd90      	pop	{r4, r7, pc}

0800345e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800345e:	b590      	push	{r4, r7, lr}
 8003460:	b087      	sub	sp, #28
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	461a      	mov	r2, r3
 800346a:	460b      	mov	r3, r1
 800346c:	72fb      	strb	r3, [r7, #11]
 800346e:	4613      	mov	r3, r2
 8003470:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10e      	bne.n	800349c <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	691c      	ldr	r4, [r3, #16]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	7b1b      	ldrb	r3, [r3, #12]
 8003486:	4618      	mov	r0, r3
 8003488:	7afb      	ldrb	r3, [r7, #11]
 800348a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800348e:	b2db      	uxtb	r3, r3
 8003490:	4619      	mov	r1, r3
 8003492:	893b      	ldrh	r3, [r7, #8]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	47a0      	blx	r4
 8003498:	4603      	mov	r3, r0
 800349a:	e00d      	b.n	80034b8 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	691c      	ldr	r4, [r3, #16]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	7b1b      	ldrb	r3, [r3, #12]
 80034a4:	4618      	mov	r0, r3
 80034a6:	7afb      	ldrb	r3, [r7, #11]
 80034a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	4619      	mov	r1, r3
 80034b0:	893b      	ldrh	r3, [r7, #8]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	47a0      	blx	r4
 80034b6:	4603      	mov	r3, r0
  }
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd90      	pop	{r4, r7, pc}

080034c0 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	461a      	mov	r2, r3
 80034cc:	460b      	mov	r3, r1
 80034ce:	72fb      	strb	r3, [r7, #11]
 80034d0:	4613      	mov	r3, r2
 80034d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	685c      	ldr	r4, [r3, #4]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	68d8      	ldr	r0, [r3, #12]
 80034dc:	893b      	ldrh	r3, [r7, #8]
 80034de:	7af9      	ldrb	r1, [r7, #11]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	47a0      	blx	r4
 80034e4:	6178      	str	r0, [r7, #20]

  return ret;
 80034e6:	697b      	ldr	r3, [r7, #20]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd90      	pop	{r4, r7, pc}

080034f0 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	461a      	mov	r2, r3
 80034fc:	460b      	mov	r3, r1
 80034fe:	72fb      	strb	r3, [r7, #11]
 8003500:	4613      	mov	r3, r2
 8003502:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681c      	ldr	r4, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68d8      	ldr	r0, [r3, #12]
 800350c:	893b      	ldrh	r3, [r7, #8]
 800350e:	7af9      	ldrb	r1, [r7, #11]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	47a0      	blx	r4
 8003514:	6178      	str	r0, [r7, #20]

  return ret;
 8003516:	697b      	ldr	r3, [r7, #20]
}
 8003518:	4618      	mov	r0, r3
 800351a:	371c      	adds	r7, #28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd90      	pop	{r4, r7, pc}

08003520 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800352c:	f107 0208 	add.w	r2, r7, #8
 8003530:	2301      	movs	r3, #1
 8003532:	2120      	movs	r1, #32
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ffc3 	bl	80034c0 <hts221_read_reg>
 800353a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10f      	bne.n	8003562 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	b2da      	uxtb	r2, r3
 800354a:	7a3b      	ldrb	r3, [r7, #8]
 800354c:	f362 0301 	bfi	r3, r2, #0, #2
 8003550:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003552:	f107 0208 	add.w	r2, r7, #8
 8003556:	2301      	movs	r3, #1
 8003558:	2120      	movs	r1, #32
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ffc8 	bl	80034f0 <hts221_write_reg>
 8003560:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003562:	68fb      	ldr	r3, [r7, #12]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003576:	f107 0208 	add.w	r2, r7, #8
 800357a:	2301      	movs	r3, #1
 800357c:	2120      	movs	r1, #32
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ff9e 	bl	80034c0 <hts221_read_reg>
 8003584:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003586:	7a3b      	ldrb	r3, [r7, #8]
 8003588:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b03      	cmp	r3, #3
 8003590:	d81a      	bhi.n	80035c8 <hts221_data_rate_get+0x5c>
 8003592:	a201      	add	r2, pc, #4	@ (adr r2, 8003598 <hts221_data_rate_get+0x2c>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035a9 	.word	0x080035a9
 800359c:	080035b1 	.word	0x080035b1
 80035a0:	080035b9 	.word	0x080035b9
 80035a4:	080035c1 	.word	0x080035c1
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
      break;
 80035ae:	e00f      	b.n	80035d0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2201      	movs	r2, #1
 80035b4:	701a      	strb	r2, [r3, #0]
      break;
 80035b6:	e00b      	b.n	80035d0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2202      	movs	r2, #2
 80035bc:	701a      	strb	r2, [r3, #0]
      break;
 80035be:	e007      	b.n	80035d0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2203      	movs	r2, #3
 80035c4:	701a      	strb	r2, [r3, #0]
      break;
 80035c6:	e003      	b.n	80035d0 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2204      	movs	r2, #4
 80035cc:	701a      	strb	r2, [r3, #0]
      break;
 80035ce:	bf00      	nop
  }

  return ret;
 80035d0:	68fb      	ldr	r3, [r7, #12]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop

080035dc <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80035e8:	f107 0208 	add.w	r2, r7, #8
 80035ec:	2301      	movs	r3, #1
 80035ee:	2120      	movs	r1, #32
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ff65 	bl	80034c0 <hts221_read_reg>
 80035f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10f      	bne.n	800361e <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	b2da      	uxtb	r2, r3
 8003606:	7a3b      	ldrb	r3, [r7, #8]
 8003608:	f362 0382 	bfi	r3, r2, #2, #1
 800360c:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800360e:	f107 0208 	add.w	r2, r7, #8
 8003612:	2301      	movs	r3, #1
 8003614:	2120      	movs	r1, #32
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff ff6a 	bl	80034f0 <hts221_write_reg>
 800361c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800361e:	68fb      	ldr	r3, [r7, #12]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003632:	f107 0208 	add.w	r2, r7, #8
 8003636:	2302      	movs	r3, #2
 8003638:	2128      	movs	r1, #40	@ 0x28
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff ff40 	bl	80034c0 <hts221_read_reg>
 8003640:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003642:	7a7b      	ldrb	r3, [r7, #9]
 8003644:	b21a      	sxth	r2, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003650:	b29b      	uxth	r3, r3
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	b29b      	uxth	r3, r3
 8003656:	7a3a      	ldrb	r2, [r7, #8]
 8003658:	4413      	add	r3, r2
 800365a:	b29b      	uxth	r3, r3
 800365c:	b21a      	sxth	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	801a      	strh	r2, [r3, #0]

  return ret;
 8003662:	68fb      	ldr	r3, [r7, #12]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003676:	f107 0208 	add.w	r2, r7, #8
 800367a:	2302      	movs	r3, #2
 800367c:	212a      	movs	r1, #42	@ 0x2a
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff ff1e 	bl	80034c0 <hts221_read_reg>
 8003684:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003686:	7a7b      	ldrb	r3, [r7, #9]
 8003688:	b21a      	sxth	r2, r3
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003694:	b29b      	uxth	r3, r3
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	b29b      	uxth	r3, r3
 800369a:	7a3a      	ldrb	r2, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	b21a      	sxth	r2, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	801a      	strh	r2, [r3, #0]

  return ret;
 80036a6:	68fb      	ldr	r3, [r7, #12]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80036ba:	2301      	movs	r3, #1
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	210f      	movs	r1, #15
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff fefd 	bl	80034c0 <hts221_read_reg>
 80036c6:	60f8      	str	r0, [r7, #12]

  return ret;
 80036c8:	68fb      	ldr	r3, [r7, #12]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	460b      	mov	r3, r1
 80036dc:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80036de:	f107 0208 	add.w	r2, r7, #8
 80036e2:	2301      	movs	r3, #1
 80036e4:	2120      	movs	r1, #32
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff feea 	bl	80034c0 <hts221_read_reg>
 80036ec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10f      	bne.n	8003714 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	7a3b      	ldrb	r3, [r7, #8]
 80036fe:	f362 13c7 	bfi	r3, r2, #7, #1
 8003702:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003704:	f107 0208 	add.w	r2, r7, #8
 8003708:	2301      	movs	r3, #1
 800370a:	2120      	movs	r1, #32
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff feef 	bl	80034f0 <hts221_write_reg>
 8003712:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003714:	68fb      	ldr	r3, [r7, #12]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003728:	f107 020b 	add.w	r2, r7, #11
 800372c:	2301      	movs	r3, #1
 800372e:	2130      	movs	r1, #48	@ 0x30
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff fec5 	bl	80034c0 <hts221_read_reg>
 8003736:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003738:	7afb      	ldrb	r3, [r7, #11]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd fabe 	bl	8000cbc <__aeabi_i2f>
 8003740:	4603      	mov	r3, r0
 8003742:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fbc0 	bl	8000ecc <__aeabi_fdiv>
 800374c:	4603      	mov	r3, r0
 800374e:	461a      	mov	r2, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	601a      	str	r2, [r3, #0]

  return ret;
 8003754:	68fb      	ldr	r3, [r7, #12]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003768:	f107 020b 	add.w	r2, r7, #11
 800376c:	2301      	movs	r3, #1
 800376e:	2131      	movs	r1, #49	@ 0x31
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff fea5 	bl	80034c0 <hts221_read_reg>
 8003776:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003778:	7afb      	ldrb	r3, [r7, #11]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd fa9e 	bl	8000cbc <__aeabi_i2f>
 8003780:	4603      	mov	r3, r0
 8003782:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd fba0 	bl	8000ecc <__aeabi_fdiv>
 800378c:	4603      	mov	r3, r0
 800378e:	461a      	mov	r2, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	601a      	str	r2, [r3, #0]

  return ret;
 8003794:	68fb      	ldr	r3, [r7, #12]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b086      	sub	sp, #24
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80037a8:	f107 020f 	add.w	r2, r7, #15
 80037ac:	2301      	movs	r3, #1
 80037ae:	2132      	movs	r1, #50	@ 0x32
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff fe85 	bl	80034c0 <hts221_read_reg>
 80037b6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d11d      	bne.n	80037fa <hts221_temp_deg_point_0_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80037be:	f107 0210 	add.w	r2, r7, #16
 80037c2:	2301      	movs	r3, #1
 80037c4:	2135      	movs	r1, #53	@ 0x35
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff fe7a 	bl	80034c0 <hts221_read_reg>
 80037cc:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80037ce:	7c3b      	ldrb	r3, [r7, #16]
 80037d0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	4413      	add	r3, r2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd fa6b 	bl	8000cbc <__aeabi_i2f>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fd fb6d 	bl	8000ecc <__aeabi_fdiv>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80037fa:	697b      	ldr	r3, [r7, #20]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800380e:	f107 020f 	add.w	r2, r7, #15
 8003812:	2301      	movs	r3, #1
 8003814:	2133      	movs	r1, #51	@ 0x33
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff fe52 	bl	80034c0 <hts221_read_reg>
 800381c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d11d      	bne.n	8003860 <hts221_temp_deg_point_1_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003824:	f107 0210 	add.w	r2, r7, #16
 8003828:	2301      	movs	r3, #1
 800382a:	2135      	movs	r1, #53	@ 0x35
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff fe47 	bl	80034c0 <hts221_read_reg>
 8003832:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003834:	7c3b      	ldrb	r3, [r7, #16]
 8003836:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800383a:	b2db      	uxtb	r3, r3
 800383c:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800383e:	7cfb      	ldrb	r3, [r7, #19]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	4413      	add	r3, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd fa38 	bl	8000cbc <__aeabi_i2f>
 800384c:	4603      	mov	r3, r0
 800384e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8003852:	4618      	mov	r0, r3
 8003854:	f7fd fb3a 	bl	8000ecc <__aeabi_fdiv>
 8003858:	4603      	mov	r3, r0
 800385a:	461a      	mov	r2, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003860:	697b      	ldr	r3, [r7, #20]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003874:	f107 0208 	add.w	r2, r7, #8
 8003878:	2302      	movs	r3, #2
 800387a:	2136      	movs	r1, #54	@ 0x36
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff fe1f 	bl	80034c0 <hts221_read_reg>
 8003882:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003884:	7a7b      	ldrb	r3, [r7, #9]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	b29b      	uxth	r3, r3
 800388a:	7a3a      	ldrb	r2, [r7, #8]
 800388c:	4413      	add	r3, r2
 800388e:	b29b      	uxth	r3, r3
 8003890:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003892:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd fa10 	bl	8000cbc <__aeabi_i2f>
 800389c:	4602      	mov	r2, r0
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	601a      	str	r2, [r3, #0]

  return ret;
 80038a2:	68fb      	ldr	r3, [r7, #12]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80038b6:	f107 0208 	add.w	r2, r7, #8
 80038ba:	2302      	movs	r3, #2
 80038bc:	213a      	movs	r1, #58	@ 0x3a
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff fdfe 	bl	80034c0 <hts221_read_reg>
 80038c4:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80038c6:	7a7b      	ldrb	r3, [r7, #9]
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	7a3a      	ldrb	r2, [r7, #8]
 80038ce:	4413      	add	r3, r2
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80038d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fd f9ef 	bl	8000cbc <__aeabi_i2f>
 80038de:	4602      	mov	r2, r0
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	601a      	str	r2, [r3, #0]

  return ret;
 80038e4:	68fb      	ldr	r3, [r7, #12]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80038f8:	f107 0208 	add.w	r2, r7, #8
 80038fc:	2302      	movs	r3, #2
 80038fe:	213c      	movs	r1, #60	@ 0x3c
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff fddd 	bl	80034c0 <hts221_read_reg>
 8003906:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003908:	7a7b      	ldrb	r3, [r7, #9]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	b29b      	uxth	r3, r3
 800390e:	7a3a      	ldrb	r2, [r7, #8]
 8003910:	4413      	add	r3, r2
 8003912:	b29b      	uxth	r3, r3
 8003914:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003916:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd f9ce 	bl	8000cbc <__aeabi_i2f>
 8003920:	4602      	mov	r2, r0
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	601a      	str	r2, [r3, #0]

  return ret;
 8003926:	68fb      	ldr	r3, [r7, #12]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 800393a:	f107 0208 	add.w	r2, r7, #8
 800393e:	2302      	movs	r3, #2
 8003940:	213e      	movs	r1, #62	@ 0x3e
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff fdbc 	bl	80034c0 <hts221_read_reg>
 8003948:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800394a:	7a7b      	ldrb	r3, [r7, #9]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	b29b      	uxth	r3, r3
 8003950:	7a3a      	ldrb	r2, [r7, #8]
 8003952:	4413      	add	r3, r2
 8003954:	b29b      	uxth	r3, r3
 8003956:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003958:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800395c:	4618      	mov	r0, r3
 800395e:	f7fd f9ad 	bl	8000cbc <__aeabi_i2f>
 8003962:	4602      	mov	r2, r0
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	601a      	str	r2, [r3, #0]

  return ret;
 8003968:	68fb      	ldr	r3, [r7, #12]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d103      	bne.n	8003990 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	e051      	b.n	8003a34 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	7b1a      	ldrb	r2, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	699a      	ldr	r2, [r3, #24]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003a40 <LIS2DW12_RegisterBusIO+0xcc>)
 80039cc:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a44 <LIS2DW12_RegisterBusIO+0xd0>)
 80039d2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	e020      	b.n	8003a34 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4798      	blx	r3
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	e016      	b.n	8003a34 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d112      	bne.n	8003a34 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10d      	bne.n	8003a34 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8003a18:	2305      	movs	r3, #5
 8003a1a:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8003a1c:	7afb      	ldrb	r3, [r7, #11]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2121      	movs	r1, #33	@ 0x21
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fcbf 	bl	80043a6 <LIS2DW12_Write_Reg>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a32:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003a34:	68fb      	ldr	r3, [r7, #12]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	08004769 	.word	0x08004769
 8003a44:	0800479f 	.word	0x0800479f

08003a48 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3320      	adds	r3, #32
 8003a54:	2101      	movs	r1, #1
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 f9e1 	bl	8004e1e <lis2dw12_auto_increment_set>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	e04b      	b.n	8003b00 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3320      	adds	r3, #32
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 f8f8 	bl	8004c64 <lis2dw12_block_data_update_set>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	e03f      	b.n	8003b00 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3320      	adds	r3, #32
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 fa90 	bl	8004fac <lis2dw12_fifo_mode_set>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
 8003a96:	e033      	b.n	8003b00 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3320      	adds	r3, #32
 8003a9c:	2104      	movs	r1, #4
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fec8 	bl	8004834 <lis2dw12_power_mode_set>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8003aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003aae:	e027      	b.n	8003b00 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a15      	ldr	r2, [pc, #84]	@ (8003b08 <LIS2DW12_Init+0xc0>)
 8003ab4:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3320      	adds	r3, #32
 8003aca:	2100      	movs	r1, #0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 ffb9 	bl	8004a44 <lis2dw12_data_rate_set>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8003ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8003adc:	e010      	b.n	8003b00 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3320      	adds	r3, #32
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 f8e3 	bl	8004cb0 <lis2dw12_full_scale_set>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8003af0:	f04f 33ff 	mov.w	r3, #4294967295
 8003af4:	e004      	b.n	8003b00 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	42c80000 	.word	0x42c80000

08003b0c <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f884 	bl	8003c22 <LIS2DW12_ACC_Disable>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	e010      	b.n	8003b48 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->is_initialized = 0;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3320      	adds	r3, #32
 8003b5e:	6839      	ldr	r1, [r7, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f001 f94b 	bl	8004dfc <lis2dw12_device_id_get>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8003b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b70:	e000      	b.n	8003b74 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2200      	movs	r2, #0
 8003b96:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2210      	movs	r2, #16
 8003ba8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2200      	movs	r2, #0
 8003bae:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	4a06      	ldr	r2, [pc, #24]	@ (8003bd4 <LIS2DW12_GetCapabilities+0x58>)
 8003bbc:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	44c80000 	.word	0x44c80000

08003bd8 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e015      	b.n	8003c1a <LIS2DW12_ACC_Enable+0x42>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fc3a 	bl	8004478 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <LIS2DW12_ACC_Enable+0x38>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8003c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0e:	e004      	b.n	8003c1a <LIS2DW12_ACC_Enable+0x42>
  }

  pObj->acc_is_enabled = 1;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e010      	b.n	8003c5a <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3320      	adds	r3, #32
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 ff00 	bl	8004a44 <lis2dw12_data_rate_set>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	e004      	b.n	8003c5a <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3320      	adds	r3, #32
 8003c76:	f107 020b 	add.w	r2, r7, #11
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 f83d 	bl	8004cfc <lis2dw12_full_scale_get>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	e080      	b.n	8003d90 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3320      	adds	r3, #32
 8003c92:	f107 020a 	add.w	r2, r7, #10
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fe19 	bl	80048d0 <lis2dw12_power_mode_get>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8003ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca8:	e072      	b.n	8003d90 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8003caa:	7abb      	ldrb	r3, [r7, #10]
 8003cac:	2b1b      	cmp	r3, #27
 8003cae:	bf8c      	ite	hi
 8003cb0:	2201      	movhi	r2, #1
 8003cb2:	2200      	movls	r2, #0
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	2a00      	cmp	r2, #0
 8003cb8:	d162      	bne.n	8003d80 <LIS2DW12_ACC_GetSensitivity+0x11c>
 8003cba:	2201      	movs	r2, #1
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8003cc2:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	bf14      	ite	ne
 8003cca:	2301      	movne	r3, #1
 8003ccc:	2300      	moveq	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d12f      	bne.n	8003d34 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8003cd4:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bf14      	ite	ne
 8003cdc:	2301      	movne	r3, #1
 8003cde:	2300      	moveq	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d04c      	beq.n	8003d80 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8003ce6:	7afb      	ldrb	r3, [r7, #11]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d81b      	bhi.n	8003d24 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8003cec:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf4 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003d05 	.word	0x08003d05
 8003cf8:	08003d0d 	.word	0x08003d0d
 8003cfc:	08003d15 	.word	0x08003d15
 8003d00:	08003d1d 	.word	0x08003d1d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	4a24      	ldr	r2, [pc, #144]	@ (8003d98 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003d08:	601a      	str	r2, [r3, #0]
          break;
 8003d0a:	e012      	b.n	8003d32 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	4a23      	ldr	r2, [pc, #140]	@ (8003d9c <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003d10:	601a      	str	r2, [r3, #0]
          break;
 8003d12:	e00e      	b.n	8003d32 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	4a22      	ldr	r2, [pc, #136]	@ (8003da0 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8003d18:	601a      	str	r2, [r3, #0]
          break;
 8003d1a:	e00a      	b.n	8003d32 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	4a21      	ldr	r2, [pc, #132]	@ (8003da4 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8003d20:	601a      	str	r2, [r3, #0]
          break;
 8003d22:	e006      	b.n	8003d32 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	4a20      	ldr	r2, [pc, #128]	@ (8003da8 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003d28:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	60fb      	str	r3, [r7, #12]
          break;
 8003d30:	bf00      	nop
      }
      break;
 8003d32:	e02c      	b.n	8003d8e <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8003d34:	7afb      	ldrb	r3, [r7, #11]
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d81a      	bhi.n	8003d70 <LIS2DW12_ACC_GetSensitivity+0x10c>
 8003d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d40 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	08003d59 	.word	0x08003d59
 8003d48:	08003d61 	.word	0x08003d61
 8003d4c:	08003d69 	.word	0x08003d69
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	4a16      	ldr	r2, [pc, #88]	@ (8003dac <LIS2DW12_ACC_GetSensitivity+0x148>)
 8003d54:	601a      	str	r2, [r3, #0]
          break;
 8003d56:	e012      	b.n	8003d7e <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	4a15      	ldr	r2, [pc, #84]	@ (8003db0 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8003d5c:	601a      	str	r2, [r3, #0]
          break;
 8003d5e:	e00e      	b.n	8003d7e <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	4a0d      	ldr	r2, [pc, #52]	@ (8003d98 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003d64:	601a      	str	r2, [r3, #0]
          break;
 8003d66:	e00a      	b.n	8003d7e <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003d9c <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003d6c:	601a      	str	r2, [r3, #0]
          break;
 8003d6e:	e006      	b.n	8003d7e <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4a0d      	ldr	r2, [pc, #52]	@ (8003da8 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003d74:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003d76:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7a:	60fb      	str	r3, [r7, #12]
          break;
 8003d7c:	bf00      	nop
      }
      break;
 8003d7e:	e006      	b.n	8003d8e <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	4a09      	ldr	r2, [pc, #36]	@ (8003da8 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003d84:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8a:	60fb      	str	r3, [r7, #12]
      break;
 8003d8c:	bf00      	nop
  }

  return ret;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	3f79db23 	.word	0x3f79db23
 8003d9c:	3ff9db23 	.word	0x3ff9db23
 8003da0:	4079db23 	.word	0x4079db23
 8003da4:	40f9db23 	.word	0x40f9db23
 8003da8:	bf800000 	.word	0xbf800000
 8003dac:	3e79db23 	.word	0x3e79db23
 8003db0:	3ef9db23 	.word	0x3ef9db23

08003db4 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3320      	adds	r3, #32
 8003dc6:	f107 020b 	add.w	r2, r7, #11
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fe7f 	bl	8004ad0 <lis2dw12_data_rate_get>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ddc:	e14f      	b.n	800407e <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3320      	adds	r3, #32
 8003de2:	f107 020a 	add.w	r2, r7, #10
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fd71 	bl	80048d0 <lis2dw12_power_mode_get>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003df4:	f04f 33ff 	mov.w	r3, #4294967295
 8003df8:	e141      	b.n	800407e <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8003dfa:	7afb      	ldrb	r3, [r7, #11]
 8003dfc:	2b32      	cmp	r3, #50	@ 0x32
 8003dfe:	f200 8136 	bhi.w	800406e <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8003e02:	a201      	add	r2, pc, #4	@ (adr r2, 8003e08 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003ed5 	.word	0x08003ed5
 8003e0c:	08003edf 	.word	0x08003edf
 8003e10:	08003f39 	.word	0x08003f39
 8003e14:	08003f41 	.word	0x08003f41
 8003e18:	08003f49 	.word	0x08003f49
 8003e1c:	08003f51 	.word	0x08003f51
 8003e20:	08003f59 	.word	0x08003f59
 8003e24:	08003f61 	.word	0x08003f61
 8003e28:	08003fbb 	.word	0x08003fbb
 8003e2c:	08004015 	.word	0x08004015
 8003e30:	0800406f 	.word	0x0800406f
 8003e34:	0800406f 	.word	0x0800406f
 8003e38:	0800406f 	.word	0x0800406f
 8003e3c:	0800406f 	.word	0x0800406f
 8003e40:	0800406f 	.word	0x0800406f
 8003e44:	0800406f 	.word	0x0800406f
 8003e48:	0800406f 	.word	0x0800406f
 8003e4c:	0800406f 	.word	0x0800406f
 8003e50:	08003ed5 	.word	0x08003ed5
 8003e54:	0800406f 	.word	0x0800406f
 8003e58:	0800406f 	.word	0x0800406f
 8003e5c:	0800406f 	.word	0x0800406f
 8003e60:	0800406f 	.word	0x0800406f
 8003e64:	0800406f 	.word	0x0800406f
 8003e68:	0800406f 	.word	0x0800406f
 8003e6c:	0800406f 	.word	0x0800406f
 8003e70:	0800406f 	.word	0x0800406f
 8003e74:	0800406f 	.word	0x0800406f
 8003e78:	0800406f 	.word	0x0800406f
 8003e7c:	0800406f 	.word	0x0800406f
 8003e80:	0800406f 	.word	0x0800406f
 8003e84:	0800406f 	.word	0x0800406f
 8003e88:	0800406f 	.word	0x0800406f
 8003e8c:	0800406f 	.word	0x0800406f
 8003e90:	0800406f 	.word	0x0800406f
 8003e94:	0800406f 	.word	0x0800406f
 8003e98:	0800406f 	.word	0x0800406f
 8003e9c:	0800406f 	.word	0x0800406f
 8003ea0:	0800406f 	.word	0x0800406f
 8003ea4:	0800406f 	.word	0x0800406f
 8003ea8:	0800406f 	.word	0x0800406f
 8003eac:	0800406f 	.word	0x0800406f
 8003eb0:	0800406f 	.word	0x0800406f
 8003eb4:	0800406f 	.word	0x0800406f
 8003eb8:	0800406f 	.word	0x0800406f
 8003ebc:	0800406f 	.word	0x0800406f
 8003ec0:	0800406f 	.word	0x0800406f
 8003ec4:	0800406f 	.word	0x0800406f
 8003ec8:	0800406f 	.word	0x0800406f
 8003ecc:	0800406f 	.word	0x0800406f
 8003ed0:	08003ed5 	.word	0x08003ed5
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
      break;
 8003edc:	e0ce      	b.n	800407c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8003ede:	7abb      	ldrb	r3, [r7, #10]
 8003ee0:	2b1b      	cmp	r3, #27
 8003ee2:	bf8c      	ite	hi
 8003ee4:	2201      	movhi	r2, #1
 8003ee6:	2200      	movls	r2, #0
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	2a00      	cmp	r2, #0
 8003eec:	d11c      	bne.n	8003f28 <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8003eee:	2201      	movs	r2, #1
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003ef8:	2a00      	cmp	r2, #0
 8003efa:	bf14      	ite	ne
 8003efc:	2201      	movne	r2, #1
 8003efe:	2200      	moveq	r2, #0
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	2a00      	cmp	r2, #0
 8003f04:	d10c      	bne.n	8003f20 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8003f06:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bf14      	ite	ne
 8003f0e:	2301      	movne	r3, #1
 8003f10:	2300      	moveq	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	4a5b      	ldr	r2, [pc, #364]	@ (8004088 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003f1c:	601a      	str	r2, [r3, #0]
          break;
 8003f1e:	e00a      	b.n	8003f36 <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	4a5a      	ldr	r2, [pc, #360]	@ (800408c <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 8003f24:	601a      	str	r2, [r3, #0]
          break;
 8003f26:	e006      	b.n	8003f36 <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	4a59      	ldr	r2, [pc, #356]	@ (8004090 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003f2c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f32:	60fb      	str	r3, [r7, #12]
          break;
 8003f34:	bf00      	nop
      }
      break;
 8003f36:	e0a1      	b.n	800407c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	4a53      	ldr	r2, [pc, #332]	@ (8004088 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003f3c:	601a      	str	r2, [r3, #0]
      break;
 8003f3e:	e09d      	b.n	800407c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	4a54      	ldr	r2, [pc, #336]	@ (8004094 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8003f44:	601a      	str	r2, [r3, #0]
      break;
 8003f46:	e099      	b.n	800407c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	4a53      	ldr	r2, [pc, #332]	@ (8004098 <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8003f4c:	601a      	str	r2, [r3, #0]
      break;
 8003f4e:	e095      	b.n	800407c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	4a52      	ldr	r2, [pc, #328]	@ (800409c <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8003f54:	601a      	str	r2, [r3, #0]
      break;
 8003f56:	e091      	b.n	800407c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	4a51      	ldr	r2, [pc, #324]	@ (80040a0 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003f5c:	601a      	str	r2, [r3, #0]
      break;
 8003f5e:	e08d      	b.n	800407c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8003f60:	7abb      	ldrb	r3, [r7, #10]
 8003f62:	2b1b      	cmp	r3, #27
 8003f64:	bf8c      	ite	hi
 8003f66:	2201      	movhi	r2, #1
 8003f68:	2200      	movls	r2, #0
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	2a00      	cmp	r2, #0
 8003f6e:	d11c      	bne.n	8003faa <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8003f70:	2201      	movs	r2, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003f7a:	2a00      	cmp	r2, #0
 8003f7c:	bf14      	ite	ne
 8003f7e:	2201      	movne	r2, #1
 8003f80:	2200      	moveq	r2, #0
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	2a00      	cmp	r2, #0
 8003f86:	d10c      	bne.n	8003fa2 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8003f88:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf14      	ite	ne
 8003f90:	2301      	movne	r3, #1
 8003f92:	2300      	moveq	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	4a41      	ldr	r2, [pc, #260]	@ (80040a4 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8003f9e:	601a      	str	r2, [r3, #0]
          break;
 8003fa0:	e00a      	b.n	8003fb8 <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	4a3e      	ldr	r2, [pc, #248]	@ (80040a0 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003fa6:	601a      	str	r2, [r3, #0]
          break;
 8003fa8:	e006      	b.n	8003fb8 <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	4a38      	ldr	r2, [pc, #224]	@ (8004090 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003fae:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb4:	60fb      	str	r3, [r7, #12]
          break;
 8003fb6:	bf00      	nop
      }
      break;
 8003fb8:	e060      	b.n	800407c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8003fba:	7abb      	ldrb	r3, [r7, #10]
 8003fbc:	2b1b      	cmp	r3, #27
 8003fbe:	bf8c      	ite	hi
 8003fc0:	2201      	movhi	r2, #1
 8003fc2:	2200      	movls	r2, #0
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	2a00      	cmp	r2, #0
 8003fc8:	d11c      	bne.n	8004004 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 8003fca:	2201      	movs	r2, #1
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003fd4:	2a00      	cmp	r2, #0
 8003fd6:	bf14      	ite	ne
 8003fd8:	2201      	movne	r2, #1
 8003fda:	2200      	moveq	r2, #0
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	2a00      	cmp	r2, #0
 8003fe0:	d10c      	bne.n	8003ffc <LIS2DW12_ACC_GetOutputDataRate+0x248>
 8003fe2:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	bf14      	ite	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	2300      	moveq	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d007      	beq.n	8004004 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80040a8 <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8003ff8:	601a      	str	r2, [r3, #0]
          break;
 8003ffa:	e00a      	b.n	8004012 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	4a28      	ldr	r2, [pc, #160]	@ (80040a0 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8004000:	601a      	str	r2, [r3, #0]
          break;
 8004002:	e006      	b.n	8004012 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	4a22      	ldr	r2, [pc, #136]	@ (8004090 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8004008:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800400a:	f04f 33ff 	mov.w	r3, #4294967295
 800400e:	60fb      	str	r3, [r7, #12]
          break;
 8004010:	bf00      	nop
      }
      break;
 8004012:	e033      	b.n	800407c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8004014:	7abb      	ldrb	r3, [r7, #10]
 8004016:	2b1b      	cmp	r3, #27
 8004018:	bf8c      	ite	hi
 800401a:	2201      	movhi	r2, #1
 800401c:	2200      	movls	r2, #0
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	2a00      	cmp	r2, #0
 8004022:	d11c      	bne.n	800405e <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 8004024:	2201      	movs	r2, #1
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800402e:	2a00      	cmp	r2, #0
 8004030:	bf14      	ite	ne
 8004032:	2201      	movne	r2, #1
 8004034:	2200      	moveq	r2, #0
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	2a00      	cmp	r2, #0
 800403a:	d10c      	bne.n	8004056 <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 800403c:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8004040:	2b00      	cmp	r3, #0
 8004042:	bf14      	ite	ne
 8004044:	2301      	movne	r3, #1
 8004046:	2300      	moveq	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	4a16      	ldr	r2, [pc, #88]	@ (80040ac <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 8004052:	601a      	str	r2, [r3, #0]
          break;
 8004054:	e00a      	b.n	800406c <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	4a11      	ldr	r2, [pc, #68]	@ (80040a0 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800405a:	601a      	str	r2, [r3, #0]
          break;
 800405c:	e006      	b.n	800406c <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	4a0b      	ldr	r2, [pc, #44]	@ (8004090 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8004062:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8004064:	f04f 33ff 	mov.w	r3, #4294967295
 8004068:	60fb      	str	r3, [r7, #12]
          break;
 800406a:	bf00      	nop
      }
      break;
 800406c:	e006      	b.n	800407c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	4a07      	ldr	r2, [pc, #28]	@ (8004090 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8004072:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8004074:	f04f 33ff 	mov.w	r3, #4294967295
 8004078:	60fb      	str	r3, [r7, #12]
      break;
 800407a:	bf00      	nop
  }

  return ret;
 800407c:	68fb      	ldr	r3, [r7, #12]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	41480000 	.word	0x41480000
 800408c:	3fcccccd 	.word	0x3fcccccd
 8004090:	bf800000 	.word	0xbf800000
 8004094:	41c80000 	.word	0x41c80000
 8004098:	42480000 	.word	0x42480000
 800409c:	42c80000 	.word	0x42c80000
 80040a0:	43480000 	.word	0x43480000
 80040a4:	43c80000 	.word	0x43c80000
 80040a8:	44480000 	.word	0x44480000
 80040ac:	44c80000 	.word	0x44c80000

080040b0 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 80040ba:	2300      	movs	r3, #0
 80040bc:	2200      	movs	r2, #0
 80040be:	6839      	ldr	r1, [r7, #0]
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f805 	bl	80040d0 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 80040c6:	4603      	mov	r3, r0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	4611      	mov	r1, r2
 80040dc:	461a      	mov	r2, r3
 80040de:	460b      	mov	r3, r1
 80040e0:	71fb      	strb	r3, [r7, #7]
 80040e2:	4613      	mov	r3, r2
 80040e4:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x30>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80040f0:	79bb      	ldrb	r3, [r7, #6]
 80040f2:	79fa      	ldrb	r2, [r7, #7]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f9be 	bl	8004478 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80040fc:	4603      	mov	r3, r0
 80040fe:	e006      	b.n	800410e <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x3e>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8004100:	79bb      	ldrb	r3, [r7, #6]
 8004102:	79fa      	ldrb	r2, [r7, #7]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fab8 	bl	800467c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 800410c:	4603      	mov	r3, r0
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3320      	adds	r3, #32
 800412a:	f107 020b 	add.w	r2, r7, #11
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fde3 	bl	8004cfc <lis2dw12_full_scale_get>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 800413c:	f04f 33ff 	mov.w	r3, #4294967295
 8004140:	e027      	b.n	8004192 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8004142:	7afb      	ldrb	r3, [r7, #11]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d81b      	bhi.n	8004180 <LIS2DW12_ACC_GetFullScale+0x68>
 8004148:	a201      	add	r2, pc, #4	@ (adr r2, 8004150 <LIS2DW12_ACC_GetFullScale+0x38>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004161 	.word	0x08004161
 8004154:	08004169 	.word	0x08004169
 8004158:	08004171 	.word	0x08004171
 800415c:	08004179 	.word	0x08004179
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2202      	movs	r2, #2
 8004164:	601a      	str	r2, [r3, #0]
      break;
 8004166:	e013      	b.n	8004190 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2204      	movs	r2, #4
 800416c:	601a      	str	r2, [r3, #0]
      break;
 800416e:	e00f      	b.n	8004190 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2208      	movs	r2, #8
 8004174:	601a      	str	r2, [r3, #0]
      break;
 8004176:	e00b      	b.n	8004190 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2210      	movs	r2, #16
 800417c:	601a      	str	r2, [r3, #0]
      break;
 800417e:	e007      	b.n	8004190 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f04f 32ff 	mov.w	r2, #4294967295
 8004186:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8004188:	f04f 33ff 	mov.w	r3, #4294967295
 800418c:	60fb      	str	r3, [r7, #12]
      break;
 800418e:	bf00      	nop
  }

  return ret;
 8004190:	68fb      	ldr	r3, [r7, #12]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop

0800419c <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	dd0b      	ble.n	80041c4 <LIS2DW12_ACC_SetFullScale+0x28>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	dd06      	ble.n	80041c0 <LIS2DW12_ACC_SetFullScale+0x24>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	dc01      	bgt.n	80041bc <LIS2DW12_ACC_SetFullScale+0x20>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e004      	b.n	80041c6 <LIS2DW12_ACC_SetFullScale+0x2a>
 80041bc:	2303      	movs	r3, #3
 80041be:	e002      	b.n	80041c6 <LIS2DW12_ACC_SetFullScale+0x2a>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <LIS2DW12_ACC_SetFullScale+0x2a>
 80041c4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 80041c6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3320      	adds	r3, #32
 80041cc:	7bfa      	ldrb	r2, [r7, #15]
 80041ce:	4611      	mov	r1, r2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fd6d 	bl	8004cb0 <lis2dw12_full_scale_set>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80041dc:	f04f 33ff 	mov.w	r3, #4294967295
 80041e0:	e000      	b.n	80041e4 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3320      	adds	r3, #32
 80041fe:	f107 020b 	add.w	r2, r7, #11
 8004202:	4611      	mov	r1, r2
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fb63 	bl	80048d0 <lis2dw12_power_mode_get>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8004210:	f04f 33ff 	mov.w	r3, #4294967295
 8004214:	e068      	b.n	80042e8 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3320      	adds	r3, #32
 800421a:	f107 020c 	add.w	r2, r7, #12
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fda3 	bl	8004d6c <lis2dw12_acceleration_raw_get>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 800422c:	f04f 33ff 	mov.w	r3, #4294967295
 8004230:	e05a      	b.n	80042e8 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 8004232:	7afb      	ldrb	r3, [r7, #11]
 8004234:	2b1b      	cmp	r3, #27
 8004236:	bf8c      	ite	hi
 8004238:	2201      	movhi	r2, #1
 800423a:	2200      	movls	r2, #0
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	2a00      	cmp	r2, #0
 8004240:	d14d      	bne.n	80042de <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8004242:	2201      	movs	r2, #1
 8004244:	409a      	lsls	r2, r3
 8004246:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 800424a:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 800424e:	2b00      	cmp	r3, #0
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d124      	bne.n	80042a6 <LIS2DW12_ACC_GetAxesRaw+0xba>
 800425c:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf14      	ite	ne
 8004264:	2301      	movne	r3, #1
 8004266:	2300      	moveq	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d037      	beq.n	80042de <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 800426e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	da00      	bge.n	8004278 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 8004276:	330f      	adds	r3, #15
 8004278:	111b      	asrs	r3, r3, #4
 800427a:	b21a      	sxth	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8004280:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004284:	2b00      	cmp	r3, #0
 8004286:	da00      	bge.n	800428a <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8004288:	330f      	adds	r3, #15
 800428a:	111b      	asrs	r3, r3, #4
 800428c:	b21a      	sxth	r2, r3
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8004292:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	da00      	bge.n	800429c <LIS2DW12_ACC_GetAxesRaw+0xb0>
 800429a:	330f      	adds	r3, #15
 800429c:	111b      	asrs	r3, r3, #4
 800429e:	b21a      	sxth	r2, r3
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	809a      	strh	r2, [r3, #4]
      break;
 80042a4:	e01f      	b.n	80042e6 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80042a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	da00      	bge.n	80042b0 <LIS2DW12_ACC_GetAxesRaw+0xc4>
 80042ae:	3303      	adds	r3, #3
 80042b0:	109b      	asrs	r3, r3, #2
 80042b2:	b21a      	sxth	r2, r3
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80042b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	da00      	bge.n	80042c2 <LIS2DW12_ACC_GetAxesRaw+0xd6>
 80042c0:	3303      	adds	r3, #3
 80042c2:	109b      	asrs	r3, r3, #2
 80042c4:	b21a      	sxth	r2, r3
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80042ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	da00      	bge.n	80042d4 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 80042d2:	3303      	adds	r3, #3
 80042d4:	109b      	asrs	r3, r3, #2
 80042d6:	b21a      	sxth	r2, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	809a      	strh	r2, [r3, #4]
      break;
 80042dc:	e003      	b.n	80042e6 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
 80042e2:	617b      	str	r3, [r7, #20]
      break;
 80042e4:	bf00      	nop
  }

  return ret;
 80042e6:	697b      	ldr	r3, [r7, #20]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8004300:	f107 0310 	add.w	r3, r7, #16
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff ff70 	bl	80041ec <LIS2DW12_ACC_GetAxesRaw>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8004312:	f04f 33ff 	mov.w	r3, #4294967295
 8004316:	e042      	b.n	800439e <LIS2DW12_ACC_GetAxes+0xae>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8004318:	f107 030c 	add.w	r3, r7, #12
 800431c:	4619      	mov	r1, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff fca0 	bl	8003c64 <LIS2DW12_ACC_GetSensitivity>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 800432a:	f04f 33ff 	mov.w	r3, #4294967295
 800432e:	e036      	b.n	800439e <LIS2DW12_ACC_GetAxes+0xae>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8004330:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004334:	4618      	mov	r0, r3
 8004336:	f7fc fcc1 	bl	8000cbc <__aeabi_i2f>
 800433a:	4602      	mov	r2, r0
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4619      	mov	r1, r3
 8004340:	4610      	mov	r0, r2
 8004342:	f7fc fd0f 	bl	8000d64 <__aeabi_fmul>
 8004346:	4603      	mov	r3, r0
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc fed1 	bl	80010f0 <__aeabi_f2iz>
 800434e:	4602      	mov	r2, r0
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8004354:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004358:	4618      	mov	r0, r3
 800435a:	f7fc fcaf 	bl	8000cbc <__aeabi_i2f>
 800435e:	4602      	mov	r2, r0
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f7fc fcfd 	bl	8000d64 <__aeabi_fmul>
 800436a:	4603      	mov	r3, r0
 800436c:	4618      	mov	r0, r3
 800436e:	f7fc febf 	bl	80010f0 <__aeabi_f2iz>
 8004372:	4602      	mov	r2, r0
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8004378:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800437c:	4618      	mov	r0, r3
 800437e:	f7fc fc9d 	bl	8000cbc <__aeabi_i2f>
 8004382:	4602      	mov	r2, r0
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4619      	mov	r1, r3
 8004388:	4610      	mov	r0, r2
 800438a:	f7fc fceb 	bl	8000d64 <__aeabi_fmul>
 800438e:	4603      	mov	r3, r0
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc fead 	bl	80010f0 <__aeabi_f2iz>
 8004396:	4602      	mov	r2, r0
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	460b      	mov	r3, r1
 80043b0:	70fb      	strb	r3, [r7, #3]
 80043b2:	4613      	mov	r3, r2
 80043b4:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f103 0020 	add.w	r0, r3, #32
 80043bc:	1cba      	adds	r2, r7, #2
 80043be:	78f9      	ldrb	r1, [r7, #3]
 80043c0:	2301      	movs	r3, #1
 80043c2:	f000 fa1f 	bl	8004804 <lis2dw12_write_reg>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 80043cc:	f04f 33ff 	mov.w	r3, #4294967295
 80043d0:	e000      	b.n	80043d4 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <LIS2DW12_ACC_Enable_6D_Orientation>:
  * @brief  Enable 6D orientation detection
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable_6D_Orientation(LIS2DW12_Object_t *pObj)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  int32_t ret = LIS2DW12_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
  lis2dw12_ctrl4_int1_pad_ctrl_t val;

  /* Output Data Rate selection */
  if (LIS2DW12_ACC_SetOutputDataRate(pObj, 200.0f) != LIS2DW12_OK)
 80043e8:	4922      	ldr	r1, [pc, #136]	@ (8004474 <LIS2DW12_ACC_Enable_6D_Orientation+0x98>)
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff fe60 	bl	80040b0 <LIS2DW12_ACC_SetOutputDataRate>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <LIS2DW12_ACC_Enable_6D_Orientation+0x20>
  {
    return LIS2DW12_ERROR;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295
 80043fa:	e036      	b.n	800446a <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  /* Full scale selection */
  if (LIS2DW12_ACC_SetFullScale(pObj, 2) != LIS2DW12_OK)
 80043fc:	2102      	movs	r1, #2
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff fecc 	bl	800419c <LIS2DW12_ACC_SetFullScale>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <LIS2DW12_ACC_Enable_6D_Orientation+0x34>
  {
    return LIS2DW12_ERROR;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	e02c      	b.n	800446a <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  /* 6D orientation threshold. */
  if (lis2dw12_6d_threshold_set(&(pObj->Ctx), 2) != LIS2DW12_OK) /* 60 degrees */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3320      	adds	r3, #32
 8004414:	2102      	movs	r1, #2
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fda2 	bl	8004f60 <lis2dw12_6d_threshold_set>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <LIS2DW12_ACC_Enable_6D_Orientation+0x4c>
  {
    return LIS2DW12_ERROR;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	e020      	b.n	800446a <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  /* Enable 6D orientation event on INT1 pin */
  if (lis2dw12_pin_int1_route_get(&(pObj->Ctx), &val) != LIS2DW12_OK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3320      	adds	r3, #32
 800442c:	f107 0208 	add.w	r2, r7, #8
 8004430:	4611      	mov	r1, r2
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fd83 	bl	8004f3e <lis2dw12_pin_int1_route_get>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <LIS2DW12_ACC_Enable_6D_Orientation+0x68>
  {
    return LIS2DW12_ERROR;
 800443e:	f04f 33ff 	mov.w	r3, #4294967295
 8004442:	e012      	b.n	800446a <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  val.int1_6d = PROPERTY_ENABLE;
 8004444:	7a3b      	ldrb	r3, [r7, #8]
 8004446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800444a:	723b      	strb	r3, [r7, #8]

  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3320      	adds	r3, #32
 8004450:	f107 0208 	add.w	r2, r7, #8
 8004454:	4611      	mov	r1, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fd07 	bl	8004e6a <lis2dw12_pin_int1_route_set>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <LIS2DW12_ACC_Enable_6D_Orientation+0x8c>
  {
    return LIS2DW12_ERROR;
 8004462:	f04f 33ff 	mov.w	r3, #4294967295
 8004466:	e000      	b.n	800446a <LIS2DW12_ACC_Enable_6D_Orientation+0x8e>
  }

  return ret;
 8004468:	68fb      	ldr	r3, [r7, #12]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	43480000 	.word	0x43480000

08004478 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	4611      	mov	r1, r2
 8004484:	461a      	mov	r2, r3
 8004486:	460b      	mov	r3, r1
 8004488:	71fb      	strb	r3, [r7, #7]
 800448a:	4613      	mov	r3, r2
 800448c:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	3b01      	subs	r3, #1
 8004492:	2b03      	cmp	r3, #3
 8004494:	d80a      	bhi.n	80044ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8004496:	a201      	add	r2, pc, #4	@ (adr r2, 800449c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8004498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449c:	080044d5 	.word	0x080044d5
 80044a0:	080044fd 	.word	0x080044fd
 80044a4:	08004525 	.word	0x08004525
 80044a8:	0800454d 	.word	0x0800454d
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80044ac:	79bb      	ldrb	r3, [r7, #6]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d002      	beq.n	80044b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80044b2:	2304      	movs	r3, #4
 80044b4:	75fb      	strb	r3, [r7, #23]
          break;
 80044b6:	e002      	b.n	80044be <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80044b8:	2314      	movs	r3, #20
 80044ba:	75fb      	strb	r3, [r7, #23]
          break;
 80044bc:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80044be:	4967      	ldr	r1, [pc, #412]	@ (800465c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 80044c0:	68b8      	ldr	r0, [r7, #8]
 80044c2:	f7fc fded 	bl	80010a0 <__aeabi_fcmplt>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d100      	bne.n	80044ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x56>
      {
        Odr = 12.5f;
      }
      break;
 80044cc:	e052      	b.n	8004574 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 12.5f;
 80044ce:	4b63      	ldr	r3, [pc, #396]	@ (800465c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 80044d0:	60bb      	str	r3, [r7, #8]
      break;
 80044d2:	e04f      	b.n	8004574 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80044d4:	79bb      	ldrb	r3, [r7, #6]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d002      	beq.n	80044e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x68>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80044da:	2303      	movs	r3, #3
 80044dc:	75fb      	strb	r3, [r7, #23]
          break;
 80044de:	e002      	b.n	80044e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80044e0:	2313      	movs	r3, #19
 80044e2:	75fb      	strb	r3, [r7, #23]
          break;
 80044e4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80044e6:	495e      	ldr	r1, [pc, #376]	@ (8004660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80044e8:	68b8      	ldr	r0, [r7, #8]
 80044ea:	f7fc fdf7 	bl	80010dc <__aeabi_fcmpgt>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d100      	bne.n	80044f6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x7e>
      {
        Odr = 200.0f;
      }
      break;
 80044f4:	e03e      	b.n	8004574 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 80044f6:	4b5a      	ldr	r3, [pc, #360]	@ (8004660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80044f8:	60bb      	str	r3, [r7, #8]
      break;
 80044fa:	e03b      	b.n	8004574 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80044fc:	79bb      	ldrb	r3, [r7, #6]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d002      	beq.n	8004508 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x90>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8004502:	2302      	movs	r3, #2
 8004504:	75fb      	strb	r3, [r7, #23]
          break;
 8004506:	e002      	b.n	800450e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x96>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004508:	2312      	movs	r3, #18
 800450a:	75fb      	strb	r3, [r7, #23]
          break;
 800450c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800450e:	4954      	ldr	r1, [pc, #336]	@ (8004660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004510:	68b8      	ldr	r0, [r7, #8]
 8004512:	f7fc fde3 	bl	80010dc <__aeabi_fcmpgt>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d100      	bne.n	800451e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xa6>
      {
        Odr = 200.0f;
      }
      break;
 800451c:	e02a      	b.n	8004574 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 800451e:	4b50      	ldr	r3, [pc, #320]	@ (8004660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004520:	60bb      	str	r3, [r7, #8]
      break;
 8004522:	e027      	b.n	8004574 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8004524:	79bb      	ldrb	r3, [r7, #6]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d002      	beq.n	8004530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb8>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800452a:	2301      	movs	r3, #1
 800452c:	75fb      	strb	r3, [r7, #23]
          break;
 800452e:	e002      	b.n	8004536 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xbe>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004530:	2311      	movs	r3, #17
 8004532:	75fb      	strb	r3, [r7, #23]
          break;
 8004534:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004536:	494a      	ldr	r1, [pc, #296]	@ (8004660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004538:	68b8      	ldr	r0, [r7, #8]
 800453a:	f7fc fdcf 	bl	80010dc <__aeabi_fcmpgt>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d100      	bne.n	8004546 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xce>
      {
        Odr = 200.0f;
      }
      break;
 8004544:	e016      	b.n	8004574 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 8004546:	4b46      	ldr	r3, [pc, #280]	@ (8004660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004548:	60bb      	str	r3, [r7, #8]
      break;
 800454a:	e013      	b.n	8004574 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 800454c:	79bb      	ldrb	r3, [r7, #6]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d002      	beq.n	8004558 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xe0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8004552:	2300      	movs	r3, #0
 8004554:	75fb      	strb	r3, [r7, #23]
          break;
 8004556:	e002      	b.n	800455e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xe6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004558:	2310      	movs	r3, #16
 800455a:	75fb      	strb	r3, [r7, #23]
          break;
 800455c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800455e:	4940      	ldr	r1, [pc, #256]	@ (8004660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004560:	68b8      	ldr	r0, [r7, #8]
 8004562:	f7fc fdbb 	bl	80010dc <__aeabi_fcmpgt>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d100      	bne.n	800456e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
      {
        Odr = 200.0f;
      }
      break;
 800456c:	e001      	b.n	8004572 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfa>
        Odr = 200.0f;
 800456e:	4b3c      	ldr	r3, [pc, #240]	@ (8004660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004570:	60bb      	str	r3, [r7, #8]
      break;
 8004572:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8004574:	493b      	ldr	r1, [pc, #236]	@ (8004664 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1ec>)
 8004576:	68b8      	ldr	r0, [r7, #8]
 8004578:	f7fc fd9c 	bl	80010b4 <__aeabi_fcmple>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
 8004582:	2301      	movs	r3, #1
 8004584:	e03f      	b.n	8004606 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004586:	4935      	ldr	r1, [pc, #212]	@ (800465c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 8004588:	68b8      	ldr	r0, [r7, #8]
 800458a:	f7fc fd93 	bl	80010b4 <__aeabi_fcmple>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004594:	2302      	movs	r3, #2
 8004596:	e036      	b.n	8004606 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004598:	4933      	ldr	r1, [pc, #204]	@ (8004668 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f0>)
 800459a:	68b8      	ldr	r0, [r7, #8]
 800459c:	f7fc fd8a 	bl	80010b4 <__aeabi_fcmple>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x132>
 80045a6:	2303      	movs	r3, #3
 80045a8:	e02d      	b.n	8004606 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80045aa:	4930      	ldr	r1, [pc, #192]	@ (800466c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f4>)
 80045ac:	68b8      	ldr	r0, [r7, #8]
 80045ae:	f7fc fd81 	bl	80010b4 <__aeabi_fcmple>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x144>
 80045b8:	2304      	movs	r3, #4
 80045ba:	e024      	b.n	8004606 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80045bc:	492c      	ldr	r1, [pc, #176]	@ (8004670 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>)
 80045be:	68b8      	ldr	r0, [r7, #8]
 80045c0:	f7fc fd78 	bl	80010b4 <__aeabi_fcmple>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x156>
 80045ca:	2305      	movs	r3, #5
 80045cc:	e01b      	b.n	8004606 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80045ce:	4924      	ldr	r1, [pc, #144]	@ (8004660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80045d0:	68b8      	ldr	r0, [r7, #8]
 80045d2:	f7fc fd6f 	bl	80010b4 <__aeabi_fcmple>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80045dc:	2306      	movs	r3, #6
 80045de:	e012      	b.n	8004606 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80045e0:	4924      	ldr	r1, [pc, #144]	@ (8004674 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1fc>)
 80045e2:	68b8      	ldr	r0, [r7, #8]
 80045e4:	f7fc fd66 	bl	80010b4 <__aeabi_fcmple>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17a>
 80045ee:	2307      	movs	r3, #7
 80045f0:	e009      	b.n	8004606 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80045f2:	4921      	ldr	r1, [pc, #132]	@ (8004678 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x200>)
 80045f4:	68b8      	ldr	r0, [r7, #8]
 80045f6:	f7fc fd5d 	bl	80010b4 <__aeabi_fcmple>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18c>
 8004600:	2308      	movs	r3, #8
 8004602:	e000      	b.n	8004606 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004604:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8004606:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3320      	adds	r3, #32
 800460c:	7dba      	ldrb	r2, [r7, #22]
 800460e:	4611      	mov	r1, r2
 8004610:	4618      	mov	r0, r3
 8004612:	f000 fa17 	bl	8004a44 <lis2dw12_data_rate_set>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
  {
    return LIS2DW12_ERROR;
 800461c:	f04f 33ff 	mov.w	r3, #4294967295
 8004620:	e018      	b.n	8004654 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1dc>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3320      	adds	r3, #32
 8004626:	7dfa      	ldrb	r2, [r7, #23]
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f902 	bl	8004834 <lis2dw12_power_mode_set>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c4>
  {
    return LIS2DW12_ERROR;
 8004636:	f04f 33ff 	mov.w	r3, #4294967295
 800463a:	e00b      	b.n	8004654 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1dc>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	79fa      	ldrb	r2, [r7, #7]
 8004646:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	79ba      	ldrb	r2, [r7, #6]
 800464e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return LIS2DW12_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	41480000 	.word	0x41480000
 8004660:	43480000 	.word	0x43480000
 8004664:	3fcccccd 	.word	0x3fcccccd
 8004668:	41c80000 	.word	0x41c80000
 800466c:	42480000 	.word	0x42480000
 8004670:	42c80000 	.word	0x42c80000
 8004674:	43c80000 	.word	0x43c80000
 8004678:	44480000 	.word	0x44480000

0800467c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	4611      	mov	r1, r2
 8004688:	461a      	mov	r2, r3
 800468a:	460b      	mov	r3, r1
 800468c:	71fb      	strb	r3, [r7, #7]
 800468e:	4613      	mov	r3, r2
 8004690:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	79fa      	ldrb	r2, [r7, #7]
 8004696:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	79ba      	ldrb	r2, [r7, #6]
 800469e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80046a2:	4928      	ldr	r1, [pc, #160]	@ (8004744 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 80046a4:	68b8      	ldr	r0, [r7, #8]
 80046a6:	f7fc fd05 	bl	80010b4 <__aeabi_fcmple>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x38>
 80046b0:	4b24      	ldr	r3, [pc, #144]	@ (8004744 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 80046b2:	e03f      	b.n	8004734 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=   25.0f) ?   25.0f
 80046b4:	4924      	ldr	r1, [pc, #144]	@ (8004748 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 80046b6:	68b8      	ldr	r0, [r7, #8]
 80046b8:	f7fc fcfc 	bl	80010b4 <__aeabi_fcmple>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x4a>
 80046c2:	4b21      	ldr	r3, [pc, #132]	@ (8004748 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 80046c4:	e036      	b.n	8004734 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=   50.0f) ?   50.0f
 80046c6:	4921      	ldr	r1, [pc, #132]	@ (800474c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 80046c8:	68b8      	ldr	r0, [r7, #8]
 80046ca:	f7fc fcf3 	bl	80010b4 <__aeabi_fcmple>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x5c>
 80046d4:	4b1d      	ldr	r3, [pc, #116]	@ (800474c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 80046d6:	e02d      	b.n	8004734 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  100.0f) ?  100.0f
 80046d8:	491d      	ldr	r1, [pc, #116]	@ (8004750 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 80046da:	68b8      	ldr	r0, [r7, #8]
 80046dc:	f7fc fcea 	bl	80010b4 <__aeabi_fcmple>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 80046e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004750 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 80046e8:	e024      	b.n	8004734 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  200.0f) ?  200.0f
 80046ea:	491a      	ldr	r1, [pc, #104]	@ (8004754 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 80046ec:	68b8      	ldr	r0, [r7, #8]
 80046ee:	f7fc fce1 	bl	80010b4 <__aeabi_fcmple>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
 80046f8:	4b16      	ldr	r3, [pc, #88]	@ (8004754 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 80046fa:	e01b      	b.n	8004734 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  400.0f) ?  400.0f
 80046fc:	4916      	ldr	r1, [pc, #88]	@ (8004758 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 80046fe:	68b8      	ldr	r0, [r7, #8]
 8004700:	f7fc fcd8 	bl	80010b4 <__aeabi_fcmple>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 800470a:	4b13      	ldr	r3, [pc, #76]	@ (8004758 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 800470c:	e012      	b.n	8004734 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  800.0f) ?  800.0f
 800470e:	4913      	ldr	r1, [pc, #76]	@ (800475c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 8004710:	68b8      	ldr	r0, [r7, #8]
 8004712:	f7fc fccf 	bl	80010b4 <__aeabi_fcmple>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa4>
 800471c:	4b0f      	ldr	r3, [pc, #60]	@ (800475c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 800471e:	e009      	b.n	8004734 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  :                    1600.0f;
 8004720:	490f      	ldr	r1, [pc, #60]	@ (8004760 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 8004722:	68b8      	ldr	r0, [r7, #8]
 8004724:	f7fc fcc6 	bl	80010b4 <__aeabi_fcmple>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb6>
 800472e:	4b0c      	ldr	r3, [pc, #48]	@ (8004760 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 8004730:	e000      	b.n	8004734 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
 8004732:	4b0c      	ldr	r3, [pc, #48]	@ (8004764 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	6353      	str	r3, [r2, #52]	@ 0x34

  return LIS2DW12_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	3fcccccd 	.word	0x3fcccccd
 8004748:	41480000 	.word	0x41480000
 800474c:	41c80000 	.word	0x41c80000
 8004750:	42480000 	.word	0x42480000
 8004754:	42c80000 	.word	0x42c80000
 8004758:	43480000 	.word	0x43480000
 800475c:	43c80000 	.word	0x43c80000
 8004760:	44480000 	.word	0x44480000
 8004764:	44c80000 	.word	0x44c80000

08004768 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004768:	b590      	push	{r4, r7, lr}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	461a      	mov	r2, r3
 8004774:	460b      	mov	r3, r1
 8004776:	72fb      	strb	r3, [r7, #11]
 8004778:	4613      	mov	r3, r2
 800477a:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	695c      	ldr	r4, [r3, #20]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	7b1b      	ldrb	r3, [r3, #12]
 8004788:	4618      	mov	r0, r3
 800478a:	7afb      	ldrb	r3, [r7, #11]
 800478c:	b299      	uxth	r1, r3
 800478e:	893b      	ldrh	r3, [r7, #8]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	47a0      	blx	r4
 8004794:	4603      	mov	r3, r0
}
 8004796:	4618      	mov	r0, r3
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	bd90      	pop	{r4, r7, pc}

0800479e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800479e:	b590      	push	{r4, r7, lr}
 80047a0:	b087      	sub	sp, #28
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	461a      	mov	r2, r3
 80047aa:	460b      	mov	r3, r1
 80047ac:	72fb      	strb	r3, [r7, #11]
 80047ae:	4613      	mov	r3, r2
 80047b0:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	691c      	ldr	r4, [r3, #16]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	7b1b      	ldrb	r3, [r3, #12]
 80047be:	4618      	mov	r0, r3
 80047c0:	7afb      	ldrb	r3, [r7, #11]
 80047c2:	b299      	uxth	r1, r3
 80047c4:	893b      	ldrh	r3, [r7, #8]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	47a0      	blx	r4
 80047ca:	4603      	mov	r3, r0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	371c      	adds	r7, #28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd90      	pop	{r4, r7, pc}

080047d4 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80047d4:	b590      	push	{r4, r7, lr}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	607a      	str	r2, [r7, #4]
 80047de:	461a      	mov	r2, r3
 80047e0:	460b      	mov	r3, r1
 80047e2:	72fb      	strb	r3, [r7, #11]
 80047e4:	4613      	mov	r3, r2
 80047e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685c      	ldr	r4, [r3, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68d8      	ldr	r0, [r3, #12]
 80047f0:	893b      	ldrh	r3, [r7, #8]
 80047f2:	7af9      	ldrb	r1, [r7, #11]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	47a0      	blx	r4
 80047f8:	6178      	str	r0, [r7, #20]

  return ret;
 80047fa:	697b      	ldr	r3, [r7, #20]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	bd90      	pop	{r4, r7, pc}

08004804 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	461a      	mov	r2, r3
 8004810:	460b      	mov	r3, r1
 8004812:	72fb      	strb	r3, [r7, #11]
 8004814:	4613      	mov	r3, r2
 8004816:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681c      	ldr	r4, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68d8      	ldr	r0, [r3, #12]
 8004820:	893b      	ldrh	r3, [r7, #8]
 8004822:	7af9      	ldrb	r1, [r7, #11]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	47a0      	blx	r4
 8004828:	6178      	str	r0, [r7, #20]

  return ret;
 800482a:	697b      	ldr	r3, [r7, #20]
}
 800482c:	4618      	mov	r0, r3
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	bd90      	pop	{r4, r7, pc}

08004834 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004840:	f107 0210 	add.w	r2, r7, #16
 8004844:	2301      	movs	r3, #1
 8004846:	2120      	movs	r1, #32
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff ffc3 	bl	80047d4 <lis2dw12_read_reg>
 800484e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d118      	bne.n	8004888 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8004856:	78fb      	ldrb	r3, [r7, #3]
 8004858:	089b      	lsrs	r3, r3, #2
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	b2da      	uxtb	r2, r3
 8004860:	7c3b      	ldrb	r3, [r7, #16]
 8004862:	f362 0383 	bfi	r3, r2, #2, #2
 8004866:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	b2da      	uxtb	r2, r3
 8004870:	7c3b      	ldrb	r3, [r7, #16]
 8004872:	f362 0301 	bfi	r3, r2, #0, #2
 8004876:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004878:	f107 0210 	add.w	r2, r7, #16
 800487c:	2301      	movs	r3, #1
 800487e:	2120      	movs	r1, #32
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ffbf 	bl	8004804 <lis2dw12_write_reg>
 8004886:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d107      	bne.n	800489e <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800488e:	f107 020c 	add.w	r2, r7, #12
 8004892:	2301      	movs	r3, #1
 8004894:	2125      	movs	r1, #37	@ 0x25
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff ff9c 	bl	80047d4 <lis2dw12_read_reg>
 800489c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d110      	bne.n	80048c6 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	7b3b      	ldrb	r3, [r7, #12]
 80048b0:	f362 0382 	bfi	r3, r2, #2, #1
 80048b4:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80048b6:	f107 020c 	add.w	r2, r7, #12
 80048ba:	2301      	movs	r3, #1
 80048bc:	2125      	movs	r1, #37	@ 0x25
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff ffa0 	bl	8004804 <lis2dw12_write_reg>
 80048c4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80048c6:	697b      	ldr	r3, [r7, #20]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80048da:	f107 0210 	add.w	r2, r7, #16
 80048de:	2301      	movs	r3, #1
 80048e0:	2120      	movs	r1, #32
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ff76 	bl	80047d4 <lis2dw12_read_reg>
 80048e8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f040 80a3 	bne.w	8004a38 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80048f2:	f107 020c 	add.w	r2, r7, #12
 80048f6:	2301      	movs	r3, #1
 80048f8:	2125      	movs	r1, #37	@ 0x25
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff ff6a 	bl	80047d4 <lis2dw12_read_reg>
 8004900:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8004902:	7b3b      	ldrb	r3, [r7, #12]
 8004904:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004908:	b2db      	uxtb	r3, r3
 800490a:	011a      	lsls	r2, r3, #4
 800490c:	7c3b      	ldrb	r3, [r7, #16]
 800490e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004912:	b2db      	uxtb	r3, r3
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8004918:	7c3a      	ldrb	r2, [r7, #16]
 800491a:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800491e:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8004920:	4413      	add	r3, r2
 8004922:	2b1b      	cmp	r3, #27
 8004924:	f200 8084 	bhi.w	8004a30 <lis2dw12_power_mode_get+0x160>
 8004928:	a201      	add	r2, pc, #4	@ (adr r2, 8004930 <lis2dw12_power_mode_get+0x60>)
 800492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492e:	bf00      	nop
 8004930:	080049c1 	.word	0x080049c1
 8004934:	080049b9 	.word	0x080049b9
 8004938:	080049b1 	.word	0x080049b1
 800493c:	080049a9 	.word	0x080049a9
 8004940:	080049a1 	.word	0x080049a1
 8004944:	08004a31 	.word	0x08004a31
 8004948:	08004a31 	.word	0x08004a31
 800494c:	08004a31 	.word	0x08004a31
 8004950:	080049e1 	.word	0x080049e1
 8004954:	080049d9 	.word	0x080049d9
 8004958:	080049d1 	.word	0x080049d1
 800495c:	080049c9 	.word	0x080049c9
 8004960:	08004a31 	.word	0x08004a31
 8004964:	08004a31 	.word	0x08004a31
 8004968:	08004a31 	.word	0x08004a31
 800496c:	08004a31 	.word	0x08004a31
 8004970:	08004a09 	.word	0x08004a09
 8004974:	08004a01 	.word	0x08004a01
 8004978:	080049f9 	.word	0x080049f9
 800497c:	080049f1 	.word	0x080049f1
 8004980:	080049e9 	.word	0x080049e9
 8004984:	08004a31 	.word	0x08004a31
 8004988:	08004a31 	.word	0x08004a31
 800498c:	08004a31 	.word	0x08004a31
 8004990:	08004a29 	.word	0x08004a29
 8004994:	08004a21 	.word	0x08004a21
 8004998:	08004a19 	.word	0x08004a19
 800499c:	08004a11 	.word	0x08004a11
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2204      	movs	r2, #4
 80049a4:	701a      	strb	r2, [r3, #0]
        break;
 80049a6:	e047      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2203      	movs	r2, #3
 80049ac:	701a      	strb	r2, [r3, #0]
        break;
 80049ae:	e043      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2202      	movs	r2, #2
 80049b4:	701a      	strb	r2, [r3, #0]
        break;
 80049b6:	e03f      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2201      	movs	r2, #1
 80049bc:	701a      	strb	r2, [r3, #0]
        break;
 80049be:	e03b      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
        break;
 80049c6:	e037      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	220b      	movs	r2, #11
 80049cc:	701a      	strb	r2, [r3, #0]
        break;
 80049ce:	e033      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	220a      	movs	r2, #10
 80049d4:	701a      	strb	r2, [r3, #0]
        break;
 80049d6:	e02f      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2209      	movs	r2, #9
 80049dc:	701a      	strb	r2, [r3, #0]
        break;
 80049de:	e02b      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2208      	movs	r2, #8
 80049e4:	701a      	strb	r2, [r3, #0]
        break;
 80049e6:	e027      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2214      	movs	r2, #20
 80049ec:	701a      	strb	r2, [r3, #0]
        break;
 80049ee:	e023      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2213      	movs	r2, #19
 80049f4:	701a      	strb	r2, [r3, #0]
        break;
 80049f6:	e01f      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2212      	movs	r2, #18
 80049fc:	701a      	strb	r2, [r3, #0]
        break;
 80049fe:	e01b      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2211      	movs	r2, #17
 8004a04:	701a      	strb	r2, [r3, #0]
        break;
 8004a06:	e017      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	701a      	strb	r2, [r3, #0]
        break;
 8004a0e:	e013      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	221b      	movs	r2, #27
 8004a14:	701a      	strb	r2, [r3, #0]
        break;
 8004a16:	e00f      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	221a      	movs	r2, #26
 8004a1c:	701a      	strb	r2, [r3, #0]
        break;
 8004a1e:	e00b      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2219      	movs	r2, #25
 8004a24:	701a      	strb	r2, [r3, #0]
        break;
 8004a26:	e007      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2218      	movs	r2, #24
 8004a2c:	701a      	strb	r2, [r3, #0]
        break;
 8004a2e:	e003      	b.n	8004a38 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2204      	movs	r2, #4
 8004a34:	701a      	strb	r2, [r3, #0]
        break;
 8004a36:	bf00      	nop
    }
  }

  return ret;
 8004a38:	697b      	ldr	r3, [r7, #20]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop

08004a44 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004a50:	f107 0210 	add.w	r2, r7, #16
 8004a54:	2301      	movs	r3, #1
 8004a56:	2120      	movs	r1, #32
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff febb 	bl	80047d4 <lis2dw12_read_reg>
 8004a5e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10f      	bne.n	8004a86 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	7c3b      	ldrb	r3, [r7, #16]
 8004a70:	f362 1307 	bfi	r3, r2, #4, #4
 8004a74:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004a76:	f107 0210 	add.w	r2, r7, #16
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	2120      	movs	r1, #32
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff fec0 	bl	8004804 <lis2dw12_write_reg>
 8004a84:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d107      	bne.n	8004a9c <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004a8c:	f107 020c 	add.w	r2, r7, #12
 8004a90:	2301      	movs	r3, #1
 8004a92:	2122      	movs	r1, #34	@ 0x22
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff fe9d 	bl	80047d4 <lis2dw12_read_reg>
 8004a9a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d110      	bne.n	8004ac4 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	091b      	lsrs	r3, r3, #4
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	7b3b      	ldrb	r3, [r7, #12]
 8004aae:	f362 0301 	bfi	r3, r2, #0, #2
 8004ab2:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004ab4:	f107 020c 	add.w	r2, r7, #12
 8004ab8:	2301      	movs	r3, #1
 8004aba:	2122      	movs	r1, #34	@ 0x22
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff fea1 	bl	8004804 <lis2dw12_write_reg>
 8004ac2:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004ac4:	697b      	ldr	r3, [r7, #20]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004ada:	f107 0210 	add.w	r2, r7, #16
 8004ade:	2301      	movs	r3, #1
 8004ae0:	2120      	movs	r1, #32
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff fe76 	bl	80047d4 <lis2dw12_read_reg>
 8004ae8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f040 80b3 	bne.w	8004c58 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004af2:	f107 020c 	add.w	r2, r7, #12
 8004af6:	2301      	movs	r3, #1
 8004af8:	2122      	movs	r1, #34	@ 0x22
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff fe6a 	bl	80047d4 <lis2dw12_read_reg>
 8004b00:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8004b02:	7b3b      	ldrb	r3, [r7, #12]
 8004b04:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	7c3a      	ldrb	r2, [r7, #16]
 8004b0e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	4413      	add	r3, r2
 8004b16:	2b32      	cmp	r3, #50	@ 0x32
 8004b18:	f200 809a 	bhi.w	8004c50 <lis2dw12_data_rate_get+0x180>
 8004b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <lis2dw12_data_rate_get+0x54>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004bf1 	.word	0x08004bf1
 8004b28:	08004bf9 	.word	0x08004bf9
 8004b2c:	08004c01 	.word	0x08004c01
 8004b30:	08004c09 	.word	0x08004c09
 8004b34:	08004c11 	.word	0x08004c11
 8004b38:	08004c19 	.word	0x08004c19
 8004b3c:	08004c21 	.word	0x08004c21
 8004b40:	08004c29 	.word	0x08004c29
 8004b44:	08004c31 	.word	0x08004c31
 8004b48:	08004c39 	.word	0x08004c39
 8004b4c:	08004c51 	.word	0x08004c51
 8004b50:	08004c51 	.word	0x08004c51
 8004b54:	08004c51 	.word	0x08004c51
 8004b58:	08004c51 	.word	0x08004c51
 8004b5c:	08004c51 	.word	0x08004c51
 8004b60:	08004c51 	.word	0x08004c51
 8004b64:	08004c51 	.word	0x08004c51
 8004b68:	08004c51 	.word	0x08004c51
 8004b6c:	08004c49 	.word	0x08004c49
 8004b70:	08004c51 	.word	0x08004c51
 8004b74:	08004c51 	.word	0x08004c51
 8004b78:	08004c51 	.word	0x08004c51
 8004b7c:	08004c51 	.word	0x08004c51
 8004b80:	08004c51 	.word	0x08004c51
 8004b84:	08004c51 	.word	0x08004c51
 8004b88:	08004c51 	.word	0x08004c51
 8004b8c:	08004c51 	.word	0x08004c51
 8004b90:	08004c51 	.word	0x08004c51
 8004b94:	08004c51 	.word	0x08004c51
 8004b98:	08004c51 	.word	0x08004c51
 8004b9c:	08004c51 	.word	0x08004c51
 8004ba0:	08004c51 	.word	0x08004c51
 8004ba4:	08004c51 	.word	0x08004c51
 8004ba8:	08004c51 	.word	0x08004c51
 8004bac:	08004c51 	.word	0x08004c51
 8004bb0:	08004c51 	.word	0x08004c51
 8004bb4:	08004c51 	.word	0x08004c51
 8004bb8:	08004c51 	.word	0x08004c51
 8004bbc:	08004c51 	.word	0x08004c51
 8004bc0:	08004c51 	.word	0x08004c51
 8004bc4:	08004c51 	.word	0x08004c51
 8004bc8:	08004c51 	.word	0x08004c51
 8004bcc:	08004c51 	.word	0x08004c51
 8004bd0:	08004c51 	.word	0x08004c51
 8004bd4:	08004c51 	.word	0x08004c51
 8004bd8:	08004c51 	.word	0x08004c51
 8004bdc:	08004c51 	.word	0x08004c51
 8004be0:	08004c51 	.word	0x08004c51
 8004be4:	08004c51 	.word	0x08004c51
 8004be8:	08004c51 	.word	0x08004c51
 8004bec:	08004c41 	.word	0x08004c41
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	701a      	strb	r2, [r3, #0]
        break;
 8004bf6:	e02f      	b.n	8004c58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	701a      	strb	r2, [r3, #0]
        break;
 8004bfe:	e02b      	b.n	8004c58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2202      	movs	r2, #2
 8004c04:	701a      	strb	r2, [r3, #0]
        break;
 8004c06:	e027      	b.n	8004c58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	701a      	strb	r2, [r3, #0]
        break;
 8004c0e:	e023      	b.n	8004c58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2204      	movs	r2, #4
 8004c14:	701a      	strb	r2, [r3, #0]
        break;
 8004c16:	e01f      	b.n	8004c58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2205      	movs	r2, #5
 8004c1c:	701a      	strb	r2, [r3, #0]
        break;
 8004c1e:	e01b      	b.n	8004c58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2206      	movs	r2, #6
 8004c24:	701a      	strb	r2, [r3, #0]
        break;
 8004c26:	e017      	b.n	8004c58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2207      	movs	r2, #7
 8004c2c:	701a      	strb	r2, [r3, #0]
        break;
 8004c2e:	e013      	b.n	8004c58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2208      	movs	r2, #8
 8004c34:	701a      	strb	r2, [r3, #0]
        break;
 8004c36:	e00f      	b.n	8004c58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2209      	movs	r2, #9
 8004c3c:	701a      	strb	r2, [r3, #0]
        break;
 8004c3e:	e00b      	b.n	8004c58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2232      	movs	r2, #50	@ 0x32
 8004c44:	701a      	strb	r2, [r3, #0]
        break;
 8004c46:	e007      	b.n	8004c58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2212      	movs	r2, #18
 8004c4c:	701a      	strb	r2, [r3, #0]
        break;
 8004c4e:	e003      	b.n	8004c58 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
        break;
 8004c56:	bf00      	nop
    }
  }

  return ret;
 8004c58:	697b      	ldr	r3, [r7, #20]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop

08004c64 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004c70:	f107 0208 	add.w	r2, r7, #8
 8004c74:	2301      	movs	r3, #1
 8004c76:	2121      	movs	r1, #33	@ 0x21
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fdab 	bl	80047d4 <lis2dw12_read_reg>
 8004c7e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10f      	bne.n	8004ca6 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	7a3b      	ldrb	r3, [r7, #8]
 8004c90:	f362 03c3 	bfi	r3, r2, #3, #1
 8004c94:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004c96:	f107 0208 	add.w	r2, r7, #8
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	2121      	movs	r1, #33	@ 0x21
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff fdb0 	bl	8004804 <lis2dw12_write_reg>
 8004ca4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004cbc:	f107 0208 	add.w	r2, r7, #8
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	2125      	movs	r1, #37	@ 0x25
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff fd85 	bl	80047d4 <lis2dw12_read_reg>
 8004cca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10f      	bne.n	8004cf2 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	7a3b      	ldrb	r3, [r7, #8]
 8004cdc:	f362 1305 	bfi	r3, r2, #4, #2
 8004ce0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004ce2:	f107 0208 	add.w	r2, r7, #8
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	2125      	movs	r1, #37	@ 0x25
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff fd8a 	bl	8004804 <lis2dw12_write_reg>
 8004cf0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004d06:	f107 0208 	add.w	r2, r7, #8
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	2125      	movs	r1, #37	@ 0x25
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff fd60 	bl	80047d4 <lis2dw12_read_reg>
 8004d14:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8004d16:	7a3b      	ldrb	r3, [r7, #8]
 8004d18:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d81a      	bhi.n	8004d58 <lis2dw12_full_scale_get+0x5c>
 8004d22:	a201      	add	r2, pc, #4	@ (adr r2, 8004d28 <lis2dw12_full_scale_get+0x2c>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d39 	.word	0x08004d39
 8004d2c:	08004d41 	.word	0x08004d41
 8004d30:	08004d49 	.word	0x08004d49
 8004d34:	08004d51 	.word	0x08004d51
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
      break;
 8004d3e:	e00f      	b.n	8004d60 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2201      	movs	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
      break;
 8004d46:	e00b      	b.n	8004d60 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	701a      	strb	r2, [r3, #0]
      break;
 8004d4e:	e007      	b.n	8004d60 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2203      	movs	r2, #3
 8004d54:	701a      	strb	r2, [r3, #0]
      break;
 8004d56:	e003      	b.n	8004d60 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	701a      	strb	r2, [r3, #0]
      break;
 8004d5e:	bf00      	nop
  }

  return ret;
 8004d60:	68fb      	ldr	r3, [r7, #12]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop

08004d6c <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8004d76:	f107 020c 	add.w	r2, r7, #12
 8004d7a:	2306      	movs	r3, #6
 8004d7c:	2128      	movs	r1, #40	@ 0x28
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff fd28 	bl	80047d4 <lis2dw12_read_reg>
 8004d84:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004d86:	7b7b      	ldrb	r3, [r7, #13]
 8004d88:	b21a      	sxth	r2, r3
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	7b3a      	ldrb	r2, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	b21a      	sxth	r2, r3
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004da6:	7bfa      	ldrb	r2, [r7, #15]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	3302      	adds	r3, #2
 8004dac:	b212      	sxth	r2, r2
 8004dae:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	3302      	adds	r3, #2
 8004db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	7bba      	ldrb	r2, [r7, #14]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	3302      	adds	r3, #2
 8004dc8:	b212      	sxth	r2, r2
 8004dca:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004dcc:	7c7a      	ldrb	r2, [r7, #17]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	b212      	sxth	r2, r2
 8004dd4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	7c3a      	ldrb	r2, [r7, #16]
 8004de6:	4413      	add	r3, r2
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	3304      	adds	r3, #4
 8004dee:	b212      	sxth	r2, r2
 8004df0:	801a      	strh	r2, [r3, #0]

  return ret;
 8004df2:	697b      	ldr	r3, [r7, #20]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004e06:	2301      	movs	r3, #1
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	210f      	movs	r1, #15
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff fce1 	bl	80047d4 <lis2dw12_read_reg>
 8004e12:	60f8      	str	r0, [r7, #12]

  return ret;
 8004e14:	68fb      	ldr	r3, [r7, #12]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	460b      	mov	r3, r1
 8004e28:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004e2a:	f107 0208 	add.w	r2, r7, #8
 8004e2e:	2301      	movs	r3, #1
 8004e30:	2121      	movs	r1, #33	@ 0x21
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff fcce 	bl	80047d4 <lis2dw12_read_reg>
 8004e38:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10f      	bne.n	8004e60 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	7a3b      	ldrb	r3, [r7, #8]
 8004e4a:	f362 0382 	bfi	r3, r2, #2, #1
 8004e4e:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004e50:	f107 0208 	add.w	r2, r7, #8
 8004e54:	2301      	movs	r3, #1
 8004e56:	2121      	movs	r1, #33	@ 0x21
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff fcd3 	bl	8004804 <lis2dw12_write_reg>
 8004e5e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e60:	68fb      	ldr	r3, [r7, #12]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b086      	sub	sp, #24
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8004e74:	f107 0210 	add.w	r2, r7, #16
 8004e78:	2301      	movs	r3, #1
 8004e7a:	2124      	movs	r1, #36	@ 0x24
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff fca9 	bl	80047d4 <lis2dw12_read_reg>
 8004e82:	6178      	str	r0, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d107      	bne.n	8004e9a <lis2dw12_pin_int1_route_set+0x30>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8004e8a:	f107 020c 	add.w	r2, r7, #12
 8004e8e:	2301      	movs	r3, #1
 8004e90:	213f      	movs	r1, #63	@ 0x3f
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff fc9e 	bl	80047d4 <lis2dw12_read_reg>
 8004e98:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d13e      	bne.n	8004f1e <lis2dw12_pin_int1_route_set+0xb4>
  {
    if ((val->int1_tap |
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004ea8:	b2da      	uxtb	r2, r3
         val->int1_ff |
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004eb2:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	b2da      	uxtb	r2, r3
         val->int1_wu |
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004ec0:	b2db      	uxtb	r3, r3
         val->int1_ff |
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ece:	b2db      	uxtb	r3, r3
         val->int1_wu |
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	b2da      	uxtb	r2, r3
         val->int1_6d |
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004edc:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8004ee2:	7c3b      	ldrb	r3, [r7, #16]
 8004ee4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ee8:	b2db      	uxtb	r3, r3
         val->int1_6d |
 8004eea:	4313      	orrs	r3, r2
 8004eec:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 8004eee:	7c3b      	ldrb	r3, [r7, #16]
 8004ef0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ef4:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d004      	beq.n	8004f08 <lis2dw12_pin_int1_route_set+0x9e>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 8004efe:	7b3b      	ldrb	r3, [r7, #12]
 8004f00:	f043 0320 	orr.w	r3, r3, #32
 8004f04:	733b      	strb	r3, [r7, #12]
 8004f06:	e003      	b.n	8004f10 <lis2dw12_pin_int1_route_set+0xa6>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 8004f08:	7b3b      	ldrb	r3, [r7, #12]
 8004f0a:	f36f 1345 	bfc	r3, #5, #1
 8004f0e:	733b      	strb	r3, [r7, #12]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8004f10:	2301      	movs	r3, #1
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	2123      	movs	r1, #35	@ 0x23
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff fc74 	bl	8004804 <lis2dw12_write_reg>
 8004f1c:	6178      	str	r0, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d107      	bne.n	8004f34 <lis2dw12_pin_int1_route_set+0xca>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8004f24:	f107 020c 	add.w	r2, r7, #12
 8004f28:	2301      	movs	r3, #1
 8004f2a:	213f      	movs	r1, #63	@ 0x3f
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff fc69 	bl	8004804 <lis2dw12_write_reg>
 8004f32:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004f34:	697b      	ldr	r3, [r7, #20]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8004f48:	2301      	movs	r3, #1
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	2123      	movs	r1, #35	@ 0x23
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff fc40 	bl	80047d4 <lis2dw12_read_reg>
 8004f54:	60f8      	str	r0, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8004f56:	68fb      	ldr	r3, [r7, #12]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <lis2dw12_6d_threshold_set>:
  * @param  val      change the values of 6d_ths in reg TAP_THS_X
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_6d_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_tap_ths_x_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_TAP_THS_X, (uint8_t *) &reg, 1);
 8004f6c:	f107 0208 	add.w	r2, r7, #8
 8004f70:	2301      	movs	r3, #1
 8004f72:	2130      	movs	r1, #48	@ 0x30
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff fc2d 	bl	80047d4 <lis2dw12_read_reg>
 8004f7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10f      	bne.n	8004fa2 <lis2dw12_6d_threshold_set+0x42>
  {
    reg._6d_ths = val;
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	7a3b      	ldrb	r3, [r7, #8]
 8004f8c:	f362 1346 	bfi	r3, r2, #5, #2
 8004f90:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_TAP_THS_X, (uint8_t *) &reg, 1);
 8004f92:	f107 0208 	add.w	r2, r7, #8
 8004f96:	2301      	movs	r3, #1
 8004f98:	2130      	movs	r1, #48	@ 0x30
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff fc32 	bl	8004804 <lis2dw12_write_reg>
 8004fa0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004fb8:	f107 0208 	add.w	r2, r7, #8
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	212e      	movs	r1, #46	@ 0x2e
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff fc07 	bl	80047d4 <lis2dw12_read_reg>
 8004fc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10f      	bne.n	8004fee <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	7a3b      	ldrb	r3, [r7, #8]
 8004fd8:	f362 1347 	bfi	r3, r2, #5, #3
 8004fdc:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004fde:	f107 0208 	add.w	r2, r7, #8
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	212e      	movs	r1, #46	@ 0x2e
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff fc0c 	bl	8004804 <lis2dw12_write_reg>
 8004fec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004fee:	68fb      	ldr	r3, [r7, #12]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d103      	bne.n	8005014 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 800500c:	f04f 33ff 	mov.w	r3, #4294967295
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	e067      	b.n	80050e4 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	7b1a      	ldrb	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	699a      	ldr	r2, [r3, #24]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a28      	ldr	r2, [pc, #160]	@ (80050f0 <LIS2MDL_RegisterBusIO+0xf8>)
 8005050:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a27      	ldr	r2, [pc, #156]	@ (80050f4 <LIS2MDL_RegisterBusIO+0xfc>)
 8005056:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d103      	bne.n	8005076 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	e036      	b.n	80050e4 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4798      	blx	r3
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8005082:	f04f 33ff 	mov.w	r3, #4294967295
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e02c      	b.n	80050e4 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d028      	beq.n	80050e4 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005098:	2b00      	cmp	r3, #0
 800509a:	d123      	bne.n	80050e4 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d10d      	bne.n	80050c0 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80050a4:	2334      	movs	r3, #52	@ 0x34
 80050a6:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80050a8:	7afb      	ldrb	r3, [r7, #11]
 80050aa:	461a      	mov	r2, r3
 80050ac:	2162      	movs	r1, #98	@ 0x62
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fb16 	bl	80056e0 <LIS2MDL_Write_Reg>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d014      	beq.n	80050e4 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295
 80050be:	e012      	b.n	80050e6 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d101      	bne.n	80050cc <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	e00c      	b.n	80050e6 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3320      	adds	r3, #32
 80050d0:	2101      	movs	r1, #1
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 ff67 	bl	8005fa6 <lis2mdl_i2c_interface_set>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80050de:	f04f 33ff 	mov.w	r3, #4294967295
 80050e2:	e000      	b.n	80050e6 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80050e4:	68fb      	ldr	r3, [r7, #12]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	08005737 	.word	0x08005737
 80050f4:	080057b9 	.word	0x080057b9

080050f8 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d144      	bne.n	8005192 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8005108:	f107 0208 	add.w	r2, r7, #8
 800510c:	2301      	movs	r3, #1
 800510e:	2162      	movs	r1, #98	@ 0x62
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fb92 	bl	800583a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 800511c:	f04f 33ff 	mov.w	r3, #4294967295
 8005120:	e06c      	b.n	80051fc <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005122:	f107 020c 	add.w	r2, r7, #12
 8005126:	2301      	movs	r3, #1
 8005128:	2160      	movs	r1, #96	@ 0x60
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fb85 	bl	800583a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8005136:	f04f 33ff 	mov.w	r3, #4294967295
 800513a:	e05f      	b.n	80051fc <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 800513c:	7a3b      	ldrb	r3, [r7, #8]
 800513e:	f043 0310 	orr.w	r3, r3, #16
 8005142:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8005144:	7a3b      	ldrb	r3, [r7, #8]
 8005146:	f36f 0341 	bfc	r3, #1, #1
 800514a:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800514c:	7b3b      	ldrb	r3, [r7, #12]
 800514e:	2202      	movs	r2, #2
 8005150:	f362 0301 	bfi	r3, r2, #0, #2
 8005154:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8005156:	7b3b      	ldrb	r3, [r7, #12]
 8005158:	f043 030c 	orr.w	r3, r3, #12
 800515c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800515e:	f107 0208 	add.w	r2, r7, #8
 8005162:	2301      	movs	r3, #1
 8005164:	2162      	movs	r1, #98	@ 0x62
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fca6 	bl	8005ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8005172:	f04f 33ff 	mov.w	r3, #4294967295
 8005176:	e041      	b.n	80051fc <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005178:	f107 020c 	add.w	r2, r7, #12
 800517c:	2301      	movs	r3, #1
 800517e:	2160      	movs	r1, #96	@ 0x60
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fc99 	bl	8005ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d032      	beq.n	80051f2 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 800518c:	f04f 33ff 	mov.w	r3, #4294967295
 8005190:	e034      	b.n	80051fc <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3320      	adds	r3, #32
 8005196:	2101      	movs	r1, #1
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fe5f 	bl	8005e5c <lis2mdl_block_data_update_set>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80051a4:	f04f 33ff 	mov.w	r3, #4294967295
 80051a8:	e028      	b.n	80051fc <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3320      	adds	r3, #32
 80051ae:	2102      	movs	r1, #2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fdcf 	bl	8005d54 <lis2mdl_operating_mode_set>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80051bc:	f04f 33ff 	mov.w	r3, #4294967295
 80051c0:	e01c      	b.n	80051fc <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3320      	adds	r3, #32
 80051c6:	2103      	movs	r1, #3
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fde9 	bl	8005da0 <lis2mdl_data_rate_set>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80051d4:	f04f 33ff 	mov.w	r3, #4294967295
 80051d8:	e010      	b.n	80051fc <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3320      	adds	r3, #32
 80051de:	2100      	movs	r1, #0
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 feba 	bl	8005f5a <lis2mdl_self_test_set>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80051ec:	f04f 33ff 	mov.w	r3, #4294967295
 80051f0:	e004      	b.n	80051fc <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f8a5 	bl	800535c <LIS2MDL_MAG_Disable>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8005218:	f04f 33ff 	mov.w	r3, #4294967295
 800521c:	e004      	b.n	8005228 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b03      	cmp	r3, #3
 8005240:	d10b      	bne.n	800525a <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8005242:	2301      	movs	r3, #1
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	214f      	movs	r1, #79	@ 0x4f
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 faf6 	bl	800583a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00e      	beq.n	8005272 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8005254:	f04f 33ff 	mov.w	r3, #4294967295
 8005258:	e00c      	b.n	8005274 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3320      	adds	r3, #32
 800525e:	6839      	ldr	r1, [r7, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fe69 	bl	8005f38 <lis2mdl_device_id_get>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 800526c:	f04f 33ff 	mov.w	r3, #4294967295
 8005270:	e000      	b.n	8005274 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2200      	movs	r2, #0
 800528a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2200      	movs	r2, #0
 8005290:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2201      	movs	r2, #1
 8005296:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2200      	movs	r2, #0
 80052a2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2232      	movs	r2, #50	@ 0x32
 80052ae:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	4a04      	ldr	r2, [pc, #16]	@ (80052d4 <LIS2MDL_GetCapabilities+0x58>)
 80052c4:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	42c80000 	.word	0x42c80000

080052d8 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	e032      	b.n	8005354 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d11d      	bne.n	8005332 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80052f6:	f107 020c 	add.w	r2, r7, #12
 80052fa:	2301      	movs	r3, #1
 80052fc:	2160      	movs	r1, #96	@ 0x60
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fa9b 	bl	800583a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800530a:	f04f 33ff 	mov.w	r3, #4294967295
 800530e:	e021      	b.n	8005354 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8005310:	7b3b      	ldrb	r3, [r7, #12]
 8005312:	f36f 0301 	bfc	r3, #0, #2
 8005316:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005318:	f107 020c 	add.w	r2, r7, #12
 800531c:	2301      	movs	r3, #1
 800531e:	2160      	movs	r1, #96	@ 0x60
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fbc9 	bl	8005ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00e      	beq.n	800534a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800532c:	f04f 33ff 	mov.w	r3, #4294967295
 8005330:	e010      	b.n	8005354 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3320      	adds	r3, #32
 8005336:	2100      	movs	r1, #0
 8005338:	4618      	mov	r0, r3
 800533a:	f000 fd0b 	bl	8005d54 <lis2mdl_operating_mode_set>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8005344:	f04f 33ff 	mov.w	r3, #4294967295
 8005348:	e004      	b.n	8005354 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	e033      	b.n	80053da <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b03      	cmp	r3, #3
 8005378:	d11e      	bne.n	80053b8 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800537a:	f107 020c 	add.w	r2, r7, #12
 800537e:	2301      	movs	r3, #1
 8005380:	2160      	movs	r1, #96	@ 0x60
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fa59 	bl	800583a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 800538e:	f04f 33ff 	mov.w	r3, #4294967295
 8005392:	e022      	b.n	80053da <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8005394:	7b3b      	ldrb	r3, [r7, #12]
 8005396:	2202      	movs	r2, #2
 8005398:	f362 0301 	bfi	r3, r2, #0, #2
 800539c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800539e:	f107 020c 	add.w	r2, r7, #12
 80053a2:	2301      	movs	r3, #1
 80053a4:	2160      	movs	r1, #96	@ 0x60
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fb86 	bl	8005ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00e      	beq.n	80053d0 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80053b2:	f04f 33ff 	mov.w	r3, #4294967295
 80053b6:	e010      	b.n	80053da <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3320      	adds	r3, #32
 80053bc:	2102      	movs	r1, #2
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fcc8 	bl	8005d54 <lis2mdl_operating_mode_set>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80053ca:	f04f 33ff 	mov.w	r3, #4294967295
 80053ce:	e004      	b.n	80053da <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 80053f2:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr

08005400 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3320      	adds	r3, #32
 8005412:	f107 020b 	add.w	r2, r7, #11
 8005416:	4611      	mov	r1, r2
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fce7 	bl	8005dec <lis2mdl_data_rate_get>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8005424:	f04f 33ff 	mov.w	r3, #4294967295
 8005428:	e023      	b.n	8005472 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800542a:	7afb      	ldrb	r3, [r7, #11]
 800542c:	2b03      	cmp	r3, #3
 800542e:	d81b      	bhi.n	8005468 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8005430:	a201      	add	r2, pc, #4	@ (adr r2, 8005438 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8005432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005436:	bf00      	nop
 8005438:	08005449 	.word	0x08005449
 800543c:	08005451 	.word	0x08005451
 8005440:	08005459 	.word	0x08005459
 8005444:	08005461 	.word	0x08005461
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	4a0c      	ldr	r2, [pc, #48]	@ (800547c <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 800544c:	601a      	str	r2, [r3, #0]
      break;
 800544e:	e00f      	b.n	8005470 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	4a0b      	ldr	r2, [pc, #44]	@ (8005480 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8005454:	601a      	str	r2, [r3, #0]
      break;
 8005456:	e00b      	b.n	8005470 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	4a0a      	ldr	r2, [pc, #40]	@ (8005484 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 800545c:	601a      	str	r2, [r3, #0]
      break;
 800545e:	e007      	b.n	8005470 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	4a09      	ldr	r2, [pc, #36]	@ (8005488 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8005464:	601a      	str	r2, [r3, #0]
      break;
 8005466:	e003      	b.n	8005470 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8005468:	f04f 33ff 	mov.w	r3, #4294967295
 800546c:	60fb      	str	r3, [r7, #12]
      break;
 800546e:	bf00      	nop
  }

  return ret;
 8005470:	68fb      	ldr	r3, [r7, #12]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	41200000 	.word	0x41200000
 8005480:	41a00000 	.word	0x41a00000
 8005484:	42480000 	.word	0x42480000
 8005488:	42c80000 	.word	0x42c80000

0800548c <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8005496:	492a      	ldr	r1, [pc, #168]	@ (8005540 <LIS2MDL_MAG_SetOutputDataRate+0xb4>)
 8005498:	6838      	ldr	r0, [r7, #0]
 800549a:	f7fb fe0b 	bl	80010b4 <__aeabi_fcmple>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <LIS2MDL_MAG_SetOutputDataRate+0x1c>
 80054a4:	2300      	movs	r3, #0
 80054a6:	e012      	b.n	80054ce <LIS2MDL_MAG_SetOutputDataRate+0x42>
 80054a8:	4926      	ldr	r1, [pc, #152]	@ (8005544 <LIS2MDL_MAG_SetOutputDataRate+0xb8>)
 80054aa:	6838      	ldr	r0, [r7, #0]
 80054ac:	f7fb fe02 	bl	80010b4 <__aeabi_fcmple>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <LIS2MDL_MAG_SetOutputDataRate+0x2e>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e009      	b.n	80054ce <LIS2MDL_MAG_SetOutputDataRate+0x42>
 80054ba:	4923      	ldr	r1, [pc, #140]	@ (8005548 <LIS2MDL_MAG_SetOutputDataRate+0xbc>)
 80054bc:	6838      	ldr	r0, [r7, #0]
 80054be:	f7fb fdf9 	bl	80010b4 <__aeabi_fcmple>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <LIS2MDL_MAG_SetOutputDataRate+0x40>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e000      	b.n	80054ce <LIS2MDL_MAG_SetOutputDataRate+0x42>
 80054cc:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80054ce:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d121      	bne.n	800551c <LIS2MDL_MAG_SetOutputDataRate+0x90>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80054d8:	f107 020c 	add.w	r2, r7, #12
 80054dc:	2301      	movs	r3, #1
 80054de:	2160      	movs	r1, #96	@ 0x60
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f9aa 	bl	800583a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <LIS2MDL_MAG_SetOutputDataRate+0x66>
    {
      return LIS2MDL_ERROR;
 80054ec:	f04f 33ff 	mov.w	r3, #4294967295
 80054f0:	e022      	b.n	8005538 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 80054f2:	7bfb      	ldrb	r3, [r7, #15]
 80054f4:	f003 0303 	and.w	r3, r3, #3
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	7b3b      	ldrb	r3, [r7, #12]
 80054fc:	f362 0383 	bfi	r3, r2, #2, #2
 8005500:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005502:	f107 020c 	add.w	r2, r7, #12
 8005506:	2301      	movs	r3, #1
 8005508:	2160      	movs	r1, #96	@ 0x60
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fad4 	bl	8005ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00f      	beq.n	8005536 <LIS2MDL_MAG_SetOutputDataRate+0xaa>
    {
      return LIS2MDL_ERROR;
 8005516:	f04f 33ff 	mov.w	r3, #4294967295
 800551a:	e00d      	b.n	8005538 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3320      	adds	r3, #32
 8005520:	7bfa      	ldrb	r2, [r7, #15]
 8005522:	4611      	mov	r1, r2
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fc3b 	bl	8005da0 <lis2mdl_data_rate_set>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <LIS2MDL_MAG_SetOutputDataRate+0xaa>
    {
      return LIS2MDL_ERROR;
 8005530:	f04f 33ff 	mov.w	r3, #4294967295
 8005534:	e000      	b.n	8005538 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }
  }

  return LIS2MDL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	41200000 	.word	0x41200000
 8005544:	41a00000 	.word	0x41a00000
 8005548:	42480000 	.word	0x42480000

0800554c <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2232      	movs	r2, #50	@ 0x32
 800555a:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3320      	adds	r3, #32
 800558c:	f107 0208 	add.w	r2, r7, #8
 8005590:	4611      	mov	r1, r2
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fc88 	bl	8005ea8 <lis2mdl_magnetic_raw_get>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 800559e:	f04f 33ff 	mov.w	r3, #4294967295
 80055a2:	e00c      	b.n	80055be <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80055a4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80055ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80055b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b088      	sub	sp, #32
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d134      	bne.n	8005642 <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80055d8:	f107 0218 	add.w	r2, r7, #24
 80055dc:	2306      	movs	r3, #6
 80055de:	2168      	movs	r1, #104	@ 0x68
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f92a 	bl	800583a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 80055ec:	f04f 33ff 	mov.w	r3, #4294967295
 80055f0:	e072      	b.n	80056d8 <LIS2MDL_MAG_GetAxes+0x112>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 80055f2:	7e7b      	ldrb	r3, [r7, #25]
 80055f4:	b21b      	sxth	r3, r3
 80055f6:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 80055f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	b29b      	uxth	r3, r3
 8005602:	7e3a      	ldrb	r2, [r7, #24]
 8005604:	4413      	add	r3, r2
 8005606:	b29b      	uxth	r3, r3
 8005608:	b21b      	sxth	r3, r3
 800560a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 800560c:	7efb      	ldrb	r3, [r7, #27]
 800560e:	b21b      	sxth	r3, r3
 8005610:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8005612:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005616:	b29b      	uxth	r3, r3
 8005618:	021b      	lsls	r3, r3, #8
 800561a:	b29b      	uxth	r3, r3
 800561c:	7eba      	ldrb	r2, [r7, #26]
 800561e:	4413      	add	r3, r2
 8005620:	b29b      	uxth	r3, r3
 8005622:	b21b      	sxth	r3, r3
 8005624:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8005626:	7f7b      	ldrb	r3, [r7, #29]
 8005628:	b21b      	sxth	r3, r3
 800562a:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 800562c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005630:	b29b      	uxth	r3, r3
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	b29b      	uxth	r3, r3
 8005636:	7f3a      	ldrb	r2, [r7, #28]
 8005638:	4413      	add	r3, r2
 800563a:	b29b      	uxth	r3, r3
 800563c:	b21b      	sxth	r3, r3
 800563e:	82bb      	strh	r3, [r7, #20]
 8005640:	e00d      	b.n	800565e <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3320      	adds	r3, #32
 8005646:	f107 0210 	add.w	r2, r7, #16
 800564a:	4611      	mov	r1, r2
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fc2b 	bl	8005ea8 <lis2mdl_magnetic_raw_get>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 8005658:	f04f 33ff 	mov.w	r3, #4294967295
 800565c:	e03c      	b.n	80056d8 <LIS2MDL_MAG_GetAxes+0x112>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 800565e:	f107 030c 	add.w	r3, r7, #12
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff febc 	bl	80053e2 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800566a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800566e:	4618      	mov	r0, r3
 8005670:	f7fb fb24 	bl	8000cbc <__aeabi_i2f>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f7fb fb72 	bl	8000d64 <__aeabi_fmul>
 8005680:	4603      	mov	r3, r0
 8005682:	4618      	mov	r0, r3
 8005684:	f7fb fd34 	bl	80010f0 <__aeabi_f2iz>
 8005688:	4602      	mov	r2, r0
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800568e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fb fb12 	bl	8000cbc <__aeabi_i2f>
 8005698:	4602      	mov	r2, r0
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f7fb fb60 	bl	8000d64 <__aeabi_fmul>
 80056a4:	4603      	mov	r3, r0
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fb fd22 	bl	80010f0 <__aeabi_f2iz>
 80056ac:	4602      	mov	r2, r0
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80056b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fb fb00 	bl	8000cbc <__aeabi_i2f>
 80056bc:	4602      	mov	r2, r0
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4619      	mov	r1, r3
 80056c2:	4610      	mov	r0, r2
 80056c4:	f7fb fb4e 	bl	8000d64 <__aeabi_fmul>
 80056c8:	4603      	mov	r3, r0
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fb fd10 	bl	80010f0 <__aeabi_f2iz>
 80056d0:	4602      	mov	r2, r0
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	70fb      	strb	r3, [r7, #3]
 80056ec:	4613      	mov	r3, r2
 80056ee:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d10b      	bne.n	8005710 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 80056f8:	1cba      	adds	r2, r7, #2
 80056fa:	78f9      	ldrb	r1, [r7, #3]
 80056fc:	2301      	movs	r3, #1
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f9da 	bl	8005ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d010      	beq.n	800572c <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800570a:	f04f 33ff 	mov.w	r3, #4294967295
 800570e:	e00e      	b.n	800572e <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f103 0020 	add.w	r0, r3, #32
 8005716:	1cba      	adds	r2, r7, #2
 8005718:	78f9      	ldrb	r1, [r7, #3]
 800571a:	2301      	movs	r3, #1
 800571c:	f000 fb02 	bl	8005d24 <lis2mdl_write_reg>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8005726:	f04f 33ff 	mov.w	r3, #4294967295
 800572a:	e000      	b.n	800572e <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005736:	b590      	push	{r4, r7, lr}
 8005738:	b087      	sub	sp, #28
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	461a      	mov	r2, r3
 8005742:	460b      	mov	r3, r1
 8005744:	72fb      	strb	r3, [r7, #11]
 8005746:	4613      	mov	r3, r2
 8005748:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10e      	bne.n	8005774 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	695c      	ldr	r4, [r3, #20]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	7b1b      	ldrb	r3, [r3, #12]
 800575e:	4618      	mov	r0, r3
 8005760:	7afb      	ldrb	r3, [r7, #11]
 8005762:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005766:	b2db      	uxtb	r3, r3
 8005768:	4619      	mov	r1, r3
 800576a:	893b      	ldrh	r3, [r7, #8]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	47a0      	blx	r4
 8005770:	4603      	mov	r3, r0
 8005772:	e01d      	b.n	80057b0 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d10b      	bne.n	8005794 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	695c      	ldr	r4, [r3, #20]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	7b1b      	ldrb	r3, [r3, #12]
 8005784:	4618      	mov	r0, r3
 8005786:	7afb      	ldrb	r3, [r7, #11]
 8005788:	b299      	uxth	r1, r3
 800578a:	893b      	ldrh	r3, [r7, #8]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	47a0      	blx	r4
 8005790:	4603      	mov	r3, r0
 8005792:	e00d      	b.n	80057b0 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	695c      	ldr	r4, [r3, #20]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	7b1b      	ldrb	r3, [r3, #12]
 800579c:	4618      	mov	r0, r3
 800579e:	7afb      	ldrb	r3, [r7, #11]
 80057a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	4619      	mov	r1, r3
 80057a8:	893b      	ldrh	r3, [r7, #8]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	47a0      	blx	r4
 80057ae:	4603      	mov	r3, r0
  }
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd90      	pop	{r4, r7, pc}

080057b8 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80057b8:	b590      	push	{r4, r7, lr}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	607a      	str	r2, [r7, #4]
 80057c2:	461a      	mov	r2, r3
 80057c4:	460b      	mov	r3, r1
 80057c6:	72fb      	strb	r3, [r7, #11]
 80057c8:	4613      	mov	r3, r2
 80057ca:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10e      	bne.n	80057f6 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	691c      	ldr	r4, [r3, #16]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	7b1b      	ldrb	r3, [r3, #12]
 80057e0:	4618      	mov	r0, r3
 80057e2:	7afb      	ldrb	r3, [r7, #11]
 80057e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	4619      	mov	r1, r3
 80057ec:	893b      	ldrh	r3, [r7, #8]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	47a0      	blx	r4
 80057f2:	4603      	mov	r3, r0
 80057f4:	e01d      	b.n	8005832 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d10b      	bne.n	8005816 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	691c      	ldr	r4, [r3, #16]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	7b1b      	ldrb	r3, [r3, #12]
 8005806:	4618      	mov	r0, r3
 8005808:	7afb      	ldrb	r3, [r7, #11]
 800580a:	b299      	uxth	r1, r3
 800580c:	893b      	ldrh	r3, [r7, #8]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	47a0      	blx	r4
 8005812:	4603      	mov	r3, r0
 8005814:	e00d      	b.n	8005832 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	691c      	ldr	r4, [r3, #16]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	7b1b      	ldrb	r3, [r3, #12]
 800581e:	4618      	mov	r0, r3
 8005820:	7afb      	ldrb	r3, [r7, #11]
 8005822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005826:	b2db      	uxtb	r3, r3
 8005828:	4619      	mov	r1, r3
 800582a:	893b      	ldrh	r3, [r7, #8]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	47a0      	blx	r4
 8005830:	4603      	mov	r3, r0
  }
}
 8005832:	4618      	mov	r0, r3
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	bd90      	pop	{r4, r7, pc}

0800583a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b08c      	sub	sp, #48	@ 0x30
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	461a      	mov	r2, r3
 8005846:	460b      	mov	r3, r1
 8005848:	72fb      	strb	r3, [r7, #11]
 800584a:	4613      	mov	r3, r2
 800584c:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005854:	2340      	movs	r3, #64	@ 0x40
 8005856:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800585a:	2300      	movs	r3, #0
 800585c:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8005860:	233d      	movs	r3, #61	@ 0x3d
 8005862:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005864:	2315      	movs	r3, #21
 8005866:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 800586a:	2316      	movs	r3, #22
 800586c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8005870:	2317      	movs	r3, #23
 8005872:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8005876:	2314      	movs	r3, #20
 8005878:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 800587c:	2344      	movs	r3, #68	@ 0x44
 800587e:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8005880:	2302      	movs	r3, #2
 8005882:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8005886:	2339      	movs	r3, #57	@ 0x39
 8005888:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 800588c:	2301      	movs	r3, #1
 800588e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005892:	2329      	movs	r3, #41	@ 0x29
 8005894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005898:	231e      	movs	r3, #30
 800589a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 80058a4:	893b      	ldrh	r3, [r7, #8]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80058aa:	2310      	movs	r3, #16
 80058ac:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80058b6:	2340      	movs	r3, #64	@ 0x40
 80058b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f103 0020 	add.w	r0, r3, #32
 80058c2:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 80058c6:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80058ca:	2301      	movs	r3, #1
 80058cc:	f000 fa2a 	bl	8005d24 <lis2mdl_write_reg>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 80058d6:	f04f 33ff 	mov.w	r3, #4294967295
 80058da:	e0e9      	b.n	8005ab0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f103 0020 	add.w	r0, r3, #32
 80058e2:	f107 021f 	add.w	r2, r7, #31
 80058e6:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80058ea:	2301      	movs	r3, #1
 80058ec:	f000 fa1a 	bl	8005d24 <lis2mdl_write_reg>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 80058f6:	f04f 33ff 	mov.w	r3, #4294967295
 80058fa:	e0d9      	b.n	8005ab0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f103 0020 	add.w	r0, r3, #32
 8005902:	f107 020b 	add.w	r2, r7, #11
 8005906:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800590a:	2301      	movs	r3, #1
 800590c:	f000 fa0a 	bl	8005d24 <lis2mdl_write_reg>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8005916:	f04f 33ff 	mov.w	r3, #4294967295
 800591a:	e0c9      	b.n	8005ab0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f103 0020 	add.w	r0, r3, #32
 8005922:	f107 021d 	add.w	r2, r7, #29
 8005926:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800592a:	2301      	movs	r3, #1
 800592c:	f000 f9fa 	bl	8005d24 <lis2mdl_write_reg>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8005936:	f04f 33ff 	mov.w	r3, #4294967295
 800593a:	e0b9      	b.n	8005ab0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f103 0020 	add.w	r0, r3, #32
 8005942:	f107 021e 	add.w	r2, r7, #30
 8005946:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800594a:	2301      	movs	r3, #1
 800594c:	f000 f9ea 	bl	8005d24 <lis2mdl_write_reg>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8005956:	f04f 33ff 	mov.w	r3, #4294967295
 800595a:	e0a9      	b.n	8005ab0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f103 0020 	add.w	r0, r3, #32
 8005962:	f107 0220 	add.w	r2, r7, #32
 8005966:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800596a:	2301      	movs	r3, #1
 800596c:	f000 f9da 	bl	8005d24 <lis2mdl_write_reg>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8005976:	f04f 33ff 	mov.w	r3, #4294967295
 800597a:	e099      	b.n	8005ab0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f103 0020 	add.w	r0, r3, #32
 8005982:	f107 021c 	add.w	r2, r7, #28
 8005986:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800598a:	2301      	movs	r3, #1
 800598c:	f000 f9b2 	bl	8005cf4 <lis2mdl_read_reg>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8005996:	f04f 33ff 	mov.w	r3, #4294967295
 800599a:	e089      	b.n	8005ab0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800599c:	7f3b      	ldrb	r3, [r7, #28]
 800599e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d102      	bne.n	80059ac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80059a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80059aa:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f103 0020 	add.w	r0, r3, #32
 80059b2:	f107 021c 	add.w	r2, r7, #28
 80059b6:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80059ba:	2301      	movs	r3, #1
 80059bc:	f000 f9b2 	bl	8005d24 <lis2mdl_write_reg>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 80059c6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ca:	e071      	b.n	8005ab0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f103 0020 	add.w	r0, r3, #32
 80059d2:	f107 0214 	add.w	r2, r7, #20
 80059d6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80059da:	2306      	movs	r3, #6
 80059dc:	f000 f98a 	bl	8005cf4 <lis2mdl_read_reg>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 80059e6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ea:	e061      	b.n	8005ab0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f103 0020 	add.w	r0, r3, #32
 80059f2:	f107 021b 	add.w	r2, r7, #27
 80059f6:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80059fa:	2301      	movs	r3, #1
 80059fc:	f000 f97a 	bl	8005cf4 <lis2mdl_read_reg>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8005a06:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0a:	e051      	b.n	8005ab0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8005a0c:	7efa      	ldrb	r2, [r7, #27]
 8005a0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005a12:	4013      	ands	r3, r2
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d1e6      	bne.n	80059ec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f103 0020 	add.w	r0, r3, #32
 8005a24:	f107 021b 	add.w	r2, r7, #27
 8005a28:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f000 f961 	bl	8005cf4 <lis2mdl_read_reg>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8005a38:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3c:	e038      	b.n	8005ab0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8005a3e:	7efa      	ldrb	r2, [r7, #27]
 8005a40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a44:	4013      	ands	r3, r2
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d1e6      	bne.n	8005a1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f103 0020 	add.w	r0, r3, #32
 8005a56:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005a5a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f000 f960 	bl	8005d24 <lis2mdl_write_reg>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8005a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6e:	e01f      	b.n	8005ab0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f103 0020 	add.w	r0, r3, #32
 8005a76:	893b      	ldrh	r3, [r7, #8]
 8005a78:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	f000 f939 	bl	8005cf4 <lis2mdl_read_reg>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8005a88:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8c:	e010      	b.n	8005ab0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f103 0020 	add.w	r0, r3, #32
 8005a94:	f107 0220 	add.w	r2, r7, #32
 8005a98:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	f000 f941 	bl	8005d24 <lis2mdl_write_reg>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8005aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aac:	e000      	b.n	8005ab0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3730      	adds	r7, #48	@ 0x30
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08c      	sub	sp, #48	@ 0x30
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	72fb      	strb	r3, [r7, #11]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005ad2:	2340      	movs	r3, #64	@ 0x40
 8005ad4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8005ade:	233c      	movs	r3, #60	@ 0x3c
 8005ae0:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005ae2:	2315      	movs	r3, #21
 8005ae4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8005ae8:	2316      	movs	r3, #22
 8005aea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8005aee:	2317      	movs	r3, #23
 8005af0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8005af8:	2314      	movs	r3, #20
 8005afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005afe:	2344      	movs	r3, #68	@ 0x44
 8005b00:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005b02:	2339      	movs	r3, #57	@ 0x39
 8005b04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8005b08:	2380      	movs	r3, #128	@ 0x80
 8005b0a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005b0e:	2329      	movs	r3, #41	@ 0x29
 8005b10:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005b14:	231e      	movs	r3, #30
 8005b16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005b20:	2310      	movs	r3, #16
 8005b22:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005b2c:	2340      	movs	r3, #64	@ 0x40
 8005b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005b32:	230e      	movs	r3, #14
 8005b34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f103 0020 	add.w	r0, r3, #32
 8005b3e:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005b42:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005b46:	2301      	movs	r3, #1
 8005b48:	f000 f8ec 	bl	8005d24 <lis2mdl_write_reg>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005b52:	f04f 33ff 	mov.w	r3, #4294967295
 8005b56:	e0c9      	b.n	8005cec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f103 0020 	add.w	r0, r3, #32
 8005b5e:	f107 021f 	add.w	r2, r7, #31
 8005b62:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005b66:	2301      	movs	r3, #1
 8005b68:	f000 f8dc 	bl	8005d24 <lis2mdl_write_reg>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8005b72:	f04f 33ff 	mov.w	r3, #4294967295
 8005b76:	e0b9      	b.n	8005cec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f103 0020 	add.w	r0, r3, #32
 8005b7e:	f107 020b 	add.w	r2, r7, #11
 8005b82:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8005b86:	2301      	movs	r3, #1
 8005b88:	f000 f8cc 	bl	8005d24 <lis2mdl_write_reg>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8005b92:	f04f 33ff 	mov.w	r3, #4294967295
 8005b96:	e0a9      	b.n	8005cec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f103 0020 	add.w	r0, r3, #32
 8005b9e:	f107 021e 	add.w	r2, r7, #30
 8005ba2:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f000 f8bc 	bl	8005d24 <lis2mdl_write_reg>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8005bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb6:	e099      	b.n	8005cec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f103 0020 	add.w	r0, r3, #32
 8005bbe:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	f000 f8ad 	bl	8005d24 <lis2mdl_write_reg>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8005bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd4:	e08a      	b.n	8005cec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f103 0020 	add.w	r0, r3, #32
 8005bdc:	f107 021d 	add.w	r2, r7, #29
 8005be0:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8005be4:	2301      	movs	r3, #1
 8005be6:	f000 f89d 	bl	8005d24 <lis2mdl_write_reg>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8005bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf4:	e07a      	b.n	8005cec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f103 0020 	add.w	r0, r3, #32
 8005bfc:	f107 0220 	add.w	r2, r7, #32
 8005c00:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005c04:	2301      	movs	r3, #1
 8005c06:	f000 f88d 	bl	8005d24 <lis2mdl_write_reg>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295
 8005c14:	e06a      	b.n	8005cec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f103 0020 	add.w	r0, r3, #32
 8005c1c:	f107 021c 	add.w	r2, r7, #28
 8005c20:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005c24:	2301      	movs	r3, #1
 8005c26:	f000 f865 	bl	8005cf4 <lis2mdl_read_reg>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005c30:	f04f 33ff 	mov.w	r3, #4294967295
 8005c34:	e05a      	b.n	8005cec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005c36:	7f3b      	ldrb	r3, [r7, #28]
 8005c38:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d102      	bne.n	8005c46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005c40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c44:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f103 0020 	add.w	r0, r3, #32
 8005c4c:	f107 021c 	add.w	r2, r7, #28
 8005c50:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005c54:	2301      	movs	r3, #1
 8005c56:	f000 f865 	bl	8005d24 <lis2mdl_write_reg>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8005c60:	f04f 33ff 	mov.w	r3, #4294967295
 8005c64:	e042      	b.n	8005cec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f103 0020 	add.w	r0, r3, #32
 8005c6c:	f107 0214 	add.w	r2, r7, #20
 8005c70:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8005c74:	2306      	movs	r3, #6
 8005c76:	f000 f83d 	bl	8005cf4 <lis2mdl_read_reg>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8005c80:	f04f 33ff 	mov.w	r3, #4294967295
 8005c84:	e032      	b.n	8005cec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f103 0020 	add.w	r0, r3, #32
 8005c8c:	f107 021b 	add.w	r2, r7, #27
 8005c90:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8005c94:	2301      	movs	r3, #1
 8005c96:	f000 f82d 	bl	8005cf4 <lis2mdl_read_reg>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8005ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca4:	e022      	b.n	8005cec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8005ca6:	7efa      	ldrb	r2, [r7, #27]
 8005ca8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005cac:	4013      	ands	r3, r2
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d1e6      	bne.n	8005c86 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f103 0020 	add.w	r0, r3, #32
 8005cbe:	f107 021b 	add.w	r2, r7, #27
 8005cc2:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f000 f814 	bl	8005cf4 <lis2mdl_read_reg>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8005cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd6:	e009      	b.n	8005cec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8005cd8:	7efa      	ldrb	r2, [r7, #27]
 8005cda:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005cde:	4013      	ands	r3, r2
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d1e6      	bne.n	8005cb8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3730      	adds	r7, #48	@ 0x30
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005cf4:	b590      	push	{r4, r7, lr}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	607a      	str	r2, [r7, #4]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	460b      	mov	r3, r1
 8005d02:	72fb      	strb	r3, [r7, #11]
 8005d04:	4613      	mov	r3, r2
 8005d06:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685c      	ldr	r4, [r3, #4]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	68d8      	ldr	r0, [r3, #12]
 8005d10:	893b      	ldrh	r3, [r7, #8]
 8005d12:	7af9      	ldrb	r1, [r7, #11]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	47a0      	blx	r4
 8005d18:	6178      	str	r0, [r7, #20]

  return ret;
 8005d1a:	697b      	ldr	r3, [r7, #20]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd90      	pop	{r4, r7, pc}

08005d24 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005d24:	b590      	push	{r4, r7, lr}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	607a      	str	r2, [r7, #4]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	460b      	mov	r3, r1
 8005d32:	72fb      	strb	r3, [r7, #11]
 8005d34:	4613      	mov	r3, r2
 8005d36:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681c      	ldr	r4, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	68d8      	ldr	r0, [r3, #12]
 8005d40:	893b      	ldrh	r3, [r7, #8]
 8005d42:	7af9      	ldrb	r1, [r7, #11]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	47a0      	blx	r4
 8005d48:	6178      	str	r0, [r7, #20]

  return ret;
 8005d4a:	697b      	ldr	r3, [r7, #20]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd90      	pop	{r4, r7, pc}

08005d54 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d60:	f107 0208 	add.w	r2, r7, #8
 8005d64:	2301      	movs	r3, #1
 8005d66:	2160      	movs	r1, #96	@ 0x60
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff ffc3 	bl	8005cf4 <lis2mdl_read_reg>
 8005d6e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10f      	bne.n	8005d96 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	7a3b      	ldrb	r3, [r7, #8]
 8005d80:	f362 0301 	bfi	r3, r2, #0, #2
 8005d84:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d86:	f107 0208 	add.w	r2, r7, #8
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	2160      	movs	r1, #96	@ 0x60
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff ffc8 	bl	8005d24 <lis2mdl_write_reg>
 8005d94:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d96:	68fb      	ldr	r3, [r7, #12]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005dac:	f107 0208 	add.w	r2, r7, #8
 8005db0:	2301      	movs	r3, #1
 8005db2:	2160      	movs	r1, #96	@ 0x60
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff ff9d 	bl	8005cf4 <lis2mdl_read_reg>
 8005dba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10f      	bne.n	8005de2 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005dc2:	78fb      	ldrb	r3, [r7, #3]
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	7a3b      	ldrb	r3, [r7, #8]
 8005dcc:	f362 0383 	bfi	r3, r2, #2, #2
 8005dd0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005dd2:	f107 0208 	add.w	r2, r7, #8
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	2160      	movs	r1, #96	@ 0x60
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff ffa2 	bl	8005d24 <lis2mdl_write_reg>
 8005de0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005de2:	68fb      	ldr	r3, [r7, #12]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005df6:	f107 0208 	add.w	r2, r7, #8
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	2160      	movs	r1, #96	@ 0x60
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ff78 	bl	8005cf4 <lis2mdl_read_reg>
 8005e04:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8005e06:	7a3b      	ldrb	r3, [r7, #8]
 8005e08:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d81a      	bhi.n	8005e48 <lis2mdl_data_rate_get+0x5c>
 8005e12:	a201      	add	r2, pc, #4	@ (adr r2, 8005e18 <lis2mdl_data_rate_get+0x2c>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e29 	.word	0x08005e29
 8005e1c:	08005e31 	.word	0x08005e31
 8005e20:	08005e39 	.word	0x08005e39
 8005e24:	08005e41 	.word	0x08005e41
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	701a      	strb	r2, [r3, #0]
      break;
 8005e2e:	e00f      	b.n	8005e50 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2201      	movs	r2, #1
 8005e34:	701a      	strb	r2, [r3, #0]
      break;
 8005e36:	e00b      	b.n	8005e50 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	701a      	strb	r2, [r3, #0]
      break;
 8005e3e:	e007      	b.n	8005e50 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2203      	movs	r2, #3
 8005e44:	701a      	strb	r2, [r3, #0]
      break;
 8005e46:	e003      	b.n	8005e50 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
      break;
 8005e4e:	bf00      	nop
  }

  return ret;
 8005e50:	68fb      	ldr	r3, [r7, #12]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop

08005e5c <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005e68:	f107 0208 	add.w	r2, r7, #8
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	2162      	movs	r1, #98	@ 0x62
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff ff3f 	bl	8005cf4 <lis2mdl_read_reg>
 8005e76:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10f      	bne.n	8005e9e <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005e7e:	78fb      	ldrb	r3, [r7, #3]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	7a3b      	ldrb	r3, [r7, #8]
 8005e88:	f362 1304 	bfi	r3, r2, #4, #1
 8005e8c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005e8e:	f107 0208 	add.w	r2, r7, #8
 8005e92:	2301      	movs	r3, #1
 8005e94:	2162      	movs	r1, #98	@ 0x62
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff ff44 	bl	8005d24 <lis2mdl_write_reg>
 8005e9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005eb2:	f107 020c 	add.w	r2, r7, #12
 8005eb6:	2306      	movs	r3, #6
 8005eb8:	2168      	movs	r1, #104	@ 0x68
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff ff1a 	bl	8005cf4 <lis2mdl_read_reg>
 8005ec0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005ec2:	7b7b      	ldrb	r3, [r7, #13]
 8005ec4:	b21a      	sxth	r2, r3
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	021b      	lsls	r3, r3, #8
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	7b3a      	ldrb	r2, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	b21a      	sxth	r2, r3
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005ee2:	7bfa      	ldrb	r2, [r7, #15]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	3302      	adds	r3, #2
 8005ee8:	b212      	sxth	r2, r2
 8005eea:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	3302      	adds	r3, #2
 8005ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	7bba      	ldrb	r2, [r7, #14]
 8005efc:	4413      	add	r3, r2
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	3302      	adds	r3, #2
 8005f04:	b212      	sxth	r2, r2
 8005f06:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005f08:	7c7a      	ldrb	r2, [r7, #17]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	b212      	sxth	r2, r2
 8005f10:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	3304      	adds	r3, #4
 8005f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	7c3a      	ldrb	r2, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	b212      	sxth	r2, r2
 8005f2c:	801a      	strh	r2, [r3, #0]

  return ret;
 8005f2e:	697b      	ldr	r3, [r7, #20]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005f42:	2301      	movs	r3, #1
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	214f      	movs	r1, #79	@ 0x4f
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff fed3 	bl	8005cf4 <lis2mdl_read_reg>
 8005f4e:	60f8      	str	r0, [r7, #12]

  return ret;
 8005f50:	68fb      	ldr	r3, [r7, #12]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	460b      	mov	r3, r1
 8005f64:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f66:	f107 0208 	add.w	r2, r7, #8
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	2162      	movs	r1, #98	@ 0x62
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff fec0 	bl	8005cf4 <lis2mdl_read_reg>
 8005f74:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10f      	bne.n	8005f9c <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	7a3b      	ldrb	r3, [r7, #8]
 8005f86:	f362 0341 	bfi	r3, r2, #1, #1
 8005f8a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f8c:	f107 0208 	add.w	r2, r7, #8
 8005f90:	2301      	movs	r3, #1
 8005f92:	2162      	movs	r1, #98	@ 0x62
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff fec5 	bl	8005d24 <lis2mdl_write_reg>
 8005f9a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005fb2:	f107 0208 	add.w	r2, r7, #8
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	2162      	movs	r1, #98	@ 0x62
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff fe9a 	bl	8005cf4 <lis2mdl_read_reg>
 8005fc0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10f      	bne.n	8005fe8 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	7a3b      	ldrb	r3, [r7, #8]
 8005fd2:	f362 1345 	bfi	r3, r2, #5, #1
 8005fd6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005fd8:	f107 0208 	add.w	r2, r7, #8
 8005fdc:	2301      	movs	r3, #1
 8005fde:	2162      	movs	r1, #98	@ 0x62
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff fe9f 	bl	8005d24 <lis2mdl_write_reg>
 8005fe6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d103      	bne.n	8006010 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8006008:	f04f 33ff 	mov.w	r3, #4294967295
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	e051      	b.n	80060b4 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	7b1a      	ldrb	r2, [r3, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	699a      	ldr	r2, [r3, #24]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a1d      	ldr	r2, [pc, #116]	@ (80060c0 <LPS22HH_RegisterBusIO+0xcc>)
 800604c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a1c      	ldr	r2, [pc, #112]	@ (80060c4 <LPS22HH_RegisterBusIO+0xd0>)
 8006052:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d103      	bne.n	8006072 <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 800606a:	f04f 33ff 	mov.w	r3, #4294967295
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	e020      	b.n	80060b4 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4798      	blx	r3
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 800607e:	f04f 33ff 	mov.w	r3, #4294967295
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	e016      	b.n	80060b4 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d112      	bne.n	80060b4 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10d      	bne.n	80060b4 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8006098:	2301      	movs	r3, #1
 800609a:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 800609c:	7afb      	ldrb	r3, [r7, #11]
 800609e:	461a      	mov	r2, r3
 80060a0:	2110      	movs	r1, #16
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f9db 	bl	800645e <LPS22HH_Write_Reg>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 80060ae:	f04f 33ff 	mov.w	r3, #4294967295
 80060b2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80060b4:	68fb      	ldr	r3, [r7, #12]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	0800676b 	.word	0x0800676b
 80060c4:	080067a1 	.word	0x080067a1

080060c8 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d108      	bne.n	80060ec <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 faf8 	bl	80066d0 <LPS22HH_Initialize>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 80060e6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ea:	e004      	b.n	80060f6 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800610c:	2b01      	cmp	r3, #1
 800610e:	d111      	bne.n	8006134 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f87d 	bl	8006210 <LPS22HH_PRESS_Disable>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 800611c:	f04f 33ff 	mov.w	r3, #4294967295
 8006120:	e00d      	b.n	800613e <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f919 	bl	800635a <LPS22HH_TEMP_Disable>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 800612e:	f04f 33ff 	mov.w	r3, #4294967295
 8006132:	e004      	b.n	800613e <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b082      	sub	sp, #8
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3320      	adds	r3, #32
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fcfd 	bl	8006b56 <lps22hh_device_id_get>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8006162:	f04f 33ff 	mov.w	r3, #4294967295
 8006166:	e000      	b.n	800616a <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2200      	movs	r2, #0
 8006182:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2201      	movs	r2, #1
 8006188:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2201      	movs	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2200      	movs	r2, #0
 8006194:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2200      	movs	r2, #0
 800619a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	f04f 0200 	mov.w	r2, #0
 80061a2:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	4a07      	ldr	r2, [pc, #28]	@ (80061c4 <LPS22HH_GetCapabilities+0x50>)
 80061a8:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	4a05      	ldr	r2, [pc, #20]	@ (80061c4 <LPS22HH_GetCapabilities+0x50>)
 80061ae:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr
 80061c4:	43480000 	.word	0x43480000

080061c8 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	e014      	b.n	8006208 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f103 0220 	add.w	r2, r3, #32
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80061ea:	4619      	mov	r1, r3
 80061ec:	4610      	mov	r0, r2
 80061ee:	f000 fb71 	bl	80068d4 <lps22hh_data_rate_set>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80061f8:	f04f 33ff 	mov.w	r3, #4294967295
 80061fc:	e004      	b.n	8006208 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	e024      	b.n	8006270 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d11a      	bne.n	8006266 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f103 0220 	add.w	r2, r3, #32
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3333      	adds	r3, #51	@ 0x33
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f000 fb97 	bl	8006970 <lps22hh_data_rate_get>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8006248:	f04f 33ff 	mov.w	r3, #4294967295
 800624c:	e010      	b.n	8006270 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3320      	adds	r3, #32
 8006252:	2100      	movs	r1, #0
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fb3d 	bl	80068d4 <lps22hh_data_rate_set>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8006260:	f04f 33ff 	mov.w	r3, #4294967295
 8006264:	e004      	b.n	8006270 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f905 	bl	8006494 <LPS22HH_GetOutputDataRate>
 800628a:	4603      	mov	r3, r0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d105      	bne.n	80062b4 <LPS22HH_PRESS_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f956 	bl	800655c <LPS22HH_SetOutputDataRate_When_Enabled>
 80062b0:	4603      	mov	r3, r0
 80062b2:	e004      	b.n	80062be <LPS22HH_PRESS_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f9ba 	bl	8006630 <LPS22HH_SetOutputDataRate_When_Disabled>
 80062bc:	4603      	mov	r3, r0
  }
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80062d0:	f107 030c 	add.w	r3, r7, #12
 80062d4:	2204      	movs	r2, #4
 80062d6:	2100      	movs	r1, #0
 80062d8:	4618      	mov	r0, r3
 80062da:	f00b fe69 	bl	8011fb0 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3320      	adds	r3, #32
 80062e2:	f107 020c 	add.w	r2, r7, #12
 80062e6:	4611      	mov	r1, r2
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fbe9 	bl	8006ac0 <lps22hh_pressure_raw_get>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 80062f4:	f04f 33ff 	mov.w	r3, #4294967295
 80062f8:	e007      	b.n	800630a <LPS22HH_PRESS_GetPressure+0x44>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fa9a 	bl	8006836 <lps22hh_from_lsb_to_hpa>
 8006302:	4602      	mov	r2, r0
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	e014      	b.n	8006352 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f103 0220 	add.w	r2, r3, #32
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006334:	4619      	mov	r1, r3
 8006336:	4610      	mov	r0, r2
 8006338:	f000 facc 	bl	80068d4 <lps22hh_data_rate_set>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8006342:	f04f 33ff 	mov.w	r3, #4294967295
 8006346:	e004      	b.n	8006352 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b082      	sub	sp, #8
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	e024      	b.n	80063ba <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006376:	2b00      	cmp	r3, #0
 8006378:	d11a      	bne.n	80063b0 <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f103 0220 	add.w	r2, r3, #32
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3333      	adds	r3, #51	@ 0x33
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f000 faf2 	bl	8006970 <lps22hh_data_rate_get>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8006392:	f04f 33ff 	mov.w	r3, #4294967295
 8006396:	e010      	b.n	80063ba <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3320      	adds	r3, #32
 800639c:	2100      	movs	r1, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fa98 	bl	80068d4 <lps22hh_data_rate_set>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80063aa:	f04f 33ff 	mov.w	r3, #4294967295
 80063ae:	e004      	b.n	80063ba <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f860 	bl	8006494 <LPS22HH_GetOutputDataRate>
 80063d4:	4603      	mov	r3, r0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d105      	bne.n	80063fe <LPS22HH_TEMP_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f8b1 	bl	800655c <LPS22HH_SetOutputDataRate_When_Enabled>
 80063fa:	4603      	mov	r3, r0
 80063fc:	e004      	b.n	8006408 <LPS22HH_TEMP_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f915 	bl	8006630 <LPS22HH_SetOutputDataRate_When_Disabled>
 8006406:	4603      	mov	r3, r0
  }
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800641a:	f107 030c 	add.w	r3, r7, #12
 800641e:	2202      	movs	r2, #2
 8006420:	2100      	movs	r1, #0
 8006422:	4618      	mov	r0, r3
 8006424:	f00b fdc4 	bl	8011fb0 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3320      	adds	r3, #32
 800642c:	f107 020c 	add.w	r2, r7, #12
 8006430:	4611      	mov	r1, r2
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fb6d 	bl	8006b12 <lps22hh_temperature_raw_get>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 800643e:	f04f 33ff 	mov.w	r3, #4294967295
 8006442:	e008      	b.n	8006456 <LPS22HH_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8006444:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fa07 	bl	800685c <lps22hh_from_lsb_to_celsius>
 800644e:	4602      	mov	r2, r0
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b082      	sub	sp, #8
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
 800646a:	4613      	mov	r3, r2
 800646c:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f103 0020 	add.w	r0, r3, #32
 8006474:	1cba      	adds	r2, r7, #2
 8006476:	78f9      	ldrb	r1, [r7, #3]
 8006478:	2301      	movs	r3, #1
 800647a:	f000 f9c4 	bl	8006806 <lps22hh_write_reg>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8006484:	f04f 33ff 	mov.w	r3, #4294967295
 8006488:	e000      	b.n	800648c <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3320      	adds	r3, #32
 80064a6:	f107 020b 	add.w	r2, r7, #11
 80064aa:	4611      	mov	r1, r2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fa5f 	bl	8006970 <lps22hh_data_rate_get>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 80064b8:	f04f 33ff 	mov.w	r3, #4294967295
 80064bc:	e03d      	b.n	800653a <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 80064be:	7afb      	ldrb	r3, [r7, #11]
 80064c0:	2b07      	cmp	r3, #7
 80064c2:	d835      	bhi.n	8006530 <LPS22HH_GetOutputDataRate+0x9c>
 80064c4:	a201      	add	r2, pc, #4	@ (adr r2, 80064cc <LPS22HH_GetOutputDataRate+0x38>)
 80064c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ca:	bf00      	nop
 80064cc:	080064ed 	.word	0x080064ed
 80064d0:	080064f7 	.word	0x080064f7
 80064d4:	08006501 	.word	0x08006501
 80064d8:	08006509 	.word	0x08006509
 80064dc:	08006511 	.word	0x08006511
 80064e0:	08006519 	.word	0x08006519
 80064e4:	08006521 	.word	0x08006521
 80064e8:	08006529 	.word	0x08006529
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	f04f 0200 	mov.w	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
      break;
 80064f4:	e020      	b.n	8006538 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80064fc:	601a      	str	r2, [r3, #0]
      break;
 80064fe:	e01b      	b.n	8006538 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	4a10      	ldr	r2, [pc, #64]	@ (8006544 <LPS22HH_GetOutputDataRate+0xb0>)
 8006504:	601a      	str	r2, [r3, #0]
      break;
 8006506:	e017      	b.n	8006538 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	4a0f      	ldr	r2, [pc, #60]	@ (8006548 <LPS22HH_GetOutputDataRate+0xb4>)
 800650c:	601a      	str	r2, [r3, #0]
      break;
 800650e:	e013      	b.n	8006538 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	4a0e      	ldr	r2, [pc, #56]	@ (800654c <LPS22HH_GetOutputDataRate+0xb8>)
 8006514:	601a      	str	r2, [r3, #0]
      break;
 8006516:	e00f      	b.n	8006538 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	4a0d      	ldr	r2, [pc, #52]	@ (8006550 <LPS22HH_GetOutputDataRate+0xbc>)
 800651c:	601a      	str	r2, [r3, #0]
      break;
 800651e:	e00b      	b.n	8006538 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	4a0c      	ldr	r2, [pc, #48]	@ (8006554 <LPS22HH_GetOutputDataRate+0xc0>)
 8006524:	601a      	str	r2, [r3, #0]
      break;
 8006526:	e007      	b.n	8006538 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	4a0b      	ldr	r2, [pc, #44]	@ (8006558 <LPS22HH_GetOutputDataRate+0xc4>)
 800652c:	601a      	str	r2, [r3, #0]
      break;
 800652e:	e003      	b.n	8006538 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8006530:	f04f 33ff 	mov.w	r3, #4294967295
 8006534:	60fb      	str	r3, [r7, #12]
      break;
 8006536:	bf00      	nop
  }

  return ret;
 8006538:	68fb      	ldr	r3, [r7, #12]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	41200000 	.word	0x41200000
 8006548:	41c80000 	.word	0x41c80000
 800654c:	42480000 	.word	0x42480000
 8006550:	42960000 	.word	0x42960000
 8006554:	42c80000 	.word	0x42c80000
 8006558:	43480000 	.word	0x43480000

0800655c <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006566:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800656a:	6838      	ldr	r0, [r7, #0]
 800656c:	f7fa fda2 	bl	80010b4 <__aeabi_fcmple>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <LPS22HH_SetOutputDataRate_When_Enabled+0x1e>
 8006576:	2301      	movs	r3, #1
 8006578:	e02d      	b.n	80065d6 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800657a:	4928      	ldr	r1, [pc, #160]	@ (800661c <LPS22HH_SetOutputDataRate_When_Enabled+0xc0>)
 800657c:	6838      	ldr	r0, [r7, #0]
 800657e:	f7fa fd99 	bl	80010b4 <__aeabi_fcmple>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <LPS22HH_SetOutputDataRate_When_Enabled+0x30>
 8006588:	2302      	movs	r3, #2
 800658a:	e024      	b.n	80065d6 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800658c:	4924      	ldr	r1, [pc, #144]	@ (8006620 <LPS22HH_SetOutputDataRate_When_Enabled+0xc4>)
 800658e:	6838      	ldr	r0, [r7, #0]
 8006590:	f7fa fd90 	bl	80010b4 <__aeabi_fcmple>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <LPS22HH_SetOutputDataRate_When_Enabled+0x42>
 800659a:	2303      	movs	r3, #3
 800659c:	e01b      	b.n	80065d6 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800659e:	4921      	ldr	r1, [pc, #132]	@ (8006624 <LPS22HH_SetOutputDataRate_When_Enabled+0xc8>)
 80065a0:	6838      	ldr	r0, [r7, #0]
 80065a2:	f7fa fd87 	bl	80010b4 <__aeabi_fcmple>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <LPS22HH_SetOutputDataRate_When_Enabled+0x54>
 80065ac:	2304      	movs	r3, #4
 80065ae:	e012      	b.n	80065d6 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80065b0:	491d      	ldr	r1, [pc, #116]	@ (8006628 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>)
 80065b2:	6838      	ldr	r0, [r7, #0]
 80065b4:	f7fa fd7e 	bl	80010b4 <__aeabi_fcmple>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <LPS22HH_SetOutputDataRate_When_Enabled+0x66>
 80065be:	2305      	movs	r3, #5
 80065c0:	e009      	b.n	80065d6 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80065c2:	491a      	ldr	r1, [pc, #104]	@ (800662c <LPS22HH_SetOutputDataRate_When_Enabled+0xd0>)
 80065c4:	6838      	ldr	r0, [r7, #0]
 80065c6:	f7fa fd75 	bl	80010b4 <__aeabi_fcmple>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <LPS22HH_SetOutputDataRate_When_Enabled+0x78>
 80065d0:	2306      	movs	r3, #6
 80065d2:	e000      	b.n	80065d6 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80065d4:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80065d6:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3320      	adds	r3, #32
 80065dc:	7bfa      	ldrb	r2, [r7, #15]
 80065de:	4611      	mov	r1, r2
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 f977 	bl	80068d4 <lps22hh_data_rate_set>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <LPS22HH_SetOutputDataRate_When_Enabled+0x96>
  {
    return LPS22HH_ERROR;
 80065ec:	f04f 33ff 	mov.w	r3, #4294967295
 80065f0:	e00f      	b.n	8006612 <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f103 0220 	add.w	r2, r3, #32
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3333      	adds	r3, #51	@ 0x33
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f000 f9b6 	bl	8006970 <lps22hh_data_rate_get>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <LPS22HH_SetOutputDataRate_When_Enabled+0xb4>
  {
    return LPS22HH_ERROR;
 800660a:	f04f 33ff 	mov.w	r3, #4294967295
 800660e:	e000      	b.n	8006612 <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  return LPS22HH_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	41200000 	.word	0x41200000
 8006620:	41c80000 	.word	0x41c80000
 8006624:	42480000 	.word	0x42480000
 8006628:	42960000 	.word	0x42960000
 800662c:	42c80000 	.word	0x42c80000

08006630 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800663a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800663e:	6838      	ldr	r0, [r7, #0]
 8006640:	f7fa fd38 	bl	80010b4 <__aeabi_fcmple>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <LPS22HH_SetOutputDataRate_When_Disabled+0x1e>
 800664a:	2301      	movs	r3, #1
 800664c:	e02d      	b.n	80066aa <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800664e:	491b      	ldr	r1, [pc, #108]	@ (80066bc <LPS22HH_SetOutputDataRate_When_Disabled+0x8c>)
 8006650:	6838      	ldr	r0, [r7, #0]
 8006652:	f7fa fd2f 	bl	80010b4 <__aeabi_fcmple>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <LPS22HH_SetOutputDataRate_When_Disabled+0x30>
 800665c:	2302      	movs	r3, #2
 800665e:	e024      	b.n	80066aa <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006660:	4917      	ldr	r1, [pc, #92]	@ (80066c0 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>)
 8006662:	6838      	ldr	r0, [r7, #0]
 8006664:	f7fa fd26 	bl	80010b4 <__aeabi_fcmple>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <LPS22HH_SetOutputDataRate_When_Disabled+0x42>
 800666e:	2303      	movs	r3, #3
 8006670:	e01b      	b.n	80066aa <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006672:	4914      	ldr	r1, [pc, #80]	@ (80066c4 <LPS22HH_SetOutputDataRate_When_Disabled+0x94>)
 8006674:	6838      	ldr	r0, [r7, #0]
 8006676:	f7fa fd1d 	bl	80010b4 <__aeabi_fcmple>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <LPS22HH_SetOutputDataRate_When_Disabled+0x54>
 8006680:	2304      	movs	r3, #4
 8006682:	e012      	b.n	80066aa <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006684:	4910      	ldr	r1, [pc, #64]	@ (80066c8 <LPS22HH_SetOutputDataRate_When_Disabled+0x98>)
 8006686:	6838      	ldr	r0, [r7, #0]
 8006688:	f7fa fd14 	bl	80010b4 <__aeabi_fcmple>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <LPS22HH_SetOutputDataRate_When_Disabled+0x66>
 8006692:	2305      	movs	r3, #5
 8006694:	e009      	b.n	80066aa <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006696:	490d      	ldr	r1, [pc, #52]	@ (80066cc <LPS22HH_SetOutputDataRate_When_Disabled+0x9c>)
 8006698:	6838      	ldr	r0, [r7, #0]
 800669a:	f7fa fd0b 	bl	80010b4 <__aeabi_fcmple>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <LPS22HH_SetOutputDataRate_When_Disabled+0x78>
 80066a4:	2306      	movs	r3, #6
 80066a6:	e000      	b.n	80066aa <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80066a8:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	41200000 	.word	0x41200000
 80066c0:	41c80000 	.word	0x41c80000
 80066c4:	42480000 	.word	0x42480000
 80066c8:	42960000 	.word	0x42960000
 80066cc:	42c80000 	.word	0x42c80000

080066d0 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d00b      	beq.n	80066f8 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3320      	adds	r3, #32
 80066e4:	2111      	movs	r1, #17
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fa92 	bl	8006c10 <lps22hh_i3c_interface_set>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 80066f2:	f04f 33ff 	mov.w	r3, #4294967295
 80066f6:	e034      	b.n	8006762 <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3320      	adds	r3, #32
 80066fc:	2110      	movs	r1, #16
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 f8e8 	bl	80068d4 <lps22hh_data_rate_set>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 800670a:	f04f 33ff 	mov.w	r3, #4294967295
 800670e:	e028      	b.n	8006762 <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3320      	adds	r3, #32
 8006714:	2100      	movs	r1, #0
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fa54 	bl	8006bc4 <lps22hh_lp_bandwidth_set>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 8006722:	f04f 33ff 	mov.w	r3, #4294967295
 8006726:	e01c      	b.n	8006762 <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3320      	adds	r3, #32
 800672c:	2101      	movs	r1, #1
 800672e:	4618      	mov	r0, r3
 8006730:	f000 f8aa 	bl	8006888 <lps22hh_block_data_update_set>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 800673a:	f04f 33ff 	mov.w	r3, #4294967295
 800673e:	e010      	b.n	8006762 <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3320      	adds	r3, #32
 8006744:	2101      	movs	r1, #1
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fa16 	bl	8006b78 <lps22hh_auto_increment_set>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 8006752:	f04f 33ff 	mov.w	r3, #4294967295
 8006756:	e004      	b.n	8006762 <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2203      	movs	r2, #3
 800675c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22HH_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800676a:	b590      	push	{r4, r7, lr}
 800676c:	b087      	sub	sp, #28
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	461a      	mov	r2, r3
 8006776:	460b      	mov	r3, r1
 8006778:	72fb      	strb	r3, [r7, #11]
 800677a:	4613      	mov	r3, r2
 800677c:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	695c      	ldr	r4, [r3, #20]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	7b1b      	ldrb	r3, [r3, #12]
 800678a:	4618      	mov	r0, r3
 800678c:	7afb      	ldrb	r3, [r7, #11]
 800678e:	b299      	uxth	r1, r3
 8006790:	893b      	ldrh	r3, [r7, #8]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	47a0      	blx	r4
 8006796:	4603      	mov	r3, r0
}
 8006798:	4618      	mov	r0, r3
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	bd90      	pop	{r4, r7, pc}

080067a0 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80067a0:	b590      	push	{r4, r7, lr}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	607a      	str	r2, [r7, #4]
 80067aa:	461a      	mov	r2, r3
 80067ac:	460b      	mov	r3, r1
 80067ae:	72fb      	strb	r3, [r7, #11]
 80067b0:	4613      	mov	r3, r2
 80067b2:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	691c      	ldr	r4, [r3, #16]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	7b1b      	ldrb	r3, [r3, #12]
 80067c0:	4618      	mov	r0, r3
 80067c2:	7afb      	ldrb	r3, [r7, #11]
 80067c4:	b299      	uxth	r1, r3
 80067c6:	893b      	ldrh	r3, [r7, #8]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	47a0      	blx	r4
 80067cc:	4603      	mov	r3, r0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd90      	pop	{r4, r7, pc}

080067d6 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80067d6:	b590      	push	{r4, r7, lr}
 80067d8:	b087      	sub	sp, #28
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	461a      	mov	r2, r3
 80067e2:	460b      	mov	r3, r1
 80067e4:	72fb      	strb	r3, [r7, #11]
 80067e6:	4613      	mov	r3, r2
 80067e8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685c      	ldr	r4, [r3, #4]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	68d8      	ldr	r0, [r3, #12]
 80067f2:	893b      	ldrh	r3, [r7, #8]
 80067f4:	7af9      	ldrb	r1, [r7, #11]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	47a0      	blx	r4
 80067fa:	6178      	str	r0, [r7, #20]

  return ret;
 80067fc:	697b      	ldr	r3, [r7, #20]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	bd90      	pop	{r4, r7, pc}

08006806 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006806:	b590      	push	{r4, r7, lr}
 8006808:	b087      	sub	sp, #28
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	461a      	mov	r2, r3
 8006812:	460b      	mov	r3, r1
 8006814:	72fb      	strb	r3, [r7, #11]
 8006816:	4613      	mov	r3, r2
 8006818:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681c      	ldr	r4, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	68d8      	ldr	r0, [r3, #12]
 8006822:	893b      	ldrh	r3, [r7, #8]
 8006824:	7af9      	ldrb	r1, [r7, #11]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	47a0      	blx	r4
 800682a:	6178      	str	r0, [r7, #20]

  return ret;
 800682c:	697b      	ldr	r3, [r7, #20]
}
 800682e:	4618      	mov	r0, r3
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	bd90      	pop	{r4, r7, pc}

08006836 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fa fa38 	bl	8000cb4 <__aeabi_ui2f>
 8006844:	4603      	mov	r3, r0
 8006846:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 800684a:	4618      	mov	r0, r3
 800684c:	f7fa fb3e 	bl	8000ecc <__aeabi_fdiv>
 8006850:	4603      	mov	r3, r0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8006866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800686a:	4618      	mov	r0, r3
 800686c:	f7fa fa26 	bl	8000cbc <__aeabi_i2f>
 8006870:	4603      	mov	r3, r0
 8006872:	4904      	ldr	r1, [pc, #16]	@ (8006884 <lps22hh_from_lsb_to_celsius+0x28>)
 8006874:	4618      	mov	r0, r3
 8006876:	f7fa fb29 	bl	8000ecc <__aeabi_fdiv>
 800687a:	4603      	mov	r3, r0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	42c80000 	.word	0x42c80000

08006888 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006894:	f107 0208 	add.w	r2, r7, #8
 8006898:	2301      	movs	r3, #1
 800689a:	2110      	movs	r1, #16
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff ff9a 	bl	80067d6 <lps22hh_read_reg>
 80068a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10f      	bne.n	80068ca <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80068aa:	78fb      	ldrb	r3, [r7, #3]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	7a3b      	ldrb	r3, [r7, #8]
 80068b4:	f362 0341 	bfi	r3, r2, #1, #1
 80068b8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80068ba:	f107 0208 	add.w	r2, r7, #8
 80068be:	2301      	movs	r3, #1
 80068c0:	2110      	movs	r1, #16
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff ff9f 	bl	8006806 <lps22hh_write_reg>
 80068c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80068ca:	68fb      	ldr	r3, [r7, #12]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80068e0:	f107 0210 	add.w	r2, r7, #16
 80068e4:	2301      	movs	r3, #1
 80068e6:	2110      	movs	r1, #16
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff ff74 	bl	80067d6 <lps22hh_read_reg>
 80068ee:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d107      	bne.n	8006906 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80068f6:	f107 020c 	add.w	r2, r7, #12
 80068fa:	2301      	movs	r3, #1
 80068fc:	2111      	movs	r1, #17
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff ff69 	bl	80067d6 <lps22hh_read_reg>
 8006904:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10f      	bne.n	800692c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	f003 0307 	and.w	r3, r3, #7
 8006912:	b2da      	uxtb	r2, r3
 8006914:	7c3b      	ldrb	r3, [r7, #16]
 8006916:	f362 1306 	bfi	r3, r2, #4, #3
 800691a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800691c:	f107 0210 	add.w	r2, r7, #16
 8006920:	2301      	movs	r3, #1
 8006922:	2110      	movs	r1, #16
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff ff6e 	bl	8006806 <lps22hh_write_reg>
 800692a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d119      	bne.n	8006966 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006932:	78fb      	ldrb	r3, [r7, #3]
 8006934:	091b      	lsrs	r3, r3, #4
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	b2da      	uxtb	r2, r3
 800693c:	7b3b      	ldrb	r3, [r7, #12]
 800693e:	f362 0341 	bfi	r3, r2, #1, #1
 8006942:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	08db      	lsrs	r3, r3, #3
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	b2da      	uxtb	r2, r3
 800694e:	7b3b      	ldrb	r3, [r7, #12]
 8006950:	f362 0300 	bfi	r3, r2, #0, #1
 8006954:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006956:	f107 020c 	add.w	r2, r7, #12
 800695a:	2301      	movs	r3, #1
 800695c:	2111      	movs	r1, #17
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff ff51 	bl	8006806 <lps22hh_write_reg>
 8006964:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006966:	697b      	ldr	r3, [r7, #20]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800697a:	f107 0210 	add.w	r2, r7, #16
 800697e:	2301      	movs	r3, #1
 8006980:	2110      	movs	r1, #16
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7ff ff27 	bl	80067d6 <lps22hh_read_reg>
 8006988:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d107      	bne.n	80069a0 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006990:	f107 020c 	add.w	r2, r7, #12
 8006994:	2301      	movs	r3, #1
 8006996:	2111      	movs	r1, #17
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff ff1c 	bl	80067d6 <lps22hh_read_reg>
 800699e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f040 8086 	bne.w	8006ab4 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80069a8:	f107 020c 	add.w	r2, r7, #12
 80069ac:	2301      	movs	r3, #1
 80069ae:	2111      	movs	r1, #17
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff ff10 	bl	80067d6 <lps22hh_read_reg>
 80069b6:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80069b8:	7b3b      	ldrb	r3, [r7, #12]
 80069ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	011a      	lsls	r2, r3, #4
 80069c2:	7b3b      	ldrb	r3, [r7, #12]
 80069c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	4413      	add	r3, r2
             ctrl_reg1.odr))
 80069ce:	7c3a      	ldrb	r2, [r7, #16]
 80069d0:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80069d4:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80069d6:	4413      	add	r3, r2
 80069d8:	2b15      	cmp	r3, #21
 80069da:	d867      	bhi.n	8006aac <lps22hh_data_rate_get+0x13c>
 80069dc:	a201      	add	r2, pc, #4	@ (adr r2, 80069e4 <lps22hh_data_rate_get+0x74>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	08006a3d 	.word	0x08006a3d
 80069e8:	08006a4d 	.word	0x08006a4d
 80069ec:	08006a55 	.word	0x08006a55
 80069f0:	08006a5d 	.word	0x08006a5d
 80069f4:	08006a65 	.word	0x08006a65
 80069f8:	08006a6d 	.word	0x08006a6d
 80069fc:	08006a9d 	.word	0x08006a9d
 8006a00:	08006aa5 	.word	0x08006aa5
 8006a04:	08006a45 	.word	0x08006a45
 8006a08:	08006aad 	.word	0x08006aad
 8006a0c:	08006aad 	.word	0x08006aad
 8006a10:	08006aad 	.word	0x08006aad
 8006a14:	08006aad 	.word	0x08006aad
 8006a18:	08006aad 	.word	0x08006aad
 8006a1c:	08006aad 	.word	0x08006aad
 8006a20:	08006aad 	.word	0x08006aad
 8006a24:	08006aad 	.word	0x08006aad
 8006a28:	08006a75 	.word	0x08006a75
 8006a2c:	08006a7d 	.word	0x08006a7d
 8006a30:	08006a85 	.word	0x08006a85
 8006a34:	08006a8d 	.word	0x08006a8d
 8006a38:	08006a95 	.word	0x08006a95
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]
        break;
 8006a42:	e037      	b.n	8006ab4 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2208      	movs	r2, #8
 8006a48:	701a      	strb	r2, [r3, #0]
        break;
 8006a4a:	e033      	b.n	8006ab4 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	701a      	strb	r2, [r3, #0]
        break;
 8006a52:	e02f      	b.n	8006ab4 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2202      	movs	r2, #2
 8006a58:	701a      	strb	r2, [r3, #0]
        break;
 8006a5a:	e02b      	b.n	8006ab4 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2203      	movs	r2, #3
 8006a60:	701a      	strb	r2, [r3, #0]
        break;
 8006a62:	e027      	b.n	8006ab4 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2204      	movs	r2, #4
 8006a68:	701a      	strb	r2, [r3, #0]
        break;
 8006a6a:	e023      	b.n	8006ab4 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2205      	movs	r2, #5
 8006a70:	701a      	strb	r2, [r3, #0]
        break;
 8006a72:	e01f      	b.n	8006ab4 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2211      	movs	r2, #17
 8006a78:	701a      	strb	r2, [r3, #0]
        break;
 8006a7a:	e01b      	b.n	8006ab4 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2212      	movs	r2, #18
 8006a80:	701a      	strb	r2, [r3, #0]
        break;
 8006a82:	e017      	b.n	8006ab4 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2213      	movs	r2, #19
 8006a88:	701a      	strb	r2, [r3, #0]
        break;
 8006a8a:	e013      	b.n	8006ab4 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2214      	movs	r2, #20
 8006a90:	701a      	strb	r2, [r3, #0]
        break;
 8006a92:	e00f      	b.n	8006ab4 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2215      	movs	r2, #21
 8006a98:	701a      	strb	r2, [r3, #0]
        break;
 8006a9a:	e00b      	b.n	8006ab4 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2206      	movs	r2, #6
 8006aa0:	701a      	strb	r2, [r3, #0]
        break;
 8006aa2:	e007      	b.n	8006ab4 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2207      	movs	r2, #7
 8006aa8:	701a      	strb	r2, [r3, #0]
        break;
 8006aaa:	e003      	b.n	8006ab4 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
        break;
 8006ab2:	bf00      	nop
    }
  }

  return ret;
 8006ab4:	697b      	ldr	r3, [r7, #20]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop

08006ac0 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8006aca:	f107 0208 	add.w	r2, r7, #8
 8006ace:	2303      	movs	r3, #3
 8006ad0:	2128      	movs	r1, #40	@ 0x28
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fe7f 	bl	80067d6 <lps22hh_read_reg>
 8006ad8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006ada:	7abb      	ldrb	r3, [r7, #10]
 8006adc:	461a      	mov	r2, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	021b      	lsls	r3, r3, #8
 8006ae8:	7a7a      	ldrb	r2, [r7, #9]
 8006aea:	441a      	add	r2, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	021b      	lsls	r3, r3, #8
 8006af6:	7a3a      	ldrb	r2, [r7, #8]
 8006af8:	441a      	add	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	021a      	lsls	r2, r3, #8
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	601a      	str	r2, [r3, #0]

  return ret;
 8006b08:	68fb      	ldr	r3, [r7, #12]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006b1c:	f107 0208 	add.w	r2, r7, #8
 8006b20:	2302      	movs	r3, #2
 8006b22:	212b      	movs	r1, #43	@ 0x2b
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff fe56 	bl	80067d6 <lps22hh_read_reg>
 8006b2a:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006b2c:	7a7b      	ldrb	r3, [r7, #9]
 8006b2e:	b21a      	sxth	r2, r3
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	7a3a      	ldrb	r2, [r7, #8]
 8006b42:	4413      	add	r3, r2
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	b21a      	sxth	r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	801a      	strh	r2, [r3, #0]

  return ret;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006b60:	2301      	movs	r3, #1
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	210f      	movs	r1, #15
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff fe35 	bl	80067d6 <lps22hh_read_reg>
 8006b6c:	60f8      	str	r0, [r7, #12]

  return ret;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006b84:	f107 0208 	add.w	r2, r7, #8
 8006b88:	2301      	movs	r3, #1
 8006b8a:	2111      	movs	r1, #17
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff fe22 	bl	80067d6 <lps22hh_read_reg>
 8006b92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10f      	bne.n	8006bba <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	7a3b      	ldrb	r3, [r7, #8]
 8006ba4:	f362 1304 	bfi	r3, r2, #4, #1
 8006ba8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006baa:	f107 0208 	add.w	r2, r7, #8
 8006bae:	2301      	movs	r3, #1
 8006bb0:	2111      	movs	r1, #17
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff fe27 	bl	8006806 <lps22hh_write_reg>
 8006bb8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006bba:	68fb      	ldr	r3, [r7, #12]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006bd0:	f107 0208 	add.w	r2, r7, #8
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	2110      	movs	r1, #16
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff fdfc 	bl	80067d6 <lps22hh_read_reg>
 8006bde:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10f      	bne.n	8006c06 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	f003 0303 	and.w	r3, r3, #3
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	7a3b      	ldrb	r3, [r7, #8]
 8006bf0:	f362 0383 	bfi	r3, r2, #2, #2
 8006bf4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006bf6:	f107 0208 	add.w	r2, r7, #8
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	2110      	movs	r1, #16
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff fe01 	bl	8006806 <lps22hh_write_reg>
 8006c04:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006c06:	68fb      	ldr	r3, [r7, #12]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006c1c:	f107 0208 	add.w	r2, r7, #8
 8006c20:	2301      	movs	r3, #1
 8006c22:	210e      	movs	r1, #14
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff fdd6 	bl	80067d6 <lps22hh_read_reg>
 8006c2a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d118      	bne.n	8006c64 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8006c32:	78fb      	ldrb	r3, [r7, #3]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	7a3b      	ldrb	r3, [r7, #8]
 8006c3c:	f362 0341 	bfi	r3, r2, #1, #1
 8006c40:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8006c42:	78fb      	ldrb	r3, [r7, #3]
 8006c44:	091b      	lsrs	r3, r3, #4
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	7a3b      	ldrb	r3, [r7, #8]
 8006c4e:	f362 13c7 	bfi	r3, r2, #7, #1
 8006c52:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006c54:	f107 0208 	add.w	r2, r7, #8
 8006c58:	2301      	movs	r3, #1
 8006c5a:	210e      	movs	r1, #14
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff fdd2 	bl	8006806 <lps22hh_write_reg>
 8006c62:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006c64:	68fb      	ldr	r3, [r7, #12]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d103      	bne.n	8006c8c <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8006c84:	f04f 33ff 	mov.w	r3, #4294967295
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e051      	b.n	8006d30 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	7b1a      	ldrb	r2, [r3, #12]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	691a      	ldr	r2, [r3, #16]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	695a      	ldr	r2, [r3, #20]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	699a      	ldr	r2, [r3, #24]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8006d3c <LSM6DSO_RegisterBusIO+0xcc>)
 8006cc8:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8006d40 <LSM6DSO_RegisterBusIO+0xd0>)
 8006cce:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	69da      	ldr	r2, [r3, #28]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d103      	bne.n	8006cee <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8006ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	e020      	b.n	8006d30 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4798      	blx	r3
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8006cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	e016      	b.n	8006d30 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d112      	bne.n	8006d30 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10d      	bne.n	8006d30 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006d14:	230c      	movs	r3, #12
 8006d16:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8006d18:	7afb      	ldrb	r3, [r7, #11]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	2112      	movs	r1, #18
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 ff55 	bl	8007bce <LSM6DSO_Write_Reg>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8006d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d2e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006d30:	68fb      	ldr	r3, [r7, #12]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	080080e5 	.word	0x080080e5
 8006d40:	0800811b 	.word	0x0800811b

08006d44 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d00b      	beq.n	8006d6c <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3320      	adds	r3, #32
 8006d58:	2180      	movs	r1, #128	@ 0x80
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 feb6 	bl	8008acc <lsm6dso_i3c_disable_set>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8006d66:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6a:	e060      	b.n	8006e2e <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3320      	adds	r3, #32
 8006d70:	2101      	movs	r1, #1
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 fe84 	bl	8008a80 <lsm6dso_auto_increment_set>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8006d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d82:	e054      	b.n	8006e2e <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3320      	adds	r3, #32
 8006d88:	2101      	movs	r1, #1
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 fd94 	bl	80088b8 <lsm6dso_block_data_update_set>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 8006d96:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9a:	e048      	b.n	8006e2e <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3320      	adds	r3, #32
 8006da0:	2100      	movs	r1, #0
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 ff00 	bl	8008ba8 <lsm6dso_fifo_mode_set>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8006dae:	f04f 33ff 	mov.w	r3, #4294967295
 8006db2:	e03c      	b.n	8006e2e <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2204      	movs	r2, #4
 8006db8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3320      	adds	r3, #32
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f001 fa52 	bl	800826c <lsm6dso_xl_data_rate_set>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8006dce:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd2:	e02c      	b.n	8006e2e <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3320      	adds	r3, #32
 8006dd8:	2100      	movs	r1, #0
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f001 f9e8 	bl	80081b0 <lsm6dso_xl_full_scale_set>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8006de6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dea:	e020      	b.n	8006e2e <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2204      	movs	r2, #4
 8006df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3320      	adds	r3, #32
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 fc00 	bl	8008600 <lsm6dso_gy_data_rate_set>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8006e06:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0a:	e010      	b.n	8006e2e <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3320      	adds	r3, #32
 8006e10:	2106      	movs	r1, #6
 8006e12:	4618      	mov	r0, r3
 8006e14:	f001 fb8c 	bl	8008530 <lsm6dso_gy_full_scale_set>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8006e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e22:	e004      	b.n	8006e2e <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f888 	bl	8006f54 <LSM6DSO_ACC_Disable>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8006e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e4e:	e015      	b.n	8006e7c <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fc28 	bl	80076a6 <LSM6DSO_GYRO_Disable>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8006e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e60:	e00c      	b.n	8006e7c <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3320      	adds	r3, #32
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f001 fde2 	bl	8008a5e <lsm6dso_device_id_get>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8006ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea4:	e000      	b.n	8006ea8 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006ed8:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2210      	movs	r2, #16
 8006ede:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	4a07      	ldr	r2, [pc, #28]	@ (8006f08 <LSM6DSO_GetCapabilities+0x58>)
 8006eea:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	4a06      	ldr	r2, [pc, #24]	@ (8006f08 <LSM6DSO_GetCapabilities+0x58>)
 8006ef0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bc80      	pop	{r7}
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	45d02000 	.word	0x45d02000

08006f0c <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e014      	b.n	8006f4c <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f103 0220 	add.w	r2, r3, #32
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4610      	mov	r0, r2
 8006f32:	f001 f99b 	bl	800826c <lsm6dso_xl_data_rate_set>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f40:	e004      	b.n	8006f4c <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	e01f      	b.n	8006faa <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f103 0220 	add.w	r2, r3, #32
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3333      	adds	r3, #51	@ 0x33
 8006f74:	4619      	mov	r1, r3
 8006f76:	4610      	mov	r0, r2
 8006f78:	f001 fa72 	bl	8008460 <lsm6dso_xl_data_rate_get>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8006f82:	f04f 33ff 	mov.w	r3, #4294967295
 8006f86:	e010      	b.n	8006faa <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3320      	adds	r3, #32
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f001 f96c 	bl	800826c <lsm6dso_xl_data_rate_set>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f9e:	e004      	b.n	8006faa <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3320      	adds	r3, #32
 8006fc6:	f107 020b 	add.w	r2, r7, #11
 8006fca:	4611      	mov	r1, r2
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 f915 	bl	80081fc <lsm6dso_xl_full_scale_get>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fdc:	e023      	b.n	8007026 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8006fde:	7afb      	ldrb	r3, [r7, #11]
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d81b      	bhi.n	800701c <LSM6DSO_ACC_GetSensitivity+0x68>
 8006fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fec <LSM6DSO_ACC_GetSensitivity+0x38>)
 8006fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fea:	bf00      	nop
 8006fec:	08006ffd 	.word	0x08006ffd
 8006ff0:	08007015 	.word	0x08007015
 8006ff4:	08007005 	.word	0x08007005
 8006ff8:	0800700d 	.word	0x0800700d
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8007030 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8007000:	601a      	str	r2, [r3, #0]
      break;
 8007002:	e00f      	b.n	8007024 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	4a0b      	ldr	r2, [pc, #44]	@ (8007034 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8007008:	601a      	str	r2, [r3, #0]
      break;
 800700a:	e00b      	b.n	8007024 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	4a0a      	ldr	r2, [pc, #40]	@ (8007038 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8007010:	601a      	str	r2, [r3, #0]
      break;
 8007012:	e007      	b.n	8007024 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	4a09      	ldr	r2, [pc, #36]	@ (800703c <LSM6DSO_ACC_GetSensitivity+0x88>)
 8007018:	601a      	str	r2, [r3, #0]
      break;
 800701a:	e003      	b.n	8007024 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 800701c:	f04f 33ff 	mov.w	r3, #4294967295
 8007020:	60fb      	str	r3, [r7, #12]
      break;
 8007022:	bf00      	nop
  }

  return ret;
 8007024:	68fb      	ldr	r3, [r7, #12]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	3d79db23 	.word	0x3d79db23
 8007034:	3df9db23 	.word	0x3df9db23
 8007038:	3e79db23 	.word	0x3e79db23
 800703c:	3ef9db23 	.word	0x3ef9db23

08007040 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3320      	adds	r3, #32
 8007052:	f107 020b 	add.w	r2, r7, #11
 8007056:	4611      	mov	r1, r2
 8007058:	4618      	mov	r0, r3
 800705a:	f001 fa01 	bl	8008460 <lsm6dso_xl_data_rate_get>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8007064:	f04f 33ff 	mov.w	r3, #4294967295
 8007068:	e054      	b.n	8007114 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800706a:	7afb      	ldrb	r3, [r7, #11]
 800706c:	2b0b      	cmp	r3, #11
 800706e:	d84c      	bhi.n	800710a <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8007070:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	080070a9 	.word	0x080070a9
 800707c:	080070bb 	.word	0x080070bb
 8007080:	080070c3 	.word	0x080070c3
 8007084:	080070cb 	.word	0x080070cb
 8007088:	080070d3 	.word	0x080070d3
 800708c:	080070db 	.word	0x080070db
 8007090:	080070e3 	.word	0x080070e3
 8007094:	080070eb 	.word	0x080070eb
 8007098:	080070f3 	.word	0x080070f3
 800709c:	080070fb 	.word	0x080070fb
 80070a0:	08007103 	.word	0x08007103
 80070a4:	080070b3 	.word	0x080070b3
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]
      break;
 80070b0:	e02f      	b.n	8007112 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	4a19      	ldr	r2, [pc, #100]	@ (800711c <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80070b6:	601a      	str	r2, [r3, #0]
      break;
 80070b8:	e02b      	b.n	8007112 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	4a18      	ldr	r2, [pc, #96]	@ (8007120 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80070be:	601a      	str	r2, [r3, #0]
      break;
 80070c0:	e027      	b.n	8007112 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	4a17      	ldr	r2, [pc, #92]	@ (8007124 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80070c6:	601a      	str	r2, [r3, #0]
      break;
 80070c8:	e023      	b.n	8007112 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	4a16      	ldr	r2, [pc, #88]	@ (8007128 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80070ce:	601a      	str	r2, [r3, #0]
      break;
 80070d0:	e01f      	b.n	8007112 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	4a15      	ldr	r2, [pc, #84]	@ (800712c <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 80070d6:	601a      	str	r2, [r3, #0]
      break;
 80070d8:	e01b      	b.n	8007112 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	4a14      	ldr	r2, [pc, #80]	@ (8007130 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80070de:	601a      	str	r2, [r3, #0]
      break;
 80070e0:	e017      	b.n	8007112 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	4a13      	ldr	r2, [pc, #76]	@ (8007134 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80070e6:	601a      	str	r2, [r3, #0]
      break;
 80070e8:	e013      	b.n	8007112 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	4a12      	ldr	r2, [pc, #72]	@ (8007138 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 80070ee:	601a      	str	r2, [r3, #0]
      break;
 80070f0:	e00f      	b.n	8007112 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	4a11      	ldr	r2, [pc, #68]	@ (800713c <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 80070f6:	601a      	str	r2, [r3, #0]
      break;
 80070f8:	e00b      	b.n	8007112 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	4a10      	ldr	r2, [pc, #64]	@ (8007140 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80070fe:	601a      	str	r2, [r3, #0]
      break;
 8007100:	e007      	b.n	8007112 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	4a0f      	ldr	r2, [pc, #60]	@ (8007144 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8007106:	601a      	str	r2, [r3, #0]
      break;
 8007108:	e003      	b.n	8007112 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 800710a:	f04f 33ff 	mov.w	r3, #4294967295
 800710e:	60fb      	str	r3, [r7, #12]
      break;
 8007110:	bf00      	nop
  }

  return ret;
 8007112:	68fb      	ldr	r3, [r7, #12]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	3fcccccd 	.word	0x3fcccccd
 8007120:	41480000 	.word	0x41480000
 8007124:	41d00000 	.word	0x41d00000
 8007128:	42500000 	.word	0x42500000
 800712c:	42d00000 	.word	0x42d00000
 8007130:	43500000 	.word	0x43500000
 8007134:	43d08000 	.word	0x43d08000
 8007138:	44504000 	.word	0x44504000
 800713c:	44d06000 	.word	0x44d06000
 8007140:	45505000 	.word	0x45505000
 8007144:	45d05800 	.word	0x45d05800

08007148 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8007152:	2200      	movs	r2, #0
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f806 	bl	8007168 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 800715c:	4603      	mov	r3, r0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08c      	sub	sp, #48	@ 0x30
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	4613      	mov	r3, r2
 8007174:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 800717e:	79fb      	ldrb	r3, [r7, #7]
 8007180:	2b02      	cmp	r3, #2
 8007182:	f000 80e6 	beq.w	8007352 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ea>
 8007186:	2b02      	cmp	r3, #2
 8007188:	f300 815d 	bgt.w	8007446 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2de>
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e>
 8007190:	2b01      	cmp	r3, #1
 8007192:	d072      	beq.n	800727a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
 8007194:	e157      	b.n	8007446 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2de>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f103 0020 	add.w	r0, r3, #32
 800719c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80071a0:	2301      	movs	r3, #1
 80071a2:	2114      	movs	r1, #20
 80071a4:	f000 ffd4 	bl	8008150 <lsm6dso_read_reg>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4c>
      {
        return LSM6DSO_ERROR;
 80071ae:	f04f 33ff 	mov.w	r3, #4294967295
 80071b2:	e164      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en != 0U)
 80071b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d025      	beq.n	800720e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa6>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d10b      	bne.n	80071e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3320      	adds	r3, #32
 80071d0:	2100      	movs	r1, #0
 80071d2:	4618      	mov	r0, r3
 80071d4:	f001 f84a 	bl	800826c <lsm6dso_xl_data_rate_set>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
          {
            return LSM6DSO_ERROR;
 80071de:	f04f 33ff 	mov.w	r3, #4294967295
 80071e2:	e14c      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 0;
 80071e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071e8:	f36f 13c7 	bfc	r3, #7, #1
 80071ec:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f103 0020 	add.w	r0, r3, #32
 80071f6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80071fa:	2301      	movs	r3, #1
 80071fc:	2114      	movs	r1, #20
 80071fe:	f000 ffbf 	bl	8008180 <lsm6dso_write_reg>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa6>
        {
          return LSM6DSO_ERROR;
 8007208:	f04f 33ff 	mov.w	r3, #4294967295
 800720c:	e137      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f103 0020 	add.w	r0, r3, #32
 8007214:	f107 0220 	add.w	r2, r7, #32
 8007218:	2301      	movs	r3, #1
 800721a:	2115      	movs	r1, #21
 800721c:	f000 ff98 	bl	8008150 <lsm6dso_read_reg>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc4>
      {
        return LSM6DSO_ERROR;
 8007226:	f04f 33ff 	mov.w	r3, #4294967295
 800722a:	e128      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode != 0U)
 800722c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007230:	f003 0310 	and.w	r3, r3, #16
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d014      	beq.n	8007264 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfc>
      {
        val2.xl_hm_mode = 0U;
 800723a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800723e:	f36f 1304 	bfc	r3, #4, #1
 8007242:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f103 0020 	add.w	r0, r3, #32
 800724c:	f107 0220 	add.w	r2, r7, #32
 8007250:	2301      	movs	r3, #1
 8007252:	2115      	movs	r1, #21
 8007254:	f000 ff94 	bl	8008180 <lsm6dso_write_reg>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfc>
        {
          return LSM6DSO_ERROR;
 800725e:	f04f 33ff 	mov.w	r3, #4294967295
 8007262:	e10c      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8007264:	4988      	ldr	r1, [pc, #544]	@ (8007488 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 8007266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007268:	f7f9 ff1a 	bl	80010a0 <__aeabi_fcmplt>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d100      	bne.n	8007274 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x10c>
      {
        newOdr = 12.5f;
      }
      break;
 8007272:	e0ec      	b.n	800744e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 12.5f;
 8007274:	4b84      	ldr	r3, [pc, #528]	@ (8007488 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 8007276:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007278:	e0e9      	b.n	800744e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f103 0020 	add.w	r0, r3, #32
 8007280:	f107 021c 	add.w	r2, r7, #28
 8007284:	2301      	movs	r3, #1
 8007286:	2114      	movs	r1, #20
 8007288:	f000 ff62 	bl	8008150 <lsm6dso_read_reg>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x130>
      {
        return LSM6DSO_ERROR;
 8007292:	f04f 33ff 	mov.w	r3, #4294967295
 8007296:	e0f2      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en != 0U)
 8007298:	7f3b      	ldrb	r3, [r7, #28]
 800729a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d023      	beq.n	80072ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d10b      	bne.n	80072c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3320      	adds	r3, #32
 80072b2:	2100      	movs	r1, #0
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 ffd9 	bl	800826c <lsm6dso_xl_data_rate_set>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
          {
            return LSM6DSO_ERROR;
 80072c0:	f04f 33ff 	mov.w	r3, #4294967295
 80072c4:	e0db      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 0;
 80072c6:	7f3b      	ldrb	r3, [r7, #28]
 80072c8:	f36f 13c7 	bfc	r3, #7, #1
 80072cc:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f103 0020 	add.w	r0, r3, #32
 80072d4:	f107 021c 	add.w	r2, r7, #28
 80072d8:	2301      	movs	r3, #1
 80072da:	2114      	movs	r1, #20
 80072dc:	f000 ff50 	bl	8008180 <lsm6dso_write_reg>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
        {
          return LSM6DSO_ERROR;
 80072e6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ea:	e0c8      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f103 0020 	add.w	r0, r3, #32
 80072f2:	f107 0218 	add.w	r2, r7, #24
 80072f6:	2301      	movs	r3, #1
 80072f8:	2115      	movs	r1, #21
 80072fa:	f000 ff29 	bl	8008150 <lsm6dso_read_reg>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a2>
      {
        return LSM6DSO_ERROR;
 8007304:	f04f 33ff 	mov.w	r3, #4294967295
 8007308:	e0b9      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode == 0U)
 800730a:	7e3b      	ldrb	r3, [r7, #24]
 800730c:	f003 0310 	and.w	r3, r3, #16
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d112      	bne.n	800733c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
      {
        val2.xl_hm_mode = 1U;
 8007316:	7e3b      	ldrb	r3, [r7, #24]
 8007318:	f043 0310 	orr.w	r3, r3, #16
 800731c:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f103 0020 	add.w	r0, r3, #32
 8007324:	f107 0218 	add.w	r2, r7, #24
 8007328:	2301      	movs	r3, #1
 800732a:	2115      	movs	r1, #21
 800732c:	f000 ff28 	bl	8008180 <lsm6dso_write_reg>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
        {
          return LSM6DSO_ERROR;
 8007336:	f04f 33ff 	mov.w	r3, #4294967295
 800733a:	e0a0      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800733c:	4953      	ldr	r1, [pc, #332]	@ (800748c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 800733e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007340:	f7f9 fecc 	bl	80010dc <__aeabi_fcmpgt>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d100      	bne.n	800734c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e4>
      {
        newOdr = 208.0f;
      }
      break;
 800734a:	e080      	b.n	800744e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 208.0f;
 800734c:	4b4f      	ldr	r3, [pc, #316]	@ (800748c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 800734e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007350:	e07d      	b.n	800744e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f103 0020 	add.w	r0, r3, #32
 8007358:	f107 0210 	add.w	r2, r7, #16
 800735c:	2301      	movs	r3, #1
 800735e:	2115      	movs	r1, #21
 8007360:	f000 fef6 	bl	8008150 <lsm6dso_read_reg>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
      {
        return LSM6DSO_ERROR;
 800736a:	f04f 33ff 	mov.w	r3, #4294967295
 800736e:	e086      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode != 0U)
 8007370:	7c3b      	ldrb	r3, [r7, #16]
 8007372:	f003 0310 	and.w	r3, r3, #16
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d012      	beq.n	80073a2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23a>
      {
        val2.xl_hm_mode = 0U;
 800737c:	7c3b      	ldrb	r3, [r7, #16]
 800737e:	f36f 1304 	bfc	r3, #4, #1
 8007382:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f103 0020 	add.w	r0, r3, #32
 800738a:	f107 0210 	add.w	r2, r7, #16
 800738e:	2301      	movs	r3, #1
 8007390:	2115      	movs	r1, #21
 8007392:	f000 fef5 	bl	8008180 <lsm6dso_write_reg>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23a>
        {
          return LSM6DSO_ERROR;
 800739c:	f04f 33ff 	mov.w	r3, #4294967295
 80073a0:	e06d      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d108      	bne.n	80073be <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x256>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 f97a 	bl	80076a6 <LSM6DSO_GYRO_Disable>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x256>
        {
          return LSM6DSO_ERROR;
 80073b8:	f04f 33ff 	mov.w	r3, #4294967295
 80073bc:	e05f      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f103 0020 	add.w	r0, r3, #32
 80073c4:	f107 0214 	add.w	r2, r7, #20
 80073c8:	2301      	movs	r3, #1
 80073ca:	2114      	movs	r1, #20
 80073cc:	f000 fec0 	bl	8008150 <lsm6dso_read_reg>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x274>
      {
        return LSM6DSO_ERROR;
 80073d6:	f04f 33ff 	mov.w	r3, #4294967295
 80073da:	e050      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en == 0U)
 80073dc:	7d3b      	ldrb	r3, [r7, #20]
 80073de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d123      	bne.n	8007430 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2c8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d10b      	bne.n	800740a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a2>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3320      	adds	r3, #32
 80073f6:	2100      	movs	r1, #0
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 ff37 	bl	800826c <lsm6dso_xl_data_rate_set>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a2>
          {
            return LSM6DSO_ERROR;
 8007404:	f04f 33ff 	mov.w	r3, #4294967295
 8007408:	e039      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 1U;
 800740a:	7d3b      	ldrb	r3, [r7, #20]
 800740c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007410:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f103 0020 	add.w	r0, r3, #32
 8007418:	f107 0214 	add.w	r2, r7, #20
 800741c:	2301      	movs	r3, #1
 800741e:	2114      	movs	r1, #20
 8007420:	f000 feae 	bl	8008180 <lsm6dso_write_reg>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2c8>
        {
          return LSM6DSO_ERROR;
 800742a:	f04f 33ff 	mov.w	r3, #4294967295
 800742e:	e026      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8007430:	4916      	ldr	r1, [pc, #88]	@ (800748c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 8007432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007434:	f7f9 fe52 	bl	80010dc <__aeabi_fcmpgt>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d100      	bne.n	8007440 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
      {
        newOdr = 208.0f;
      }
      break;
 800743e:	e006      	b.n	800744e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 208.0f;
 8007440:	4b12      	ldr	r3, [pc, #72]	@ (800748c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 8007442:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007444:	e003      	b.n	800744e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
    }
    default:
      ret = LSM6DSO_ERROR;
 8007446:	f04f 33ff 	mov.w	r3, #4294967295
 800744a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800744c:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800744e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007454:	d102      	bne.n	800745c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
  {
    return LSM6DSO_ERROR;
 8007456:	f04f 33ff 	mov.w	r3, #4294967295
 800745a:	e010      	b.n	800747e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
  }

  if (pObj->acc_is_enabled == 1U)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007462:	2b01      	cmp	r3, #1
 8007464:	d105      	bne.n	8007472 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8007466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 fc49 	bl	8007d00 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800746e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007470:	e004      	b.n	800747c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x314>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8007472:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fccb 	bl	8007e10 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 800747a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 800747c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800747e:	4618      	mov	r0, r3
 8007480:	3730      	adds	r7, #48	@ 0x30
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	41480000 	.word	0x41480000
 800748c:	43500000 	.word	0x43500000

08007490 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3320      	adds	r3, #32
 80074a2:	f107 020b 	add.w	r2, r7, #11
 80074a6:	4611      	mov	r1, r2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 fea7 	bl	80081fc <lsm6dso_xl_full_scale_get>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d002      	beq.n	80074ba <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80074b4:	f04f 33ff 	mov.w	r3, #4294967295
 80074b8:	e023      	b.n	8007502 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80074ba:	7afb      	ldrb	r3, [r7, #11]
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d81b      	bhi.n	80074f8 <LSM6DSO_ACC_GetFullScale+0x68>
 80074c0:	a201      	add	r2, pc, #4	@ (adr r2, 80074c8 <LSM6DSO_ACC_GetFullScale+0x38>)
 80074c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c6:	bf00      	nop
 80074c8:	080074d9 	.word	0x080074d9
 80074cc:	080074f1 	.word	0x080074f1
 80074d0:	080074e1 	.word	0x080074e1
 80074d4:	080074e9 	.word	0x080074e9
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	2202      	movs	r2, #2
 80074dc:	601a      	str	r2, [r3, #0]
      break;
 80074de:	e00f      	b.n	8007500 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2204      	movs	r2, #4
 80074e4:	601a      	str	r2, [r3, #0]
      break;
 80074e6:	e00b      	b.n	8007500 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2208      	movs	r2, #8
 80074ec:	601a      	str	r2, [r3, #0]
      break;
 80074ee:	e007      	b.n	8007500 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2210      	movs	r2, #16
 80074f4:	601a      	str	r2, [r3, #0]
      break;
 80074f6:	e003      	b.n	8007500 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80074f8:	f04f 33ff 	mov.w	r3, #4294967295
 80074fc:	60fb      	str	r3, [r7, #12]
      break;
 80074fe:	bf00      	nop
  }

  return ret;
 8007500:	68fb      	ldr	r3, [r7, #12]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop

0800750c <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b02      	cmp	r3, #2
 800751a:	dd0b      	ble.n	8007534 <LSM6DSO_ACC_SetFullScale+0x28>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b04      	cmp	r3, #4
 8007520:	dd06      	ble.n	8007530 <LSM6DSO_ACC_SetFullScale+0x24>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b08      	cmp	r3, #8
 8007526:	dc01      	bgt.n	800752c <LSM6DSO_ACC_SetFullScale+0x20>
 8007528:	2303      	movs	r3, #3
 800752a:	e004      	b.n	8007536 <LSM6DSO_ACC_SetFullScale+0x2a>
 800752c:	2301      	movs	r3, #1
 800752e:	e002      	b.n	8007536 <LSM6DSO_ACC_SetFullScale+0x2a>
 8007530:	2302      	movs	r3, #2
 8007532:	e000      	b.n	8007536 <LSM6DSO_ACC_SetFullScale+0x2a>
 8007534:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8007536:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	3320      	adds	r3, #32
 800753c:	7bfa      	ldrb	r2, [r7, #15]
 800753e:	4611      	mov	r1, r2
 8007540:	4618      	mov	r0, r3
 8007542:	f000 fe35 	bl	80081b0 <lsm6dso_xl_full_scale_set>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 800754c:	f04f 33ff 	mov.w	r3, #4294967295
 8007550:	e000      	b.n	8007554 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3320      	adds	r3, #32
 800756a:	f107 0208 	add.w	r2, r7, #8
 800756e:	4611      	mov	r1, r2
 8007570:	4618      	mov	r0, r3
 8007572:	f001 fa0f 	bl	8008994 <lsm6dso_acceleration_raw_get>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800757c:	f04f 33ff 	mov.w	r3, #4294967295
 8007580:	e00c      	b.n	800759c <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007582:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800758a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007592:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80075ae:	f04f 0300 	mov.w	r3, #0
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	3320      	adds	r3, #32
 80075b8:	f107 0210 	add.w	r2, r7, #16
 80075bc:	4611      	mov	r1, r2
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 f9e8 	bl	8008994 <lsm6dso_acceleration_raw_get>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 80075ca:	f04f 33ff 	mov.w	r3, #4294967295
 80075ce:	e042      	b.n	8007656 <LSM6DSO_ACC_GetAxes+0xb2>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80075d0:	f107 030c 	add.w	r3, r7, #12
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff fcec 	bl	8006fb4 <LSM6DSO_ACC_GetSensitivity>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d002      	beq.n	80075e8 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80075e2:	f04f 33ff 	mov.w	r3, #4294967295
 80075e6:	e036      	b.n	8007656 <LSM6DSO_ACC_GetAxes+0xb2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80075e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7f9 fb65 	bl	8000cbc <__aeabi_i2f>
 80075f2:	4602      	mov	r2, r0
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4619      	mov	r1, r3
 80075f8:	4610      	mov	r0, r2
 80075fa:	f7f9 fbb3 	bl	8000d64 <__aeabi_fmul>
 80075fe:	4603      	mov	r3, r0
 8007600:	4618      	mov	r0, r3
 8007602:	f7f9 fd75 	bl	80010f0 <__aeabi_f2iz>
 8007606:	4602      	mov	r2, r0
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800760c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007610:	4618      	mov	r0, r3
 8007612:	f7f9 fb53 	bl	8000cbc <__aeabi_i2f>
 8007616:	4602      	mov	r2, r0
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4619      	mov	r1, r3
 800761c:	4610      	mov	r0, r2
 800761e:	f7f9 fba1 	bl	8000d64 <__aeabi_fmul>
 8007622:	4603      	mov	r3, r0
 8007624:	4618      	mov	r0, r3
 8007626:	f7f9 fd63 	bl	80010f0 <__aeabi_f2iz>
 800762a:	4602      	mov	r2, r0
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007630:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007634:	4618      	mov	r0, r3
 8007636:	f7f9 fb41 	bl	8000cbc <__aeabi_i2f>
 800763a:	4602      	mov	r2, r0
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4619      	mov	r1, r3
 8007640:	4610      	mov	r0, r2
 8007642:	f7f9 fb8f 	bl	8000d64 <__aeabi_fmul>
 8007646:	4603      	mov	r3, r0
 8007648:	4618      	mov	r0, r3
 800764a:	f7f9 fd51 	bl	80010f0 <__aeabi_f2iz>
 800764e:	4602      	mov	r2, r0
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800766c:	2b01      	cmp	r3, #1
 800766e:	d101      	bne.n	8007674 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	e014      	b.n	800769e <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f103 0220 	add.w	r2, r3, #32
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007680:	4619      	mov	r1, r3
 8007682:	4610      	mov	r0, r2
 8007684:	f000 ffbc 	bl	8008600 <lsm6dso_gy_data_rate_set>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800768e:	f04f 33ff 	mov.w	r3, #4294967295
 8007692:	e004      	b.n	800769e <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	e01f      	b.n	80076fc <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f103 0220 	add.w	r2, r3, #32
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3334      	adds	r3, #52	@ 0x34
 80076c6:	4619      	mov	r1, r3
 80076c8:	4610      	mov	r0, r2
 80076ca:	f001 f893 	bl	80087f4 <lsm6dso_gy_data_rate_get>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80076d4:	f04f 33ff 	mov.w	r3, #4294967295
 80076d8:	e010      	b.n	80076fc <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	3320      	adds	r3, #32
 80076de:	2100      	movs	r1, #0
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 ff8d 	bl	8008600 <lsm6dso_gy_data_rate_set>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80076ec:	f04f 33ff 	mov.w	r3, #4294967295
 80076f0:	e004      	b.n	80076fc <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3320      	adds	r3, #32
 8007716:	f107 020b 	add.w	r2, r7, #11
 800771a:	4611      	mov	r1, r2
 800771c:	4618      	mov	r0, r3
 800771e:	f000 ff2d 	bl	800857c <lsm6dso_gy_full_scale_get>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8007728:	f04f 33ff 	mov.w	r3, #4294967295
 800772c:	e02d      	b.n	800778a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800772e:	7afb      	ldrb	r3, [r7, #11]
 8007730:	2b06      	cmp	r3, #6
 8007732:	d825      	bhi.n	8007780 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8007734:	a201      	add	r2, pc, #4	@ (adr r2, 800773c <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8007736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773a:	bf00      	nop
 800773c:	08007761 	.word	0x08007761
 8007740:	08007759 	.word	0x08007759
 8007744:	08007769 	.word	0x08007769
 8007748:	08007781 	.word	0x08007781
 800774c:	08007771 	.word	0x08007771
 8007750:	08007781 	.word	0x08007781
 8007754:	08007779 	.word	0x08007779
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	4a0e      	ldr	r2, [pc, #56]	@ (8007794 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 800775c:	601a      	str	r2, [r3, #0]
      break;
 800775e:	e013      	b.n	8007788 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	4a0d      	ldr	r2, [pc, #52]	@ (8007798 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8007764:	601a      	str	r2, [r3, #0]
      break;
 8007766:	e00f      	b.n	8007788 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	4a0c      	ldr	r2, [pc, #48]	@ (800779c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 800776c:	601a      	str	r2, [r3, #0]
      break;
 800776e:	e00b      	b.n	8007788 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	4a0b      	ldr	r2, [pc, #44]	@ (80077a0 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8007774:	601a      	str	r2, [r3, #0]
      break;
 8007776:	e007      	b.n	8007788 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	4a0a      	ldr	r2, [pc, #40]	@ (80077a4 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 800777c:	601a      	str	r2, [r3, #0]
      break;
 800777e:	e003      	b.n	8007788 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8007780:	f04f 33ff 	mov.w	r3, #4294967295
 8007784:	60fb      	str	r3, [r7, #12]
      break;
 8007786:	bf00      	nop
  }

  return ret;
 8007788:	68fb      	ldr	r3, [r7, #12]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	408c0000 	.word	0x408c0000
 8007798:	410c0000 	.word	0x410c0000
 800779c:	418c0000 	.word	0x418c0000
 80077a0:	420c0000 	.word	0x420c0000
 80077a4:	428c0000 	.word	0x428c0000

080077a8 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3320      	adds	r3, #32
 80077ba:	f107 020b 	add.w	r2, r7, #11
 80077be:	4611      	mov	r1, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f001 f817 	bl	80087f4 <lsm6dso_gy_data_rate_get>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80077cc:	f04f 33ff 	mov.w	r3, #4294967295
 80077d0:	e04e      	b.n	8007870 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80077d2:	7afb      	ldrb	r3, [r7, #11]
 80077d4:	2b0a      	cmp	r3, #10
 80077d6:	d846      	bhi.n	8007866 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80077d8:	a201      	add	r2, pc, #4	@ (adr r2, 80077e0 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	0800780d 	.word	0x0800780d
 80077e4:	08007817 	.word	0x08007817
 80077e8:	0800781f 	.word	0x0800781f
 80077ec:	08007827 	.word	0x08007827
 80077f0:	0800782f 	.word	0x0800782f
 80077f4:	08007837 	.word	0x08007837
 80077f8:	0800783f 	.word	0x0800783f
 80077fc:	08007847 	.word	0x08007847
 8007800:	0800784f 	.word	0x0800784f
 8007804:	08007857 	.word	0x08007857
 8007808:	0800785f 	.word	0x0800785f
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	f04f 0200 	mov.w	r2, #0
 8007812:	601a      	str	r2, [r3, #0]
      break;
 8007814:	e02b      	b.n	800786e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	4a17      	ldr	r2, [pc, #92]	@ (8007878 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 800781a:	601a      	str	r2, [r3, #0]
      break;
 800781c:	e027      	b.n	800786e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	4a16      	ldr	r2, [pc, #88]	@ (800787c <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8007822:	601a      	str	r2, [r3, #0]
      break;
 8007824:	e023      	b.n	800786e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	4a15      	ldr	r2, [pc, #84]	@ (8007880 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 800782a:	601a      	str	r2, [r3, #0]
      break;
 800782c:	e01f      	b.n	800786e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	4a14      	ldr	r2, [pc, #80]	@ (8007884 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8007832:	601a      	str	r2, [r3, #0]
      break;
 8007834:	e01b      	b.n	800786e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	4a13      	ldr	r2, [pc, #76]	@ (8007888 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 800783a:	601a      	str	r2, [r3, #0]
      break;
 800783c:	e017      	b.n	800786e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	4a12      	ldr	r2, [pc, #72]	@ (800788c <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8007842:	601a      	str	r2, [r3, #0]
      break;
 8007844:	e013      	b.n	800786e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	4a11      	ldr	r2, [pc, #68]	@ (8007890 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 800784a:	601a      	str	r2, [r3, #0]
      break;
 800784c:	e00f      	b.n	800786e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	4a10      	ldr	r2, [pc, #64]	@ (8007894 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8007852:	601a      	str	r2, [r3, #0]
      break;
 8007854:	e00b      	b.n	800786e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	4a0f      	ldr	r2, [pc, #60]	@ (8007898 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 800785a:	601a      	str	r2, [r3, #0]
      break;
 800785c:	e007      	b.n	800786e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	4a0e      	ldr	r2, [pc, #56]	@ (800789c <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8007862:	601a      	str	r2, [r3, #0]
      break;
 8007864:	e003      	b.n	800786e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8007866:	f04f 33ff 	mov.w	r3, #4294967295
 800786a:	60fb      	str	r3, [r7, #12]
      break;
 800786c:	bf00      	nop
  }

  return ret;
 800786e:	68fb      	ldr	r3, [r7, #12]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	41480000 	.word	0x41480000
 800787c:	41d00000 	.word	0x41d00000
 8007880:	42500000 	.word	0x42500000
 8007884:	42d00000 	.word	0x42d00000
 8007888:	43500000 	.word	0x43500000
 800788c:	43d08000 	.word	0x43d08000
 8007890:	44504000 	.word	0x44504000
 8007894:	44d06000 	.word	0x44d06000
 8007898:	45505000 	.word	0x45505000
 800789c:	45d05800 	.word	0x45d05800

080078a0 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80078aa:	2200      	movs	r2, #0
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f806 	bl	80078c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80078b4:	4603      	mov	r3, r0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	4613      	mov	r3, r2
 80078cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80078d6:	79fb      	ldrb	r3, [r7, #7]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x22>
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d028      	beq.n	8007932 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x72>
 80078e0:	e05a      	b.n	8007998 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f103 0020 	add.w	r0, r3, #32
 80078e8:	f107 0214 	add.w	r2, r7, #20
 80078ec:	2301      	movs	r3, #1
 80078ee:	2116      	movs	r1, #22
 80078f0:	f000 fc2e 	bl	8008150 <lsm6dso_read_reg>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x40>
      {
        return LSM6DSO_ERROR;
 80078fa:	f04f 33ff 	mov.w	r3, #4294967295
 80078fe:	e068      	b.n	80079d2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
      }

      if (val1.g_hm_mode != 0U)
 8007900:	7d3b      	ldrb	r3, [r7, #20]
 8007902:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	d049      	beq.n	80079a0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe0>
      {
        val1.g_hm_mode = 0U;
 800790c:	7d3b      	ldrb	r3, [r7, #20]
 800790e:	f36f 13c7 	bfc	r3, #7, #1
 8007912:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f103 0020 	add.w	r0, r3, #32
 800791a:	f107 0214 	add.w	r2, r7, #20
 800791e:	2301      	movs	r3, #1
 8007920:	2116      	movs	r1, #22
 8007922:	f000 fc2d 	bl	8008180 <lsm6dso_write_reg>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d039      	beq.n	80079a0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe0>
        {
          return LSM6DSO_ERROR;
 800792c:	f04f 33ff 	mov.w	r3, #4294967295
 8007930:	e04f      	b.n	80079d2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f103 0020 	add.w	r0, r3, #32
 8007938:	f107 0210 	add.w	r2, r7, #16
 800793c:	2301      	movs	r3, #1
 800793e:	2116      	movs	r1, #22
 8007940:	f000 fc06 	bl	8008150 <lsm6dso_read_reg>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x90>
      {
        return LSM6DSO_ERROR;
 800794a:	f04f 33ff 	mov.w	r3, #4294967295
 800794e:	e040      	b.n	80079d2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
      }

      if (val1.g_hm_mode == 0U)
 8007950:	7c3b      	ldrb	r3, [r7, #16]
 8007952:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	d112      	bne.n	8007982 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc2>
      {
        val1.g_hm_mode = 1U;
 800795c:	7c3b      	ldrb	r3, [r7, #16]
 800795e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007962:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f103 0020 	add.w	r0, r3, #32
 800796a:	f107 0210 	add.w	r2, r7, #16
 800796e:	2301      	movs	r3, #1
 8007970:	2116      	movs	r1, #22
 8007972:	f000 fc05 	bl	8008180 <lsm6dso_write_reg>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc2>
        {
          return LSM6DSO_ERROR;
 800797c:	f04f 33ff 	mov.w	r3, #4294967295
 8007980:	e027      	b.n	80079d2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8007982:	4916      	ldr	r1, [pc, #88]	@ (80079dc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>)
 8007984:	69b8      	ldr	r0, [r7, #24]
 8007986:	f7f9 fba9 	bl	80010dc <__aeabi_fcmpgt>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d100      	bne.n	8007992 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd2>
      {
        newOdr = 208.0f;
      }
      break;
 8007990:	e007      	b.n	80079a2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
        newOdr = 208.0f;
 8007992:	4b12      	ldr	r3, [pc, #72]	@ (80079dc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>)
 8007994:	61bb      	str	r3, [r7, #24]
 8007996:	e004      	b.n	80079a2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
    }
    default:
      ret = LSM6DSO_ERROR;
 8007998:	f04f 33ff 	mov.w	r3, #4294967295
 800799c:	61fb      	str	r3, [r7, #28]
      break;
 800799e:	e000      	b.n	80079a2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
      break;
 80079a0:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a8:	d102      	bne.n	80079b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf0>
  {
    return LSM6DSO_ERROR;
 80079aa:	f04f 33ff 	mov.w	r3, #4294967295
 80079ae:	e010      	b.n	80079d2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
  }

  if (pObj->gyro_is_enabled == 1U)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d105      	bne.n	80079c6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x106>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80079ba:	69b9      	ldr	r1, [r7, #24]
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 faa3 	bl	8007f08 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80079c2:	61f8      	str	r0, [r7, #28]
 80079c4:	e004      	b.n	80079d0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x110>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80079c6:	69b9      	ldr	r1, [r7, #24]
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 fb19 	bl	8008000 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80079ce:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80079d0:	69fb      	ldr	r3, [r7, #28]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	43500000 	.word	0x43500000

080079e0 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3320      	adds	r3, #32
 80079f2:	f107 020b 	add.w	r2, r7, #11
 80079f6:	4611      	mov	r1, r2
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fdbf 	bl	800857c <lsm6dso_gy_full_scale_get>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8007a04:	f04f 33ff 	mov.w	r3, #4294967295
 8007a08:	e030      	b.n	8007a6c <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8007a0a:	7afb      	ldrb	r3, [r7, #11]
 8007a0c:	2b06      	cmp	r3, #6
 8007a0e:	d828      	bhi.n	8007a62 <LSM6DSO_GYRO_GetFullScale+0x82>
 8007a10:	a201      	add	r2, pc, #4	@ (adr r2, 8007a18 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a3d 	.word	0x08007a3d
 8007a1c:	08007a35 	.word	0x08007a35
 8007a20:	08007a45 	.word	0x08007a45
 8007a24:	08007a63 	.word	0x08007a63
 8007a28:	08007a4f 	.word	0x08007a4f
 8007a2c:	08007a63 	.word	0x08007a63
 8007a30:	08007a59 	.word	0x08007a59
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	227d      	movs	r2, #125	@ 0x7d
 8007a38:	601a      	str	r2, [r3, #0]
      break;
 8007a3a:	e016      	b.n	8007a6a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	22fa      	movs	r2, #250	@ 0xfa
 8007a40:	601a      	str	r2, [r3, #0]
      break;
 8007a42:	e012      	b.n	8007a6a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8007a4a:	601a      	str	r2, [r3, #0]
      break;
 8007a4c:	e00d      	b.n	8007a6a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007a54:	601a      	str	r2, [r3, #0]
      break;
 8007a56:	e008      	b.n	8007a6a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007a5e:	601a      	str	r2, [r3, #0]
      break;
 8007a60:	e003      	b.n	8007a6a <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8007a62:	f04f 33ff 	mov.w	r3, #4294967295
 8007a66:	60fb      	str	r3, [r7, #12]
      break;
 8007a68:	bf00      	nop
  }

  return ret;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b7d      	cmp	r3, #125	@ 0x7d
 8007a82:	dd12      	ble.n	8007aaa <LSM6DSO_GYRO_SetFullScale+0x36>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2bfa      	cmp	r3, #250	@ 0xfa
 8007a88:	dd0d      	ble.n	8007aa6 <LSM6DSO_GYRO_SetFullScale+0x32>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007a90:	dd07      	ble.n	8007aa2 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a98:	dc01      	bgt.n	8007a9e <LSM6DSO_GYRO_SetFullScale+0x2a>
 8007a9a:	2304      	movs	r3, #4
 8007a9c:	e006      	b.n	8007aac <LSM6DSO_GYRO_SetFullScale+0x38>
 8007a9e:	2306      	movs	r3, #6
 8007aa0:	e004      	b.n	8007aac <LSM6DSO_GYRO_SetFullScale+0x38>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	e002      	b.n	8007aac <LSM6DSO_GYRO_SetFullScale+0x38>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	e000      	b.n	8007aac <LSM6DSO_GYRO_SetFullScale+0x38>
 8007aaa:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8007aac:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3320      	adds	r3, #32
 8007ab2:	7bfa      	ldrb	r2, [r7, #15]
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fd3a 	bl	8008530 <lsm6dso_gy_full_scale_set>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8007ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac6:	e000      	b.n	8007aca <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3320      	adds	r3, #32
 8007ae0:	f107 0208 	add.w	r2, r7, #8
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 ff0c 	bl	8008904 <lsm6dso_angular_rate_raw_get>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8007af2:	f04f 33ff 	mov.w	r3, #4294967295
 8007af6:	e00c      	b.n	8007b12 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007af8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007b00:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007b08:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b086      	sub	sp, #24
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3320      	adds	r3, #32
 8007b28:	f107 0210 	add.w	r2, r7, #16
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fee8 	bl	8008904 <lsm6dso_angular_rate_raw_get>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8007b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3e:	e042      	b.n	8007bc6 <LSM6DSO_GYRO_GetAxes+0xac>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8007b40:	f107 030c 	add.w	r3, r7, #12
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff fddc 	bl	8007704 <LSM6DSO_GYRO_GetSensitivity>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8007b52:	f04f 33ff 	mov.w	r3, #4294967295
 8007b56:	e036      	b.n	8007bc6 <LSM6DSO_GYRO_GetAxes+0xac>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007b58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7f9 f8ad 	bl	8000cbc <__aeabi_i2f>
 8007b62:	4602      	mov	r2, r0
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4619      	mov	r1, r3
 8007b68:	4610      	mov	r0, r2
 8007b6a:	f7f9 f8fb 	bl	8000d64 <__aeabi_fmul>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7f9 fabd 	bl	80010f0 <__aeabi_f2iz>
 8007b76:	4602      	mov	r2, r0
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007b7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7f9 f89b 	bl	8000cbc <__aeabi_i2f>
 8007b86:	4602      	mov	r2, r0
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	f7f9 f8e9 	bl	8000d64 <__aeabi_fmul>
 8007b92:	4603      	mov	r3, r0
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7f9 faab 	bl	80010f0 <__aeabi_f2iz>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007ba0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7f9 f889 	bl	8000cbc <__aeabi_i2f>
 8007baa:	4602      	mov	r2, r0
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	f7f9 f8d7 	bl	8000d64 <__aeabi_fmul>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7f9 fa99 	bl	80010f0 <__aeabi_f2iz>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f103 0020 	add.w	r0, r3, #32
 8007be4:	1cba      	adds	r2, r7, #2
 8007be6:	78f9      	ldrb	r1, [r7, #3]
 8007be8:	2301      	movs	r3, #1
 8007bea:	f000 fac9 	bl	8008180 <lsm6dso_write_reg>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8007bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf8:	e000      	b.n	8007bfc <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <LSM6DSO_ACC_Enable_6D_Orientation>:
  * @param  pObj the device pObj
  * @param  IntPin interrupt pin line to be used
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable_6D_Orientation(LSM6DSO_Object_t *pObj, LSM6DSO_SensorIntPin_t IntPin)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61fb      	str	r3, [r7, #28]
  lsm6dso_pin_int1_route_t val1;
  lsm6dso_pin_int2_route_t val2;

  /* Output Data Rate selection */
  if (LSM6DSO_ACC_SetOutputDataRate(pObj, 417.0f) != LSM6DSO_OK)
 8007c14:	4939      	ldr	r1, [pc, #228]	@ (8007cfc <LSM6DSO_ACC_Enable_6D_Orientation+0xf8>)
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff fa96 	bl	8007148 <LSM6DSO_ACC_SetOutputDataRate>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <LSM6DSO_ACC_Enable_6D_Orientation+0x24>
  {
    return LSM6DSO_ERROR;
 8007c22:	f04f 33ff 	mov.w	r3, #4294967295
 8007c26:	e065      	b.n	8007cf4 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
  }

  /* Full scale selection */
  if (LSM6DSO_ACC_SetFullScale(pObj, 2) != LSM6DSO_OK)
 8007c28:	2102      	movs	r1, #2
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff fc6e 	bl	800750c <LSM6DSO_ACC_SetFullScale>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <LSM6DSO_ACC_Enable_6D_Orientation+0x38>
  {
    return LSM6DSO_ERROR;
 8007c36:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3a:	e05b      	b.n	8007cf4 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
  }

  /* 6D orientation enabled. */
  if (lsm6dso_6d_threshold_set(&(pObj->Ctx), LSM6DSO_DEG_60) != LSM6DSO_OK)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3320      	adds	r3, #32
 8007c40:	2102      	movs	r1, #2
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 ff8a 	bl	8008b5c <lsm6dso_6d_threshold_set>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <LSM6DSO_ACC_Enable_6D_Orientation+0x50>
  {
    return LSM6DSO_ERROR;
 8007c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c52:	e04f      	b.n	8007cf4 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
  }

  /* Enable 6D orientation event on either INT1 or INT2 pin */
  switch (IntPin)
 8007c54:	78fb      	ldrb	r3, [r7, #3]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <LSM6DSO_ACC_Enable_6D_Orientation+0x5c>
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d021      	beq.n	8007ca2 <LSM6DSO_ACC_Enable_6D_Orientation+0x9e>
 8007c5e:	e041      	b.n	8007ce4 <LSM6DSO_ACC_Enable_6D_Orientation+0xe0>
  {
    case LSM6DSO_INT1_PIN:
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	3320      	adds	r3, #32
 8007c64:	f107 0214 	add.w	r2, r7, #20
 8007c68:	4611      	mov	r1, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 fbd8 	bl	8009420 <lsm6dso_pin_int1_route_get>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <LSM6DSO_ACC_Enable_6D_Orientation+0x78>
      {
        return LSM6DSO_ERROR;
 8007c76:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7a:	e03b      	b.n	8007cf4 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      }

      val1.six_d = PROPERTY_ENABLE;
 8007c7c:	7d7b      	ldrb	r3, [r7, #21]
 8007c7e:	f043 0308 	orr.w	r3, r3, #8
 8007c82:	757b      	strb	r3, [r7, #21]

      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f103 0020 	add.w	r0, r3, #32
 8007c8a:	f107 0314 	add.w	r3, r7, #20
 8007c8e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007c92:	f001 f81f 	bl	8008cd4 <lsm6dso_pin_int1_route_set>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d027      	beq.n	8007cec <LSM6DSO_ACC_Enable_6D_Orientation+0xe8>
      {
        return LSM6DSO_ERROR;
 8007c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca0:	e028      	b.n	8007cf4 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      }
      break;

    case LSM6DSO_INT2_PIN:
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3320      	adds	r3, #32
 8007ca6:	f107 020c 	add.w	r2, r7, #12
 8007caa:	2100      	movs	r1, #0
 8007cac:	4618      	mov	r0, r3
 8007cae:	f002 f919 	bl	8009ee4 <lsm6dso_pin_int2_route_get>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <LSM6DSO_ACC_Enable_6D_Orientation+0xba>
      {
        return LSM6DSO_ERROR;
 8007cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cbc:	e01a      	b.n	8007cf4 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      }

      val2.six_d = PROPERTY_ENABLE;
 8007cbe:	7b7b      	ldrb	r3, [r7, #13]
 8007cc0:	f043 0302 	orr.w	r3, r3, #2
 8007cc4:	737b      	strb	r3, [r7, #13]

      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f103 0020 	add.w	r0, r3, #32
 8007ccc:	f107 030c 	add.w	r3, r7, #12
 8007cd0:	cb0c      	ldmia	r3, {r2, r3}
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	f001 fd94 	bl	8009800 <lsm6dso_pin_int2_route_set>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d008      	beq.n	8007cf0 <LSM6DSO_ACC_Enable_6D_Orientation+0xec>
      {
        return LSM6DSO_ERROR;
 8007cde:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce2:	e007      	b.n	8007cf4 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      }
      break;

    default:
      ret = LSM6DSO_ERROR;
 8007ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce8:	61fb      	str	r3, [r7, #28]
      break;
 8007cea:	e002      	b.n	8007cf2 <LSM6DSO_ACC_Enable_6D_Orientation+0xee>
      break;
 8007cec:	bf00      	nop
 8007cee:	e000      	b.n	8007cf2 <LSM6DSO_ACC_Enable_6D_Orientation+0xee>
      break;
 8007cf0:	bf00      	nop
  }

  return ret;
 8007cf2:	69fb      	ldr	r3, [r7, #28]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3720      	adds	r7, #32
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	43d08000 	.word	0x43d08000

08007d00 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007d0a:	4937      	ldr	r1, [pc, #220]	@ (8007de8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>)
 8007d0c:	6838      	ldr	r0, [r7, #0]
 8007d0e:	f7f9 f9d1 	bl	80010b4 <__aeabi_fcmple>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x1c>
 8007d18:	230b      	movs	r3, #11
 8007d1a:	e051      	b.n	8007dc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d1c:	4933      	ldr	r1, [pc, #204]	@ (8007dec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xec>)
 8007d1e:	6838      	ldr	r0, [r7, #0]
 8007d20:	f7f9 f9c8 	bl	80010b4 <__aeabi_fcmple>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x2e>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e048      	b.n	8007dc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d2e:	4930      	ldr	r1, [pc, #192]	@ (8007df0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf0>)
 8007d30:	6838      	ldr	r0, [r7, #0]
 8007d32:	f7f9 f9bf 	bl	80010b4 <__aeabi_fcmple>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d001      	beq.n	8007d40 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x40>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e03f      	b.n	8007dc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d40:	492c      	ldr	r1, [pc, #176]	@ (8007df4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf4>)
 8007d42:	6838      	ldr	r0, [r7, #0]
 8007d44:	f7f9 f9b6 	bl	80010b4 <__aeabi_fcmple>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x52>
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e036      	b.n	8007dc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d52:	4929      	ldr	r1, [pc, #164]	@ (8007df8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf8>)
 8007d54:	6838      	ldr	r0, [r7, #0]
 8007d56:	f7f9 f9ad 	bl	80010b4 <__aeabi_fcmple>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8007d60:	2304      	movs	r3, #4
 8007d62:	e02d      	b.n	8007dc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d64:	4925      	ldr	r1, [pc, #148]	@ (8007dfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xfc>)
 8007d66:	6838      	ldr	r0, [r7, #0]
 8007d68:	f7f9 f9a4 	bl	80010b4 <__aeabi_fcmple>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x76>
 8007d72:	2305      	movs	r3, #5
 8007d74:	e024      	b.n	8007dc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d76:	4922      	ldr	r1, [pc, #136]	@ (8007e00 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x100>)
 8007d78:	6838      	ldr	r0, [r7, #0]
 8007d7a:	f7f9 f99b 	bl	80010b4 <__aeabi_fcmple>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x88>
 8007d84:	2306      	movs	r3, #6
 8007d86:	e01b      	b.n	8007dc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d88:	491e      	ldr	r1, [pc, #120]	@ (8007e04 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x104>)
 8007d8a:	6838      	ldr	r0, [r7, #0]
 8007d8c:	f7f9 f992 	bl	80010b4 <__aeabi_fcmple>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x9a>
 8007d96:	2307      	movs	r3, #7
 8007d98:	e012      	b.n	8007dc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007d9a:	491b      	ldr	r1, [pc, #108]	@ (8007e08 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>)
 8007d9c:	6838      	ldr	r0, [r7, #0]
 8007d9e:	f7f9 f989 	bl	80010b4 <__aeabi_fcmple>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8007da8:	2308      	movs	r3, #8
 8007daa:	e009      	b.n	8007dc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007dac:	4917      	ldr	r1, [pc, #92]	@ (8007e0c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x10c>)
 8007dae:	6838      	ldr	r0, [r7, #0]
 8007db0:	f7f9 f980 	bl	80010b4 <__aeabi_fcmple>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbe>
 8007dba:	2309      	movs	r3, #9
 8007dbc:	e000      	b.n	8007dc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007dbe:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8007dc0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	3320      	adds	r3, #32
 8007dc6:	7bfa      	ldrb	r2, [r7, #15]
 8007dc8:	4611      	mov	r1, r2
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 fa4e 	bl	800826c <lsm6dso_xl_data_rate_set>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xdc>
  {
    return LSM6DSO_ERROR;
 8007dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dda:	e000      	b.n	8007dde <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xde>
  }

  return LSM6DSO_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	3fcccccd 	.word	0x3fcccccd
 8007dec:	41480000 	.word	0x41480000
 8007df0:	41d00000 	.word	0x41d00000
 8007df4:	42500000 	.word	0x42500000
 8007df8:	42d00000 	.word	0x42d00000
 8007dfc:	43500000 	.word	0x43500000
 8007e00:	43d08000 	.word	0x43d08000
 8007e04:	44504000 	.word	0x44504000
 8007e08:	44d06000 	.word	0x44d06000
 8007e0c:	45505000 	.word	0x45505000

08007e10 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007e1a:	4931      	ldr	r1, [pc, #196]	@ (8007ee0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8007e1c:	6838      	ldr	r0, [r7, #0]
 8007e1e:	f7f9 f949 	bl	80010b4 <__aeabi_fcmple>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x1c>
 8007e28:	230b      	movs	r3, #11
 8007e2a:	e051      	b.n	8007ed0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e2c:	492d      	ldr	r1, [pc, #180]	@ (8007ee4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8007e2e:	6838      	ldr	r0, [r7, #0]
 8007e30:	f7f9 f940 	bl	80010b4 <__aeabi_fcmple>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e048      	b.n	8007ed0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e3e:	492a      	ldr	r1, [pc, #168]	@ (8007ee8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8007e40:	6838      	ldr	r0, [r7, #0]
 8007e42:	f7f9 f937 	bl	80010b4 <__aeabi_fcmple>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x40>
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	e03f      	b.n	8007ed0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e50:	4926      	ldr	r1, [pc, #152]	@ (8007eec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 8007e52:	6838      	ldr	r0, [r7, #0]
 8007e54:	f7f9 f92e 	bl	80010b4 <__aeabi_fcmple>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x52>
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e036      	b.n	8007ed0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e62:	4923      	ldr	r1, [pc, #140]	@ (8007ef0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 8007e64:	6838      	ldr	r0, [r7, #0]
 8007e66:	f7f9 f925 	bl	80010b4 <__aeabi_fcmple>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007e70:	2304      	movs	r3, #4
 8007e72:	e02d      	b.n	8007ed0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e74:	491f      	ldr	r1, [pc, #124]	@ (8007ef4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 8007e76:	6838      	ldr	r0, [r7, #0]
 8007e78:	f7f9 f91c 	bl	80010b4 <__aeabi_fcmple>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x76>
 8007e82:	2305      	movs	r3, #5
 8007e84:	e024      	b.n	8007ed0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e86:	491c      	ldr	r1, [pc, #112]	@ (8007ef8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>)
 8007e88:	6838      	ldr	r0, [r7, #0]
 8007e8a:	f7f9 f913 	bl	80010b4 <__aeabi_fcmple>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x88>
 8007e94:	2306      	movs	r3, #6
 8007e96:	e01b      	b.n	8007ed0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007e98:	4918      	ldr	r1, [pc, #96]	@ (8007efc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8007e9a:	6838      	ldr	r0, [r7, #0]
 8007e9c:	f7f9 f90a 	bl	80010b4 <__aeabi_fcmple>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8007ea6:	2307      	movs	r3, #7
 8007ea8:	e012      	b.n	8007ed0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007eaa:	4915      	ldr	r1, [pc, #84]	@ (8007f00 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8007eac:	6838      	ldr	r0, [r7, #0]
 8007eae:	f7f9 f901 	bl	80010b4 <__aeabi_fcmple>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8007eb8:	2308      	movs	r3, #8
 8007eba:	e009      	b.n	8007ed0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007ebc:	4911      	ldr	r1, [pc, #68]	@ (8007f04 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8007ebe:	6838      	ldr	r0, [r7, #0]
 8007ec0:	f7f9 f8f8 	bl	80010b4 <__aeabi_fcmple>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8007eca:	2309      	movs	r3, #9
 8007ecc:	e000      	b.n	8007ed0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007ece:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	3fcccccd 	.word	0x3fcccccd
 8007ee4:	41480000 	.word	0x41480000
 8007ee8:	41d00000 	.word	0x41d00000
 8007eec:	42500000 	.word	0x42500000
 8007ef0:	42d00000 	.word	0x42d00000
 8007ef4:	43500000 	.word	0x43500000
 8007ef8:	43d08000 	.word	0x43d08000
 8007efc:	44504000 	.word	0x44504000
 8007f00:	44d06000 	.word	0x44d06000
 8007f04:	45505000 	.word	0x45505000

08007f08 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007f12:	4932      	ldr	r1, [pc, #200]	@ (8007fdc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>)
 8007f14:	6838      	ldr	r0, [r7, #0]
 8007f16:	f7f9 f8cd 	bl	80010b4 <__aeabi_fcmple>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x1c>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e048      	b.n	8007fb6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007f24:	492e      	ldr	r1, [pc, #184]	@ (8007fe0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd8>)
 8007f26:	6838      	ldr	r0, [r7, #0]
 8007f28:	f7f9 f8c4 	bl	80010b4 <__aeabi_fcmple>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x2e>
 8007f32:	2302      	movs	r3, #2
 8007f34:	e03f      	b.n	8007fb6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007f36:	492b      	ldr	r1, [pc, #172]	@ (8007fe4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xdc>)
 8007f38:	6838      	ldr	r0, [r7, #0]
 8007f3a:	f7f9 f8bb 	bl	80010b4 <__aeabi_fcmple>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x40>
 8007f44:	2303      	movs	r3, #3
 8007f46:	e036      	b.n	8007fb6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007f48:	4927      	ldr	r1, [pc, #156]	@ (8007fe8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe0>)
 8007f4a:	6838      	ldr	r0, [r7, #0]
 8007f4c:	f7f9 f8b2 	bl	80010b4 <__aeabi_fcmple>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x52>
 8007f56:	2304      	movs	r3, #4
 8007f58:	e02d      	b.n	8007fb6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007f5a:	4924      	ldr	r1, [pc, #144]	@ (8007fec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe4>)
 8007f5c:	6838      	ldr	r0, [r7, #0]
 8007f5e:	f7f9 f8a9 	bl	80010b4 <__aeabi_fcmple>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8007f68:	2305      	movs	r3, #5
 8007f6a:	e024      	b.n	8007fb6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007f6c:	4920      	ldr	r1, [pc, #128]	@ (8007ff0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe8>)
 8007f6e:	6838      	ldr	r0, [r7, #0]
 8007f70:	f7f9 f8a0 	bl	80010b4 <__aeabi_fcmple>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x76>
 8007f7a:	2306      	movs	r3, #6
 8007f7c:	e01b      	b.n	8007fb6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007f7e:	491d      	ldr	r1, [pc, #116]	@ (8007ff4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xec>)
 8007f80:	6838      	ldr	r0, [r7, #0]
 8007f82:	f7f9 f897 	bl	80010b4 <__aeabi_fcmple>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x88>
 8007f8c:	2307      	movs	r3, #7
 8007f8e:	e012      	b.n	8007fb6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007f90:	4919      	ldr	r1, [pc, #100]	@ (8007ff8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>)
 8007f92:	6838      	ldr	r0, [r7, #0]
 8007f94:	f7f9 f88e 	bl	80010b4 <__aeabi_fcmple>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9a>
 8007f9e:	2308      	movs	r3, #8
 8007fa0:	e009      	b.n	8007fb6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007fa2:	4916      	ldr	r1, [pc, #88]	@ (8007ffc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf4>)
 8007fa4:	6838      	ldr	r0, [r7, #0]
 8007fa6:	f7f9 f885 	bl	80010b4 <__aeabi_fcmple>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xac>
 8007fb0:	2309      	movs	r3, #9
 8007fb2:	e000      	b.n	8007fb6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007fb4:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007fb6:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3320      	adds	r3, #32
 8007fbc:	7bfa      	ldrb	r2, [r7, #15]
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fb1d 	bl	8008600 <lsm6dso_gy_data_rate_set>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d002      	beq.n	8007fd2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xca>
  {
    return LSM6DSO_ERROR;
 8007fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd0:	e000      	b.n	8007fd4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xcc>
  }

  return LSM6DSO_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	41480000 	.word	0x41480000
 8007fe0:	41d00000 	.word	0x41d00000
 8007fe4:	42500000 	.word	0x42500000
 8007fe8:	42d00000 	.word	0x42d00000
 8007fec:	43500000 	.word	0x43500000
 8007ff0:	43d08000 	.word	0x43d08000
 8007ff4:	44504000 	.word	0x44504000
 8007ff8:	44d06000 	.word	0x44d06000
 8007ffc:	45505000 	.word	0x45505000

08008000 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800800a:	492d      	ldr	r1, [pc, #180]	@ (80080c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc0>)
 800800c:	6838      	ldr	r0, [r7, #0]
 800800e:	f7f9 f851 	bl	80010b4 <__aeabi_fcmple>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x1c>
 8008018:	2301      	movs	r3, #1
 800801a:	e048      	b.n	80080ae <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 800801c:	4929      	ldr	r1, [pc, #164]	@ (80080c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc4>)
 800801e:	6838      	ldr	r0, [r7, #0]
 8008020:	f7f9 f848 	bl	80010b4 <__aeabi_fcmple>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x2e>
 800802a:	2302      	movs	r3, #2
 800802c:	e03f      	b.n	80080ae <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 800802e:	4926      	ldr	r1, [pc, #152]	@ (80080c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc8>)
 8008030:	6838      	ldr	r0, [r7, #0]
 8008032:	f7f9 f83f 	bl	80010b4 <__aeabi_fcmple>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x40>
 800803c:	2303      	movs	r3, #3
 800803e:	e036      	b.n	80080ae <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008040:	4922      	ldr	r1, [pc, #136]	@ (80080cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xcc>)
 8008042:	6838      	ldr	r0, [r7, #0]
 8008044:	f7f9 f836 	bl	80010b4 <__aeabi_fcmple>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x52>
 800804e:	2304      	movs	r3, #4
 8008050:	e02d      	b.n	80080ae <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008052:	491f      	ldr	r1, [pc, #124]	@ (80080d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd0>)
 8008054:	6838      	ldr	r0, [r7, #0]
 8008056:	f7f9 f82d 	bl	80010b4 <__aeabi_fcmple>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8008060:	2305      	movs	r3, #5
 8008062:	e024      	b.n	80080ae <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008064:	491b      	ldr	r1, [pc, #108]	@ (80080d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>)
 8008066:	6838      	ldr	r0, [r7, #0]
 8008068:	f7f9 f824 	bl	80010b4 <__aeabi_fcmple>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x76>
 8008072:	2306      	movs	r3, #6
 8008074:	e01b      	b.n	80080ae <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008076:	4918      	ldr	r1, [pc, #96]	@ (80080d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd8>)
 8008078:	6838      	ldr	r0, [r7, #0]
 800807a:	f7f9 f81b 	bl	80010b4 <__aeabi_fcmple>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8008084:	2307      	movs	r3, #7
 8008086:	e012      	b.n	80080ae <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8008088:	4914      	ldr	r1, [pc, #80]	@ (80080dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xdc>)
 800808a:	6838      	ldr	r0, [r7, #0]
 800808c:	f7f9 f812 	bl	80010b4 <__aeabi_fcmple>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9a>
 8008096:	2308      	movs	r3, #8
 8008098:	e009      	b.n	80080ae <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 800809a:	4911      	ldr	r1, [pc, #68]	@ (80080e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe0>)
 800809c:	6838      	ldr	r0, [r7, #0]
 800809e:	f7f9 f809 	bl	80010b4 <__aeabi_fcmple>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xac>
 80080a8:	2309      	movs	r3, #9
 80080aa:	e000      	b.n	80080ae <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 80080ac:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	41480000 	.word	0x41480000
 80080c4:	41d00000 	.word	0x41d00000
 80080c8:	42500000 	.word	0x42500000
 80080cc:	42d00000 	.word	0x42d00000
 80080d0:	43500000 	.word	0x43500000
 80080d4:	43d08000 	.word	0x43d08000
 80080d8:	44504000 	.word	0x44504000
 80080dc:	44d06000 	.word	0x44d06000
 80080e0:	45505000 	.word	0x45505000

080080e4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80080e4:	b590      	push	{r4, r7, lr}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	607a      	str	r2, [r7, #4]
 80080ee:	461a      	mov	r2, r3
 80080f0:	460b      	mov	r3, r1
 80080f2:	72fb      	strb	r3, [r7, #11]
 80080f4:	4613      	mov	r3, r2
 80080f6:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	695c      	ldr	r4, [r3, #20]
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	7b1b      	ldrb	r3, [r3, #12]
 8008104:	4618      	mov	r0, r3
 8008106:	7afb      	ldrb	r3, [r7, #11]
 8008108:	b299      	uxth	r1, r3
 800810a:	893b      	ldrh	r3, [r7, #8]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	47a0      	blx	r4
 8008110:	4603      	mov	r3, r0
}
 8008112:	4618      	mov	r0, r3
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	bd90      	pop	{r4, r7, pc}

0800811a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800811a:	b590      	push	{r4, r7, lr}
 800811c:	b087      	sub	sp, #28
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	461a      	mov	r2, r3
 8008126:	460b      	mov	r3, r1
 8008128:	72fb      	strb	r3, [r7, #11]
 800812a:	4613      	mov	r3, r2
 800812c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	691c      	ldr	r4, [r3, #16]
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	7b1b      	ldrb	r3, [r3, #12]
 800813a:	4618      	mov	r0, r3
 800813c:	7afb      	ldrb	r3, [r7, #11]
 800813e:	b299      	uxth	r1, r3
 8008140:	893b      	ldrh	r3, [r7, #8]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	47a0      	blx	r4
 8008146:	4603      	mov	r3, r0
}
 8008148:	4618      	mov	r0, r3
 800814a:	371c      	adds	r7, #28
 800814c:	46bd      	mov	sp, r7
 800814e:	bd90      	pop	{r4, r7, pc}

08008150 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8008150:	b590      	push	{r4, r7, lr}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	607a      	str	r2, [r7, #4]
 800815a:	461a      	mov	r2, r3
 800815c:	460b      	mov	r3, r1
 800815e:	72fb      	strb	r3, [r7, #11]
 8008160:	4613      	mov	r3, r2
 8008162:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	685c      	ldr	r4, [r3, #4]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	68d8      	ldr	r0, [r3, #12]
 800816c:	893b      	ldrh	r3, [r7, #8]
 800816e:	7af9      	ldrb	r1, [r7, #11]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	47a0      	blx	r4
 8008174:	6178      	str	r0, [r7, #20]

  return ret;
 8008176:	697b      	ldr	r3, [r7, #20]
}
 8008178:	4618      	mov	r0, r3
 800817a:	371c      	adds	r7, #28
 800817c:	46bd      	mov	sp, r7
 800817e:	bd90      	pop	{r4, r7, pc}

08008180 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8008180:	b590      	push	{r4, r7, lr}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	607a      	str	r2, [r7, #4]
 800818a:	461a      	mov	r2, r3
 800818c:	460b      	mov	r3, r1
 800818e:	72fb      	strb	r3, [r7, #11]
 8008190:	4613      	mov	r3, r2
 8008192:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681c      	ldr	r4, [r3, #0]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	68d8      	ldr	r0, [r3, #12]
 800819c:	893b      	ldrh	r3, [r7, #8]
 800819e:	7af9      	ldrb	r1, [r7, #11]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	47a0      	blx	r4
 80081a4:	6178      	str	r0, [r7, #20]

  return ret;
 80081a6:	697b      	ldr	r3, [r7, #20]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	371c      	adds	r7, #28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd90      	pop	{r4, r7, pc}

080081b0 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	460b      	mov	r3, r1
 80081ba:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80081bc:	f107 0208 	add.w	r2, r7, #8
 80081c0:	2301      	movs	r3, #1
 80081c2:	2110      	movs	r1, #16
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff ffc3 	bl	8008150 <lsm6dso_read_reg>
 80081ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10f      	bne.n	80081f2 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	f003 0303 	and.w	r3, r3, #3
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	7a3b      	ldrb	r3, [r7, #8]
 80081dc:	f362 0383 	bfi	r3, r2, #2, #2
 80081e0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80081e2:	f107 0208 	add.w	r2, r7, #8
 80081e6:	2301      	movs	r3, #1
 80081e8:	2110      	movs	r1, #16
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7ff ffc8 	bl	8008180 <lsm6dso_write_reg>
 80081f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80081f2:	68fb      	ldr	r3, [r7, #12]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008206:	f107 0208 	add.w	r2, r7, #8
 800820a:	2301      	movs	r3, #1
 800820c:	2110      	movs	r1, #16
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7ff ff9e 	bl	8008150 <lsm6dso_read_reg>
 8008214:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8008216:	7a3b      	ldrb	r3, [r7, #8]
 8008218:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b03      	cmp	r3, #3
 8008220:	d81a      	bhi.n	8008258 <lsm6dso_xl_full_scale_get+0x5c>
 8008222:	a201      	add	r2, pc, #4	@ (adr r2, 8008228 <lsm6dso_xl_full_scale_get+0x2c>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	08008239 	.word	0x08008239
 800822c:	08008241 	.word	0x08008241
 8008230:	08008249 	.word	0x08008249
 8008234:	08008251 	.word	0x08008251
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2200      	movs	r2, #0
 800823c:	701a      	strb	r2, [r3, #0]
      break;
 800823e:	e00f      	b.n	8008260 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2201      	movs	r2, #1
 8008244:	701a      	strb	r2, [r3, #0]
      break;
 8008246:	e00b      	b.n	8008260 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2202      	movs	r2, #2
 800824c:	701a      	strb	r2, [r3, #0]
      break;
 800824e:	e007      	b.n	8008260 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	2203      	movs	r2, #3
 8008254:	701a      	strb	r2, [r3, #0]
      break;
 8008256:	e003      	b.n	8008260 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
      break;
 800825e:	bf00      	nop
  }

  return ret;
 8008260:	68fb      	ldr	r3, [r7, #12]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop

0800826c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 800827c:	f107 030c 	add.w	r3, r7, #12
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fcb6 	bl	8008bf4 <lsm6dso_fsm_enable_get>
 8008288:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <lsm6dso_xl_data_rate_set+0x28>
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	e0e0      	b.n	8008456 <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008294:	7b3b      	ldrb	r3, [r7, #12]
 8008296:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800829a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 800829c:	7b3b      	ldrb	r3, [r7, #12]
 800829e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80082a2:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80082a4:	4313      	orrs	r3, r2
 80082a6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80082a8:	7b3b      	ldrb	r3, [r7, #12]
 80082aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80082ae:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80082b0:	4313      	orrs	r3, r2
 80082b2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80082b4:	7b3b      	ldrb	r3, [r7, #12]
 80082b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80082ba:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80082bc:	4313      	orrs	r3, r2
 80082be:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80082c0:	7b3b      	ldrb	r3, [r7, #12]
 80082c2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80082c6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80082c8:	4313      	orrs	r3, r2
 80082ca:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80082cc:	7b3b      	ldrb	r3, [r7, #12]
 80082ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80082d2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80082d4:	4313      	orrs	r3, r2
 80082d6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80082d8:	7b3b      	ldrb	r3, [r7, #12]
 80082da:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80082de:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80082e0:	4313      	orrs	r3, r2
 80082e2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80082e4:	7b3b      	ldrb	r3, [r7, #12]
 80082e6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80082ea:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80082ec:	4313      	orrs	r3, r2
 80082ee:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80082f0:	7b7b      	ldrb	r3, [r7, #13]
 80082f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80082f6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80082f8:	4313      	orrs	r3, r2
 80082fa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80082fc:	7b7b      	ldrb	r3, [r7, #13]
 80082fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008302:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8008304:	4313      	orrs	r3, r2
 8008306:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8008308:	7b7b      	ldrb	r3, [r7, #13]
 800830a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800830e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8008310:	4313      	orrs	r3, r2
 8008312:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8008314:	7b7b      	ldrb	r3, [r7, #13]
 8008316:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800831a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800831c:	4313      	orrs	r3, r2
 800831e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8008320:	7b7b      	ldrb	r3, [r7, #13]
 8008322:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008326:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8008328:	4313      	orrs	r3, r2
 800832a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800832c:	7b7b      	ldrb	r3, [r7, #13]
 800832e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008332:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8008334:	4313      	orrs	r3, r2
 8008336:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8008338:	7b7b      	ldrb	r3, [r7, #13]
 800833a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800833e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8008340:	4313      	orrs	r3, r2
 8008342:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8008344:	7b7b      	ldrb	r3, [r7, #13]
 8008346:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800834a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800834c:	4313      	orrs	r3, r2
 800834e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008350:	2b01      	cmp	r3, #1
 8008352:	d164      	bne.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8008354:	f107 030b 	add.w	r3, r7, #11
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fc6c 	bl	8008c38 <lsm6dso_fsm_data_rate_get>
 8008360:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <lsm6dso_xl_data_rate_set+0x100>
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	e074      	b.n	8008456 <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 800836c:	7afb      	ldrb	r3, [r7, #11]
 800836e:	2b03      	cmp	r3, #3
 8008370:	d852      	bhi.n	8008418 <lsm6dso_xl_data_rate_set+0x1ac>
 8008372:	a201      	add	r2, pc, #4	@ (adr r2, 8008378 <lsm6dso_xl_data_rate_set+0x10c>)
 8008374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008378:	08008389 	.word	0x08008389
 800837c:	0800839b 	.word	0x0800839b
 8008380:	080083b9 	.word	0x080083b9
 8008384:	080083e3 	.word	0x080083e3
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d102      	bne.n	8008394 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 800838e:	2301      	movs	r3, #1
 8008390:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8008392:	e044      	b.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	75fb      	strb	r3, [r7, #23]
        break;
 8008398:	e041      	b.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80083a0:	2302      	movs	r3, #2
 80083a2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80083a4:	e03b      	b.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80083a6:	78fb      	ldrb	r3, [r7, #3]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d102      	bne.n	80083b2 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80083ac:	2302      	movs	r3, #2
 80083ae:	75fb      	strb	r3, [r7, #23]
        break;
 80083b0:	e035      	b.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80083b2:	78fb      	ldrb	r3, [r7, #3]
 80083b4:	75fb      	strb	r3, [r7, #23]
        break;
 80083b6:	e032      	b.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80083b8:	78fb      	ldrb	r3, [r7, #3]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d102      	bne.n	80083c4 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80083be:	2303      	movs	r3, #3
 80083c0:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80083c2:	e02c      	b.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d102      	bne.n	80083d0 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80083ca:	2303      	movs	r3, #3
 80083cc:	75fb      	strb	r3, [r7, #23]
        break;
 80083ce:	e026      	b.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d102      	bne.n	80083dc <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80083d6:	2303      	movs	r3, #3
 80083d8:	75fb      	strb	r3, [r7, #23]
        break;
 80083da:	e020      	b.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80083dc:	78fb      	ldrb	r3, [r7, #3]
 80083de:	75fb      	strb	r3, [r7, #23]
        break;
 80083e0:	e01d      	b.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d102      	bne.n	80083ee <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80083e8:	2304      	movs	r3, #4
 80083ea:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80083ec:	e017      	b.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80083ee:	78fb      	ldrb	r3, [r7, #3]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d102      	bne.n	80083fa <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80083f4:	2304      	movs	r3, #4
 80083f6:	75fb      	strb	r3, [r7, #23]
        break;
 80083f8:	e011      	b.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d102      	bne.n	8008406 <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8008400:	2304      	movs	r3, #4
 8008402:	75fb      	strb	r3, [r7, #23]
        break;
 8008404:	e00b      	b.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8008406:	78fb      	ldrb	r3, [r7, #3]
 8008408:	2b03      	cmp	r3, #3
 800840a:	d102      	bne.n	8008412 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800840c:	2304      	movs	r3, #4
 800840e:	75fb      	strb	r3, [r7, #23]
        break;
 8008410:	e005      	b.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	75fb      	strb	r3, [r7, #23]
        break;
 8008416:	e002      	b.n	800841e <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8008418:	78fb      	ldrb	r3, [r7, #3]
 800841a:	75fb      	strb	r3, [r7, #23]
        break;
 800841c:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800841e:	f107 0208 	add.w	r2, r7, #8
 8008422:	2301      	movs	r3, #1
 8008424:	2110      	movs	r1, #16
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7ff fe92 	bl	8008150 <lsm6dso_read_reg>
 800842c:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	f003 030f 	and.w	r3, r3, #15
 8008434:	b2da      	uxtb	r2, r3
 8008436:	7a3b      	ldrb	r3, [r7, #8]
 8008438:	f362 1307 	bfi	r3, r2, #4, #4
 800843c:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800843e:	f107 0208 	add.w	r2, r7, #8
 8008442:	2301      	movs	r3, #1
 8008444:	2110      	movs	r1, #16
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7ff fe9a 	bl	8008180 <lsm6dso_write_reg>
 800844c:	4602      	mov	r2, r0
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	4413      	add	r3, r2
 8008452:	613b      	str	r3, [r7, #16]

  return ret;
 8008454:	693b      	ldr	r3, [r7, #16]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop

08008460 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800846a:	f107 0208 	add.w	r2, r7, #8
 800846e:	2301      	movs	r3, #1
 8008470:	2110      	movs	r1, #16
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7ff fe6c 	bl	8008150 <lsm6dso_read_reg>
 8008478:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 800847a:	7a3b      	ldrb	r3, [r7, #8]
 800847c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b0b      	cmp	r3, #11
 8008484:	d84a      	bhi.n	800851c <lsm6dso_xl_data_rate_get+0xbc>
 8008486:	a201      	add	r2, pc, #4	@ (adr r2, 800848c <lsm6dso_xl_data_rate_get+0x2c>)
 8008488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848c:	080084bd 	.word	0x080084bd
 8008490:	080084c5 	.word	0x080084c5
 8008494:	080084cd 	.word	0x080084cd
 8008498:	080084d5 	.word	0x080084d5
 800849c:	080084dd 	.word	0x080084dd
 80084a0:	080084e5 	.word	0x080084e5
 80084a4:	080084ed 	.word	0x080084ed
 80084a8:	080084f5 	.word	0x080084f5
 80084ac:	080084fd 	.word	0x080084fd
 80084b0:	08008505 	.word	0x08008505
 80084b4:	0800850d 	.word	0x0800850d
 80084b8:	08008515 	.word	0x08008515
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2200      	movs	r2, #0
 80084c0:	701a      	strb	r2, [r3, #0]
      break;
 80084c2:	e02f      	b.n	8008524 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2201      	movs	r2, #1
 80084c8:	701a      	strb	r2, [r3, #0]
      break;
 80084ca:	e02b      	b.n	8008524 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	2202      	movs	r2, #2
 80084d0:	701a      	strb	r2, [r3, #0]
      break;
 80084d2:	e027      	b.n	8008524 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	2203      	movs	r2, #3
 80084d8:	701a      	strb	r2, [r3, #0]
      break;
 80084da:	e023      	b.n	8008524 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2204      	movs	r2, #4
 80084e0:	701a      	strb	r2, [r3, #0]
      break;
 80084e2:	e01f      	b.n	8008524 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	2205      	movs	r2, #5
 80084e8:	701a      	strb	r2, [r3, #0]
      break;
 80084ea:	e01b      	b.n	8008524 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2206      	movs	r2, #6
 80084f0:	701a      	strb	r2, [r3, #0]
      break;
 80084f2:	e017      	b.n	8008524 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2207      	movs	r2, #7
 80084f8:	701a      	strb	r2, [r3, #0]
      break;
 80084fa:	e013      	b.n	8008524 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	2208      	movs	r2, #8
 8008500:	701a      	strb	r2, [r3, #0]
      break;
 8008502:	e00f      	b.n	8008524 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	2209      	movs	r2, #9
 8008508:	701a      	strb	r2, [r3, #0]
      break;
 800850a:	e00b      	b.n	8008524 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	220a      	movs	r2, #10
 8008510:	701a      	strb	r2, [r3, #0]
      break;
 8008512:	e007      	b.n	8008524 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	220b      	movs	r2, #11
 8008518:	701a      	strb	r2, [r3, #0]
      break;
 800851a:	e003      	b.n	8008524 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2200      	movs	r2, #0
 8008520:	701a      	strb	r2, [r3, #0]
      break;
 8008522:	bf00      	nop
  }

  return ret;
 8008524:	68fb      	ldr	r3, [r7, #12]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop

08008530 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800853c:	f107 0208 	add.w	r2, r7, #8
 8008540:	2301      	movs	r3, #1
 8008542:	2111      	movs	r1, #17
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7ff fe03 	bl	8008150 <lsm6dso_read_reg>
 800854a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10f      	bne.n	8008572 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8008552:	78fb      	ldrb	r3, [r7, #3]
 8008554:	f003 0307 	and.w	r3, r3, #7
 8008558:	b2da      	uxtb	r2, r3
 800855a:	7a3b      	ldrb	r3, [r7, #8]
 800855c:	f362 0343 	bfi	r3, r2, #1, #3
 8008560:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008562:	f107 0208 	add.w	r2, r7, #8
 8008566:	2301      	movs	r3, #1
 8008568:	2111      	movs	r1, #17
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff fe08 	bl	8008180 <lsm6dso_write_reg>
 8008570:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008572:	68fb      	ldr	r3, [r7, #12]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008586:	f107 0208 	add.w	r2, r7, #8
 800858a:	2301      	movs	r3, #1
 800858c:	2111      	movs	r1, #17
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff fdde 	bl	8008150 <lsm6dso_read_reg>
 8008594:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8008596:	7a3b      	ldrb	r3, [r7, #8]
 8008598:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b06      	cmp	r3, #6
 80085a0:	d824      	bhi.n	80085ec <lsm6dso_gy_full_scale_get+0x70>
 80085a2:	a201      	add	r2, pc, #4	@ (adr r2, 80085a8 <lsm6dso_gy_full_scale_get+0x2c>)
 80085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a8:	080085c5 	.word	0x080085c5
 80085ac:	080085cd 	.word	0x080085cd
 80085b0:	080085d5 	.word	0x080085d5
 80085b4:	080085ed 	.word	0x080085ed
 80085b8:	080085dd 	.word	0x080085dd
 80085bc:	080085ed 	.word	0x080085ed
 80085c0:	080085e5 	.word	0x080085e5
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2200      	movs	r2, #0
 80085c8:	701a      	strb	r2, [r3, #0]
      break;
 80085ca:	e013      	b.n	80085f4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2201      	movs	r2, #1
 80085d0:	701a      	strb	r2, [r3, #0]
      break;
 80085d2:	e00f      	b.n	80085f4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2202      	movs	r2, #2
 80085d8:	701a      	strb	r2, [r3, #0]
      break;
 80085da:	e00b      	b.n	80085f4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2204      	movs	r2, #4
 80085e0:	701a      	strb	r2, [r3, #0]
      break;
 80085e2:	e007      	b.n	80085f4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2206      	movs	r2, #6
 80085e8:	701a      	strb	r2, [r3, #0]
      break;
 80085ea:	e003      	b.n	80085f4 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2200      	movs	r2, #0
 80085f0:	701a      	strb	r2, [r3, #0]
      break;
 80085f2:	bf00      	nop
  }

  return ret;
 80085f4:	68fb      	ldr	r3, [r7, #12]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop

08008600 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8008610:	f107 030c 	add.w	r3, r7, #12
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 faec 	bl	8008bf4 <lsm6dso_fsm_enable_get>
 800861c:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <lsm6dso_gy_data_rate_set+0x28>
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	e0e0      	b.n	80087ea <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008628:	7b3b      	ldrb	r3, [r7, #12]
 800862a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800862e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8008630:	7b3b      	ldrb	r3, [r7, #12]
 8008632:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008636:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008638:	4313      	orrs	r3, r2
 800863a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800863c:	7b3b      	ldrb	r3, [r7, #12]
 800863e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008642:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8008644:	4313      	orrs	r3, r2
 8008646:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008648:	7b3b      	ldrb	r3, [r7, #12]
 800864a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800864e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8008650:	4313      	orrs	r3, r2
 8008652:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8008654:	7b3b      	ldrb	r3, [r7, #12]
 8008656:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800865a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800865c:	4313      	orrs	r3, r2
 800865e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8008660:	7b3b      	ldrb	r3, [r7, #12]
 8008662:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008666:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8008668:	4313      	orrs	r3, r2
 800866a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800866c:	7b3b      	ldrb	r3, [r7, #12]
 800866e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008672:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8008674:	4313      	orrs	r3, r2
 8008676:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8008678:	7b3b      	ldrb	r3, [r7, #12]
 800867a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800867e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8008680:	4313      	orrs	r3, r2
 8008682:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8008684:	7b7b      	ldrb	r3, [r7, #13]
 8008686:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800868a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800868c:	4313      	orrs	r3, r2
 800868e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8008690:	7b7b      	ldrb	r3, [r7, #13]
 8008692:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008696:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8008698:	4313      	orrs	r3, r2
 800869a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800869c:	7b7b      	ldrb	r3, [r7, #13]
 800869e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80086a2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80086a4:	4313      	orrs	r3, r2
 80086a6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80086a8:	7b7b      	ldrb	r3, [r7, #13]
 80086aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80086ae:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80086b0:	4313      	orrs	r3, r2
 80086b2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80086b4:	7b7b      	ldrb	r3, [r7, #13]
 80086b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80086ba:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80086bc:	4313      	orrs	r3, r2
 80086be:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80086c0:	7b7b      	ldrb	r3, [r7, #13]
 80086c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80086c6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80086c8:	4313      	orrs	r3, r2
 80086ca:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80086cc:	7b7b      	ldrb	r3, [r7, #13]
 80086ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80086d2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80086d4:	4313      	orrs	r3, r2
 80086d6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80086d8:	7b7b      	ldrb	r3, [r7, #13]
 80086da:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80086de:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80086e0:	4313      	orrs	r3, r2
 80086e2:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d164      	bne.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80086e8:	f107 030b 	add.w	r3, r7, #11
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 faa2 	bl	8008c38 <lsm6dso_fsm_data_rate_get>
 80086f4:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <lsm6dso_gy_data_rate_set+0x100>
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	e074      	b.n	80087ea <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8008700:	7afb      	ldrb	r3, [r7, #11]
 8008702:	2b03      	cmp	r3, #3
 8008704:	d852      	bhi.n	80087ac <lsm6dso_gy_data_rate_set+0x1ac>
 8008706:	a201      	add	r2, pc, #4	@ (adr r2, 800870c <lsm6dso_gy_data_rate_set+0x10c>)
 8008708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870c:	0800871d 	.word	0x0800871d
 8008710:	0800872f 	.word	0x0800872f
 8008714:	0800874d 	.word	0x0800874d
 8008718:	08008777 	.word	0x08008777
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d102      	bne.n	8008728 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8008722:	2301      	movs	r3, #1
 8008724:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8008726:	e044      	b.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	75fb      	strb	r3, [r7, #23]
        break;
 800872c:	e041      	b.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800872e:	78fb      	ldrb	r3, [r7, #3]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8008734:	2302      	movs	r3, #2
 8008736:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8008738:	e03b      	b.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800873a:	78fb      	ldrb	r3, [r7, #3]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d102      	bne.n	8008746 <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8008740:	2302      	movs	r3, #2
 8008742:	75fb      	strb	r3, [r7, #23]
        break;
 8008744:	e035      	b.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8008746:	78fb      	ldrb	r3, [r7, #3]
 8008748:	75fb      	strb	r3, [r7, #23]
        break;
 800874a:	e032      	b.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800874c:	78fb      	ldrb	r3, [r7, #3]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d102      	bne.n	8008758 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008752:	2303      	movs	r3, #3
 8008754:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8008756:	e02c      	b.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d102      	bne.n	8008764 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800875e:	2303      	movs	r3, #3
 8008760:	75fb      	strb	r3, [r7, #23]
        break;
 8008762:	e026      	b.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	2b02      	cmp	r3, #2
 8008768:	d102      	bne.n	8008770 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800876a:	2303      	movs	r3, #3
 800876c:	75fb      	strb	r3, [r7, #23]
        break;
 800876e:	e020      	b.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	75fb      	strb	r3, [r7, #23]
        break;
 8008774:	e01d      	b.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8008776:	78fb      	ldrb	r3, [r7, #3]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d102      	bne.n	8008782 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800877c:	2304      	movs	r3, #4
 800877e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8008780:	e017      	b.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d102      	bne.n	800878e <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008788:	2304      	movs	r3, #4
 800878a:	75fb      	strb	r3, [r7, #23]
        break;
 800878c:	e011      	b.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 800878e:	78fb      	ldrb	r3, [r7, #3]
 8008790:	2b02      	cmp	r3, #2
 8008792:	d102      	bne.n	800879a <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008794:	2304      	movs	r3, #4
 8008796:	75fb      	strb	r3, [r7, #23]
        break;
 8008798:	e00b      	b.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	2b03      	cmp	r3, #3
 800879e:	d102      	bne.n	80087a6 <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80087a0:	2304      	movs	r3, #4
 80087a2:	75fb      	strb	r3, [r7, #23]
        break;
 80087a4:	e005      	b.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	75fb      	strb	r3, [r7, #23]
        break;
 80087aa:	e002      	b.n	80087b2 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	75fb      	strb	r3, [r7, #23]
        break;
 80087b0:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80087b2:	f107 0208 	add.w	r2, r7, #8
 80087b6:	2301      	movs	r3, #1
 80087b8:	2111      	movs	r1, #17
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff fcc8 	bl	8008150 <lsm6dso_read_reg>
 80087c0:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	f003 030f 	and.w	r3, r3, #15
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	7a3b      	ldrb	r3, [r7, #8]
 80087cc:	f362 1307 	bfi	r3, r2, #4, #4
 80087d0:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80087d2:	f107 0208 	add.w	r2, r7, #8
 80087d6:	2301      	movs	r3, #1
 80087d8:	2111      	movs	r1, #17
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff fcd0 	bl	8008180 <lsm6dso_write_reg>
 80087e0:	4602      	mov	r2, r0
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	4413      	add	r3, r2
 80087e6:	613b      	str	r3, [r7, #16]

  return ret;
 80087e8:	693b      	ldr	r3, [r7, #16]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop

080087f4 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80087fe:	f107 0208 	add.w	r2, r7, #8
 8008802:	2301      	movs	r3, #1
 8008804:	2111      	movs	r1, #17
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7ff fca2 	bl	8008150 <lsm6dso_read_reg>
 800880c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 800880e:	7a3b      	ldrb	r3, [r7, #8]
 8008810:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b0a      	cmp	r3, #10
 8008818:	d844      	bhi.n	80088a4 <lsm6dso_gy_data_rate_get+0xb0>
 800881a:	a201      	add	r2, pc, #4	@ (adr r2, 8008820 <lsm6dso_gy_data_rate_get+0x2c>)
 800881c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008820:	0800884d 	.word	0x0800884d
 8008824:	08008855 	.word	0x08008855
 8008828:	0800885d 	.word	0x0800885d
 800882c:	08008865 	.word	0x08008865
 8008830:	0800886d 	.word	0x0800886d
 8008834:	08008875 	.word	0x08008875
 8008838:	0800887d 	.word	0x0800887d
 800883c:	08008885 	.word	0x08008885
 8008840:	0800888d 	.word	0x0800888d
 8008844:	08008895 	.word	0x08008895
 8008848:	0800889d 	.word	0x0800889d
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
      break;
 8008852:	e02b      	b.n	80088ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2201      	movs	r2, #1
 8008858:	701a      	strb	r2, [r3, #0]
      break;
 800885a:	e027      	b.n	80088ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	2202      	movs	r2, #2
 8008860:	701a      	strb	r2, [r3, #0]
      break;
 8008862:	e023      	b.n	80088ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2203      	movs	r2, #3
 8008868:	701a      	strb	r2, [r3, #0]
      break;
 800886a:	e01f      	b.n	80088ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	2204      	movs	r2, #4
 8008870:	701a      	strb	r2, [r3, #0]
      break;
 8008872:	e01b      	b.n	80088ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	2205      	movs	r2, #5
 8008878:	701a      	strb	r2, [r3, #0]
      break;
 800887a:	e017      	b.n	80088ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2206      	movs	r2, #6
 8008880:	701a      	strb	r2, [r3, #0]
      break;
 8008882:	e013      	b.n	80088ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	2207      	movs	r2, #7
 8008888:	701a      	strb	r2, [r3, #0]
      break;
 800888a:	e00f      	b.n	80088ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2208      	movs	r2, #8
 8008890:	701a      	strb	r2, [r3, #0]
      break;
 8008892:	e00b      	b.n	80088ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	2209      	movs	r2, #9
 8008898:	701a      	strb	r2, [r3, #0]
      break;
 800889a:	e007      	b.n	80088ac <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	220a      	movs	r2, #10
 80088a0:	701a      	strb	r2, [r3, #0]
      break;
 80088a2:	e003      	b.n	80088ac <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	2200      	movs	r2, #0
 80088a8:	701a      	strb	r2, [r3, #0]
      break;
 80088aa:	bf00      	nop
  }

  return ret;
 80088ac:	68fb      	ldr	r3, [r7, #12]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop

080088b8 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80088c4:	f107 0208 	add.w	r2, r7, #8
 80088c8:	2301      	movs	r3, #1
 80088ca:	2112      	movs	r1, #18
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff fc3f 	bl	8008150 <lsm6dso_read_reg>
 80088d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10f      	bne.n	80088fa <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80088da:	78fb      	ldrb	r3, [r7, #3]
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	7a3b      	ldrb	r3, [r7, #8]
 80088e4:	f362 1386 	bfi	r3, r2, #6, #1
 80088e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80088ea:	f107 0208 	add.w	r2, r7, #8
 80088ee:	2301      	movs	r3, #1
 80088f0:	2112      	movs	r1, #18
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7ff fc44 	bl	8008180 <lsm6dso_write_reg>
 80088f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80088fa:	68fb      	ldr	r3, [r7, #12]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800890e:	f107 020c 	add.w	r2, r7, #12
 8008912:	2306      	movs	r3, #6
 8008914:	2122      	movs	r1, #34	@ 0x22
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7ff fc1a 	bl	8008150 <lsm6dso_read_reg>
 800891c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800891e:	7b7b      	ldrb	r3, [r7, #13]
 8008920:	b21a      	sxth	r2, r3
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800892c:	b29b      	uxth	r3, r3
 800892e:	021b      	lsls	r3, r3, #8
 8008930:	b29b      	uxth	r3, r3
 8008932:	7b3a      	ldrb	r2, [r7, #12]
 8008934:	4413      	add	r3, r2
 8008936:	b29b      	uxth	r3, r3
 8008938:	b21a      	sxth	r2, r3
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800893e:	7bfa      	ldrb	r2, [r7, #15]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	3302      	adds	r3, #2
 8008944:	b212      	sxth	r2, r2
 8008946:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	3302      	adds	r3, #2
 800894c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008950:	b29b      	uxth	r3, r3
 8008952:	021b      	lsls	r3, r3, #8
 8008954:	b29b      	uxth	r3, r3
 8008956:	7bba      	ldrb	r2, [r7, #14]
 8008958:	4413      	add	r3, r2
 800895a:	b29a      	uxth	r2, r3
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	3302      	adds	r3, #2
 8008960:	b212      	sxth	r2, r2
 8008962:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008964:	7c7a      	ldrb	r2, [r7, #17]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	3304      	adds	r3, #4
 800896a:	b212      	sxth	r2, r2
 800896c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	3304      	adds	r3, #4
 8008972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008976:	b29b      	uxth	r3, r3
 8008978:	021b      	lsls	r3, r3, #8
 800897a:	b29b      	uxth	r3, r3
 800897c:	7c3a      	ldrb	r2, [r7, #16]
 800897e:	4413      	add	r3, r2
 8008980:	b29a      	uxth	r2, r3
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	3304      	adds	r3, #4
 8008986:	b212      	sxth	r2, r2
 8008988:	801a      	strh	r2, [r3, #0]

  return ret;
 800898a:	697b      	ldr	r3, [r7, #20]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3718      	adds	r7, #24
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 800899e:	f107 020c 	add.w	r2, r7, #12
 80089a2:	2306      	movs	r3, #6
 80089a4:	2128      	movs	r1, #40	@ 0x28
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7ff fbd2 	bl	8008150 <lsm6dso_read_reg>
 80089ac:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80089ae:	7b7b      	ldrb	r3, [r7, #13]
 80089b0:	b21a      	sxth	r2, r3
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089bc:	b29b      	uxth	r3, r3
 80089be:	021b      	lsls	r3, r3, #8
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	7b3a      	ldrb	r2, [r7, #12]
 80089c4:	4413      	add	r3, r2
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	b21a      	sxth	r2, r3
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80089ce:	7bfa      	ldrb	r2, [r7, #15]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	3302      	adds	r3, #2
 80089d4:	b212      	sxth	r2, r2
 80089d6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	3302      	adds	r3, #2
 80089dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	021b      	lsls	r3, r3, #8
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	7bba      	ldrb	r2, [r7, #14]
 80089e8:	4413      	add	r3, r2
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	3302      	adds	r3, #2
 80089f0:	b212      	sxth	r2, r2
 80089f2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80089f4:	7c7a      	ldrb	r2, [r7, #17]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	3304      	adds	r3, #4
 80089fa:	b212      	sxth	r2, r2
 80089fc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	3304      	adds	r3, #4
 8008a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	021b      	lsls	r3, r3, #8
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	7c3a      	ldrb	r2, [r7, #16]
 8008a0e:	4413      	add	r3, r2
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	3304      	adds	r3, #4
 8008a16:	b212      	sxth	r2, r2
 8008a18:	801a      	strh	r2, [r3, #0]

  return ret;
 8008a1a:	697b      	ldr	r3, [r7, #20]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3718      	adds	r7, #24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8008a30:	2300      	movs	r3, #0
 8008a32:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8008a34:	78fb      	ldrb	r3, [r7, #3]
 8008a36:	f003 0303 	and.w	r3, r3, #3
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	7a3b      	ldrb	r3, [r7, #8]
 8008a3e:	f362 1387 	bfi	r3, r2, #6, #2
 8008a42:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8008a44:	f107 0208 	add.w	r2, r7, #8
 8008a48:	2301      	movs	r3, #1
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff fb97 	bl	8008180 <lsm6dso_write_reg>
 8008a52:	60f8      	str	r0, [r7, #12]

  return ret;
 8008a54:	68fb      	ldr	r3, [r7, #12]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8008a68:	2301      	movs	r3, #1
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	210f      	movs	r1, #15
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff fb6e 	bl	8008150 <lsm6dso_read_reg>
 8008a74:	60f8      	str	r0, [r7, #12]

  return ret;
 8008a76:	68fb      	ldr	r3, [r7, #12]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008a8c:	f107 0208 	add.w	r2, r7, #8
 8008a90:	2301      	movs	r3, #1
 8008a92:	2112      	movs	r1, #18
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7ff fb5b 	bl	8008150 <lsm6dso_read_reg>
 8008a9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10f      	bne.n	8008ac2 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	7a3b      	ldrb	r3, [r7, #8]
 8008aac:	f362 0382 	bfi	r3, r2, #2, #1
 8008ab0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008ab2:	f107 0208 	add.w	r2, r7, #8
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	2112      	movs	r1, #18
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7ff fb60 	bl	8008180 <lsm6dso_write_reg>
 8008ac0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8008ad8:	f107 020c 	add.w	r2, r7, #12
 8008adc:	2301      	movs	r3, #1
 8008ade:	2118      	movs	r1, #24
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff fb35 	bl	8008150 <lsm6dso_read_reg>
 8008ae6:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	09db      	lsrs	r3, r3, #7
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	7b3b      	ldrb	r3, [r7, #12]
 8008af6:	f362 0341 	bfi	r3, r2, #1, #1
 8008afa:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8008afc:	f107 020c 	add.w	r2, r7, #12
 8008b00:	2301      	movs	r3, #1
 8008b02:	2118      	movs	r1, #24
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff fb3b 	bl	8008180 <lsm6dso_write_reg>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	4413      	add	r3, r2
 8008b10:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <lsm6dso_i3c_disable_set+0x50>
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	e01b      	b.n	8008b54 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8008b1c:	f107 0210 	add.w	r2, r7, #16
 8008b20:	2301      	movs	r3, #1
 8008b22:	2162      	movs	r1, #98	@ 0x62
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff fb13 	bl	8008150 <lsm6dso_read_reg>
 8008b2a:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	f003 0303 	and.w	r3, r3, #3
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	7c3b      	ldrb	r3, [r7, #16]
 8008b36:	f362 03c4 	bfi	r3, r2, #3, #2
 8008b3a:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8008b3c:	f107 0210 	add.w	r2, r7, #16
 8008b40:	2301      	movs	r3, #1
 8008b42:	2162      	movs	r1, #98	@ 0x62
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7ff fb1b 	bl	8008180 <lsm6dso_write_reg>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	4413      	add	r3, r2
 8008b50:	617b      	str	r3, [r7, #20]

  return ret;
 8008b52:	697b      	ldr	r3, [r7, #20]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <lsm6dso_6d_threshold_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_6d_threshold_set(stmdev_ctx_t *ctx,
                                 lsm6dso_sixd_ths_t val)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  lsm6dso_tap_ths_6d_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t *)&reg, 1);
 8008b68:	f107 0208 	add.w	r2, r7, #8
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	2159      	movs	r1, #89	@ 0x59
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff faed 	bl	8008150 <lsm6dso_read_reg>
 8008b76:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10f      	bne.n	8008b9e <lsm6dso_6d_threshold_set+0x42>
  {
    reg.sixd_ths = (uint8_t)val;
 8008b7e:	78fb      	ldrb	r3, [r7, #3]
 8008b80:	f003 0303 	and.w	r3, r3, #3
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	7a3b      	ldrb	r3, [r7, #8]
 8008b88:	f362 1346 	bfi	r3, r2, #5, #2
 8008b8c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t *)&reg, 1);
 8008b8e:	f107 0208 	add.w	r2, r7, #8
 8008b92:	2301      	movs	r3, #1
 8008b94:	2159      	movs	r1, #89	@ 0x59
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff faf2 	bl	8008180 <lsm6dso_write_reg>
 8008b9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8008bb4:	f107 0208 	add.w	r2, r7, #8
 8008bb8:	2301      	movs	r3, #1
 8008bba:	210a      	movs	r1, #10
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff fac7 	bl	8008150 <lsm6dso_read_reg>
 8008bc2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10f      	bne.n	8008bea <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	f003 0307 	and.w	r3, r3, #7
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	7a3b      	ldrb	r3, [r7, #8]
 8008bd4:	f362 0302 	bfi	r3, r2, #0, #3
 8008bd8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8008bda:	f107 0208 	add.w	r2, r7, #8
 8008bde:	2301      	movs	r3, #1
 8008be0:	210a      	movs	r1, #10
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff facc 	bl	8008180 <lsm6dso_write_reg>
 8008be8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008bea:	68fb      	ldr	r3, [r7, #12]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8008bfe:	2102      	movs	r1, #2
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff ff0f 	bl	8008a24 <lsm6dso_mem_bank_set>
 8008c06:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8008c08:	2302      	movs	r3, #2
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	2146      	movs	r1, #70	@ 0x46
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff fa9e 	bl	8008150 <lsm6dso_read_reg>
 8008c14:	4602      	mov	r2, r0
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	4413      	add	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7ff ff00 	bl	8008a24 <lsm6dso_mem_bank_set>
 8008c24:	4602      	mov	r2, r0
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	4413      	add	r3, r2
 8008c2a:	60fb      	str	r3, [r7, #12]

  return ret;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
	...

08008c38 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8008c42:	2102      	movs	r1, #2
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7ff feed 	bl	8008a24 <lsm6dso_mem_bank_set>
 8008c4a:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <lsm6dso_fsm_data_rate_get+0x1e>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	e03a      	b.n	8008ccc <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8008c56:	f107 0208 	add.w	r2, r7, #8
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	215f      	movs	r1, #95	@ 0x5f
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7ff fa76 	bl	8008150 <lsm6dso_read_reg>
 8008c64:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d125      	bne.n	8008cb8 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8008c6c:	7a3b      	ldrb	r3, [r7, #8]
 8008c6e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d81b      	bhi.n	8008cb0 <lsm6dso_fsm_data_rate_get+0x78>
 8008c78:	a201      	add	r2, pc, #4	@ (adr r2, 8008c80 <lsm6dso_fsm_data_rate_get+0x48>)
 8008c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7e:	bf00      	nop
 8008c80:	08008c91 	.word	0x08008c91
 8008c84:	08008c99 	.word	0x08008c99
 8008c88:	08008ca1 	.word	0x08008ca1
 8008c8c:	08008ca9 	.word	0x08008ca9
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2200      	movs	r2, #0
 8008c94:	701a      	strb	r2, [r3, #0]
      break;
 8008c96:	e010      	b.n	8008cba <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	701a      	strb	r2, [r3, #0]
      break;
 8008c9e:	e00c      	b.n	8008cba <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	701a      	strb	r2, [r3, #0]
      break;
 8008ca6:	e008      	b.n	8008cba <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	2203      	movs	r2, #3
 8008cac:	701a      	strb	r2, [r3, #0]
      break;
 8008cae:	e004      	b.n	8008cba <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	701a      	strb	r2, [r3, #0]
      break;
 8008cb6:	e000      	b.n	8008cba <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8008cb8:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008cba:	2100      	movs	r1, #0
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff feb1 	bl	8008a24 <lsm6dso_mem_bank_set>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]

  return ret;
 8008cca:	68fb      	ldr	r3, [r7, #12]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <lsm6dso_pin_int1_route_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t val)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b090      	sub	sp, #64	@ 0x40
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	1d3b      	adds	r3, r7, #4
 8008cde:	e883 0006 	stmia.w	r3, {r1, r2}
  lsm6dso_pin_int2_route_t  pin_int2_route;
  lsm6dso_emb_func_int1_t   emb_func_int1;
  lsm6dso_fsm_int1_a_t      fsm_int1_a;
  lsm6dso_fsm_int1_b_t      fsm_int1_b;
  lsm6dso_int1_ctrl_t       int1_ctrl = {0};
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  /* INT1_CTRL */
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8008ce8:	793b      	ldrb	r3, [r7, #4]
 8008cea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008cf4:	f362 0300 	bfi	r3, r2, #0, #1
 8008cf8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 8008cfc:	793b      	ldrb	r3, [r7, #4]
 8008cfe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d08:	f362 0341 	bfi	r3, r2, #1, #1
 8008d0c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_boot      = val.boot;
 8008d10:	793b      	ldrb	r3, [r7, #4]
 8008d12:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d16:	b2da      	uxtb	r2, r3
 8008d18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d1c:	f362 0382 	bfi	r3, r2, #2, #1
 8008d20:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 8008d24:	793b      	ldrb	r3, [r7, #4]
 8008d26:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d30:	f362 03c3 	bfi	r3, r2, #3, #1
 8008d34:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 8008d38:	793b      	ldrb	r3, [r7, #4]
 8008d3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d44:	f362 1304 	bfi	r3, r2, #4, #1
 8008d48:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_full = val.fifo_full;
 8008d4c:	793b      	ldrb	r3, [r7, #4]
 8008d4e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d58:	f362 1345 	bfi	r3, r2, #5, #1
 8008d5c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 8008d60:	793b      	ldrb	r3, [r7, #4]
 8008d62:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d6c:	f362 1386 	bfi	r3, r2, #6, #1
 8008d70:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.den_drdy_flag  = val.den_flag;
 8008d74:	797b      	ldrb	r3, [r7, #5]
 8008d76:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d80:	f362 13c7 	bfi	r3, r2, #7, #1
 8008d84:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  ret = lsm6dso_write_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8008d88:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	210d      	movs	r1, #13
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f7ff f9f5 	bl	8008180 <lsm6dso_write_reg>
 8008d96:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <lsm6dso_pin_int1_route_set+0xce>
 8008d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008da0:	e33a      	b.n	8009418 <lsm6dso_pin_int1_route_set+0x744>

  /* DRDY for temperature and/or timestamp */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8008da2:	f107 0210 	add.w	r2, r7, #16
 8008da6:	2301      	movs	r3, #1
 8008da8:	2113      	movs	r1, #19
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7ff f9d0 	bl	8008150 <lsm6dso_read_reg>
 8008db0:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <lsm6dso_pin_int1_route_set+0xe8>
 8008db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dba:	e32d      	b.n	8009418 <lsm6dso_pin_int1_route_set+0x744>

  if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8008dbc:	793b      	ldrb	r3, [r7, #4]
 8008dbe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	797b      	ldrb	r3, [r7, #5]
 8008dc6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d004      	beq.n	8008dde <lsm6dso_pin_int1_route_set+0x10a>
  {
    ctrl4_c.int2_on_int1 = PROPERTY_ENABLE;
 8008dd4:	7c3b      	ldrb	r3, [r7, #16]
 8008dd6:	f043 0320 	orr.w	r3, r3, #32
 8008dda:	743b      	strb	r3, [r7, #16]
 8008ddc:	e003      	b.n	8008de6 <lsm6dso_pin_int1_route_set+0x112>
  }
  else
  {
    ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8008dde:	7c3b      	ldrb	r3, [r7, #16]
 8008de0:	f36f 1345 	bfc	r3, #5, #1
 8008de4:	743b      	strb	r3, [r7, #16]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8008de6:	f107 0210 	add.w	r2, r7, #16
 8008dea:	2301      	movs	r3, #1
 8008dec:	2113      	movs	r1, #19
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f7ff f9c6 	bl	8008180 <lsm6dso_write_reg>
 8008df4:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <lsm6dso_pin_int1_route_set+0x12c>
 8008dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dfe:	e30b      	b.n	8009418 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8008e00:	f107 0220 	add.w	r2, r7, #32
 8008e04:	2301      	movs	r3, #1
 8008e06:	210e      	movs	r1, #14
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f7ff f9a1 	bl	8008150 <lsm6dso_read_reg>
 8008e0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8008e10:	793b      	ldrb	r3, [r7, #4]
 8008e12:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e1c:	f362 0382 	bfi	r3, r2, #2, #1
 8008e20:	f887 3020 	strb.w	r3, [r7, #32]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8008e24:	f107 0220 	add.w	r2, r7, #32
 8008e28:	2301      	movs	r3, #1
 8008e2a:	210e      	movs	r1, #14
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f7ff f9a7 	bl	8008180 <lsm6dso_write_reg>
 8008e32:	4602      	mov	r2, r0
 8008e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e36:	4413      	add	r3, r2
 8008e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d001      	beq.n	8008e44 <lsm6dso_pin_int1_route_set+0x170>
 8008e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e42:	e2e9      	b.n	8009418 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8008e44:	f107 0218 	add.w	r2, r7, #24
 8008e48:	2301      	movs	r3, #1
 8008e4a:	215f      	movs	r1, #95	@ 0x5f
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f7ff f97f 	bl	8008150 <lsm6dso_read_reg>
 8008e52:	63f8      	str	r0, [r7, #60]	@ 0x3c
  md2_cfg.int2_timestamp = val.timestamp;
 8008e54:	797b      	ldrb	r3, [r7, #5]
 8008e56:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	7e3b      	ldrb	r3, [r7, #24]
 8008e5e:	f362 0300 	bfi	r3, r2, #0, #1
 8008e62:	763b      	strb	r3, [r7, #24]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8008e64:	f107 0218 	add.w	r2, r7, #24
 8008e68:	2301      	movs	r3, #1
 8008e6a:	215f      	movs	r1, #95	@ 0x5f
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f7ff f987 	bl	8008180 <lsm6dso_write_reg>
 8008e72:	4602      	mov	r2, r0
 8008e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e76:	4413      	add	r3, r2
 8008e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8008e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <lsm6dso_pin_int1_route_set+0x1b0>
 8008e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e82:	e2c9      	b.n	8009418 <lsm6dso_pin_int1_route_set+0x744>

  /* emmbedded and FSM events */
  emb_func_int1.not_used_01 = 0;
 8008e84:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008e88:	f36f 0302 	bfc	r3, #0, #3
 8008e8c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_step_detector = val.step_detector;
 8008e90:	79bb      	ldrb	r3, [r7, #6]
 8008e92:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008e9c:	f362 03c3 	bfi	r3, r2, #3, #1
 8008ea0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_tilt          = val.tilt;
 8008ea4:	79bb      	ldrb	r3, [r7, #6]
 8008ea6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008eaa:	b2da      	uxtb	r2, r3
 8008eac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008eb0:	f362 1304 	bfi	r3, r2, #4, #1
 8008eb4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 8008eb8:	79bb      	ldrb	r3, [r7, #6]
 8008eba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008ec4:	f362 1345 	bfi	r3, r2, #5, #1
 8008ec8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.not_used_02 = 0;
 8008ecc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008ed0:	f36f 1386 	bfc	r3, #6, #1
 8008ed4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 8008ed8:	79bb      	ldrb	r3, [r7, #6]
 8008eda:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008ee4:	f362 13c7 	bfi	r3, r2, #7, #1
 8008ee8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8008eec:	79bb      	ldrb	r3, [r7, #6]
 8008eee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008ef8:	f362 0300 	bfi	r3, r2, #0, #1
 8008efc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm2 = val.fsm2;
 8008f00:	79bb      	ldrb	r3, [r7, #6]
 8008f02:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f0c:	f362 0341 	bfi	r3, r2, #1, #1
 8008f10:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm3 = val.fsm3;
 8008f14:	79bb      	ldrb	r3, [r7, #6]
 8008f16:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008f1a:	b2da      	uxtb	r2, r3
 8008f1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f20:	f362 0382 	bfi	r3, r2, #2, #1
 8008f24:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm4 = val.fsm4;
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f34:	f362 03c3 	bfi	r3, r2, #3, #1
 8008f38:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm5 = val.fsm5;
 8008f3c:	79fb      	ldrb	r3, [r7, #7]
 8008f3e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f48:	f362 1304 	bfi	r3, r2, #4, #1
 8008f4c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm6 = val.fsm6;
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f5c:	f362 1345 	bfi	r3, r2, #5, #1
 8008f60:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm7 = val.fsm7;
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008f6a:	b2da      	uxtb	r2, r3
 8008f6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f70:	f362 1386 	bfi	r3, r2, #6, #1
 8008f74:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm8 = val.fsm8;
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f84:	f362 13c7 	bfi	r3, r2, #7, #1
 8008f88:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008f98:	f362 0300 	bfi	r3, r2, #0, #1
 8008f9c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm10 = val.fsm10;
 8008fa0:	79fb      	ldrb	r3, [r7, #7]
 8008fa2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fac:	f362 0341 	bfi	r3, r2, #1, #1
 8008fb0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm11 = val.fsm11;
 8008fb4:	79fb      	ldrb	r3, [r7, #7]
 8008fb6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fc0:	f362 0382 	bfi	r3, r2, #2, #1
 8008fc4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm12 = val.fsm12;
 8008fc8:	7a3b      	ldrb	r3, [r7, #8]
 8008fca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fd4:	f362 03c3 	bfi	r3, r2, #3, #1
 8008fd8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm13 = val.fsm13;
 8008fdc:	7a3b      	ldrb	r3, [r7, #8]
 8008fde:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fe8:	f362 1304 	bfi	r3, r2, #4, #1
 8008fec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm14 = val.fsm14;
 8008ff0:	7a3b      	ldrb	r3, [r7, #8]
 8008ff2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008ff6:	b2da      	uxtb	r2, r3
 8008ff8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008ffc:	f362 1345 	bfi	r3, r2, #5, #1
 8009000:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm15 = val.fsm15;
 8009004:	7a3b      	ldrb	r3, [r7, #8]
 8009006:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800900a:	b2da      	uxtb	r2, r3
 800900c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009010:	f362 1386 	bfi	r3, r2, #6, #1
 8009014:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm16 = val.fsm16;
 8009018:	7a3b      	ldrb	r3, [r7, #8]
 800901a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800901e:	b2da      	uxtb	r2, r3
 8009020:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009024:	f362 13c7 	bfi	r3, r2, #7, #1
 8009028:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800902c:	2102      	movs	r1, #2
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f7ff fcf8 	bl	8008a24 <lsm6dso_mem_bank_set>
 8009034:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8009036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <lsm6dso_pin_int1_route_set+0x36c>
 800903c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800903e:	e1eb      	b.n	8009418 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 8009040:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8009044:	2301      	movs	r3, #1
 8009046:	210a      	movs	r1, #10
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f7ff f899 	bl	8008180 <lsm6dso_write_reg>
 800904e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 8009050:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009054:	2301      	movs	r3, #1
 8009056:	210b      	movs	r1, #11
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f7ff f891 	bl	8008180 <lsm6dso_write_reg>
 800905e:	4602      	mov	r2, r0
 8009060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009062:	4413      	add	r3, r2
 8009064:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 8009066:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800906a:	2301      	movs	r3, #1
 800906c:	210c      	movs	r1, #12
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7ff f886 	bl	8008180 <lsm6dso_write_reg>
 8009074:	4602      	mov	r2, r0
 8009076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009078:	4413      	add	r3, r2
 800907a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800907c:	2100      	movs	r1, #0
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f7ff fcd0 	bl	8008a24 <lsm6dso_mem_bank_set>
 8009084:	4602      	mov	r2, r0
 8009086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009088:	4413      	add	r3, r2
 800908a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800908c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <lsm6dso_pin_int1_route_set+0x3c2>
 8009092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009094:	e1c0      	b.n	8009418 <lsm6dso_pin_int1_route_set+0x744>

  /* MD1_CFG */
  md1_cfg.int1_shub         = val.sh_endop;
 8009096:	797b      	ldrb	r3, [r7, #5]
 8009098:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800909c:	b2da      	uxtb	r2, r3
 800909e:	7d3b      	ldrb	r3, [r7, #20]
 80090a0:	f362 0300 	bfi	r3, r2, #0, #1
 80090a4:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_6d           = val.six_d;
 80090a6:	797b      	ldrb	r3, [r7, #5]
 80090a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	7d3b      	ldrb	r3, [r7, #20]
 80090b0:	f362 0382 	bfi	r3, r2, #2, #1
 80090b4:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_double_tap   = val.double_tap;
 80090b6:	797b      	ldrb	r3, [r7, #5]
 80090b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	7d3b      	ldrb	r3, [r7, #20]
 80090c0:	f362 03c3 	bfi	r3, r2, #3, #1
 80090c4:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_ff           = val.free_fall;
 80090c6:	797b      	ldrb	r3, [r7, #5]
 80090c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	7d3b      	ldrb	r3, [r7, #20]
 80090d0:	f362 1304 	bfi	r3, r2, #4, #1
 80090d4:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_wu           = val.wake_up;
 80090d6:	797b      	ldrb	r3, [r7, #5]
 80090d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	7d3b      	ldrb	r3, [r7, #20]
 80090e0:	f362 1345 	bfi	r3, r2, #5, #1
 80090e4:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_single_tap   = val.single_tap;
 80090e6:	797b      	ldrb	r3, [r7, #5]
 80090e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	7d3b      	ldrb	r3, [r7, #20]
 80090f0:	f362 1386 	bfi	r3, r2, #6, #1
 80090f4:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_sleep_change = val.sleep_change;
 80090f6:	79bb      	ldrb	r3, [r7, #6]
 80090f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	7d3b      	ldrb	r3, [r7, #20]
 8009100:	f362 13c7 	bfi	r3, r2, #7, #1
 8009104:	753b      	strb	r3, [r7, #20]

  if ((emb_func_int1.int1_fsm_lc
 8009106:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800910a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800910e:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_sig_mot
 8009110:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009114:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009118:	b2db      	uxtb	r3, r3
 800911a:	4313      	orrs	r3, r2
 800911c:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_step_detector
 800911e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009122:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009126:	b2db      	uxtb	r3, r3
 8009128:	4313      	orrs	r3, r2
 800912a:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_tilt
 800912c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009130:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009134:	b2db      	uxtb	r3, r3
 8009136:	4313      	orrs	r3, r2
 8009138:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm1
 800913a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800913e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009142:	b2db      	uxtb	r3, r3
 8009144:	4313      	orrs	r3, r2
 8009146:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm2
 8009148:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800914c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009150:	b2db      	uxtb	r3, r3
 8009152:	4313      	orrs	r3, r2
 8009154:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm3
 8009156:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800915a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800915e:	b2db      	uxtb	r3, r3
 8009160:	4313      	orrs	r3, r2
 8009162:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm4
 8009164:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009168:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800916c:	b2db      	uxtb	r3, r3
 800916e:	4313      	orrs	r3, r2
 8009170:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm5
 8009172:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009176:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800917a:	b2db      	uxtb	r3, r3
 800917c:	4313      	orrs	r3, r2
 800917e:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm6
 8009180:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009184:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009188:	b2db      	uxtb	r3, r3
 800918a:	4313      	orrs	r3, r2
 800918c:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm7
 800918e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009192:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009196:	b2db      	uxtb	r3, r3
 8009198:	4313      	orrs	r3, r2
 800919a:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm8
 800919c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80091a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	4313      	orrs	r3, r2
 80091a8:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm9
 80091aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	4313      	orrs	r3, r2
 80091b6:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm10
 80091b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	4313      	orrs	r3, r2
 80091c4:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm11
 80091c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	4313      	orrs	r3, r2
 80091d2:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm12
 80091d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	4313      	orrs	r3, r2
 80091e0:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm13
 80091e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091e6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	4313      	orrs	r3, r2
 80091ee:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm14
 80091f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	4313      	orrs	r3, r2
 80091fc:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm15
 80091fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009202:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009206:	b2db      	uxtb	r3, r3
 8009208:	4313      	orrs	r3, r2
 800920a:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 800920c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009210:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009214:	b2db      	uxtb	r3, r3
 8009216:	4313      	orrs	r3, r2
 8009218:	b2db      	uxtb	r3, r3
  if ((emb_func_int1.int1_fsm_lc
 800921a:	2b00      	cmp	r3, #0
 800921c:	d004      	beq.n	8009228 <lsm6dso_pin_int1_route_set+0x554>
  {
    md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 800921e:	7d3b      	ldrb	r3, [r7, #20]
 8009220:	f043 0302 	orr.w	r3, r3, #2
 8009224:	753b      	strb	r3, [r7, #20]
 8009226:	e003      	b.n	8009230 <lsm6dso_pin_int1_route_set+0x55c>
  }
  else
  {
    md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 8009228:	7d3b      	ldrb	r3, [r7, #20]
 800922a:	f36f 0341 	bfc	r3, #1, #1
 800922e:	753b      	strb	r3, [r7, #20]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8009230:	f107 0214 	add.w	r2, r7, #20
 8009234:	2301      	movs	r3, #1
 8009236:	215e      	movs	r1, #94	@ 0x5e
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f7fe ffa1 	bl	8008180 <lsm6dso_write_reg>
 800923e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8009240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <lsm6dso_pin_int1_route_set+0x576>
 8009246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009248:	e0e6      	b.n	8009418 <lsm6dso_pin_int1_route_set+0x744>

  /* set interrupts_enable = 1 in TAP_CFG2 if it is the case */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 800924a:	f107 021c 	add.w	r2, r7, #28
 800924e:	2301      	movs	r3, #1
 8009250:	2158      	movs	r1, #88	@ 0x58
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f7fe ff7c 	bl	8008150 <lsm6dso_read_reg>
 8009258:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_pin_int2_route_get(ctx, NULL, &pin_int2_route);
 800925a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800925e:	461a      	mov	r2, r3
 8009260:	2100      	movs	r1, #0
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 fe3e 	bl	8009ee4 <lsm6dso_pin_int2_route_get>
 8009268:	4602      	mov	r2, r0
 800926a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800926c:	4413      	add	r3, r2
 800926e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8009270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <lsm6dso_pin_int1_route_set+0x5a6>
 8009276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009278:	e0ce      	b.n	8009418 <lsm6dso_pin_int1_route_set+0x744>

  if ((pin_int2_route.fifo_bdr
 800927a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800927e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009282:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_g
 8009284:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009288:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800928c:	b2db      	uxtb	r3, r3
 800928e:	4313      	orrs	r3, r2
 8009290:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_temp
 8009292:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009296:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800929a:	b2db      	uxtb	r3, r3
 800929c:	4313      	orrs	r3, r2
 800929e:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_xl
 80092a0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80092a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	4313      	orrs	r3, r2
 80092ac:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_full
 80092ae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80092b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	4313      	orrs	r3, r2
 80092ba:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_ovr
 80092bc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80092c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	4313      	orrs	r3, r2
 80092c8:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_th
 80092ca:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80092ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	4313      	orrs	r3, r2
 80092d6:	b2da      	uxtb	r2, r3
       | pin_int2_route.six_d
 80092d8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80092dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	4313      	orrs	r3, r2
 80092e4:	b2da      	uxtb	r2, r3
       | pin_int2_route.double_tap
 80092e6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80092ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	4313      	orrs	r3, r2
 80092f2:	b2da      	uxtb	r2, r3
       | pin_int2_route.free_fall
 80092f4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80092f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	4313      	orrs	r3, r2
 8009300:	b2da      	uxtb	r2, r3
       | pin_int2_route.wake_up
 8009302:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009306:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800930a:	b2db      	uxtb	r3, r3
 800930c:	4313      	orrs	r3, r2
 800930e:	b2da      	uxtb	r2, r3
       | pin_int2_route.single_tap
 8009310:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009314:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009318:	b2db      	uxtb	r3, r3
 800931a:	4313      	orrs	r3, r2
 800931c:	b2da      	uxtb	r2, r3
       | pin_int2_route.sleep_change
 800931e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009322:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009326:	b2db      	uxtb	r3, r3
 8009328:	4313      	orrs	r3, r2
 800932a:	b2da      	uxtb	r2, r3
       | int1_ctrl.den_drdy_flag
 800932c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009330:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009334:	b2db      	uxtb	r3, r3
 8009336:	4313      	orrs	r3, r2
 8009338:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_boot
 800933a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800933e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009342:	b2db      	uxtb	r3, r3
 8009344:	4313      	orrs	r3, r2
 8009346:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_cnt_bdr
 8009348:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800934c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009350:	b2db      	uxtb	r3, r3
 8009352:	4313      	orrs	r3, r2
 8009354:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_g
 8009356:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800935a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4313      	orrs	r3, r2
 8009362:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_xl
 8009364:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009368:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800936c:	b2db      	uxtb	r3, r3
 800936e:	4313      	orrs	r3, r2
 8009370:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_full
 8009372:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009376:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800937a:	b2db      	uxtb	r3, r3
 800937c:	4313      	orrs	r3, r2
 800937e:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_ovr
 8009380:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009384:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009388:	b2db      	uxtb	r3, r3
 800938a:	4313      	orrs	r3, r2
 800938c:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_th
 800938e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009392:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009396:	b2db      	uxtb	r3, r3
 8009398:	4313      	orrs	r3, r2
 800939a:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_shub
 800939c:	7d3b      	ldrb	r3, [r7, #20]
 800939e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	4313      	orrs	r3, r2
 80093a6:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_6d
 80093a8:	7d3b      	ldrb	r3, [r7, #20]
 80093aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	4313      	orrs	r3, r2
 80093b2:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_double_tap
 80093b4:	7d3b      	ldrb	r3, [r7, #20]
 80093b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	4313      	orrs	r3, r2
 80093be:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_ff
 80093c0:	7d3b      	ldrb	r3, [r7, #20]
 80093c2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	4313      	orrs	r3, r2
 80093ca:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_wu
 80093cc:	7d3b      	ldrb	r3, [r7, #20]
 80093ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	4313      	orrs	r3, r2
 80093d6:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_single_tap
 80093d8:	7d3b      	ldrb	r3, [r7, #20]
 80093da:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	4313      	orrs	r3, r2
 80093e2:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 80093e4:	7d3b      	ldrb	r3, [r7, #20]
 80093e6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	4313      	orrs	r3, r2
 80093ee:	b2db      	uxtb	r3, r3
  if ((pin_int2_route.fifo_bdr
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d004      	beq.n	80093fe <lsm6dso_pin_int1_route_set+0x72a>
  {
    tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 80093f4:	7f3b      	ldrb	r3, [r7, #28]
 80093f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093fa:	773b      	strb	r3, [r7, #28]
 80093fc:	e003      	b.n	8009406 <lsm6dso_pin_int1_route_set+0x732>
  }
  else
  {
    tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 80093fe:	7f3b      	ldrb	r3, [r7, #28]
 8009400:	f36f 13c7 	bfc	r3, #7, #1
 8009404:	773b      	strb	r3, [r7, #28]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8009406:	f107 021c 	add.w	r2, r7, #28
 800940a:	2301      	movs	r3, #1
 800940c:	2158      	movs	r1, #88	@ 0x58
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f7fe feb6 	bl	8008180 <lsm6dso_write_reg>
 8009414:	63f8      	str	r0, [r7, #60]	@ 0x3c

  return ret;
 8009416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009418:	4618      	mov	r0, r3
 800941a:	3740      	adds	r7, #64	@ 0x40
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <lsm6dso_pin_int1_route_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t *val)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b08c      	sub	sp, #48	@ 0x30
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  lsm6dso_md2_cfg_t         md2_cfg;
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800942a:	2102      	movs	r1, #2
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7ff faf9 	bl	8008a24 <lsm6dso_mem_bank_set>
 8009432:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8009434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <lsm6dso_pin_int1_route_get+0x1e>
 800943a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943c:	e1dc      	b.n	80097f8 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 800943e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8009442:	2301      	movs	r3, #1
 8009444:	210a      	movs	r1, #10
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7fe fe82 	bl	8008150 <lsm6dso_read_reg>
 800944c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 800944e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8009452:	2301      	movs	r3, #1
 8009454:	210b      	movs	r1, #11
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7fe fe7a 	bl	8008150 <lsm6dso_read_reg>
 800945c:	4602      	mov	r2, r0
 800945e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009460:	4413      	add	r3, r2
 8009462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 8009464:	f107 0220 	add.w	r2, r7, #32
 8009468:	2301      	movs	r3, #1
 800946a:	210c      	movs	r1, #12
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7fe fe6f 	bl	8008150 <lsm6dso_read_reg>
 8009472:	4602      	mov	r2, r0
 8009474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009476:	4413      	add	r3, r2
 8009478:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800947a:	2100      	movs	r1, #0
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff fad1 	bl	8008a24 <lsm6dso_mem_bank_set>
 8009482:	4602      	mov	r2, r0
 8009484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009486:	4413      	add	r3, r2
 8009488:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 800948a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <lsm6dso_pin_int1_route_get+0x74>
 8009490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009492:	e1b1      	b.n	80097f8 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8009494:	f107 021c 	add.w	r2, r7, #28
 8009498:	2301      	movs	r3, #1
 800949a:	210d      	movs	r1, #13
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7fe fe57 	bl	8008150 <lsm6dso_read_reg>
 80094a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 80094a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <lsm6dso_pin_int1_route_get+0x8e>
 80094aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ac:	e1a4      	b.n	80097f8 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80094ae:	f107 0210 	add.w	r2, r7, #16
 80094b2:	2301      	movs	r3, #1
 80094b4:	215e      	movs	r1, #94	@ 0x5e
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7fe fe4a 	bl	8008150 <lsm6dso_read_reg>
 80094bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 80094be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <lsm6dso_pin_int1_route_get+0xa8>
 80094c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c6:	e197      	b.n	80097f8 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80094c8:	f107 020c 	add.w	r2, r7, #12
 80094cc:	2301      	movs	r3, #1
 80094ce:	2113      	movs	r1, #19
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f7fe fe3d 	bl	8008150 <lsm6dso_read_reg>
 80094d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 80094d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <lsm6dso_pin_int1_route_get+0xc2>
 80094de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e0:	e18a      	b.n	80097f8 <lsm6dso_pin_int1_route_get+0x3d8>

  if (ctrl4_c.int2_on_int1 == PROPERTY_ENABLE)
 80094e2:	7b3b      	ldrb	r3, [r7, #12]
 80094e4:	f003 0320 	and.w	r3, r3, #32
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d025      	beq.n	800953a <lsm6dso_pin_int1_route_get+0x11a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 80094ee:	f107 0218 	add.w	r2, r7, #24
 80094f2:	2301      	movs	r3, #1
 80094f4:	210e      	movs	r1, #14
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7fe fe2a 	bl	8008150 <lsm6dso_read_reg>
 80094fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 80094fe:	7e3b      	ldrb	r3, [r7, #24]
 8009500:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009504:	b2d9      	uxtb	r1, r3
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	7813      	ldrb	r3, [r2, #0]
 800950a:	f361 0382 	bfi	r3, r1, #2, #1
 800950e:	7013      	strb	r3, [r2, #0]

    ret += lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8009510:	f107 0214 	add.w	r2, r7, #20
 8009514:	2301      	movs	r3, #1
 8009516:	215f      	movs	r1, #95	@ 0x5f
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7fe fe19 	bl	8008150 <lsm6dso_read_reg>
 800951e:	4602      	mov	r2, r0
 8009520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009522:	4413      	add	r3, r2
 8009524:	62fb      	str	r3, [r7, #44]	@ 0x2c
    val->timestamp = md2_cfg.int2_timestamp;
 8009526:	7d3b      	ldrb	r3, [r7, #20]
 8009528:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800952c:	b2d9      	uxtb	r1, r3
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	7853      	ldrb	r3, [r2, #1]
 8009532:	f361 0382 	bfi	r3, r1, #2, #1
 8009536:	7053      	strb	r3, [r2, #1]
 8009538:	e009      	b.n	800954e <lsm6dso_pin_int1_route_get+0x12e>
  }
  else
  {
    val->drdy_temp = PROPERTY_DISABLE;
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	7813      	ldrb	r3, [r2, #0]
 800953e:	f36f 0382 	bfc	r3, #2, #1
 8009542:	7013      	strb	r3, [r2, #0]
    val->timestamp = PROPERTY_DISABLE;
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	7853      	ldrb	r3, [r2, #1]
 8009548:	f36f 0382 	bfc	r3, #2, #1
 800954c:	7053      	strb	r3, [r2, #1]
  }
  if (ret != 0) { return ret; }
 800954e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <lsm6dso_pin_int1_route_get+0x138>
 8009554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009556:	e14f      	b.n	80097f8 <lsm6dso_pin_int1_route_get+0x3d8>

  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8009558:	7f3b      	ldrb	r3, [r7, #28]
 800955a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800955e:	b2d9      	uxtb	r1, r3
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	7813      	ldrb	r3, [r2, #0]
 8009564:	f361 0300 	bfi	r3, r1, #0, #1
 8009568:	7013      	strb	r3, [r2, #0]
  val->drdy_g    = int1_ctrl.int1_drdy_g;
 800956a:	7f3b      	ldrb	r3, [r7, #28]
 800956c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009570:	b2d9      	uxtb	r1, r3
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	7813      	ldrb	r3, [r2, #0]
 8009576:	f361 0341 	bfi	r3, r1, #1, #1
 800957a:	7013      	strb	r3, [r2, #0]
  val->boot      = int1_ctrl.int1_boot;
 800957c:	7f3b      	ldrb	r3, [r7, #28]
 800957e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009582:	b2d9      	uxtb	r1, r3
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	7813      	ldrb	r3, [r2, #0]
 8009588:	f361 03c3 	bfi	r3, r1, #3, #1
 800958c:	7013      	strb	r3, [r2, #0]
  val->fifo_th   = int1_ctrl.int1_fifo_th;
 800958e:	7f3b      	ldrb	r3, [r7, #28]
 8009590:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009594:	b2d9      	uxtb	r1, r3
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	7813      	ldrb	r3, [r2, #0]
 800959a:	f361 1304 	bfi	r3, r1, #4, #1
 800959e:	7013      	strb	r3, [r2, #0]
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
 80095a0:	7f3b      	ldrb	r3, [r7, #28]
 80095a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80095a6:	b2d9      	uxtb	r1, r3
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	7813      	ldrb	r3, [r2, #0]
 80095ac:	f361 1345 	bfi	r3, r1, #5, #1
 80095b0:	7013      	strb	r3, [r2, #0]
  val->fifo_full = int1_ctrl.int1_fifo_full;
 80095b2:	7f3b      	ldrb	r3, [r7, #28]
 80095b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80095b8:	b2d9      	uxtb	r1, r3
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	7813      	ldrb	r3, [r2, #0]
 80095be:	f361 1386 	bfi	r3, r1, #6, #1
 80095c2:	7013      	strb	r3, [r2, #0]
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
 80095c4:	7f3b      	ldrb	r3, [r7, #28]
 80095c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80095ca:	b2d9      	uxtb	r1, r3
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	7813      	ldrb	r3, [r2, #0]
 80095d0:	f361 13c7 	bfi	r3, r1, #7, #1
 80095d4:	7013      	strb	r3, [r2, #0]
  val->den_flag  = int1_ctrl.den_drdy_flag;
 80095d6:	7f3b      	ldrb	r3, [r7, #28]
 80095d8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80095dc:	b2d9      	uxtb	r1, r3
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	7853      	ldrb	r3, [r2, #1]
 80095e2:	f361 0300 	bfi	r3, r1, #0, #1
 80095e6:	7053      	strb	r3, [r2, #1]
  val->sh_endop     = md1_cfg.int1_shub;
 80095e8:	7c3b      	ldrb	r3, [r7, #16]
 80095ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80095ee:	b2d9      	uxtb	r1, r3
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	7853      	ldrb	r3, [r2, #1]
 80095f4:	f361 0341 	bfi	r3, r1, #1, #1
 80095f8:	7053      	strb	r3, [r2, #1]
  val->six_d        = md1_cfg.int1_6d;
 80095fa:	7c3b      	ldrb	r3, [r7, #16]
 80095fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009600:	b2d9      	uxtb	r1, r3
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	7853      	ldrb	r3, [r2, #1]
 8009606:	f361 03c3 	bfi	r3, r1, #3, #1
 800960a:	7053      	strb	r3, [r2, #1]
  val->double_tap   = md1_cfg.int1_double_tap;
 800960c:	7c3b      	ldrb	r3, [r7, #16]
 800960e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009612:	b2d9      	uxtb	r1, r3
 8009614:	683a      	ldr	r2, [r7, #0]
 8009616:	7853      	ldrb	r3, [r2, #1]
 8009618:	f361 1304 	bfi	r3, r1, #4, #1
 800961c:	7053      	strb	r3, [r2, #1]
  val->free_fall    = md1_cfg.int1_ff;
 800961e:	7c3b      	ldrb	r3, [r7, #16]
 8009620:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009624:	b2d9      	uxtb	r1, r3
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	7853      	ldrb	r3, [r2, #1]
 800962a:	f361 1345 	bfi	r3, r1, #5, #1
 800962e:	7053      	strb	r3, [r2, #1]
  val->wake_up      = md1_cfg.int1_wu;
 8009630:	7c3b      	ldrb	r3, [r7, #16]
 8009632:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009636:	b2d9      	uxtb	r1, r3
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	7853      	ldrb	r3, [r2, #1]
 800963c:	f361 1386 	bfi	r3, r1, #6, #1
 8009640:	7053      	strb	r3, [r2, #1]
  val->single_tap   = md1_cfg.int1_single_tap;
 8009642:	7c3b      	ldrb	r3, [r7, #16]
 8009644:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009648:	b2d9      	uxtb	r1, r3
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	7853      	ldrb	r3, [r2, #1]
 800964e:	f361 13c7 	bfi	r3, r1, #7, #1
 8009652:	7053      	strb	r3, [r2, #1]
  val->sleep_change = md1_cfg.int1_sleep_change;
 8009654:	7c3b      	ldrb	r3, [r7, #16]
 8009656:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800965a:	b2d9      	uxtb	r1, r3
 800965c:	683a      	ldr	r2, [r7, #0]
 800965e:	7893      	ldrb	r3, [r2, #2]
 8009660:	f361 0300 	bfi	r3, r1, #0, #1
 8009664:	7093      	strb	r3, [r2, #2]
  val->step_detector = emb_func_int1.int1_step_detector;
 8009666:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800966a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800966e:	b2d9      	uxtb	r1, r3
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	7893      	ldrb	r3, [r2, #2]
 8009674:	f361 0341 	bfi	r3, r1, #1, #1
 8009678:	7093      	strb	r3, [r2, #2]
  val->tilt          = emb_func_int1.int1_tilt;
 800967a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800967e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009682:	b2d9      	uxtb	r1, r3
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	7893      	ldrb	r3, [r2, #2]
 8009688:	f361 0382 	bfi	r3, r1, #2, #1
 800968c:	7093      	strb	r3, [r2, #2]
  val->sig_mot       = emb_func_int1.int1_sig_mot;
 800968e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009692:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009696:	b2d9      	uxtb	r1, r3
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	7893      	ldrb	r3, [r2, #2]
 800969c:	f361 03c3 	bfi	r3, r1, #3, #1
 80096a0:	7093      	strb	r3, [r2, #2]
  val->fsm_lc        = emb_func_int1.int1_fsm_lc;
 80096a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80096a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80096aa:	b2d9      	uxtb	r1, r3
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	7893      	ldrb	r3, [r2, #2]
 80096b0:	f361 1304 	bfi	r3, r1, #4, #1
 80096b4:	7093      	strb	r3, [r2, #2]
  val->fsm1 = fsm_int1_a.int1_fsm1;
 80096b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80096ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80096be:	b2d9      	uxtb	r1, r3
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	7893      	ldrb	r3, [r2, #2]
 80096c4:	f361 1345 	bfi	r3, r1, #5, #1
 80096c8:	7093      	strb	r3, [r2, #2]
  val->fsm2 = fsm_int1_a.int1_fsm2;
 80096ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80096ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80096d2:	b2d9      	uxtb	r1, r3
 80096d4:	683a      	ldr	r2, [r7, #0]
 80096d6:	7893      	ldrb	r3, [r2, #2]
 80096d8:	f361 1386 	bfi	r3, r1, #6, #1
 80096dc:	7093      	strb	r3, [r2, #2]
  val->fsm3 = fsm_int1_a.int1_fsm3;
 80096de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80096e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80096e6:	b2d9      	uxtb	r1, r3
 80096e8:	683a      	ldr	r2, [r7, #0]
 80096ea:	7893      	ldrb	r3, [r2, #2]
 80096ec:	f361 13c7 	bfi	r3, r1, #7, #1
 80096f0:	7093      	strb	r3, [r2, #2]
  val->fsm4 = fsm_int1_a.int1_fsm4;
 80096f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80096f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80096fa:	b2d9      	uxtb	r1, r3
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	78d3      	ldrb	r3, [r2, #3]
 8009700:	f361 0300 	bfi	r3, r1, #0, #1
 8009704:	70d3      	strb	r3, [r2, #3]
  val->fsm5 = fsm_int1_a.int1_fsm5;
 8009706:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800970a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800970e:	b2d9      	uxtb	r1, r3
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	78d3      	ldrb	r3, [r2, #3]
 8009714:	f361 0341 	bfi	r3, r1, #1, #1
 8009718:	70d3      	strb	r3, [r2, #3]
  val->fsm6 = fsm_int1_a.int1_fsm6;
 800971a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800971e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009722:	b2d9      	uxtb	r1, r3
 8009724:	683a      	ldr	r2, [r7, #0]
 8009726:	78d3      	ldrb	r3, [r2, #3]
 8009728:	f361 0382 	bfi	r3, r1, #2, #1
 800972c:	70d3      	strb	r3, [r2, #3]
  val->fsm7 = fsm_int1_a.int1_fsm7;
 800972e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009732:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009736:	b2d9      	uxtb	r1, r3
 8009738:	683a      	ldr	r2, [r7, #0]
 800973a:	78d3      	ldrb	r3, [r2, #3]
 800973c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009740:	70d3      	strb	r3, [r2, #3]
  val->fsm8 = fsm_int1_a.int1_fsm8;
 8009742:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009746:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800974a:	b2d9      	uxtb	r1, r3
 800974c:	683a      	ldr	r2, [r7, #0]
 800974e:	78d3      	ldrb	r3, [r2, #3]
 8009750:	f361 1304 	bfi	r3, r1, #4, #1
 8009754:	70d3      	strb	r3, [r2, #3]
  val->fsm9  = fsm_int1_b.int1_fsm9;
 8009756:	f897 3020 	ldrb.w	r3, [r7, #32]
 800975a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800975e:	b2d9      	uxtb	r1, r3
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	78d3      	ldrb	r3, [r2, #3]
 8009764:	f361 1345 	bfi	r3, r1, #5, #1
 8009768:	70d3      	strb	r3, [r2, #3]
  val->fsm10 = fsm_int1_b.int1_fsm10;
 800976a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800976e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009772:	b2d9      	uxtb	r1, r3
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	78d3      	ldrb	r3, [r2, #3]
 8009778:	f361 1386 	bfi	r3, r1, #6, #1
 800977c:	70d3      	strb	r3, [r2, #3]
  val->fsm11 = fsm_int1_b.int1_fsm11;
 800977e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009782:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009786:	b2d9      	uxtb	r1, r3
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	78d3      	ldrb	r3, [r2, #3]
 800978c:	f361 13c7 	bfi	r3, r1, #7, #1
 8009790:	70d3      	strb	r3, [r2, #3]
  val->fsm12 = fsm_int1_b.int1_fsm12;
 8009792:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009796:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800979a:	b2d9      	uxtb	r1, r3
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	7913      	ldrb	r3, [r2, #4]
 80097a0:	f361 0300 	bfi	r3, r1, #0, #1
 80097a4:	7113      	strb	r3, [r2, #4]
  val->fsm13 = fsm_int1_b.int1_fsm13;
 80097a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80097ae:	b2d9      	uxtb	r1, r3
 80097b0:	683a      	ldr	r2, [r7, #0]
 80097b2:	7913      	ldrb	r3, [r2, #4]
 80097b4:	f361 0341 	bfi	r3, r1, #1, #1
 80097b8:	7113      	strb	r3, [r2, #4]
  val->fsm14 = fsm_int1_b.int1_fsm14;
 80097ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097be:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80097c2:	b2d9      	uxtb	r1, r3
 80097c4:	683a      	ldr	r2, [r7, #0]
 80097c6:	7913      	ldrb	r3, [r2, #4]
 80097c8:	f361 0382 	bfi	r3, r1, #2, #1
 80097cc:	7113      	strb	r3, [r2, #4]
  val->fsm15 = fsm_int1_b.int1_fsm15;
 80097ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80097d6:	b2d9      	uxtb	r1, r3
 80097d8:	683a      	ldr	r2, [r7, #0]
 80097da:	7913      	ldrb	r3, [r2, #4]
 80097dc:	f361 03c3 	bfi	r3, r1, #3, #1
 80097e0:	7113      	strb	r3, [r2, #4]
  val->fsm16 = fsm_int1_b.int1_fsm16;
 80097e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097e6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80097ea:	b2d9      	uxtb	r1, r3
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	7913      	ldrb	r3, [r2, #4]
 80097f0:	f361 1304 	bfi	r3, r1, #4, #1
 80097f4:	7113      	strb	r3, [r2, #4]

  return ret;
 80097f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3730      	adds	r7, #48	@ 0x30
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <lsm6dso_pin_int2_route_set>:
  *
  */
int32_t lsm6dso_pin_int2_route_set(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t val)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b090      	sub	sp, #64	@ 0x40
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	4639      	mov	r1, r7
 800980c:	e881 000c 	stmia.w	r1, {r2, r3}
  lsm6dso_tap_cfg2_t       tap_cfg2;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                  ret;
  ret = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (aux_ctx != NULL)
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d01f      	beq.n	800985a <lsm6dso_pin_int2_route_set+0x5a>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS, (uint8_t *)&int_ois, 1);
 800981a:	f107 0214 	add.w	r2, r7, #20
 800981e:	2301      	movs	r3, #1
 8009820:	216f      	movs	r1, #111	@ 0x6f
 8009822:	68b8      	ldr	r0, [r7, #8]
 8009824:	f7fe fc94 	bl	8008150 <lsm6dso_read_reg>
 8009828:	63f8      	str	r0, [r7, #60]	@ 0x3c
    int_ois.int2_drdy_ois = val.drdy_ois;
 800982a:	783b      	ldrb	r3, [r7, #0]
 800982c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009830:	b2da      	uxtb	r2, r3
 8009832:	7d3b      	ldrb	r3, [r7, #20]
 8009834:	f362 13c7 	bfi	r3, r2, #7, #1
 8009838:	753b      	strb	r3, [r7, #20]
    ret += lsm6dso_write_reg(aux_ctx, LSM6DSO_INT_OIS, (uint8_t *)&int_ois, 1);
 800983a:	f107 0214 	add.w	r2, r7, #20
 800983e:	2301      	movs	r3, #1
 8009840:	216f      	movs	r1, #111	@ 0x6f
 8009842:	68b8      	ldr	r0, [r7, #8]
 8009844:	f7fe fc9c 	bl	8008180 <lsm6dso_write_reg>
 8009848:	4602      	mov	r2, r0
 800984a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800984c:	4413      	add	r3, r2
 800984e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8009850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <lsm6dso_pin_int2_route_set+0x5a>
 8009856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009858:	e340      	b.n	8009edc <lsm6dso_pin_int2_route_set+0x6dc>
  }

  if (ctx != NULL)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 833c 	beq.w	8009eda <lsm6dso_pin_int2_route_set+0x6da>
  {
    int2_ctrl.int2_drdy_xl   = val.drdy_xl;
 8009862:	783b      	ldrb	r3, [r7, #0]
 8009864:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009868:	b2da      	uxtb	r2, r3
 800986a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800986e:	f362 0300 	bfi	r3, r2, #0, #1
 8009872:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_drdy_g    = val.drdy_g;
 8009876:	783b      	ldrb	r3, [r7, #0]
 8009878:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800987c:	b2da      	uxtb	r2, r3
 800987e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009882:	f362 0341 	bfi	r3, r2, #1, #1
 8009886:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 800988a:	783b      	ldrb	r3, [r7, #0]
 800988c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009890:	b2da      	uxtb	r2, r3
 8009892:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009896:	f362 0382 	bfi	r3, r2, #2, #1
 800989a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_th   = val.fifo_th;
 800989e:	783b      	ldrb	r3, [r7, #0]
 80098a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098aa:	f362 03c3 	bfi	r3, r2, #3, #1
 80098ae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_ovr  = val.fifo_ovr;
 80098b2:	783b      	ldrb	r3, [r7, #0]
 80098b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098be:	f362 1304 	bfi	r3, r2, #4, #1
 80098c2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_full = val.fifo_full;
 80098c6:	783b      	ldrb	r3, [r7, #0]
 80098c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098d2:	f362 1345 	bfi	r3, r2, #5, #1
 80098d6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_cnt_bdr   = val.fifo_bdr;
 80098da:	783b      	ldrb	r3, [r7, #0]
 80098dc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098e6:	f362 1386 	bfi	r3, r2, #6, #1
 80098ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.not_used_01    = 0;
 80098ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098f2:	f36f 13c7 	bfc	r3, #7, #1
 80098f6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    ret = lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 80098fa:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80098fe:	2301      	movs	r3, #1
 8009900:	210e      	movs	r1, #14
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f7fe fc3c 	bl	8008180 <lsm6dso_write_reg>
 8009908:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 800990a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <lsm6dso_pin_int2_route_set+0x114>
 8009910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009912:	e2e3      	b.n	8009edc <lsm6dso_pin_int2_route_set+0x6dc>

    md2_cfg.int2_timestamp    = val.timestamp;
 8009914:	787b      	ldrb	r3, [r7, #1]
 8009916:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800991a:	b2da      	uxtb	r2, r3
 800991c:	7f3b      	ldrb	r3, [r7, #28]
 800991e:	f362 0300 	bfi	r3, r2, #0, #1
 8009922:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_6d           = val.six_d;
 8009924:	787b      	ldrb	r3, [r7, #1]
 8009926:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800992a:	b2da      	uxtb	r2, r3
 800992c:	7f3b      	ldrb	r3, [r7, #28]
 800992e:	f362 0382 	bfi	r3, r2, #2, #1
 8009932:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_double_tap   = val.double_tap;
 8009934:	787b      	ldrb	r3, [r7, #1]
 8009936:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800993a:	b2da      	uxtb	r2, r3
 800993c:	7f3b      	ldrb	r3, [r7, #28]
 800993e:	f362 03c3 	bfi	r3, r2, #3, #1
 8009942:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_ff           = val.free_fall;
 8009944:	787b      	ldrb	r3, [r7, #1]
 8009946:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800994a:	b2da      	uxtb	r2, r3
 800994c:	7f3b      	ldrb	r3, [r7, #28]
 800994e:	f362 1304 	bfi	r3, r2, #4, #1
 8009952:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_wu           = val.wake_up;
 8009954:	787b      	ldrb	r3, [r7, #1]
 8009956:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800995a:	b2da      	uxtb	r2, r3
 800995c:	7f3b      	ldrb	r3, [r7, #28]
 800995e:	f362 1345 	bfi	r3, r2, #5, #1
 8009962:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_single_tap   = val.single_tap;
 8009964:	787b      	ldrb	r3, [r7, #1]
 8009966:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800996a:	b2da      	uxtb	r2, r3
 800996c:	7f3b      	ldrb	r3, [r7, #28]
 800996e:	f362 1386 	bfi	r3, r2, #6, #1
 8009972:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_sleep_change = val.sleep_change;
 8009974:	787b      	ldrb	r3, [r7, #1]
 8009976:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800997a:	b2da      	uxtb	r2, r3
 800997c:	7f3b      	ldrb	r3, [r7, #28]
 800997e:	f362 13c7 	bfi	r3, r2, #7, #1
 8009982:	773b      	strb	r3, [r7, #28]
    emb_func_int2.not_used_01 = 0;
 8009984:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009988:	f36f 0302 	bfc	r3, #0, #3
 800998c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2. int2_step_detector = val.step_detector;
 8009990:	787b      	ldrb	r3, [r7, #1]
 8009992:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009996:	b2da      	uxtb	r2, r3
 8009998:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800999c:	f362 03c3 	bfi	r3, r2, #3, #1
 80099a0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_tilt           = val.tilt;
 80099a4:	78bb      	ldrb	r3, [r7, #2]
 80099a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80099b0:	f362 1304 	bfi	r3, r2, #4, #1
 80099b4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_sig_mot        = val.sig_mot;
 80099b8:	78bb      	ldrb	r3, [r7, #2]
 80099ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80099c4:	f362 1345 	bfi	r3, r2, #5, #1
 80099c8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.not_used_02 = 0;
 80099cc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80099d0:	f36f 1386 	bfc	r3, #6, #1
 80099d4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_fsm_lc         = val.fsm_lc;
 80099d8:	78bb      	ldrb	r3, [r7, #2]
 80099da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80099e4:	f362 13c7 	bfi	r3, r2, #7, #1
 80099e8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    fsm_int2_a.int2_fsm1 = val.fsm1;
 80099ec:	78bb      	ldrb	r3, [r7, #2]
 80099ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80099f8:	f362 0300 	bfi	r3, r2, #0, #1
 80099fc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm2 = val.fsm2;
 8009a00:	78bb      	ldrb	r3, [r7, #2]
 8009a02:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a0c:	f362 0341 	bfi	r3, r2, #1, #1
 8009a10:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm3 = val.fsm3;
 8009a14:	78bb      	ldrb	r3, [r7, #2]
 8009a16:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a20:	f362 0382 	bfi	r3, r2, #2, #1
 8009a24:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm4 = val.fsm4;
 8009a28:	78bb      	ldrb	r3, [r7, #2]
 8009a2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a34:	f362 03c3 	bfi	r3, r2, #3, #1
 8009a38:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm5 = val.fsm5;
 8009a3c:	78bb      	ldrb	r3, [r7, #2]
 8009a3e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a48:	f362 1304 	bfi	r3, r2, #4, #1
 8009a4c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm6 = val.fsm6;
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a5c:	f362 1345 	bfi	r3, r2, #5, #1
 8009a60:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm7 = val.fsm7;
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a70:	f362 1386 	bfi	r3, r2, #6, #1
 8009a74:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm8 = val.fsm8;
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a84:	f362 13c7 	bfi	r3, r2, #7, #1
 8009a88:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 8009a8c:	78fb      	ldrb	r3, [r7, #3]
 8009a8e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009a98:	f362 0300 	bfi	r3, r2, #0, #1
 8009a9c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm10 = val.fsm10;
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009aac:	f362 0341 	bfi	r3, r2, #1, #1
 8009ab0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm11 = val.fsm11;
 8009ab4:	78fb      	ldrb	r3, [r7, #3]
 8009ab6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ac0:	f362 0382 	bfi	r3, r2, #2, #1
 8009ac4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm12 = val.fsm12;
 8009ac8:	78fb      	ldrb	r3, [r7, #3]
 8009aca:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ad4:	f362 03c3 	bfi	r3, r2, #3, #1
 8009ad8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm13 = val.fsm13;
 8009adc:	78fb      	ldrb	r3, [r7, #3]
 8009ade:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ae8:	f362 1304 	bfi	r3, r2, #4, #1
 8009aec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm14 = val.fsm14;
 8009af0:	793b      	ldrb	r3, [r7, #4]
 8009af2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009afc:	f362 1345 	bfi	r3, r2, #5, #1
 8009b00:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm15 = val.fsm15;
 8009b04:	793b      	ldrb	r3, [r7, #4]
 8009b06:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b10:	f362 1386 	bfi	r3, r2, #6, #1
 8009b14:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm16 = val.fsm16;
 8009b18:	793b      	ldrb	r3, [r7, #4]
 8009b1a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b24:	f362 13c7 	bfi	r3, r2, #7, #1
 8009b28:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8009b2c:	f107 0218 	add.w	r2, r7, #24
 8009b30:	2301      	movs	r3, #1
 8009b32:	2113      	movs	r1, #19
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f7fe fb0b 	bl	8008150 <lsm6dso_read_reg>
 8009b3a:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8009b3c:	783b      	ldrb	r3, [r7, #0]
 8009b3e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	787b      	ldrb	r3, [r7, #1]
 8009b46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d003      	beq.n	8009b5c <lsm6dso_pin_int2_route_set+0x35c>
    {
      ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8009b54:	7e3b      	ldrb	r3, [r7, #24]
 8009b56:	f36f 1345 	bfc	r3, #5, #1
 8009b5a:	763b      	strb	r3, [r7, #24]
    }

    ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8009b5c:	f107 0218 	add.w	r2, r7, #24
 8009b60:	2301      	movs	r3, #1
 8009b62:	2113      	movs	r1, #19
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7fe fb0b 	bl	8008180 <lsm6dso_write_reg>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b6e:	4413      	add	r3, r2
 8009b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8009b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <lsm6dso_pin_int2_route_set+0x37c>
 8009b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b7a:	e1af      	b.n	8009edc <lsm6dso_pin_int2_route_set+0x6dc>

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8009b7c:	2102      	movs	r1, #2
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f7fe ff50 	bl	8008a24 <lsm6dso_mem_bank_set>
 8009b84:	63f8      	str	r0, [r7, #60]	@ 0x3c

    ret += lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT2, (uint8_t *)&emb_func_int2, 1);
 8009b86:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	210e      	movs	r1, #14
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f7fe faf6 	bl	8008180 <lsm6dso_write_reg>
 8009b94:	4602      	mov	r2, r0
 8009b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b98:	4413      	add	r3, r2
 8009b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_A, (uint8_t *)&fsm_int2_a, 1);
 8009b9c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	210f      	movs	r1, #15
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f7fe faeb 	bl	8008180 <lsm6dso_write_reg>
 8009baa:	4602      	mov	r2, r0
 8009bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bae:	4413      	add	r3, r2
 8009bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_B, (uint8_t *)&fsm_int2_b, 1);
 8009bb2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	2110      	movs	r1, #16
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f7fe fae0 	bl	8008180 <lsm6dso_write_reg>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bc4:	4413      	add	r3, r2
 8009bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009bc8:	2100      	movs	r1, #0
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f7fe ff2a 	bl	8008a24 <lsm6dso_mem_bank_set>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bd4:	4413      	add	r3, r2
 8009bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8009bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <lsm6dso_pin_int2_route_set+0x3e2>
 8009bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009be0:	e17c      	b.n	8009edc <lsm6dso_pin_int2_route_set+0x6dc>

    if ((emb_func_int2.int2_fsm_lc
 8009be2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009be6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009bea:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_sig_mot
 8009bec:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009bf0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_step_detector
 8009bfa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009bfe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	4313      	orrs	r3, r2
 8009c06:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_tilt
 8009c08:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009c0c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	4313      	orrs	r3, r2
 8009c14:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm1
 8009c16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	4313      	orrs	r3, r2
 8009c22:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm2
 8009c24:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c28:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm3
 8009c32:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm4
 8009c40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c44:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm5
 8009c4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c52:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm6
 8009c5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c60:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	4313      	orrs	r3, r2
 8009c68:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm7
 8009c6a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c6e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	4313      	orrs	r3, r2
 8009c76:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm8
 8009c78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c7c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	4313      	orrs	r3, r2
 8009c84:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm9
 8009c86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c8a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	4313      	orrs	r3, r2
 8009c92:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm10
 8009c94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c98:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm11
 8009ca2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ca6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	4313      	orrs	r3, r2
 8009cae:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm12
 8009cb0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009cb4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm13
 8009cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009cc2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm14
 8009ccc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009cd0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm15
 8009cda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009cde:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm16) != PROPERTY_DISABLE)
 8009ce8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009cec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	b2db      	uxtb	r3, r3
    if ((emb_func_int2.int2_fsm_lc
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d004      	beq.n	8009d04 <lsm6dso_pin_int2_route_set+0x504>
    {
      md2_cfg.int2_emb_func = PROPERTY_ENABLE;
 8009cfa:	7f3b      	ldrb	r3, [r7, #28]
 8009cfc:	f043 0302 	orr.w	r3, r3, #2
 8009d00:	773b      	strb	r3, [r7, #28]
 8009d02:	e003      	b.n	8009d0c <lsm6dso_pin_int2_route_set+0x50c>
    }
    else
    {
      md2_cfg.int2_emb_func = PROPERTY_DISABLE;
 8009d04:	7f3b      	ldrb	r3, [r7, #28]
 8009d06:	f36f 0341 	bfc	r3, #1, #1
 8009d0a:	773b      	strb	r3, [r7, #28]
    }

    ret = lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8009d0c:	f107 021c 	add.w	r2, r7, #28
 8009d10:	2301      	movs	r3, #1
 8009d12:	215f      	movs	r1, #95	@ 0x5f
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f7fe fa33 	bl	8008180 <lsm6dso_write_reg>
 8009d1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8009d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <lsm6dso_pin_int2_route_set+0x526>
 8009d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d24:	e0da      	b.n	8009edc <lsm6dso_pin_int2_route_set+0x6dc>

    ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8009d26:	f107 0220 	add.w	r2, r7, #32
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	2158      	movs	r1, #88	@ 0x58
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f7fe fa0e 	bl	8008150 <lsm6dso_read_reg>
 8009d34:	63f8      	str	r0, [r7, #60]	@ 0x3c
    ret += lsm6dso_pin_int1_route_get(ctx, &pin_int1_route);
 8009d36:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f7ff fb6f 	bl	8009420 <lsm6dso_pin_int1_route_get>
 8009d42:	4602      	mov	r2, r0
 8009d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d46:	4413      	add	r3, r2
 8009d48:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if ((val.fifo_bdr
 8009d4a:	783b      	ldrb	r3, [r7, #0]
 8009d4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009d50:	b2da      	uxtb	r2, r3
         | val.drdy_g
 8009d52:	783b      	ldrb	r3, [r7, #0]
 8009d54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	b2da      	uxtb	r2, r3
         | val.drdy_temp
 8009d5e:	783b      	ldrb	r3, [r7, #0]
 8009d60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	4313      	orrs	r3, r2
 8009d68:	b2da      	uxtb	r2, r3
         | val.drdy_xl
 8009d6a:	783b      	ldrb	r3, [r7, #0]
 8009d6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	4313      	orrs	r3, r2
 8009d74:	b2da      	uxtb	r2, r3
         | val.fifo_full
 8009d76:	783b      	ldrb	r3, [r7, #0]
 8009d78:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	b2da      	uxtb	r2, r3
         | val.fifo_ovr
 8009d82:	783b      	ldrb	r3, [r7, #0]
 8009d84:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	b2da      	uxtb	r2, r3
         | val.fifo_th
 8009d8e:	783b      	ldrb	r3, [r7, #0]
 8009d90:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	4313      	orrs	r3, r2
 8009d98:	b2da      	uxtb	r2, r3
         | val.six_d
 8009d9a:	787b      	ldrb	r3, [r7, #1]
 8009d9c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	4313      	orrs	r3, r2
 8009da4:	b2da      	uxtb	r2, r3
         | val.double_tap
 8009da6:	787b      	ldrb	r3, [r7, #1]
 8009da8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	4313      	orrs	r3, r2
 8009db0:	b2da      	uxtb	r2, r3
         | val.free_fall
 8009db2:	787b      	ldrb	r3, [r7, #1]
 8009db4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	b2da      	uxtb	r2, r3
         | val.wake_up
 8009dbe:	787b      	ldrb	r3, [r7, #1]
 8009dc0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	b2da      	uxtb	r2, r3
         | val.single_tap
 8009dca:	787b      	ldrb	r3, [r7, #1]
 8009dcc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	b2da      	uxtb	r2, r3
         | val.sleep_change
 8009dd6:	787b      	ldrb	r3, [r7, #1]
 8009dd8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	4313      	orrs	r3, r2
 8009de0:	b2da      	uxtb	r2, r3
         | pin_int1_route.den_flag
 8009de2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009de6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	4313      	orrs	r3, r2
 8009dee:	b2da      	uxtb	r2, r3
         | pin_int1_route.boot
 8009df0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009df4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_bdr
 8009dfe:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009e02:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	b2da      	uxtb	r2, r3
         | pin_int1_route.drdy_g
 8009e0c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009e10:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	4313      	orrs	r3, r2
 8009e18:	b2da      	uxtb	r2, r3
         | pin_int1_route.drdy_xl
 8009e1a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009e1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	4313      	orrs	r3, r2
 8009e26:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_full
 8009e28:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009e2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	4313      	orrs	r3, r2
 8009e34:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_ovr
 8009e36:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009e3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	4313      	orrs	r3, r2
 8009e42:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_th
 8009e44:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009e48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	b2da      	uxtb	r2, r3
         | pin_int1_route.six_d
 8009e52:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009e56:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	b2da      	uxtb	r2, r3
         | pin_int1_route.double_tap
 8009e60:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009e64:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	b2da      	uxtb	r2, r3
         | pin_int1_route.free_fall
 8009e6e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009e72:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	b2da      	uxtb	r2, r3
         | pin_int1_route.wake_up
 8009e7c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009e80:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	4313      	orrs	r3, r2
 8009e88:	b2da      	uxtb	r2, r3
         | pin_int1_route.single_tap
 8009e8a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009e8e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	4313      	orrs	r3, r2
 8009e96:	b2da      	uxtb	r2, r3
         | pin_int1_route.sleep_change) != PROPERTY_DISABLE)
 8009e98:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009e9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	b2db      	uxtb	r3, r3
    if ((val.fifo_bdr
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d006      	beq.n	8009eb8 <lsm6dso_pin_int2_route_set+0x6b8>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8009eaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eb2:	f887 3020 	strb.w	r3, [r7, #32]
 8009eb6:	e005      	b.n	8009ec4 <lsm6dso_pin_int2_route_set+0x6c4>
    }
    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 8009eb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ebc:	f36f 13c7 	bfc	r3, #7, #1
 8009ec0:	f887 3020 	strb.w	r3, [r7, #32]
    }

    ret += lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8009ec4:	f107 0220 	add.w	r2, r7, #32
 8009ec8:	2301      	movs	r3, #1
 8009eca:	2158      	movs	r1, #88	@ 0x58
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f7fe f957 	bl	8008180 <lsm6dso_write_reg>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed6:	4413      	add	r3, r2
 8009ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return ret;
 8009eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3740      	adds	r7, #64	@ 0x40
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <lsm6dso_pin_int2_route_get>:
  *
  */
int32_t lsm6dso_pin_int2_route_get(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t *val)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b08c      	sub	sp, #48	@ 0x30
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
  lsm6dso_int2_ctrl_t      int2_ctrl;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                   ret;
  ret = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (aux_ctx != NULL)
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d010      	beq.n	8009f1c <lsm6dso_pin_int2_route_get+0x38>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS,
 8009efa:	f107 0210 	add.w	r2, r7, #16
 8009efe:	2301      	movs	r3, #1
 8009f00:	216f      	movs	r1, #111	@ 0x6f
 8009f02:	68b8      	ldr	r0, [r7, #8]
 8009f04:	f7fe f924 	bl	8008150 <lsm6dso_read_reg>
 8009f08:	62f8      	str	r0, [r7, #44]	@ 0x2c
                           (uint8_t *)&int_ois, 1);
    val->drdy_ois = int_ois.int2_drdy_ois;
 8009f0a:	7c3b      	ldrb	r3, [r7, #16]
 8009f0c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009f10:	b2d9      	uxtb	r1, r3
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	7813      	ldrb	r3, [r2, #0]
 8009f16:	f361 0300 	bfi	r3, r1, #0, #1
 8009f1a:	7013      	strb	r3, [r2, #0]
  }

  if (ctx != NULL)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f000 81c7 	beq.w	800a2b2 <lsm6dso_pin_int2_route_get+0x3ce>
  {
    if (ret == 0)
 8009f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d104      	bne.n	8009f34 <lsm6dso_pin_int2_route_get+0x50>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8009f2a:	2102      	movs	r1, #2
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f7fe fd79 	bl	8008a24 <lsm6dso_mem_bank_set>
 8009f32:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 8009f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d107      	bne.n	8009f4a <lsm6dso_pin_int2_route_get+0x66>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT2,
 8009f3a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8009f3e:	2301      	movs	r3, #1
 8009f40:	210e      	movs	r1, #14
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f7fe f904 	bl	8008150 <lsm6dso_read_reg>
 8009f48:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 8009f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d107      	bne.n	8009f60 <lsm6dso_pin_int2_route_get+0x7c>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_A,
 8009f50:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8009f54:	2301      	movs	r3, #1
 8009f56:	210f      	movs	r1, #15
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f7fe f8f9 	bl	8008150 <lsm6dso_read_reg>
 8009f5e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 8009f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d107      	bne.n	8009f76 <lsm6dso_pin_int2_route_get+0x92>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_B,
 8009f66:	f107 0220 	add.w	r2, r7, #32
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	2110      	movs	r1, #16
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f7fe f8ee 	bl	8008150 <lsm6dso_read_reg>
 8009f74:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 8009f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d104      	bne.n	8009f86 <lsm6dso_pin_int2_route_get+0xa2>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f7fe fd50 	bl	8008a24 <lsm6dso_mem_bank_set>
 8009f84:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 8009f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d107      	bne.n	8009f9c <lsm6dso_pin_int2_route_get+0xb8>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 8009f8c:	f107 021c 	add.w	r2, r7, #28
 8009f90:	2301      	movs	r3, #1
 8009f92:	210e      	movs	r1, #14
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f7fe f8db 	bl	8008150 <lsm6dso_read_reg>
 8009f9a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 8009f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d107      	bne.n	8009fb2 <lsm6dso_pin_int2_route_get+0xce>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG,
 8009fa2:	f107 0218 	add.w	r2, r7, #24
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	215f      	movs	r1, #95	@ 0x5f
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f7fe f8d0 	bl	8008150 <lsm6dso_read_reg>
 8009fb0:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 8009fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d107      	bne.n	8009fc8 <lsm6dso_pin_int2_route_get+0xe4>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8009fb8:	f107 0214 	add.w	r2, r7, #20
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	2113      	movs	r1, #19
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f7fe f8c5 	bl	8008150 <lsm6dso_read_reg>
 8009fc6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 8009fc8:	7d3b      	ldrb	r3, [r7, #20]
 8009fca:	f003 0320 	and.w	r3, r3, #32
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d128      	bne.n	800a026 <lsm6dso_pin_int2_route_get+0x142>
    {
      if (ret == 0)
 8009fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d110      	bne.n	8009ffc <lsm6dso_pin_int2_route_get+0x118>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 8009fda:	f107 021c 	add.w	r2, r7, #28
 8009fde:	2301      	movs	r3, #1
 8009fe0:	210e      	movs	r1, #14
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f7fe f8b4 	bl	8008150 <lsm6dso_read_reg>
 8009fe8:	62f8      	str	r0, [r7, #44]	@ 0x2c
                               (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8009fea:	7f3b      	ldrb	r3, [r7, #28]
 8009fec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009ff0:	b2d9      	uxtb	r1, r3
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	7813      	ldrb	r3, [r2, #0]
 8009ff6:	f361 03c3 	bfi	r3, r1, #3, #1
 8009ffa:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 8009ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d11b      	bne.n	800a03a <lsm6dso_pin_int2_route_get+0x156>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800a002:	f107 0218 	add.w	r2, r7, #24
 800a006:	2301      	movs	r3, #1
 800a008:	215f      	movs	r1, #95	@ 0x5f
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f7fe f8a0 	bl	8008150 <lsm6dso_read_reg>
 800a010:	62f8      	str	r0, [r7, #44]	@ 0x2c
        val->timestamp = md2_cfg.int2_timestamp;
 800a012:	7e3b      	ldrb	r3, [r7, #24]
 800a014:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a018:	b2d9      	uxtb	r1, r3
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	7853      	ldrb	r3, [r2, #1]
 800a01e:	f361 0300 	bfi	r3, r1, #0, #1
 800a022:	7053      	strb	r3, [r2, #1]
 800a024:	e009      	b.n	800a03a <lsm6dso_pin_int2_route_get+0x156>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	7813      	ldrb	r3, [r2, #0]
 800a02a:	f36f 03c3 	bfc	r3, #3, #1
 800a02e:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	7853      	ldrb	r3, [r2, #1]
 800a034:	f36f 0300 	bfc	r3, #0, #1
 800a038:	7053      	strb	r3, [r2, #1]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 800a03a:	7f3b      	ldrb	r3, [r7, #28]
 800a03c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a040:	b2d9      	uxtb	r1, r3
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	7813      	ldrb	r3, [r2, #0]
 800a046:	f361 0341 	bfi	r3, r1, #1, #1
 800a04a:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 800a04c:	7f3b      	ldrb	r3, [r7, #28]
 800a04e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a052:	b2d9      	uxtb	r1, r3
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	7813      	ldrb	r3, [r2, #0]
 800a058:	f361 0382 	bfi	r3, r1, #2, #1
 800a05c:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 800a05e:	7f3b      	ldrb	r3, [r7, #28]
 800a060:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a064:	b2d9      	uxtb	r1, r3
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	7813      	ldrb	r3, [r2, #0]
 800a06a:	f361 03c3 	bfi	r3, r1, #3, #1
 800a06e:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 800a070:	7f3b      	ldrb	r3, [r7, #28]
 800a072:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a076:	b2d9      	uxtb	r1, r3
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	7813      	ldrb	r3, [r2, #0]
 800a07c:	f361 1304 	bfi	r3, r1, #4, #1
 800a080:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 800a082:	7f3b      	ldrb	r3, [r7, #28]
 800a084:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a088:	b2d9      	uxtb	r1, r3
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	7813      	ldrb	r3, [r2, #0]
 800a08e:	f361 1345 	bfi	r3, r1, #5, #1
 800a092:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 800a094:	7f3b      	ldrb	r3, [r7, #28]
 800a096:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a09a:	b2d9      	uxtb	r1, r3
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	7813      	ldrb	r3, [r2, #0]
 800a0a0:	f361 1386 	bfi	r3, r1, #6, #1
 800a0a4:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 800a0a6:	7f3b      	ldrb	r3, [r7, #28]
 800a0a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a0ac:	b2d9      	uxtb	r1, r3
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	7813      	ldrb	r3, [r2, #0]
 800a0b2:	f361 13c7 	bfi	r3, r1, #7, #1
 800a0b6:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 800a0b8:	7e3b      	ldrb	r3, [r7, #24]
 800a0ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a0be:	b2d9      	uxtb	r1, r3
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	7853      	ldrb	r3, [r2, #1]
 800a0c4:	f361 0300 	bfi	r3, r1, #0, #1
 800a0c8:	7053      	strb	r3, [r2, #1]
    val->six_d        = md2_cfg.int2_6d;
 800a0ca:	7e3b      	ldrb	r3, [r7, #24]
 800a0cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a0d0:	b2d9      	uxtb	r1, r3
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	7853      	ldrb	r3, [r2, #1]
 800a0d6:	f361 0341 	bfi	r3, r1, #1, #1
 800a0da:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 800a0dc:	7e3b      	ldrb	r3, [r7, #24]
 800a0de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a0e2:	b2d9      	uxtb	r1, r3
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	7853      	ldrb	r3, [r2, #1]
 800a0e8:	f361 0382 	bfi	r3, r1, #2, #1
 800a0ec:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 800a0ee:	7e3b      	ldrb	r3, [r7, #24]
 800a0f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a0f4:	b2d9      	uxtb	r1, r3
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	7853      	ldrb	r3, [r2, #1]
 800a0fa:	f361 03c3 	bfi	r3, r1, #3, #1
 800a0fe:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 800a100:	7e3b      	ldrb	r3, [r7, #24]
 800a102:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a106:	b2d9      	uxtb	r1, r3
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	7853      	ldrb	r3, [r2, #1]
 800a10c:	f361 1304 	bfi	r3, r1, #4, #1
 800a110:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 800a112:	7e3b      	ldrb	r3, [r7, #24]
 800a114:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a118:	b2d9      	uxtb	r1, r3
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	7853      	ldrb	r3, [r2, #1]
 800a11e:	f361 1345 	bfi	r3, r1, #5, #1
 800a122:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 800a124:	7e3b      	ldrb	r3, [r7, #24]
 800a126:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a12a:	b2d9      	uxtb	r1, r3
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	7853      	ldrb	r3, [r2, #1]
 800a130:	f361 1386 	bfi	r3, r1, #6, #1
 800a134:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 800a136:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a13a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a13e:	b2d9      	uxtb	r1, r3
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	7853      	ldrb	r3, [r2, #1]
 800a144:	f361 13c7 	bfi	r3, r1, #7, #1
 800a148:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 800a14a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a14e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a152:	b2d9      	uxtb	r1, r3
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	7893      	ldrb	r3, [r2, #2]
 800a158:	f361 0300 	bfi	r3, r1, #0, #1
 800a15c:	7093      	strb	r3, [r2, #2]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 800a15e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a162:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a166:	b2d9      	uxtb	r1, r3
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	7893      	ldrb	r3, [r2, #2]
 800a16c:	f361 0382 	bfi	r3, r1, #2, #1
 800a170:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 800a172:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a176:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a17a:	b2d9      	uxtb	r1, r3
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	7893      	ldrb	r3, [r2, #2]
 800a180:	f361 03c3 	bfi	r3, r1, #3, #1
 800a184:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 800a186:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a18a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a18e:	b2d9      	uxtb	r1, r3
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	7893      	ldrb	r3, [r2, #2]
 800a194:	f361 1304 	bfi	r3, r1, #4, #1
 800a198:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 800a19a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a19e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a1a2:	b2d9      	uxtb	r1, r3
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	7893      	ldrb	r3, [r2, #2]
 800a1a8:	f361 1345 	bfi	r3, r1, #5, #1
 800a1ac:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 800a1ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a1b6:	b2d9      	uxtb	r1, r3
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	7893      	ldrb	r3, [r2, #2]
 800a1bc:	f361 1386 	bfi	r3, r1, #6, #1
 800a1c0:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 800a1c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1c6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a1ca:	b2d9      	uxtb	r1, r3
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	7893      	ldrb	r3, [r2, #2]
 800a1d0:	f361 13c7 	bfi	r3, r1, #7, #1
 800a1d4:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 800a1d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a1de:	b2d9      	uxtb	r1, r3
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	78d3      	ldrb	r3, [r2, #3]
 800a1e4:	f361 0300 	bfi	r3, r1, #0, #1
 800a1e8:	70d3      	strb	r3, [r2, #3]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 800a1ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a1f2:	b2d9      	uxtb	r1, r3
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	78d3      	ldrb	r3, [r2, #3]
 800a1f8:	f361 0341 	bfi	r3, r1, #1, #1
 800a1fc:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 800a1fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a202:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a206:	b2d9      	uxtb	r1, r3
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	78d3      	ldrb	r3, [r2, #3]
 800a20c:	f361 0382 	bfi	r3, r1, #2, #1
 800a210:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 800a212:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a216:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a21a:	b2d9      	uxtb	r1, r3
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	78d3      	ldrb	r3, [r2, #3]
 800a220:	f361 03c3 	bfi	r3, r1, #3, #1
 800a224:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 800a226:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a22a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a22e:	b2d9      	uxtb	r1, r3
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	78d3      	ldrb	r3, [r2, #3]
 800a234:	f361 1304 	bfi	r3, r1, #4, #1
 800a238:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 800a23a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a23e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a242:	b2d9      	uxtb	r1, r3
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	78d3      	ldrb	r3, [r2, #3]
 800a248:	f361 1345 	bfi	r3, r1, #5, #1
 800a24c:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 800a24e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a252:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a256:	b2d9      	uxtb	r1, r3
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	78d3      	ldrb	r3, [r2, #3]
 800a25c:	f361 1386 	bfi	r3, r1, #6, #1
 800a260:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 800a262:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a266:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a26a:	b2d9      	uxtb	r1, r3
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	78d3      	ldrb	r3, [r2, #3]
 800a270:	f361 13c7 	bfi	r3, r1, #7, #1
 800a274:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 800a276:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a27a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a27e:	b2d9      	uxtb	r1, r3
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	7913      	ldrb	r3, [r2, #4]
 800a284:	f361 0300 	bfi	r3, r1, #0, #1
 800a288:	7113      	strb	r3, [r2, #4]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 800a28a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a28e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a292:	b2d9      	uxtb	r1, r3
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	7913      	ldrb	r3, [r2, #4]
 800a298:	f361 0341 	bfi	r3, r1, #1, #1
 800a29c:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 800a29e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a2a6:	b2d9      	uxtb	r1, r3
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	7913      	ldrb	r3, [r2, #4]
 800a2ac:	f361 0382 	bfi	r3, r1, #2, #1
 800a2b0:	7113      	strb	r3, [r2, #4]
  }

  return ret;
 800a2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3730      	adds	r7, #48	@ 0x30
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d103      	bne.n	800a2d4 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 800a2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d0:	60fb      	str	r3, [r7, #12]
 800a2d2:	e034      	b.n	800a33e <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	689a      	ldr	r2, [r3, #8]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	7b1a      	ldrb	r2, [r3, #12]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	691a      	ldr	r2, [r3, #16]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	695a      	ldr	r2, [r3, #20]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	699a      	ldr	r2, [r3, #24]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a0e      	ldr	r2, [pc, #56]	@ (800a348 <STTS751_RegisterBusIO+0x8c>)
 800a310:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a0d      	ldr	r2, [pc, #52]	@ (800a34c <STTS751_RegisterBusIO+0x90>)
 800a316:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	69da      	ldr	r2, [r3, #28]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d004      	beq.n	800a338 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4798      	blx	r3
 800a334:	60f8      	str	r0, [r7, #12]
 800a336:	e002      	b.n	800a33e <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 800a338:	f04f 33ff 	mov.w	r3, #4294967295
 800a33c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a33e:	68fb      	ldr	r3, [r7, #12]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	0800a7b5 	.word	0x0800a7b5
 800a34c:	0800a823 	.word	0x0800a823

0800a350 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d127      	bne.n	800a3b2 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	3320      	adds	r3, #32
 800a366:	2101      	movs	r1, #1
 800a368:	4618      	mov	r0, r3
 800a36a:	f000 fc39 	bl	800abe0 <stts751_pin_event_route_set>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 800a374:	f04f 33ff 	mov.w	r3, #4294967295
 800a378:	e020      	b.n	800a3bc <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a380:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3320      	adds	r3, #32
 800a386:	2103      	movs	r1, #3
 800a388:	4618      	mov	r0, r3
 800a38a:	f000 fb9d 	bl	800aac8 <stts751_resolution_set>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d002      	beq.n	800a39a <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 800a394:	f04f 33ff 	mov.w	r3, #4294967295
 800a398:	e010      	b.n	800a3bc <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	3320      	adds	r3, #32
 800a39e:	2180      	movs	r1, #128	@ 0x80
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f000 faba 	bl	800a91a <stts751_temp_data_rate_set>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 800a3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b0:	e004      	b.n	800a3bc <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d108      	bne.n	800a3e8 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f874 	bl	800a4c4 <STTS751_TEMP_Disable>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d002      	beq.n	800a3e8 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 800a3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e6:	e004      	b.n	800a3f2 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b084      	sub	sp, #16
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3320      	adds	r3, #32
 800a408:	f107 020c 	add.w	r2, r7, #12
 800a40c:	4611      	mov	r1, r2
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 fc0c 	bl	800ac2c <stts751_device_id_get>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d002      	beq.n	800a420 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 800a41a:	f04f 33ff 	mov.w	r3, #4294967295
 800a41e:	e003      	b.n	800a428 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 800a420:	7b7a      	ldrb	r2, [r7, #13]
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2200      	movs	r2, #0
 800a43e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	2200      	movs	r2, #0
 800a444:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	2201      	movs	r2, #1
 800a44a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	2200      	movs	r2, #0
 800a450:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2200      	movs	r2, #0
 800a456:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	f04f 0200 	mov.w	r2, #0
 800a45e:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 800a466:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	f04f 0200 	mov.w	r2, #0
 800a46e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	f04f 0200 	mov.w	r2, #0
 800a476:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	bc80      	pop	{r7}
 800a482:	4770      	bx	lr

0800a484 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a492:	2b01      	cmp	r3, #1
 800a494:	d101      	bne.n	800a49a <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 800a496:	2300      	movs	r3, #0
 800a498:	e010      	b.n	800a4bc <STTS751_TEMP_Enable+0x38>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f8b5 	bl	800a610 <STTS751_TEMP_SetOutputDataRate>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <STTS751_TEMP_Enable+0x2e>
  {
    return STTS751_ERROR;
 800a4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b0:	e004      	b.n	800a4bc <STTS751_TEMP_Enable+0x38>
  }

  pObj->temp_is_enabled = 1;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d101      	bne.n	800a4da <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	e01c      	b.n	800a514 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3334      	adds	r3, #52	@ 0x34
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f81b 	bl	800a51c <STTS751_TEMP_GetOutputDataRate>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 800a4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f0:	e010      	b.n	800a514 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	3320      	adds	r3, #32
 800a4f6:	2180      	movs	r1, #128	@ 0x80
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f000 fa0e 	bl	800a91a <stts751_temp_data_rate_set>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 800a504:	f04f 33ff 	mov.w	r3, #4294967295
 800a508:	e004      	b.n	800a514 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3320      	adds	r3, #32
 800a52e:	f107 020b 	add.w	r2, r7, #11
 800a532:	4611      	mov	r1, r2
 800a534:	4618      	mov	r0, r3
 800a536:	f000 fa47 	bl	800a9c8 <stts751_temp_data_rate_get>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d002      	beq.n	800a546 <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 800a540:	f04f 33ff 	mov.w	r3, #4294967295
 800a544:	e060      	b.n	800a608 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 800a546:	7afb      	ldrb	r3, [r7, #11]
 800a548:	2b90      	cmp	r3, #144	@ 0x90
 800a54a:	d021      	beq.n	800a590 <STTS751_TEMP_GetOutputDataRate+0x74>
 800a54c:	2b90      	cmp	r3, #144	@ 0x90
 800a54e:	dc56      	bgt.n	800a5fe <STTS751_TEMP_GetOutputDataRate+0xe2>
 800a550:	2b09      	cmp	r3, #9
 800a552:	dc1b      	bgt.n	800a58c <STTS751_TEMP_GetOutputDataRate+0x70>
 800a554:	2b00      	cmp	r3, #0
 800a556:	db52      	blt.n	800a5fe <STTS751_TEMP_GetOutputDataRate+0xe2>
 800a558:	2b09      	cmp	r3, #9
 800a55a:	d850      	bhi.n	800a5fe <STTS751_TEMP_GetOutputDataRate+0xe2>
 800a55c:	a201      	add	r2, pc, #4	@ (adr r2, 800a564 <STTS751_TEMP_GetOutputDataRate+0x48>)
 800a55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a562:	bf00      	nop
 800a564:	0800a59b 	.word	0x0800a59b
 800a568:	0800a5a5 	.word	0x0800a5a5
 800a56c:	0800a5af 	.word	0x0800a5af
 800a570:	0800a5b9 	.word	0x0800a5b9
 800a574:	0800a5c3 	.word	0x0800a5c3
 800a578:	0800a5cd 	.word	0x0800a5cd
 800a57c:	0800a5d7 	.word	0x0800a5d7
 800a580:	0800a5e1 	.word	0x0800a5e1
 800a584:	0800a5eb 	.word	0x0800a5eb
 800a588:	0800a5f5 	.word	0x0800a5f5
 800a58c:	2b80      	cmp	r3, #128	@ 0x80
 800a58e:	d136      	bne.n	800a5fe <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	f04f 0200 	mov.w	r2, #0
 800a596:	601a      	str	r2, [r3, #0]
      break;
 800a598:	e035      	b.n	800a606 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	f04f 5276 	mov.w	r2, #1031798784	@ 0x3d800000
 800a5a0:	601a      	str	r2, [r3, #0]
      break;
 800a5a2:	e030      	b.n	800a606 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 800a5aa:	601a      	str	r2, [r3, #0]
      break;
 800a5ac:	e02b      	b.n	800a606 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800a5b4:	601a      	str	r2, [r3, #0]
      break;
 800a5b6:	e026      	b.n	800a606 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800a5be:	601a      	str	r2, [r3, #0]
      break;
 800a5c0:	e021      	b.n	800a606 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a5c8:	601a      	str	r2, [r3, #0]
      break;
 800a5ca:	e01c      	b.n	800a606 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a5d2:	601a      	str	r2, [r3, #0]
      break;
 800a5d4:	e017      	b.n	800a606 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800a5dc:	601a      	str	r2, [r3, #0]
      break;
 800a5de:	e012      	b.n	800a606 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800a5e6:	601a      	str	r2, [r3, #0]
      break;
 800a5e8:	e00d      	b.n	800a606 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 800a5f0:	601a      	str	r2, [r3, #0]
      break;
 800a5f2:	e008      	b.n	800a606 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 800a5fa:	601a      	str	r2, [r3, #0]
      break;
 800a5fc:	e003      	b.n	800a606 <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 800a5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a602:	60fb      	str	r3, [r7, #12]
      break;
 800a604:	bf00      	nop
  }

  return ret;
 800a606:	68fb      	ldr	r3, [r7, #12]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	3320      	adds	r3, #32
 800a61e:	f107 020e 	add.w	r2, r7, #14
 800a622:	4611      	mov	r1, r2
 800a624:	4618      	mov	r0, r3
 800a626:	f000 fa75 	bl	800ab14 <stts751_resolution_get>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d002      	beq.n	800a636 <STTS751_TEMP_SetOutputDataRate+0x26>
  {
    return STTS751_ERROR;
 800a630:	f04f 33ff 	mov.w	r3, #4294967295
 800a634:	e09a      	b.n	800a76c <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 800a636:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800a63a:	6838      	ldr	r0, [r7, #0]
 800a63c:	f7f6 fd26 	bl	800108c <__aeabi_fcmpeq>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00e      	beq.n	800a664 <STTS751_TEMP_SetOutputDataRate+0x54>
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	2b03      	cmp	r3, #3
 800a64a:	d10b      	bne.n	800a664 <STTS751_TEMP_SetOutputDataRate+0x54>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	3320      	adds	r3, #32
 800a650:	2101      	movs	r1, #1
 800a652:	4618      	mov	r0, r3
 800a654:	f000 fa38 	bl	800aac8 <stts751_resolution_set>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d002      	beq.n	800a664 <STTS751_TEMP_SetOutputDataRate+0x54>
    {
      return STTS751_ERROR;
 800a65e:	f04f 33ff 	mov.w	r3, #4294967295
 800a662:	e083      	b.n	800a76c <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 800a664:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 800a668:	6838      	ldr	r0, [r7, #0]
 800a66a:	f7f6 fd0f 	bl	800108c <__aeabi_fcmpeq>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d011      	beq.n	800a698 <STTS751_TEMP_SetOutputDataRate+0x88>
 800a674:	7bbb      	ldrb	r3, [r7, #14]
 800a676:	2b03      	cmp	r3, #3
 800a678:	d002      	beq.n	800a680 <STTS751_TEMP_SetOutputDataRate+0x70>
 800a67a:	7bbb      	ldrb	r3, [r7, #14]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d10b      	bne.n	800a698 <STTS751_TEMP_SetOutputDataRate+0x88>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	3320      	adds	r3, #32
 800a684:	2100      	movs	r1, #0
 800a686:	4618      	mov	r0, r3
 800a688:	f000 fa1e 	bl	800aac8 <stts751_resolution_set>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <STTS751_TEMP_SetOutputDataRate+0x88>
    {
      return STTS751_ERROR;
 800a692:	f04f 33ff 	mov.w	r3, #4294967295
 800a696:	e069      	b.n	800a76c <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 800a698:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800a69c:	6838      	ldr	r0, [r7, #0]
 800a69e:	f7f6 fd09 	bl	80010b4 <__aeabi_fcmple>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <STTS751_TEMP_SetOutputDataRate+0x9c>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	e050      	b.n	800a74e <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a6ac:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800a6b0:	6838      	ldr	r0, [r7, #0]
 800a6b2:	f7f6 fcff 	bl	80010b4 <__aeabi_fcmple>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <STTS751_TEMP_SetOutputDataRate+0xb0>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e046      	b.n	800a74e <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a6c0:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800a6c4:	6838      	ldr	r0, [r7, #0]
 800a6c6:	f7f6 fcf5 	bl	80010b4 <__aeabi_fcmple>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d001      	beq.n	800a6d4 <STTS751_TEMP_SetOutputDataRate+0xc4>
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	e03c      	b.n	800a74e <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a6d4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800a6d8:	6838      	ldr	r0, [r7, #0]
 800a6da:	f7f6 fceb 	bl	80010b4 <__aeabi_fcmple>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d001      	beq.n	800a6e8 <STTS751_TEMP_SetOutputDataRate+0xd8>
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	e032      	b.n	800a74e <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a6e8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800a6ec:	6838      	ldr	r0, [r7, #0]
 800a6ee:	f7f6 fce1 	bl	80010b4 <__aeabi_fcmple>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <STTS751_TEMP_SetOutputDataRate+0xec>
 800a6f8:	2304      	movs	r3, #4
 800a6fa:	e028      	b.n	800a74e <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a6fc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a700:	6838      	ldr	r0, [r7, #0]
 800a702:	f7f6 fcd7 	bl	80010b4 <__aeabi_fcmple>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <STTS751_TEMP_SetOutputDataRate+0x100>
 800a70c:	2305      	movs	r3, #5
 800a70e:	e01e      	b.n	800a74e <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a710:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800a714:	6838      	ldr	r0, [r7, #0]
 800a716:	f7f6 fccd 	bl	80010b4 <__aeabi_fcmple>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <STTS751_TEMP_SetOutputDataRate+0x114>
 800a720:	2306      	movs	r3, #6
 800a722:	e014      	b.n	800a74e <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a724:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800a728:	6838      	ldr	r0, [r7, #0]
 800a72a:	f7f6 fcc3 	bl	80010b4 <__aeabi_fcmple>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <STTS751_TEMP_SetOutputDataRate+0x128>
 800a734:	2307      	movs	r3, #7
 800a736:	e00a      	b.n	800a74e <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a738:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800a73c:	6838      	ldr	r0, [r7, #0]
 800a73e:	f7f6 fcb9 	bl	80010b4 <__aeabi_fcmple>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d001      	beq.n	800a74c <STTS751_TEMP_SetOutputDataRate+0x13c>
 800a748:	2308      	movs	r3, #8
 800a74a:	e000      	b.n	800a74e <STTS751_TEMP_SetOutputDataRate+0x13e>
 800a74c:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 800a74e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	3320      	adds	r3, #32
 800a754:	7bfa      	ldrb	r2, [r7, #15]
 800a756:	4611      	mov	r1, r2
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 f8de 	bl	800a91a <stts751_temp_data_rate_set>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <STTS751_TEMP_SetOutputDataRate+0x15a>
  {
    return STTS751_ERROR;
 800a764:	f04f 33ff 	mov.w	r3, #4294967295
 800a768:	e000      	b.n	800a76c <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  return STTS751_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	3320      	adds	r3, #32
 800a782:	f107 020e 	add.w	r2, r7, #14
 800a786:	4611      	mov	r1, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 f9fb 	bl	800ab84 <stts751_temperature_raw_get>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 800a794:	f04f 33ff 	mov.w	r3, #4294967295
 800a798:	e008      	b.n	800a7ac <STTS751_TEMP_GetTemperature+0x38>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 800a79a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 f8a6 	bl	800a8f0 <stts751_from_lsb_to_celsius>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	601a      	str	r2, [r3, #0]

  return STTS751_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a7b4:	b590      	push	{r4, r7, lr}
 800a7b6:	b089      	sub	sp, #36	@ 0x24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	607a      	str	r2, [r7, #4]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	72fb      	strb	r3, [r7, #11]
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d11f      	bne.n	800a818 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a7d8:	2300      	movs	r3, #0
 800a7da:	83fb      	strh	r3, [r7, #30]
 800a7dc:	e018      	b.n	800a810 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	695c      	ldr	r4, [r3, #20]
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	7b1b      	ldrb	r3, [r3, #12]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	7afb      	ldrb	r3, [r7, #11]
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	8bfb      	ldrh	r3, [r7, #30]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	b299      	uxth	r1, r3
 800a7f2:	8bfb      	ldrh	r3, [r7, #30]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	441a      	add	r2, r3
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	47a0      	blx	r4
 800a7fc:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d002      	beq.n	800a80a <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 800a804:	f04f 33ff 	mov.w	r3, #4294967295
 800a808:	e007      	b.n	800a81a <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a80a:	8bfb      	ldrh	r3, [r7, #30]
 800a80c:	3301      	adds	r3, #1
 800a80e:	83fb      	strh	r3, [r7, #30]
 800a810:	8bfa      	ldrh	r2, [r7, #30]
 800a812:	893b      	ldrh	r3, [r7, #8]
 800a814:	429a      	cmp	r2, r3
 800a816:	d3e2      	bcc.n	800a7de <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a818:	69bb      	ldr	r3, [r7, #24]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3724      	adds	r7, #36	@ 0x24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd90      	pop	{r4, r7, pc}

0800a822 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a822:	b590      	push	{r4, r7, lr}
 800a824:	b089      	sub	sp, #36	@ 0x24
 800a826:	af00      	add	r7, sp, #0
 800a828:	60f8      	str	r0, [r7, #12]
 800a82a:	607a      	str	r2, [r7, #4]
 800a82c:	461a      	mov	r2, r3
 800a82e:	460b      	mov	r3, r1
 800a830:	72fb      	strb	r3, [r7, #11]
 800a832:	4613      	mov	r3, r2
 800a834:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d11f      	bne.n	800a886 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a846:	2300      	movs	r3, #0
 800a848:	83fb      	strh	r3, [r7, #30]
 800a84a:	e018      	b.n	800a87e <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	691c      	ldr	r4, [r3, #16]
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	7b1b      	ldrb	r3, [r3, #12]
 800a854:	4618      	mov	r0, r3
 800a856:	7afb      	ldrb	r3, [r7, #11]
 800a858:	b29a      	uxth	r2, r3
 800a85a:	8bfb      	ldrh	r3, [r7, #30]
 800a85c:	4413      	add	r3, r2
 800a85e:	b299      	uxth	r1, r3
 800a860:	8bfb      	ldrh	r3, [r7, #30]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	441a      	add	r2, r3
 800a866:	2301      	movs	r3, #1
 800a868:	47a0      	blx	r4
 800a86a:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d002      	beq.n	800a878 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 800a872:	f04f 33ff 	mov.w	r3, #4294967295
 800a876:	e007      	b.n	800a888 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a878:	8bfb      	ldrh	r3, [r7, #30]
 800a87a:	3301      	adds	r3, #1
 800a87c:	83fb      	strh	r3, [r7, #30]
 800a87e:	8bfa      	ldrh	r2, [r7, #30]
 800a880:	893b      	ldrh	r3, [r7, #8]
 800a882:	429a      	cmp	r2, r3
 800a884:	d3e2      	bcc.n	800a84c <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a886:	69bb      	ldr	r3, [r7, #24]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3724      	adds	r7, #36	@ 0x24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd90      	pop	{r4, r7, pc}

0800a890 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800a890:	b590      	push	{r4, r7, lr}
 800a892:	b087      	sub	sp, #28
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	607a      	str	r2, [r7, #4]
 800a89a:	461a      	mov	r2, r3
 800a89c:	460b      	mov	r3, r1
 800a89e:	72fb      	strb	r3, [r7, #11]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	685c      	ldr	r4, [r3, #4]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	68d8      	ldr	r0, [r3, #12]
 800a8ac:	893b      	ldrh	r3, [r7, #8]
 800a8ae:	7af9      	ldrb	r1, [r7, #11]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	47a0      	blx	r4
 800a8b4:	6178      	str	r0, [r7, #20]

  return ret;
 800a8b6:	697b      	ldr	r3, [r7, #20]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	371c      	adds	r7, #28
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd90      	pop	{r4, r7, pc}

0800a8c0 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800a8c0:	b590      	push	{r4, r7, lr}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	607a      	str	r2, [r7, #4]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	72fb      	strb	r3, [r7, #11]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681c      	ldr	r4, [r3, #0]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	68d8      	ldr	r0, [r3, #12]
 800a8dc:	893b      	ldrh	r3, [r7, #8]
 800a8de:	7af9      	ldrb	r1, [r7, #11]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	47a0      	blx	r4
 800a8e4:	6178      	str	r0, [r7, #20]

  return ret;
 800a8e6:	697b      	ldr	r3, [r7, #20]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	371c      	adds	r7, #28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd90      	pop	{r4, r7, pc}

0800a8f0 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 800a8fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7f6 f9dc 	bl	8000cbc <__aeabi_i2f>
 800a904:	4603      	mov	r3, r0
 800a906:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7f6 fade 	bl	8000ecc <__aeabi_fdiv>
 800a910:	4603      	mov	r3, r0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b086      	sub	sp, #24
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	460b      	mov	r3, r1
 800a924:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 800a926:	23aa      	movs	r3, #170	@ 0xaa
 800a928:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800a92a:	f107 020c 	add.w	r2, r7, #12
 800a92e:	2301      	movs	r3, #1
 800a930:	2104      	movs	r1, #4
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7ff ffac 	bl	800a890 <stts751_read_reg>
 800a938:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10f      	bne.n	800a960 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 800a940:	78fb      	ldrb	r3, [r7, #3]
 800a942:	f003 030f 	and.w	r3, r3, #15
 800a946:	b2da      	uxtb	r2, r3
 800a948:	7b3b      	ldrb	r3, [r7, #12]
 800a94a:	f362 0303 	bfi	r3, r2, #0, #4
 800a94e:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 800a950:	f107 020c 	add.w	r2, r7, #12
 800a954:	2301      	movs	r3, #1
 800a956:	2104      	movs	r1, #4
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff ffb1 	bl	800a8c0 <stts751_write_reg>
 800a95e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d107      	bne.n	800a976 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800a966:	f107 0210 	add.w	r2, r7, #16
 800a96a:	2301      	movs	r3, #1
 800a96c:	2103      	movs	r1, #3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff ff8e 	bl	800a890 <stts751_read_reg>
 800a974:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d111      	bne.n	800a9a0 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 800a97c:	78fb      	ldrb	r3, [r7, #3]
 800a97e:	09db      	lsrs	r3, r3, #7
 800a980:	b2db      	uxtb	r3, r3
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	b2da      	uxtb	r2, r3
 800a988:	7c3b      	ldrb	r3, [r7, #16]
 800a98a:	f362 1386 	bfi	r3, r2, #6, #1
 800a98e:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 800a990:	f107 0210 	add.w	r2, r7, #16
 800a994:	2301      	movs	r3, #1
 800a996:	2103      	movs	r1, #3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7ff ff91 	bl	800a8c0 <stts751_write_reg>
 800a99e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10a      	bne.n	800a9bc <stts751_temp_data_rate_set+0xa2>
 800a9a6:	78fb      	ldrb	r3, [r7, #3]
 800a9a8:	2b90      	cmp	r3, #144	@ 0x90
 800a9aa:	d107      	bne.n	800a9bc <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 800a9ac:	f107 020b 	add.w	r2, r7, #11
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	210f      	movs	r1, #15
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7ff ff83 	bl	800a8c0 <stts751_write_reg>
 800a9ba:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800a9bc:	697b      	ldr	r3, [r7, #20]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3718      	adds	r7, #24
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
	...

0800a9c8 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800a9d2:	f107 0210 	add.w	r2, r7, #16
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	2104      	movs	r1, #4
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7ff ff58 	bl	800a890 <stts751_read_reg>
 800a9e0:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d107      	bne.n	800a9f8 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800a9e8:	f107 020c 	add.w	r2, r7, #12
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	2103      	movs	r1, #3
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7ff ff4d 	bl	800a890 <stts751_read_reg>
 800a9f6:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 800a9f8:	7b3b      	ldrb	r3, [r7, #12]
 800a9fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	01db      	lsls	r3, r3, #7
 800aa02:	7c3a      	ldrb	r2, [r7, #16]
 800aa04:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800aa08:	b2d2      	uxtb	r2, r2
 800aa0a:	4413      	add	r3, r2
 800aa0c:	2b90      	cmp	r3, #144	@ 0x90
 800aa0e:	d025      	beq.n	800aa5c <stts751_temp_data_rate_get+0x94>
 800aa10:	2b90      	cmp	r3, #144	@ 0x90
 800aa12:	dc4f      	bgt.n	800aab4 <stts751_temp_data_rate_get+0xec>
 800aa14:	2b09      	cmp	r3, #9
 800aa16:	dc1b      	bgt.n	800aa50 <stts751_temp_data_rate_get+0x88>
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	db4b      	blt.n	800aab4 <stts751_temp_data_rate_get+0xec>
 800aa1c:	2b09      	cmp	r3, #9
 800aa1e:	d849      	bhi.n	800aab4 <stts751_temp_data_rate_get+0xec>
 800aa20:	a201      	add	r2, pc, #4	@ (adr r2, 800aa28 <stts751_temp_data_rate_get+0x60>)
 800aa22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa26:	bf00      	nop
 800aa28:	0800aa65 	.word	0x0800aa65
 800aa2c:	0800aa6d 	.word	0x0800aa6d
 800aa30:	0800aa75 	.word	0x0800aa75
 800aa34:	0800aa7d 	.word	0x0800aa7d
 800aa38:	0800aa85 	.word	0x0800aa85
 800aa3c:	0800aa8d 	.word	0x0800aa8d
 800aa40:	0800aa95 	.word	0x0800aa95
 800aa44:	0800aa9d 	.word	0x0800aa9d
 800aa48:	0800aaa5 	.word	0x0800aaa5
 800aa4c:	0800aaad 	.word	0x0800aaad
 800aa50:	2b80      	cmp	r3, #128	@ 0x80
 800aa52:	d12f      	bne.n	800aab4 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	2280      	movs	r2, #128	@ 0x80
 800aa58:	701a      	strb	r2, [r3, #0]
      break;
 800aa5a:	e02f      	b.n	800aabc <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	2290      	movs	r2, #144	@ 0x90
 800aa60:	701a      	strb	r2, [r3, #0]
      break;
 800aa62:	e02b      	b.n	800aabc <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2200      	movs	r2, #0
 800aa68:	701a      	strb	r2, [r3, #0]
      break;
 800aa6a:	e027      	b.n	800aabc <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	701a      	strb	r2, [r3, #0]
      break;
 800aa72:	e023      	b.n	800aabc <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	2202      	movs	r2, #2
 800aa78:	701a      	strb	r2, [r3, #0]
      break;
 800aa7a:	e01f      	b.n	800aabc <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	2203      	movs	r2, #3
 800aa80:	701a      	strb	r2, [r3, #0]
      break;
 800aa82:	e01b      	b.n	800aabc <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	2204      	movs	r2, #4
 800aa88:	701a      	strb	r2, [r3, #0]
      break;
 800aa8a:	e017      	b.n	800aabc <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2205      	movs	r2, #5
 800aa90:	701a      	strb	r2, [r3, #0]
      break;
 800aa92:	e013      	b.n	800aabc <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	2206      	movs	r2, #6
 800aa98:	701a      	strb	r2, [r3, #0]
      break;
 800aa9a:	e00f      	b.n	800aabc <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2207      	movs	r2, #7
 800aaa0:	701a      	strb	r2, [r3, #0]
      break;
 800aaa2:	e00b      	b.n	800aabc <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	2208      	movs	r2, #8
 800aaa8:	701a      	strb	r2, [r3, #0]
      break;
 800aaaa:	e007      	b.n	800aabc <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2209      	movs	r2, #9
 800aab0:	701a      	strb	r2, [r3, #0]
      break;
 800aab2:	e003      	b.n	800aabc <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2280      	movs	r2, #128	@ 0x80
 800aab8:	701a      	strb	r2, [r3, #0]
      break;
 800aaba:	bf00      	nop
  }

  return ret;
 800aabc:	697b      	ldr	r3, [r7, #20]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3718      	adds	r7, #24
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop

0800aac8 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	460b      	mov	r3, r1
 800aad2:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800aad4:	f107 0208 	add.w	r2, r7, #8
 800aad8:	2301      	movs	r3, #1
 800aada:	2103      	movs	r1, #3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7ff fed7 	bl	800a890 <stts751_read_reg>
 800aae2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10f      	bne.n	800ab0a <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 800aaea:	78fb      	ldrb	r3, [r7, #3]
 800aaec:	f003 0303 	and.w	r3, r3, #3
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	7a3b      	ldrb	r3, [r7, #8]
 800aaf4:	f362 0383 	bfi	r3, r2, #2, #2
 800aaf8:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800aafa:	f107 0208 	add.w	r2, r7, #8
 800aafe:	2301      	movs	r3, #1
 800ab00:	2103      	movs	r1, #3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7ff fedc 	bl	800a8c0 <stts751_write_reg>
 800ab08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800ab1e:	f107 0208 	add.w	r2, r7, #8
 800ab22:	2301      	movs	r3, #1
 800ab24:	2103      	movs	r1, #3
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7ff feb2 	bl	800a890 <stts751_read_reg>
 800ab2c:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 800ab2e:	7a3b      	ldrb	r3, [r7, #8]
 800ab30:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d81a      	bhi.n	800ab70 <stts751_resolution_get+0x5c>
 800ab3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab40 <stts751_resolution_get+0x2c>)
 800ab3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab40:	0800ab59 	.word	0x0800ab59
 800ab44:	0800ab61 	.word	0x0800ab61
 800ab48:	0800ab51 	.word	0x0800ab51
 800ab4c:	0800ab69 	.word	0x0800ab69
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	2202      	movs	r2, #2
 800ab54:	701a      	strb	r2, [r3, #0]
      break;
 800ab56:	e00f      	b.n	800ab78 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	701a      	strb	r2, [r3, #0]
      break;
 800ab5e:	e00b      	b.n	800ab78 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	2201      	movs	r2, #1
 800ab64:	701a      	strb	r2, [r3, #0]
      break;
 800ab66:	e007      	b.n	800ab78 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2203      	movs	r2, #3
 800ab6c:	701a      	strb	r2, [r3, #0]
      break;
 800ab6e:	e003      	b.n	800ab78 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	2202      	movs	r2, #2
 800ab74:	701a      	strb	r2, [r3, #0]
      break;
 800ab76:	bf00      	nop
  }

  return ret;
 800ab78:	68fb      	ldr	r3, [r7, #12]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop

0800ab84 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 800ab8e:	f107 0308 	add.w	r3, r7, #8
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	2301      	movs	r3, #1
 800ab96:	2100      	movs	r1, #0
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7ff fe79 	bl	800a890 <stts751_read_reg>
 800ab9e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d117      	bne.n	800abd6 <stts751_temperature_raw_get+0x52>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 800aba6:	f107 0208 	add.w	r2, r7, #8
 800abaa:	2301      	movs	r3, #1
 800abac:	2102      	movs	r1, #2
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7ff fe6e 	bl	800a890 <stts751_read_reg>
 800abb4:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 800abb6:	7a7b      	ldrb	r3, [r7, #9]
 800abb8:	b21a      	sxth	r2, r3
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	021b      	lsls	r3, r3, #8
 800abc8:	b29b      	uxth	r3, r3
 800abca:	7a3a      	ldrb	r2, [r7, #8]
 800abcc:	4413      	add	r3, r2
 800abce:	b29b      	uxth	r3, r3
 800abd0:	b21a      	sxth	r2, r3
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800abd6:	68fb      	ldr	r3, [r7, #12]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	460b      	mov	r3, r1
 800abea:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 800abec:	f107 0208 	add.w	r2, r7, #8
 800abf0:	2301      	movs	r3, #1
 800abf2:	2103      	movs	r1, #3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7ff fe4b 	bl	800a890 <stts751_read_reg>
 800abfa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10f      	bne.n	800ac22 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 800ac02:	78fb      	ldrb	r3, [r7, #3]
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	b2da      	uxtb	r2, r3
 800ac0a:	7a3b      	ldrb	r3, [r7, #8]
 800ac0c:	f362 13c7 	bfi	r3, r2, #7, #1
 800ac10:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 800ac12:	f107 0208 	add.w	r2, r7, #8
 800ac16:	2301      	movs	r3, #1
 800ac18:	2103      	movs	r1, #3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7ff fe50 	bl	800a8c0 <stts751_write_reg>
 800ac20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ac22:	68fb      	ldr	r3, [r7, #12]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	2301      	movs	r3, #1
 800ac3a:	21fd      	movs	r1, #253	@ 0xfd
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff fe27 	bl	800a890 <stts751_read_reg>
 800ac42:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d107      	bne.n	800ac5a <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	1c5a      	adds	r2, r3, #1
 800ac4e:	2301      	movs	r3, #1
 800ac50:	21fe      	movs	r1, #254	@ 0xfe
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7ff fe1c 	bl	800a890 <stts751_read_reg>
 800ac58:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d107      	bne.n	800ac70 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	1c9a      	adds	r2, r3, #2
 800ac64:	2301      	movs	r3, #1
 800ac66:	21ff      	movs	r1, #255	@ 0xff
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7ff fe11 	bl	800a890 <stts751_read_reg>
 800ac6e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 800ac70:	68fb      	ldr	r3, [r7, #12]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
	...

0800ac7c <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08c      	sub	sp, #48	@ 0x30
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800ac86:	2300      	movs	r3, #0
 800ac88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d07c      	beq.n	800ad92 <IKS01A3_ENV_SENSOR_Init+0x116>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b02      	cmp	r3, #2
 800ac9c:	f200 80b2 	bhi.w	800ae04 <IKS01A3_ENV_SENSOR_Init+0x188>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <IKS01A3_ENV_SENSOR_Init+0x32>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d039      	beq.n	800ad20 <IKS01A3_ENV_SENSOR_Init+0xa4>
 800acac:	e0aa      	b.n	800ae04 <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800acae:	6838      	ldr	r0, [r7, #0]
 800acb0:	f000 f976 	bl	800afa0 <HTS221_0_Probe>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800acba:	f04f 33ff 	mov.w	r3, #4294967295
 800acbe:	e0df      	b.n	800ae80 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800acc0:	4a71      	ldr	r2, [pc, #452]	@ (800ae88 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	4970      	ldr	r1, [pc, #448]	@ (800ae8c <IKS01A3_ENV_SENSOR_Init+0x210>)
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800acd2:	f107 0108 	add.w	r1, r7, #8
 800acd6:	4610      	mov	r0, r2
 800acd8:	4798      	blx	r3
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ace0:	f06f 0306 	mvn.w	r3, #6
 800ace4:	e0cc      	b.n	800ae80 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800ace6:	7a3b      	ldrb	r3, [r7, #8]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d103      	bne.n	800acf4 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 800acec:	6a3b      	ldr	r3, [r7, #32]
 800acee:	f043 0301 	orr.w	r3, r3, #1
 800acf2:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800acf4:	7abb      	ldrb	r3, [r7, #10]
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d103      	bne.n	800ad02 <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	f043 0304 	orr.w	r3, r3, #4
 800ad00:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ad02:	7a7b      	ldrb	r3, [r7, #9]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d103      	bne.n	800ad10 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800ad08:	6a3b      	ldr	r3, [r7, #32]
 800ad0a:	f043 0302 	orr.w	r3, r3, #2
 800ad0e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800ad10:	7afb      	ldrb	r3, [r7, #11]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d17a      	bne.n	800ae0c <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800ad16:	6a3b      	ldr	r3, [r7, #32]
 800ad18:	f043 0308 	orr.w	r3, r3, #8
 800ad1c:	623b      	str	r3, [r7, #32]
      }
      break;
 800ad1e:	e075      	b.n	800ae0c <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 800ad20:	6838      	ldr	r0, [r7, #0]
 800ad22:	f000 fa07 	bl	800b134 <LPS22HH_0_Probe>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d002      	beq.n	800ad32 <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800ad2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad30:	e0a6      	b.n	800ae80 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800ad32:	4a55      	ldr	r2, [pc, #340]	@ (800ae88 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	4953      	ldr	r1, [pc, #332]	@ (800ae8c <IKS01A3_ENV_SENSOR_Init+0x210>)
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ad44:	f107 0108 	add.w	r1, r7, #8
 800ad48:	4610      	mov	r0, r2
 800ad4a:	4798      	blx	r3
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d002      	beq.n	800ad58 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ad52:	f06f 0306 	mvn.w	r3, #6
 800ad56:	e093      	b.n	800ae80 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800ad58:	7a3b      	ldrb	r3, [r7, #8]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d103      	bne.n	800ad66 <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800ad5e:	6a3b      	ldr	r3, [r7, #32]
 800ad60:	f043 0301 	orr.w	r3, r3, #1
 800ad64:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800ad66:	7abb      	ldrb	r3, [r7, #10]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d103      	bne.n	800ad74 <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800ad6c:	6a3b      	ldr	r3, [r7, #32]
 800ad6e:	f043 0304 	orr.w	r3, r3, #4
 800ad72:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ad74:	7a7b      	ldrb	r3, [r7, #9]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d103      	bne.n	800ad82 <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800ad7a:	6a3b      	ldr	r3, [r7, #32]
 800ad7c:	f043 0302 	orr.w	r3, r3, #2
 800ad80:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800ad82:	7afb      	ldrb	r3, [r7, #11]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d143      	bne.n	800ae10 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800ad88:	6a3b      	ldr	r3, [r7, #32]
 800ad8a:	f043 0308 	orr.w	r3, r3, #8
 800ad8e:	623b      	str	r3, [r7, #32]
      }
      break;
 800ad90:	e03e      	b.n	800ae10 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 800ad92:	6838      	ldr	r0, [r7, #0]
 800ad94:	f000 fa9a 	bl	800b2cc <STTS751_0_Probe>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d002      	beq.n	800ada4 <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800ad9e:	f04f 33ff 	mov.w	r3, #4294967295
 800ada2:	e06d      	b.n	800ae80 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800ada4:	4a38      	ldr	r2, [pc, #224]	@ (800ae88 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	4937      	ldr	r1, [pc, #220]	@ (800ae8c <IKS01A3_ENV_SENSOR_Init+0x210>)
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800adb6:	f107 0108 	add.w	r1, r7, #8
 800adba:	4610      	mov	r0, r2
 800adbc:	4798      	blx	r3
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800adc4:	f06f 0306 	mvn.w	r3, #6
 800adc8:	e05a      	b.n	800ae80 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800adca:	7a3b      	ldrb	r3, [r7, #8]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d103      	bne.n	800add8 <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	f043 0301 	orr.w	r3, r3, #1
 800add6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800add8:	7abb      	ldrb	r3, [r7, #10]
 800adda:	2b01      	cmp	r3, #1
 800addc:	d103      	bne.n	800ade6 <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	f043 0304 	orr.w	r3, r3, #4
 800ade4:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ade6:	7a7b      	ldrb	r3, [r7, #9]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d103      	bne.n	800adf4 <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	f043 0302 	orr.w	r3, r3, #2
 800adf2:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800adf4:	7afb      	ldrb	r3, [r7, #11]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d10c      	bne.n	800ae14 <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	f043 0308 	orr.w	r3, r3, #8
 800ae00:	623b      	str	r3, [r7, #32]
      }
      break;
 800ae02:	e007      	b.n	800ae14 <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800ae04:	f06f 0301 	mvn.w	r3, #1
 800ae08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800ae0a:	e004      	b.n	800ae16 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 800ae0c:	bf00      	nop
 800ae0e:	e002      	b.n	800ae16 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 800ae10:	bf00      	nop
 800ae12:	e000      	b.n	800ae16 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 800ae14:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800ae16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800ae1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1e:	e02f      	b.n	800ae80 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 800ae20:	2300      	movs	r3, #0
 800ae22:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae24:	e028      	b.n	800ae78 <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d11c      	bne.n	800ae6c <IKS01A3_ENV_SENSOR_Init+0x1f0>
 800ae32:	6a3a      	ldr	r2, [r7, #32]
 800ae34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae36:	4013      	ands	r3, r2
 800ae38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d116      	bne.n	800ae6c <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800ae3e:	4a14      	ldr	r2, [pc, #80]	@ (800ae90 <IKS01A3_ENV_SENSOR_Init+0x214>)
 800ae40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae46:	4913      	ldr	r1, [pc, #76]	@ (800ae94 <IKS01A3_ENV_SENSOR_Init+0x218>)
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	0092      	lsls	r2, r2, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	490d      	ldr	r1, [pc, #52]	@ (800ae8c <IKS01A3_ENV_SENSOR_Init+0x210>)
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	4798      	blx	r3
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d002      	beq.n	800ae6c <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800ae66:	f06f 0304 	mvn.w	r3, #4
 800ae6a:	e009      	b.n	800ae80 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 800ae6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae6e:	005b      	lsls	r3, r3, #1
 800ae70:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 800ae72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae74:	3301      	adds	r3, #1
 800ae76:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	d9d3      	bls.n	800ae26 <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800ae7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3730      	adds	r7, #48	@ 0x30
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	200004c8 	.word	0x200004c8
 800ae8c:	2000048c 	.word	0x2000048c
 800ae90:	20000158 	.word	0x20000158
 800ae94:	20000498 	.word	0x20000498

0800ae98 <IKS01A3_ENV_SENSOR_SetOutputDataRate>:
  * @param  Function Environmental sensor function
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d903      	bls.n	800aeb2 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800aeaa:	f06f 0301 	mvn.w	r3, #1
 800aeae:	617b      	str	r3, [r7, #20]
 800aeb0:	e027      	b.n	800af02 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800aeb2:	4a16      	ldr	r2, [pc, #88]	@ (800af0c <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x74>)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	4013      	ands	r3, r2
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d11b      	bne.n	800aefc <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800aec4:	4a12      	ldr	r2, [pc, #72]	@ (800af10 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x78>)
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aecc:	4911      	ldr	r1, [pc, #68]	@ (800af14 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x7c>)
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	0092      	lsls	r2, r2, #2
 800aed2:	4413      	add	r3, r2
 800aed4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	490f      	ldr	r1, [pc, #60]	@ (800af18 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x80>)
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aee2:	6879      	ldr	r1, [r7, #4]
 800aee4:	4610      	mov	r0, r2
 800aee6:	4798      	blx	r3
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d003      	beq.n	800aef6 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aeee:	f06f 0304 	mvn.w	r3, #4
 800aef2:	617b      	str	r3, [r7, #20]
 800aef4:	e005      	b.n	800af02 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aef6:	2300      	movs	r3, #0
 800aef8:	617b      	str	r3, [r7, #20]
 800aefa:	e002      	b.n	800af02 <IKS01A3_ENV_SENSOR_SetOutputDataRate+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800aefc:	f06f 0301 	mvn.w	r3, #1
 800af00:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800af02:	697b      	ldr	r3, [r7, #20]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3718      	adds	r7, #24
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	200004d4 	.word	0x200004d4
 800af10:	20000158 	.word	0x20000158
 800af14:	20000498 	.word	0x20000498
 800af18:	2000048c 	.word	0x2000048c

0800af1c <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	d903      	bls.n	800af36 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800af2e:	f06f 0301 	mvn.w	r3, #1
 800af32:	617b      	str	r3, [r7, #20]
 800af34:	e027      	b.n	800af86 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800af36:	4a16      	ldr	r2, [pc, #88]	@ (800af90 <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	4013      	ands	r3, r2
 800af42:	68ba      	ldr	r2, [r7, #8]
 800af44:	429a      	cmp	r2, r3
 800af46:	d11b      	bne.n	800af80 <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800af48:	4a12      	ldr	r2, [pc, #72]	@ (800af94 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af50:	4911      	ldr	r1, [pc, #68]	@ (800af98 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	0092      	lsls	r2, r2, #2
 800af56:	4413      	add	r3, r2
 800af58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	490f      	ldr	r1, [pc, #60]	@ (800af9c <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af66:	6879      	ldr	r1, [r7, #4]
 800af68:	4610      	mov	r0, r2
 800af6a:	4798      	blx	r3
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800af72:	f06f 0304 	mvn.w	r3, #4
 800af76:	617b      	str	r3, [r7, #20]
 800af78:	e005      	b.n	800af86 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800af7a:	2300      	movs	r3, #0
 800af7c:	617b      	str	r3, [r7, #20]
 800af7e:	e002      	b.n	800af86 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800af80:	f06f 0301 	mvn.w	r3, #1
 800af84:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800af86:	697b      	ldr	r3, [r7, #20]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	200004d4 	.word	0x200004d4
 800af94:	20000158 	.word	0x20000158
 800af98:	20000498 	.word	0x20000498
 800af9c:	2000048c 	.word	0x2000048c

0800afa0 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b092      	sub	sp, #72	@ 0x48
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800afa8:	2300      	movs	r3, #0
 800afaa:	647b      	str	r3, [r7, #68]	@ 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800afac:	2300      	movs	r3, #0
 800afae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800afb0:	23bf      	movs	r3, #191	@ 0xbf
 800afb2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800afb6:	4b51      	ldr	r3, [pc, #324]	@ (800b0fc <HTS221_0_Probe+0x15c>)
 800afb8:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800afba:	4b51      	ldr	r3, [pc, #324]	@ (800b100 <HTS221_0_Probe+0x160>)
 800afbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800afbe:	4b51      	ldr	r3, [pc, #324]	@ (800b104 <HTS221_0_Probe+0x164>)
 800afc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800afc2:	4b51      	ldr	r3, [pc, #324]	@ (800b108 <HTS221_0_Probe+0x168>)
 800afc4:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800afc6:	4b51      	ldr	r3, [pc, #324]	@ (800b10c <HTS221_0_Probe+0x16c>)
 800afc8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800afca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afce:	4619      	mov	r1, r3
 800afd0:	484f      	ldr	r0, [pc, #316]	@ (800b110 <HTS221_0_Probe+0x170>)
 800afd2:	f7f7 feaf 	bl	8002d34 <HTS221_RegisterBusIO>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d003      	beq.n	800afe4 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800afdc:	f06f 0306 	mvn.w	r3, #6
 800afe0:	647b      	str	r3, [r7, #68]	@ 0x44
 800afe2:	e085      	b.n	800b0f0 <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800afe4:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800afe8:	4619      	mov	r1, r3
 800afea:	4849      	ldr	r0, [pc, #292]	@ (800b110 <HTS221_0_Probe+0x170>)
 800afec:	f7f7 ff2b 	bl	8002e46 <HTS221_ReadID>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aff6:	f06f 0306 	mvn.w	r3, #6
 800affa:	647b      	str	r3, [r7, #68]	@ 0x44
 800affc:	e078      	b.n	800b0f0 <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 800affe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b002:	2bbc      	cmp	r3, #188	@ 0xbc
 800b004:	d003      	beq.n	800b00e <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b006:	f06f 0306 	mvn.w	r3, #6
 800b00a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b00c:	e070      	b.n	800b0f0 <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800b00e:	f107 0308 	add.w	r3, r7, #8
 800b012:	4619      	mov	r1, r3
 800b014:	483e      	ldr	r0, [pc, #248]	@ (800b110 <HTS221_0_Probe+0x170>)
 800b016:	f7f7 ff2d 	bl	8002e74 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 800b01a:	7a3b      	ldrb	r3, [r7, #8]
 800b01c:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b01e:	7a7b      	ldrb	r3, [r7, #9]
 800b020:	005b      	lsls	r3, r3, #1
 800b022:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b024:	7abb      	ldrb	r3, [r7, #10]
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b02a:	7afb      	ldrb	r3, [r7, #11]
 800b02c:	00db      	lsls	r3, r3, #3
 800b02e:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 800b030:	4a38      	ldr	r2, [pc, #224]	@ (800b114 <HTS221_0_Probe+0x174>)
 800b032:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 800b034:	4b38      	ldr	r3, [pc, #224]	@ (800b118 <HTS221_0_Probe+0x178>)
 800b036:	4a36      	ldr	r2, [pc, #216]	@ (800b110 <HTS221_0_Probe+0x170>)
 800b038:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800b03a:	4b38      	ldr	r3, [pc, #224]	@ (800b11c <HTS221_0_Probe+0x17c>)
 800b03c:	4a38      	ldr	r2, [pc, #224]	@ (800b120 <HTS221_0_Probe+0x180>)
 800b03e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b042:	2b00      	cmp	r3, #0
 800b044:	d11d      	bne.n	800b082 <HTS221_0_Probe+0xe2>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f003 0301 	and.w	r3, r3, #1
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d018      	beq.n	800b082 <HTS221_0_Probe+0xe2>
 800b050:	7a3b      	ldrb	r3, [r7, #8]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d115      	bne.n	800b082 <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800b056:	4b33      	ldr	r3, [pc, #204]	@ (800b124 <HTS221_0_Probe+0x184>)
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	4a33      	ldr	r2, [pc, #204]	@ (800b128 <HTS221_0_Probe+0x188>)
 800b05c:	4933      	ldr	r1, [pc, #204]	@ (800b12c <HTS221_0_Probe+0x18c>)
 800b05e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800b062:	4b2e      	ldr	r3, [pc, #184]	@ (800b11c <HTS221_0_Probe+0x17c>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a2b      	ldr	r2, [pc, #172]	@ (800b118 <HTS221_0_Probe+0x178>)
 800b06a:	6812      	ldr	r2, [r2, #0]
 800b06c:	4610      	mov	r0, r2
 800b06e:	4798      	blx	r3
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d003      	beq.n	800b07e <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b076:	f06f 0304 	mvn.w	r3, #4
 800b07a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b07c:	e001      	b.n	800b082 <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b07e:	2300      	movs	r3, #0
 800b080:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800b082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b084:	2b00      	cmp	r3, #0
 800b086:	d11d      	bne.n	800b0c4 <HTS221_0_Probe+0x124>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f003 0304 	and.w	r3, r3, #4
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d018      	beq.n	800b0c4 <HTS221_0_Probe+0x124>
 800b092:	7abb      	ldrb	r3, [r7, #10]
 800b094:	2b01      	cmp	r3, #1
 800b096:	d115      	bne.n	800b0c4 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800b098:	4b22      	ldr	r3, [pc, #136]	@ (800b124 <HTS221_0_Probe+0x184>)
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	4a22      	ldr	r2, [pc, #136]	@ (800b128 <HTS221_0_Probe+0x188>)
 800b09e:	4924      	ldr	r1, [pc, #144]	@ (800b130 <HTS221_0_Probe+0x190>)
 800b0a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800b0a4:	4b1d      	ldr	r3, [pc, #116]	@ (800b11c <HTS221_0_Probe+0x17c>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a1b      	ldr	r2, [pc, #108]	@ (800b118 <HTS221_0_Probe+0x178>)
 800b0ac:	6812      	ldr	r2, [r2, #0]
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	4798      	blx	r3
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d003      	beq.n	800b0c0 <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0b8:	f06f 0304 	mvn.w	r3, #4
 800b0bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0be:	e001      	b.n	800b0c4 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b0c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d107      	bne.n	800b0da <HTS221_0_Probe+0x13a>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f003 0302 	and.w	r3, r3, #2
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0d4:	f06f 0304 	mvn.w	r3, #4
 800b0d8:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b0da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d107      	bne.n	800b0f0 <HTS221_0_Probe+0x150>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f003 0308 	and.w	r3, r3, #8
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d002      	beq.n	800b0f0 <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0ea:	f06f 0304 	mvn.w	r3, #4
 800b0ee:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b0f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3748      	adds	r7, #72	@ 0x48
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	080028b9 	.word	0x080028b9
 800b100:	0800291d 	.word	0x0800291d
 800b104:	080029d1 	.word	0x080029d1
 800b108:	0800296d 	.word	0x0800296d
 800b10c:	08002a35 	.word	0x08002a35
 800b110:	200004e0 	.word	0x200004e0
 800b114:	200004d4 	.word	0x200004d4
 800b118:	2000048c 	.word	0x2000048c
 800b11c:	200004c8 	.word	0x200004c8
 800b120:	20000004 	.word	0x20000004
 800b124:	20000158 	.word	0x20000158
 800b128:	20000498 	.word	0x20000498
 800b12c:	20000028 	.word	0x20000028
 800b130:	20000014 	.word	0x20000014

0800b134 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b092      	sub	sp, #72	@ 0x48
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b13c:	2300      	movs	r3, #0
 800b13e:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 800b140:	2300      	movs	r3, #0
 800b142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 800b144:	23bb      	movs	r3, #187	@ 0xbb
 800b146:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b14a:	4b52      	ldr	r3, [pc, #328]	@ (800b294 <LPS22HH_0_Probe+0x160>)
 800b14c:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b14e:	4b52      	ldr	r3, [pc, #328]	@ (800b298 <LPS22HH_0_Probe+0x164>)
 800b150:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b152:	4b52      	ldr	r3, [pc, #328]	@ (800b29c <LPS22HH_0_Probe+0x168>)
 800b154:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b156:	4b52      	ldr	r3, [pc, #328]	@ (800b2a0 <LPS22HH_0_Probe+0x16c>)
 800b158:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b15a:	4b52      	ldr	r3, [pc, #328]	@ (800b2a4 <LPS22HH_0_Probe+0x170>)
 800b15c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800b15e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b162:	4619      	mov	r1, r3
 800b164:	4850      	ldr	r0, [pc, #320]	@ (800b2a8 <LPS22HH_0_Probe+0x174>)
 800b166:	f7fa ff45 	bl	8005ff4 <LPS22HH_RegisterBusIO>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d003      	beq.n	800b178 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b170:	f06f 0306 	mvn.w	r3, #6
 800b174:	647b      	str	r3, [r7, #68]	@ 0x44
 800b176:	e087      	b.n	800b288 <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 800b178:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b17c:	4619      	mov	r1, r3
 800b17e:	484a      	ldr	r0, [pc, #296]	@ (800b2a8 <LPS22HH_0_Probe+0x174>)
 800b180:	f7fa ffe1 	bl	8006146 <LPS22HH_ReadID>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d003      	beq.n	800b192 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b18a:	f06f 0306 	mvn.w	r3, #6
 800b18e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b190:	e07a      	b.n	800b288 <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 800b192:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b196:	2bb3      	cmp	r3, #179	@ 0xb3
 800b198:	d003      	beq.n	800b1a2 <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b19a:	f06f 0306 	mvn.w	r3, #6
 800b19e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1a0:	e072      	b.n	800b288 <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 800b1a2:	f107 0308 	add.w	r3, r7, #8
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	483f      	ldr	r0, [pc, #252]	@ (800b2a8 <LPS22HH_0_Probe+0x174>)
 800b1aa:	f7fa ffe3 	bl	8006174 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 800b1ae:	7a3b      	ldrb	r3, [r7, #8]
 800b1b0:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 800b1b2:	7a7b      	ldrb	r3, [r7, #9]
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 800b1b8:	7abb      	ldrb	r3, [r7, #10]
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 800b1be:	7afb      	ldrb	r3, [r7, #11]
 800b1c0:	00db      	lsls	r3, r3, #3
 800b1c2:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 800b1c4:	4a39      	ldr	r2, [pc, #228]	@ (800b2ac <LPS22HH_0_Probe+0x178>)
 800b1c6:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 800b1c8:	4b39      	ldr	r3, [pc, #228]	@ (800b2b0 <LPS22HH_0_Probe+0x17c>)
 800b1ca:	4a37      	ldr	r2, [pc, #220]	@ (800b2a8 <LPS22HH_0_Probe+0x174>)
 800b1cc:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800b1ce:	4b39      	ldr	r3, [pc, #228]	@ (800b2b4 <LPS22HH_0_Probe+0x180>)
 800b1d0:	4a39      	ldr	r2, [pc, #228]	@ (800b2b8 <LPS22HH_0_Probe+0x184>)
 800b1d2:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b1d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d11e      	bne.n	800b218 <LPS22HH_0_Probe+0xe4>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f003 0301 	and.w	r3, r3, #1
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d019      	beq.n	800b218 <LPS22HH_0_Probe+0xe4>
 800b1e4:	7a3b      	ldrb	r3, [r7, #8]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d116      	bne.n	800b218 <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800b1ea:	4b34      	ldr	r3, [pc, #208]	@ (800b2bc <LPS22HH_0_Probe+0x188>)
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	4a34      	ldr	r2, [pc, #208]	@ (800b2c0 <LPS22HH_0_Probe+0x18c>)
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	4934      	ldr	r1, [pc, #208]	@ (800b2c4 <LPS22HH_0_Probe+0x190>)
 800b1f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800b1f8:	4b2e      	ldr	r3, [pc, #184]	@ (800b2b4 <LPS22HH_0_Probe+0x180>)
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a2c      	ldr	r2, [pc, #176]	@ (800b2b0 <LPS22HH_0_Probe+0x17c>)
 800b200:	6852      	ldr	r2, [r2, #4]
 800b202:	4610      	mov	r0, r2
 800b204:	4798      	blx	r3
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b20c:	f06f 0304 	mvn.w	r3, #4
 800b210:	647b      	str	r3, [r7, #68]	@ 0x44
 800b212:	e001      	b.n	800b218 <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b214:	2300      	movs	r3, #0
 800b216:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800b218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d11e      	bne.n	800b25c <LPS22HH_0_Probe+0x128>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f003 0302 	and.w	r3, r3, #2
 800b224:	2b00      	cmp	r3, #0
 800b226:	d019      	beq.n	800b25c <LPS22HH_0_Probe+0x128>
 800b228:	7a7b      	ldrb	r3, [r7, #9]
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d116      	bne.n	800b25c <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800b22e:	4b23      	ldr	r3, [pc, #140]	@ (800b2bc <LPS22HH_0_Probe+0x188>)
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	4a23      	ldr	r2, [pc, #140]	@ (800b2c0 <LPS22HH_0_Probe+0x18c>)
 800b234:	3304      	adds	r3, #4
 800b236:	4924      	ldr	r1, [pc, #144]	@ (800b2c8 <LPS22HH_0_Probe+0x194>)
 800b238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800b23c:	4b1d      	ldr	r3, [pc, #116]	@ (800b2b4 <LPS22HH_0_Probe+0x180>)
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a1b      	ldr	r2, [pc, #108]	@ (800b2b0 <LPS22HH_0_Probe+0x17c>)
 800b244:	6852      	ldr	r2, [r2, #4]
 800b246:	4610      	mov	r0, r2
 800b248:	4798      	blx	r3
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d003      	beq.n	800b258 <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b250:	f06f 0304 	mvn.w	r3, #4
 800b254:	647b      	str	r3, [r7, #68]	@ 0x44
 800b256:	e001      	b.n	800b25c <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b258:	2300      	movs	r3, #0
 800b25a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b25c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d107      	bne.n	800b272 <LPS22HH_0_Probe+0x13e>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f003 0304 	and.w	r3, r3, #4
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b26c:	f06f 0304 	mvn.w	r3, #4
 800b270:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b274:	2b00      	cmp	r3, #0
 800b276:	d107      	bne.n	800b288 <LPS22HH_0_Probe+0x154>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f003 0308 	and.w	r3, r3, #8
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d002      	beq.n	800b288 <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b282:	f06f 0304 	mvn.w	r3, #4
 800b286:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 800b288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3748      	adds	r7, #72	@ 0x48
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	080028b9 	.word	0x080028b9
 800b298:	0800291d 	.word	0x0800291d
 800b29c:	080029d1 	.word	0x080029d1
 800b2a0:	0800296d 	.word	0x0800296d
 800b2a4:	08002a35 	.word	0x08002a35
 800b2a8:	20000514 	.word	0x20000514
 800b2ac:	200004d4 	.word	0x200004d4
 800b2b0:	2000048c 	.word	0x2000048c
 800b2b4:	200004c8 	.word	0x200004c8
 800b2b8:	200000a4 	.word	0x200000a4
 800b2bc:	20000158 	.word	0x20000158
 800b2c0:	20000498 	.word	0x20000498
 800b2c4:	200000c8 	.word	0x200000c8
 800b2c8:	200000b4 	.word	0x200000b4

0800b2cc <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b092      	sub	sp, #72	@ 0x48
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 800b2d8:	2300      	movs	r3, #0
 800b2da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 800b2dc:	2395      	movs	r3, #149	@ 0x95
 800b2de:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b2e2:	4b46      	ldr	r3, [pc, #280]	@ (800b3fc <STTS751_0_Probe+0x130>)
 800b2e4:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b2e6:	4b46      	ldr	r3, [pc, #280]	@ (800b400 <STTS751_0_Probe+0x134>)
 800b2e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b2ea:	4b46      	ldr	r3, [pc, #280]	@ (800b404 <STTS751_0_Probe+0x138>)
 800b2ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b2ee:	4b46      	ldr	r3, [pc, #280]	@ (800b408 <STTS751_0_Probe+0x13c>)
 800b2f0:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b2f2:	4b46      	ldr	r3, [pc, #280]	@ (800b40c <STTS751_0_Probe+0x140>)
 800b2f4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 800b2f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	4844      	ldr	r0, [pc, #272]	@ (800b410 <STTS751_0_Probe+0x144>)
 800b2fe:	f7fe ffdd 	bl	800a2bc <STTS751_RegisterBusIO>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d003      	beq.n	800b310 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b308:	f06f 0306 	mvn.w	r3, #6
 800b30c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b30e:	e070      	b.n	800b3f2 <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 800b310:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b314:	4619      	mov	r1, r3
 800b316:	483e      	ldr	r0, [pc, #248]	@ (800b410 <STTS751_0_Probe+0x144>)
 800b318:	f7ff f86f 	bl	800a3fa <STTS751_ReadID>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b322:	f06f 0306 	mvn.w	r3, #6
 800b326:	647b      	str	r3, [r7, #68]	@ 0x44
 800b328:	e063      	b.n	800b3f2 <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 800b32a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b32e:	2b53      	cmp	r3, #83	@ 0x53
 800b330:	d003      	beq.n	800b33a <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b332:	f06f 0306 	mvn.w	r3, #6
 800b336:	647b      	str	r3, [r7, #68]	@ 0x44
 800b338:	e05b      	b.n	800b3f2 <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 800b33a:	f107 0308 	add.w	r3, r7, #8
 800b33e:	4619      	mov	r1, r3
 800b340:	4833      	ldr	r0, [pc, #204]	@ (800b410 <STTS751_0_Probe+0x144>)
 800b342:	f7ff f875 	bl	800a430 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 800b346:	7a3b      	ldrb	r3, [r7, #8]
 800b348:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 800b34a:	7a7b      	ldrb	r3, [r7, #9]
 800b34c:	005b      	lsls	r3, r3, #1
 800b34e:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 800b350:	7abb      	ldrb	r3, [r7, #10]
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 800b356:	7afb      	ldrb	r3, [r7, #11]
 800b358:	00db      	lsls	r3, r3, #3
 800b35a:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 800b35c:	4a2d      	ldr	r2, [pc, #180]	@ (800b414 <STTS751_0_Probe+0x148>)
 800b35e:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 800b360:	4b2d      	ldr	r3, [pc, #180]	@ (800b418 <STTS751_0_Probe+0x14c>)
 800b362:	4a2b      	ldr	r2, [pc, #172]	@ (800b410 <STTS751_0_Probe+0x144>)
 800b364:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 800b366:	4b2d      	ldr	r3, [pc, #180]	@ (800b41c <STTS751_0_Probe+0x150>)
 800b368:	4a2d      	ldr	r2, [pc, #180]	@ (800b420 <STTS751_0_Probe+0x154>)
 800b36a:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b36c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d11e      	bne.n	800b3b0 <STTS751_0_Probe+0xe4>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f003 0301 	and.w	r3, r3, #1
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d019      	beq.n	800b3b0 <STTS751_0_Probe+0xe4>
 800b37c:	7a3b      	ldrb	r3, [r7, #8]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d116      	bne.n	800b3b0 <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 800b382:	4b28      	ldr	r3, [pc, #160]	@ (800b424 <STTS751_0_Probe+0x158>)
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	4a28      	ldr	r2, [pc, #160]	@ (800b428 <STTS751_0_Probe+0x15c>)
 800b388:	3308      	adds	r3, #8
 800b38a:	4928      	ldr	r1, [pc, #160]	@ (800b42c <STTS751_0_Probe+0x160>)
 800b38c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 800b390:	4b22      	ldr	r3, [pc, #136]	@ (800b41c <STTS751_0_Probe+0x150>)
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a20      	ldr	r2, [pc, #128]	@ (800b418 <STTS751_0_Probe+0x14c>)
 800b398:	6892      	ldr	r2, [r2, #8]
 800b39a:	4610      	mov	r0, r2
 800b39c:	4798      	blx	r3
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d003      	beq.n	800b3ac <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3a4:	f06f 0304 	mvn.w	r3, #4
 800b3a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3aa:	e001      	b.n	800b3b0 <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b3b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d107      	bne.n	800b3c6 <STTS751_0_Probe+0xfa>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f003 0304 	and.w	r3, r3, #4
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d002      	beq.n	800b3c6 <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3c0:	f06f 0304 	mvn.w	r3, #4
 800b3c4:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b3c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d107      	bne.n	800b3dc <STTS751_0_Probe+0x110>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f003 0302 	and.w	r3, r3, #2
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d002      	beq.n	800b3dc <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3d6:	f06f 0304 	mvn.w	r3, #4
 800b3da:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b3dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d107      	bne.n	800b3f2 <STTS751_0_Probe+0x126>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f003 0308 	and.w	r3, r3, #8
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3ec:	f06f 0304 	mvn.w	r3, #4
 800b3f0:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 800b3f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3748      	adds	r7, #72	@ 0x48
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	080028b9 	.word	0x080028b9
 800b400:	0800291d 	.word	0x0800291d
 800b404:	080029d1 	.word	0x080029d1
 800b408:	0800296d 	.word	0x0800296d
 800b40c:	08002a35 	.word	0x08002a35
 800b410:	20000548 	.word	0x20000548
 800b414:	200004d4 	.word	0x200004d4
 800b418:	2000048c 	.word	0x2000048c
 800b41c:	200004c8 	.word	0x200004c8
 800b420:	20000134 	.word	0x20000134
 800b424:	20000158 	.word	0x20000158
 800b428:	20000498 	.word	0x20000498
 800b42c:	20000144 	.word	0x20000144

0800b430 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b08e      	sub	sp, #56	@ 0x38
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b43a:	2300      	movs	r3, #0
 800b43c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800b43e:	2301      	movs	r3, #1
 800b440:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b442:	2300      	movs	r3, #0
 800b444:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d06e      	beq.n	800b52a <IKS01A3_MOTION_SENSOR_Init+0xfa>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b02      	cmp	r3, #2
 800b450:	f200 809d 	bhi.w	800b58e <IKS01A3_MOTION_SENSOR_Init+0x15e>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d003      	beq.n	800b462 <IKS01A3_MOTION_SENSOR_Init+0x32>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d032      	beq.n	800b4c6 <IKS01A3_MOTION_SENSOR_Init+0x96>
 800b460:	e095      	b.n	800b58e <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 800b462:	6838      	ldr	r0, [r7, #0]
 800b464:	f000 f968 	bl	800b738 <LSM6DSO_0_Probe>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d002      	beq.n	800b474 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800b46e:	f04f 33ff 	mov.w	r3, #4294967295
 800b472:	e0cc      	b.n	800b60e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b474:	4a68      	ldr	r2, [pc, #416]	@ (800b618 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	4967      	ldr	r1, [pc, #412]	@ (800b61c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b486:	f107 010c 	add.w	r1, r7, #12
 800b48a:	4610      	mov	r0, r2
 800b48c:	4798      	blx	r3
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d002      	beq.n	800b49a <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b494:	f06f 0306 	mvn.w	r3, #6
 800b498:	e0b9      	b.n	800b60e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b49a:	7b3b      	ldrb	r3, [r7, #12]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d103      	bne.n	800b4a8 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800b4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a2:	f043 0302 	orr.w	r3, r3, #2
 800b4a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b4a8:	7b7b      	ldrb	r3, [r7, #13]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d103      	bne.n	800b4b6 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800b4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b0:	f043 0301 	orr.w	r3, r3, #1
 800b4b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b4b6:	7bbb      	ldrb	r3, [r7, #14]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d16c      	bne.n	800b596 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800b4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4be:	f043 0304 	orr.w	r3, r3, #4
 800b4c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b4c4:	e067      	b.n	800b596 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 800b4c6:	6838      	ldr	r0, [r7, #0]
 800b4c8:	f000 f9f6 	bl	800b8b8 <LIS2DW12_0_Probe>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d002      	beq.n	800b4d8 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800b4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d6:	e09a      	b.n	800b60e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b4d8:	4a4f      	ldr	r2, [pc, #316]	@ (800b618 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	494e      	ldr	r1, [pc, #312]	@ (800b61c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b4ea:	f107 010c 	add.w	r1, r7, #12
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	4798      	blx	r3
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d002      	beq.n	800b4fe <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b4f8:	f06f 0306 	mvn.w	r3, #6
 800b4fc:	e087      	b.n	800b60e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b4fe:	7b3b      	ldrb	r3, [r7, #12]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d103      	bne.n	800b50c <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800b504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b506:	f043 0302 	orr.w	r3, r3, #2
 800b50a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b50c:	7b7b      	ldrb	r3, [r7, #13]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d103      	bne.n	800b51a <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800b512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b514:	f043 0301 	orr.w	r3, r3, #1
 800b518:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b51a:	7bbb      	ldrb	r3, [r7, #14]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d13c      	bne.n	800b59a <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800b520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b522:	f043 0304 	orr.w	r3, r3, #4
 800b526:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b528:	e037      	b.n	800b59a <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b52a:	6838      	ldr	r0, [r7, #0]
 800b52c:	f000 fa6c 	bl	800ba08 <LIS2MDL_0_Probe>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d002      	beq.n	800b53c <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800b536:	f04f 33ff 	mov.w	r3, #4294967295
 800b53a:	e068      	b.n	800b60e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b53c:	4a36      	ldr	r2, [pc, #216]	@ (800b618 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	4935      	ldr	r1, [pc, #212]	@ (800b61c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b54e:	f107 010c 	add.w	r1, r7, #12
 800b552:	4610      	mov	r0, r2
 800b554:	4798      	blx	r3
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d002      	beq.n	800b562 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b55c:	f06f 0306 	mvn.w	r3, #6
 800b560:	e055      	b.n	800b60e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b562:	7b3b      	ldrb	r3, [r7, #12]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d103      	bne.n	800b570 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800b568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b56a:	f043 0302 	orr.w	r3, r3, #2
 800b56e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b570:	7b7b      	ldrb	r3, [r7, #13]
 800b572:	2b01      	cmp	r3, #1
 800b574:	d103      	bne.n	800b57e <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800b576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b578:	f043 0301 	orr.w	r3, r3, #1
 800b57c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b57e:	7bbb      	ldrb	r3, [r7, #14]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d10c      	bne.n	800b59e <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800b584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b586:	f043 0304 	orr.w	r3, r3, #4
 800b58a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b58c:	e007      	b.n	800b59e <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b58e:	f06f 0301 	mvn.w	r3, #1
 800b592:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800b594:	e004      	b.n	800b5a0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800b596:	bf00      	nop
 800b598:	e002      	b.n	800b5a0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800b59a:	bf00      	nop
 800b59c:	e000      	b.n	800b5a0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800b59e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800b5a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5a8:	e031      	b.n	800b60e <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5ae:	e02a      	b.n	800b606 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b4:	4013      	ands	r3, r2
 800b5b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d11e      	bne.n	800b5fa <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 800b5bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d118      	bne.n	800b5fa <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b5c8:	4a15      	ldr	r2, [pc, #84]	@ (800b620 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b5d0:	4814      	ldr	r0, [pc, #80]	@ (800b624 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	005b      	lsls	r3, r3, #1
 800b5d8:	4413      	add	r3, r2
 800b5da:	440b      	add	r3, r1
 800b5dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	490e      	ldr	r1, [pc, #56]	@ (800b61c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b5ea:	4610      	mov	r0, r2
 800b5ec:	4798      	blx	r3
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d002      	beq.n	800b5fa <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b5f4:	f06f 0304 	mvn.w	r3, #4
 800b5f8:	e009      	b.n	800b60e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800b5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5fc:	005b      	lsls	r3, r3, #1
 800b5fe:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800b600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b602:	3301      	adds	r3, #1
 800b604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d9d1      	bls.n	800b5b0 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800b60c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3738      	adds	r7, #56	@ 0x38
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	200005b0 	.word	0x200005b0
 800b61c:	20000580 	.word	0x20000580
 800b620:	2000017c 	.word	0x2000017c
 800b624:	2000058c 	.word	0x2000058c

0800b628 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b086      	sub	sp, #24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2b02      	cmp	r3, #2
 800b638:	d903      	bls.n	800b642 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b63a:	f06f 0301 	mvn.w	r3, #1
 800b63e:	617b      	str	r3, [r7, #20]
 800b640:	e029      	b.n	800b696 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b642:	4a17      	ldr	r2, [pc, #92]	@ (800b6a0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x78>)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	4013      	ands	r3, r2
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	429a      	cmp	r2, r3
 800b652:	d11d      	bne.n	800b690 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800b654:	4a13      	ldr	r2, [pc, #76]	@ (800b6a4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b65c:	4812      	ldr	r0, [pc, #72]	@ (800b6a8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	4613      	mov	r3, r2
 800b662:	005b      	lsls	r3, r3, #1
 800b664:	4413      	add	r3, r2
 800b666:	440b      	add	r3, r1
 800b668:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	490f      	ldr	r1, [pc, #60]	@ (800b6ac <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b676:	6879      	ldr	r1, [r7, #4]
 800b678:	4610      	mov	r0, r2
 800b67a:	4798      	blx	r3
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d003      	beq.n	800b68a <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b682:	f06f 0304 	mvn.w	r3, #4
 800b686:	617b      	str	r3, [r7, #20]
 800b688:	e005      	b.n	800b696 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b68a:	2300      	movs	r3, #0
 800b68c:	617b      	str	r3, [r7, #20]
 800b68e:	e002      	b.n	800b696 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b690:	f06f 0301 	mvn.w	r3, #1
 800b694:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b696:	697b      	ldr	r3, [r7, #20]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3718      	adds	r7, #24
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	200005bc 	.word	0x200005bc
 800b6a4:	2000017c 	.word	0x2000017c
 800b6a8:	2000058c 	.word	0x2000058c
 800b6ac:	20000580 	.word	0x20000580

0800b6b0 <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d903      	bls.n	800b6ca <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b6c2:	f06f 0301 	mvn.w	r3, #1
 800b6c6:	617b      	str	r3, [r7, #20]
 800b6c8:	e029      	b.n	800b71e <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b6ca:	4a17      	ldr	r2, [pc, #92]	@ (800b728 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d11d      	bne.n	800b718 <IKS01A3_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800b6dc:	4a13      	ldr	r2, [pc, #76]	@ (800b72c <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b6e4:	4812      	ldr	r0, [pc, #72]	@ (800b730 <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	005b      	lsls	r3, r3, #1
 800b6ec:	4413      	add	r3, r2
 800b6ee:	440b      	add	r3, r1
 800b6f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b6f4:	699b      	ldr	r3, [r3, #24]
 800b6f6:	490f      	ldr	r1, [pc, #60]	@ (800b734 <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b6fe:	6879      	ldr	r1, [r7, #4]
 800b700:	4610      	mov	r0, r2
 800b702:	4798      	blx	r3
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d003      	beq.n	800b712 <IKS01A3_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b70a:	f06f 0304 	mvn.w	r3, #4
 800b70e:	617b      	str	r3, [r7, #20]
 800b710:	e005      	b.n	800b71e <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b712:	2300      	movs	r3, #0
 800b714:	617b      	str	r3, [r7, #20]
 800b716:	e002      	b.n	800b71e <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b718:	f06f 0301 	mvn.w	r3, #1
 800b71c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b71e:	697b      	ldr	r3, [r7, #20]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3718      	adds	r7, #24
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	200005bc 	.word	0x200005bc
 800b72c:	2000017c 	.word	0x2000017c
 800b730:	2000058c 	.word	0x2000058c
 800b734:	20000580 	.word	0x20000580

0800b738 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b094      	sub	sp, #80	@ 0x50
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800b740:	2300      	movs	r3, #0
 800b742:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800b744:	2300      	movs	r3, #0
 800b746:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800b748:	23d7      	movs	r3, #215	@ 0xd7
 800b74a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b74e:	4b4b      	ldr	r3, [pc, #300]	@ (800b87c <LSM6DSO_0_Probe+0x144>)
 800b750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b752:	4b4b      	ldr	r3, [pc, #300]	@ (800b880 <LSM6DSO_0_Probe+0x148>)
 800b754:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b756:	4b4b      	ldr	r3, [pc, #300]	@ (800b884 <LSM6DSO_0_Probe+0x14c>)
 800b758:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b75a:	4b4b      	ldr	r3, [pc, #300]	@ (800b888 <LSM6DSO_0_Probe+0x150>)
 800b75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b75e:	4b4b      	ldr	r3, [pc, #300]	@ (800b88c <LSM6DSO_0_Probe+0x154>)
 800b760:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800b762:	4b4b      	ldr	r3, [pc, #300]	@ (800b890 <LSM6DSO_0_Probe+0x158>)
 800b764:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800b766:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b76a:	4619      	mov	r1, r3
 800b76c:	4849      	ldr	r0, [pc, #292]	@ (800b894 <LSM6DSO_0_Probe+0x15c>)
 800b76e:	f7fb fa7f 	bl	8006c70 <LSM6DSO_RegisterBusIO>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d003      	beq.n	800b780 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b778:	f06f 0306 	mvn.w	r3, #6
 800b77c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b77e:	e077      	b.n	800b870 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800b780:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b784:	4619      	mov	r1, r3
 800b786:	4843      	ldr	r0, [pc, #268]	@ (800b894 <LSM6DSO_0_Probe+0x15c>)
 800b788:	f7fb fb7c 	bl	8006e84 <LSM6DSO_ReadID>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d003      	beq.n	800b79a <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b792:	f06f 0306 	mvn.w	r3, #6
 800b796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b798:	e06a      	b.n	800b870 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 800b79a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b79e:	2b6c      	cmp	r3, #108	@ 0x6c
 800b7a0:	d003      	beq.n	800b7aa <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b7a2:	f06f 0306 	mvn.w	r3, #6
 800b7a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7a8:	e062      	b.n	800b870 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800b7aa:	f107 030c 	add.w	r3, r7, #12
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	4838      	ldr	r0, [pc, #224]	@ (800b894 <LSM6DSO_0_Probe+0x15c>)
 800b7b2:	f7fb fb7d 	bl	8006eb0 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b7b6:	7b7b      	ldrb	r3, [r7, #13]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	7b3b      	ldrb	r3, [r7, #12]
 800b7bc:	005b      	lsls	r3, r3, #1
 800b7be:	431a      	orrs	r2, r3
 800b7c0:	7bbb      	ldrb	r3, [r7, #14]
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	4a34      	ldr	r2, [pc, #208]	@ (800b898 <LSM6DSO_0_Probe+0x160>)
 800b7c8:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800b7ca:	4b34      	ldr	r3, [pc, #208]	@ (800b89c <LSM6DSO_0_Probe+0x164>)
 800b7cc:	4a31      	ldr	r2, [pc, #196]	@ (800b894 <LSM6DSO_0_Probe+0x15c>)
 800b7ce:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800b7d0:	4b33      	ldr	r3, [pc, #204]	@ (800b8a0 <LSM6DSO_0_Probe+0x168>)
 800b7d2:	4a34      	ldr	r2, [pc, #208]	@ (800b8a4 <LSM6DSO_0_Probe+0x16c>)
 800b7d4:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b7d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d11d      	bne.n	800b818 <LSM6DSO_0_Probe+0xe0>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f003 0301 	and.w	r3, r3, #1
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d018      	beq.n	800b818 <LSM6DSO_0_Probe+0xe0>
 800b7e6:	7b7b      	ldrb	r3, [r7, #13]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d115      	bne.n	800b818 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800b7ec:	4b2e      	ldr	r3, [pc, #184]	@ (800b8a8 <LSM6DSO_0_Probe+0x170>)
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	4a2e      	ldr	r2, [pc, #184]	@ (800b8ac <LSM6DSO_0_Probe+0x174>)
 800b7f2:	492f      	ldr	r1, [pc, #188]	@ (800b8b0 <LSM6DSO_0_Probe+0x178>)
 800b7f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800b7f8:	4b29      	ldr	r3, [pc, #164]	@ (800b8a0 <LSM6DSO_0_Probe+0x168>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a27      	ldr	r2, [pc, #156]	@ (800b89c <LSM6DSO_0_Probe+0x164>)
 800b800:	6812      	ldr	r2, [r2, #0]
 800b802:	4610      	mov	r0, r2
 800b804:	4798      	blx	r3
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d003      	beq.n	800b814 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b80c:	f06f 0304 	mvn.w	r3, #4
 800b810:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b812:	e001      	b.n	800b818 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b814:	2300      	movs	r3, #0
 800b816:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d11d      	bne.n	800b85a <LSM6DSO_0_Probe+0x122>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f003 0302 	and.w	r3, r3, #2
 800b824:	2b00      	cmp	r3, #0
 800b826:	d018      	beq.n	800b85a <LSM6DSO_0_Probe+0x122>
 800b828:	7b3b      	ldrb	r3, [r7, #12]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d115      	bne.n	800b85a <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b82e:	4b1e      	ldr	r3, [pc, #120]	@ (800b8a8 <LSM6DSO_0_Probe+0x170>)
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	4a1e      	ldr	r2, [pc, #120]	@ (800b8ac <LSM6DSO_0_Probe+0x174>)
 800b834:	491f      	ldr	r1, [pc, #124]	@ (800b8b4 <LSM6DSO_0_Probe+0x17c>)
 800b836:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800b83a:	4b19      	ldr	r3, [pc, #100]	@ (800b8a0 <LSM6DSO_0_Probe+0x168>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a16      	ldr	r2, [pc, #88]	@ (800b89c <LSM6DSO_0_Probe+0x164>)
 800b842:	6812      	ldr	r2, [r2, #0]
 800b844:	4610      	mov	r0, r2
 800b846:	4798      	blx	r3
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d003      	beq.n	800b856 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b84e:	f06f 0304 	mvn.w	r3, #4
 800b852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b854:	e001      	b.n	800b85a <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b856:	2300      	movs	r3, #0
 800b858:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b85a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d107      	bne.n	800b870 <LSM6DSO_0_Probe+0x138>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f003 0304 	and.w	r3, r3, #4
 800b866:	2b00      	cmp	r3, #0
 800b868:	d002      	beq.n	800b870 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b86a:	f06f 0304 	mvn.w	r3, #4
 800b86e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800b870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800b872:	4618      	mov	r0, r3
 800b874:	3750      	adds	r7, #80	@ 0x50
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	080028b9 	.word	0x080028b9
 800b880:	0800291d 	.word	0x0800291d
 800b884:	080029d1 	.word	0x080029d1
 800b888:	0800296d 	.word	0x0800296d
 800b88c:	08002a35 	.word	0x08002a35
 800b890:	0800bcad 	.word	0x0800bcad
 800b894:	200005c8 	.word	0x200005c8
 800b898:	200005bc 	.word	0x200005bc
 800b89c:	20000580 	.word	0x20000580
 800b8a0:	200005b0 	.word	0x200005b0
 800b8a4:	200000dc 	.word	0x200000dc
 800b8a8:	2000017c 	.word	0x2000017c
 800b8ac:	2000058c 	.word	0x2000058c
 800b8b0:	20000110 	.word	0x20000110
 800b8b4:	200000ec 	.word	0x200000ec

0800b8b8 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b094      	sub	sp, #80	@ 0x50
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800b8c8:	2333      	movs	r3, #51	@ 0x33
 800b8ca:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b8ce:	4b40      	ldr	r3, [pc, #256]	@ (800b9d0 <LIS2DW12_0_Probe+0x118>)
 800b8d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b8d2:	4b40      	ldr	r3, [pc, #256]	@ (800b9d4 <LIS2DW12_0_Probe+0x11c>)
 800b8d4:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b8d6:	4b40      	ldr	r3, [pc, #256]	@ (800b9d8 <LIS2DW12_0_Probe+0x120>)
 800b8d8:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b8da:	4b40      	ldr	r3, [pc, #256]	@ (800b9dc <LIS2DW12_0_Probe+0x124>)
 800b8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b8de:	4b40      	ldr	r3, [pc, #256]	@ (800b9e0 <LIS2DW12_0_Probe+0x128>)
 800b8e0:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800b8e2:	4b40      	ldr	r3, [pc, #256]	@ (800b9e4 <LIS2DW12_0_Probe+0x12c>)
 800b8e4:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800b8e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	483e      	ldr	r0, [pc, #248]	@ (800b9e8 <LIS2DW12_0_Probe+0x130>)
 800b8ee:	f7f8 f841 	bl	8003974 <LIS2DW12_RegisterBusIO>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d003      	beq.n	800b900 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b8f8:	f06f 0306 	mvn.w	r3, #6
 800b8fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8fe:	e062      	b.n	800b9c6 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800b900:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b904:	4619      	mov	r1, r3
 800b906:	4838      	ldr	r0, [pc, #224]	@ (800b9e8 <LIS2DW12_0_Probe+0x130>)
 800b908:	f7f8 f922 	bl	8003b50 <LIS2DW12_ReadID>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b912:	f06f 0306 	mvn.w	r3, #6
 800b916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b918:	e055      	b.n	800b9c6 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 800b91a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b91e:	2b44      	cmp	r3, #68	@ 0x44
 800b920:	d003      	beq.n	800b92a <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b922:	f06f 0306 	mvn.w	r3, #6
 800b926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b928:	e04d      	b.n	800b9c6 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800b92a:	f107 030c 	add.w	r3, r7, #12
 800b92e:	4619      	mov	r1, r3
 800b930:	482d      	ldr	r0, [pc, #180]	@ (800b9e8 <LIS2DW12_0_Probe+0x130>)
 800b932:	f7f8 f923 	bl	8003b7c <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b936:	7b7b      	ldrb	r3, [r7, #13]
 800b938:	461a      	mov	r2, r3
 800b93a:	7b3b      	ldrb	r3, [r7, #12]
 800b93c:	005b      	lsls	r3, r3, #1
 800b93e:	431a      	orrs	r2, r3
 800b940:	7bbb      	ldrb	r3, [r7, #14]
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	4313      	orrs	r3, r2
 800b946:	4a29      	ldr	r2, [pc, #164]	@ (800b9ec <LIS2DW12_0_Probe+0x134>)
 800b948:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800b94a:	4b29      	ldr	r3, [pc, #164]	@ (800b9f0 <LIS2DW12_0_Probe+0x138>)
 800b94c:	4a26      	ldr	r2, [pc, #152]	@ (800b9e8 <LIS2DW12_0_Probe+0x130>)
 800b94e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800b950:	4b28      	ldr	r3, [pc, #160]	@ (800b9f4 <LIS2DW12_0_Probe+0x13c>)
 800b952:	4a29      	ldr	r2, [pc, #164]	@ (800b9f8 <LIS2DW12_0_Probe+0x140>)
 800b954:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d11e      	bne.n	800b99a <LIS2DW12_0_Probe+0xe2>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f003 0302 	and.w	r3, r3, #2
 800b962:	2b00      	cmp	r3, #0
 800b964:	d019      	beq.n	800b99a <LIS2DW12_0_Probe+0xe2>
 800b966:	7b3b      	ldrb	r3, [r7, #12]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d116      	bne.n	800b99a <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b96c:	4b23      	ldr	r3, [pc, #140]	@ (800b9fc <LIS2DW12_0_Probe+0x144>)
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	4a23      	ldr	r2, [pc, #140]	@ (800ba00 <LIS2DW12_0_Probe+0x148>)
 800b972:	3303      	adds	r3, #3
 800b974:	4923      	ldr	r1, [pc, #140]	@ (800ba04 <LIS2DW12_0_Probe+0x14c>)
 800b976:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800b97a:	4b1e      	ldr	r3, [pc, #120]	@ (800b9f4 <LIS2DW12_0_Probe+0x13c>)
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a1b      	ldr	r2, [pc, #108]	@ (800b9f0 <LIS2DW12_0_Probe+0x138>)
 800b982:	6852      	ldr	r2, [r2, #4]
 800b984:	4610      	mov	r0, r2
 800b986:	4798      	blx	r3
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d003      	beq.n	800b996 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b98e:	f06f 0304 	mvn.w	r3, #4
 800b992:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b994:	e001      	b.n	800b99a <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b996:	2300      	movs	r3, #0
 800b998:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800b99a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d107      	bne.n	800b9b0 <LIS2DW12_0_Probe+0xf8>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f003 0301 	and.w	r3, r3, #1
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d002      	beq.n	800b9b0 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9aa:	f06f 0304 	mvn.w	r3, #4
 800b9ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b9b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d107      	bne.n	800b9c6 <LIS2DW12_0_Probe+0x10e>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f003 0304 	and.w	r3, r3, #4
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9c0:	f06f 0304 	mvn.w	r3, #4
 800b9c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800b9c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3750      	adds	r7, #80	@ 0x50
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	080028b9 	.word	0x080028b9
 800b9d4:	0800291d 	.word	0x0800291d
 800b9d8:	080029d1 	.word	0x080029d1
 800b9dc:	0800296d 	.word	0x0800296d
 800b9e0:	08002a35 	.word	0x08002a35
 800b9e4:	0800bcad 	.word	0x0800bcad
 800b9e8:	20000600 	.word	0x20000600
 800b9ec:	200005bc 	.word	0x200005bc
 800b9f0:	20000580 	.word	0x20000580
 800b9f4:	200005b0 	.word	0x200005b0
 800b9f8:	2000003c 	.word	0x2000003c
 800b9fc:	2000017c 	.word	0x2000017c
 800ba00:	2000058c 	.word	0x2000058c
 800ba04:	2000004c 	.word	0x2000004c

0800ba08 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b094      	sub	sp, #80	@ 0x50
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800ba10:	2300      	movs	r3, #0
 800ba12:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800ba14:	2300      	movs	r3, #0
 800ba16:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800ba18:	233d      	movs	r3, #61	@ 0x3d
 800ba1a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800ba1e:	4b40      	ldr	r3, [pc, #256]	@ (800bb20 <LIS2MDL_0_Probe+0x118>)
 800ba20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800ba22:	4b40      	ldr	r3, [pc, #256]	@ (800bb24 <LIS2MDL_0_Probe+0x11c>)
 800ba24:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800ba26:	4b40      	ldr	r3, [pc, #256]	@ (800bb28 <LIS2MDL_0_Probe+0x120>)
 800ba28:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800ba2a:	4b40      	ldr	r3, [pc, #256]	@ (800bb2c <LIS2MDL_0_Probe+0x124>)
 800ba2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800ba2e:	4b40      	ldr	r3, [pc, #256]	@ (800bb30 <LIS2MDL_0_Probe+0x128>)
 800ba30:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800ba32:	4b40      	ldr	r3, [pc, #256]	@ (800bb34 <LIS2MDL_0_Probe+0x12c>)
 800ba34:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800ba36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	483e      	ldr	r0, [pc, #248]	@ (800bb38 <LIS2MDL_0_Probe+0x130>)
 800ba3e:	f7f9 fadb 	bl	8004ff8 <LIS2MDL_RegisterBusIO>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d003      	beq.n	800ba50 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba48:	f06f 0306 	mvn.w	r3, #6
 800ba4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba4e:	e062      	b.n	800bb16 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800ba50:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800ba54:	4619      	mov	r1, r3
 800ba56:	4838      	ldr	r0, [pc, #224]	@ (800bb38 <LIS2MDL_0_Probe+0x130>)
 800ba58:	f7f9 fbea 	bl	8005230 <LIS2MDL_ReadID>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d003      	beq.n	800ba6a <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba62:	f06f 0306 	mvn.w	r3, #6
 800ba66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba68:	e055      	b.n	800bb16 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 800ba6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba6e:	2b40      	cmp	r3, #64	@ 0x40
 800ba70:	d003      	beq.n	800ba7a <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba72:	f06f 0306 	mvn.w	r3, #6
 800ba76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba78:	e04d      	b.n	800bb16 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800ba7a:	f107 030c 	add.w	r3, r7, #12
 800ba7e:	4619      	mov	r1, r3
 800ba80:	482d      	ldr	r0, [pc, #180]	@ (800bb38 <LIS2MDL_0_Probe+0x130>)
 800ba82:	f7f9 fbfb 	bl	800527c <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800ba86:	7b7b      	ldrb	r3, [r7, #13]
 800ba88:	461a      	mov	r2, r3
 800ba8a:	7b3b      	ldrb	r3, [r7, #12]
 800ba8c:	005b      	lsls	r3, r3, #1
 800ba8e:	431a      	orrs	r2, r3
 800ba90:	7bbb      	ldrb	r3, [r7, #14]
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4313      	orrs	r3, r2
 800ba96:	4a29      	ldr	r2, [pc, #164]	@ (800bb3c <LIS2MDL_0_Probe+0x134>)
 800ba98:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800ba9a:	4b29      	ldr	r3, [pc, #164]	@ (800bb40 <LIS2MDL_0_Probe+0x138>)
 800ba9c:	4a26      	ldr	r2, [pc, #152]	@ (800bb38 <LIS2MDL_0_Probe+0x130>)
 800ba9e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800baa0:	4b28      	ldr	r3, [pc, #160]	@ (800bb44 <LIS2MDL_0_Probe+0x13c>)
 800baa2:	4a29      	ldr	r2, [pc, #164]	@ (800bb48 <LIS2MDL_0_Probe+0x140>)
 800baa4:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800baa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d11e      	bne.n	800baea <LIS2MDL_0_Probe+0xe2>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f003 0304 	and.w	r3, r3, #4
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d019      	beq.n	800baea <LIS2MDL_0_Probe+0xe2>
 800bab6:	7bbb      	ldrb	r3, [r7, #14]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d116      	bne.n	800baea <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800babc:	4b23      	ldr	r3, [pc, #140]	@ (800bb4c <LIS2MDL_0_Probe+0x144>)
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	4a23      	ldr	r2, [pc, #140]	@ (800bb50 <LIS2MDL_0_Probe+0x148>)
 800bac2:	3306      	adds	r3, #6
 800bac4:	4923      	ldr	r1, [pc, #140]	@ (800bb54 <LIS2MDL_0_Probe+0x14c>)
 800bac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800baca:	4b1e      	ldr	r3, [pc, #120]	@ (800bb44 <LIS2MDL_0_Probe+0x13c>)
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a1b      	ldr	r2, [pc, #108]	@ (800bb40 <LIS2MDL_0_Probe+0x138>)
 800bad2:	6892      	ldr	r2, [r2, #8]
 800bad4:	4610      	mov	r0, r2
 800bad6:	4798      	blx	r3
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d003      	beq.n	800bae6 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bade:	f06f 0304 	mvn.w	r3, #4
 800bae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bae4:	e001      	b.n	800baea <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bae6:	2300      	movs	r3, #0
 800bae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800baea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baec:	2b00      	cmp	r3, #0
 800baee:	d107      	bne.n	800bb00 <LIS2MDL_0_Probe+0xf8>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f003 0302 	and.w	r3, r3, #2
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d002      	beq.n	800bb00 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bafa:	f06f 0304 	mvn.w	r3, #4
 800bafe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800bb00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d107      	bne.n	800bb16 <LIS2MDL_0_Probe+0x10e>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f003 0301 	and.w	r3, r3, #1
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d002      	beq.n	800bb16 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb10:	f06f 0304 	mvn.w	r3, #4
 800bb14:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800bb16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3750      	adds	r7, #80	@ 0x50
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	080028b9 	.word	0x080028b9
 800bb24:	0800291d 	.word	0x0800291d
 800bb28:	080029d1 	.word	0x080029d1
 800bb2c:	0800296d 	.word	0x0800296d
 800bb30:	08002a35 	.word	0x08002a35
 800bb34:	0800bcad 	.word	0x0800bcad
 800bb38:	2000063c 	.word	0x2000063c
 800bb3c:	200005bc 	.word	0x200005bc
 800bb40:	20000580 	.word	0x20000580
 800bb44:	200005b0 	.word	0x200005b0
 800bb48:	20000070 	.word	0x20000070
 800bb4c:	2000017c 	.word	0x2000017c
 800bb50:	2000058c 	.word	0x2000058c
 800bb54:	20000080 	.word	0x20000080

0800bb58 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation>:
  * @param  IntPin the interrupt pin to be used
  * @note   This function sets the LSM6DSO accelerometer ODR to 416Hz and the LSM6DSO accelerometer full scale to 2g
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable_6D_Orientation(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	460b      	mov	r3, r1
 800bb62:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d003      	beq.n	800bb72 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x1a>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d013      	beq.n	800bb98 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x40>
 800bb70:	e023      	b.n	800bbba <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x62>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Enable_6D_Orientation(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 800bb72:	4a16      	ldr	r2, [pc, #88]	@ (800bbcc <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x74>)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb7a:	78fa      	ldrb	r2, [r7, #3]
 800bb7c:	4611      	mov	r1, r2
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fc f840 	bl	8007c04 <LSM6DSO_ACC_Enable_6D_Orientation>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x3a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb8a:	f06f 0304 	mvn.w	r3, #4
 800bb8e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bb90:	e017      	b.n	800bbc2 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x6a>
        ret = BSP_ERROR_NONE;
 800bb92:	2300      	movs	r3, #0
 800bb94:	60fb      	str	r3, [r7, #12]
      break;
 800bb96:	e014      	b.n	800bbc2 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x6a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      /* For LIS2DW12 the 6D Orientation event can be routed only on INT1 pin */
      if (LIS2DW12_ACC_Enable_6D_Orientation(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800bb98:	4a0c      	ldr	r2, [pc, #48]	@ (800bbcc <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x74>)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7f8 fc1b 	bl	80043dc <LIS2DW12_ACC_Enable_6D_Orientation>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d003      	beq.n	800bbb4 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x5c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bbac:	f06f 0304 	mvn.w	r3, #4
 800bbb0:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bbb2:	e006      	b.n	800bbc2 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x6a>
        ret = BSP_ERROR_NONE;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	60fb      	str	r3, [r7, #12]
      break;
 800bbb8:	e003      	b.n	800bbc2 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x6a>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bbba:	f06f 0301 	mvn.w	r3, #1
 800bbbe:	60fb      	str	r3, [r7, #12]
      break;
 800bbc0:	bf00      	nop
  }

  return ret;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	20000580 	.word	0x20000580

0800bbd0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bbda:	2003      	movs	r0, #3
 800bbdc:	f000 fdf0 	bl	800c7c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	f000 f80d 	bl	800bc00 <HAL_InitTick>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	71fb      	strb	r3, [r7, #7]
 800bbf0:	e001      	b.n	800bbf6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800bbf2:	f7f6 fba9 	bl	8002348 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800bbf6:	79fb      	ldrb	r3, [r7, #7]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800bc0c:	4b16      	ldr	r3, [pc, #88]	@ (800bc68 <HAL_InitTick+0x68>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d022      	beq.n	800bc5a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800bc14:	4b15      	ldr	r3, [pc, #84]	@ (800bc6c <HAL_InitTick+0x6c>)
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	4b13      	ldr	r3, [pc, #76]	@ (800bc68 <HAL_InitTick+0x68>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800bc20:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc24:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f000 fe0c 	bl	800c846 <HAL_SYSTICK_Config>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10f      	bne.n	800bc54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b0f      	cmp	r3, #15
 800bc38:	d809      	bhi.n	800bc4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	6879      	ldr	r1, [r7, #4]
 800bc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc42:	f000 fdc8 	bl	800c7d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800bc46:	4a0a      	ldr	r2, [pc, #40]	@ (800bc70 <HAL_InitTick+0x70>)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6013      	str	r3, [r2, #0]
 800bc4c:	e007      	b.n	800bc5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	73fb      	strb	r3, [r7, #15]
 800bc52:	e004      	b.n	800bc5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800bc54:	2301      	movs	r3, #1
 800bc56:	73fb      	strb	r3, [r7, #15]
 800bc58:	e001      	b.n	800bc5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800bc5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	20000194 	.word	0x20000194
 800bc6c:	20000000 	.word	0x20000000
 800bc70:	20000190 	.word	0x20000190

0800bc74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bc74:	b480      	push	{r7}
 800bc76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bc78:	4b05      	ldr	r3, [pc, #20]	@ (800bc90 <HAL_IncTick+0x1c>)
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	4b05      	ldr	r3, [pc, #20]	@ (800bc94 <HAL_IncTick+0x20>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4413      	add	r3, r2
 800bc82:	4a03      	ldr	r2, [pc, #12]	@ (800bc90 <HAL_IncTick+0x1c>)
 800bc84:	6013      	str	r3, [r2, #0]
}
 800bc86:	bf00      	nop
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bc80      	pop	{r7}
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	20000670 	.word	0x20000670
 800bc94:	20000194 	.word	0x20000194

0800bc98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	af00      	add	r7, sp, #0
  return uwTick;
 800bc9c:	4b02      	ldr	r3, [pc, #8]	@ (800bca8 <HAL_GetTick+0x10>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bc80      	pop	{r7}
 800bca6:	4770      	bx	lr
 800bca8:	20000670 	.word	0x20000670

0800bcac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bcb4:	f7ff fff0 	bl	800bc98 <HAL_GetTick>
 800bcb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc4:	d004      	beq.n	800bcd0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800bcc6:	4b09      	ldr	r3, [pc, #36]	@ (800bcec <HAL_Delay+0x40>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	4413      	add	r3, r2
 800bcce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bcd0:	bf00      	nop
 800bcd2:	f7ff ffe1 	bl	800bc98 <HAL_GetTick>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	1ad3      	subs	r3, r2, r3
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d8f7      	bhi.n	800bcd2 <HAL_Delay+0x26>
  {
  }
}
 800bce2:	bf00      	nop
 800bce4:	bf00      	nop
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	20000194 	.word	0x20000194

0800bcf0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b08e      	sub	sp, #56	@ 0x38
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 800bd02:	2300      	movs	r3, #0
 800bd04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d101      	bne.n	800bd10 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	e127      	b.n	800bf60 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d115      	bne.n	800bd4a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd2c:	4b8e      	ldr	r3, [pc, #568]	@ (800bf68 <HAL_ADC_Init+0x278>)
 800bd2e:	6a1b      	ldr	r3, [r3, #32]
 800bd30:	4a8d      	ldr	r2, [pc, #564]	@ (800bf68 <HAL_ADC_Init+0x278>)
 800bd32:	f043 0301 	orr.w	r3, r3, #1
 800bd36:	6213      	str	r3, [r2, #32]
 800bd38:	4b8b      	ldr	r3, [pc, #556]	@ (800bf68 <HAL_ADC_Init+0x278>)
 800bd3a:	6a1b      	ldr	r3, [r3, #32]
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	60bb      	str	r3, [r7, #8]
 800bd42:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f7f6 fb2f 	bl	80023a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd4e:	f003 0310 	and.w	r3, r3, #16
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f040 80ff 	bne.w	800bf56 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd5c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800bd60:	f023 0302 	bic.w	r3, r3, #2
 800bd64:	f043 0202 	orr.w	r2, r3, #2
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800bd6c:	4b7f      	ldr	r3, [pc, #508]	@ (800bf6c <HAL_ADC_Init+0x27c>)
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	497c      	ldr	r1, [pc, #496]	@ (800bf6c <HAL_ADC_Init+0x27c>)
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800bd86:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd8e:	4619      	mov	r1, r3
 800bd90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd94:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd96:	6a3b      	ldr	r3, [r7, #32]
 800bd98:	fa93 f3a3 	rbit	r3, r3
 800bd9c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	fab3 f383 	clz	r3, r3
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800bdaa:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800bdb0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bdb8:	4619      	mov	r1, r3
 800bdba:	2302      	movs	r3, #2
 800bdbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc0:	fa93 f3a3 	rbit	r3, r3
 800bdc4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc8:	fab3 f383 	clz	r3, r3
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800bdd2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800bdd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdde:	2b10      	cmp	r3, #16
 800bde0:	d007      	beq.n	800bdf2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800bdea:	4313      	orrs	r3, r2
 800bdec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdfc:	2b40      	cmp	r3, #64	@ 0x40
 800bdfe:	d04f      	beq.n	800bea0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be06:	4313      	orrs	r3, r2
 800be08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800be12:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	6912      	ldr	r2, [r2, #16]
 800be18:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800be1c:	d003      	beq.n	800be26 <HAL_ADC_Init+0x136>
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	6912      	ldr	r2, [r2, #16]
 800be22:	2a01      	cmp	r2, #1
 800be24:	d102      	bne.n	800be2c <HAL_ADC_Init+0x13c>
 800be26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be2a:	e000      	b.n	800be2e <HAL_ADC_Init+0x13e>
 800be2c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800be2e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800be30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be32:	4313      	orrs	r3, r2
 800be34:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d125      	bne.n	800be8c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800be46:	2b00      	cmp	r3, #0
 800be48:	d114      	bne.n	800be74 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be4e:	3b01      	subs	r3, #1
 800be50:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800be54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be56:	69ba      	ldr	r2, [r7, #24]
 800be58:	fa92 f2a2 	rbit	r2, r2
 800be5c:	617a      	str	r2, [r7, #20]
  return result;
 800be5e:	697a      	ldr	r2, [r7, #20]
 800be60:	fab2 f282 	clz	r2, r2
 800be64:	b2d2      	uxtb	r2, r2
 800be66:	4093      	lsls	r3, r2
 800be68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800be6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be6e:	4313      	orrs	r3, r2
 800be70:	633b      	str	r3, [r7, #48]	@ 0x30
 800be72:	e00b      	b.n	800be8c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be78:	f043 0220 	orr.w	r2, r3, #32
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be84:	f043 0201 	orr.w	r2, r3, #1
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	685a      	ldr	r2, [r3, #4]
 800be92:	4b37      	ldr	r3, [pc, #220]	@ (800bf70 <HAL_ADC_Init+0x280>)
 800be94:	4013      	ands	r3, r2
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	6812      	ldr	r2, [r2, #0]
 800be9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be9c:	430b      	orrs	r3, r1
 800be9e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	689a      	ldr	r2, [r3, #8]
 800bea6:	4b33      	ldr	r3, [pc, #204]	@ (800bf74 <HAL_ADC_Init+0x284>)
 800bea8:	4013      	ands	r3, r2
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	6812      	ldr	r2, [r2, #0]
 800beae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800beb0:	430b      	orrs	r3, r1
 800beb2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bebc:	d003      	beq.n	800bec6 <HAL_ADC_Init+0x1d6>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d119      	bne.n	800befa <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800becc:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed4:	3b01      	subs	r3, #1
 800bed6:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 800beda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bedc:	693a      	ldr	r2, [r7, #16]
 800bede:	fa92 f2a2 	rbit	r2, r2
 800bee2:	60fa      	str	r2, [r7, #12]
  return result;
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	fab2 f282 	clz	r2, r2
 800beea:	b2d2      	uxtb	r2, r2
 800beec:	fa03 f202 	lsl.w	r2, r3, r2
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	430a      	orrs	r2, r1
 800bef6:	631a      	str	r2, [r3, #48]	@ 0x30
 800bef8:	e007      	b.n	800bf0a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 800bf08:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	689a      	ldr	r2, [r3, #8]
 800bf10:	4b19      	ldr	r3, [pc, #100]	@ (800bf78 <HAL_ADC_Init+0x288>)
 800bf12:	4013      	ands	r3, r2
 800bf14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d10b      	bne.n	800bf32 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf24:	f023 0303 	bic.w	r3, r3, #3
 800bf28:	f043 0201 	orr.w	r2, r3, #1
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bf30:	e014      	b.n	800bf5c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf36:	f023 0312 	bic.w	r3, r3, #18
 800bf3a:	f043 0210 	orr.w	r2, r3, #16
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf46:	f043 0201 	orr.w	r2, r3, #1
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf54:	e002      	b.n	800bf5c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800bf5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3738      	adds	r7, #56	@ 0x38
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	40023800 	.word	0x40023800
 800bf6c:	40012700 	.word	0x40012700
 800bf70:	fcfc16ff 	.word	0xfcfc16ff
 800bf74:	c0fff189 	.word	0xc0fff189
 800bf78:	bf80fffe 	.word	0xbf80fffe

0800bf7c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bf84:	2300      	movs	r3, #0
 800bf86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d101      	bne.n	800bf96 <HAL_ADC_Start+0x1a>
 800bf92:	2302      	movs	r3, #2
 800bf94:	e04e      	b.n	800c034 <HAL_ADC_Start+0xb8>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 fa80 	bl	800c4a4 <ADC_Enable>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800bfa8:	7bfb      	ldrb	r3, [r7, #15]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d141      	bne.n	800c032 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfb2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800bfb6:	f023 0301 	bic.w	r3, r3, #1
 800bfba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d007      	beq.n	800bfe0 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfd4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800bfd8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfe4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bfe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfec:	d106      	bne.n	800bffc <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bff2:	f023 0206 	bic.w	r2, r3, #6
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	651a      	str	r2, [r3, #80]	@ 0x50
 800bffa:	e002      	b.n	800c002 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800c012:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d107      	bne.n	800c032 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	689a      	ldr	r2, [r3, #8]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800c030:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800c032:	7bfb      	ldrb	r3, [r7, #15]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3710      	adds	r7, #16
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c044:	2300      	movs	r3, #0
 800c046:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d101      	bne.n	800c056 <HAL_ADC_Stop+0x1a>
 800c052:	2302      	movs	r3, #2
 800c054:	e01a      	b.n	800c08c <HAL_ADC_Stop+0x50>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2201      	movs	r2, #1
 800c05a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fa7c 	bl	800c55c <ADC_ConversionStop_Disable>
 800c064:	4603      	mov	r3, r0
 800c066:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800c068:	7bfb      	ldrb	r3, [r7, #15]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d109      	bne.n	800c082 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c072:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c076:	f023 0301 	bic.w	r3, r3, #1
 800c07a:	f043 0201 	orr.w	r2, r3, #1
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800c08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0b0:	d113      	bne.n	800c0da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c0bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0c0:	d10b      	bne.n	800c0da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0c6:	f043 0220 	orr.w	r2, r3, #32
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e068      	b.n	800c1ac <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800c0da:	f7ff fddd 	bl	800bc98 <HAL_GetTick>
 800c0de:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800c0e0:	e021      	b.n	800c126 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e8:	d01d      	beq.n	800c126 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d007      	beq.n	800c100 <HAL_ADC_PollForConversion+0x6c>
 800c0f0:	f7ff fdd2 	bl	800bc98 <HAL_GetTick>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	1ad3      	subs	r3, r2, r3
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d212      	bcs.n	800c126 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f003 0302 	and.w	r3, r3, #2
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d10b      	bne.n	800c126 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c112:	f043 0204 	orr.w	r2, r3, #4
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 800c122:	2303      	movs	r3, #3
 800c124:	e042      	b.n	800c1ac <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0302 	and.w	r3, r3, #2
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0d6      	beq.n	800c0e2 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	699b      	ldr	r3, [r3, #24]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d104      	bne.n	800c146 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f06f 0212 	mvn.w	r2, #18
 800c144:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c14a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d124      	bne.n	800c1aa <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c166:	2b00      	cmp	r3, #0
 800c168:	d11f      	bne.n	800c1aa <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c170:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c174:	2b00      	cmp	r3, #0
 800c176:	d006      	beq.n	800c186 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c182:	2b00      	cmp	r3, #0
 800c184:	d111      	bne.n	800c1aa <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c18a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c196:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d105      	bne.n	800c1aa <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1a2:	f043 0201 	orr.w	r2, r3, #1
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800c1aa:	2300      	movs	r3, #0
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3710      	adds	r7, #16
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bc80      	pop	{r7}
 800c1ca:	4770      	bx	lr

0800c1cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d101      	bne.n	800c1ec <HAL_ADC_ConfigChannel+0x20>
 800c1e8:	2302      	movs	r3, #2
 800c1ea:	e14f      	b.n	800c48c <HAL_ADC_ConfigChannel+0x2c0>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	2b06      	cmp	r3, #6
 800c1fa:	d81c      	bhi.n	800c236 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	685a      	ldr	r2, [r3, #4]
 800c206:	4613      	mov	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4413      	add	r3, r2
 800c20c:	3b05      	subs	r3, #5
 800c20e:	221f      	movs	r2, #31
 800c210:	fa02 f303 	lsl.w	r3, r2, r3
 800c214:	43db      	mvns	r3, r3
 800c216:	4019      	ands	r1, r3
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	6818      	ldr	r0, [r3, #0]
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	685a      	ldr	r2, [r3, #4]
 800c220:	4613      	mov	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4413      	add	r3, r2
 800c226:	3b05      	subs	r3, #5
 800c228:	fa00 f203 	lsl.w	r2, r0, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	430a      	orrs	r2, r1
 800c232:	641a      	str	r2, [r3, #64]	@ 0x40
 800c234:	e07e      	b.n	800c334 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	2b0c      	cmp	r3, #12
 800c23c:	d81c      	bhi.n	800c278 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	685a      	ldr	r2, [r3, #4]
 800c248:	4613      	mov	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4413      	add	r3, r2
 800c24e:	3b23      	subs	r3, #35	@ 0x23
 800c250:	221f      	movs	r2, #31
 800c252:	fa02 f303 	lsl.w	r3, r2, r3
 800c256:	43db      	mvns	r3, r3
 800c258:	4019      	ands	r1, r3
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	6818      	ldr	r0, [r3, #0]
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	685a      	ldr	r2, [r3, #4]
 800c262:	4613      	mov	r3, r2
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4413      	add	r3, r2
 800c268:	3b23      	subs	r3, #35	@ 0x23
 800c26a:	fa00 f203 	lsl.w	r2, r0, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	430a      	orrs	r2, r1
 800c274:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c276:	e05d      	b.n	800c334 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	2b12      	cmp	r3, #18
 800c27e:	d81c      	bhi.n	800c2ba <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	685a      	ldr	r2, [r3, #4]
 800c28a:	4613      	mov	r3, r2
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	4413      	add	r3, r2
 800c290:	3b41      	subs	r3, #65	@ 0x41
 800c292:	221f      	movs	r2, #31
 800c294:	fa02 f303 	lsl.w	r3, r2, r3
 800c298:	43db      	mvns	r3, r3
 800c29a:	4019      	ands	r1, r3
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	6818      	ldr	r0, [r3, #0]
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	685a      	ldr	r2, [r3, #4]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	4413      	add	r3, r2
 800c2aa:	3b41      	subs	r3, #65	@ 0x41
 800c2ac:	fa00 f203 	lsl.w	r2, r0, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	430a      	orrs	r2, r1
 800c2b6:	639a      	str	r2, [r3, #56]	@ 0x38
 800c2b8:	e03c      	b.n	800c334 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	2b18      	cmp	r3, #24
 800c2c0:	d81c      	bhi.n	800c2fc <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	685a      	ldr	r2, [r3, #4]
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	3b5f      	subs	r3, #95	@ 0x5f
 800c2d4:	221f      	movs	r2, #31
 800c2d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2da:	43db      	mvns	r3, r3
 800c2dc:	4019      	ands	r1, r3
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	6818      	ldr	r0, [r3, #0]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	685a      	ldr	r2, [r3, #4]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	4413      	add	r3, r2
 800c2ec:	3b5f      	subs	r3, #95	@ 0x5f
 800c2ee:	fa00 f203 	lsl.w	r2, r0, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	430a      	orrs	r2, r1
 800c2f8:	635a      	str	r2, [r3, #52]	@ 0x34
 800c2fa:	e01b      	b.n	800c334 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	4613      	mov	r3, r2
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	4413      	add	r3, r2
 800c30c:	3b7d      	subs	r3, #125	@ 0x7d
 800c30e:	221f      	movs	r2, #31
 800c310:	fa02 f303 	lsl.w	r3, r2, r3
 800c314:	43db      	mvns	r3, r3
 800c316:	4019      	ands	r1, r3
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	6818      	ldr	r0, [r3, #0]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	4613      	mov	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4413      	add	r3, r2
 800c326:	3b7d      	subs	r3, #125	@ 0x7d
 800c328:	fa00 f203 	lsl.w	r2, r0, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	430a      	orrs	r2, r1
 800c332:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b09      	cmp	r3, #9
 800c33a:	d81a      	bhi.n	800c372 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	6959      	ldr	r1, [r3, #20]
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	4613      	mov	r3, r2
 800c348:	005b      	lsls	r3, r3, #1
 800c34a:	4413      	add	r3, r2
 800c34c:	2207      	movs	r2, #7
 800c34e:	fa02 f303 	lsl.w	r3, r2, r3
 800c352:	43db      	mvns	r3, r3
 800c354:	4019      	ands	r1, r3
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	6898      	ldr	r0, [r3, #8]
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	4613      	mov	r3, r2
 800c360:	005b      	lsls	r3, r3, #1
 800c362:	4413      	add	r3, r2
 800c364:	fa00 f203 	lsl.w	r2, r0, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	430a      	orrs	r2, r1
 800c36e:	615a      	str	r2, [r3, #20]
 800c370:	e05d      	b.n	800c42e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2b13      	cmp	r3, #19
 800c378:	d81c      	bhi.n	800c3b4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	6919      	ldr	r1, [r3, #16]
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	4613      	mov	r3, r2
 800c386:	005b      	lsls	r3, r3, #1
 800c388:	4413      	add	r3, r2
 800c38a:	3b1e      	subs	r3, #30
 800c38c:	2207      	movs	r2, #7
 800c38e:	fa02 f303 	lsl.w	r3, r2, r3
 800c392:	43db      	mvns	r3, r3
 800c394:	4019      	ands	r1, r3
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	6898      	ldr	r0, [r3, #8]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	4613      	mov	r3, r2
 800c3a0:	005b      	lsls	r3, r3, #1
 800c3a2:	4413      	add	r3, r2
 800c3a4:	3b1e      	subs	r3, #30
 800c3a6:	fa00 f203 	lsl.w	r2, r0, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	430a      	orrs	r2, r1
 800c3b0:	611a      	str	r2, [r3, #16]
 800c3b2:	e03c      	b.n	800c42e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b1d      	cmp	r3, #29
 800c3ba:	d81c      	bhi.n	800c3f6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	68d9      	ldr	r1, [r3, #12]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	005b      	lsls	r3, r3, #1
 800c3ca:	4413      	add	r3, r2
 800c3cc:	3b3c      	subs	r3, #60	@ 0x3c
 800c3ce:	2207      	movs	r2, #7
 800c3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3d4:	43db      	mvns	r3, r3
 800c3d6:	4019      	ands	r1, r3
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	6898      	ldr	r0, [r3, #8]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	4413      	add	r3, r2
 800c3e6:	3b3c      	subs	r3, #60	@ 0x3c
 800c3e8:	fa00 f203 	lsl.w	r2, r0, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	430a      	orrs	r2, r1
 800c3f2:	60da      	str	r2, [r3, #12]
 800c3f4:	e01b      	b.n	800c42e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	4613      	mov	r3, r2
 800c402:	005b      	lsls	r3, r3, #1
 800c404:	4413      	add	r3, r2
 800c406:	3b5a      	subs	r3, #90	@ 0x5a
 800c408:	2207      	movs	r2, #7
 800c40a:	fa02 f303 	lsl.w	r3, r2, r3
 800c40e:	43db      	mvns	r3, r3
 800c410:	4019      	ands	r1, r3
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	6898      	ldr	r0, [r3, #8]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	4613      	mov	r3, r2
 800c41c:	005b      	lsls	r3, r3, #1
 800c41e:	4413      	add	r3, r2
 800c420:	3b5a      	subs	r3, #90	@ 0x5a
 800c422:	fa00 f203 	lsl.w	r2, r0, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	430a      	orrs	r2, r1
 800c42c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b10      	cmp	r3, #16
 800c434:	d003      	beq.n	800c43e <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c43a:	2b11      	cmp	r3, #17
 800c43c:	d121      	bne.n	800c482 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800c43e:	4b16      	ldr	r3, [pc, #88]	@ (800c498 <HAL_ADC_ConfigChannel+0x2cc>)
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c446:	2b00      	cmp	r3, #0
 800c448:	d11b      	bne.n	800c482 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800c44a:	4b13      	ldr	r3, [pc, #76]	@ (800c498 <HAL_ADC_ConfigChannel+0x2cc>)
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	4a12      	ldr	r2, [pc, #72]	@ (800c498 <HAL_ADC_ConfigChannel+0x2cc>)
 800c450:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c454:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b10      	cmp	r3, #16
 800c45c:	d111      	bne.n	800c482 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800c45e:	4b0f      	ldr	r3, [pc, #60]	@ (800c49c <HAL_ADC_ConfigChannel+0x2d0>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a0f      	ldr	r2, [pc, #60]	@ (800c4a0 <HAL_ADC_ConfigChannel+0x2d4>)
 800c464:	fba2 2303 	umull	r2, r3, r2, r3
 800c468:	0c9a      	lsrs	r2, r3, #18
 800c46a:	4613      	mov	r3, r2
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	4413      	add	r3, r2
 800c470:	005b      	lsls	r3, r3, #1
 800c472:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800c474:	e002      	b.n	800c47c <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	3b01      	subs	r3, #1
 800c47a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d1f9      	bne.n	800c476 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800c48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3714      	adds	r7, #20
 800c490:	46bd      	mov	sp, r7
 800c492:	bc80      	pop	{r7}
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	40012700 	.word	0x40012700
 800c49c:	20000000 	.word	0x20000000
 800c4a0:	431bde83 	.word	0x431bde83

0800c4a4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4be:	2b40      	cmp	r3, #64	@ 0x40
 800c4c0:	d043      	beq.n	800c54a <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	689a      	ldr	r2, [r3, #8]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f042 0201 	orr.w	r2, r2, #1
 800c4d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800c4d2:	4b20      	ldr	r3, [pc, #128]	@ (800c554 <ADC_Enable+0xb0>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a20      	ldr	r2, [pc, #128]	@ (800c558 <ADC_Enable+0xb4>)
 800c4d8:	fba2 2303 	umull	r2, r3, r2, r3
 800c4dc:	0c9a      	lsrs	r2, r3, #18
 800c4de:	4613      	mov	r3, r2
 800c4e0:	005b      	lsls	r3, r3, #1
 800c4e2:	4413      	add	r3, r2
 800c4e4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800c4e6:	e002      	b.n	800c4ee <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d1f9      	bne.n	800c4e8 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800c4f4:	f7ff fbd0 	bl	800bc98 <HAL_GetTick>
 800c4f8:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800c4fa:	e01f      	b.n	800c53c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800c4fc:	f7ff fbcc 	bl	800bc98 <HAL_GetTick>
 800c500:	4602      	mov	r2, r0
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	2b02      	cmp	r3, #2
 800c508:	d918      	bls.n	800c53c <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c514:	2b40      	cmp	r3, #64	@ 0x40
 800c516:	d011      	beq.n	800c53c <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c51c:	f043 0210 	orr.w	r2, r3, #16
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c528:	f043 0201 	orr.w	r2, r3, #1
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	e007      	b.n	800c54c <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c546:	2b40      	cmp	r3, #64	@ 0x40
 800c548:	d1d8      	bne.n	800c4fc <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	20000000 	.word	0x20000000
 800c558:	431bde83 	.word	0x431bde83

0800c55c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c564:	2300      	movs	r3, #0
 800c566:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c572:	2b40      	cmp	r3, #64	@ 0x40
 800c574:	d12e      	bne.n	800c5d4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	689a      	ldr	r2, [r3, #8]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f022 0201 	bic.w	r2, r2, #1
 800c584:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c586:	f7ff fb87 	bl	800bc98 <HAL_GetTick>
 800c58a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 800c58c:	e01b      	b.n	800c5c6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800c58e:	f7ff fb83 	bl	800bc98 <HAL_GetTick>
 800c592:	4602      	mov	r2, r0
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d914      	bls.n	800c5c6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5a6:	2b40      	cmp	r3, #64	@ 0x40
 800c5a8:	d10d      	bne.n	800c5c6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5ae:	f043 0210 	orr.w	r2, r3, #16
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5ba:	f043 0201 	orr.w	r2, r3, #1
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	e007      	b.n	800c5d6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5d0:	2b40      	cmp	r3, #64	@ 0x40
 800c5d2:	d0dc      	beq.n	800c58e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3710      	adds	r7, #16
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
	...

0800c5e0 <__NVIC_SetPriorityGrouping>:
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f003 0307 	and.w	r3, r3, #7
 800c5ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c624 <__NVIC_SetPriorityGrouping+0x44>)
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c5f6:	68ba      	ldr	r2, [r7, #8]
 800c5f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c5fc:	4013      	ands	r3, r2
 800c5fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c60c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c612:	4a04      	ldr	r2, [pc, #16]	@ (800c624 <__NVIC_SetPriorityGrouping+0x44>)
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	60d3      	str	r3, [r2, #12]
}
 800c618:	bf00      	nop
 800c61a:	3714      	adds	r7, #20
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bc80      	pop	{r7}
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	e000ed00 	.word	0xe000ed00

0800c628 <__NVIC_GetPriorityGrouping>:
{
 800c628:	b480      	push	{r7}
 800c62a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c62c:	4b04      	ldr	r3, [pc, #16]	@ (800c640 <__NVIC_GetPriorityGrouping+0x18>)
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	0a1b      	lsrs	r3, r3, #8
 800c632:	f003 0307 	and.w	r3, r3, #7
}
 800c636:	4618      	mov	r0, r3
 800c638:	46bd      	mov	sp, r7
 800c63a:	bc80      	pop	{r7}
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	e000ed00 	.word	0xe000ed00

0800c644 <__NVIC_EnableIRQ>:
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	4603      	mov	r3, r0
 800c64c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c64e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c652:	2b00      	cmp	r3, #0
 800c654:	db0b      	blt.n	800c66e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c656:	79fb      	ldrb	r3, [r7, #7]
 800c658:	f003 021f 	and.w	r2, r3, #31
 800c65c:	4906      	ldr	r1, [pc, #24]	@ (800c678 <__NVIC_EnableIRQ+0x34>)
 800c65e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c662:	095b      	lsrs	r3, r3, #5
 800c664:	2001      	movs	r0, #1
 800c666:	fa00 f202 	lsl.w	r2, r0, r2
 800c66a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c66e:	bf00      	nop
 800c670:	370c      	adds	r7, #12
 800c672:	46bd      	mov	sp, r7
 800c674:	bc80      	pop	{r7}
 800c676:	4770      	bx	lr
 800c678:	e000e100 	.word	0xe000e100

0800c67c <__NVIC_DisableIRQ>:
{
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	4603      	mov	r3, r0
 800c684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	db12      	blt.n	800c6b4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c68e:	79fb      	ldrb	r3, [r7, #7]
 800c690:	f003 021f 	and.w	r2, r3, #31
 800c694:	490a      	ldr	r1, [pc, #40]	@ (800c6c0 <__NVIC_DisableIRQ+0x44>)
 800c696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c69a:	095b      	lsrs	r3, r3, #5
 800c69c:	2001      	movs	r0, #1
 800c69e:	fa00 f202 	lsl.w	r2, r0, r2
 800c6a2:	3320      	adds	r3, #32
 800c6a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c6a8:	f3bf 8f4f 	dsb	sy
}
 800c6ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c6ae:	f3bf 8f6f 	isb	sy
}
 800c6b2:	bf00      	nop
}
 800c6b4:	bf00      	nop
 800c6b6:	370c      	adds	r7, #12
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bc80      	pop	{r7}
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	e000e100 	.word	0xe000e100

0800c6c4 <__NVIC_SetPriority>:
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	6039      	str	r1, [r7, #0]
 800c6ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c6d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	db0a      	blt.n	800c6ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	b2da      	uxtb	r2, r3
 800c6dc:	490c      	ldr	r1, [pc, #48]	@ (800c710 <__NVIC_SetPriority+0x4c>)
 800c6de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6e2:	0112      	lsls	r2, r2, #4
 800c6e4:	b2d2      	uxtb	r2, r2
 800c6e6:	440b      	add	r3, r1
 800c6e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c6ec:	e00a      	b.n	800c704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	b2da      	uxtb	r2, r3
 800c6f2:	4908      	ldr	r1, [pc, #32]	@ (800c714 <__NVIC_SetPriority+0x50>)
 800c6f4:	79fb      	ldrb	r3, [r7, #7]
 800c6f6:	f003 030f 	and.w	r3, r3, #15
 800c6fa:	3b04      	subs	r3, #4
 800c6fc:	0112      	lsls	r2, r2, #4
 800c6fe:	b2d2      	uxtb	r2, r2
 800c700:	440b      	add	r3, r1
 800c702:	761a      	strb	r2, [r3, #24]
}
 800c704:	bf00      	nop
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	bc80      	pop	{r7}
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	e000e100 	.word	0xe000e100
 800c714:	e000ed00 	.word	0xe000ed00

0800c718 <NVIC_EncodePriority>:
{
 800c718:	b480      	push	{r7}
 800c71a:	b089      	sub	sp, #36	@ 0x24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f003 0307 	and.w	r3, r3, #7
 800c72a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	f1c3 0307 	rsb	r3, r3, #7
 800c732:	2b04      	cmp	r3, #4
 800c734:	bf28      	it	cs
 800c736:	2304      	movcs	r3, #4
 800c738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	3304      	adds	r3, #4
 800c73e:	2b06      	cmp	r3, #6
 800c740:	d902      	bls.n	800c748 <NVIC_EncodePriority+0x30>
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	3b03      	subs	r3, #3
 800c746:	e000      	b.n	800c74a <NVIC_EncodePriority+0x32>
 800c748:	2300      	movs	r3, #0
 800c74a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c74c:	f04f 32ff 	mov.w	r2, #4294967295
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	fa02 f303 	lsl.w	r3, r2, r3
 800c756:	43da      	mvns	r2, r3
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	401a      	ands	r2, r3
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c760:	f04f 31ff 	mov.w	r1, #4294967295
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	fa01 f303 	lsl.w	r3, r1, r3
 800c76a:	43d9      	mvns	r1, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c770:	4313      	orrs	r3, r2
}
 800c772:	4618      	mov	r0, r3
 800c774:	3724      	adds	r7, #36	@ 0x24
 800c776:	46bd      	mov	sp, r7
 800c778:	bc80      	pop	{r7}
 800c77a:	4770      	bx	lr

0800c77c <SysTick_Config>:
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	3b01      	subs	r3, #1
 800c788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c78c:	d301      	bcc.n	800c792 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800c78e:	2301      	movs	r3, #1
 800c790:	e00f      	b.n	800c7b2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c792:	4a0a      	ldr	r2, [pc, #40]	@ (800c7bc <SysTick_Config+0x40>)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	3b01      	subs	r3, #1
 800c798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c79a:	210f      	movs	r1, #15
 800c79c:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a0:	f7ff ff90 	bl	800c6c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c7a4:	4b05      	ldr	r3, [pc, #20]	@ (800c7bc <SysTick_Config+0x40>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c7aa:	4b04      	ldr	r3, [pc, #16]	@ (800c7bc <SysTick_Config+0x40>)
 800c7ac:	2207      	movs	r2, #7
 800c7ae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	e000e010 	.word	0xe000e010

0800c7c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f7ff ff09 	bl	800c5e0 <__NVIC_SetPriorityGrouping>
}
 800c7ce:	bf00      	nop
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b086      	sub	sp, #24
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	4603      	mov	r3, r0
 800c7de:	60b9      	str	r1, [r7, #8]
 800c7e0:	607a      	str	r2, [r7, #4]
 800c7e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c7e8:	f7ff ff1e 	bl	800c628 <__NVIC_GetPriorityGrouping>
 800c7ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	68b9      	ldr	r1, [r7, #8]
 800c7f2:	6978      	ldr	r0, [r7, #20]
 800c7f4:	f7ff ff90 	bl	800c718 <NVIC_EncodePriority>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7fe:	4611      	mov	r1, r2
 800c800:	4618      	mov	r0, r3
 800c802:	f7ff ff5f 	bl	800c6c4 <__NVIC_SetPriority>
}
 800c806:	bf00      	nop
 800c808:	3718      	adds	r7, #24
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b082      	sub	sp, #8
 800c812:	af00      	add	r7, sp, #0
 800c814:	4603      	mov	r3, r0
 800c816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7ff ff11 	bl	800c644 <__NVIC_EnableIRQ>
}
 800c822:	bf00      	nop
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b082      	sub	sp, #8
 800c82e:	af00      	add	r7, sp, #0
 800c830:	4603      	mov	r3, r0
 800c832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c838:	4618      	mov	r0, r3
 800c83a:	f7ff ff1f 	bl	800c67c <__NVIC_DisableIRQ>
}
 800c83e:	bf00      	nop
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b082      	sub	sp, #8
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f7ff ff94 	bl	800c77c <SysTick_Config>
 800c854:	4603      	mov	r3, r0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b084      	sub	sp, #16
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c866:	2300      	movs	r3, #0
 800c868:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c870:	b2db      	uxtb	r3, r3
 800c872:	2b02      	cmp	r3, #2
 800c874:	d005      	beq.n	800c882 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2204      	movs	r2, #4
 800c87a:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800c87c:	2301      	movs	r3, #1
 800c87e:	73fb      	strb	r3, [r7, #15]
 800c880:	e029      	b.n	800c8d6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f022 020e 	bic.w	r2, r2, #14
 800c890:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f022 0201 	bic.w	r2, r2, #1
 800c8a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8a6:	f003 021c 	and.w	r2, r3, #28
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8ae:	2101      	movs	r1, #1
 800c8b0:	fa01 f202 	lsl.w	r2, r1, r2
 800c8b4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d003      	beq.n	800c8d6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	4798      	blx	r3
    }
  }
  return status;
 800c8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3710      	adds	r7, #16
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c8ee:	b2db      	uxtb	r3, r3
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bc80      	pop	{r7}
 800c8f8:	4770      	bx	lr
	...

0800c8fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b087      	sub	sp, #28
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800c906:	2300      	movs	r3, #0
 800c908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800c90a:	2300      	movs	r3, #0
 800c90c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800c90e:	2300      	movs	r3, #0
 800c910:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800c912:	e160      	b.n	800cbd6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	2101      	movs	r1, #1
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	fa01 f303 	lsl.w	r3, r1, r3
 800c920:	4013      	ands	r3, r2
 800c922:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 8152 	beq.w	800cbd0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	f003 0303 	and.w	r3, r3, #3
 800c934:	2b01      	cmp	r3, #1
 800c936:	d005      	beq.n	800c944 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c940:	2b02      	cmp	r3, #2
 800c942:	d130      	bne.n	800c9a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	005b      	lsls	r3, r3, #1
 800c94e:	2203      	movs	r2, #3
 800c950:	fa02 f303 	lsl.w	r3, r2, r3
 800c954:	43db      	mvns	r3, r3
 800c956:	693a      	ldr	r2, [r7, #16]
 800c958:	4013      	ands	r3, r2
 800c95a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	68da      	ldr	r2, [r3, #12]
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	005b      	lsls	r3, r3, #1
 800c964:	fa02 f303 	lsl.w	r3, r2, r3
 800c968:	693a      	ldr	r2, [r7, #16]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800c97a:	2201      	movs	r2, #1
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	fa02 f303 	lsl.w	r3, r2, r3
 800c982:	43db      	mvns	r3, r3
 800c984:	693a      	ldr	r2, [r7, #16]
 800c986:	4013      	ands	r3, r2
 800c988:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	091b      	lsrs	r3, r3, #4
 800c990:	f003 0201 	and.w	r2, r3, #1
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	fa02 f303 	lsl.w	r3, r2, r3
 800c99a:	693a      	ldr	r2, [r7, #16]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	693a      	ldr	r2, [r7, #16]
 800c9a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	f003 0303 	and.w	r3, r3, #3
 800c9ae:	2b03      	cmp	r3, #3
 800c9b0:	d017      	beq.n	800c9e2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	005b      	lsls	r3, r3, #1
 800c9bc:	2203      	movs	r2, #3
 800c9be:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c2:	43db      	mvns	r3, r3
 800c9c4:	693a      	ldr	r2, [r7, #16]
 800c9c6:	4013      	ands	r3, r2
 800c9c8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	689a      	ldr	r2, [r3, #8]
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	005b      	lsls	r3, r3, #1
 800c9d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c9d6:	693a      	ldr	r2, [r7, #16]
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	f003 0303 	and.w	r3, r3, #3
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d123      	bne.n	800ca36 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	08da      	lsrs	r2, r3, #3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	3208      	adds	r2, #8
 800c9f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	f003 0307 	and.w	r3, r3, #7
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	220f      	movs	r2, #15
 800ca06:	fa02 f303 	lsl.w	r3, r2, r3
 800ca0a:	43db      	mvns	r3, r3
 800ca0c:	693a      	ldr	r2, [r7, #16]
 800ca0e:	4013      	ands	r3, r2
 800ca10:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	691a      	ldr	r2, [r3, #16]
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	f003 0307 	and.w	r3, r3, #7
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca22:	693a      	ldr	r2, [r7, #16]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	08da      	lsrs	r2, r3, #3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	3208      	adds	r2, #8
 800ca30:	6939      	ldr	r1, [r7, #16]
 800ca32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	005b      	lsls	r3, r3, #1
 800ca40:	2203      	movs	r2, #3
 800ca42:	fa02 f303 	lsl.w	r3, r2, r3
 800ca46:	43db      	mvns	r3, r3
 800ca48:	693a      	ldr	r2, [r7, #16]
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	f003 0203 	and.w	r2, r3, #3
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca5e:	693a      	ldr	r2, [r7, #16]
 800ca60:	4313      	orrs	r3, r2
 800ca62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f000 80ac 	beq.w	800cbd0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca78:	4b5e      	ldr	r3, [pc, #376]	@ (800cbf4 <HAL_GPIO_Init+0x2f8>)
 800ca7a:	6a1b      	ldr	r3, [r3, #32]
 800ca7c:	4a5d      	ldr	r2, [pc, #372]	@ (800cbf4 <HAL_GPIO_Init+0x2f8>)
 800ca7e:	f043 0301 	orr.w	r3, r3, #1
 800ca82:	6213      	str	r3, [r2, #32]
 800ca84:	4b5b      	ldr	r3, [pc, #364]	@ (800cbf4 <HAL_GPIO_Init+0x2f8>)
 800ca86:	6a1b      	ldr	r3, [r3, #32]
 800ca88:	f003 0301 	and.w	r3, r3, #1
 800ca8c:	60bb      	str	r3, [r7, #8]
 800ca8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800ca90:	4a59      	ldr	r2, [pc, #356]	@ (800cbf8 <HAL_GPIO_Init+0x2fc>)
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	089b      	lsrs	r3, r3, #2
 800ca96:	3302      	adds	r3, #2
 800ca98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	f003 0303 	and.w	r3, r3, #3
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	220f      	movs	r2, #15
 800caa8:	fa02 f303 	lsl.w	r3, r2, r3
 800caac:	43db      	mvns	r3, r3
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	4013      	ands	r3, r2
 800cab2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	4a51      	ldr	r2, [pc, #324]	@ (800cbfc <HAL_GPIO_Init+0x300>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d025      	beq.n	800cb08 <HAL_GPIO_Init+0x20c>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4a50      	ldr	r2, [pc, #320]	@ (800cc00 <HAL_GPIO_Init+0x304>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d01f      	beq.n	800cb04 <HAL_GPIO_Init+0x208>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4a4f      	ldr	r2, [pc, #316]	@ (800cc04 <HAL_GPIO_Init+0x308>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d019      	beq.n	800cb00 <HAL_GPIO_Init+0x204>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4a4e      	ldr	r2, [pc, #312]	@ (800cc08 <HAL_GPIO_Init+0x30c>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d013      	beq.n	800cafc <HAL_GPIO_Init+0x200>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a4d      	ldr	r2, [pc, #308]	@ (800cc0c <HAL_GPIO_Init+0x310>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d00d      	beq.n	800caf8 <HAL_GPIO_Init+0x1fc>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a4c      	ldr	r2, [pc, #304]	@ (800cc10 <HAL_GPIO_Init+0x314>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d007      	beq.n	800caf4 <HAL_GPIO_Init+0x1f8>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4a4b      	ldr	r2, [pc, #300]	@ (800cc14 <HAL_GPIO_Init+0x318>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d101      	bne.n	800caf0 <HAL_GPIO_Init+0x1f4>
 800caec:	2306      	movs	r3, #6
 800caee:	e00c      	b.n	800cb0a <HAL_GPIO_Init+0x20e>
 800caf0:	2307      	movs	r3, #7
 800caf2:	e00a      	b.n	800cb0a <HAL_GPIO_Init+0x20e>
 800caf4:	2305      	movs	r3, #5
 800caf6:	e008      	b.n	800cb0a <HAL_GPIO_Init+0x20e>
 800caf8:	2304      	movs	r3, #4
 800cafa:	e006      	b.n	800cb0a <HAL_GPIO_Init+0x20e>
 800cafc:	2303      	movs	r3, #3
 800cafe:	e004      	b.n	800cb0a <HAL_GPIO_Init+0x20e>
 800cb00:	2302      	movs	r3, #2
 800cb02:	e002      	b.n	800cb0a <HAL_GPIO_Init+0x20e>
 800cb04:	2301      	movs	r3, #1
 800cb06:	e000      	b.n	800cb0a <HAL_GPIO_Init+0x20e>
 800cb08:	2300      	movs	r3, #0
 800cb0a:	697a      	ldr	r2, [r7, #20]
 800cb0c:	f002 0203 	and.w	r2, r2, #3
 800cb10:	0092      	lsls	r2, r2, #2
 800cb12:	4093      	lsls	r3, r2
 800cb14:	693a      	ldr	r2, [r7, #16]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800cb1a:	4937      	ldr	r1, [pc, #220]	@ (800cbf8 <HAL_GPIO_Init+0x2fc>)
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	089b      	lsrs	r3, r3, #2
 800cb20:	3302      	adds	r3, #2
 800cb22:	693a      	ldr	r2, [r7, #16]
 800cb24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cb28:	4b3b      	ldr	r3, [pc, #236]	@ (800cc18 <HAL_GPIO_Init+0x31c>)
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	43db      	mvns	r3, r3
 800cb32:	693a      	ldr	r2, [r7, #16]
 800cb34:	4013      	ands	r3, r2
 800cb36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d003      	beq.n	800cb4c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800cb44:	693a      	ldr	r2, [r7, #16]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800cb4c:	4a32      	ldr	r2, [pc, #200]	@ (800cc18 <HAL_GPIO_Init+0x31c>)
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cb52:	4b31      	ldr	r3, [pc, #196]	@ (800cc18 <HAL_GPIO_Init+0x31c>)
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	43db      	mvns	r3, r3
 800cb5c:	693a      	ldr	r2, [r7, #16]
 800cb5e:	4013      	ands	r3, r2
 800cb60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d003      	beq.n	800cb76 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800cb6e:	693a      	ldr	r2, [r7, #16]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	4313      	orrs	r3, r2
 800cb74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800cb76:	4a28      	ldr	r2, [pc, #160]	@ (800cc18 <HAL_GPIO_Init+0x31c>)
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cb7c:	4b26      	ldr	r3, [pc, #152]	@ (800cc18 <HAL_GPIO_Init+0x31c>)
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	43db      	mvns	r3, r3
 800cb86:	693a      	ldr	r2, [r7, #16]
 800cb88:	4013      	ands	r3, r2
 800cb8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d003      	beq.n	800cba0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800cb98:	693a      	ldr	r2, [r7, #16]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800cba0:	4a1d      	ldr	r2, [pc, #116]	@ (800cc18 <HAL_GPIO_Init+0x31c>)
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cba6:	4b1c      	ldr	r3, [pc, #112]	@ (800cc18 <HAL_GPIO_Init+0x31c>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	43db      	mvns	r3, r3
 800cbb0:	693a      	ldr	r2, [r7, #16]
 800cbb2:	4013      	ands	r3, r2
 800cbb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d003      	beq.n	800cbca <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800cbc2:	693a      	ldr	r2, [r7, #16]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800cbca:	4a13      	ldr	r2, [pc, #76]	@ (800cc18 <HAL_GPIO_Init+0x31c>)
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	fa22 f303 	lsr.w	r3, r2, r3
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	f47f ae97 	bne.w	800c914 <HAL_GPIO_Init+0x18>
  }
}
 800cbe6:	bf00      	nop
 800cbe8:	bf00      	nop
 800cbea:	371c      	adds	r7, #28
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bc80      	pop	{r7}
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	40023800 	.word	0x40023800
 800cbf8:	40010000 	.word	0x40010000
 800cbfc:	40020000 	.word	0x40020000
 800cc00:	40020400 	.word	0x40020400
 800cc04:	40020800 	.word	0x40020800
 800cc08:	40020c00 	.word	0x40020c00
 800cc0c:	40021000 	.word	0x40021000
 800cc10:	40021400 	.word	0x40021400
 800cc14:	40021800 	.word	0x40021800
 800cc18:	40010400 	.word	0x40010400

0800cc1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b087      	sub	sp, #28
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800cc26:	2300      	movs	r3, #0
 800cc28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800cc32:	e0c4      	b.n	800cdbe <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800cc34:	2201      	movs	r2, #1
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	fa02 f303 	lsl.w	r3, r2, r3
 800cc3c:	683a      	ldr	r2, [r7, #0]
 800cc3e:	4013      	ands	r3, r2
 800cc40:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	f000 80b7 	beq.w	800cdb8 <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 800cc4a:	4a63      	ldr	r2, [pc, #396]	@ (800cdd8 <HAL_GPIO_DeInit+0x1bc>)
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	089b      	lsrs	r3, r3, #2
 800cc50:	3302      	adds	r3, #2
 800cc52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc56:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	f003 0303 	and.w	r3, r3, #3
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	220f      	movs	r2, #15
 800cc62:	fa02 f303 	lsl.w	r3, r2, r3
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	4013      	ands	r3, r2
 800cc6a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4a5b      	ldr	r2, [pc, #364]	@ (800cddc <HAL_GPIO_DeInit+0x1c0>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d025      	beq.n	800ccc0 <HAL_GPIO_DeInit+0xa4>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4a5a      	ldr	r2, [pc, #360]	@ (800cde0 <HAL_GPIO_DeInit+0x1c4>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d01f      	beq.n	800ccbc <HAL_GPIO_DeInit+0xa0>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4a59      	ldr	r2, [pc, #356]	@ (800cde4 <HAL_GPIO_DeInit+0x1c8>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d019      	beq.n	800ccb8 <HAL_GPIO_DeInit+0x9c>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a58      	ldr	r2, [pc, #352]	@ (800cde8 <HAL_GPIO_DeInit+0x1cc>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d013      	beq.n	800ccb4 <HAL_GPIO_DeInit+0x98>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4a57      	ldr	r2, [pc, #348]	@ (800cdec <HAL_GPIO_DeInit+0x1d0>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d00d      	beq.n	800ccb0 <HAL_GPIO_DeInit+0x94>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	4a56      	ldr	r2, [pc, #344]	@ (800cdf0 <HAL_GPIO_DeInit+0x1d4>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d007      	beq.n	800ccac <HAL_GPIO_DeInit+0x90>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4a55      	ldr	r2, [pc, #340]	@ (800cdf4 <HAL_GPIO_DeInit+0x1d8>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d101      	bne.n	800cca8 <HAL_GPIO_DeInit+0x8c>
 800cca4:	2306      	movs	r3, #6
 800cca6:	e00c      	b.n	800ccc2 <HAL_GPIO_DeInit+0xa6>
 800cca8:	2307      	movs	r3, #7
 800ccaa:	e00a      	b.n	800ccc2 <HAL_GPIO_DeInit+0xa6>
 800ccac:	2305      	movs	r3, #5
 800ccae:	e008      	b.n	800ccc2 <HAL_GPIO_DeInit+0xa6>
 800ccb0:	2304      	movs	r3, #4
 800ccb2:	e006      	b.n	800ccc2 <HAL_GPIO_DeInit+0xa6>
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	e004      	b.n	800ccc2 <HAL_GPIO_DeInit+0xa6>
 800ccb8:	2302      	movs	r3, #2
 800ccba:	e002      	b.n	800ccc2 <HAL_GPIO_DeInit+0xa6>
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e000      	b.n	800ccc2 <HAL_GPIO_DeInit+0xa6>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	f002 0203 	and.w	r2, r2, #3
 800ccc8:	0092      	lsls	r2, r2, #2
 800ccca:	4093      	lsls	r3, r2
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d132      	bne.n	800cd38 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800ccd2:	4b49      	ldr	r3, [pc, #292]	@ (800cdf8 <HAL_GPIO_DeInit+0x1dc>)
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	43db      	mvns	r3, r3
 800ccda:	4947      	ldr	r1, [pc, #284]	@ (800cdf8 <HAL_GPIO_DeInit+0x1dc>)
 800ccdc:	4013      	ands	r3, r2
 800ccde:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800cce0:	4b45      	ldr	r3, [pc, #276]	@ (800cdf8 <HAL_GPIO_DeInit+0x1dc>)
 800cce2:	685a      	ldr	r2, [r3, #4]
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	43db      	mvns	r3, r3
 800cce8:	4943      	ldr	r1, [pc, #268]	@ (800cdf8 <HAL_GPIO_DeInit+0x1dc>)
 800ccea:	4013      	ands	r3, r2
 800ccec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800ccee:	4b42      	ldr	r3, [pc, #264]	@ (800cdf8 <HAL_GPIO_DeInit+0x1dc>)
 800ccf0:	68da      	ldr	r2, [r3, #12]
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	43db      	mvns	r3, r3
 800ccf6:	4940      	ldr	r1, [pc, #256]	@ (800cdf8 <HAL_GPIO_DeInit+0x1dc>)
 800ccf8:	4013      	ands	r3, r2
 800ccfa:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800ccfc:	4b3e      	ldr	r3, [pc, #248]	@ (800cdf8 <HAL_GPIO_DeInit+0x1dc>)
 800ccfe:	689a      	ldr	r2, [r3, #8]
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	43db      	mvns	r3, r3
 800cd04:	493c      	ldr	r1, [pc, #240]	@ (800cdf8 <HAL_GPIO_DeInit+0x1dc>)
 800cd06:	4013      	ands	r3, r2
 800cd08:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	f003 0303 	and.w	r3, r3, #3
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	220f      	movs	r2, #15
 800cd14:	fa02 f303 	lsl.w	r3, r2, r3
 800cd18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 800cd1a:	4a2f      	ldr	r2, [pc, #188]	@ (800cdd8 <HAL_GPIO_DeInit+0x1bc>)
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	089b      	lsrs	r3, r3, #2
 800cd20:	3302      	adds	r3, #2
 800cd22:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	43da      	mvns	r2, r3
 800cd2a:	482b      	ldr	r0, [pc, #172]	@ (800cdd8 <HAL_GPIO_DeInit+0x1bc>)
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	089b      	lsrs	r3, r3, #2
 800cd30:	400a      	ands	r2, r1
 800cd32:	3302      	adds	r3, #2
 800cd34:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	005b      	lsls	r3, r3, #1
 800cd40:	2103      	movs	r1, #3
 800cd42:	fa01 f303 	lsl.w	r3, r1, r3
 800cd46:	43db      	mvns	r3, r3
 800cd48:	401a      	ands	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	08da      	lsrs	r2, r3, #3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	3208      	adds	r2, #8
 800cd56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	f003 0307 	and.w	r3, r3, #7
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	220f      	movs	r2, #15
 800cd64:	fa02 f303 	lsl.w	r3, r2, r3
 800cd68:	43db      	mvns	r3, r3
 800cd6a:	697a      	ldr	r2, [r7, #20]
 800cd6c:	08d2      	lsrs	r2, r2, #3
 800cd6e:	4019      	ands	r1, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	3208      	adds	r2, #8
 800cd74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	68da      	ldr	r2, [r3, #12]
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	005b      	lsls	r3, r3, #1
 800cd80:	2103      	movs	r1, #3
 800cd82:	fa01 f303 	lsl.w	r3, r1, r3
 800cd86:	43db      	mvns	r3, r3
 800cd88:	401a      	ands	r2, r3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	685a      	ldr	r2, [r3, #4]
 800cd92:	2101      	movs	r1, #1
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	fa01 f303 	lsl.w	r3, r1, r3
 800cd9a:	43db      	mvns	r3, r3
 800cd9c:	401a      	ands	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	689a      	ldr	r2, [r3, #8]
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	005b      	lsls	r3, r3, #1
 800cdaa:	2103      	movs	r1, #3
 800cdac:	fa01 f303 	lsl.w	r3, r1, r3
 800cdb0:	43db      	mvns	r3, r3
 800cdb2:	401a      	ands	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	609a      	str	r2, [r3, #8]
    }

    position++;
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800cdbe:	683a      	ldr	r2, [r7, #0]
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	fa22 f303 	lsr.w	r3, r2, r3
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f47f af34 	bne.w	800cc34 <HAL_GPIO_DeInit+0x18>
  }
}
 800cdcc:	bf00      	nop
 800cdce:	bf00      	nop
 800cdd0:	371c      	adds	r7, #28
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bc80      	pop	{r7}
 800cdd6:	4770      	bx	lr
 800cdd8:	40010000 	.word	0x40010000
 800cddc:	40020000 	.word	0x40020000
 800cde0:	40020400 	.word	0x40020400
 800cde4:	40020800 	.word	0x40020800
 800cde8:	40020c00 	.word	0x40020c00
 800cdec:	40021000 	.word	0x40021000
 800cdf0:	40021400 	.word	0x40021400
 800cdf4:	40021800 	.word	0x40021800
 800cdf8:	40010400 	.word	0x40010400

0800cdfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	460b      	mov	r3, r1
 800ce06:	807b      	strh	r3, [r7, #2]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ce0c:	787b      	ldrb	r3, [r7, #1]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d003      	beq.n	800ce1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ce12:	887a      	ldrh	r2, [r7, #2]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800ce18:	e003      	b.n	800ce22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800ce1a:	887b      	ldrh	r3, [r7, #2]
 800ce1c:	041a      	lsls	r2, r3, #16
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	619a      	str	r2, [r3, #24]
}
 800ce22:	bf00      	nop
 800ce24:	370c      	adds	r7, #12
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bc80      	pop	{r7}
 800ce2a:	4770      	bx	lr

0800ce2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	460b      	mov	r3, r1
 800ce36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	695b      	ldr	r3, [r3, #20]
 800ce3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ce3e:	887a      	ldrh	r2, [r7, #2]
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	4013      	ands	r3, r2
 800ce44:	041a      	lsls	r2, r3, #16
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	43d9      	mvns	r1, r3
 800ce4a:	887b      	ldrh	r3, [r7, #2]
 800ce4c:	400b      	ands	r3, r1
 800ce4e:	431a      	orrs	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	619a      	str	r2, [r3, #24]
}
 800ce54:	bf00      	nop
 800ce56:	3714      	adds	r7, #20
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bc80      	pop	{r7}
 800ce5c:	4770      	bx	lr
	...

0800ce60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	4603      	mov	r3, r0
 800ce68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ce6a:	4b08      	ldr	r3, [pc, #32]	@ (800ce8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ce6c:	695a      	ldr	r2, [r3, #20]
 800ce6e:	88fb      	ldrh	r3, [r7, #6]
 800ce70:	4013      	ands	r3, r2
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d006      	beq.n	800ce84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ce76:	4a05      	ldr	r2, [pc, #20]	@ (800ce8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ce78:	88fb      	ldrh	r3, [r7, #6]
 800ce7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ce7c:	88fb      	ldrh	r3, [r7, #6]
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7f5 fcb2 	bl	80027e8 <HAL_GPIO_EXTI_Callback>
  }
}
 800ce84:	bf00      	nop
 800ce86:	3708      	adds	r7, #8
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	40010400 	.word	0x40010400

0800ce90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d101      	bne.n	800cea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e12b      	b.n	800d0fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d106      	bne.n	800cebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f95d 	bl	800d176 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2224      	movs	r2, #36	@ 0x24
 800cec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f022 0201 	bic.w	r2, r2, #1
 800ced2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cee2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cef2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800cef4:	f003 fa6c 	bl	80103d0 <HAL_RCC_GetPCLK1Freq>
 800cef8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	4a81      	ldr	r2, [pc, #516]	@ (800d104 <HAL_I2C_Init+0x274>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d807      	bhi.n	800cf14 <HAL_I2C_Init+0x84>
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	4a80      	ldr	r2, [pc, #512]	@ (800d108 <HAL_I2C_Init+0x278>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	bf94      	ite	ls
 800cf0c:	2301      	movls	r3, #1
 800cf0e:	2300      	movhi	r3, #0
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	e006      	b.n	800cf22 <HAL_I2C_Init+0x92>
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	4a7d      	ldr	r2, [pc, #500]	@ (800d10c <HAL_I2C_Init+0x27c>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	bf94      	ite	ls
 800cf1c:	2301      	movls	r3, #1
 800cf1e:	2300      	movhi	r3, #0
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d001      	beq.n	800cf2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800cf26:	2301      	movs	r3, #1
 800cf28:	e0e7      	b.n	800d0fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	4a78      	ldr	r2, [pc, #480]	@ (800d110 <HAL_I2C_Init+0x280>)
 800cf2e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf32:	0c9b      	lsrs	r3, r3, #18
 800cf34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	430a      	orrs	r2, r1
 800cf48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	6a1b      	ldr	r3, [r3, #32]
 800cf50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	4a6a      	ldr	r2, [pc, #424]	@ (800d104 <HAL_I2C_Init+0x274>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d802      	bhi.n	800cf64 <HAL_I2C_Init+0xd4>
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	3301      	adds	r3, #1
 800cf62:	e009      	b.n	800cf78 <HAL_I2C_Init+0xe8>
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800cf6a:	fb02 f303 	mul.w	r3, r2, r3
 800cf6e:	4a69      	ldr	r2, [pc, #420]	@ (800d114 <HAL_I2C_Init+0x284>)
 800cf70:	fba2 2303 	umull	r2, r3, r2, r3
 800cf74:	099b      	lsrs	r3, r3, #6
 800cf76:	3301      	adds	r3, #1
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	6812      	ldr	r2, [r2, #0]
 800cf7c:	430b      	orrs	r3, r1
 800cf7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	69db      	ldr	r3, [r3, #28]
 800cf86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800cf8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	495c      	ldr	r1, [pc, #368]	@ (800d104 <HAL_I2C_Init+0x274>)
 800cf94:	428b      	cmp	r3, r1
 800cf96:	d819      	bhi.n	800cfcc <HAL_I2C_Init+0x13c>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	1e59      	subs	r1, r3, #1
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	005b      	lsls	r3, r3, #1
 800cfa2:	fbb1 f3f3 	udiv	r3, r1, r3
 800cfa6:	1c59      	adds	r1, r3, #1
 800cfa8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cfac:	400b      	ands	r3, r1
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00a      	beq.n	800cfc8 <HAL_I2C_Init+0x138>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	1e59      	subs	r1, r3, #1
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	005b      	lsls	r3, r3, #1
 800cfbc:	fbb1 f3f3 	udiv	r3, r1, r3
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfc6:	e051      	b.n	800d06c <HAL_I2C_Init+0x1dc>
 800cfc8:	2304      	movs	r3, #4
 800cfca:	e04f      	b.n	800d06c <HAL_I2C_Init+0x1dc>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d111      	bne.n	800cff8 <HAL_I2C_Init+0x168>
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	1e58      	subs	r0, r3, #1
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6859      	ldr	r1, [r3, #4]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	005b      	lsls	r3, r3, #1
 800cfe0:	440b      	add	r3, r1
 800cfe2:	fbb0 f3f3 	udiv	r3, r0, r3
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	bf0c      	ite	eq
 800cff0:	2301      	moveq	r3, #1
 800cff2:	2300      	movne	r3, #0
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	e012      	b.n	800d01e <HAL_I2C_Init+0x18e>
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	1e58      	subs	r0, r3, #1
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6859      	ldr	r1, [r3, #4]
 800d000:	460b      	mov	r3, r1
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	440b      	add	r3, r1
 800d006:	0099      	lsls	r1, r3, #2
 800d008:	440b      	add	r3, r1
 800d00a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d00e:	3301      	adds	r3, #1
 800d010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d014:	2b00      	cmp	r3, #0
 800d016:	bf0c      	ite	eq
 800d018:	2301      	moveq	r3, #1
 800d01a:	2300      	movne	r3, #0
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d001      	beq.n	800d026 <HAL_I2C_Init+0x196>
 800d022:	2301      	movs	r3, #1
 800d024:	e022      	b.n	800d06c <HAL_I2C_Init+0x1dc>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	689b      	ldr	r3, [r3, #8]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d10e      	bne.n	800d04c <HAL_I2C_Init+0x1bc>
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	1e58      	subs	r0, r3, #1
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6859      	ldr	r1, [r3, #4]
 800d036:	460b      	mov	r3, r1
 800d038:	005b      	lsls	r3, r3, #1
 800d03a:	440b      	add	r3, r1
 800d03c:	fbb0 f3f3 	udiv	r3, r0, r3
 800d040:	3301      	adds	r3, #1
 800d042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d04a:	e00f      	b.n	800d06c <HAL_I2C_Init+0x1dc>
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	1e58      	subs	r0, r3, #1
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6859      	ldr	r1, [r3, #4]
 800d054:	460b      	mov	r3, r1
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	440b      	add	r3, r1
 800d05a:	0099      	lsls	r1, r3, #2
 800d05c:	440b      	add	r3, r1
 800d05e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d062:	3301      	adds	r3, #1
 800d064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d068:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d06c:	6879      	ldr	r1, [r7, #4]
 800d06e:	6809      	ldr	r1, [r1, #0]
 800d070:	4313      	orrs	r3, r2
 800d072:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	69da      	ldr	r2, [r3, #28]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a1b      	ldr	r3, [r3, #32]
 800d086:	431a      	orrs	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	430a      	orrs	r2, r1
 800d08e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	689b      	ldr	r3, [r3, #8]
 800d096:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800d09a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	6911      	ldr	r1, [r2, #16]
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	68d2      	ldr	r2, [r2, #12]
 800d0a6:	4311      	orrs	r1, r2
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	6812      	ldr	r2, [r2, #0]
 800d0ac:	430b      	orrs	r3, r1
 800d0ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	695a      	ldr	r2, [r3, #20]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	699b      	ldr	r3, [r3, #24]
 800d0c2:	431a      	orrs	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	430a      	orrs	r2, r1
 800d0ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f042 0201 	orr.w	r2, r2, #1
 800d0da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2220      	movs	r2, #32
 800d0e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	000186a0 	.word	0x000186a0
 800d108:	001e847f 	.word	0x001e847f
 800d10c:	003d08ff 	.word	0x003d08ff
 800d110:	431bde83 	.word	0x431bde83
 800d114:	10624dd3 	.word	0x10624dd3

0800d118 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d101      	bne.n	800d12a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800d126:	2301      	movs	r3, #1
 800d128:	e021      	b.n	800d16e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2224      	movs	r2, #36	@ 0x24
 800d12e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f022 0201 	bic.w	r2, r2, #1
 800d140:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 f820 	bl	800d188 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800d176:	b480      	push	{r7}
 800d178:	b083      	sub	sp, #12
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800d17e:	bf00      	nop
 800d180:	370c      	adds	r7, #12
 800d182:	46bd      	mov	sp, r7
 800d184:	bc80      	pop	{r7}
 800d186:	4770      	bx	lr

0800d188 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800d190:	bf00      	nop
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	bc80      	pop	{r7}
 800d198:	4770      	bx	lr

0800d19a <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800d19a:	b480      	push	{r7}
 800d19c:	b083      	sub	sp, #12
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	695b      	ldr	r3, [r3, #20]
 800d1a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1ac:	2b80      	cmp	r3, #128	@ 0x80
 800d1ae:	d103      	bne.n	800d1b8 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	611a      	str	r2, [r3, #16]
  }
}
 800d1b8:	bf00      	nop
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bc80      	pop	{r7}
 800d1c0:	4770      	bx	lr
	...

0800d1c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b088      	sub	sp, #32
 800d1c8:	af02      	add	r7, sp, #8
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	4608      	mov	r0, r1
 800d1ce:	4611      	mov	r1, r2
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	817b      	strh	r3, [r7, #10]
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	813b      	strh	r3, [r7, #8]
 800d1da:	4613      	mov	r3, r2
 800d1dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d1de:	f7fe fd5b 	bl	800bc98 <HAL_GetTick>
 800d1e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	2b20      	cmp	r3, #32
 800d1ee:	f040 80d9 	bne.w	800d3a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	9300      	str	r3, [sp, #0]
 800d1f6:	2319      	movs	r3, #25
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	496d      	ldr	r1, [pc, #436]	@ (800d3b0 <HAL_I2C_Mem_Write+0x1ec>)
 800d1fc:	68f8      	ldr	r0, [r7, #12]
 800d1fe:	f002 f8f7 	bl	800f3f0 <I2C_WaitOnFlagUntilTimeout>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d001      	beq.n	800d20c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d208:	2302      	movs	r3, #2
 800d20a:	e0cc      	b.n	800d3a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d212:	2b01      	cmp	r3, #1
 800d214:	d101      	bne.n	800d21a <HAL_I2C_Mem_Write+0x56>
 800d216:	2302      	movs	r3, #2
 800d218:	e0c5      	b.n	800d3a6 <HAL_I2C_Mem_Write+0x1e2>
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2201      	movs	r2, #1
 800d21e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f003 0301 	and.w	r3, r3, #1
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	d007      	beq.n	800d240 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f042 0201 	orr.w	r2, r2, #1
 800d23e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d24e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2221      	movs	r2, #33	@ 0x21
 800d254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2240      	movs	r2, #64	@ 0x40
 800d25c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2200      	movs	r2, #0
 800d264:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6a3a      	ldr	r2, [r7, #32]
 800d26a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d270:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d276:	b29a      	uxth	r2, r3
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	4a4d      	ldr	r2, [pc, #308]	@ (800d3b4 <HAL_I2C_Mem_Write+0x1f0>)
 800d280:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d282:	88f8      	ldrh	r0, [r7, #6]
 800d284:	893a      	ldrh	r2, [r7, #8]
 800d286:	8979      	ldrh	r1, [r7, #10]
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	9301      	str	r3, [sp, #4]
 800d28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d28e:	9300      	str	r3, [sp, #0]
 800d290:	4603      	mov	r3, r0
 800d292:	68f8      	ldr	r0, [r7, #12]
 800d294:	f001 fe86 	bl	800efa4 <I2C_RequestMemoryWrite>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d052      	beq.n	800d344 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e081      	b.n	800d3a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2a2:	697a      	ldr	r2, [r7, #20]
 800d2a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f002 f9bc 	bl	800f624 <I2C_WaitOnTXEFlagUntilTimeout>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00d      	beq.n	800d2ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2b6:	2b04      	cmp	r3, #4
 800d2b8:	d107      	bne.n	800d2ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d2c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e06b      	b.n	800d3a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2d2:	781a      	ldrb	r2, [r3, #0]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2de:	1c5a      	adds	r2, r3, #1
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2e8:	3b01      	subs	r3, #1
 800d2ea:	b29a      	uxth	r2, r3
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	695b      	ldr	r3, [r3, #20]
 800d304:	f003 0304 	and.w	r3, r3, #4
 800d308:	2b04      	cmp	r3, #4
 800d30a:	d11b      	bne.n	800d344 <HAL_I2C_Mem_Write+0x180>
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d310:	2b00      	cmp	r3, #0
 800d312:	d017      	beq.n	800d344 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d318:	781a      	ldrb	r2, [r3, #0]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d324:	1c5a      	adds	r2, r3, #1
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d32e:	3b01      	subs	r3, #1
 800d330:	b29a      	uxth	r2, r3
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	3b01      	subs	r3, #1
 800d33e:	b29a      	uxth	r2, r3
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d1aa      	bne.n	800d2a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d34c:	697a      	ldr	r2, [r7, #20]
 800d34e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	f002 f9af 	bl	800f6b4 <I2C_WaitOnBTFFlagUntilTimeout>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00d      	beq.n	800d378 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d360:	2b04      	cmp	r3, #4
 800d362:	d107      	bne.n	800d374 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d372:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d374:	2301      	movs	r3, #1
 800d376:	e016      	b.n	800d3a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2220      	movs	r2, #32
 800d38c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2200      	movs	r2, #0
 800d394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	e000      	b.n	800d3a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d3a4:	2302      	movs	r3, #2
  }
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3718      	adds	r7, #24
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	00100002 	.word	0x00100002
 800d3b4:	ffff0000 	.word	0xffff0000

0800d3b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b08c      	sub	sp, #48	@ 0x30
 800d3bc:	af02      	add	r7, sp, #8
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	4608      	mov	r0, r1
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	817b      	strh	r3, [r7, #10]
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	813b      	strh	r3, [r7, #8]
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d3d2:	f7fe fc61 	bl	800bc98 <HAL_GetTick>
 800d3d6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	2b20      	cmp	r3, #32
 800d3e2:	f040 8208 	bne.w	800d7f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e8:	9300      	str	r3, [sp, #0]
 800d3ea:	2319      	movs	r3, #25
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	497b      	ldr	r1, [pc, #492]	@ (800d5dc <HAL_I2C_Mem_Read+0x224>)
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f001 fffd 	bl	800f3f0 <I2C_WaitOnFlagUntilTimeout>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d001      	beq.n	800d400 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d3fc:	2302      	movs	r3, #2
 800d3fe:	e1fb      	b.n	800d7f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d406:	2b01      	cmp	r3, #1
 800d408:	d101      	bne.n	800d40e <HAL_I2C_Mem_Read+0x56>
 800d40a:	2302      	movs	r3, #2
 800d40c:	e1f4      	b.n	800d7f8 <HAL_I2C_Mem_Read+0x440>
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2201      	movs	r2, #1
 800d412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	2b01      	cmp	r3, #1
 800d422:	d007      	beq.n	800d434 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f042 0201 	orr.w	r2, r2, #1
 800d432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2222      	movs	r2, #34	@ 0x22
 800d448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2240      	movs	r2, #64	@ 0x40
 800d450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2200      	movs	r2, #0
 800d458:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d45e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800d464:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d46a:	b29a      	uxth	r2, r3
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	4a5b      	ldr	r2, [pc, #364]	@ (800d5e0 <HAL_I2C_Mem_Read+0x228>)
 800d474:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d476:	88f8      	ldrh	r0, [r7, #6]
 800d478:	893a      	ldrh	r2, [r7, #8]
 800d47a:	8979      	ldrh	r1, [r7, #10]
 800d47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d47e:	9301      	str	r3, [sp, #4]
 800d480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	4603      	mov	r3, r0
 800d486:	68f8      	ldr	r0, [r7, #12]
 800d488:	f001 fe22 	bl	800f0d0 <I2C_RequestMemoryRead>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d001      	beq.n	800d496 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d492:	2301      	movs	r3, #1
 800d494:	e1b0      	b.n	800d7f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d113      	bne.n	800d4c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d49e:	2300      	movs	r3, #0
 800d4a0:	623b      	str	r3, [r7, #32]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	695b      	ldr	r3, [r3, #20]
 800d4a8:	623b      	str	r3, [r7, #32]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	699b      	ldr	r3, [r3, #24]
 800d4b0:	623b      	str	r3, [r7, #32]
 800d4b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d4c2:	601a      	str	r2, [r3, #0]
 800d4c4:	e184      	b.n	800d7d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d11b      	bne.n	800d506 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d4dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4de:	2300      	movs	r3, #0
 800d4e0:	61fb      	str	r3, [r7, #28]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	695b      	ldr	r3, [r3, #20]
 800d4e8:	61fb      	str	r3, [r7, #28]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	699b      	ldr	r3, [r3, #24]
 800d4f0:	61fb      	str	r3, [r7, #28]
 800d4f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d502:	601a      	str	r2, [r3, #0]
 800d504:	e164      	b.n	800d7d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d11b      	bne.n	800d546 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d51c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d52c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d52e:	2300      	movs	r3, #0
 800d530:	61bb      	str	r3, [r7, #24]
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	695b      	ldr	r3, [r3, #20]
 800d538:	61bb      	str	r3, [r7, #24]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	699b      	ldr	r3, [r3, #24]
 800d540:	61bb      	str	r3, [r7, #24]
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	e144      	b.n	800d7d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d546:	2300      	movs	r3, #0
 800d548:	617b      	str	r3, [r7, #20]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	695b      	ldr	r3, [r3, #20]
 800d550:	617b      	str	r3, [r7, #20]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	699b      	ldr	r3, [r3, #24]
 800d558:	617b      	str	r3, [r7, #20]
 800d55a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d55c:	e138      	b.n	800d7d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d562:	2b03      	cmp	r3, #3
 800d564:	f200 80f1 	bhi.w	800d74a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d123      	bne.n	800d5b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d572:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f002 f917 	bl	800f7a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d001      	beq.n	800d584 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	e139      	b.n	800d7f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	691a      	ldr	r2, [r3, #16]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d58e:	b2d2      	uxtb	r2, r2
 800d590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d596:	1c5a      	adds	r2, r3, #1
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	3b01      	subs	r3, #1
 800d5b0:	b29a      	uxth	r2, r3
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d5b6:	e10b      	b.n	800d7d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	d14e      	bne.n	800d65e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c2:	9300      	str	r3, [sp, #0]
 800d5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	4906      	ldr	r1, [pc, #24]	@ (800d5e4 <HAL_I2C_Mem_Read+0x22c>)
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	f001 ff10 	bl	800f3f0 <I2C_WaitOnFlagUntilTimeout>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d008      	beq.n	800d5e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	e10e      	b.n	800d7f8 <HAL_I2C_Mem_Read+0x440>
 800d5da:	bf00      	nop
 800d5dc:	00100002 	.word	0x00100002
 800d5e0:	ffff0000 	.word	0xffff0000
 800d5e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d5f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	691a      	ldr	r2, [r3, #16]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d602:	b2d2      	uxtb	r2, r2
 800d604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d60a:	1c5a      	adds	r2, r3, #1
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d614:	3b01      	subs	r3, #1
 800d616:	b29a      	uxth	r2, r3
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d620:	b29b      	uxth	r3, r3
 800d622:	3b01      	subs	r3, #1
 800d624:	b29a      	uxth	r2, r3
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	691a      	ldr	r2, [r3, #16]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d634:	b2d2      	uxtb	r2, r2
 800d636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d63c:	1c5a      	adds	r2, r3, #1
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d646:	3b01      	subs	r3, #1
 800d648:	b29a      	uxth	r2, r3
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d652:	b29b      	uxth	r3, r3
 800d654:	3b01      	subs	r3, #1
 800d656:	b29a      	uxth	r2, r3
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d65c:	e0b8      	b.n	800d7d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d664:	2200      	movs	r2, #0
 800d666:	4966      	ldr	r1, [pc, #408]	@ (800d800 <HAL_I2C_Mem_Read+0x448>)
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f001 fec1 	bl	800f3f0 <I2C_WaitOnFlagUntilTimeout>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d674:	2301      	movs	r3, #1
 800d676:	e0bf      	b.n	800d7f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	691a      	ldr	r2, [r3, #16]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d692:	b2d2      	uxtb	r2, r2
 800d694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d69a:	1c5a      	adds	r2, r3, #1
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6a4:	3b01      	subs	r3, #1
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	3b01      	subs	r3, #1
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	494f      	ldr	r1, [pc, #316]	@ (800d800 <HAL_I2C_Mem_Read+0x448>)
 800d6c4:	68f8      	ldr	r0, [r7, #12]
 800d6c6:	f001 fe93 	bl	800f3f0 <I2C_WaitOnFlagUntilTimeout>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d001      	beq.n	800d6d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	e091      	b.n	800d7f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d6e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	691a      	ldr	r2, [r3, #16]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6ee:	b2d2      	uxtb	r2, r2
 800d6f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6f6:	1c5a      	adds	r2, r3, #1
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d700:	3b01      	subs	r3, #1
 800d702:	b29a      	uxth	r2, r3
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	3b01      	subs	r3, #1
 800d710:	b29a      	uxth	r2, r3
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	691a      	ldr	r2, [r3, #16]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d720:	b2d2      	uxtb	r2, r2
 800d722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d728:	1c5a      	adds	r2, r3, #1
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d732:	3b01      	subs	r3, #1
 800d734:	b29a      	uxth	r2, r3
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d73e:	b29b      	uxth	r3, r3
 800d740:	3b01      	subs	r3, #1
 800d742:	b29a      	uxth	r2, r3
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d748:	e042      	b.n	800d7d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d74a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d74c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f002 f82a 	bl	800f7a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d75a:	2301      	movs	r3, #1
 800d75c:	e04c      	b.n	800d7f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	691a      	ldr	r2, [r3, #16]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d768:	b2d2      	uxtb	r2, r2
 800d76a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d770:	1c5a      	adds	r2, r3, #1
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d77a:	3b01      	subs	r3, #1
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d786:	b29b      	uxth	r3, r3
 800d788:	3b01      	subs	r3, #1
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	695b      	ldr	r3, [r3, #20]
 800d796:	f003 0304 	and.w	r3, r3, #4
 800d79a:	2b04      	cmp	r3, #4
 800d79c:	d118      	bne.n	800d7d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	691a      	ldr	r2, [r3, #16]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a8:	b2d2      	uxtb	r2, r2
 800d7aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7b0:	1c5a      	adds	r2, r3, #1
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	3b01      	subs	r3, #1
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f47f aec2 	bne.w	800d55e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2220      	movs	r2, #32
 800d7de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	e000      	b.n	800d7f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d7f6:	2302      	movs	r3, #2
  }
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3728      	adds	r7, #40	@ 0x28
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	00010004 	.word	0x00010004

0800d804 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800d80c:	2300      	movs	r3, #0
 800d80e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d81c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d824:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d82c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d82e:	7bfb      	ldrb	r3, [r7, #15]
 800d830:	2b10      	cmp	r3, #16
 800d832:	d003      	beq.n	800d83c <HAL_I2C_EV_IRQHandler+0x38>
 800d834:	7bfb      	ldrb	r3, [r7, #15]
 800d836:	2b40      	cmp	r3, #64	@ 0x40
 800d838:	f040 80b1 	bne.w	800d99e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	699b      	ldr	r3, [r3, #24]
 800d842:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	695b      	ldr	r3, [r3, #20]
 800d84a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	f003 0301 	and.w	r3, r3, #1
 800d852:	2b00      	cmp	r3, #0
 800d854:	d10d      	bne.n	800d872 <HAL_I2C_EV_IRQHandler+0x6e>
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800d85c:	d003      	beq.n	800d866 <HAL_I2C_EV_IRQHandler+0x62>
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800d864:	d101      	bne.n	800d86a <HAL_I2C_EV_IRQHandler+0x66>
 800d866:	2301      	movs	r3, #1
 800d868:	e000      	b.n	800d86c <HAL_I2C_EV_IRQHandler+0x68>
 800d86a:	2300      	movs	r3, #0
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	f000 8114 	beq.w	800da9a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	f003 0301 	and.w	r3, r3, #1
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00b      	beq.n	800d894 <HAL_I2C_EV_IRQHandler+0x90>
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d882:	2b00      	cmp	r3, #0
 800d884:	d006      	beq.n	800d894 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f002 f819 	bl	800f8be <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 fd70 	bl	800e372 <I2C_Master_SB>
 800d892:	e083      	b.n	800d99c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d894:	69fb      	ldr	r3, [r7, #28]
 800d896:	f003 0308 	and.w	r3, r3, #8
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d008      	beq.n	800d8b0 <HAL_I2C_EV_IRQHandler+0xac>
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d003      	beq.n	800d8b0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 fde7 	bl	800e47c <I2C_Master_ADD10>
 800d8ae:	e075      	b.n	800d99c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	f003 0302 	and.w	r3, r3, #2
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d008      	beq.n	800d8cc <HAL_I2C_EV_IRQHandler+0xc8>
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d003      	beq.n	800d8cc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 fe02 	bl	800e4ce <I2C_Master_ADDR>
 800d8ca:	e067      	b.n	800d99c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	f003 0304 	and.w	r3, r3, #4
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d036      	beq.n	800d944 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d8e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d8e4:	f000 80db 	beq.w	800da9e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00d      	beq.n	800d90e <HAL_I2C_EV_IRQHandler+0x10a>
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d008      	beq.n	800d90e <HAL_I2C_EV_IRQHandler+0x10a>
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	f003 0304 	and.w	r3, r3, #4
 800d902:	2b00      	cmp	r3, #0
 800d904:	d103      	bne.n	800d90e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 f9e4 	bl	800dcd4 <I2C_MasterTransmit_TXE>
 800d90c:	e046      	b.n	800d99c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	f003 0304 	and.w	r3, r3, #4
 800d914:	2b00      	cmp	r3, #0
 800d916:	f000 80c2 	beq.w	800da9e <HAL_I2C_EV_IRQHandler+0x29a>
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d920:	2b00      	cmp	r3, #0
 800d922:	f000 80bc 	beq.w	800da9e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d926:	7bbb      	ldrb	r3, [r7, #14]
 800d928:	2b21      	cmp	r3, #33	@ 0x21
 800d92a:	d103      	bne.n	800d934 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fa6d 	bl	800de0c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d932:	e0b4      	b.n	800da9e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800d934:	7bfb      	ldrb	r3, [r7, #15]
 800d936:	2b40      	cmp	r3, #64	@ 0x40
 800d938:	f040 80b1 	bne.w	800da9e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 fadb 	bl	800def8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d942:	e0ac      	b.n	800da9e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d94e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d952:	f000 80a4 	beq.w	800da9e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00d      	beq.n	800d97c <HAL_I2C_EV_IRQHandler+0x178>
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d966:	2b00      	cmp	r3, #0
 800d968:	d008      	beq.n	800d97c <HAL_I2C_EV_IRQHandler+0x178>
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	f003 0304 	and.w	r3, r3, #4
 800d970:	2b00      	cmp	r3, #0
 800d972:	d103      	bne.n	800d97c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 fb57 	bl	800e028 <I2C_MasterReceive_RXNE>
 800d97a:	e00f      	b.n	800d99c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	f003 0304 	and.w	r3, r3, #4
 800d982:	2b00      	cmp	r3, #0
 800d984:	f000 808b 	beq.w	800da9e <HAL_I2C_EV_IRQHandler+0x29a>
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d98e:	2b00      	cmp	r3, #0
 800d990:	f000 8085 	beq.w	800da9e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f000 fc02 	bl	800e19e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d99a:	e080      	b.n	800da9e <HAL_I2C_EV_IRQHandler+0x29a>
 800d99c:	e07f      	b.n	800da9e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d004      	beq.n	800d9b0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	695b      	ldr	r3, [r3, #20]
 800d9ac:	61fb      	str	r3, [r7, #28]
 800d9ae:	e007      	b.n	800d9c0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	699b      	ldr	r3, [r3, #24]
 800d9b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	695b      	ldr	r3, [r3, #20]
 800d9be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	f003 0302 	and.w	r3, r3, #2
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d011      	beq.n	800d9ee <HAL_I2C_EV_IRQHandler+0x1ea>
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d00c      	beq.n	800d9ee <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d003      	beq.n	800d9e4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800d9e4:	69b9      	ldr	r1, [r7, #24]
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 ffbd 	bl	800e966 <I2C_Slave_ADDR>
 800d9ec:	e05a      	b.n	800daa4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	f003 0310 	and.w	r3, r3, #16
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d008      	beq.n	800da0a <HAL_I2C_EV_IRQHandler+0x206>
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d003      	beq.n	800da0a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 fff8 	bl	800e9f8 <I2C_Slave_STOPF>
 800da08:	e04c      	b.n	800daa4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800da0a:	7bbb      	ldrb	r3, [r7, #14]
 800da0c:	2b21      	cmp	r3, #33	@ 0x21
 800da0e:	d002      	beq.n	800da16 <HAL_I2C_EV_IRQHandler+0x212>
 800da10:	7bbb      	ldrb	r3, [r7, #14]
 800da12:	2b29      	cmp	r3, #41	@ 0x29
 800da14:	d120      	bne.n	800da58 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d00d      	beq.n	800da3c <HAL_I2C_EV_IRQHandler+0x238>
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da26:	2b00      	cmp	r3, #0
 800da28:	d008      	beq.n	800da3c <HAL_I2C_EV_IRQHandler+0x238>
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	f003 0304 	and.w	r3, r3, #4
 800da30:	2b00      	cmp	r3, #0
 800da32:	d103      	bne.n	800da3c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 feda 	bl	800e7ee <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800da3a:	e032      	b.n	800daa2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	f003 0304 	and.w	r3, r3, #4
 800da42:	2b00      	cmp	r3, #0
 800da44:	d02d      	beq.n	800daa2 <HAL_I2C_EV_IRQHandler+0x29e>
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d028      	beq.n	800daa2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f000 ff09 	bl	800e868 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800da56:	e024      	b.n	800daa2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00d      	beq.n	800da7e <HAL_I2C_EV_IRQHandler+0x27a>
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d008      	beq.n	800da7e <HAL_I2C_EV_IRQHandler+0x27a>
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	f003 0304 	and.w	r3, r3, #4
 800da72:	2b00      	cmp	r3, #0
 800da74:	d103      	bne.n	800da7e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 ff16 	bl	800e8a8 <I2C_SlaveReceive_RXNE>
 800da7c:	e012      	b.n	800daa4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	f003 0304 	and.w	r3, r3, #4
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00d      	beq.n	800daa4 <HAL_I2C_EV_IRQHandler+0x2a0>
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d008      	beq.n	800daa4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 ff46 	bl	800e924 <I2C_SlaveReceive_BTF>
 800da98:	e004      	b.n	800daa4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800da9a:	bf00      	nop
 800da9c:	e002      	b.n	800daa4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800da9e:	bf00      	nop
 800daa0:	e000      	b.n	800daa4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800daa2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800daa4:	3720      	adds	r7, #32
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800daaa:	b580      	push	{r7, lr}
 800daac:	b08a      	sub	sp, #40	@ 0x28
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	695b      	ldr	r3, [r3, #20]
 800dab8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800dac2:	2300      	movs	r3, #0
 800dac4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dacc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dace:	6a3b      	ldr	r3, [r7, #32]
 800dad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d00d      	beq.n	800daf4 <HAL_I2C_ER_IRQHandler+0x4a>
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d008      	beq.n	800daf4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800dae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dae4:	f043 0301 	orr.w	r3, r3, #1
 800dae8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800daf2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800daf4:	6a3b      	ldr	r3, [r7, #32]
 800daf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d00d      	beq.n	800db1a <HAL_I2C_ER_IRQHandler+0x70>
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db04:	2b00      	cmp	r3, #0
 800db06:	d008      	beq.n	800db1a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800db08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db0a:	f043 0302 	orr.w	r3, r3, #2
 800db0e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800db18:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800db1a:	6a3b      	ldr	r3, [r7, #32]
 800db1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db20:	2b00      	cmp	r3, #0
 800db22:	d03e      	beq.n	800dba2 <HAL_I2C_ER_IRQHandler+0xf8>
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d039      	beq.n	800dba2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800db2e:	7efb      	ldrb	r3, [r7, #27]
 800db30:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db36:	b29b      	uxth	r3, r3
 800db38:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db40:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db46:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800db48:	7ebb      	ldrb	r3, [r7, #26]
 800db4a:	2b20      	cmp	r3, #32
 800db4c:	d112      	bne.n	800db74 <HAL_I2C_ER_IRQHandler+0xca>
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d10f      	bne.n	800db74 <HAL_I2C_ER_IRQHandler+0xca>
 800db54:	7cfb      	ldrb	r3, [r7, #19]
 800db56:	2b21      	cmp	r3, #33	@ 0x21
 800db58:	d008      	beq.n	800db6c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800db5a:	7cfb      	ldrb	r3, [r7, #19]
 800db5c:	2b29      	cmp	r3, #41	@ 0x29
 800db5e:	d005      	beq.n	800db6c <HAL_I2C_ER_IRQHandler+0xc2>
 800db60:	7cfb      	ldrb	r3, [r7, #19]
 800db62:	2b28      	cmp	r3, #40	@ 0x28
 800db64:	d106      	bne.n	800db74 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2b21      	cmp	r3, #33	@ 0x21
 800db6a:	d103      	bne.n	800db74 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f001 f873 	bl	800ec58 <I2C_Slave_AF>
 800db72:	e016      	b.n	800dba2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800db7c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800db7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db80:	f043 0304 	orr.w	r3, r3, #4
 800db84:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800db86:	7efb      	ldrb	r3, [r7, #27]
 800db88:	2b10      	cmp	r3, #16
 800db8a:	d002      	beq.n	800db92 <HAL_I2C_ER_IRQHandler+0xe8>
 800db8c:	7efb      	ldrb	r3, [r7, #27]
 800db8e:	2b40      	cmp	r3, #64	@ 0x40
 800db90:	d107      	bne.n	800dba2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dba0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dba2:	6a3b      	ldr	r3, [r7, #32]
 800dba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d00d      	beq.n	800dbc8 <HAL_I2C_ER_IRQHandler+0x11e>
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d008      	beq.n	800dbc8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800dbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb8:	f043 0308 	orr.w	r3, r3, #8
 800dbbc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800dbc6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800dbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d008      	beq.n	800dbe0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd4:	431a      	orrs	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f001 f8b0 	bl	800ed40 <I2C_ITError>
  }
}
 800dbe0:	bf00      	nop
 800dbe2:	3728      	adds	r7, #40	@ 0x28
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800dbf0:	bf00      	nop
 800dbf2:	370c      	adds	r7, #12
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bc80      	pop	{r7}
 800dbf8:	4770      	bx	lr

0800dbfa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dbfa:	b480      	push	{r7}
 800dbfc:	b083      	sub	sp, #12
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800dc02:	bf00      	nop
 800dc04:	370c      	adds	r7, #12
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bc80      	pop	{r7}
 800dc0a:	4770      	bx	lr

0800dc0c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800dc14:	bf00      	nop
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bc80      	pop	{r7}
 800dc1c:	4770      	bx	lr

0800dc1e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dc1e:	b480      	push	{r7}
 800dc20:	b083      	sub	sp, #12
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800dc26:	bf00      	nop
 800dc28:	370c      	adds	r7, #12
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bc80      	pop	{r7}
 800dc2e:	4770      	bx	lr

0800dc30 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	460b      	mov	r3, r1
 800dc3a:	70fb      	strb	r3, [r7, #3]
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800dc40:	bf00      	nop
 800dc42:	370c      	adds	r7, #12
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bc80      	pop	{r7}
 800dc48:	4770      	bx	lr

0800dc4a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dc4a:	b480      	push	{r7}
 800dc4c:	b083      	sub	sp, #12
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800dc52:	bf00      	nop
 800dc54:	370c      	adds	r7, #12
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bc80      	pop	{r7}
 800dc5a:	4770      	bx	lr

0800dc5c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b083      	sub	sp, #12
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800dc64:	bf00      	nop
 800dc66:	370c      	adds	r7, #12
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bc80      	pop	{r7}
 800dc6c:	4770      	bx	lr

0800dc6e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dc6e:	b480      	push	{r7}
 800dc70:	b083      	sub	sp, #12
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800dc76:	bf00      	nop
 800dc78:	370c      	adds	r7, #12
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bc80      	pop	{r7}
 800dc7e:	4770      	bx	lr

0800dc80 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800dc88:	bf00      	nop
 800dc8a:	370c      	adds	r7, #12
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bc80      	pop	{r7}
 800dc90:	4770      	bx	lr

0800dc92 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dc92:	b480      	push	{r7}
 800dc94:	b083      	sub	sp, #12
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800dc9a:	bf00      	nop
 800dc9c:	370c      	adds	r7, #12
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bc80      	pop	{r7}
 800dca2:	4770      	bx	lr

0800dca4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dcb2:	b2db      	uxtb	r3, r3
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	370c      	adds	r7, #12
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bc80      	pop	{r7}
 800dcbc:	4770      	bx	lr

0800dcbe <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800dcbe:	b480      	push	{r7}
 800dcc0:	b083      	sub	sp, #12
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	370c      	adds	r7, #12
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bc80      	pop	{r7}
 800dcd2:	4770      	bx	lr

0800dcd4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dce2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dcea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d150      	bne.n	800dd9c <I2C_MasterTransmit_TXE+0xc8>
 800dcfa:	7bfb      	ldrb	r3, [r7, #15]
 800dcfc:	2b21      	cmp	r3, #33	@ 0x21
 800dcfe:	d14d      	bne.n	800dd9c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	2b08      	cmp	r3, #8
 800dd04:	d01d      	beq.n	800dd42 <I2C_MasterTransmit_TXE+0x6e>
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	2b20      	cmp	r3, #32
 800dd0a:	d01a      	beq.n	800dd42 <I2C_MasterTransmit_TXE+0x6e>
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800dd12:	d016      	beq.n	800dd42 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	685a      	ldr	r2, [r3, #4]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800dd22:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2211      	movs	r2, #17
 800dd28:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2220      	movs	r2, #32
 800dd36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f7ff ff54 	bl	800dbe8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800dd40:	e060      	b.n	800de04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	685a      	ldr	r2, [r3, #4]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800dd50:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dd60:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2200      	movs	r2, #0
 800dd66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2220      	movs	r2, #32
 800dd6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	2b40      	cmp	r3, #64	@ 0x40
 800dd7a:	d107      	bne.n	800dd8c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f7ff ff69 	bl	800dc5c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800dd8a:	e03b      	b.n	800de04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7ff ff27 	bl	800dbe8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800dd9a:	e033      	b.n	800de04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
 800dd9e:	2b21      	cmp	r3, #33	@ 0x21
 800dda0:	d005      	beq.n	800ddae <I2C_MasterTransmit_TXE+0xda>
 800dda2:	7bbb      	ldrb	r3, [r7, #14]
 800dda4:	2b40      	cmp	r3, #64	@ 0x40
 800dda6:	d12d      	bne.n	800de04 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800dda8:	7bfb      	ldrb	r3, [r7, #15]
 800ddaa:	2b22      	cmp	r3, #34	@ 0x22
 800ddac:	d12a      	bne.n	800de04 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d108      	bne.n	800ddca <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	685a      	ldr	r2, [r3, #4]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ddc6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800ddc8:	e01c      	b.n	800de04 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	2b40      	cmp	r3, #64	@ 0x40
 800ddd4:	d103      	bne.n	800ddde <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f000 f88e 	bl	800def8 <I2C_MemoryTransmit_TXE_BTF>
}
 800dddc:	e012      	b.n	800de04 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dde2:	781a      	ldrb	r2, [r3, #0]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddee:	1c5a      	adds	r2, r3, #1
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ddf8:	b29b      	uxth	r3, r3
 800ddfa:	3b01      	subs	r3, #1
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800de02:	e7ff      	b.n	800de04 <I2C_MasterTransmit_TXE+0x130>
 800de04:	bf00      	nop
 800de06:	3710      	adds	r7, #16
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de18:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b21      	cmp	r3, #33	@ 0x21
 800de24:	d164      	bne.n	800def0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d012      	beq.n	800de56 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de34:	781a      	ldrb	r2, [r3, #0]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de40:	1c5a      	adds	r2, r3, #1
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	3b01      	subs	r3, #1
 800de4e:	b29a      	uxth	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800de54:	e04c      	b.n	800def0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2b08      	cmp	r3, #8
 800de5a:	d01d      	beq.n	800de98 <I2C_MasterTransmit_BTF+0x8c>
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2b20      	cmp	r3, #32
 800de60:	d01a      	beq.n	800de98 <I2C_MasterTransmit_BTF+0x8c>
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800de68:	d016      	beq.n	800de98 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	685a      	ldr	r2, [r3, #4]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800de78:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2211      	movs	r2, #17
 800de7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2200      	movs	r2, #0
 800de84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2220      	movs	r2, #32
 800de8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7ff fea9 	bl	800dbe8 <HAL_I2C_MasterTxCpltCallback>
}
 800de96:	e02b      	b.n	800def0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	685a      	ldr	r2, [r3, #4]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800dea6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800deb6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2200      	movs	r2, #0
 800debc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2220      	movs	r2, #32
 800dec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800decc:	b2db      	uxtb	r3, r3
 800dece:	2b40      	cmp	r3, #64	@ 0x40
 800ded0:	d107      	bne.n	800dee2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2200      	movs	r2, #0
 800ded6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f7ff febe 	bl	800dc5c <HAL_I2C_MemTxCpltCallback>
}
 800dee0:	e006      	b.n	800def0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2200      	movs	r2, #0
 800dee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f7ff fe7c 	bl	800dbe8 <HAL_I2C_MasterTxCpltCallback>
}
 800def0:	bf00      	nop
 800def2:	3710      	adds	r7, #16
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d11d      	bne.n	800df4c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df14:	2b01      	cmp	r3, #1
 800df16:	d10b      	bne.n	800df30 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df1c:	b2da      	uxtb	r2, r3
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df28:	1c9a      	adds	r2, r3, #2
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800df2e:	e077      	b.n	800e020 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df34:	b29b      	uxth	r3, r3
 800df36:	121b      	asrs	r3, r3, #8
 800df38:	b2da      	uxtb	r2, r3
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df44:	1c5a      	adds	r2, r3, #1
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800df4a:	e069      	b.n	800e020 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df50:	2b01      	cmp	r3, #1
 800df52:	d10b      	bne.n	800df6c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df58:	b2da      	uxtb	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df64:	1c5a      	adds	r2, r3, #1
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800df6a:	e059      	b.n	800e020 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df70:	2b02      	cmp	r3, #2
 800df72:	d152      	bne.n	800e01a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800df74:	7bfb      	ldrb	r3, [r7, #15]
 800df76:	2b22      	cmp	r3, #34	@ 0x22
 800df78:	d10d      	bne.n	800df96 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800df88:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df8e:	1c5a      	adds	r2, r3, #1
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800df94:	e044      	b.n	800e020 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d015      	beq.n	800dfcc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800dfa0:	7bfb      	ldrb	r3, [r7, #15]
 800dfa2:	2b21      	cmp	r3, #33	@ 0x21
 800dfa4:	d112      	bne.n	800dfcc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfaa:	781a      	ldrb	r2, [r3, #0]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfb6:	1c5a      	adds	r2, r3, #1
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800dfca:	e029      	b.n	800e020 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d124      	bne.n	800e020 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800dfd6:	7bfb      	ldrb	r3, [r7, #15]
 800dfd8:	2b21      	cmp	r3, #33	@ 0x21
 800dfda:	d121      	bne.n	800e020 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	685a      	ldr	r2, [r3, #4]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800dfea:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	681a      	ldr	r2, [r3, #0]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dffa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2220      	movs	r2, #32
 800e006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f7ff fe22 	bl	800dc5c <HAL_I2C_MemTxCpltCallback>
}
 800e018:	e002      	b.n	800e020 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7ff f8bd 	bl	800d19a <I2C_Flush_DR>
}
 800e020:	bf00      	nop
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e036:	b2db      	uxtb	r3, r3
 800e038:	2b22      	cmp	r3, #34	@ 0x22
 800e03a:	f040 80ac 	bne.w	800e196 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e042:	b29b      	uxth	r3, r3
 800e044:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2b03      	cmp	r3, #3
 800e04a:	d921      	bls.n	800e090 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	691a      	ldr	r2, [r3, #16]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e056:	b2d2      	uxtb	r2, r2
 800e058:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e068:	b29b      	uxth	r3, r3
 800e06a:	3b01      	subs	r3, #1
 800e06c:	b29a      	uxth	r2, r3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e076:	b29b      	uxth	r3, r3
 800e078:	2b03      	cmp	r3, #3
 800e07a:	f040 808c 	bne.w	800e196 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	685a      	ldr	r2, [r3, #4]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e08c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800e08e:	e082      	b.n	800e196 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e094:	2b02      	cmp	r3, #2
 800e096:	d075      	beq.n	800e184 <I2C_MasterReceive_RXNE+0x15c>
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d002      	beq.n	800e0a4 <I2C_MasterReceive_RXNE+0x7c>
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d16f      	bne.n	800e184 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f001 fb4d 	bl	800f744 <I2C_WaitOnSTOPRequestThroughIT>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d142      	bne.n	800e136 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e0be:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	685a      	ldr	r2, [r3, #4]
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800e0ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	691a      	ldr	r2, [r3, #16]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0da:	b2d2      	uxtb	r2, r2
 800e0dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0e2:	1c5a      	adds	r2, r3, #1
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	3b01      	subs	r3, #1
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2220      	movs	r2, #32
 800e0fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e104:	b2db      	uxtb	r3, r3
 800e106:	2b40      	cmp	r3, #64	@ 0x40
 800e108:	d10a      	bne.n	800e120 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2200      	movs	r2, #0
 800e116:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f7ff fda8 	bl	800dc6e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800e11e:	e03a      	b.n	800e196 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2200      	movs	r2, #0
 800e124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2212      	movs	r2, #18
 800e12c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f7ff fd63 	bl	800dbfa <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800e134:	e02f      	b.n	800e196 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	685a      	ldr	r2, [r3, #4]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800e144:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	691a      	ldr	r2, [r3, #16]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e150:	b2d2      	uxtb	r2, r2
 800e152:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e158:	1c5a      	adds	r2, r3, #1
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e162:	b29b      	uxth	r3, r3
 800e164:	3b01      	subs	r3, #1
 800e166:	b29a      	uxth	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2220      	movs	r2, #32
 800e170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2200      	movs	r2, #0
 800e178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff fd7f 	bl	800dc80 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800e182:	e008      	b.n	800e196 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	685a      	ldr	r2, [r3, #4]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e192:	605a      	str	r2, [r3, #4]
}
 800e194:	e7ff      	b.n	800e196 <I2C_MasterReceive_RXNE+0x16e>
 800e196:	bf00      	nop
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b084      	sub	sp, #16
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1aa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	2b04      	cmp	r3, #4
 800e1b4:	d11b      	bne.n	800e1ee <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	685a      	ldr	r2, [r3, #4]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1c4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	691a      	ldr	r2, [r3, #16]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1d0:	b2d2      	uxtb	r2, r2
 800e1d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1d8:	1c5a      	adds	r2, r3, #1
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	3b01      	subs	r3, #1
 800e1e6:	b29a      	uxth	r2, r3
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800e1ec:	e0bd      	b.n	800e36a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	2b03      	cmp	r3, #3
 800e1f6:	d129      	bne.n	800e24c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	685a      	ldr	r2, [r3, #4]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e206:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2b04      	cmp	r3, #4
 800e20c:	d00a      	beq.n	800e224 <I2C_MasterReceive_BTF+0x86>
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2b02      	cmp	r3, #2
 800e212:	d007      	beq.n	800e224 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e222:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	691a      	ldr	r2, [r3, #16]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e22e:	b2d2      	uxtb	r2, r2
 800e230:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e236:	1c5a      	adds	r2, r3, #1
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e240:	b29b      	uxth	r3, r3
 800e242:	3b01      	subs	r3, #1
 800e244:	b29a      	uxth	r2, r3
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800e24a:	e08e      	b.n	800e36a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e250:	b29b      	uxth	r3, r3
 800e252:	2b02      	cmp	r3, #2
 800e254:	d176      	bne.n	800e344 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d002      	beq.n	800e262 <I2C_MasterReceive_BTF+0xc4>
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2b10      	cmp	r3, #16
 800e260:	d108      	bne.n	800e274 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e270:	601a      	str	r2, [r3, #0]
 800e272:	e019      	b.n	800e2a8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2b04      	cmp	r3, #4
 800e278:	d002      	beq.n	800e280 <I2C_MasterReceive_BTF+0xe2>
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2b02      	cmp	r3, #2
 800e27e:	d108      	bne.n	800e292 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	e00a      	b.n	800e2a8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2b10      	cmp	r3, #16
 800e296:	d007      	beq.n	800e2a8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e2a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	691a      	ldr	r2, [r3, #16]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2b2:	b2d2      	uxtb	r2, r2
 800e2b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2ba:	1c5a      	adds	r2, r3, #1
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	b29a      	uxth	r2, r3
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	691a      	ldr	r2, [r3, #16]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2d8:	b2d2      	uxtb	r2, r2
 800e2da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2e0:	1c5a      	adds	r2, r3, #1
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	b29a      	uxth	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	685a      	ldr	r2, [r3, #4]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800e302:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2220      	movs	r2, #32
 800e308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e312:	b2db      	uxtb	r3, r3
 800e314:	2b40      	cmp	r3, #64	@ 0x40
 800e316:	d10a      	bne.n	800e32e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7ff fca1 	bl	800dc6e <HAL_I2C_MemRxCpltCallback>
}
 800e32c:	e01d      	b.n	800e36a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2200      	movs	r2, #0
 800e332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2212      	movs	r2, #18
 800e33a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f7ff fc5c 	bl	800dbfa <HAL_I2C_MasterRxCpltCallback>
}
 800e342:	e012      	b.n	800e36a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	691a      	ldr	r2, [r3, #16]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e34e:	b2d2      	uxtb	r2, r2
 800e350:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e356:	1c5a      	adds	r2, r3, #1
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e360:	b29b      	uxth	r3, r3
 800e362:	3b01      	subs	r3, #1
 800e364:	b29a      	uxth	r2, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800e36a:	bf00      	nop
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800e372:	b480      	push	{r7}
 800e374:	b083      	sub	sp, #12
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e380:	b2db      	uxtb	r3, r3
 800e382:	2b40      	cmp	r3, #64	@ 0x40
 800e384:	d117      	bne.n	800e3b6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d109      	bne.n	800e3a2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e392:	b2db      	uxtb	r3, r3
 800e394:	461a      	mov	r2, r3
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e39e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800e3a0:	e067      	b.n	800e472 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	f043 0301 	orr.w	r3, r3, #1
 800e3ac:	b2da      	uxtb	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	611a      	str	r2, [r3, #16]
}
 800e3b4:	e05d      	b.n	800e472 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	691b      	ldr	r3, [r3, #16]
 800e3ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e3be:	d133      	bne.n	800e428 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	2b21      	cmp	r3, #33	@ 0x21
 800e3ca:	d109      	bne.n	800e3e0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e3dc:	611a      	str	r2, [r3, #16]
 800e3de:	e008      	b.n	800e3f2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	f043 0301 	orr.w	r3, r3, #1
 800e3ea:	b2da      	uxtb	r2, r3
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d004      	beq.n	800e404 <I2C_Master_SB+0x92>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e400:	2b00      	cmp	r3, #0
 800e402:	d108      	bne.n	800e416 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d032      	beq.n	800e472 <I2C_Master_SB+0x100>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e412:	2b00      	cmp	r3, #0
 800e414:	d02d      	beq.n	800e472 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	685a      	ldr	r2, [r3, #4]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e424:	605a      	str	r2, [r3, #4]
}
 800e426:	e024      	b.n	800e472 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d10e      	bne.n	800e44e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e434:	b29b      	uxth	r3, r3
 800e436:	11db      	asrs	r3, r3, #7
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	f003 0306 	and.w	r3, r3, #6
 800e43e:	b2db      	uxtb	r3, r3
 800e440:	f063 030f 	orn	r3, r3, #15
 800e444:	b2da      	uxtb	r2, r3
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	611a      	str	r2, [r3, #16]
}
 800e44c:	e011      	b.n	800e472 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e452:	2b01      	cmp	r3, #1
 800e454:	d10d      	bne.n	800e472 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	11db      	asrs	r3, r3, #7
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	f003 0306 	and.w	r3, r3, #6
 800e464:	b2db      	uxtb	r3, r3
 800e466:	f063 030e 	orn	r3, r3, #14
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	611a      	str	r2, [r3, #16]
}
 800e472:	bf00      	nop
 800e474:	370c      	adds	r7, #12
 800e476:	46bd      	mov	sp, r7
 800e478:	bc80      	pop	{r7}
 800e47a:	4770      	bx	lr

0800e47c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b083      	sub	sp, #12
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e488:	b2da      	uxtb	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e494:	2b00      	cmp	r3, #0
 800e496:	d004      	beq.n	800e4a2 <I2C_Master_ADD10+0x26>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d108      	bne.n	800e4b4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00c      	beq.n	800e4c4 <I2C_Master_ADD10+0x48>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d007      	beq.n	800e4c4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	685a      	ldr	r2, [r3, #4]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e4c2:	605a      	str	r2, [r3, #4]
  }
}
 800e4c4:	bf00      	nop
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bc80      	pop	{r7}
 800e4cc:	4770      	bx	lr

0800e4ce <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800e4ce:	b480      	push	{r7}
 800e4d0:	b091      	sub	sp, #68	@ 0x44
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e4dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4ea:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	2b22      	cmp	r3, #34	@ 0x22
 800e4f6:	f040 8169 	bne.w	800e7cc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d10f      	bne.n	800e522 <I2C_Master_ADDR+0x54>
 800e502:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e506:	2b40      	cmp	r3, #64	@ 0x40
 800e508:	d10b      	bne.n	800e522 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e50a:	2300      	movs	r3, #0
 800e50c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	695b      	ldr	r3, [r3, #20]
 800e514:	633b      	str	r3, [r7, #48]	@ 0x30
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	699b      	ldr	r3, [r3, #24]
 800e51c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e520:	e160      	b.n	800e7e4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e526:	2b00      	cmp	r3, #0
 800e528:	d11d      	bne.n	800e566 <I2C_Master_ADDR+0x98>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	691b      	ldr	r3, [r3, #16]
 800e52e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e532:	d118      	bne.n	800e566 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e534:	2300      	movs	r3, #0
 800e536:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	695b      	ldr	r3, [r3, #20]
 800e53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	699b      	ldr	r3, [r3, #24]
 800e546:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e558:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e55e:	1c5a      	adds	r2, r3, #1
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	651a      	str	r2, [r3, #80]	@ 0x50
 800e564:	e13e      	b.n	800e7e4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d113      	bne.n	800e598 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e570:	2300      	movs	r3, #0
 800e572:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	695b      	ldr	r3, [r3, #20]
 800e57a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	699b      	ldr	r3, [r3, #24]
 800e582:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e584:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e594:	601a      	str	r2, [r3, #0]
 800e596:	e115      	b.n	800e7c4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	f040 808a 	bne.w	800e6b8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800e5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e5aa:	d137      	bne.n	800e61c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e5ba:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e5c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e5ca:	d113      	bne.n	800e5f4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e5da:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e5dc:	2300      	movs	r3, #0
 800e5de:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	695b      	ldr	r3, [r3, #20]
 800e5e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	699b      	ldr	r3, [r3, #24]
 800e5ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5f2:	e0e7      	b.n	800e7c4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	623b      	str	r3, [r7, #32]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	695b      	ldr	r3, [r3, #20]
 800e5fe:	623b      	str	r3, [r7, #32]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	699b      	ldr	r3, [r3, #24]
 800e606:	623b      	str	r3, [r7, #32]
 800e608:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e618:	601a      	str	r2, [r3, #0]
 800e61a:	e0d3      	b.n	800e7c4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800e61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e61e:	2b08      	cmp	r3, #8
 800e620:	d02e      	beq.n	800e680 <I2C_Master_ADDR+0x1b2>
 800e622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e624:	2b20      	cmp	r3, #32
 800e626:	d02b      	beq.n	800e680 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800e628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e62a:	2b12      	cmp	r3, #18
 800e62c:	d102      	bne.n	800e634 <I2C_Master_ADDR+0x166>
 800e62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e630:	2b01      	cmp	r3, #1
 800e632:	d125      	bne.n	800e680 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e636:	2b04      	cmp	r3, #4
 800e638:	d00e      	beq.n	800e658 <I2C_Master_ADDR+0x18a>
 800e63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e63c:	2b02      	cmp	r3, #2
 800e63e:	d00b      	beq.n	800e658 <I2C_Master_ADDR+0x18a>
 800e640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e642:	2b10      	cmp	r3, #16
 800e644:	d008      	beq.n	800e658 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e654:	601a      	str	r2, [r3, #0]
 800e656:	e007      	b.n	800e668 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e666:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e668:	2300      	movs	r3, #0
 800e66a:	61fb      	str	r3, [r7, #28]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	695b      	ldr	r3, [r3, #20]
 800e672:	61fb      	str	r3, [r7, #28]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	699b      	ldr	r3, [r3, #24]
 800e67a:	61fb      	str	r3, [r7, #28]
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	e0a1      	b.n	800e7c4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e68e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e690:	2300      	movs	r3, #0
 800e692:	61bb      	str	r3, [r7, #24]
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	695b      	ldr	r3, [r3, #20]
 800e69a:	61bb      	str	r3, [r7, #24]
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	699b      	ldr	r3, [r3, #24]
 800e6a2:	61bb      	str	r3, [r7, #24]
 800e6a4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e6b4:	601a      	str	r2, [r3, #0]
 800e6b6:	e085      	b.n	800e7c4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	d14d      	bne.n	800e75e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c4:	2b04      	cmp	r3, #4
 800e6c6:	d016      	beq.n	800e6f6 <I2C_Master_ADDR+0x228>
 800e6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ca:	2b02      	cmp	r3, #2
 800e6cc:	d013      	beq.n	800e6f6 <I2C_Master_ADDR+0x228>
 800e6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6d0:	2b10      	cmp	r3, #16
 800e6d2:	d010      	beq.n	800e6f6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	681a      	ldr	r2, [r3, #0]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e6e2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e6f2:	601a      	str	r2, [r3, #0]
 800e6f4:	e007      	b.n	800e706 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e704:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e714:	d117      	bne.n	800e746 <I2C_Master_ADDR+0x278>
 800e716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e718:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e71c:	d00b      	beq.n	800e736 <I2C_Master_ADDR+0x268>
 800e71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e720:	2b01      	cmp	r3, #1
 800e722:	d008      	beq.n	800e736 <I2C_Master_ADDR+0x268>
 800e724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e726:	2b08      	cmp	r3, #8
 800e728:	d005      	beq.n	800e736 <I2C_Master_ADDR+0x268>
 800e72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e72c:	2b10      	cmp	r3, #16
 800e72e:	d002      	beq.n	800e736 <I2C_Master_ADDR+0x268>
 800e730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e732:	2b20      	cmp	r3, #32
 800e734:	d107      	bne.n	800e746 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	685a      	ldr	r2, [r3, #4]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e744:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e746:	2300      	movs	r3, #0
 800e748:	617b      	str	r3, [r7, #20]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	695b      	ldr	r3, [r3, #20]
 800e750:	617b      	str	r3, [r7, #20]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	699b      	ldr	r3, [r3, #24]
 800e758:	617b      	str	r3, [r7, #20]
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	e032      	b.n	800e7c4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e76c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e778:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e77c:	d117      	bne.n	800e7ae <I2C_Master_ADDR+0x2e0>
 800e77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e780:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e784:	d00b      	beq.n	800e79e <I2C_Master_ADDR+0x2d0>
 800e786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e788:	2b01      	cmp	r3, #1
 800e78a:	d008      	beq.n	800e79e <I2C_Master_ADDR+0x2d0>
 800e78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e78e:	2b08      	cmp	r3, #8
 800e790:	d005      	beq.n	800e79e <I2C_Master_ADDR+0x2d0>
 800e792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e794:	2b10      	cmp	r3, #16
 800e796:	d002      	beq.n	800e79e <I2C_Master_ADDR+0x2d0>
 800e798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e79a:	2b20      	cmp	r3, #32
 800e79c:	d107      	bne.n	800e7ae <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	685a      	ldr	r2, [r3, #4]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e7ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	613b      	str	r3, [r7, #16]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	695b      	ldr	r3, [r3, #20]
 800e7b8:	613b      	str	r3, [r7, #16]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	699b      	ldr	r3, [r3, #24]
 800e7c0:	613b      	str	r3, [r7, #16]
 800e7c2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800e7ca:	e00b      	b.n	800e7e4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	60fb      	str	r3, [r7, #12]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	695b      	ldr	r3, [r3, #20]
 800e7d6:	60fb      	str	r3, [r7, #12]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	699b      	ldr	r3, [r3, #24]
 800e7de:	60fb      	str	r3, [r7, #12]
 800e7e0:	68fb      	ldr	r3, [r7, #12]
}
 800e7e2:	e7ff      	b.n	800e7e4 <I2C_Master_ADDR+0x316>
 800e7e4:	bf00      	nop
 800e7e6:	3744      	adds	r7, #68	@ 0x44
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bc80      	pop	{r7}
 800e7ec:	4770      	bx	lr

0800e7ee <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b084      	sub	sp, #16
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e7fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e802:	b29b      	uxth	r3, r3
 800e804:	2b00      	cmp	r3, #0
 800e806:	d02b      	beq.n	800e860 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e80c:	781a      	ldrb	r2, [r3, #0]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e818:	1c5a      	adds	r2, r3, #1
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e822:	b29b      	uxth	r3, r3
 800e824:	3b01      	subs	r3, #1
 800e826:	b29a      	uxth	r2, r3
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e830:	b29b      	uxth	r3, r3
 800e832:	2b00      	cmp	r3, #0
 800e834:	d114      	bne.n	800e860 <I2C_SlaveTransmit_TXE+0x72>
 800e836:	7bfb      	ldrb	r3, [r7, #15]
 800e838:	2b29      	cmp	r3, #41	@ 0x29
 800e83a:	d111      	bne.n	800e860 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	685a      	ldr	r2, [r3, #4]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e84a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2221      	movs	r2, #33	@ 0x21
 800e850:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2228      	movs	r2, #40	@ 0x28
 800e856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7ff f9d6 	bl	800dc0c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e860:	bf00      	nop
 800e862:	3710      	adds	r7, #16
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800e868:	b480      	push	{r7}
 800e86a:	b083      	sub	sp, #12
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e874:	b29b      	uxth	r3, r3
 800e876:	2b00      	cmp	r3, #0
 800e878:	d011      	beq.n	800e89e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e87e:	781a      	ldrb	r2, [r3, #0]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e88a:	1c5a      	adds	r2, r3, #1
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e894:	b29b      	uxth	r3, r3
 800e896:	3b01      	subs	r3, #1
 800e898:	b29a      	uxth	r2, r3
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800e89e:	bf00      	nop
 800e8a0:	370c      	adds	r7, #12
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bc80      	pop	{r7}
 800e8a6:	4770      	bx	lr

0800e8a8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e8b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d02c      	beq.n	800e91c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	691a      	ldr	r2, [r3, #16]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8cc:	b2d2      	uxtb	r2, r2
 800e8ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8d4:	1c5a      	adds	r2, r3, #1
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	b29a      	uxth	r2, r3
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d114      	bne.n	800e91c <I2C_SlaveReceive_RXNE+0x74>
 800e8f2:	7bfb      	ldrb	r3, [r7, #15]
 800e8f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8f6:	d111      	bne.n	800e91c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	685a      	ldr	r2, [r3, #4]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e906:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2222      	movs	r2, #34	@ 0x22
 800e90c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2228      	movs	r2, #40	@ 0x28
 800e912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f7ff f981 	bl	800dc1e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e91c:	bf00      	nop
 800e91e:	3710      	adds	r7, #16
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e930:	b29b      	uxth	r3, r3
 800e932:	2b00      	cmp	r3, #0
 800e934:	d012      	beq.n	800e95c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	691a      	ldr	r2, [r3, #16]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e940:	b2d2      	uxtb	r2, r2
 800e942:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e948:	1c5a      	adds	r2, r3, #1
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e952:	b29b      	uxth	r3, r3
 800e954:	3b01      	subs	r3, #1
 800e956:	b29a      	uxth	r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800e95c:	bf00      	nop
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	bc80      	pop	{r7}
 800e964:	4770      	bx	lr

0800e966 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800e966:	b580      	push	{r7, lr}
 800e968:	b084      	sub	sp, #16
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
 800e96e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800e970:	2300      	movs	r3, #0
 800e972:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800e980:	2b28      	cmp	r3, #40	@ 0x28
 800e982:	d125      	bne.n	800e9d0 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	685a      	ldr	r2, [r3, #4]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e992:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	f003 0304 	and.w	r3, r3, #4
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d101      	bne.n	800e9a2 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d103      	bne.n	800e9b4 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	81bb      	strh	r3, [r7, #12]
 800e9b2:	e002      	b.n	800e9ba <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	699b      	ldr	r3, [r3, #24]
 800e9b8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800e9c2:	89ba      	ldrh	r2, [r7, #12]
 800e9c4:	7bfb      	ldrb	r3, [r7, #15]
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f7ff f931 	bl	800dc30 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e9ce:	e00e      	b.n	800e9ee <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	60bb      	str	r3, [r7, #8]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	695b      	ldr	r3, [r3, #20]
 800e9da:	60bb      	str	r3, [r7, #8]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	699b      	ldr	r3, [r3, #24]
 800e9e2:	60bb      	str	r3, [r7, #8]
 800e9e4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800e9ee:	bf00      	nop
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
	...

0800e9f8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ea06:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	685a      	ldr	r2, [r3, #4]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ea16:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800ea18:	2300      	movs	r3, #0
 800ea1a:	60bb      	str	r3, [r7, #8]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	695b      	ldr	r3, [r3, #20]
 800ea22:	60bb      	str	r3, [r7, #8]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f042 0201 	orr.w	r2, r2, #1
 800ea32:	601a      	str	r2, [r3, #0]
 800ea34:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea44:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ea50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ea54:	d172      	bne.n	800eb3c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ea56:	7bfb      	ldrb	r3, [r7, #15]
 800ea58:	2b22      	cmp	r3, #34	@ 0x22
 800ea5a:	d002      	beq.n	800ea62 <I2C_Slave_STOPF+0x6a>
 800ea5c:	7bfb      	ldrb	r3, [r7, #15]
 800ea5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea60:	d135      	bne.n	800eace <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d005      	beq.n	800ea86 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea7e:	f043 0204 	orr.w	r2, r3, #4
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	685a      	ldr	r2, [r3, #4]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ea94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7fd ff20 	bl	800c8e0 <HAL_DMA_GetState>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d049      	beq.n	800eb3a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaaa:	4a69      	ldr	r2, [pc, #420]	@ (800ec50 <I2C_Slave_STOPF+0x258>)
 800eaac:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fd fed3 	bl	800c85e <HAL_DMA_Abort_IT>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d03d      	beq.n	800eb3a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800eac8:	4610      	mov	r0, r2
 800eaca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800eacc:	e035      	b.n	800eb3a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eae0:	b29b      	uxth	r3, r3
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d005      	beq.n	800eaf2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eaea:	f043 0204 	orr.w	r2, r3, #4
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	685a      	ldr	r2, [r3, #4]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800eb00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fd feea 	bl	800c8e0 <HAL_DMA_GetState>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d014      	beq.n	800eb3c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb16:	4a4e      	ldr	r2, [pc, #312]	@ (800ec50 <I2C_Slave_STOPF+0x258>)
 800eb18:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7fd fe9d 	bl	800c85e <HAL_DMA_Abort_IT>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d008      	beq.n	800eb3c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800eb34:	4610      	mov	r0, r2
 800eb36:	4798      	blx	r3
 800eb38:	e000      	b.n	800eb3c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800eb3a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d03e      	beq.n	800ebc4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	695b      	ldr	r3, [r3, #20]
 800eb4c:	f003 0304 	and.w	r3, r3, #4
 800eb50:	2b04      	cmp	r3, #4
 800eb52:	d112      	bne.n	800eb7a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	691a      	ldr	r2, [r3, #16]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb5e:	b2d2      	uxtb	r2, r2
 800eb60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb66:	1c5a      	adds	r2, r3, #1
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	3b01      	subs	r3, #1
 800eb74:	b29a      	uxth	r2, r3
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	695b      	ldr	r3, [r3, #20]
 800eb80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb84:	2b40      	cmp	r3, #64	@ 0x40
 800eb86:	d112      	bne.n	800ebae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	691a      	ldr	r2, [r3, #16]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb92:	b2d2      	uxtb	r2, r2
 800eb94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb9a:	1c5a      	adds	r2, r3, #1
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	3b01      	subs	r3, #1
 800eba8:	b29a      	uxth	r2, r3
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d005      	beq.n	800ebc4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebbc:	f043 0204 	orr.w	r2, r3, #4
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d003      	beq.n	800ebd4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 f8b7 	bl	800ed40 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800ebd2:	e039      	b.n	800ec48 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ebd4:	7bfb      	ldrb	r3, [r7, #15]
 800ebd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebd8:	d109      	bne.n	800ebee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2228      	movs	r2, #40	@ 0x28
 800ebe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f7ff f818 	bl	800dc1e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	2b28      	cmp	r3, #40	@ 0x28
 800ebf8:	d111      	bne.n	800ec1e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	4a15      	ldr	r2, [pc, #84]	@ (800ec54 <I2C_Slave_STOPF+0x25c>)
 800ebfe:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2200      	movs	r2, #0
 800ec04:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2220      	movs	r2, #32
 800ec0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2200      	movs	r2, #0
 800ec12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f7ff f817 	bl	800dc4a <HAL_I2C_ListenCpltCallback>
}
 800ec1c:	e014      	b.n	800ec48 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec22:	2b22      	cmp	r3, #34	@ 0x22
 800ec24:	d002      	beq.n	800ec2c <I2C_Slave_STOPF+0x234>
 800ec26:	7bfb      	ldrb	r3, [r7, #15]
 800ec28:	2b22      	cmp	r3, #34	@ 0x22
 800ec2a:	d10d      	bne.n	800ec48 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2220      	movs	r2, #32
 800ec36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f7fe ffeb 	bl	800dc1e <HAL_I2C_SlaveRxCpltCallback>
}
 800ec48:	bf00      	nop
 800ec4a:	3710      	adds	r7, #16
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	0800f2a1 	.word	0x0800f2a1
 800ec54:	ffff0000 	.word	0xffff0000

0800ec58 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ec66:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec6c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	2b08      	cmp	r3, #8
 800ec72:	d002      	beq.n	800ec7a <I2C_Slave_AF+0x22>
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	2b20      	cmp	r3, #32
 800ec78:	d129      	bne.n	800ecce <I2C_Slave_AF+0x76>
 800ec7a:	7bfb      	ldrb	r3, [r7, #15]
 800ec7c:	2b28      	cmp	r3, #40	@ 0x28
 800ec7e:	d126      	bne.n	800ecce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	4a2e      	ldr	r2, [pc, #184]	@ (800ed3c <I2C_Slave_AF+0xe4>)
 800ec84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	685a      	ldr	r2, [r3, #4]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ec94:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ec9e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ecae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2220      	movs	r2, #32
 800ecba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7fe ffbf 	bl	800dc4a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800eccc:	e031      	b.n	800ed32 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800ecce:	7bfb      	ldrb	r3, [r7, #15]
 800ecd0:	2b21      	cmp	r3, #33	@ 0x21
 800ecd2:	d129      	bne.n	800ed28 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	4a19      	ldr	r2, [pc, #100]	@ (800ed3c <I2C_Slave_AF+0xe4>)
 800ecd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2221      	movs	r2, #33	@ 0x21
 800ecde:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2220      	movs	r2, #32
 800ece4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2200      	movs	r2, #0
 800ecec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	685a      	ldr	r2, [r3, #4]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ecfe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ed08:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	681a      	ldr	r2, [r3, #0]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ed18:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f7fe fa3d 	bl	800d19a <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7fe ff73 	bl	800dc0c <HAL_I2C_SlaveTxCpltCallback>
}
 800ed26:	e004      	b.n	800ed32 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ed30:	615a      	str	r2, [r3, #20]
}
 800ed32:	bf00      	nop
 800ed34:	3710      	adds	r7, #16
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	ffff0000 	.word	0xffff0000

0800ed40 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ed4e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ed56:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ed58:	7bbb      	ldrb	r3, [r7, #14]
 800ed5a:	2b10      	cmp	r3, #16
 800ed5c:	d002      	beq.n	800ed64 <I2C_ITError+0x24>
 800ed5e:	7bbb      	ldrb	r3, [r7, #14]
 800ed60:	2b40      	cmp	r3, #64	@ 0x40
 800ed62:	d10a      	bne.n	800ed7a <I2C_ITError+0x3a>
 800ed64:	7bfb      	ldrb	r3, [r7, #15]
 800ed66:	2b22      	cmp	r3, #34	@ 0x22
 800ed68:	d107      	bne.n	800ed7a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ed78:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ed7a:	7bfb      	ldrb	r3, [r7, #15]
 800ed7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ed80:	2b28      	cmp	r3, #40	@ 0x28
 800ed82:	d107      	bne.n	800ed94 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2200      	movs	r2, #0
 800ed88:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2228      	movs	r2, #40	@ 0x28
 800ed8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800ed92:	e015      	b.n	800edc0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ed9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eda2:	d00a      	beq.n	800edba <I2C_ITError+0x7a>
 800eda4:	7bfb      	ldrb	r3, [r7, #15]
 800eda6:	2b60      	cmp	r3, #96	@ 0x60
 800eda8:	d007      	beq.n	800edba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2220      	movs	r2, #32
 800edae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2200      	movs	r2, #0
 800edb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2200      	movs	r2, #0
 800edbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800edca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800edce:	d162      	bne.n	800ee96 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	685a      	ldr	r2, [r3, #4]
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800edde:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ede4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	2b01      	cmp	r3, #1
 800edec:	d020      	beq.n	800ee30 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edf2:	4a6a      	ldr	r2, [pc, #424]	@ (800ef9c <I2C_ITError+0x25c>)
 800edf4:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7fd fd2f 	bl	800c85e <HAL_DMA_Abort_IT>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	f000 8089 	beq.w	800ef1a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	681a      	ldr	r2, [r3, #0]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f022 0201 	bic.w	r2, r2, #1
 800ee16:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2220      	movs	r2, #32
 800ee1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ee2a:	4610      	mov	r0, r2
 800ee2c:	4798      	blx	r3
 800ee2e:	e074      	b.n	800ef1a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee34:	4a59      	ldr	r2, [pc, #356]	@ (800ef9c <I2C_ITError+0x25c>)
 800ee36:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7fd fd0e 	bl	800c85e <HAL_DMA_Abort_IT>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d068      	beq.n	800ef1a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	695b      	ldr	r3, [r3, #20]
 800ee4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee52:	2b40      	cmp	r3, #64	@ 0x40
 800ee54:	d10b      	bne.n	800ee6e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	691a      	ldr	r2, [r3, #16]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee60:	b2d2      	uxtb	r2, r2
 800ee62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee68:	1c5a      	adds	r2, r3, #1
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f022 0201 	bic.w	r2, r2, #1
 800ee7c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2220      	movs	r2, #32
 800ee82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ee90:	4610      	mov	r0, r2
 800ee92:	4798      	blx	r3
 800ee94:	e041      	b.n	800ef1a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	2b60      	cmp	r3, #96	@ 0x60
 800eea0:	d125      	bne.n	800eeee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2220      	movs	r2, #32
 800eea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2200      	movs	r2, #0
 800eeae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	695b      	ldr	r3, [r3, #20]
 800eeb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eeba:	2b40      	cmp	r3, #64	@ 0x40
 800eebc:	d10b      	bne.n	800eed6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	691a      	ldr	r2, [r3, #16]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eec8:	b2d2      	uxtb	r2, r2
 800eeca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eed0:	1c5a      	adds	r2, r3, #1
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	681a      	ldr	r2, [r3, #0]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f022 0201 	bic.w	r2, r2, #1
 800eee4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f7fe fed3 	bl	800dc92 <HAL_I2C_AbortCpltCallback>
 800eeec:	e015      	b.n	800ef1a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	695b      	ldr	r3, [r3, #20]
 800eef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eef8:	2b40      	cmp	r3, #64	@ 0x40
 800eefa:	d10b      	bne.n	800ef14 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	691a      	ldr	r2, [r3, #16]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef06:	b2d2      	uxtb	r2, r2
 800ef08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef0e:	1c5a      	adds	r2, r3, #1
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f7fe feb3 	bl	800dc80 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef1e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	f003 0301 	and.w	r3, r3, #1
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d10e      	bne.n	800ef48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d109      	bne.n	800ef48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d104      	bne.n	800ef48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d007      	beq.n	800ef58 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	685a      	ldr	r2, [r3, #4]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ef56:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef5e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef64:	f003 0304 	and.w	r3, r3, #4
 800ef68:	2b04      	cmp	r3, #4
 800ef6a:	d113      	bne.n	800ef94 <I2C_ITError+0x254>
 800ef6c:	7bfb      	ldrb	r3, [r7, #15]
 800ef6e:	2b28      	cmp	r3, #40	@ 0x28
 800ef70:	d110      	bne.n	800ef94 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	4a0a      	ldr	r2, [pc, #40]	@ (800efa0 <I2C_ITError+0x260>)
 800ef76:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2220      	movs	r2, #32
 800ef82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7fe fe5b 	bl	800dc4a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ef94:	bf00      	nop
 800ef96:	3710      	adds	r7, #16
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	0800f2a1 	.word	0x0800f2a1
 800efa0:	ffff0000 	.word	0xffff0000

0800efa4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b088      	sub	sp, #32
 800efa8:	af02      	add	r7, sp, #8
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	4608      	mov	r0, r1
 800efae:	4611      	mov	r1, r2
 800efb0:	461a      	mov	r2, r3
 800efb2:	4603      	mov	r3, r0
 800efb4:	817b      	strh	r3, [r7, #10]
 800efb6:	460b      	mov	r3, r1
 800efb8:	813b      	strh	r3, [r7, #8]
 800efba:	4613      	mov	r3, r2
 800efbc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800efcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800efce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd0:	9300      	str	r3, [sp, #0]
 800efd2:	6a3b      	ldr	r3, [r7, #32]
 800efd4:	2200      	movs	r2, #0
 800efd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f000 fa08 	bl	800f3f0 <I2C_WaitOnFlagUntilTimeout>
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d00d      	beq.n	800f002 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eff4:	d103      	bne.n	800effe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800effc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800effe:	2303      	movs	r3, #3
 800f000:	e05f      	b.n	800f0c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f002:	897b      	ldrh	r3, [r7, #10]
 800f004:	b2db      	uxtb	r3, r3
 800f006:	461a      	mov	r2, r3
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800f010:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f014:	6a3a      	ldr	r2, [r7, #32]
 800f016:	492d      	ldr	r1, [pc, #180]	@ (800f0cc <I2C_RequestMemoryWrite+0x128>)
 800f018:	68f8      	ldr	r0, [r7, #12]
 800f01a:	f000 fa63 	bl	800f4e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b00      	cmp	r3, #0
 800f022:	d001      	beq.n	800f028 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800f024:	2301      	movs	r3, #1
 800f026:	e04c      	b.n	800f0c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f028:	2300      	movs	r3, #0
 800f02a:	617b      	str	r3, [r7, #20]
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	695b      	ldr	r3, [r3, #20]
 800f032:	617b      	str	r3, [r7, #20]
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	699b      	ldr	r3, [r3, #24]
 800f03a:	617b      	str	r3, [r7, #20]
 800f03c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f03e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f040:	6a39      	ldr	r1, [r7, #32]
 800f042:	68f8      	ldr	r0, [r7, #12]
 800f044:	f000 faee 	bl	800f624 <I2C_WaitOnTXEFlagUntilTimeout>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d00d      	beq.n	800f06a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f052:	2b04      	cmp	r3, #4
 800f054:	d107      	bne.n	800f066 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f064:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f066:	2301      	movs	r3, #1
 800f068:	e02b      	b.n	800f0c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f06a:	88fb      	ldrh	r3, [r7, #6]
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d105      	bne.n	800f07c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f070:	893b      	ldrh	r3, [r7, #8]
 800f072:	b2da      	uxtb	r2, r3
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	611a      	str	r2, [r3, #16]
 800f07a:	e021      	b.n	800f0c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800f07c:	893b      	ldrh	r3, [r7, #8]
 800f07e:	0a1b      	lsrs	r3, r3, #8
 800f080:	b29b      	uxth	r3, r3
 800f082:	b2da      	uxtb	r2, r3
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f08a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f08c:	6a39      	ldr	r1, [r7, #32]
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f000 fac8 	bl	800f624 <I2C_WaitOnTXEFlagUntilTimeout>
 800f094:	4603      	mov	r3, r0
 800f096:	2b00      	cmp	r3, #0
 800f098:	d00d      	beq.n	800f0b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f09e:	2b04      	cmp	r3, #4
 800f0a0:	d107      	bne.n	800f0b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	681a      	ldr	r2, [r3, #0]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f0b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	e005      	b.n	800f0c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f0b6:	893b      	ldrh	r3, [r7, #8]
 800f0b8:	b2da      	uxtb	r2, r3
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800f0c0:	2300      	movs	r3, #0
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3718      	adds	r7, #24
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}
 800f0ca:	bf00      	nop
 800f0cc:	00010002 	.word	0x00010002

0800f0d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b088      	sub	sp, #32
 800f0d4:	af02      	add	r7, sp, #8
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	4608      	mov	r0, r1
 800f0da:	4611      	mov	r1, r2
 800f0dc:	461a      	mov	r2, r3
 800f0de:	4603      	mov	r3, r0
 800f0e0:	817b      	strh	r3, [r7, #10]
 800f0e2:	460b      	mov	r3, r1
 800f0e4:	813b      	strh	r3, [r7, #8]
 800f0e6:	4613      	mov	r3, r2
 800f0e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	681a      	ldr	r2, [r3, #0]
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f0f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f108:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f10c:	9300      	str	r3, [sp, #0]
 800f10e:	6a3b      	ldr	r3, [r7, #32]
 800f110:	2200      	movs	r2, #0
 800f112:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800f116:	68f8      	ldr	r0, [r7, #12]
 800f118:	f000 f96a 	bl	800f3f0 <I2C_WaitOnFlagUntilTimeout>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00d      	beq.n	800f13e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f12c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f130:	d103      	bne.n	800f13a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f138:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800f13a:	2303      	movs	r3, #3
 800f13c:	e0aa      	b.n	800f294 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f13e:	897b      	ldrh	r3, [r7, #10]
 800f140:	b2db      	uxtb	r3, r3
 800f142:	461a      	mov	r2, r3
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800f14c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f150:	6a3a      	ldr	r2, [r7, #32]
 800f152:	4952      	ldr	r1, [pc, #328]	@ (800f29c <I2C_RequestMemoryRead+0x1cc>)
 800f154:	68f8      	ldr	r0, [r7, #12]
 800f156:	f000 f9c5 	bl	800f4e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f15a:	4603      	mov	r3, r0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d001      	beq.n	800f164 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800f160:	2301      	movs	r3, #1
 800f162:	e097      	b.n	800f294 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f164:	2300      	movs	r3, #0
 800f166:	617b      	str	r3, [r7, #20]
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	695b      	ldr	r3, [r3, #20]
 800f16e:	617b      	str	r3, [r7, #20]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	699b      	ldr	r3, [r3, #24]
 800f176:	617b      	str	r3, [r7, #20]
 800f178:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f17a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f17c:	6a39      	ldr	r1, [r7, #32]
 800f17e:	68f8      	ldr	r0, [r7, #12]
 800f180:	f000 fa50 	bl	800f624 <I2C_WaitOnTXEFlagUntilTimeout>
 800f184:	4603      	mov	r3, r0
 800f186:	2b00      	cmp	r3, #0
 800f188:	d00d      	beq.n	800f1a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f18e:	2b04      	cmp	r3, #4
 800f190:	d107      	bne.n	800f1a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f1a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	e076      	b.n	800f294 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f1a6:	88fb      	ldrh	r3, [r7, #6]
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d105      	bne.n	800f1b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f1ac:	893b      	ldrh	r3, [r7, #8]
 800f1ae:	b2da      	uxtb	r2, r3
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	611a      	str	r2, [r3, #16]
 800f1b6:	e021      	b.n	800f1fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800f1b8:	893b      	ldrh	r3, [r7, #8]
 800f1ba:	0a1b      	lsrs	r3, r3, #8
 800f1bc:	b29b      	uxth	r3, r3
 800f1be:	b2da      	uxtb	r2, r3
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f1c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1c8:	6a39      	ldr	r1, [r7, #32]
 800f1ca:	68f8      	ldr	r0, [r7, #12]
 800f1cc:	f000 fa2a 	bl	800f624 <I2C_WaitOnTXEFlagUntilTimeout>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d00d      	beq.n	800f1f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1da:	2b04      	cmp	r3, #4
 800f1dc:	d107      	bne.n	800f1ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	681a      	ldr	r2, [r3, #0]
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f1ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e050      	b.n	800f294 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f1f2:	893b      	ldrh	r3, [r7, #8]
 800f1f4:	b2da      	uxtb	r2, r3
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f1fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1fe:	6a39      	ldr	r1, [r7, #32]
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	f000 fa0f 	bl	800f624 <I2C_WaitOnTXEFlagUntilTimeout>
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d00d      	beq.n	800f228 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f210:	2b04      	cmp	r3, #4
 800f212:	d107      	bne.n	800f224 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f222:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f224:	2301      	movs	r3, #1
 800f226:	e035      	b.n	800f294 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f236:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23a:	9300      	str	r3, [sp, #0]
 800f23c:	6a3b      	ldr	r3, [r7, #32]
 800f23e:	2200      	movs	r2, #0
 800f240:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	f000 f8d3 	bl	800f3f0 <I2C_WaitOnFlagUntilTimeout>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d00d      	beq.n	800f26c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f25a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f25e:	d103      	bne.n	800f268 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f266:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800f268:	2303      	movs	r3, #3
 800f26a:	e013      	b.n	800f294 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800f26c:	897b      	ldrh	r3, [r7, #10]
 800f26e:	b2db      	uxtb	r3, r3
 800f270:	f043 0301 	orr.w	r3, r3, #1
 800f274:	b2da      	uxtb	r2, r3
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f27e:	6a3a      	ldr	r2, [r7, #32]
 800f280:	4906      	ldr	r1, [pc, #24]	@ (800f29c <I2C_RequestMemoryRead+0x1cc>)
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f000 f92e 	bl	800f4e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d001      	beq.n	800f292 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800f28e:	2301      	movs	r3, #1
 800f290:	e000      	b.n	800f294 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800f292:	2300      	movs	r3, #0
}
 800f294:	4618      	mov	r0, r3
 800f296:	3718      	adds	r7, #24
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}
 800f29c:	00010002 	.word	0x00010002

0800f2a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b086      	sub	sp, #24
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f2b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800f2ba:	4b4b      	ldr	r3, [pc, #300]	@ (800f3e8 <I2C_DMAAbort+0x148>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	08db      	lsrs	r3, r3, #3
 800f2c0:	4a4a      	ldr	r2, [pc, #296]	@ (800f3ec <I2C_DMAAbort+0x14c>)
 800f2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2c6:	0a1a      	lsrs	r2, r3, #8
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	4413      	add	r3, r2
 800f2ce:	00da      	lsls	r2, r3, #3
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d106      	bne.n	800f2e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2de:	f043 0220 	orr.w	r2, r3, #32
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800f2e6:	e00a      	b.n	800f2fe <I2C_DMAAbort+0x5e>
    }
    count--;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	3b01      	subs	r3, #1
 800f2ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f2f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2fc:	d0ea      	beq.n	800f2d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f302:	2b00      	cmp	r3, #0
 800f304:	d003      	beq.n	800f30e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f30a:	2200      	movs	r2, #0
 800f30c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f312:	2b00      	cmp	r3, #0
 800f314:	d003      	beq.n	800f31e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f31a:	2200      	movs	r2, #0
 800f31c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f32c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	2200      	movs	r2, #0
 800f332:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d003      	beq.n	800f344 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f340:	2200      	movs	r2, #0
 800f342:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d003      	beq.n	800f354 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f350:	2200      	movs	r2, #0
 800f352:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	681a      	ldr	r2, [r3, #0]
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f022 0201 	bic.w	r2, r2, #1
 800f362:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f36a:	b2db      	uxtb	r3, r3
 800f36c:	2b60      	cmp	r3, #96	@ 0x60
 800f36e:	d10e      	bne.n	800f38e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	2220      	movs	r2, #32
 800f374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	2200      	movs	r2, #0
 800f37c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	2200      	movs	r2, #0
 800f384:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800f386:	6978      	ldr	r0, [r7, #20]
 800f388:	f7fe fc83 	bl	800dc92 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f38c:	e027      	b.n	800f3de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f38e:	7cfb      	ldrb	r3, [r7, #19]
 800f390:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800f394:	2b28      	cmp	r3, #40	@ 0x28
 800f396:	d117      	bne.n	800f3c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	681a      	ldr	r2, [r3, #0]
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f042 0201 	orr.w	r2, r2, #1
 800f3a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f3b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	2228      	movs	r2, #40	@ 0x28
 800f3c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800f3c6:	e007      	b.n	800f3d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	2220      	movs	r2, #32
 800f3cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800f3d8:	6978      	ldr	r0, [r7, #20]
 800f3da:	f7fe fc51 	bl	800dc80 <HAL_I2C_ErrorCallback>
}
 800f3de:	bf00      	nop
 800f3e0:	3718      	adds	r7, #24
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	20000000 	.word	0x20000000
 800f3ec:	14f8b589 	.word	0x14f8b589

0800f3f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	60f8      	str	r0, [r7, #12]
 800f3f8:	60b9      	str	r1, [r7, #8]
 800f3fa:	603b      	str	r3, [r7, #0]
 800f3fc:	4613      	mov	r3, r2
 800f3fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f400:	e048      	b.n	800f494 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f408:	d044      	beq.n	800f494 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f40a:	f7fc fc45 	bl	800bc98 <HAL_GetTick>
 800f40e:	4602      	mov	r2, r0
 800f410:	69bb      	ldr	r3, [r7, #24]
 800f412:	1ad3      	subs	r3, r2, r3
 800f414:	683a      	ldr	r2, [r7, #0]
 800f416:	429a      	cmp	r2, r3
 800f418:	d302      	bcc.n	800f420 <I2C_WaitOnFlagUntilTimeout+0x30>
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d139      	bne.n	800f494 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	0c1b      	lsrs	r3, r3, #16
 800f424:	b2db      	uxtb	r3, r3
 800f426:	2b01      	cmp	r3, #1
 800f428:	d10d      	bne.n	800f446 <I2C_WaitOnFlagUntilTimeout+0x56>
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	695b      	ldr	r3, [r3, #20]
 800f430:	43da      	mvns	r2, r3
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	4013      	ands	r3, r2
 800f436:	b29b      	uxth	r3, r3
 800f438:	2b00      	cmp	r3, #0
 800f43a:	bf0c      	ite	eq
 800f43c:	2301      	moveq	r3, #1
 800f43e:	2300      	movne	r3, #0
 800f440:	b2db      	uxtb	r3, r3
 800f442:	461a      	mov	r2, r3
 800f444:	e00c      	b.n	800f460 <I2C_WaitOnFlagUntilTimeout+0x70>
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	699b      	ldr	r3, [r3, #24]
 800f44c:	43da      	mvns	r2, r3
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	4013      	ands	r3, r2
 800f452:	b29b      	uxth	r3, r3
 800f454:	2b00      	cmp	r3, #0
 800f456:	bf0c      	ite	eq
 800f458:	2301      	moveq	r3, #1
 800f45a:	2300      	movne	r3, #0
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	461a      	mov	r2, r3
 800f460:	79fb      	ldrb	r3, [r7, #7]
 800f462:	429a      	cmp	r2, r3
 800f464:	d116      	bne.n	800f494 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2200      	movs	r2, #0
 800f46a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	2220      	movs	r2, #32
 800f470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2200      	movs	r2, #0
 800f478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f480:	f043 0220 	orr.w	r2, r3, #32
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2200      	movs	r2, #0
 800f48c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f490:	2301      	movs	r3, #1
 800f492:	e023      	b.n	800f4dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	0c1b      	lsrs	r3, r3, #16
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d10d      	bne.n	800f4ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	695b      	ldr	r3, [r3, #20]
 800f4a4:	43da      	mvns	r2, r3
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	4013      	ands	r3, r2
 800f4aa:	b29b      	uxth	r3, r3
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	bf0c      	ite	eq
 800f4b0:	2301      	moveq	r3, #1
 800f4b2:	2300      	movne	r3, #0
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	e00c      	b.n	800f4d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	699b      	ldr	r3, [r3, #24]
 800f4c0:	43da      	mvns	r2, r3
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	4013      	ands	r3, r2
 800f4c6:	b29b      	uxth	r3, r3
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	bf0c      	ite	eq
 800f4cc:	2301      	moveq	r3, #1
 800f4ce:	2300      	movne	r3, #0
 800f4d0:	b2db      	uxtb	r3, r3
 800f4d2:	461a      	mov	r2, r3
 800f4d4:	79fb      	ldrb	r3, [r7, #7]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d093      	beq.n	800f402 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f4da:	2300      	movs	r3, #0
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3710      	adds	r7, #16
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b084      	sub	sp, #16
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	607a      	str	r2, [r7, #4]
 800f4f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f4f2:	e071      	b.n	800f5d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	695b      	ldr	r3, [r3, #20]
 800f4fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f4fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f502:	d123      	bne.n	800f54c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f512:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f51c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	2200      	movs	r2, #0
 800f522:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2220      	movs	r2, #32
 800f528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2200      	movs	r2, #0
 800f530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f538:	f043 0204 	orr.w	r2, r3, #4
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	2200      	movs	r2, #0
 800f544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800f548:	2301      	movs	r3, #1
 800f54a:	e067      	b.n	800f61c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f552:	d041      	beq.n	800f5d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f554:	f7fc fba0 	bl	800bc98 <HAL_GetTick>
 800f558:	4602      	mov	r2, r0
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	1ad3      	subs	r3, r2, r3
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	429a      	cmp	r2, r3
 800f562:	d302      	bcc.n	800f56a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d136      	bne.n	800f5d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	0c1b      	lsrs	r3, r3, #16
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	2b01      	cmp	r3, #1
 800f572:	d10c      	bne.n	800f58e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	695b      	ldr	r3, [r3, #20]
 800f57a:	43da      	mvns	r2, r3
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	4013      	ands	r3, r2
 800f580:	b29b      	uxth	r3, r3
 800f582:	2b00      	cmp	r3, #0
 800f584:	bf14      	ite	ne
 800f586:	2301      	movne	r3, #1
 800f588:	2300      	moveq	r3, #0
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	e00b      	b.n	800f5a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	699b      	ldr	r3, [r3, #24]
 800f594:	43da      	mvns	r2, r3
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	4013      	ands	r3, r2
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	bf14      	ite	ne
 800f5a0:	2301      	movne	r3, #1
 800f5a2:	2300      	moveq	r3, #0
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d016      	beq.n	800f5d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	2220      	movs	r2, #32
 800f5b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5c4:	f043 0220 	orr.w	r2, r3, #32
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	e021      	b.n	800f61c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	0c1b      	lsrs	r3, r3, #16
 800f5dc:	b2db      	uxtb	r3, r3
 800f5de:	2b01      	cmp	r3, #1
 800f5e0:	d10c      	bne.n	800f5fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	695b      	ldr	r3, [r3, #20]
 800f5e8:	43da      	mvns	r2, r3
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	4013      	ands	r3, r2
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	bf14      	ite	ne
 800f5f4:	2301      	movne	r3, #1
 800f5f6:	2300      	moveq	r3, #0
 800f5f8:	b2db      	uxtb	r3, r3
 800f5fa:	e00b      	b.n	800f614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	699b      	ldr	r3, [r3, #24]
 800f602:	43da      	mvns	r2, r3
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	4013      	ands	r3, r2
 800f608:	b29b      	uxth	r3, r3
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	bf14      	ite	ne
 800f60e:	2301      	movne	r3, #1
 800f610:	2300      	moveq	r3, #0
 800f612:	b2db      	uxtb	r3, r3
 800f614:	2b00      	cmp	r3, #0
 800f616:	f47f af6d 	bne.w	800f4f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800f61a:	2300      	movs	r3, #0
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3710      	adds	r7, #16
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}

0800f624 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f630:	e034      	b.n	800f69c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f632:	68f8      	ldr	r0, [r7, #12]
 800f634:	f000 f915 	bl	800f862 <I2C_IsAcknowledgeFailed>
 800f638:	4603      	mov	r3, r0
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d001      	beq.n	800f642 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f63e:	2301      	movs	r3, #1
 800f640:	e034      	b.n	800f6ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f648:	d028      	beq.n	800f69c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f64a:	f7fc fb25 	bl	800bc98 <HAL_GetTick>
 800f64e:	4602      	mov	r2, r0
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	1ad3      	subs	r3, r2, r3
 800f654:	68ba      	ldr	r2, [r7, #8]
 800f656:	429a      	cmp	r2, r3
 800f658:	d302      	bcc.n	800f660 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d11d      	bne.n	800f69c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	695b      	ldr	r3, [r3, #20]
 800f666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f66a:	2b80      	cmp	r3, #128	@ 0x80
 800f66c:	d016      	beq.n	800f69c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2200      	movs	r2, #0
 800f672:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2220      	movs	r2, #32
 800f678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2200      	movs	r2, #0
 800f680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f688:	f043 0220 	orr.w	r2, r3, #32
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2200      	movs	r2, #0
 800f694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f698:	2301      	movs	r3, #1
 800f69a:	e007      	b.n	800f6ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	695b      	ldr	r3, [r3, #20]
 800f6a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6a6:	2b80      	cmp	r3, #128	@ 0x80
 800f6a8:	d1c3      	bne.n	800f632 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f6aa:	2300      	movs	r3, #0
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3710      	adds	r7, #16
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f6c0:	e034      	b.n	800f72c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f6c2:	68f8      	ldr	r0, [r7, #12]
 800f6c4:	f000 f8cd 	bl	800f862 <I2C_IsAcknowledgeFailed>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d001      	beq.n	800f6d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e034      	b.n	800f73c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6d8:	d028      	beq.n	800f72c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f6da:	f7fc fadd 	bl	800bc98 <HAL_GetTick>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	1ad3      	subs	r3, r2, r3
 800f6e4:	68ba      	ldr	r2, [r7, #8]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d302      	bcc.n	800f6f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d11d      	bne.n	800f72c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	695b      	ldr	r3, [r3, #20]
 800f6f6:	f003 0304 	and.w	r3, r3, #4
 800f6fa:	2b04      	cmp	r3, #4
 800f6fc:	d016      	beq.n	800f72c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2200      	movs	r2, #0
 800f702:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	2220      	movs	r2, #32
 800f708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2200      	movs	r2, #0
 800f710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f718:	f043 0220 	orr.w	r2, r3, #32
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2200      	movs	r2, #0
 800f724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f728:	2301      	movs	r3, #1
 800f72a:	e007      	b.n	800f73c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	695b      	ldr	r3, [r3, #20]
 800f732:	f003 0304 	and.w	r3, r3, #4
 800f736:	2b04      	cmp	r3, #4
 800f738:	d1c3      	bne.n	800f6c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3710      	adds	r7, #16
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800f744:	b480      	push	{r7}
 800f746:	b085      	sub	sp, #20
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f74c:	2300      	movs	r3, #0
 800f74e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800f750:	4b13      	ldr	r3, [pc, #76]	@ (800f7a0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	08db      	lsrs	r3, r3, #3
 800f756:	4a13      	ldr	r2, [pc, #76]	@ (800f7a4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800f758:	fba2 2303 	umull	r2, r3, r2, r3
 800f75c:	0a1a      	lsrs	r2, r3, #8
 800f75e:	4613      	mov	r3, r2
 800f760:	009b      	lsls	r3, r3, #2
 800f762:	4413      	add	r3, r2
 800f764:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	3b01      	subs	r3, #1
 800f76a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d107      	bne.n	800f782 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f776:	f043 0220 	orr.w	r2, r3, #32
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800f77e:	2301      	movs	r3, #1
 800f780:	e008      	b.n	800f794 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f78c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f790:	d0e9      	beq.n	800f766 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800f792:	2300      	movs	r3, #0
}
 800f794:	4618      	mov	r0, r3
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	bc80      	pop	{r7}
 800f79c:	4770      	bx	lr
 800f79e:	bf00      	nop
 800f7a0:	20000000 	.word	0x20000000
 800f7a4:	14f8b589 	.word	0x14f8b589

0800f7a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	60b9      	str	r1, [r7, #8]
 800f7b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f7b4:	e049      	b.n	800f84a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	695b      	ldr	r3, [r3, #20]
 800f7bc:	f003 0310 	and.w	r3, r3, #16
 800f7c0:	2b10      	cmp	r3, #16
 800f7c2:	d119      	bne.n	800f7f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f06f 0210 	mvn.w	r2, #16
 800f7cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2220      	movs	r2, #32
 800f7d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2200      	movs	r2, #0
 800f7e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	e030      	b.n	800f85a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7f8:	f7fc fa4e 	bl	800bc98 <HAL_GetTick>
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	1ad3      	subs	r3, r2, r3
 800f802:	68ba      	ldr	r2, [r7, #8]
 800f804:	429a      	cmp	r2, r3
 800f806:	d302      	bcc.n	800f80e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d11d      	bne.n	800f84a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	695b      	ldr	r3, [r3, #20]
 800f814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f818:	2b40      	cmp	r3, #64	@ 0x40
 800f81a:	d016      	beq.n	800f84a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2200      	movs	r2, #0
 800f820:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	2220      	movs	r2, #32
 800f826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2200      	movs	r2, #0
 800f82e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f836:	f043 0220 	orr.w	r2, r3, #32
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2200      	movs	r2, #0
 800f842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800f846:	2301      	movs	r3, #1
 800f848:	e007      	b.n	800f85a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	695b      	ldr	r3, [r3, #20]
 800f850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f854:	2b40      	cmp	r3, #64	@ 0x40
 800f856:	d1ae      	bne.n	800f7b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}

0800f862 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800f862:	b480      	push	{r7}
 800f864:	b083      	sub	sp, #12
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	695b      	ldr	r3, [r3, #20]
 800f870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f878:	d11b      	bne.n	800f8b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f882:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2200      	movs	r2, #0
 800f888:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2220      	movs	r2, #32
 800f88e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2200      	movs	r2, #0
 800f896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f89e:	f043 0204 	orr.w	r2, r3, #4
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	e000      	b.n	800f8b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f8b2:	2300      	movs	r3, #0
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	370c      	adds	r7, #12
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bc80      	pop	{r7}
 800f8bc:	4770      	bx	lr

0800f8be <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800f8be:	b480      	push	{r7}
 800f8c0:	b083      	sub	sp, #12
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8ca:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800f8ce:	d103      	bne.n	800f8d8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800f8d6:	e007      	b.n	800f8e8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800f8e0:	d102      	bne.n	800f8e8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2208      	movs	r2, #8
 800f8e6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800f8e8:	bf00      	nop
 800f8ea:	370c      	adds	r7, #12
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bc80      	pop	{r7}
 800f8f0:	4770      	bx	lr
	...

0800f8f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b088      	sub	sp, #32
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d101      	bne.n	800f906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f902:	2301      	movs	r3, #1
 800f904:	e31d      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f906:	4b94      	ldr	r3, [pc, #592]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f908:	689b      	ldr	r3, [r3, #8]
 800f90a:	f003 030c 	and.w	r3, r3, #12
 800f90e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f910:	4b91      	ldr	r3, [pc, #580]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f912:	689b      	ldr	r3, [r3, #8]
 800f914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f918:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f003 0301 	and.w	r3, r3, #1
 800f922:	2b00      	cmp	r3, #0
 800f924:	d07b      	beq.n	800fa1e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f926:	69bb      	ldr	r3, [r7, #24]
 800f928:	2b08      	cmp	r3, #8
 800f92a:	d006      	beq.n	800f93a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f92c:	69bb      	ldr	r3, [r7, #24]
 800f92e:	2b0c      	cmp	r3, #12
 800f930:	d10f      	bne.n	800f952 <HAL_RCC_OscConfig+0x5e>
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f938:	d10b      	bne.n	800f952 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f93a:	4b87      	ldr	r3, [pc, #540]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f942:	2b00      	cmp	r3, #0
 800f944:	d06a      	beq.n	800fa1c <HAL_RCC_OscConfig+0x128>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d166      	bne.n	800fa1c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800f94e:	2301      	movs	r3, #1
 800f950:	e2f7      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	2b01      	cmp	r3, #1
 800f958:	d106      	bne.n	800f968 <HAL_RCC_OscConfig+0x74>
 800f95a:	4b7f      	ldr	r3, [pc, #508]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	4a7e      	ldr	r2, [pc, #504]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f964:	6013      	str	r3, [r2, #0]
 800f966:	e02d      	b.n	800f9c4 <HAL_RCC_OscConfig+0xd0>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d10c      	bne.n	800f98a <HAL_RCC_OscConfig+0x96>
 800f970:	4b79      	ldr	r3, [pc, #484]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	4a78      	ldr	r2, [pc, #480]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f97a:	6013      	str	r3, [r2, #0]
 800f97c:	4b76      	ldr	r3, [pc, #472]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	4a75      	ldr	r2, [pc, #468]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f986:	6013      	str	r3, [r2, #0]
 800f988:	e01c      	b.n	800f9c4 <HAL_RCC_OscConfig+0xd0>
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	2b05      	cmp	r3, #5
 800f990:	d10c      	bne.n	800f9ac <HAL_RCC_OscConfig+0xb8>
 800f992:	4b71      	ldr	r3, [pc, #452]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	4a70      	ldr	r2, [pc, #448]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f99c:	6013      	str	r3, [r2, #0]
 800f99e:	4b6e      	ldr	r3, [pc, #440]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4a6d      	ldr	r2, [pc, #436]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f9a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f9a8:	6013      	str	r3, [r2, #0]
 800f9aa:	e00b      	b.n	800f9c4 <HAL_RCC_OscConfig+0xd0>
 800f9ac:	4b6a      	ldr	r3, [pc, #424]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4a69      	ldr	r2, [pc, #420]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f9b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f9b6:	6013      	str	r3, [r2, #0]
 800f9b8:	4b67      	ldr	r3, [pc, #412]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	4a66      	ldr	r2, [pc, #408]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f9be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f9c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	685b      	ldr	r3, [r3, #4]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d013      	beq.n	800f9f4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f9cc:	f7fc f964 	bl	800bc98 <HAL_GetTick>
 800f9d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f9d2:	e008      	b.n	800f9e6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f9d4:	f7fc f960 	bl	800bc98 <HAL_GetTick>
 800f9d8:	4602      	mov	r2, r0
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	1ad3      	subs	r3, r2, r3
 800f9de:	2b64      	cmp	r3, #100	@ 0x64
 800f9e0:	d901      	bls.n	800f9e6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800f9e2:	2303      	movs	r3, #3
 800f9e4:	e2ad      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f9e6:	4b5c      	ldr	r3, [pc, #368]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d0f0      	beq.n	800f9d4 <HAL_RCC_OscConfig+0xe0>
 800f9f2:	e014      	b.n	800fa1e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f9f4:	f7fc f950 	bl	800bc98 <HAL_GetTick>
 800f9f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f9fa:	e008      	b.n	800fa0e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f9fc:	f7fc f94c 	bl	800bc98 <HAL_GetTick>
 800fa00:	4602      	mov	r2, r0
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	1ad3      	subs	r3, r2, r3
 800fa06:	2b64      	cmp	r3, #100	@ 0x64
 800fa08:	d901      	bls.n	800fa0e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800fa0a:	2303      	movs	r3, #3
 800fa0c:	e299      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fa0e:	4b52      	ldr	r3, [pc, #328]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d1f0      	bne.n	800f9fc <HAL_RCC_OscConfig+0x108>
 800fa1a:	e000      	b.n	800fa1e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fa1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	f003 0302 	and.w	r3, r3, #2
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d05a      	beq.n	800fae0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800fa2a:	69bb      	ldr	r3, [r7, #24]
 800fa2c:	2b04      	cmp	r3, #4
 800fa2e:	d005      	beq.n	800fa3c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800fa30:	69bb      	ldr	r3, [r7, #24]
 800fa32:	2b0c      	cmp	r3, #12
 800fa34:	d119      	bne.n	800fa6a <HAL_RCC_OscConfig+0x176>
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d116      	bne.n	800fa6a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fa3c:	4b46      	ldr	r3, [pc, #280]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f003 0302 	and.w	r3, r3, #2
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d005      	beq.n	800fa54 <HAL_RCC_OscConfig+0x160>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	68db      	ldr	r3, [r3, #12]
 800fa4c:	2b01      	cmp	r3, #1
 800fa4e:	d001      	beq.n	800fa54 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800fa50:	2301      	movs	r3, #1
 800fa52:	e276      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fa54:	4b40      	ldr	r3, [pc, #256]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	691b      	ldr	r3, [r3, #16]
 800fa60:	021b      	lsls	r3, r3, #8
 800fa62:	493d      	ldr	r1, [pc, #244]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800fa64:	4313      	orrs	r3, r2
 800fa66:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fa68:	e03a      	b.n	800fae0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	68db      	ldr	r3, [r3, #12]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d020      	beq.n	800fab4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fa72:	4b3a      	ldr	r3, [pc, #232]	@ (800fb5c <HAL_RCC_OscConfig+0x268>)
 800fa74:	2201      	movs	r2, #1
 800fa76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa78:	f7fc f90e 	bl	800bc98 <HAL_GetTick>
 800fa7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fa7e:	e008      	b.n	800fa92 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fa80:	f7fc f90a 	bl	800bc98 <HAL_GetTick>
 800fa84:	4602      	mov	r2, r0
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	1ad3      	subs	r3, r2, r3
 800fa8a:	2b02      	cmp	r3, #2
 800fa8c:	d901      	bls.n	800fa92 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800fa8e:	2303      	movs	r3, #3
 800fa90:	e257      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fa92:	4b31      	ldr	r3, [pc, #196]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f003 0302 	and.w	r3, r3, #2
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d0f0      	beq.n	800fa80 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fa9e:	4b2e      	ldr	r3, [pc, #184]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	691b      	ldr	r3, [r3, #16]
 800faaa:	021b      	lsls	r3, r3, #8
 800faac:	492a      	ldr	r1, [pc, #168]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800faae:	4313      	orrs	r3, r2
 800fab0:	604b      	str	r3, [r1, #4]
 800fab2:	e015      	b.n	800fae0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fab4:	4b29      	ldr	r3, [pc, #164]	@ (800fb5c <HAL_RCC_OscConfig+0x268>)
 800fab6:	2200      	movs	r2, #0
 800fab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800faba:	f7fc f8ed 	bl	800bc98 <HAL_GetTick>
 800fabe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fac0:	e008      	b.n	800fad4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fac2:	f7fc f8e9 	bl	800bc98 <HAL_GetTick>
 800fac6:	4602      	mov	r2, r0
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	1ad3      	subs	r3, r2, r3
 800facc:	2b02      	cmp	r3, #2
 800face:	d901      	bls.n	800fad4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800fad0:	2303      	movs	r3, #3
 800fad2:	e236      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fad4:	4b20      	ldr	r3, [pc, #128]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	f003 0302 	and.w	r3, r3, #2
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d1f0      	bne.n	800fac2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	f003 0310 	and.w	r3, r3, #16
 800fae8:	2b00      	cmp	r3, #0
 800faea:	f000 80b8 	beq.w	800fc5e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800faee:	69bb      	ldr	r3, [r7, #24]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d170      	bne.n	800fbd6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800faf4:	4b18      	ldr	r3, [pc, #96]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d005      	beq.n	800fb0c <HAL_RCC_OscConfig+0x218>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	699b      	ldr	r3, [r3, #24]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d101      	bne.n	800fb0c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800fb08:	2301      	movs	r3, #1
 800fb0a:	e21a      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6a1a      	ldr	r2, [r3, #32]
 800fb10:	4b11      	ldr	r3, [pc, #68]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800fb12:	685b      	ldr	r3, [r3, #4]
 800fb14:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d921      	bls.n	800fb60 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6a1b      	ldr	r3, [r3, #32]
 800fb20:	4618      	mov	r0, r3
 800fb22:	f000 fc7d 	bl	8010420 <RCC_SetFlashLatencyFromMSIRange>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d001      	beq.n	800fb30 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	e208      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fb30:	4b09      	ldr	r3, [pc, #36]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6a1b      	ldr	r3, [r3, #32]
 800fb3c:	4906      	ldr	r1, [pc, #24]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800fb3e:	4313      	orrs	r3, r2
 800fb40:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fb42:	4b05      	ldr	r3, [pc, #20]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	69db      	ldr	r3, [r3, #28]
 800fb4e:	061b      	lsls	r3, r3, #24
 800fb50:	4901      	ldr	r1, [pc, #4]	@ (800fb58 <HAL_RCC_OscConfig+0x264>)
 800fb52:	4313      	orrs	r3, r2
 800fb54:	604b      	str	r3, [r1, #4]
 800fb56:	e020      	b.n	800fb9a <HAL_RCC_OscConfig+0x2a6>
 800fb58:	40023800 	.word	0x40023800
 800fb5c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fb60:	4b99      	ldr	r3, [pc, #612]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6a1b      	ldr	r3, [r3, #32]
 800fb6c:	4996      	ldr	r1, [pc, #600]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fb6e:	4313      	orrs	r3, r2
 800fb70:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fb72:	4b95      	ldr	r3, [pc, #596]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fb74:	685b      	ldr	r3, [r3, #4]
 800fb76:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	69db      	ldr	r3, [r3, #28]
 800fb7e:	061b      	lsls	r3, r3, #24
 800fb80:	4991      	ldr	r1, [pc, #580]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fb82:	4313      	orrs	r3, r2
 800fb84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6a1b      	ldr	r3, [r3, #32]
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f000 fc48 	bl	8010420 <RCC_SetFlashLatencyFromMSIRange>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d001      	beq.n	800fb9a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800fb96:	2301      	movs	r3, #1
 800fb98:	e1d3      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6a1b      	ldr	r3, [r3, #32]
 800fb9e:	0b5b      	lsrs	r3, r3, #13
 800fba0:	3301      	adds	r3, #1
 800fba2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800fba6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800fbaa:	4a87      	ldr	r2, [pc, #540]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fbac:	6892      	ldr	r2, [r2, #8]
 800fbae:	0912      	lsrs	r2, r2, #4
 800fbb0:	f002 020f 	and.w	r2, r2, #15
 800fbb4:	4985      	ldr	r1, [pc, #532]	@ (800fdcc <HAL_RCC_OscConfig+0x4d8>)
 800fbb6:	5c8a      	ldrb	r2, [r1, r2]
 800fbb8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fbba:	4a85      	ldr	r2, [pc, #532]	@ (800fdd0 <HAL_RCC_OscConfig+0x4dc>)
 800fbbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800fbbe:	4b85      	ldr	r3, [pc, #532]	@ (800fdd4 <HAL_RCC_OscConfig+0x4e0>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7fc f81c 	bl	800bc00 <HAL_InitTick>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800fbcc:	7bfb      	ldrb	r3, [r7, #15]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d045      	beq.n	800fc5e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800fbd2:	7bfb      	ldrb	r3, [r7, #15]
 800fbd4:	e1b5      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	699b      	ldr	r3, [r3, #24]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d029      	beq.n	800fc32 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800fbde:	4b7e      	ldr	r3, [pc, #504]	@ (800fdd8 <HAL_RCC_OscConfig+0x4e4>)
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fbe4:	f7fc f858 	bl	800bc98 <HAL_GetTick>
 800fbe8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fbea:	e008      	b.n	800fbfe <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fbec:	f7fc f854 	bl	800bc98 <HAL_GetTick>
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	1ad3      	subs	r3, r2, r3
 800fbf6:	2b02      	cmp	r3, #2
 800fbf8:	d901      	bls.n	800fbfe <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800fbfa:	2303      	movs	r3, #3
 800fbfc:	e1a1      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fbfe:	4b72      	ldr	r3, [pc, #456]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d0f0      	beq.n	800fbec <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fc0a:	4b6f      	ldr	r3, [pc, #444]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a1b      	ldr	r3, [r3, #32]
 800fc16:	496c      	ldr	r1, [pc, #432]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fc18:	4313      	orrs	r3, r2
 800fc1a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fc1c:	4b6a      	ldr	r3, [pc, #424]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	69db      	ldr	r3, [r3, #28]
 800fc28:	061b      	lsls	r3, r3, #24
 800fc2a:	4967      	ldr	r1, [pc, #412]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	604b      	str	r3, [r1, #4]
 800fc30:	e015      	b.n	800fc5e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fc32:	4b69      	ldr	r3, [pc, #420]	@ (800fdd8 <HAL_RCC_OscConfig+0x4e4>)
 800fc34:	2200      	movs	r2, #0
 800fc36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fc38:	f7fc f82e 	bl	800bc98 <HAL_GetTick>
 800fc3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fc3e:	e008      	b.n	800fc52 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fc40:	f7fc f82a 	bl	800bc98 <HAL_GetTick>
 800fc44:	4602      	mov	r2, r0
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	1ad3      	subs	r3, r2, r3
 800fc4a:	2b02      	cmp	r3, #2
 800fc4c:	d901      	bls.n	800fc52 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800fc4e:	2303      	movs	r3, #3
 800fc50:	e177      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fc52:	4b5d      	ldr	r3, [pc, #372]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d1f0      	bne.n	800fc40 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f003 0308 	and.w	r3, r3, #8
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d030      	beq.n	800fccc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	695b      	ldr	r3, [r3, #20]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d016      	beq.n	800fca0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fc72:	4b5a      	ldr	r3, [pc, #360]	@ (800fddc <HAL_RCC_OscConfig+0x4e8>)
 800fc74:	2201      	movs	r2, #1
 800fc76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fc78:	f7fc f80e 	bl	800bc98 <HAL_GetTick>
 800fc7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fc7e:	e008      	b.n	800fc92 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fc80:	f7fc f80a 	bl	800bc98 <HAL_GetTick>
 800fc84:	4602      	mov	r2, r0
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	1ad3      	subs	r3, r2, r3
 800fc8a:	2b02      	cmp	r3, #2
 800fc8c:	d901      	bls.n	800fc92 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800fc8e:	2303      	movs	r3, #3
 800fc90:	e157      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fc92:	4b4d      	ldr	r3, [pc, #308]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fc94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc96:	f003 0302 	and.w	r3, r3, #2
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d0f0      	beq.n	800fc80 <HAL_RCC_OscConfig+0x38c>
 800fc9e:	e015      	b.n	800fccc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fca0:	4b4e      	ldr	r3, [pc, #312]	@ (800fddc <HAL_RCC_OscConfig+0x4e8>)
 800fca2:	2200      	movs	r2, #0
 800fca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fca6:	f7fb fff7 	bl	800bc98 <HAL_GetTick>
 800fcaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fcac:	e008      	b.n	800fcc0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fcae:	f7fb fff3 	bl	800bc98 <HAL_GetTick>
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	1ad3      	subs	r3, r2, r3
 800fcb8:	2b02      	cmp	r3, #2
 800fcba:	d901      	bls.n	800fcc0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800fcbc:	2303      	movs	r3, #3
 800fcbe:	e140      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fcc0:	4b41      	ldr	r3, [pc, #260]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fcc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcc4:	f003 0302 	and.w	r3, r3, #2
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d1f0      	bne.n	800fcae <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f003 0304 	and.w	r3, r3, #4
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	f000 80b5 	beq.w	800fe44 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fcde:	4b3a      	ldr	r3, [pc, #232]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d10d      	bne.n	800fd06 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fcea:	4b37      	ldr	r3, [pc, #220]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fcec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcee:	4a36      	ldr	r2, [pc, #216]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fcf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fcf4:	6253      	str	r3, [r2, #36]	@ 0x24
 800fcf6:	4b34      	ldr	r3, [pc, #208]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fcf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fcfe:	60bb      	str	r3, [r7, #8]
 800fd00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fd02:	2301      	movs	r3, #1
 800fd04:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fd06:	4b36      	ldr	r3, [pc, #216]	@ (800fde0 <HAL_RCC_OscConfig+0x4ec>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d118      	bne.n	800fd44 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fd12:	4b33      	ldr	r3, [pc, #204]	@ (800fde0 <HAL_RCC_OscConfig+0x4ec>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	4a32      	ldr	r2, [pc, #200]	@ (800fde0 <HAL_RCC_OscConfig+0x4ec>)
 800fd18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fd1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fd1e:	f7fb ffbb 	bl	800bc98 <HAL_GetTick>
 800fd22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fd24:	e008      	b.n	800fd38 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fd26:	f7fb ffb7 	bl	800bc98 <HAL_GetTick>
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	1ad3      	subs	r3, r2, r3
 800fd30:	2b64      	cmp	r3, #100	@ 0x64
 800fd32:	d901      	bls.n	800fd38 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800fd34:	2303      	movs	r3, #3
 800fd36:	e104      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fd38:	4b29      	ldr	r3, [pc, #164]	@ (800fde0 <HAL_RCC_OscConfig+0x4ec>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d0f0      	beq.n	800fd26 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	689b      	ldr	r3, [r3, #8]
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	d106      	bne.n	800fd5a <HAL_RCC_OscConfig+0x466>
 800fd4c:	4b1e      	ldr	r3, [pc, #120]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fd4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd50:	4a1d      	ldr	r2, [pc, #116]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fd52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fd56:	6353      	str	r3, [r2, #52]	@ 0x34
 800fd58:	e02d      	b.n	800fdb6 <HAL_RCC_OscConfig+0x4c2>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	689b      	ldr	r3, [r3, #8]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d10c      	bne.n	800fd7c <HAL_RCC_OscConfig+0x488>
 800fd62:	4b19      	ldr	r3, [pc, #100]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fd64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd66:	4a18      	ldr	r2, [pc, #96]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fd68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fd6c:	6353      	str	r3, [r2, #52]	@ 0x34
 800fd6e:	4b16      	ldr	r3, [pc, #88]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fd70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd72:	4a15      	ldr	r2, [pc, #84]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fd74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fd78:	6353      	str	r3, [r2, #52]	@ 0x34
 800fd7a:	e01c      	b.n	800fdb6 <HAL_RCC_OscConfig+0x4c2>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	689b      	ldr	r3, [r3, #8]
 800fd80:	2b05      	cmp	r3, #5
 800fd82:	d10c      	bne.n	800fd9e <HAL_RCC_OscConfig+0x4aa>
 800fd84:	4b10      	ldr	r3, [pc, #64]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fd86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd88:	4a0f      	ldr	r2, [pc, #60]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fd8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800fd8e:	6353      	str	r3, [r2, #52]	@ 0x34
 800fd90:	4b0d      	ldr	r3, [pc, #52]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fd92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd94:	4a0c      	ldr	r2, [pc, #48]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fd96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fd9a:	6353      	str	r3, [r2, #52]	@ 0x34
 800fd9c:	e00b      	b.n	800fdb6 <HAL_RCC_OscConfig+0x4c2>
 800fd9e:	4b0a      	ldr	r3, [pc, #40]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fda0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fda2:	4a09      	ldr	r2, [pc, #36]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fda4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fda8:	6353      	str	r3, [r2, #52]	@ 0x34
 800fdaa:	4b07      	ldr	r3, [pc, #28]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fdac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fdae:	4a06      	ldr	r2, [pc, #24]	@ (800fdc8 <HAL_RCC_OscConfig+0x4d4>)
 800fdb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fdb4:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	689b      	ldr	r3, [r3, #8]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d024      	beq.n	800fe08 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fdbe:	f7fb ff6b 	bl	800bc98 <HAL_GetTick>
 800fdc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fdc4:	e019      	b.n	800fdfa <HAL_RCC_OscConfig+0x506>
 800fdc6:	bf00      	nop
 800fdc8:	40023800 	.word	0x40023800
 800fdcc:	08013e4c 	.word	0x08013e4c
 800fdd0:	20000000 	.word	0x20000000
 800fdd4:	20000190 	.word	0x20000190
 800fdd8:	42470020 	.word	0x42470020
 800fddc:	42470680 	.word	0x42470680
 800fde0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fde4:	f7fb ff58 	bl	800bc98 <HAL_GetTick>
 800fde8:	4602      	mov	r2, r0
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	1ad3      	subs	r3, r2, r3
 800fdee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d901      	bls.n	800fdfa <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800fdf6:	2303      	movs	r3, #3
 800fdf8:	e0a3      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fdfa:	4b54      	ldr	r3, [pc, #336]	@ (800ff4c <HAL_RCC_OscConfig+0x658>)
 800fdfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fdfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d0ee      	beq.n	800fde4 <HAL_RCC_OscConfig+0x4f0>
 800fe06:	e014      	b.n	800fe32 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fe08:	f7fb ff46 	bl	800bc98 <HAL_GetTick>
 800fe0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fe0e:	e00a      	b.n	800fe26 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fe10:	f7fb ff42 	bl	800bc98 <HAL_GetTick>
 800fe14:	4602      	mov	r2, r0
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	1ad3      	subs	r3, r2, r3
 800fe1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d901      	bls.n	800fe26 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800fe22:	2303      	movs	r3, #3
 800fe24:	e08d      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fe26:	4b49      	ldr	r3, [pc, #292]	@ (800ff4c <HAL_RCC_OscConfig+0x658>)
 800fe28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d1ee      	bne.n	800fe10 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800fe32:	7ffb      	ldrb	r3, [r7, #31]
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d105      	bne.n	800fe44 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fe38:	4b44      	ldr	r3, [pc, #272]	@ (800ff4c <HAL_RCC_OscConfig+0x658>)
 800fe3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe3c:	4a43      	ldr	r2, [pc, #268]	@ (800ff4c <HAL_RCC_OscConfig+0x658>)
 800fe3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fe42:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d079      	beq.n	800ff40 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800fe4c:	69bb      	ldr	r3, [r7, #24]
 800fe4e:	2b0c      	cmp	r3, #12
 800fe50:	d056      	beq.n	800ff00 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe56:	2b02      	cmp	r3, #2
 800fe58:	d13b      	bne.n	800fed2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fe5a:	4b3d      	ldr	r3, [pc, #244]	@ (800ff50 <HAL_RCC_OscConfig+0x65c>)
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe60:	f7fb ff1a 	bl	800bc98 <HAL_GetTick>
 800fe64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fe66:	e008      	b.n	800fe7a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fe68:	f7fb ff16 	bl	800bc98 <HAL_GetTick>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	1ad3      	subs	r3, r2, r3
 800fe72:	2b02      	cmp	r3, #2
 800fe74:	d901      	bls.n	800fe7a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800fe76:	2303      	movs	r3, #3
 800fe78:	e063      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fe7a:	4b34      	ldr	r3, [pc, #208]	@ (800ff4c <HAL_RCC_OscConfig+0x658>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d1f0      	bne.n	800fe68 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fe86:	4b31      	ldr	r3, [pc, #196]	@ (800ff4c <HAL_RCC_OscConfig+0x658>)
 800fe88:	689b      	ldr	r3, [r3, #8]
 800fe8a:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe96:	4319      	orrs	r1, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe9c:	430b      	orrs	r3, r1
 800fe9e:	492b      	ldr	r1, [pc, #172]	@ (800ff4c <HAL_RCC_OscConfig+0x658>)
 800fea0:	4313      	orrs	r3, r2
 800fea2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800fea4:	4b2a      	ldr	r3, [pc, #168]	@ (800ff50 <HAL_RCC_OscConfig+0x65c>)
 800fea6:	2201      	movs	r2, #1
 800fea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800feaa:	f7fb fef5 	bl	800bc98 <HAL_GetTick>
 800feae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800feb0:	e008      	b.n	800fec4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800feb2:	f7fb fef1 	bl	800bc98 <HAL_GetTick>
 800feb6:	4602      	mov	r2, r0
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	1ad3      	subs	r3, r2, r3
 800febc:	2b02      	cmp	r3, #2
 800febe:	d901      	bls.n	800fec4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800fec0:	2303      	movs	r3, #3
 800fec2:	e03e      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fec4:	4b21      	ldr	r3, [pc, #132]	@ (800ff4c <HAL_RCC_OscConfig+0x658>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d0f0      	beq.n	800feb2 <HAL_RCC_OscConfig+0x5be>
 800fed0:	e036      	b.n	800ff40 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fed2:	4b1f      	ldr	r3, [pc, #124]	@ (800ff50 <HAL_RCC_OscConfig+0x65c>)
 800fed4:	2200      	movs	r2, #0
 800fed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fed8:	f7fb fede 	bl	800bc98 <HAL_GetTick>
 800fedc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fede:	e008      	b.n	800fef2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fee0:	f7fb feda 	bl	800bc98 <HAL_GetTick>
 800fee4:	4602      	mov	r2, r0
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	1ad3      	subs	r3, r2, r3
 800feea:	2b02      	cmp	r3, #2
 800feec:	d901      	bls.n	800fef2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800feee:	2303      	movs	r3, #3
 800fef0:	e027      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fef2:	4b16      	ldr	r3, [pc, #88]	@ (800ff4c <HAL_RCC_OscConfig+0x658>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d1f0      	bne.n	800fee0 <HAL_RCC_OscConfig+0x5ec>
 800fefe:	e01f      	b.n	800ff40 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d101      	bne.n	800ff0c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800ff08:	2301      	movs	r3, #1
 800ff0a:	e01a      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ff0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ff4c <HAL_RCC_OscConfig+0x658>)
 800ff0e:	689b      	ldr	r3, [r3, #8]
 800ff10:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d10d      	bne.n	800ff3c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d106      	bne.n	800ff3c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d001      	beq.n	800ff40 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	e000      	b.n	800ff42 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800ff40:	2300      	movs	r3, #0
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3720      	adds	r7, #32
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	40023800 	.word	0x40023800
 800ff50:	42470060 	.word	0x42470060

0800ff54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d101      	bne.n	800ff68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ff64:	2301      	movs	r3, #1
 800ff66:	e11a      	b.n	801019e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ff68:	4b8f      	ldr	r3, [pc, #572]	@ (80101a8 <HAL_RCC_ClockConfig+0x254>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f003 0301 	and.w	r3, r3, #1
 800ff70:	683a      	ldr	r2, [r7, #0]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d919      	bls.n	800ffaa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d105      	bne.n	800ff88 <HAL_RCC_ClockConfig+0x34>
 800ff7c:	4b8a      	ldr	r3, [pc, #552]	@ (80101a8 <HAL_RCC_ClockConfig+0x254>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4a89      	ldr	r2, [pc, #548]	@ (80101a8 <HAL_RCC_ClockConfig+0x254>)
 800ff82:	f043 0304 	orr.w	r3, r3, #4
 800ff86:	6013      	str	r3, [r2, #0]
 800ff88:	4b87      	ldr	r3, [pc, #540]	@ (80101a8 <HAL_RCC_ClockConfig+0x254>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f023 0201 	bic.w	r2, r3, #1
 800ff90:	4985      	ldr	r1, [pc, #532]	@ (80101a8 <HAL_RCC_ClockConfig+0x254>)
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	4313      	orrs	r3, r2
 800ff96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ff98:	4b83      	ldr	r3, [pc, #524]	@ (80101a8 <HAL_RCC_ClockConfig+0x254>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f003 0301 	and.w	r3, r3, #1
 800ffa0:	683a      	ldr	r2, [r7, #0]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d001      	beq.n	800ffaa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	e0f9      	b.n	801019e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	f003 0302 	and.w	r3, r3, #2
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d008      	beq.n	800ffc8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ffb6:	4b7d      	ldr	r3, [pc, #500]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 800ffb8:	689b      	ldr	r3, [r3, #8]
 800ffba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	689b      	ldr	r3, [r3, #8]
 800ffc2:	497a      	ldr	r1, [pc, #488]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	f003 0301 	and.w	r3, r3, #1
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	f000 808e 	beq.w	80100f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	2b02      	cmp	r3, #2
 800ffdc:	d107      	bne.n	800ffee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ffde:	4b73      	ldr	r3, [pc, #460]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d121      	bne.n	801002e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800ffea:	2301      	movs	r3, #1
 800ffec:	e0d7      	b.n	801019e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	2b03      	cmp	r3, #3
 800fff4:	d107      	bne.n	8010006 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fff6:	4b6d      	ldr	r3, [pc, #436]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d115      	bne.n	801002e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8010002:	2301      	movs	r3, #1
 8010004:	e0cb      	b.n	801019e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	2b01      	cmp	r3, #1
 801000c:	d107      	bne.n	801001e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801000e:	4b67      	ldr	r3, [pc, #412]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f003 0302 	and.w	r3, r3, #2
 8010016:	2b00      	cmp	r3, #0
 8010018:	d109      	bne.n	801002e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 801001a:	2301      	movs	r3, #1
 801001c:	e0bf      	b.n	801019e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801001e:	4b63      	ldr	r3, [pc, #396]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010026:	2b00      	cmp	r3, #0
 8010028:	d101      	bne.n	801002e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 801002a:	2301      	movs	r3, #1
 801002c:	e0b7      	b.n	801019e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801002e:	4b5f      	ldr	r3, [pc, #380]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 8010030:	689b      	ldr	r3, [r3, #8]
 8010032:	f023 0203 	bic.w	r2, r3, #3
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	495c      	ldr	r1, [pc, #368]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 801003c:	4313      	orrs	r3, r2
 801003e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010040:	f7fb fe2a 	bl	800bc98 <HAL_GetTick>
 8010044:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	2b02      	cmp	r3, #2
 801004c:	d112      	bne.n	8010074 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801004e:	e00a      	b.n	8010066 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010050:	f7fb fe22 	bl	800bc98 <HAL_GetTick>
 8010054:	4602      	mov	r2, r0
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	1ad3      	subs	r3, r2, r3
 801005a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801005e:	4293      	cmp	r3, r2
 8010060:	d901      	bls.n	8010066 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8010062:	2303      	movs	r3, #3
 8010064:	e09b      	b.n	801019e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010066:	4b51      	ldr	r3, [pc, #324]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 8010068:	689b      	ldr	r3, [r3, #8]
 801006a:	f003 030c 	and.w	r3, r3, #12
 801006e:	2b08      	cmp	r3, #8
 8010070:	d1ee      	bne.n	8010050 <HAL_RCC_ClockConfig+0xfc>
 8010072:	e03e      	b.n	80100f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	2b03      	cmp	r3, #3
 801007a:	d112      	bne.n	80100a2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801007c:	e00a      	b.n	8010094 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801007e:	f7fb fe0b 	bl	800bc98 <HAL_GetTick>
 8010082:	4602      	mov	r2, r0
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	1ad3      	subs	r3, r2, r3
 8010088:	f241 3288 	movw	r2, #5000	@ 0x1388
 801008c:	4293      	cmp	r3, r2
 801008e:	d901      	bls.n	8010094 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8010090:	2303      	movs	r3, #3
 8010092:	e084      	b.n	801019e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010094:	4b45      	ldr	r3, [pc, #276]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 8010096:	689b      	ldr	r3, [r3, #8]
 8010098:	f003 030c 	and.w	r3, r3, #12
 801009c:	2b0c      	cmp	r3, #12
 801009e:	d1ee      	bne.n	801007e <HAL_RCC_ClockConfig+0x12a>
 80100a0:	e027      	b.n	80100f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	2b01      	cmp	r3, #1
 80100a8:	d11d      	bne.n	80100e6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80100aa:	e00a      	b.n	80100c2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80100ac:	f7fb fdf4 	bl	800bc98 <HAL_GetTick>
 80100b0:	4602      	mov	r2, r0
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d901      	bls.n	80100c2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80100be:	2303      	movs	r3, #3
 80100c0:	e06d      	b.n	801019e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80100c2:	4b3a      	ldr	r3, [pc, #232]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 80100c4:	689b      	ldr	r3, [r3, #8]
 80100c6:	f003 030c 	and.w	r3, r3, #12
 80100ca:	2b04      	cmp	r3, #4
 80100cc:	d1ee      	bne.n	80100ac <HAL_RCC_ClockConfig+0x158>
 80100ce:	e010      	b.n	80100f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80100d0:	f7fb fde2 	bl	800bc98 <HAL_GetTick>
 80100d4:	4602      	mov	r2, r0
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	1ad3      	subs	r3, r2, r3
 80100da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100de:	4293      	cmp	r3, r2
 80100e0:	d901      	bls.n	80100e6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80100e2:	2303      	movs	r3, #3
 80100e4:	e05b      	b.n	801019e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80100e6:	4b31      	ldr	r3, [pc, #196]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 80100e8:	689b      	ldr	r3, [r3, #8]
 80100ea:	f003 030c 	and.w	r3, r3, #12
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d1ee      	bne.n	80100d0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80100f2:	4b2d      	ldr	r3, [pc, #180]	@ (80101a8 <HAL_RCC_ClockConfig+0x254>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f003 0301 	and.w	r3, r3, #1
 80100fa:	683a      	ldr	r2, [r7, #0]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d219      	bcs.n	8010134 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	2b01      	cmp	r3, #1
 8010104:	d105      	bne.n	8010112 <HAL_RCC_ClockConfig+0x1be>
 8010106:	4b28      	ldr	r3, [pc, #160]	@ (80101a8 <HAL_RCC_ClockConfig+0x254>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	4a27      	ldr	r2, [pc, #156]	@ (80101a8 <HAL_RCC_ClockConfig+0x254>)
 801010c:	f043 0304 	orr.w	r3, r3, #4
 8010110:	6013      	str	r3, [r2, #0]
 8010112:	4b25      	ldr	r3, [pc, #148]	@ (80101a8 <HAL_RCC_ClockConfig+0x254>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	f023 0201 	bic.w	r2, r3, #1
 801011a:	4923      	ldr	r1, [pc, #140]	@ (80101a8 <HAL_RCC_ClockConfig+0x254>)
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	4313      	orrs	r3, r2
 8010120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010122:	4b21      	ldr	r3, [pc, #132]	@ (80101a8 <HAL_RCC_ClockConfig+0x254>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f003 0301 	and.w	r3, r3, #1
 801012a:	683a      	ldr	r2, [r7, #0]
 801012c:	429a      	cmp	r2, r3
 801012e:	d001      	beq.n	8010134 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8010130:	2301      	movs	r3, #1
 8010132:	e034      	b.n	801019e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	f003 0304 	and.w	r3, r3, #4
 801013c:	2b00      	cmp	r3, #0
 801013e:	d008      	beq.n	8010152 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010140:	4b1a      	ldr	r3, [pc, #104]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 8010142:	689b      	ldr	r3, [r3, #8]
 8010144:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	68db      	ldr	r3, [r3, #12]
 801014c:	4917      	ldr	r1, [pc, #92]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 801014e:	4313      	orrs	r3, r2
 8010150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f003 0308 	and.w	r3, r3, #8
 801015a:	2b00      	cmp	r3, #0
 801015c:	d009      	beq.n	8010172 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801015e:	4b13      	ldr	r3, [pc, #76]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 8010160:	689b      	ldr	r3, [r3, #8]
 8010162:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	691b      	ldr	r3, [r3, #16]
 801016a:	00db      	lsls	r3, r3, #3
 801016c:	490f      	ldr	r1, [pc, #60]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 801016e:	4313      	orrs	r3, r2
 8010170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010172:	f000 f823 	bl	80101bc <HAL_RCC_GetSysClockFreq>
 8010176:	4602      	mov	r2, r0
 8010178:	4b0c      	ldr	r3, [pc, #48]	@ (80101ac <HAL_RCC_ClockConfig+0x258>)
 801017a:	689b      	ldr	r3, [r3, #8]
 801017c:	091b      	lsrs	r3, r3, #4
 801017e:	f003 030f 	and.w	r3, r3, #15
 8010182:	490b      	ldr	r1, [pc, #44]	@ (80101b0 <HAL_RCC_ClockConfig+0x25c>)
 8010184:	5ccb      	ldrb	r3, [r1, r3]
 8010186:	fa22 f303 	lsr.w	r3, r2, r3
 801018a:	4a0a      	ldr	r2, [pc, #40]	@ (80101b4 <HAL_RCC_ClockConfig+0x260>)
 801018c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801018e:	4b0a      	ldr	r3, [pc, #40]	@ (80101b8 <HAL_RCC_ClockConfig+0x264>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	4618      	mov	r0, r3
 8010194:	f7fb fd34 	bl	800bc00 <HAL_InitTick>
 8010198:	4603      	mov	r3, r0
 801019a:	72fb      	strb	r3, [r7, #11]

  return status;
 801019c:	7afb      	ldrb	r3, [r7, #11]
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3710      	adds	r7, #16
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	40023c00 	.word	0x40023c00
 80101ac:	40023800 	.word	0x40023800
 80101b0:	08013e4c 	.word	0x08013e4c
 80101b4:	20000000 	.word	0x20000000
 80101b8:	20000190 	.word	0x20000190

080101bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80101bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80101c0:	b092      	sub	sp, #72	@ 0x48
 80101c2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80101c4:	4b79      	ldr	r3, [pc, #484]	@ (80103ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 80101c6:	689b      	ldr	r3, [r3, #8]
 80101c8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80101ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101cc:	f003 030c 	and.w	r3, r3, #12
 80101d0:	2b0c      	cmp	r3, #12
 80101d2:	d00d      	beq.n	80101f0 <HAL_RCC_GetSysClockFreq+0x34>
 80101d4:	2b0c      	cmp	r3, #12
 80101d6:	f200 80d5 	bhi.w	8010384 <HAL_RCC_GetSysClockFreq+0x1c8>
 80101da:	2b04      	cmp	r3, #4
 80101dc:	d002      	beq.n	80101e4 <HAL_RCC_GetSysClockFreq+0x28>
 80101de:	2b08      	cmp	r3, #8
 80101e0:	d003      	beq.n	80101ea <HAL_RCC_GetSysClockFreq+0x2e>
 80101e2:	e0cf      	b.n	8010384 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80101e4:	4b72      	ldr	r3, [pc, #456]	@ (80103b0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80101e6:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80101e8:	e0da      	b.n	80103a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80101ea:	4b72      	ldr	r3, [pc, #456]	@ (80103b4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80101ec:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80101ee:	e0d7      	b.n	80103a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80101f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101f2:	0c9b      	lsrs	r3, r3, #18
 80101f4:	f003 020f 	and.w	r2, r3, #15
 80101f8:	4b6f      	ldr	r3, [pc, #444]	@ (80103b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80101fa:	5c9b      	ldrb	r3, [r3, r2]
 80101fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80101fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010200:	0d9b      	lsrs	r3, r3, #22
 8010202:	f003 0303 	and.w	r3, r3, #3
 8010206:	3301      	adds	r3, #1
 8010208:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801020a:	4b68      	ldr	r3, [pc, #416]	@ (80103ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 801020c:	689b      	ldr	r3, [r3, #8]
 801020e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010212:	2b00      	cmp	r3, #0
 8010214:	d05d      	beq.n	80102d2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8010216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010218:	2200      	movs	r2, #0
 801021a:	4618      	mov	r0, r3
 801021c:	4611      	mov	r1, r2
 801021e:	4604      	mov	r4, r0
 8010220:	460d      	mov	r5, r1
 8010222:	4622      	mov	r2, r4
 8010224:	462b      	mov	r3, r5
 8010226:	f04f 0000 	mov.w	r0, #0
 801022a:	f04f 0100 	mov.w	r1, #0
 801022e:	0159      	lsls	r1, r3, #5
 8010230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010234:	0150      	lsls	r0, r2, #5
 8010236:	4602      	mov	r2, r0
 8010238:	460b      	mov	r3, r1
 801023a:	4621      	mov	r1, r4
 801023c:	1a51      	subs	r1, r2, r1
 801023e:	6139      	str	r1, [r7, #16]
 8010240:	4629      	mov	r1, r5
 8010242:	eb63 0301 	sbc.w	r3, r3, r1
 8010246:	617b      	str	r3, [r7, #20]
 8010248:	f04f 0200 	mov.w	r2, #0
 801024c:	f04f 0300 	mov.w	r3, #0
 8010250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010254:	4659      	mov	r1, fp
 8010256:	018b      	lsls	r3, r1, #6
 8010258:	4651      	mov	r1, sl
 801025a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801025e:	4651      	mov	r1, sl
 8010260:	018a      	lsls	r2, r1, #6
 8010262:	46d4      	mov	ip, sl
 8010264:	ebb2 080c 	subs.w	r8, r2, ip
 8010268:	4659      	mov	r1, fp
 801026a:	eb63 0901 	sbc.w	r9, r3, r1
 801026e:	f04f 0200 	mov.w	r2, #0
 8010272:	f04f 0300 	mov.w	r3, #0
 8010276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801027a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801027e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010282:	4690      	mov	r8, r2
 8010284:	4699      	mov	r9, r3
 8010286:	4623      	mov	r3, r4
 8010288:	eb18 0303 	adds.w	r3, r8, r3
 801028c:	60bb      	str	r3, [r7, #8]
 801028e:	462b      	mov	r3, r5
 8010290:	eb49 0303 	adc.w	r3, r9, r3
 8010294:	60fb      	str	r3, [r7, #12]
 8010296:	f04f 0200 	mov.w	r2, #0
 801029a:	f04f 0300 	mov.w	r3, #0
 801029e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80102a2:	4629      	mov	r1, r5
 80102a4:	024b      	lsls	r3, r1, #9
 80102a6:	4620      	mov	r0, r4
 80102a8:	4629      	mov	r1, r5
 80102aa:	4604      	mov	r4, r0
 80102ac:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80102b0:	4601      	mov	r1, r0
 80102b2:	024a      	lsls	r2, r1, #9
 80102b4:	4610      	mov	r0, r2
 80102b6:	4619      	mov	r1, r3
 80102b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102ba:	2200      	movs	r2, #0
 80102bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80102be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80102c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80102c4:	f7f0 ff5a 	bl	800117c <__aeabi_uldivmod>
 80102c8:	4602      	mov	r2, r0
 80102ca:	460b      	mov	r3, r1
 80102cc:	4613      	mov	r3, r2
 80102ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80102d0:	e055      	b.n	801037e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80102d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102d4:	2200      	movs	r2, #0
 80102d6:	623b      	str	r3, [r7, #32]
 80102d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80102da:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80102de:	4642      	mov	r2, r8
 80102e0:	464b      	mov	r3, r9
 80102e2:	f04f 0000 	mov.w	r0, #0
 80102e6:	f04f 0100 	mov.w	r1, #0
 80102ea:	0159      	lsls	r1, r3, #5
 80102ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80102f0:	0150      	lsls	r0, r2, #5
 80102f2:	4602      	mov	r2, r0
 80102f4:	460b      	mov	r3, r1
 80102f6:	46c4      	mov	ip, r8
 80102f8:	ebb2 0a0c 	subs.w	sl, r2, ip
 80102fc:	4640      	mov	r0, r8
 80102fe:	4649      	mov	r1, r9
 8010300:	468c      	mov	ip, r1
 8010302:	eb63 0b0c 	sbc.w	fp, r3, ip
 8010306:	f04f 0200 	mov.w	r2, #0
 801030a:	f04f 0300 	mov.w	r3, #0
 801030e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8010312:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8010316:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801031a:	ebb2 040a 	subs.w	r4, r2, sl
 801031e:	eb63 050b 	sbc.w	r5, r3, fp
 8010322:	f04f 0200 	mov.w	r2, #0
 8010326:	f04f 0300 	mov.w	r3, #0
 801032a:	00eb      	lsls	r3, r5, #3
 801032c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010330:	00e2      	lsls	r2, r4, #3
 8010332:	4614      	mov	r4, r2
 8010334:	461d      	mov	r5, r3
 8010336:	4603      	mov	r3, r0
 8010338:	18e3      	adds	r3, r4, r3
 801033a:	603b      	str	r3, [r7, #0]
 801033c:	460b      	mov	r3, r1
 801033e:	eb45 0303 	adc.w	r3, r5, r3
 8010342:	607b      	str	r3, [r7, #4]
 8010344:	f04f 0200 	mov.w	r2, #0
 8010348:	f04f 0300 	mov.w	r3, #0
 801034c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010350:	4629      	mov	r1, r5
 8010352:	028b      	lsls	r3, r1, #10
 8010354:	4620      	mov	r0, r4
 8010356:	4629      	mov	r1, r5
 8010358:	4604      	mov	r4, r0
 801035a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 801035e:	4601      	mov	r1, r0
 8010360:	028a      	lsls	r2, r1, #10
 8010362:	4610      	mov	r0, r2
 8010364:	4619      	mov	r1, r3
 8010366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010368:	2200      	movs	r2, #0
 801036a:	61bb      	str	r3, [r7, #24]
 801036c:	61fa      	str	r2, [r7, #28]
 801036e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010372:	f7f0 ff03 	bl	800117c <__aeabi_uldivmod>
 8010376:	4602      	mov	r2, r0
 8010378:	460b      	mov	r3, r1
 801037a:	4613      	mov	r3, r2
 801037c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 801037e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010380:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8010382:	e00d      	b.n	80103a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8010384:	4b09      	ldr	r3, [pc, #36]	@ (80103ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	0b5b      	lsrs	r3, r3, #13
 801038a:	f003 0307 	and.w	r3, r3, #7
 801038e:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8010390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010392:	3301      	adds	r3, #1
 8010394:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8010398:	fa02 f303 	lsl.w	r3, r2, r3
 801039c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 801039e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80103a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3748      	adds	r7, #72	@ 0x48
 80103a6:	46bd      	mov	sp, r7
 80103a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80103ac:	40023800 	.word	0x40023800
 80103b0:	00f42400 	.word	0x00f42400
 80103b4:	007a1200 	.word	0x007a1200
 80103b8:	08013e40 	.word	0x08013e40

080103bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80103bc:	b480      	push	{r7}
 80103be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80103c0:	4b02      	ldr	r3, [pc, #8]	@ (80103cc <HAL_RCC_GetHCLKFreq+0x10>)
 80103c2:	681b      	ldr	r3, [r3, #0]
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bc80      	pop	{r7}
 80103ca:	4770      	bx	lr
 80103cc:	20000000 	.word	0x20000000

080103d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80103d4:	f7ff fff2 	bl	80103bc <HAL_RCC_GetHCLKFreq>
 80103d8:	4602      	mov	r2, r0
 80103da:	4b05      	ldr	r3, [pc, #20]	@ (80103f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80103dc:	689b      	ldr	r3, [r3, #8]
 80103de:	0a1b      	lsrs	r3, r3, #8
 80103e0:	f003 0307 	and.w	r3, r3, #7
 80103e4:	4903      	ldr	r1, [pc, #12]	@ (80103f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80103e6:	5ccb      	ldrb	r3, [r1, r3]
 80103e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	40023800 	.word	0x40023800
 80103f4:	08013e5c 	.word	0x08013e5c

080103f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80103fc:	f7ff ffde 	bl	80103bc <HAL_RCC_GetHCLKFreq>
 8010400:	4602      	mov	r2, r0
 8010402:	4b05      	ldr	r3, [pc, #20]	@ (8010418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	0adb      	lsrs	r3, r3, #11
 8010408:	f003 0307 	and.w	r3, r3, #7
 801040c:	4903      	ldr	r1, [pc, #12]	@ (801041c <HAL_RCC_GetPCLK2Freq+0x24>)
 801040e:	5ccb      	ldrb	r3, [r1, r3]
 8010410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010414:	4618      	mov	r0, r3
 8010416:	bd80      	pop	{r7, pc}
 8010418:	40023800 	.word	0x40023800
 801041c:	08013e5c 	.word	0x08013e5c

08010420 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8010420:	b480      	push	{r7}
 8010422:	b087      	sub	sp, #28
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8010428:	2300      	movs	r3, #0
 801042a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 801042c:	4b29      	ldr	r3, [pc, #164]	@ (80104d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 801042e:	689b      	ldr	r3, [r3, #8]
 8010430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010434:	2b00      	cmp	r3, #0
 8010436:	d12c      	bne.n	8010492 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010438:	4b26      	ldr	r3, [pc, #152]	@ (80104d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 801043a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801043c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010440:	2b00      	cmp	r3, #0
 8010442:	d005      	beq.n	8010450 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8010444:	4b24      	ldr	r3, [pc, #144]	@ (80104d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 801044c:	617b      	str	r3, [r7, #20]
 801044e:	e016      	b.n	801047e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010450:	4b20      	ldr	r3, [pc, #128]	@ (80104d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8010452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010454:	4a1f      	ldr	r2, [pc, #124]	@ (80104d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8010456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801045a:	6253      	str	r3, [r2, #36]	@ 0x24
 801045c:	4b1d      	ldr	r3, [pc, #116]	@ (80104d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 801045e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010464:	60fb      	str	r3, [r7, #12]
 8010466:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8010468:	4b1b      	ldr	r3, [pc, #108]	@ (80104d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8010470:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8010472:	4b18      	ldr	r3, [pc, #96]	@ (80104d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8010474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010476:	4a17      	ldr	r2, [pc, #92]	@ (80104d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8010478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801047c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8010484:	d105      	bne.n	8010492 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801048c:	d101      	bne.n	8010492 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 801048e:	2301      	movs	r3, #1
 8010490:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	2b01      	cmp	r3, #1
 8010496:	d105      	bne.n	80104a4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8010498:	4b10      	ldr	r3, [pc, #64]	@ (80104dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4a0f      	ldr	r2, [pc, #60]	@ (80104dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801049e:	f043 0304 	orr.w	r3, r3, #4
 80104a2:	6013      	str	r3, [r2, #0]
 80104a4:	4b0d      	ldr	r3, [pc, #52]	@ (80104dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	f023 0201 	bic.w	r2, r3, #1
 80104ac:	490b      	ldr	r1, [pc, #44]	@ (80104dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	4313      	orrs	r3, r2
 80104b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80104b4:	4b09      	ldr	r3, [pc, #36]	@ (80104dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f003 0301 	and.w	r3, r3, #1
 80104bc:	693a      	ldr	r2, [r7, #16]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d001      	beq.n	80104c6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80104c2:	2301      	movs	r3, #1
 80104c4:	e000      	b.n	80104c8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80104c6:	2300      	movs	r3, #0
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	371c      	adds	r7, #28
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bc80      	pop	{r7}
 80104d0:	4770      	bx	lr
 80104d2:	bf00      	nop
 80104d4:	40023800 	.word	0x40023800
 80104d8:	40007000 	.word	0x40007000
 80104dc:	40023c00 	.word	0x40023c00

080104e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b082      	sub	sp, #8
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d101      	bne.n	80104f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80104ee:	2301      	movs	r3, #1
 80104f0:	e07b      	b.n	80105ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d108      	bne.n	801050c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010502:	d009      	beq.n	8010518 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2200      	movs	r2, #0
 8010508:	61da      	str	r2, [r3, #28]
 801050a:	e005      	b.n	8010518 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2200      	movs	r2, #0
 8010510:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2200      	movs	r2, #0
 8010516:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010524:	b2db      	uxtb	r3, r3
 8010526:	2b00      	cmp	r3, #0
 8010528:	d106      	bne.n	8010538 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2200      	movs	r2, #0
 801052e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f7f1 ff78 	bl	8002428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2202      	movs	r2, #2
 801053c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	681a      	ldr	r2, [r3, #0]
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801054e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	685b      	ldr	r3, [r3, #4]
 8010554:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	689b      	ldr	r3, [r3, #8]
 801055c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8010560:	431a      	orrs	r2, r3
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801056a:	431a      	orrs	r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	691b      	ldr	r3, [r3, #16]
 8010570:	f003 0302 	and.w	r3, r3, #2
 8010574:	431a      	orrs	r2, r3
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	695b      	ldr	r3, [r3, #20]
 801057a:	f003 0301 	and.w	r3, r3, #1
 801057e:	431a      	orrs	r2, r3
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	699b      	ldr	r3, [r3, #24]
 8010584:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010588:	431a      	orrs	r2, r3
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	69db      	ldr	r3, [r3, #28]
 801058e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010592:	431a      	orrs	r2, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6a1b      	ldr	r3, [r3, #32]
 8010598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801059c:	ea42 0103 	orr.w	r1, r2, r3
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	430a      	orrs	r2, r1
 80105ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	699b      	ldr	r3, [r3, #24]
 80105b4:	0c1b      	lsrs	r3, r3, #16
 80105b6:	f003 0104 	and.w	r1, r3, #4
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105be:	f003 0210 	and.w	r2, r3, #16
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	430a      	orrs	r2, r1
 80105c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	69da      	ldr	r2, [r3, #28]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80105d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2200      	movs	r2, #0
 80105de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2201      	movs	r2, #1
 80105e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80105e8:	2300      	movs	r3, #0
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3708      	adds	r7, #8
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}

080105f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80105f2:	b580      	push	{r7, lr}
 80105f4:	b088      	sub	sp, #32
 80105f6:	af00      	add	r7, sp, #0
 80105f8:	60f8      	str	r0, [r7, #12]
 80105fa:	60b9      	str	r1, [r7, #8]
 80105fc:	603b      	str	r3, [r7, #0]
 80105fe:	4613      	mov	r3, r2
 8010600:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010602:	2300      	movs	r3, #0
 8010604:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801060c:	2b01      	cmp	r3, #1
 801060e:	d101      	bne.n	8010614 <HAL_SPI_Transmit+0x22>
 8010610:	2302      	movs	r3, #2
 8010612:	e12d      	b.n	8010870 <HAL_SPI_Transmit+0x27e>
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	2201      	movs	r2, #1
 8010618:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801061c:	f7fb fb3c 	bl	800bc98 <HAL_GetTick>
 8010620:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010622:	88fb      	ldrh	r3, [r7, #6]
 8010624:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801062c:	b2db      	uxtb	r3, r3
 801062e:	2b01      	cmp	r3, #1
 8010630:	d002      	beq.n	8010638 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010632:	2302      	movs	r3, #2
 8010634:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010636:	e116      	b.n	8010866 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d002      	beq.n	8010644 <HAL_SPI_Transmit+0x52>
 801063e:	88fb      	ldrh	r3, [r7, #6]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d102      	bne.n	801064a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010644:	2301      	movs	r3, #1
 8010646:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010648:	e10d      	b.n	8010866 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	2203      	movs	r2, #3
 801064e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	2200      	movs	r2, #0
 8010656:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	68ba      	ldr	r2, [r7, #8]
 801065c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	88fa      	ldrh	r2, [r7, #6]
 8010662:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	88fa      	ldrh	r2, [r7, #6]
 8010668:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2200      	movs	r2, #0
 801066e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2200      	movs	r2, #0
 8010674:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	2200      	movs	r2, #0
 801067a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2200      	movs	r2, #0
 8010680:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2200      	movs	r2, #0
 8010686:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	689b      	ldr	r3, [r3, #8]
 801068c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010690:	d10f      	bne.n	80106b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	681a      	ldr	r2, [r3, #0]
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80106a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	681a      	ldr	r2, [r3, #0]
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80106b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106bc:	2b40      	cmp	r3, #64	@ 0x40
 80106be:	d007      	beq.n	80106d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80106ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	68db      	ldr	r3, [r3, #12]
 80106d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80106d8:	d14f      	bne.n	801077a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d002      	beq.n	80106e8 <HAL_SPI_Transmit+0xf6>
 80106e2:	8afb      	ldrh	r3, [r7, #22]
 80106e4:	2b01      	cmp	r3, #1
 80106e6:	d142      	bne.n	801076e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106ec:	881a      	ldrh	r2, [r3, #0]
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106f8:	1c9a      	adds	r2, r3, #2
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010702:	b29b      	uxth	r3, r3
 8010704:	3b01      	subs	r3, #1
 8010706:	b29a      	uxth	r2, r3
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801070c:	e02f      	b.n	801076e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	689b      	ldr	r3, [r3, #8]
 8010714:	f003 0302 	and.w	r3, r3, #2
 8010718:	2b02      	cmp	r3, #2
 801071a:	d112      	bne.n	8010742 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010720:	881a      	ldrh	r2, [r3, #0]
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801072c:	1c9a      	adds	r2, r3, #2
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010736:	b29b      	uxth	r3, r3
 8010738:	3b01      	subs	r3, #1
 801073a:	b29a      	uxth	r2, r3
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8010740:	e015      	b.n	801076e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010742:	f7fb faa9 	bl	800bc98 <HAL_GetTick>
 8010746:	4602      	mov	r2, r0
 8010748:	69bb      	ldr	r3, [r7, #24]
 801074a:	1ad3      	subs	r3, r2, r3
 801074c:	683a      	ldr	r2, [r7, #0]
 801074e:	429a      	cmp	r2, r3
 8010750:	d803      	bhi.n	801075a <HAL_SPI_Transmit+0x168>
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010758:	d102      	bne.n	8010760 <HAL_SPI_Transmit+0x16e>
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d106      	bne.n	801076e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8010760:	2303      	movs	r3, #3
 8010762:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2201      	movs	r2, #1
 8010768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 801076c:	e07b      	b.n	8010866 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010772:	b29b      	uxth	r3, r3
 8010774:	2b00      	cmp	r3, #0
 8010776:	d1ca      	bne.n	801070e <HAL_SPI_Transmit+0x11c>
 8010778:	e050      	b.n	801081c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d002      	beq.n	8010788 <HAL_SPI_Transmit+0x196>
 8010782:	8afb      	ldrh	r3, [r7, #22]
 8010784:	2b01      	cmp	r3, #1
 8010786:	d144      	bne.n	8010812 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	330c      	adds	r3, #12
 8010792:	7812      	ldrb	r2, [r2, #0]
 8010794:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801079a:	1c5a      	adds	r2, r3, #1
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80107a4:	b29b      	uxth	r3, r3
 80107a6:	3b01      	subs	r3, #1
 80107a8:	b29a      	uxth	r2, r3
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80107ae:	e030      	b.n	8010812 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	689b      	ldr	r3, [r3, #8]
 80107b6:	f003 0302 	and.w	r3, r3, #2
 80107ba:	2b02      	cmp	r3, #2
 80107bc:	d113      	bne.n	80107e6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	330c      	adds	r3, #12
 80107c8:	7812      	ldrb	r2, [r2, #0]
 80107ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107d0:	1c5a      	adds	r2, r3, #1
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80107da:	b29b      	uxth	r3, r3
 80107dc:	3b01      	subs	r3, #1
 80107de:	b29a      	uxth	r2, r3
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80107e4:	e015      	b.n	8010812 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80107e6:	f7fb fa57 	bl	800bc98 <HAL_GetTick>
 80107ea:	4602      	mov	r2, r0
 80107ec:	69bb      	ldr	r3, [r7, #24]
 80107ee:	1ad3      	subs	r3, r2, r3
 80107f0:	683a      	ldr	r2, [r7, #0]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d803      	bhi.n	80107fe <HAL_SPI_Transmit+0x20c>
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107fc:	d102      	bne.n	8010804 <HAL_SPI_Transmit+0x212>
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d106      	bne.n	8010812 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8010804:	2303      	movs	r3, #3
 8010806:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	2201      	movs	r2, #1
 801080c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8010810:	e029      	b.n	8010866 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010816:	b29b      	uxth	r3, r3
 8010818:	2b00      	cmp	r3, #0
 801081a:	d1c9      	bne.n	80107b0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801081c:	69ba      	ldr	r2, [r7, #24]
 801081e:	6839      	ldr	r1, [r7, #0]
 8010820:	68f8      	ldr	r0, [r7, #12]
 8010822:	f000 f8b1 	bl	8010988 <SPI_EndRxTxTransaction>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d002      	beq.n	8010832 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2220      	movs	r2, #32
 8010830:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	689b      	ldr	r3, [r3, #8]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d10a      	bne.n	8010850 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801083a:	2300      	movs	r3, #0
 801083c:	613b      	str	r3, [r7, #16]
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	613b      	str	r3, [r7, #16]
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	689b      	ldr	r3, [r3, #8]
 801084c:	613b      	str	r3, [r7, #16]
 801084e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010854:	2b00      	cmp	r3, #0
 8010856:	d002      	beq.n	801085e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8010858:	2301      	movs	r3, #1
 801085a:	77fb      	strb	r3, [r7, #31]
 801085c:	e003      	b.n	8010866 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2201      	movs	r2, #1
 8010862:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	2200      	movs	r2, #0
 801086a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 801086e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010870:	4618      	mov	r0, r3
 8010872:	3720      	adds	r7, #32
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b088      	sub	sp, #32
 801087c:	af00      	add	r7, sp, #0
 801087e:	60f8      	str	r0, [r7, #12]
 8010880:	60b9      	str	r1, [r7, #8]
 8010882:	603b      	str	r3, [r7, #0]
 8010884:	4613      	mov	r3, r2
 8010886:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010888:	f7fb fa06 	bl	800bc98 <HAL_GetTick>
 801088c:	4602      	mov	r2, r0
 801088e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010890:	1a9b      	subs	r3, r3, r2
 8010892:	683a      	ldr	r2, [r7, #0]
 8010894:	4413      	add	r3, r2
 8010896:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010898:	f7fb f9fe 	bl	800bc98 <HAL_GetTick>
 801089c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801089e:	4b39      	ldr	r3, [pc, #228]	@ (8010984 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	015b      	lsls	r3, r3, #5
 80108a4:	0d1b      	lsrs	r3, r3, #20
 80108a6:	69fa      	ldr	r2, [r7, #28]
 80108a8:	fb02 f303 	mul.w	r3, r2, r3
 80108ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80108ae:	e054      	b.n	801095a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108b6:	d050      	beq.n	801095a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80108b8:	f7fb f9ee 	bl	800bc98 <HAL_GetTick>
 80108bc:	4602      	mov	r2, r0
 80108be:	69bb      	ldr	r3, [r7, #24]
 80108c0:	1ad3      	subs	r3, r2, r3
 80108c2:	69fa      	ldr	r2, [r7, #28]
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d902      	bls.n	80108ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80108c8:	69fb      	ldr	r3, [r7, #28]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d13d      	bne.n	801094a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	685a      	ldr	r2, [r3, #4]
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80108dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80108e6:	d111      	bne.n	801090c <SPI_WaitFlagStateUntilTimeout+0x94>
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	689b      	ldr	r3, [r3, #8]
 80108ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80108f0:	d004      	beq.n	80108fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	689b      	ldr	r3, [r3, #8]
 80108f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80108fa:	d107      	bne.n	801090c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	681a      	ldr	r2, [r3, #0]
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801090a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010914:	d10f      	bne.n	8010936 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	681a      	ldr	r2, [r3, #0]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010924:	601a      	str	r2, [r3, #0]
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	681a      	ldr	r2, [r3, #0]
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2201      	movs	r2, #1
 801093a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	2200      	movs	r2, #0
 8010942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8010946:	2303      	movs	r3, #3
 8010948:	e017      	b.n	801097a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d101      	bne.n	8010954 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010950:	2300      	movs	r3, #0
 8010952:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	3b01      	subs	r3, #1
 8010958:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	689a      	ldr	r2, [r3, #8]
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	4013      	ands	r3, r2
 8010964:	68ba      	ldr	r2, [r7, #8]
 8010966:	429a      	cmp	r2, r3
 8010968:	bf0c      	ite	eq
 801096a:	2301      	moveq	r3, #1
 801096c:	2300      	movne	r3, #0
 801096e:	b2db      	uxtb	r3, r3
 8010970:	461a      	mov	r2, r3
 8010972:	79fb      	ldrb	r3, [r7, #7]
 8010974:	429a      	cmp	r2, r3
 8010976:	d19b      	bne.n	80108b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010978:	2300      	movs	r3, #0
}
 801097a:	4618      	mov	r0, r3
 801097c:	3720      	adds	r7, #32
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	20000000 	.word	0x20000000

08010988 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b088      	sub	sp, #32
 801098c:	af02      	add	r7, sp, #8
 801098e:	60f8      	str	r0, [r7, #12]
 8010990:	60b9      	str	r1, [r7, #8]
 8010992:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010994:	4b1b      	ldr	r3, [pc, #108]	@ (8010a04 <SPI_EndRxTxTransaction+0x7c>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	4a1b      	ldr	r2, [pc, #108]	@ (8010a08 <SPI_EndRxTxTransaction+0x80>)
 801099a:	fba2 2303 	umull	r2, r3, r2, r3
 801099e:	0d5b      	lsrs	r3, r3, #21
 80109a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80109a4:	fb02 f303 	mul.w	r3, r2, r3
 80109a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	685b      	ldr	r3, [r3, #4]
 80109ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80109b2:	d112      	bne.n	80109da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	9300      	str	r3, [sp, #0]
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	2200      	movs	r2, #0
 80109bc:	2180      	movs	r1, #128	@ 0x80
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	f7ff ff5a 	bl	8010878 <SPI_WaitFlagStateUntilTimeout>
 80109c4:	4603      	mov	r3, r0
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d016      	beq.n	80109f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109ce:	f043 0220 	orr.w	r2, r3, #32
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80109d6:	2303      	movs	r3, #3
 80109d8:	e00f      	b.n	80109fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d00a      	beq.n	80109f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	3b01      	subs	r3, #1
 80109e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	689b      	ldr	r3, [r3, #8]
 80109ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80109f0:	2b80      	cmp	r3, #128	@ 0x80
 80109f2:	d0f2      	beq.n	80109da <SPI_EndRxTxTransaction+0x52>
 80109f4:	e000      	b.n	80109f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80109f6:	bf00      	nop
  }

  return HAL_OK;
 80109f8:	2300      	movs	r3, #0
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	3718      	adds	r7, #24
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	20000000 	.word	0x20000000
 8010a08:	165e9f81 	.word	0x165e9f81

08010a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d101      	bne.n	8010a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	e031      	b.n	8010a82 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8010a24:	b2db      	uxtb	r3, r3
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d106      	bne.n	8010a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f7f1 fd3c 	bl	80024b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2202      	movs	r2, #2
 8010a3c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	3304      	adds	r3, #4
 8010a48:	4619      	mov	r1, r3
 8010a4a:	4610      	mov	r0, r2
 8010a4c:	f000 fcd4 	bl	80113f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2201      	movs	r2, #1
 8010a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2201      	movs	r2, #1
 8010a64:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2201      	movs	r2, #1
 8010a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8010a80:	2300      	movs	r3, #0
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3708      	adds	r7, #8
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}
	...

08010a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b085      	sub	sp, #20
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	d001      	beq.n	8010aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	e03a      	b.n	8010b1a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2202      	movs	r2, #2
 8010aa8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	68da      	ldr	r2, [r3, #12]
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	f042 0201 	orr.w	r2, r2, #1
 8010aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ac4:	d00e      	beq.n	8010ae4 <HAL_TIM_Base_Start_IT+0x58>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	4a16      	ldr	r2, [pc, #88]	@ (8010b24 <HAL_TIM_Base_Start_IT+0x98>)
 8010acc:	4293      	cmp	r3, r2
 8010ace:	d009      	beq.n	8010ae4 <HAL_TIM_Base_Start_IT+0x58>
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	4a14      	ldr	r2, [pc, #80]	@ (8010b28 <HAL_TIM_Base_Start_IT+0x9c>)
 8010ad6:	4293      	cmp	r3, r2
 8010ad8:	d004      	beq.n	8010ae4 <HAL_TIM_Base_Start_IT+0x58>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	4a13      	ldr	r2, [pc, #76]	@ (8010b2c <HAL_TIM_Base_Start_IT+0xa0>)
 8010ae0:	4293      	cmp	r3, r2
 8010ae2:	d111      	bne.n	8010b08 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	f003 0307 	and.w	r3, r3, #7
 8010aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	2b06      	cmp	r3, #6
 8010af4:	d010      	beq.n	8010b18 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	681a      	ldr	r2, [r3, #0]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	f042 0201 	orr.w	r2, r2, #1
 8010b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b06:	e007      	b.n	8010b18 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	681a      	ldr	r2, [r3, #0]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	f042 0201 	orr.w	r2, r2, #1
 8010b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010b18:	2300      	movs	r3, #0
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3714      	adds	r7, #20
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bc80      	pop	{r7}
 8010b22:	4770      	bx	lr
 8010b24:	40000400 	.word	0x40000400
 8010b28:	40000800 	.word	0x40000800
 8010b2c:	40010800 	.word	0x40010800

08010b30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8010b30:	b480      	push	{r7}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	68da      	ldr	r2, [r3, #12]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	f022 0201 	bic.w	r2, r2, #1
 8010b46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	6a1a      	ldr	r2, [r3, #32]
 8010b4e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010b52:	4013      	ands	r3, r2
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d107      	bne.n	8010b68 <HAL_TIM_Base_Stop_IT+0x38>
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	681a      	ldr	r2, [r3, #0]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	f022 0201 	bic.w	r2, r2, #1
 8010b66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Return function status */
  return HAL_OK;
 8010b70:	2300      	movs	r3, #0
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	370c      	adds	r7, #12
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bc80      	pop	{r7}
 8010b7a:	4770      	bx	lr

08010b7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d101      	bne.n	8010b8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e031      	b.n	8010bf2 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8010b94:	b2db      	uxtb	r3, r3
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d106      	bne.n	8010ba8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f000 f829 	bl	8010bfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2202      	movs	r2, #2
 8010bac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681a      	ldr	r2, [r3, #0]
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	3304      	adds	r3, #4
 8010bb8:	4619      	mov	r1, r3
 8010bba:	4610      	mov	r0, r2
 8010bbc:	f000 fc1c 	bl	80113f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2201      	movs	r2, #1
 8010bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2201      	movs	r2, #1
 8010bcc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2201      	movs	r2, #1
 8010bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2201      	movs	r2, #1
 8010be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2201      	movs	r2, #1
 8010bec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8010bf0:	2300      	movs	r3, #0
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3708      	adds	r7, #8
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}

08010bfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010bfa:	b480      	push	{r7}
 8010bfc:	b083      	sub	sp, #12
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010c02:	bf00      	nop
 8010c04:	370c      	adds	r7, #12
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bc80      	pop	{r7}
 8010c0a:	4770      	bx	lr

08010c0c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010c16:	2300      	movs	r3, #0
 8010c18:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d109      	bne.n	8010c34 <HAL_TIM_PWM_Start_IT+0x28>
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	2b01      	cmp	r3, #1
 8010c2a:	bf14      	ite	ne
 8010c2c:	2301      	movne	r3, #1
 8010c2e:	2300      	moveq	r3, #0
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	e022      	b.n	8010c7a <HAL_TIM_PWM_Start_IT+0x6e>
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	2b04      	cmp	r3, #4
 8010c38:	d109      	bne.n	8010c4e <HAL_TIM_PWM_Start_IT+0x42>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010c40:	b2db      	uxtb	r3, r3
 8010c42:	2b01      	cmp	r3, #1
 8010c44:	bf14      	ite	ne
 8010c46:	2301      	movne	r3, #1
 8010c48:	2300      	moveq	r3, #0
 8010c4a:	b2db      	uxtb	r3, r3
 8010c4c:	e015      	b.n	8010c7a <HAL_TIM_PWM_Start_IT+0x6e>
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	2b08      	cmp	r3, #8
 8010c52:	d109      	bne.n	8010c68 <HAL_TIM_PWM_Start_IT+0x5c>
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010c5a:	b2db      	uxtb	r3, r3
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	bf14      	ite	ne
 8010c60:	2301      	movne	r3, #1
 8010c62:	2300      	moveq	r3, #0
 8010c64:	b2db      	uxtb	r3, r3
 8010c66:	e008      	b.n	8010c7a <HAL_TIM_PWM_Start_IT+0x6e>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010c6e:	b2db      	uxtb	r3, r3
 8010c70:	2b01      	cmp	r3, #1
 8010c72:	bf14      	ite	ne
 8010c74:	2301      	movne	r3, #1
 8010c76:	2300      	moveq	r3, #0
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d001      	beq.n	8010c82 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8010c7e:	2301      	movs	r3, #1
 8010c80:	e09c      	b.n	8010dbc <HAL_TIM_PWM_Start_IT+0x1b0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d104      	bne.n	8010c92 <HAL_TIM_PWM_Start_IT+0x86>
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2202      	movs	r2, #2
 8010c8c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8010c90:	e013      	b.n	8010cba <HAL_TIM_PWM_Start_IT+0xae>
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	2b04      	cmp	r3, #4
 8010c96:	d104      	bne.n	8010ca2 <HAL_TIM_PWM_Start_IT+0x96>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2202      	movs	r2, #2
 8010c9c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8010ca0:	e00b      	b.n	8010cba <HAL_TIM_PWM_Start_IT+0xae>
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	2b08      	cmp	r3, #8
 8010ca6:	d104      	bne.n	8010cb2 <HAL_TIM_PWM_Start_IT+0xa6>
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2202      	movs	r2, #2
 8010cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010cb0:	e003      	b.n	8010cba <HAL_TIM_PWM_Start_IT+0xae>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2202      	movs	r2, #2
 8010cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	2b0c      	cmp	r3, #12
 8010cbe:	d841      	bhi.n	8010d44 <HAL_TIM_PWM_Start_IT+0x138>
 8010cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8010cc8 <HAL_TIM_PWM_Start_IT+0xbc>)
 8010cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc6:	bf00      	nop
 8010cc8:	08010cfd 	.word	0x08010cfd
 8010ccc:	08010d45 	.word	0x08010d45
 8010cd0:	08010d45 	.word	0x08010d45
 8010cd4:	08010d45 	.word	0x08010d45
 8010cd8:	08010d0f 	.word	0x08010d0f
 8010cdc:	08010d45 	.word	0x08010d45
 8010ce0:	08010d45 	.word	0x08010d45
 8010ce4:	08010d45 	.word	0x08010d45
 8010ce8:	08010d21 	.word	0x08010d21
 8010cec:	08010d45 	.word	0x08010d45
 8010cf0:	08010d45 	.word	0x08010d45
 8010cf4:	08010d45 	.word	0x08010d45
 8010cf8:	08010d33 	.word	0x08010d33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	68da      	ldr	r2, [r3, #12]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	f042 0202 	orr.w	r2, r2, #2
 8010d0a:	60da      	str	r2, [r3, #12]
      break;
 8010d0c:	e01d      	b.n	8010d4a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	68da      	ldr	r2, [r3, #12]
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	f042 0204 	orr.w	r2, r2, #4
 8010d1c:	60da      	str	r2, [r3, #12]
      break;
 8010d1e:	e014      	b.n	8010d4a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	68da      	ldr	r2, [r3, #12]
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f042 0208 	orr.w	r2, r2, #8
 8010d2e:	60da      	str	r2, [r3, #12]
      break;
 8010d30:	e00b      	b.n	8010d4a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	68da      	ldr	r2, [r3, #12]
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	f042 0210 	orr.w	r2, r2, #16
 8010d40:	60da      	str	r2, [r3, #12]
      break;
 8010d42:	e002      	b.n	8010d4a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8010d44:	2301      	movs	r3, #1
 8010d46:	73fb      	strb	r3, [r7, #15]
      break;
 8010d48:	bf00      	nop
  }

  if (status == HAL_OK)
 8010d4a:	7bfb      	ldrb	r3, [r7, #15]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d134      	bne.n	8010dba <HAL_TIM_PWM_Start_IT+0x1ae>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	2201      	movs	r2, #1
 8010d56:	6839      	ldr	r1, [r7, #0]
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f000 fd48 	bl	80117ee <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010d66:	d00e      	beq.n	8010d86 <HAL_TIM_PWM_Start_IT+0x17a>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	4a15      	ldr	r2, [pc, #84]	@ (8010dc4 <HAL_TIM_PWM_Start_IT+0x1b8>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d009      	beq.n	8010d86 <HAL_TIM_PWM_Start_IT+0x17a>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	4a14      	ldr	r2, [pc, #80]	@ (8010dc8 <HAL_TIM_PWM_Start_IT+0x1bc>)
 8010d78:	4293      	cmp	r3, r2
 8010d7a:	d004      	beq.n	8010d86 <HAL_TIM_PWM_Start_IT+0x17a>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	4a12      	ldr	r2, [pc, #72]	@ (8010dcc <HAL_TIM_PWM_Start_IT+0x1c0>)
 8010d82:	4293      	cmp	r3, r2
 8010d84:	d111      	bne.n	8010daa <HAL_TIM_PWM_Start_IT+0x19e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	689b      	ldr	r3, [r3, #8]
 8010d8c:	f003 0307 	and.w	r3, r3, #7
 8010d90:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	2b06      	cmp	r3, #6
 8010d96:	d010      	beq.n	8010dba <HAL_TIM_PWM_Start_IT+0x1ae>
      {
        __HAL_TIM_ENABLE(htim);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	681a      	ldr	r2, [r3, #0]
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	f042 0201 	orr.w	r2, r2, #1
 8010da6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010da8:	e007      	b.n	8010dba <HAL_TIM_PWM_Start_IT+0x1ae>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	681a      	ldr	r2, [r3, #0]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	f042 0201 	orr.w	r2, r2, #1
 8010db8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8010dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3710      	adds	r7, #16
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	40000400 	.word	0x40000400
 8010dc8:	40000800 	.word	0x40000800
 8010dcc:	40010800 	.word	0x40010800

08010dd0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	2b0c      	cmp	r3, #12
 8010de2:	d841      	bhi.n	8010e68 <HAL_TIM_PWM_Stop_IT+0x98>
 8010de4:	a201      	add	r2, pc, #4	@ (adr r2, 8010dec <HAL_TIM_PWM_Stop_IT+0x1c>)
 8010de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dea:	bf00      	nop
 8010dec:	08010e21 	.word	0x08010e21
 8010df0:	08010e69 	.word	0x08010e69
 8010df4:	08010e69 	.word	0x08010e69
 8010df8:	08010e69 	.word	0x08010e69
 8010dfc:	08010e33 	.word	0x08010e33
 8010e00:	08010e69 	.word	0x08010e69
 8010e04:	08010e69 	.word	0x08010e69
 8010e08:	08010e69 	.word	0x08010e69
 8010e0c:	08010e45 	.word	0x08010e45
 8010e10:	08010e69 	.word	0x08010e69
 8010e14:	08010e69 	.word	0x08010e69
 8010e18:	08010e69 	.word	0x08010e69
 8010e1c:	08010e57 	.word	0x08010e57
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	68da      	ldr	r2, [r3, #12]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	f022 0202 	bic.w	r2, r2, #2
 8010e2e:	60da      	str	r2, [r3, #12]
      break;
 8010e30:	e01d      	b.n	8010e6e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	68da      	ldr	r2, [r3, #12]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	f022 0204 	bic.w	r2, r2, #4
 8010e40:	60da      	str	r2, [r3, #12]
      break;
 8010e42:	e014      	b.n	8010e6e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	68da      	ldr	r2, [r3, #12]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	f022 0208 	bic.w	r2, r2, #8
 8010e52:	60da      	str	r2, [r3, #12]
      break;
 8010e54:	e00b      	b.n	8010e6e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	68da      	ldr	r2, [r3, #12]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	f022 0210 	bic.w	r2, r2, #16
 8010e64:	60da      	str	r2, [r3, #12]
      break;
 8010e66:	e002      	b.n	8010e6e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8010e68:	2301      	movs	r3, #1
 8010e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8010e6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8010e6e:	7bfb      	ldrb	r3, [r7, #15]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d132      	bne.n	8010eda <HAL_TIM_PWM_Stop_IT+0x10a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	2200      	movs	r2, #0
 8010e7a:	6839      	ldr	r1, [r7, #0]
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f000 fcb6 	bl	80117ee <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	6a1a      	ldr	r2, [r3, #32]
 8010e88:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010e8c:	4013      	ands	r3, r2
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d107      	bne.n	8010ea2 <HAL_TIM_PWM_Stop_IT+0xd2>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	f022 0201 	bic.w	r2, r2, #1
 8010ea0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d104      	bne.n	8010eb2 <HAL_TIM_PWM_Stop_IT+0xe2>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2201      	movs	r2, #1
 8010eac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8010eb0:	e013      	b.n	8010eda <HAL_TIM_PWM_Stop_IT+0x10a>
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	2b04      	cmp	r3, #4
 8010eb6:	d104      	bne.n	8010ec2 <HAL_TIM_PWM_Stop_IT+0xf2>
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2201      	movs	r2, #1
 8010ebc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8010ec0:	e00b      	b.n	8010eda <HAL_TIM_PWM_Stop_IT+0x10a>
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	2b08      	cmp	r3, #8
 8010ec6:	d104      	bne.n	8010ed2 <HAL_TIM_PWM_Stop_IT+0x102>
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2201      	movs	r2, #1
 8010ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010ed0:	e003      	b.n	8010eda <HAL_TIM_PWM_Stop_IT+0x10a>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2201      	movs	r2, #1
 8010ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  /* Return function status */
  return status;
 8010eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3710      	adds	r7, #16
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	691b      	ldr	r3, [r3, #16]
 8010ef2:	f003 0302 	and.w	r3, r3, #2
 8010ef6:	2b02      	cmp	r3, #2
 8010ef8:	d122      	bne.n	8010f40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	68db      	ldr	r3, [r3, #12]
 8010f00:	f003 0302 	and.w	r3, r3, #2
 8010f04:	2b02      	cmp	r3, #2
 8010f06:	d11b      	bne.n	8010f40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	f06f 0202 	mvn.w	r2, #2
 8010f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2201      	movs	r2, #1
 8010f16:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	699b      	ldr	r3, [r3, #24]
 8010f1e:	f003 0303 	and.w	r3, r3, #3
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d003      	beq.n	8010f2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f000 fa4a 	bl	80113c0 <HAL_TIM_IC_CaptureCallback>
 8010f2c:	e005      	b.n	8010f3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f000 fa3d 	bl	80113ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f000 fa4c 	bl	80113d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	691b      	ldr	r3, [r3, #16]
 8010f46:	f003 0304 	and.w	r3, r3, #4
 8010f4a:	2b04      	cmp	r3, #4
 8010f4c:	d122      	bne.n	8010f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	68db      	ldr	r3, [r3, #12]
 8010f54:	f003 0304 	and.w	r3, r3, #4
 8010f58:	2b04      	cmp	r3, #4
 8010f5a:	d11b      	bne.n	8010f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	f06f 0204 	mvn.w	r2, #4
 8010f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2202      	movs	r2, #2
 8010f6a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	699b      	ldr	r3, [r3, #24]
 8010f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d003      	beq.n	8010f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f000 fa20 	bl	80113c0 <HAL_TIM_IC_CaptureCallback>
 8010f80:	e005      	b.n	8010f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f000 fa13 	bl	80113ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f000 fa22 	bl	80113d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2200      	movs	r2, #0
 8010f92:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	691b      	ldr	r3, [r3, #16]
 8010f9a:	f003 0308 	and.w	r3, r3, #8
 8010f9e:	2b08      	cmp	r3, #8
 8010fa0:	d122      	bne.n	8010fe8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	68db      	ldr	r3, [r3, #12]
 8010fa8:	f003 0308 	and.w	r3, r3, #8
 8010fac:	2b08      	cmp	r3, #8
 8010fae:	d11b      	bne.n	8010fe8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f06f 0208 	mvn.w	r2, #8
 8010fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2204      	movs	r2, #4
 8010fbe:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	69db      	ldr	r3, [r3, #28]
 8010fc6:	f003 0303 	and.w	r3, r3, #3
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d003      	beq.n	8010fd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f000 f9f6 	bl	80113c0 <HAL_TIM_IC_CaptureCallback>
 8010fd4:	e005      	b.n	8010fe2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 f9e9 	bl	80113ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f000 f9f8 	bl	80113d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	691b      	ldr	r3, [r3, #16]
 8010fee:	f003 0310 	and.w	r3, r3, #16
 8010ff2:	2b10      	cmp	r3, #16
 8010ff4:	d122      	bne.n	801103c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	f003 0310 	and.w	r3, r3, #16
 8011000:	2b10      	cmp	r3, #16
 8011002:	d11b      	bne.n	801103c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	f06f 0210 	mvn.w	r2, #16
 801100c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	2208      	movs	r2, #8
 8011012:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	69db      	ldr	r3, [r3, #28]
 801101a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801101e:	2b00      	cmp	r3, #0
 8011020:	d003      	beq.n	801102a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f000 f9cc 	bl	80113c0 <HAL_TIM_IC_CaptureCallback>
 8011028:	e005      	b.n	8011036 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f000 f9bf 	bl	80113ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f000 f9ce 	bl	80113d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2200      	movs	r2, #0
 801103a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	691b      	ldr	r3, [r3, #16]
 8011042:	f003 0301 	and.w	r3, r3, #1
 8011046:	2b01      	cmp	r3, #1
 8011048:	d10e      	bne.n	8011068 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	68db      	ldr	r3, [r3, #12]
 8011050:	f003 0301 	and.w	r3, r3, #1
 8011054:	2b01      	cmp	r3, #1
 8011056:	d107      	bne.n	8011068 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	f06f 0201 	mvn.w	r2, #1
 8011060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f7f1 fc0c 	bl	8002880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	691b      	ldr	r3, [r3, #16]
 801106e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011072:	2b40      	cmp	r3, #64	@ 0x40
 8011074:	d10e      	bne.n	8011094 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011080:	2b40      	cmp	r3, #64	@ 0x40
 8011082:	d107      	bne.n	8011094 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801108c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f000 f9a8 	bl	80113e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011094:	bf00      	nop
 8011096:	3708      	adds	r7, #8
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b086      	sub	sp, #24
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80110a8:	2300      	movs	r3, #0
 80110aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d101      	bne.n	80110ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80110b6:	2302      	movs	r3, #2
 80110b8:	e0ae      	b.n	8011218 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	2201      	movs	r2, #1
 80110be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2b0c      	cmp	r3, #12
 80110c6:	f200 809f 	bhi.w	8011208 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80110ca:	a201      	add	r2, pc, #4	@ (adr r2, 80110d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80110cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110d0:	08011105 	.word	0x08011105
 80110d4:	08011209 	.word	0x08011209
 80110d8:	08011209 	.word	0x08011209
 80110dc:	08011209 	.word	0x08011209
 80110e0:	08011145 	.word	0x08011145
 80110e4:	08011209 	.word	0x08011209
 80110e8:	08011209 	.word	0x08011209
 80110ec:	08011209 	.word	0x08011209
 80110f0:	08011187 	.word	0x08011187
 80110f4:	08011209 	.word	0x08011209
 80110f8:	08011209 	.word	0x08011209
 80110fc:	08011209 	.word	0x08011209
 8011100:	080111c7 	.word	0x080111c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	68b9      	ldr	r1, [r7, #8]
 801110a:	4618      	mov	r0, r3
 801110c:	f000 f9e4 	bl	80114d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	699a      	ldr	r2, [r3, #24]
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	f042 0208 	orr.w	r2, r2, #8
 801111e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	699a      	ldr	r2, [r3, #24]
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	f022 0204 	bic.w	r2, r2, #4
 801112e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	6999      	ldr	r1, [r3, #24]
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	68da      	ldr	r2, [r3, #12]
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	430a      	orrs	r2, r1
 8011140:	619a      	str	r2, [r3, #24]
      break;
 8011142:	e064      	b.n	801120e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	68b9      	ldr	r1, [r7, #8]
 801114a:	4618      	mov	r0, r3
 801114c:	f000 fa00 	bl	8011550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	699a      	ldr	r2, [r3, #24]
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801115e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	699a      	ldr	r2, [r3, #24]
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801116e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	6999      	ldr	r1, [r3, #24]
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	021a      	lsls	r2, r3, #8
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	430a      	orrs	r2, r1
 8011182:	619a      	str	r2, [r3, #24]
      break;
 8011184:	e043      	b.n	801120e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	68b9      	ldr	r1, [r7, #8]
 801118c:	4618      	mov	r0, r3
 801118e:	f000 fa1d 	bl	80115cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	69da      	ldr	r2, [r3, #28]
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	f042 0208 	orr.w	r2, r2, #8
 80111a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	69da      	ldr	r2, [r3, #28]
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	f022 0204 	bic.w	r2, r2, #4
 80111b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	69d9      	ldr	r1, [r3, #28]
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	68da      	ldr	r2, [r3, #12]
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	430a      	orrs	r2, r1
 80111c2:	61da      	str	r2, [r3, #28]
      break;
 80111c4:	e023      	b.n	801120e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	68b9      	ldr	r1, [r7, #8]
 80111cc:	4618      	mov	r0, r3
 80111ce:	f000 fa3a 	bl	8011646 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	69da      	ldr	r2, [r3, #28]
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80111e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	69da      	ldr	r2, [r3, #28]
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80111f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	69d9      	ldr	r1, [r3, #28]
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	021a      	lsls	r2, r3, #8
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	430a      	orrs	r2, r1
 8011204:	61da      	str	r2, [r3, #28]
      break;
 8011206:	e002      	b.n	801120e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8011208:	2301      	movs	r3, #1
 801120a:	75fb      	strb	r3, [r7, #23]
      break;
 801120c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	2200      	movs	r2, #0
 8011212:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8011216:	7dfb      	ldrb	r3, [r7, #23]
}
 8011218:	4618      	mov	r0, r3
 801121a:	3718      	adds	r7, #24
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}

08011220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b084      	sub	sp, #16
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801122a:	2300      	movs	r3, #0
 801122c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011234:	2b01      	cmp	r3, #1
 8011236:	d101      	bne.n	801123c <HAL_TIM_ConfigClockSource+0x1c>
 8011238:	2302      	movs	r3, #2
 801123a:	e0b4      	b.n	80113a6 <HAL_TIM_ConfigClockSource+0x186>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2201      	movs	r2, #1
 8011240:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2202      	movs	r2, #2
 8011248:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	689b      	ldr	r3, [r3, #8]
 8011252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801125a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	68ba      	ldr	r2, [r7, #8]
 801126a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011274:	d03e      	beq.n	80112f4 <HAL_TIM_ConfigClockSource+0xd4>
 8011276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801127a:	f200 8087 	bhi.w	801138c <HAL_TIM_ConfigClockSource+0x16c>
 801127e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011282:	f000 8086 	beq.w	8011392 <HAL_TIM_ConfigClockSource+0x172>
 8011286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801128a:	d87f      	bhi.n	801138c <HAL_TIM_ConfigClockSource+0x16c>
 801128c:	2b70      	cmp	r3, #112	@ 0x70
 801128e:	d01a      	beq.n	80112c6 <HAL_TIM_ConfigClockSource+0xa6>
 8011290:	2b70      	cmp	r3, #112	@ 0x70
 8011292:	d87b      	bhi.n	801138c <HAL_TIM_ConfigClockSource+0x16c>
 8011294:	2b60      	cmp	r3, #96	@ 0x60
 8011296:	d050      	beq.n	801133a <HAL_TIM_ConfigClockSource+0x11a>
 8011298:	2b60      	cmp	r3, #96	@ 0x60
 801129a:	d877      	bhi.n	801138c <HAL_TIM_ConfigClockSource+0x16c>
 801129c:	2b50      	cmp	r3, #80	@ 0x50
 801129e:	d03c      	beq.n	801131a <HAL_TIM_ConfigClockSource+0xfa>
 80112a0:	2b50      	cmp	r3, #80	@ 0x50
 80112a2:	d873      	bhi.n	801138c <HAL_TIM_ConfigClockSource+0x16c>
 80112a4:	2b40      	cmp	r3, #64	@ 0x40
 80112a6:	d058      	beq.n	801135a <HAL_TIM_ConfigClockSource+0x13a>
 80112a8:	2b40      	cmp	r3, #64	@ 0x40
 80112aa:	d86f      	bhi.n	801138c <HAL_TIM_ConfigClockSource+0x16c>
 80112ac:	2b30      	cmp	r3, #48	@ 0x30
 80112ae:	d064      	beq.n	801137a <HAL_TIM_ConfigClockSource+0x15a>
 80112b0:	2b30      	cmp	r3, #48	@ 0x30
 80112b2:	d86b      	bhi.n	801138c <HAL_TIM_ConfigClockSource+0x16c>
 80112b4:	2b20      	cmp	r3, #32
 80112b6:	d060      	beq.n	801137a <HAL_TIM_ConfigClockSource+0x15a>
 80112b8:	2b20      	cmp	r3, #32
 80112ba:	d867      	bhi.n	801138c <HAL_TIM_ConfigClockSource+0x16c>
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d05c      	beq.n	801137a <HAL_TIM_ConfigClockSource+0x15a>
 80112c0:	2b10      	cmp	r3, #16
 80112c2:	d05a      	beq.n	801137a <HAL_TIM_ConfigClockSource+0x15a>
 80112c4:	e062      	b.n	801138c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80112ce:	683b      	ldr	r3, [r7, #0]
 80112d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80112d6:	f000 fa6b 	bl	80117b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	689b      	ldr	r3, [r3, #8]
 80112e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80112e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	68ba      	ldr	r2, [r7, #8]
 80112f0:	609a      	str	r2, [r3, #8]
      break;
 80112f2:	e04f      	b.n	8011394 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011304:	f000 fa54 	bl	80117b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	689a      	ldr	r2, [r3, #8]
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011316:	609a      	str	r2, [r3, #8]
      break;
 8011318:	e03c      	b.n	8011394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011326:	461a      	mov	r2, r3
 8011328:	f000 f9cb 	bl	80116c2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	2150      	movs	r1, #80	@ 0x50
 8011332:	4618      	mov	r0, r3
 8011334:	f000 fa22 	bl	801177c <TIM_ITRx_SetConfig>
      break;
 8011338:	e02c      	b.n	8011394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011346:	461a      	mov	r2, r3
 8011348:	f000 f9e9 	bl	801171e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	2160      	movs	r1, #96	@ 0x60
 8011352:	4618      	mov	r0, r3
 8011354:	f000 fa12 	bl	801177c <TIM_ITRx_SetConfig>
      break;
 8011358:	e01c      	b.n	8011394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011366:	461a      	mov	r2, r3
 8011368:	f000 f9ab 	bl	80116c2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2140      	movs	r1, #64	@ 0x40
 8011372:	4618      	mov	r0, r3
 8011374:	f000 fa02 	bl	801177c <TIM_ITRx_SetConfig>
      break;
 8011378:	e00c      	b.n	8011394 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681a      	ldr	r2, [r3, #0]
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	4619      	mov	r1, r3
 8011384:	4610      	mov	r0, r2
 8011386:	f000 f9f9 	bl	801177c <TIM_ITRx_SetConfig>
      break;
 801138a:	e003      	b.n	8011394 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801138c:	2301      	movs	r3, #1
 801138e:	73fb      	strb	r3, [r7, #15]
      break;
 8011390:	e000      	b.n	8011394 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8011392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2201      	movs	r2, #1
 8011398:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2200      	movs	r2, #0
 80113a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80113a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	3710      	adds	r7, #16
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}

080113ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80113ae:	b480      	push	{r7}
 80113b0:	b083      	sub	sp, #12
 80113b2:	af00      	add	r7, sp, #0
 80113b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80113b6:	bf00      	nop
 80113b8:	370c      	adds	r7, #12
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bc80      	pop	{r7}
 80113be:	4770      	bx	lr

080113c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80113c8:	bf00      	nop
 80113ca:	370c      	adds	r7, #12
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bc80      	pop	{r7}
 80113d0:	4770      	bx	lr

080113d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80113d2:	b480      	push	{r7}
 80113d4:	b083      	sub	sp, #12
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80113da:	bf00      	nop
 80113dc:	370c      	adds	r7, #12
 80113de:	46bd      	mov	sp, r7
 80113e0:	bc80      	pop	{r7}
 80113e2:	4770      	bx	lr

080113e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b083      	sub	sp, #12
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80113ec:	bf00      	nop
 80113ee:	370c      	adds	r7, #12
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bc80      	pop	{r7}
 80113f4:	4770      	bx	lr
	...

080113f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80113f8:	b480      	push	{r7}
 80113fa:	b085      	sub	sp, #20
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801140e:	d00f      	beq.n	8011430 <TIM_Base_SetConfig+0x38>
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	4a2b      	ldr	r2, [pc, #172]	@ (80114c0 <TIM_Base_SetConfig+0xc8>)
 8011414:	4293      	cmp	r3, r2
 8011416:	d00b      	beq.n	8011430 <TIM_Base_SetConfig+0x38>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	4a2a      	ldr	r2, [pc, #168]	@ (80114c4 <TIM_Base_SetConfig+0xcc>)
 801141c:	4293      	cmp	r3, r2
 801141e:	d007      	beq.n	8011430 <TIM_Base_SetConfig+0x38>
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	4a29      	ldr	r2, [pc, #164]	@ (80114c8 <TIM_Base_SetConfig+0xd0>)
 8011424:	4293      	cmp	r3, r2
 8011426:	d003      	beq.n	8011430 <TIM_Base_SetConfig+0x38>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	4a28      	ldr	r2, [pc, #160]	@ (80114cc <TIM_Base_SetConfig+0xd4>)
 801142c:	4293      	cmp	r3, r2
 801142e:	d108      	bne.n	8011442 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	685b      	ldr	r3, [r3, #4]
 801143c:	68fa      	ldr	r2, [r7, #12]
 801143e:	4313      	orrs	r3, r2
 8011440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011448:	d017      	beq.n	801147a <TIM_Base_SetConfig+0x82>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	4a1c      	ldr	r2, [pc, #112]	@ (80114c0 <TIM_Base_SetConfig+0xc8>)
 801144e:	4293      	cmp	r3, r2
 8011450:	d013      	beq.n	801147a <TIM_Base_SetConfig+0x82>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	4a1b      	ldr	r2, [pc, #108]	@ (80114c4 <TIM_Base_SetConfig+0xcc>)
 8011456:	4293      	cmp	r3, r2
 8011458:	d00f      	beq.n	801147a <TIM_Base_SetConfig+0x82>
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	4a1a      	ldr	r2, [pc, #104]	@ (80114c8 <TIM_Base_SetConfig+0xd0>)
 801145e:	4293      	cmp	r3, r2
 8011460:	d00b      	beq.n	801147a <TIM_Base_SetConfig+0x82>
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	4a19      	ldr	r2, [pc, #100]	@ (80114cc <TIM_Base_SetConfig+0xd4>)
 8011466:	4293      	cmp	r3, r2
 8011468:	d007      	beq.n	801147a <TIM_Base_SetConfig+0x82>
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	4a18      	ldr	r2, [pc, #96]	@ (80114d0 <TIM_Base_SetConfig+0xd8>)
 801146e:	4293      	cmp	r3, r2
 8011470:	d003      	beq.n	801147a <TIM_Base_SetConfig+0x82>
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	4a17      	ldr	r2, [pc, #92]	@ (80114d4 <TIM_Base_SetConfig+0xdc>)
 8011476:	4293      	cmp	r3, r2
 8011478:	d108      	bne.n	801148c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	68db      	ldr	r3, [r3, #12]
 8011486:	68fa      	ldr	r2, [r7, #12]
 8011488:	4313      	orrs	r3, r2
 801148a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	691b      	ldr	r3, [r3, #16]
 8011496:	4313      	orrs	r3, r2
 8011498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	68fa      	ldr	r2, [r7, #12]
 801149e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	689a      	ldr	r2, [r3, #8]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	681a      	ldr	r2, [r3, #0]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2201      	movs	r2, #1
 80114b4:	615a      	str	r2, [r3, #20]
}
 80114b6:	bf00      	nop
 80114b8:	3714      	adds	r7, #20
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bc80      	pop	{r7}
 80114be:	4770      	bx	lr
 80114c0:	40000400 	.word	0x40000400
 80114c4:	40000800 	.word	0x40000800
 80114c8:	40000c00 	.word	0x40000c00
 80114cc:	40010800 	.word	0x40010800
 80114d0:	40010c00 	.word	0x40010c00
 80114d4:	40011000 	.word	0x40011000

080114d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80114d8:	b480      	push	{r7}
 80114da:	b087      	sub	sp, #28
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6a1b      	ldr	r3, [r3, #32]
 80114e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6a1b      	ldr	r3, [r3, #32]
 80114ec:	f023 0201 	bic.w	r2, r3, #1
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	699b      	ldr	r3, [r3, #24]
 80114fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f023 0303 	bic.w	r3, r3, #3
 801150e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	68fa      	ldr	r2, [r7, #12]
 8011516:	4313      	orrs	r3, r2
 8011518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	f023 0302 	bic.w	r3, r3, #2
 8011520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	689b      	ldr	r3, [r3, #8]
 8011526:	697a      	ldr	r2, [r7, #20]
 8011528:	4313      	orrs	r3, r2
 801152a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	693a      	ldr	r2, [r7, #16]
 8011530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	68fa      	ldr	r2, [r7, #12]
 8011536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	685a      	ldr	r2, [r3, #4]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	697a      	ldr	r2, [r7, #20]
 8011544:	621a      	str	r2, [r3, #32]
}
 8011546:	bf00      	nop
 8011548:	371c      	adds	r7, #28
 801154a:	46bd      	mov	sp, r7
 801154c:	bc80      	pop	{r7}
 801154e:	4770      	bx	lr

08011550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011550:	b480      	push	{r7}
 8011552:	b087      	sub	sp, #28
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6a1b      	ldr	r3, [r3, #32]
 801155e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6a1b      	ldr	r3, [r3, #32]
 8011564:	f023 0210 	bic.w	r2, r3, #16
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	685b      	ldr	r3, [r3, #4]
 8011570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	699b      	ldr	r3, [r3, #24]
 8011576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801157e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	021b      	lsls	r3, r3, #8
 801158e:	68fa      	ldr	r2, [r7, #12]
 8011590:	4313      	orrs	r3, r2
 8011592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	f023 0320 	bic.w	r3, r3, #32
 801159a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	689b      	ldr	r3, [r3, #8]
 80115a0:	011b      	lsls	r3, r3, #4
 80115a2:	697a      	ldr	r2, [r7, #20]
 80115a4:	4313      	orrs	r3, r2
 80115a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	693a      	ldr	r2, [r7, #16]
 80115ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	68fa      	ldr	r2, [r7, #12]
 80115b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	685a      	ldr	r2, [r3, #4]
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	697a      	ldr	r2, [r7, #20]
 80115c0:	621a      	str	r2, [r3, #32]
}
 80115c2:	bf00      	nop
 80115c4:	371c      	adds	r7, #28
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bc80      	pop	{r7}
 80115ca:	4770      	bx	lr

080115cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80115cc:	b480      	push	{r7}
 80115ce:	b087      	sub	sp, #28
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6a1b      	ldr	r3, [r3, #32]
 80115da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6a1b      	ldr	r3, [r3, #32]
 80115e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	69db      	ldr	r3, [r3, #28]
 80115f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f023 0303 	bic.w	r3, r3, #3
 8011602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	68fa      	ldr	r2, [r7, #12]
 801160a:	4313      	orrs	r3, r2
 801160c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	689b      	ldr	r3, [r3, #8]
 801161a:	021b      	lsls	r3, r3, #8
 801161c:	697a      	ldr	r2, [r7, #20]
 801161e:	4313      	orrs	r3, r2
 8011620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	693a      	ldr	r2, [r7, #16]
 8011626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	68fa      	ldr	r2, [r7, #12]
 801162c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	685a      	ldr	r2, [r3, #4]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	697a      	ldr	r2, [r7, #20]
 801163a:	621a      	str	r2, [r3, #32]
}
 801163c:	bf00      	nop
 801163e:	371c      	adds	r7, #28
 8011640:	46bd      	mov	sp, r7
 8011642:	bc80      	pop	{r7}
 8011644:	4770      	bx	lr

08011646 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011646:	b480      	push	{r7}
 8011648:	b087      	sub	sp, #28
 801164a:	af00      	add	r7, sp, #0
 801164c:	6078      	str	r0, [r7, #4]
 801164e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6a1b      	ldr	r3, [r3, #32]
 8011654:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6a1b      	ldr	r3, [r3, #32]
 801165a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	69db      	ldr	r3, [r3, #28]
 801166c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011674:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801167c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	021b      	lsls	r3, r3, #8
 8011684:	68fa      	ldr	r2, [r7, #12]
 8011686:	4313      	orrs	r3, r2
 8011688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	689b      	ldr	r3, [r3, #8]
 8011696:	031b      	lsls	r3, r3, #12
 8011698:	697a      	ldr	r2, [r7, #20]
 801169a:	4313      	orrs	r3, r2
 801169c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	693a      	ldr	r2, [r7, #16]
 80116a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	68fa      	ldr	r2, [r7, #12]
 80116a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	685a      	ldr	r2, [r3, #4]
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	697a      	ldr	r2, [r7, #20]
 80116b6:	621a      	str	r2, [r3, #32]
}
 80116b8:	bf00      	nop
 80116ba:	371c      	adds	r7, #28
 80116bc:	46bd      	mov	sp, r7
 80116be:	bc80      	pop	{r7}
 80116c0:	4770      	bx	lr

080116c2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80116c2:	b480      	push	{r7}
 80116c4:	b087      	sub	sp, #28
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	60f8      	str	r0, [r7, #12]
 80116ca:	60b9      	str	r1, [r7, #8]
 80116cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	6a1b      	ldr	r3, [r3, #32]
 80116d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	6a1b      	ldr	r3, [r3, #32]
 80116d8:	f023 0201 	bic.w	r2, r3, #1
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	699b      	ldr	r3, [r3, #24]
 80116e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80116ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	011b      	lsls	r3, r3, #4
 80116f2:	693a      	ldr	r2, [r7, #16]
 80116f4:	4313      	orrs	r3, r2
 80116f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	f023 030a 	bic.w	r3, r3, #10
 80116fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011700:	697a      	ldr	r2, [r7, #20]
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	4313      	orrs	r3, r2
 8011706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	693a      	ldr	r2, [r7, #16]
 801170c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	697a      	ldr	r2, [r7, #20]
 8011712:	621a      	str	r2, [r3, #32]
}
 8011714:	bf00      	nop
 8011716:	371c      	adds	r7, #28
 8011718:	46bd      	mov	sp, r7
 801171a:	bc80      	pop	{r7}
 801171c:	4770      	bx	lr

0801171e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801171e:	b480      	push	{r7}
 8011720:	b087      	sub	sp, #28
 8011722:	af00      	add	r7, sp, #0
 8011724:	60f8      	str	r0, [r7, #12]
 8011726:	60b9      	str	r1, [r7, #8]
 8011728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	6a1b      	ldr	r3, [r3, #32]
 801172e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	6a1b      	ldr	r3, [r3, #32]
 8011734:	f023 0210 	bic.w	r2, r3, #16
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	699b      	ldr	r3, [r3, #24]
 8011740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	031b      	lsls	r3, r3, #12
 801174e:	693a      	ldr	r2, [r7, #16]
 8011750:	4313      	orrs	r3, r2
 8011752:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801175a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801175c:	68bb      	ldr	r3, [r7, #8]
 801175e:	011b      	lsls	r3, r3, #4
 8011760:	697a      	ldr	r2, [r7, #20]
 8011762:	4313      	orrs	r3, r2
 8011764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	693a      	ldr	r2, [r7, #16]
 801176a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	697a      	ldr	r2, [r7, #20]
 8011770:	621a      	str	r2, [r3, #32]
}
 8011772:	bf00      	nop
 8011774:	371c      	adds	r7, #28
 8011776:	46bd      	mov	sp, r7
 8011778:	bc80      	pop	{r7}
 801177a:	4770      	bx	lr

0801177c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801177c:	b480      	push	{r7}
 801177e:	b085      	sub	sp, #20
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	689b      	ldr	r3, [r3, #8]
 801178a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011792:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011794:	683a      	ldr	r2, [r7, #0]
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	4313      	orrs	r3, r2
 801179a:	f043 0307 	orr.w	r3, r3, #7
 801179e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	68fa      	ldr	r2, [r7, #12]
 80117a4:	609a      	str	r2, [r3, #8]
}
 80117a6:	bf00      	nop
 80117a8:	3714      	adds	r7, #20
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bc80      	pop	{r7}
 80117ae:	4770      	bx	lr

080117b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80117b0:	b480      	push	{r7}
 80117b2:	b087      	sub	sp, #28
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	60b9      	str	r1, [r7, #8]
 80117ba:	607a      	str	r2, [r7, #4]
 80117bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	689b      	ldr	r3, [r3, #8]
 80117c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80117ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	021a      	lsls	r2, r3, #8
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	431a      	orrs	r2, r3
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	4313      	orrs	r3, r2
 80117d8:	697a      	ldr	r2, [r7, #20]
 80117da:	4313      	orrs	r3, r2
 80117dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	697a      	ldr	r2, [r7, #20]
 80117e2:	609a      	str	r2, [r3, #8]
}
 80117e4:	bf00      	nop
 80117e6:	371c      	adds	r7, #28
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bc80      	pop	{r7}
 80117ec:	4770      	bx	lr

080117ee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80117ee:	b480      	push	{r7}
 80117f0:	b087      	sub	sp, #28
 80117f2:	af00      	add	r7, sp, #0
 80117f4:	60f8      	str	r0, [r7, #12]
 80117f6:	60b9      	str	r1, [r7, #8]
 80117f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	f003 031f 	and.w	r3, r3, #31
 8011800:	2201      	movs	r2, #1
 8011802:	fa02 f303 	lsl.w	r3, r2, r3
 8011806:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	6a1a      	ldr	r2, [r3, #32]
 801180c:	697b      	ldr	r3, [r7, #20]
 801180e:	43db      	mvns	r3, r3
 8011810:	401a      	ands	r2, r3
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	6a1a      	ldr	r2, [r3, #32]
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	f003 031f 	and.w	r3, r3, #31
 8011820:	6879      	ldr	r1, [r7, #4]
 8011822:	fa01 f303 	lsl.w	r3, r1, r3
 8011826:	431a      	orrs	r2, r3
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	621a      	str	r2, [r3, #32]
}
 801182c:	bf00      	nop
 801182e:	371c      	adds	r7, #28
 8011830:	46bd      	mov	sp, r7
 8011832:	bc80      	pop	{r7}
 8011834:	4770      	bx	lr
	...

08011838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011838:	b480      	push	{r7}
 801183a:	b085      	sub	sp, #20
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
 8011840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011848:	2b01      	cmp	r3, #1
 801184a:	d101      	bne.n	8011850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801184c:	2302      	movs	r3, #2
 801184e:	e046      	b.n	80118de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2201      	movs	r2, #1
 8011854:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2202      	movs	r2, #2
 801185c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	689b      	ldr	r3, [r3, #8]
 801186e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	68fa      	ldr	r2, [r7, #12]
 801187e:	4313      	orrs	r3, r2
 8011880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	68fa      	ldr	r2, [r7, #12]
 8011888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011892:	d00e      	beq.n	80118b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4a13      	ldr	r2, [pc, #76]	@ (80118e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801189a:	4293      	cmp	r3, r2
 801189c:	d009      	beq.n	80118b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	4a12      	ldr	r2, [pc, #72]	@ (80118ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d004      	beq.n	80118b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	4a10      	ldr	r2, [pc, #64]	@ (80118f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80118ae:	4293      	cmp	r3, r2
 80118b0:	d10c      	bne.n	80118cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80118b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	68ba      	ldr	r2, [r7, #8]
 80118c0:	4313      	orrs	r3, r2
 80118c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	68ba      	ldr	r2, [r7, #8]
 80118ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2201      	movs	r2, #1
 80118d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2200      	movs	r2, #0
 80118d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80118dc:	2300      	movs	r3, #0
}
 80118de:	4618      	mov	r0, r3
 80118e0:	3714      	adds	r7, #20
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bc80      	pop	{r7}
 80118e6:	4770      	bx	lr
 80118e8:	40000400 	.word	0x40000400
 80118ec:	40000800 	.word	0x40000800
 80118f0:	40010800 	.word	0x40010800

080118f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d101      	bne.n	8011906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011902:	2301      	movs	r3, #1
 8011904:	e042      	b.n	801198c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801190c:	b2db      	uxtb	r3, r3
 801190e:	2b00      	cmp	r3, #0
 8011910:	d106      	bne.n	8011920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2200      	movs	r2, #0
 8011916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f7f0 fe96 	bl	800264c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2224      	movs	r2, #36	@ 0x24
 8011924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	68da      	ldr	r2, [r3, #12]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f000 f82b 	bl	8011994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	691a      	ldr	r2, [r3, #16]
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801194c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	695a      	ldr	r2, [r3, #20]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801195c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	68da      	ldr	r2, [r3, #12]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801196c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2200      	movs	r2, #0
 8011972:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2220      	movs	r2, #32
 8011978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2220      	movs	r2, #32
 8011980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2200      	movs	r2, #0
 8011988:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 801198a:	2300      	movs	r3, #0
}
 801198c:	4618      	mov	r0, r3
 801198e:	3708      	adds	r7, #8
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}

08011994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b084      	sub	sp, #16
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	691b      	ldr	r3, [r3, #16]
 80119a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	68da      	ldr	r2, [r3, #12]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	430a      	orrs	r2, r1
 80119b0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	689a      	ldr	r2, [r3, #8]
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	691b      	ldr	r3, [r3, #16]
 80119ba:	431a      	orrs	r2, r3
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	695b      	ldr	r3, [r3, #20]
 80119c0:	431a      	orrs	r2, r3
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	69db      	ldr	r3, [r3, #28]
 80119c6:	4313      	orrs	r3, r2
 80119c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	68db      	ldr	r3, [r3, #12]
 80119d0:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80119d4:	f023 030c 	bic.w	r3, r3, #12
 80119d8:	687a      	ldr	r2, [r7, #4]
 80119da:	6812      	ldr	r2, [r2, #0]
 80119dc:	68b9      	ldr	r1, [r7, #8]
 80119de:	430b      	orrs	r3, r1
 80119e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	695b      	ldr	r3, [r3, #20]
 80119e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	699a      	ldr	r2, [r3, #24]
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	430a      	orrs	r2, r1
 80119f6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4a55      	ldr	r2, [pc, #340]	@ (8011b54 <UART_SetConfig+0x1c0>)
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d103      	bne.n	8011a0a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8011a02:	f7fe fcf9 	bl	80103f8 <HAL_RCC_GetPCLK2Freq>
 8011a06:	60f8      	str	r0, [r7, #12]
 8011a08:	e002      	b.n	8011a10 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8011a0a:	f7fe fce1 	bl	80103d0 <HAL_RCC_GetPCLK1Freq>
 8011a0e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	69db      	ldr	r3, [r3, #28]
 8011a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011a18:	d14c      	bne.n	8011ab4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011a1a:	68fa      	ldr	r2, [r7, #12]
 8011a1c:	4613      	mov	r3, r2
 8011a1e:	009b      	lsls	r3, r3, #2
 8011a20:	4413      	add	r3, r2
 8011a22:	009a      	lsls	r2, r3, #2
 8011a24:	441a      	add	r2, r3
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	005b      	lsls	r3, r3, #1
 8011a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a30:	4a49      	ldr	r2, [pc, #292]	@ (8011b58 <UART_SetConfig+0x1c4>)
 8011a32:	fba2 2303 	umull	r2, r3, r2, r3
 8011a36:	095b      	lsrs	r3, r3, #5
 8011a38:	0119      	lsls	r1, r3, #4
 8011a3a:	68fa      	ldr	r2, [r7, #12]
 8011a3c:	4613      	mov	r3, r2
 8011a3e:	009b      	lsls	r3, r3, #2
 8011a40:	4413      	add	r3, r2
 8011a42:	009a      	lsls	r2, r3, #2
 8011a44:	441a      	add	r2, r3
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	005b      	lsls	r3, r3, #1
 8011a4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011a50:	4b41      	ldr	r3, [pc, #260]	@ (8011b58 <UART_SetConfig+0x1c4>)
 8011a52:	fba3 0302 	umull	r0, r3, r3, r2
 8011a56:	095b      	lsrs	r3, r3, #5
 8011a58:	2064      	movs	r0, #100	@ 0x64
 8011a5a:	fb00 f303 	mul.w	r3, r0, r3
 8011a5e:	1ad3      	subs	r3, r2, r3
 8011a60:	00db      	lsls	r3, r3, #3
 8011a62:	3332      	adds	r3, #50	@ 0x32
 8011a64:	4a3c      	ldr	r2, [pc, #240]	@ (8011b58 <UART_SetConfig+0x1c4>)
 8011a66:	fba2 2303 	umull	r2, r3, r2, r3
 8011a6a:	095b      	lsrs	r3, r3, #5
 8011a6c:	005b      	lsls	r3, r3, #1
 8011a6e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8011a72:	4419      	add	r1, r3
 8011a74:	68fa      	ldr	r2, [r7, #12]
 8011a76:	4613      	mov	r3, r2
 8011a78:	009b      	lsls	r3, r3, #2
 8011a7a:	4413      	add	r3, r2
 8011a7c:	009a      	lsls	r2, r3, #2
 8011a7e:	441a      	add	r2, r3
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	005b      	lsls	r3, r3, #1
 8011a86:	fbb2 f2f3 	udiv	r2, r2, r3
 8011a8a:	4b33      	ldr	r3, [pc, #204]	@ (8011b58 <UART_SetConfig+0x1c4>)
 8011a8c:	fba3 0302 	umull	r0, r3, r3, r2
 8011a90:	095b      	lsrs	r3, r3, #5
 8011a92:	2064      	movs	r0, #100	@ 0x64
 8011a94:	fb00 f303 	mul.w	r3, r0, r3
 8011a98:	1ad3      	subs	r3, r2, r3
 8011a9a:	00db      	lsls	r3, r3, #3
 8011a9c:	3332      	adds	r3, #50	@ 0x32
 8011a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8011b58 <UART_SetConfig+0x1c4>)
 8011aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8011aa4:	095b      	lsrs	r3, r3, #5
 8011aa6:	f003 0207 	and.w	r2, r3, #7
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	440a      	add	r2, r1
 8011ab0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011ab2:	e04a      	b.n	8011b4a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011ab4:	68fa      	ldr	r2, [r7, #12]
 8011ab6:	4613      	mov	r3, r2
 8011ab8:	009b      	lsls	r3, r3, #2
 8011aba:	4413      	add	r3, r2
 8011abc:	009a      	lsls	r2, r3, #2
 8011abe:	441a      	add	r2, r3
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	009b      	lsls	r3, r3, #2
 8011ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011aca:	4a23      	ldr	r2, [pc, #140]	@ (8011b58 <UART_SetConfig+0x1c4>)
 8011acc:	fba2 2303 	umull	r2, r3, r2, r3
 8011ad0:	095b      	lsrs	r3, r3, #5
 8011ad2:	0119      	lsls	r1, r3, #4
 8011ad4:	68fa      	ldr	r2, [r7, #12]
 8011ad6:	4613      	mov	r3, r2
 8011ad8:	009b      	lsls	r3, r3, #2
 8011ada:	4413      	add	r3, r2
 8011adc:	009a      	lsls	r2, r3, #2
 8011ade:	441a      	add	r2, r3
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	009b      	lsls	r3, r3, #2
 8011ae6:	fbb2 f2f3 	udiv	r2, r2, r3
 8011aea:	4b1b      	ldr	r3, [pc, #108]	@ (8011b58 <UART_SetConfig+0x1c4>)
 8011aec:	fba3 0302 	umull	r0, r3, r3, r2
 8011af0:	095b      	lsrs	r3, r3, #5
 8011af2:	2064      	movs	r0, #100	@ 0x64
 8011af4:	fb00 f303 	mul.w	r3, r0, r3
 8011af8:	1ad3      	subs	r3, r2, r3
 8011afa:	011b      	lsls	r3, r3, #4
 8011afc:	3332      	adds	r3, #50	@ 0x32
 8011afe:	4a16      	ldr	r2, [pc, #88]	@ (8011b58 <UART_SetConfig+0x1c4>)
 8011b00:	fba2 2303 	umull	r2, r3, r2, r3
 8011b04:	095b      	lsrs	r3, r3, #5
 8011b06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011b0a:	4419      	add	r1, r3
 8011b0c:	68fa      	ldr	r2, [r7, #12]
 8011b0e:	4613      	mov	r3, r2
 8011b10:	009b      	lsls	r3, r3, #2
 8011b12:	4413      	add	r3, r2
 8011b14:	009a      	lsls	r2, r3, #2
 8011b16:	441a      	add	r2, r3
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	009b      	lsls	r3, r3, #2
 8011b1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8011b22:	4b0d      	ldr	r3, [pc, #52]	@ (8011b58 <UART_SetConfig+0x1c4>)
 8011b24:	fba3 0302 	umull	r0, r3, r3, r2
 8011b28:	095b      	lsrs	r3, r3, #5
 8011b2a:	2064      	movs	r0, #100	@ 0x64
 8011b2c:	fb00 f303 	mul.w	r3, r0, r3
 8011b30:	1ad3      	subs	r3, r2, r3
 8011b32:	011b      	lsls	r3, r3, #4
 8011b34:	3332      	adds	r3, #50	@ 0x32
 8011b36:	4a08      	ldr	r2, [pc, #32]	@ (8011b58 <UART_SetConfig+0x1c4>)
 8011b38:	fba2 2303 	umull	r2, r3, r2, r3
 8011b3c:	095b      	lsrs	r3, r3, #5
 8011b3e:	f003 020f 	and.w	r2, r3, #15
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	440a      	add	r2, r1
 8011b48:	609a      	str	r2, [r3, #8]
}
 8011b4a:	bf00      	nop
 8011b4c:	3710      	adds	r7, #16
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	40013800 	.word	0x40013800
 8011b58:	51eb851f 	.word	0x51eb851f

08011b5c <std>:
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	b510      	push	{r4, lr}
 8011b60:	4604      	mov	r4, r0
 8011b62:	e9c0 3300 	strd	r3, r3, [r0]
 8011b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b6a:	6083      	str	r3, [r0, #8]
 8011b6c:	8181      	strh	r1, [r0, #12]
 8011b6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011b70:	81c2      	strh	r2, [r0, #14]
 8011b72:	6183      	str	r3, [r0, #24]
 8011b74:	4619      	mov	r1, r3
 8011b76:	2208      	movs	r2, #8
 8011b78:	305c      	adds	r0, #92	@ 0x5c
 8011b7a:	f000 fa19 	bl	8011fb0 <memset>
 8011b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8011bb4 <std+0x58>)
 8011b80:	6224      	str	r4, [r4, #32]
 8011b82:	6263      	str	r3, [r4, #36]	@ 0x24
 8011b84:	4b0c      	ldr	r3, [pc, #48]	@ (8011bb8 <std+0x5c>)
 8011b86:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011b88:	4b0c      	ldr	r3, [pc, #48]	@ (8011bbc <std+0x60>)
 8011b8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8011bc0 <std+0x64>)
 8011b8e:	6323      	str	r3, [r4, #48]	@ 0x30
 8011b90:	4b0c      	ldr	r3, [pc, #48]	@ (8011bc4 <std+0x68>)
 8011b92:	429c      	cmp	r4, r3
 8011b94:	d006      	beq.n	8011ba4 <std+0x48>
 8011b96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011b9a:	4294      	cmp	r4, r2
 8011b9c:	d002      	beq.n	8011ba4 <std+0x48>
 8011b9e:	33d0      	adds	r3, #208	@ 0xd0
 8011ba0:	429c      	cmp	r4, r3
 8011ba2:	d105      	bne.n	8011bb0 <std+0x54>
 8011ba4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bac:	f000 ba78 	b.w	80120a0 <__retarget_lock_init_recursive>
 8011bb0:	bd10      	pop	{r4, pc}
 8011bb2:	bf00      	nop
 8011bb4:	08011e01 	.word	0x08011e01
 8011bb8:	08011e23 	.word	0x08011e23
 8011bbc:	08011e5b 	.word	0x08011e5b
 8011bc0:	08011e7f 	.word	0x08011e7f
 8011bc4:	20000674 	.word	0x20000674

08011bc8 <stdio_exit_handler>:
 8011bc8:	4a02      	ldr	r2, [pc, #8]	@ (8011bd4 <stdio_exit_handler+0xc>)
 8011bca:	4903      	ldr	r1, [pc, #12]	@ (8011bd8 <stdio_exit_handler+0x10>)
 8011bcc:	4803      	ldr	r0, [pc, #12]	@ (8011bdc <stdio_exit_handler+0x14>)
 8011bce:	f000 b869 	b.w	8011ca4 <_fwalk_sglue>
 8011bd2:	bf00      	nop
 8011bd4:	20000198 	.word	0x20000198
 8011bd8:	08012be9 	.word	0x08012be9
 8011bdc:	200001a8 	.word	0x200001a8

08011be0 <cleanup_stdio>:
 8011be0:	6841      	ldr	r1, [r0, #4]
 8011be2:	4b0c      	ldr	r3, [pc, #48]	@ (8011c14 <cleanup_stdio+0x34>)
 8011be4:	b510      	push	{r4, lr}
 8011be6:	4299      	cmp	r1, r3
 8011be8:	4604      	mov	r4, r0
 8011bea:	d001      	beq.n	8011bf0 <cleanup_stdio+0x10>
 8011bec:	f000 fffc 	bl	8012be8 <_fflush_r>
 8011bf0:	68a1      	ldr	r1, [r4, #8]
 8011bf2:	4b09      	ldr	r3, [pc, #36]	@ (8011c18 <cleanup_stdio+0x38>)
 8011bf4:	4299      	cmp	r1, r3
 8011bf6:	d002      	beq.n	8011bfe <cleanup_stdio+0x1e>
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	f000 fff5 	bl	8012be8 <_fflush_r>
 8011bfe:	68e1      	ldr	r1, [r4, #12]
 8011c00:	4b06      	ldr	r3, [pc, #24]	@ (8011c1c <cleanup_stdio+0x3c>)
 8011c02:	4299      	cmp	r1, r3
 8011c04:	d004      	beq.n	8011c10 <cleanup_stdio+0x30>
 8011c06:	4620      	mov	r0, r4
 8011c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c0c:	f000 bfec 	b.w	8012be8 <_fflush_r>
 8011c10:	bd10      	pop	{r4, pc}
 8011c12:	bf00      	nop
 8011c14:	20000674 	.word	0x20000674
 8011c18:	200006dc 	.word	0x200006dc
 8011c1c:	20000744 	.word	0x20000744

08011c20 <global_stdio_init.part.0>:
 8011c20:	b510      	push	{r4, lr}
 8011c22:	4b0b      	ldr	r3, [pc, #44]	@ (8011c50 <global_stdio_init.part.0+0x30>)
 8011c24:	4c0b      	ldr	r4, [pc, #44]	@ (8011c54 <global_stdio_init.part.0+0x34>)
 8011c26:	4a0c      	ldr	r2, [pc, #48]	@ (8011c58 <global_stdio_init.part.0+0x38>)
 8011c28:	4620      	mov	r0, r4
 8011c2a:	601a      	str	r2, [r3, #0]
 8011c2c:	2104      	movs	r1, #4
 8011c2e:	2200      	movs	r2, #0
 8011c30:	f7ff ff94 	bl	8011b5c <std>
 8011c34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011c38:	2201      	movs	r2, #1
 8011c3a:	2109      	movs	r1, #9
 8011c3c:	f7ff ff8e 	bl	8011b5c <std>
 8011c40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011c44:	2202      	movs	r2, #2
 8011c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c4a:	2112      	movs	r1, #18
 8011c4c:	f7ff bf86 	b.w	8011b5c <std>
 8011c50:	200007ac 	.word	0x200007ac
 8011c54:	20000674 	.word	0x20000674
 8011c58:	08011bc9 	.word	0x08011bc9

08011c5c <__sfp_lock_acquire>:
 8011c5c:	4801      	ldr	r0, [pc, #4]	@ (8011c64 <__sfp_lock_acquire+0x8>)
 8011c5e:	f000 ba20 	b.w	80120a2 <__retarget_lock_acquire_recursive>
 8011c62:	bf00      	nop
 8011c64:	200007b5 	.word	0x200007b5

08011c68 <__sfp_lock_release>:
 8011c68:	4801      	ldr	r0, [pc, #4]	@ (8011c70 <__sfp_lock_release+0x8>)
 8011c6a:	f000 ba1b 	b.w	80120a4 <__retarget_lock_release_recursive>
 8011c6e:	bf00      	nop
 8011c70:	200007b5 	.word	0x200007b5

08011c74 <__sinit>:
 8011c74:	b510      	push	{r4, lr}
 8011c76:	4604      	mov	r4, r0
 8011c78:	f7ff fff0 	bl	8011c5c <__sfp_lock_acquire>
 8011c7c:	6a23      	ldr	r3, [r4, #32]
 8011c7e:	b11b      	cbz	r3, 8011c88 <__sinit+0x14>
 8011c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c84:	f7ff bff0 	b.w	8011c68 <__sfp_lock_release>
 8011c88:	4b04      	ldr	r3, [pc, #16]	@ (8011c9c <__sinit+0x28>)
 8011c8a:	6223      	str	r3, [r4, #32]
 8011c8c:	4b04      	ldr	r3, [pc, #16]	@ (8011ca0 <__sinit+0x2c>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d1f5      	bne.n	8011c80 <__sinit+0xc>
 8011c94:	f7ff ffc4 	bl	8011c20 <global_stdio_init.part.0>
 8011c98:	e7f2      	b.n	8011c80 <__sinit+0xc>
 8011c9a:	bf00      	nop
 8011c9c:	08011be1 	.word	0x08011be1
 8011ca0:	200007ac 	.word	0x200007ac

08011ca4 <_fwalk_sglue>:
 8011ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ca8:	4607      	mov	r7, r0
 8011caa:	4688      	mov	r8, r1
 8011cac:	4614      	mov	r4, r2
 8011cae:	2600      	movs	r6, #0
 8011cb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011cb4:	f1b9 0901 	subs.w	r9, r9, #1
 8011cb8:	d505      	bpl.n	8011cc6 <_fwalk_sglue+0x22>
 8011cba:	6824      	ldr	r4, [r4, #0]
 8011cbc:	2c00      	cmp	r4, #0
 8011cbe:	d1f7      	bne.n	8011cb0 <_fwalk_sglue+0xc>
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cc6:	89ab      	ldrh	r3, [r5, #12]
 8011cc8:	2b01      	cmp	r3, #1
 8011cca:	d907      	bls.n	8011cdc <_fwalk_sglue+0x38>
 8011ccc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011cd0:	3301      	adds	r3, #1
 8011cd2:	d003      	beq.n	8011cdc <_fwalk_sglue+0x38>
 8011cd4:	4629      	mov	r1, r5
 8011cd6:	4638      	mov	r0, r7
 8011cd8:	47c0      	blx	r8
 8011cda:	4306      	orrs	r6, r0
 8011cdc:	3568      	adds	r5, #104	@ 0x68
 8011cde:	e7e9      	b.n	8011cb4 <_fwalk_sglue+0x10>

08011ce0 <iprintf>:
 8011ce0:	b40f      	push	{r0, r1, r2, r3}
 8011ce2:	b507      	push	{r0, r1, r2, lr}
 8011ce4:	4906      	ldr	r1, [pc, #24]	@ (8011d00 <iprintf+0x20>)
 8011ce6:	ab04      	add	r3, sp, #16
 8011ce8:	6808      	ldr	r0, [r1, #0]
 8011cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cee:	6881      	ldr	r1, [r0, #8]
 8011cf0:	9301      	str	r3, [sp, #4]
 8011cf2:	f000 fc4f 	bl	8012594 <_vfiprintf_r>
 8011cf6:	b003      	add	sp, #12
 8011cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cfc:	b004      	add	sp, #16
 8011cfe:	4770      	bx	lr
 8011d00:	200001a4 	.word	0x200001a4

08011d04 <_puts_r>:
 8011d04:	6a03      	ldr	r3, [r0, #32]
 8011d06:	b570      	push	{r4, r5, r6, lr}
 8011d08:	4605      	mov	r5, r0
 8011d0a:	460e      	mov	r6, r1
 8011d0c:	6884      	ldr	r4, [r0, #8]
 8011d0e:	b90b      	cbnz	r3, 8011d14 <_puts_r+0x10>
 8011d10:	f7ff ffb0 	bl	8011c74 <__sinit>
 8011d14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011d16:	07db      	lsls	r3, r3, #31
 8011d18:	d405      	bmi.n	8011d26 <_puts_r+0x22>
 8011d1a:	89a3      	ldrh	r3, [r4, #12]
 8011d1c:	0598      	lsls	r0, r3, #22
 8011d1e:	d402      	bmi.n	8011d26 <_puts_r+0x22>
 8011d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d22:	f000 f9be 	bl	80120a2 <__retarget_lock_acquire_recursive>
 8011d26:	89a3      	ldrh	r3, [r4, #12]
 8011d28:	0719      	lsls	r1, r3, #28
 8011d2a:	d502      	bpl.n	8011d32 <_puts_r+0x2e>
 8011d2c:	6923      	ldr	r3, [r4, #16]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d135      	bne.n	8011d9e <_puts_r+0x9a>
 8011d32:	4621      	mov	r1, r4
 8011d34:	4628      	mov	r0, r5
 8011d36:	f000 f8e5 	bl	8011f04 <__swsetup_r>
 8011d3a:	b380      	cbz	r0, 8011d9e <_puts_r+0x9a>
 8011d3c:	f04f 35ff 	mov.w	r5, #4294967295
 8011d40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011d42:	07da      	lsls	r2, r3, #31
 8011d44:	d405      	bmi.n	8011d52 <_puts_r+0x4e>
 8011d46:	89a3      	ldrh	r3, [r4, #12]
 8011d48:	059b      	lsls	r3, r3, #22
 8011d4a:	d402      	bmi.n	8011d52 <_puts_r+0x4e>
 8011d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d4e:	f000 f9a9 	bl	80120a4 <__retarget_lock_release_recursive>
 8011d52:	4628      	mov	r0, r5
 8011d54:	bd70      	pop	{r4, r5, r6, pc}
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	da04      	bge.n	8011d64 <_puts_r+0x60>
 8011d5a:	69a2      	ldr	r2, [r4, #24]
 8011d5c:	429a      	cmp	r2, r3
 8011d5e:	dc17      	bgt.n	8011d90 <_puts_r+0x8c>
 8011d60:	290a      	cmp	r1, #10
 8011d62:	d015      	beq.n	8011d90 <_puts_r+0x8c>
 8011d64:	6823      	ldr	r3, [r4, #0]
 8011d66:	1c5a      	adds	r2, r3, #1
 8011d68:	6022      	str	r2, [r4, #0]
 8011d6a:	7019      	strb	r1, [r3, #0]
 8011d6c:	68a3      	ldr	r3, [r4, #8]
 8011d6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011d72:	3b01      	subs	r3, #1
 8011d74:	60a3      	str	r3, [r4, #8]
 8011d76:	2900      	cmp	r1, #0
 8011d78:	d1ed      	bne.n	8011d56 <_puts_r+0x52>
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	da11      	bge.n	8011da2 <_puts_r+0x9e>
 8011d7e:	4622      	mov	r2, r4
 8011d80:	210a      	movs	r1, #10
 8011d82:	4628      	mov	r0, r5
 8011d84:	f000 f87f 	bl	8011e86 <__swbuf_r>
 8011d88:	3001      	adds	r0, #1
 8011d8a:	d0d7      	beq.n	8011d3c <_puts_r+0x38>
 8011d8c:	250a      	movs	r5, #10
 8011d8e:	e7d7      	b.n	8011d40 <_puts_r+0x3c>
 8011d90:	4622      	mov	r2, r4
 8011d92:	4628      	mov	r0, r5
 8011d94:	f000 f877 	bl	8011e86 <__swbuf_r>
 8011d98:	3001      	adds	r0, #1
 8011d9a:	d1e7      	bne.n	8011d6c <_puts_r+0x68>
 8011d9c:	e7ce      	b.n	8011d3c <_puts_r+0x38>
 8011d9e:	3e01      	subs	r6, #1
 8011da0:	e7e4      	b.n	8011d6c <_puts_r+0x68>
 8011da2:	6823      	ldr	r3, [r4, #0]
 8011da4:	1c5a      	adds	r2, r3, #1
 8011da6:	6022      	str	r2, [r4, #0]
 8011da8:	220a      	movs	r2, #10
 8011daa:	701a      	strb	r2, [r3, #0]
 8011dac:	e7ee      	b.n	8011d8c <_puts_r+0x88>
	...

08011db0 <puts>:
 8011db0:	4b02      	ldr	r3, [pc, #8]	@ (8011dbc <puts+0xc>)
 8011db2:	4601      	mov	r1, r0
 8011db4:	6818      	ldr	r0, [r3, #0]
 8011db6:	f7ff bfa5 	b.w	8011d04 <_puts_r>
 8011dba:	bf00      	nop
 8011dbc:	200001a4 	.word	0x200001a4

08011dc0 <siprintf>:
 8011dc0:	b40e      	push	{r1, r2, r3}
 8011dc2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011dc6:	b500      	push	{lr}
 8011dc8:	b09c      	sub	sp, #112	@ 0x70
 8011dca:	ab1d      	add	r3, sp, #116	@ 0x74
 8011dcc:	9002      	str	r0, [sp, #8]
 8011dce:	9006      	str	r0, [sp, #24]
 8011dd0:	9107      	str	r1, [sp, #28]
 8011dd2:	9104      	str	r1, [sp, #16]
 8011dd4:	4808      	ldr	r0, [pc, #32]	@ (8011df8 <siprintf+0x38>)
 8011dd6:	4909      	ldr	r1, [pc, #36]	@ (8011dfc <siprintf+0x3c>)
 8011dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ddc:	9105      	str	r1, [sp, #20]
 8011dde:	6800      	ldr	r0, [r0, #0]
 8011de0:	a902      	add	r1, sp, #8
 8011de2:	9301      	str	r3, [sp, #4]
 8011de4:	f000 fab2 	bl	801234c <_svfiprintf_r>
 8011de8:	2200      	movs	r2, #0
 8011dea:	9b02      	ldr	r3, [sp, #8]
 8011dec:	701a      	strb	r2, [r3, #0]
 8011dee:	b01c      	add	sp, #112	@ 0x70
 8011df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011df4:	b003      	add	sp, #12
 8011df6:	4770      	bx	lr
 8011df8:	200001a4 	.word	0x200001a4
 8011dfc:	ffff0208 	.word	0xffff0208

08011e00 <__sread>:
 8011e00:	b510      	push	{r4, lr}
 8011e02:	460c      	mov	r4, r1
 8011e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e08:	f000 f8fc 	bl	8012004 <_read_r>
 8011e0c:	2800      	cmp	r0, #0
 8011e0e:	bfab      	itete	ge
 8011e10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011e12:	89a3      	ldrhlt	r3, [r4, #12]
 8011e14:	181b      	addge	r3, r3, r0
 8011e16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011e1a:	bfac      	ite	ge
 8011e1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011e1e:	81a3      	strhlt	r3, [r4, #12]
 8011e20:	bd10      	pop	{r4, pc}

08011e22 <__swrite>:
 8011e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e26:	461f      	mov	r7, r3
 8011e28:	898b      	ldrh	r3, [r1, #12]
 8011e2a:	4605      	mov	r5, r0
 8011e2c:	05db      	lsls	r3, r3, #23
 8011e2e:	460c      	mov	r4, r1
 8011e30:	4616      	mov	r6, r2
 8011e32:	d505      	bpl.n	8011e40 <__swrite+0x1e>
 8011e34:	2302      	movs	r3, #2
 8011e36:	2200      	movs	r2, #0
 8011e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e3c:	f000 f8d0 	bl	8011fe0 <_lseek_r>
 8011e40:	89a3      	ldrh	r3, [r4, #12]
 8011e42:	4632      	mov	r2, r6
 8011e44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011e48:	81a3      	strh	r3, [r4, #12]
 8011e4a:	4628      	mov	r0, r5
 8011e4c:	463b      	mov	r3, r7
 8011e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e56:	f000 b8e7 	b.w	8012028 <_write_r>

08011e5a <__sseek>:
 8011e5a:	b510      	push	{r4, lr}
 8011e5c:	460c      	mov	r4, r1
 8011e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e62:	f000 f8bd 	bl	8011fe0 <_lseek_r>
 8011e66:	1c43      	adds	r3, r0, #1
 8011e68:	89a3      	ldrh	r3, [r4, #12]
 8011e6a:	bf15      	itete	ne
 8011e6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011e6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011e72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011e76:	81a3      	strheq	r3, [r4, #12]
 8011e78:	bf18      	it	ne
 8011e7a:	81a3      	strhne	r3, [r4, #12]
 8011e7c:	bd10      	pop	{r4, pc}

08011e7e <__sclose>:
 8011e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e82:	f000 b89d 	b.w	8011fc0 <_close_r>

08011e86 <__swbuf_r>:
 8011e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e88:	460e      	mov	r6, r1
 8011e8a:	4614      	mov	r4, r2
 8011e8c:	4605      	mov	r5, r0
 8011e8e:	b118      	cbz	r0, 8011e98 <__swbuf_r+0x12>
 8011e90:	6a03      	ldr	r3, [r0, #32]
 8011e92:	b90b      	cbnz	r3, 8011e98 <__swbuf_r+0x12>
 8011e94:	f7ff feee 	bl	8011c74 <__sinit>
 8011e98:	69a3      	ldr	r3, [r4, #24]
 8011e9a:	60a3      	str	r3, [r4, #8]
 8011e9c:	89a3      	ldrh	r3, [r4, #12]
 8011e9e:	071a      	lsls	r2, r3, #28
 8011ea0:	d501      	bpl.n	8011ea6 <__swbuf_r+0x20>
 8011ea2:	6923      	ldr	r3, [r4, #16]
 8011ea4:	b943      	cbnz	r3, 8011eb8 <__swbuf_r+0x32>
 8011ea6:	4621      	mov	r1, r4
 8011ea8:	4628      	mov	r0, r5
 8011eaa:	f000 f82b 	bl	8011f04 <__swsetup_r>
 8011eae:	b118      	cbz	r0, 8011eb8 <__swbuf_r+0x32>
 8011eb0:	f04f 37ff 	mov.w	r7, #4294967295
 8011eb4:	4638      	mov	r0, r7
 8011eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011eb8:	6823      	ldr	r3, [r4, #0]
 8011eba:	6922      	ldr	r2, [r4, #16]
 8011ebc:	b2f6      	uxtb	r6, r6
 8011ebe:	1a98      	subs	r0, r3, r2
 8011ec0:	6963      	ldr	r3, [r4, #20]
 8011ec2:	4637      	mov	r7, r6
 8011ec4:	4283      	cmp	r3, r0
 8011ec6:	dc05      	bgt.n	8011ed4 <__swbuf_r+0x4e>
 8011ec8:	4621      	mov	r1, r4
 8011eca:	4628      	mov	r0, r5
 8011ecc:	f000 fe8c 	bl	8012be8 <_fflush_r>
 8011ed0:	2800      	cmp	r0, #0
 8011ed2:	d1ed      	bne.n	8011eb0 <__swbuf_r+0x2a>
 8011ed4:	68a3      	ldr	r3, [r4, #8]
 8011ed6:	3b01      	subs	r3, #1
 8011ed8:	60a3      	str	r3, [r4, #8]
 8011eda:	6823      	ldr	r3, [r4, #0]
 8011edc:	1c5a      	adds	r2, r3, #1
 8011ede:	6022      	str	r2, [r4, #0]
 8011ee0:	701e      	strb	r6, [r3, #0]
 8011ee2:	6962      	ldr	r2, [r4, #20]
 8011ee4:	1c43      	adds	r3, r0, #1
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d004      	beq.n	8011ef4 <__swbuf_r+0x6e>
 8011eea:	89a3      	ldrh	r3, [r4, #12]
 8011eec:	07db      	lsls	r3, r3, #31
 8011eee:	d5e1      	bpl.n	8011eb4 <__swbuf_r+0x2e>
 8011ef0:	2e0a      	cmp	r6, #10
 8011ef2:	d1df      	bne.n	8011eb4 <__swbuf_r+0x2e>
 8011ef4:	4621      	mov	r1, r4
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	f000 fe76 	bl	8012be8 <_fflush_r>
 8011efc:	2800      	cmp	r0, #0
 8011efe:	d0d9      	beq.n	8011eb4 <__swbuf_r+0x2e>
 8011f00:	e7d6      	b.n	8011eb0 <__swbuf_r+0x2a>
	...

08011f04 <__swsetup_r>:
 8011f04:	b538      	push	{r3, r4, r5, lr}
 8011f06:	4b29      	ldr	r3, [pc, #164]	@ (8011fac <__swsetup_r+0xa8>)
 8011f08:	4605      	mov	r5, r0
 8011f0a:	6818      	ldr	r0, [r3, #0]
 8011f0c:	460c      	mov	r4, r1
 8011f0e:	b118      	cbz	r0, 8011f18 <__swsetup_r+0x14>
 8011f10:	6a03      	ldr	r3, [r0, #32]
 8011f12:	b90b      	cbnz	r3, 8011f18 <__swsetup_r+0x14>
 8011f14:	f7ff feae 	bl	8011c74 <__sinit>
 8011f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f1c:	0719      	lsls	r1, r3, #28
 8011f1e:	d422      	bmi.n	8011f66 <__swsetup_r+0x62>
 8011f20:	06da      	lsls	r2, r3, #27
 8011f22:	d407      	bmi.n	8011f34 <__swsetup_r+0x30>
 8011f24:	2209      	movs	r2, #9
 8011f26:	602a      	str	r2, [r5, #0]
 8011f28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f30:	81a3      	strh	r3, [r4, #12]
 8011f32:	e033      	b.n	8011f9c <__swsetup_r+0x98>
 8011f34:	0758      	lsls	r0, r3, #29
 8011f36:	d512      	bpl.n	8011f5e <__swsetup_r+0x5a>
 8011f38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011f3a:	b141      	cbz	r1, 8011f4e <__swsetup_r+0x4a>
 8011f3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f40:	4299      	cmp	r1, r3
 8011f42:	d002      	beq.n	8011f4a <__swsetup_r+0x46>
 8011f44:	4628      	mov	r0, r5
 8011f46:	f000 f8af 	bl	80120a8 <_free_r>
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011f4e:	89a3      	ldrh	r3, [r4, #12]
 8011f50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011f54:	81a3      	strh	r3, [r4, #12]
 8011f56:	2300      	movs	r3, #0
 8011f58:	6063      	str	r3, [r4, #4]
 8011f5a:	6923      	ldr	r3, [r4, #16]
 8011f5c:	6023      	str	r3, [r4, #0]
 8011f5e:	89a3      	ldrh	r3, [r4, #12]
 8011f60:	f043 0308 	orr.w	r3, r3, #8
 8011f64:	81a3      	strh	r3, [r4, #12]
 8011f66:	6923      	ldr	r3, [r4, #16]
 8011f68:	b94b      	cbnz	r3, 8011f7e <__swsetup_r+0x7a>
 8011f6a:	89a3      	ldrh	r3, [r4, #12]
 8011f6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f74:	d003      	beq.n	8011f7e <__swsetup_r+0x7a>
 8011f76:	4621      	mov	r1, r4
 8011f78:	4628      	mov	r0, r5
 8011f7a:	f000 fe82 	bl	8012c82 <__smakebuf_r>
 8011f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f82:	f013 0201 	ands.w	r2, r3, #1
 8011f86:	d00a      	beq.n	8011f9e <__swsetup_r+0x9a>
 8011f88:	2200      	movs	r2, #0
 8011f8a:	60a2      	str	r2, [r4, #8]
 8011f8c:	6962      	ldr	r2, [r4, #20]
 8011f8e:	4252      	negs	r2, r2
 8011f90:	61a2      	str	r2, [r4, #24]
 8011f92:	6922      	ldr	r2, [r4, #16]
 8011f94:	b942      	cbnz	r2, 8011fa8 <__swsetup_r+0xa4>
 8011f96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011f9a:	d1c5      	bne.n	8011f28 <__swsetup_r+0x24>
 8011f9c:	bd38      	pop	{r3, r4, r5, pc}
 8011f9e:	0799      	lsls	r1, r3, #30
 8011fa0:	bf58      	it	pl
 8011fa2:	6962      	ldrpl	r2, [r4, #20]
 8011fa4:	60a2      	str	r2, [r4, #8]
 8011fa6:	e7f4      	b.n	8011f92 <__swsetup_r+0x8e>
 8011fa8:	2000      	movs	r0, #0
 8011faa:	e7f7      	b.n	8011f9c <__swsetup_r+0x98>
 8011fac:	200001a4 	.word	0x200001a4

08011fb0 <memset>:
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	4402      	add	r2, r0
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d100      	bne.n	8011fba <memset+0xa>
 8011fb8:	4770      	bx	lr
 8011fba:	f803 1b01 	strb.w	r1, [r3], #1
 8011fbe:	e7f9      	b.n	8011fb4 <memset+0x4>

08011fc0 <_close_r>:
 8011fc0:	b538      	push	{r3, r4, r5, lr}
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	4d05      	ldr	r5, [pc, #20]	@ (8011fdc <_close_r+0x1c>)
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	4608      	mov	r0, r1
 8011fca:	602b      	str	r3, [r5, #0]
 8011fcc:	f7f0 fe1f 	bl	8002c0e <_close>
 8011fd0:	1c43      	adds	r3, r0, #1
 8011fd2:	d102      	bne.n	8011fda <_close_r+0x1a>
 8011fd4:	682b      	ldr	r3, [r5, #0]
 8011fd6:	b103      	cbz	r3, 8011fda <_close_r+0x1a>
 8011fd8:	6023      	str	r3, [r4, #0]
 8011fda:	bd38      	pop	{r3, r4, r5, pc}
 8011fdc:	200007b0 	.word	0x200007b0

08011fe0 <_lseek_r>:
 8011fe0:	b538      	push	{r3, r4, r5, lr}
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	4608      	mov	r0, r1
 8011fe6:	4611      	mov	r1, r2
 8011fe8:	2200      	movs	r2, #0
 8011fea:	4d05      	ldr	r5, [pc, #20]	@ (8012000 <_lseek_r+0x20>)
 8011fec:	602a      	str	r2, [r5, #0]
 8011fee:	461a      	mov	r2, r3
 8011ff0:	f7f0 fe31 	bl	8002c56 <_lseek>
 8011ff4:	1c43      	adds	r3, r0, #1
 8011ff6:	d102      	bne.n	8011ffe <_lseek_r+0x1e>
 8011ff8:	682b      	ldr	r3, [r5, #0]
 8011ffa:	b103      	cbz	r3, 8011ffe <_lseek_r+0x1e>
 8011ffc:	6023      	str	r3, [r4, #0]
 8011ffe:	bd38      	pop	{r3, r4, r5, pc}
 8012000:	200007b0 	.word	0x200007b0

08012004 <_read_r>:
 8012004:	b538      	push	{r3, r4, r5, lr}
 8012006:	4604      	mov	r4, r0
 8012008:	4608      	mov	r0, r1
 801200a:	4611      	mov	r1, r2
 801200c:	2200      	movs	r2, #0
 801200e:	4d05      	ldr	r5, [pc, #20]	@ (8012024 <_read_r+0x20>)
 8012010:	602a      	str	r2, [r5, #0]
 8012012:	461a      	mov	r2, r3
 8012014:	f7f0 fdc2 	bl	8002b9c <_read>
 8012018:	1c43      	adds	r3, r0, #1
 801201a:	d102      	bne.n	8012022 <_read_r+0x1e>
 801201c:	682b      	ldr	r3, [r5, #0]
 801201e:	b103      	cbz	r3, 8012022 <_read_r+0x1e>
 8012020:	6023      	str	r3, [r4, #0]
 8012022:	bd38      	pop	{r3, r4, r5, pc}
 8012024:	200007b0 	.word	0x200007b0

08012028 <_write_r>:
 8012028:	b538      	push	{r3, r4, r5, lr}
 801202a:	4604      	mov	r4, r0
 801202c:	4608      	mov	r0, r1
 801202e:	4611      	mov	r1, r2
 8012030:	2200      	movs	r2, #0
 8012032:	4d05      	ldr	r5, [pc, #20]	@ (8012048 <_write_r+0x20>)
 8012034:	602a      	str	r2, [r5, #0]
 8012036:	461a      	mov	r2, r3
 8012038:	f7f0 fdcd 	bl	8002bd6 <_write>
 801203c:	1c43      	adds	r3, r0, #1
 801203e:	d102      	bne.n	8012046 <_write_r+0x1e>
 8012040:	682b      	ldr	r3, [r5, #0]
 8012042:	b103      	cbz	r3, 8012046 <_write_r+0x1e>
 8012044:	6023      	str	r3, [r4, #0]
 8012046:	bd38      	pop	{r3, r4, r5, pc}
 8012048:	200007b0 	.word	0x200007b0

0801204c <__errno>:
 801204c:	4b01      	ldr	r3, [pc, #4]	@ (8012054 <__errno+0x8>)
 801204e:	6818      	ldr	r0, [r3, #0]
 8012050:	4770      	bx	lr
 8012052:	bf00      	nop
 8012054:	200001a4 	.word	0x200001a4

08012058 <__libc_init_array>:
 8012058:	b570      	push	{r4, r5, r6, lr}
 801205a:	2600      	movs	r6, #0
 801205c:	4d0c      	ldr	r5, [pc, #48]	@ (8012090 <__libc_init_array+0x38>)
 801205e:	4c0d      	ldr	r4, [pc, #52]	@ (8012094 <__libc_init_array+0x3c>)
 8012060:	1b64      	subs	r4, r4, r5
 8012062:	10a4      	asrs	r4, r4, #2
 8012064:	42a6      	cmp	r6, r4
 8012066:	d109      	bne.n	801207c <__libc_init_array+0x24>
 8012068:	f001 fe26 	bl	8013cb8 <_init>
 801206c:	2600      	movs	r6, #0
 801206e:	4d0a      	ldr	r5, [pc, #40]	@ (8012098 <__libc_init_array+0x40>)
 8012070:	4c0a      	ldr	r4, [pc, #40]	@ (801209c <__libc_init_array+0x44>)
 8012072:	1b64      	subs	r4, r4, r5
 8012074:	10a4      	asrs	r4, r4, #2
 8012076:	42a6      	cmp	r6, r4
 8012078:	d105      	bne.n	8012086 <__libc_init_array+0x2e>
 801207a:	bd70      	pop	{r4, r5, r6, pc}
 801207c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012080:	4798      	blx	r3
 8012082:	3601      	adds	r6, #1
 8012084:	e7ee      	b.n	8012064 <__libc_init_array+0xc>
 8012086:	f855 3b04 	ldr.w	r3, [r5], #4
 801208a:	4798      	blx	r3
 801208c:	3601      	adds	r6, #1
 801208e:	e7f2      	b.n	8012076 <__libc_init_array+0x1e>
 8012090:	08013ed0 	.word	0x08013ed0
 8012094:	08013ed0 	.word	0x08013ed0
 8012098:	08013ed0 	.word	0x08013ed0
 801209c:	08013ed4 	.word	0x08013ed4

080120a0 <__retarget_lock_init_recursive>:
 80120a0:	4770      	bx	lr

080120a2 <__retarget_lock_acquire_recursive>:
 80120a2:	4770      	bx	lr

080120a4 <__retarget_lock_release_recursive>:
 80120a4:	4770      	bx	lr
	...

080120a8 <_free_r>:
 80120a8:	b538      	push	{r3, r4, r5, lr}
 80120aa:	4605      	mov	r5, r0
 80120ac:	2900      	cmp	r1, #0
 80120ae:	d040      	beq.n	8012132 <_free_r+0x8a>
 80120b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120b4:	1f0c      	subs	r4, r1, #4
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	bfb8      	it	lt
 80120ba:	18e4      	addlt	r4, r4, r3
 80120bc:	f000 f8de 	bl	801227c <__malloc_lock>
 80120c0:	4a1c      	ldr	r2, [pc, #112]	@ (8012134 <_free_r+0x8c>)
 80120c2:	6813      	ldr	r3, [r2, #0]
 80120c4:	b933      	cbnz	r3, 80120d4 <_free_r+0x2c>
 80120c6:	6063      	str	r3, [r4, #4]
 80120c8:	6014      	str	r4, [r2, #0]
 80120ca:	4628      	mov	r0, r5
 80120cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80120d0:	f000 b8da 	b.w	8012288 <__malloc_unlock>
 80120d4:	42a3      	cmp	r3, r4
 80120d6:	d908      	bls.n	80120ea <_free_r+0x42>
 80120d8:	6820      	ldr	r0, [r4, #0]
 80120da:	1821      	adds	r1, r4, r0
 80120dc:	428b      	cmp	r3, r1
 80120de:	bf01      	itttt	eq
 80120e0:	6819      	ldreq	r1, [r3, #0]
 80120e2:	685b      	ldreq	r3, [r3, #4]
 80120e4:	1809      	addeq	r1, r1, r0
 80120e6:	6021      	streq	r1, [r4, #0]
 80120e8:	e7ed      	b.n	80120c6 <_free_r+0x1e>
 80120ea:	461a      	mov	r2, r3
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	b10b      	cbz	r3, 80120f4 <_free_r+0x4c>
 80120f0:	42a3      	cmp	r3, r4
 80120f2:	d9fa      	bls.n	80120ea <_free_r+0x42>
 80120f4:	6811      	ldr	r1, [r2, #0]
 80120f6:	1850      	adds	r0, r2, r1
 80120f8:	42a0      	cmp	r0, r4
 80120fa:	d10b      	bne.n	8012114 <_free_r+0x6c>
 80120fc:	6820      	ldr	r0, [r4, #0]
 80120fe:	4401      	add	r1, r0
 8012100:	1850      	adds	r0, r2, r1
 8012102:	4283      	cmp	r3, r0
 8012104:	6011      	str	r1, [r2, #0]
 8012106:	d1e0      	bne.n	80120ca <_free_r+0x22>
 8012108:	6818      	ldr	r0, [r3, #0]
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	4408      	add	r0, r1
 801210e:	6010      	str	r0, [r2, #0]
 8012110:	6053      	str	r3, [r2, #4]
 8012112:	e7da      	b.n	80120ca <_free_r+0x22>
 8012114:	d902      	bls.n	801211c <_free_r+0x74>
 8012116:	230c      	movs	r3, #12
 8012118:	602b      	str	r3, [r5, #0]
 801211a:	e7d6      	b.n	80120ca <_free_r+0x22>
 801211c:	6820      	ldr	r0, [r4, #0]
 801211e:	1821      	adds	r1, r4, r0
 8012120:	428b      	cmp	r3, r1
 8012122:	bf01      	itttt	eq
 8012124:	6819      	ldreq	r1, [r3, #0]
 8012126:	685b      	ldreq	r3, [r3, #4]
 8012128:	1809      	addeq	r1, r1, r0
 801212a:	6021      	streq	r1, [r4, #0]
 801212c:	6063      	str	r3, [r4, #4]
 801212e:	6054      	str	r4, [r2, #4]
 8012130:	e7cb      	b.n	80120ca <_free_r+0x22>
 8012132:	bd38      	pop	{r3, r4, r5, pc}
 8012134:	200007bc 	.word	0x200007bc

08012138 <sbrk_aligned>:
 8012138:	b570      	push	{r4, r5, r6, lr}
 801213a:	4e0f      	ldr	r6, [pc, #60]	@ (8012178 <sbrk_aligned+0x40>)
 801213c:	460c      	mov	r4, r1
 801213e:	6831      	ldr	r1, [r6, #0]
 8012140:	4605      	mov	r5, r0
 8012142:	b911      	cbnz	r1, 801214a <sbrk_aligned+0x12>
 8012144:	f000 fe16 	bl	8012d74 <_sbrk_r>
 8012148:	6030      	str	r0, [r6, #0]
 801214a:	4621      	mov	r1, r4
 801214c:	4628      	mov	r0, r5
 801214e:	f000 fe11 	bl	8012d74 <_sbrk_r>
 8012152:	1c43      	adds	r3, r0, #1
 8012154:	d103      	bne.n	801215e <sbrk_aligned+0x26>
 8012156:	f04f 34ff 	mov.w	r4, #4294967295
 801215a:	4620      	mov	r0, r4
 801215c:	bd70      	pop	{r4, r5, r6, pc}
 801215e:	1cc4      	adds	r4, r0, #3
 8012160:	f024 0403 	bic.w	r4, r4, #3
 8012164:	42a0      	cmp	r0, r4
 8012166:	d0f8      	beq.n	801215a <sbrk_aligned+0x22>
 8012168:	1a21      	subs	r1, r4, r0
 801216a:	4628      	mov	r0, r5
 801216c:	f000 fe02 	bl	8012d74 <_sbrk_r>
 8012170:	3001      	adds	r0, #1
 8012172:	d1f2      	bne.n	801215a <sbrk_aligned+0x22>
 8012174:	e7ef      	b.n	8012156 <sbrk_aligned+0x1e>
 8012176:	bf00      	nop
 8012178:	200007b8 	.word	0x200007b8

0801217c <_malloc_r>:
 801217c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012180:	1ccd      	adds	r5, r1, #3
 8012182:	f025 0503 	bic.w	r5, r5, #3
 8012186:	3508      	adds	r5, #8
 8012188:	2d0c      	cmp	r5, #12
 801218a:	bf38      	it	cc
 801218c:	250c      	movcc	r5, #12
 801218e:	2d00      	cmp	r5, #0
 8012190:	4606      	mov	r6, r0
 8012192:	db01      	blt.n	8012198 <_malloc_r+0x1c>
 8012194:	42a9      	cmp	r1, r5
 8012196:	d904      	bls.n	80121a2 <_malloc_r+0x26>
 8012198:	230c      	movs	r3, #12
 801219a:	6033      	str	r3, [r6, #0]
 801219c:	2000      	movs	r0, #0
 801219e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012278 <_malloc_r+0xfc>
 80121a6:	f000 f869 	bl	801227c <__malloc_lock>
 80121aa:	f8d8 3000 	ldr.w	r3, [r8]
 80121ae:	461c      	mov	r4, r3
 80121b0:	bb44      	cbnz	r4, 8012204 <_malloc_r+0x88>
 80121b2:	4629      	mov	r1, r5
 80121b4:	4630      	mov	r0, r6
 80121b6:	f7ff ffbf 	bl	8012138 <sbrk_aligned>
 80121ba:	1c43      	adds	r3, r0, #1
 80121bc:	4604      	mov	r4, r0
 80121be:	d158      	bne.n	8012272 <_malloc_r+0xf6>
 80121c0:	f8d8 4000 	ldr.w	r4, [r8]
 80121c4:	4627      	mov	r7, r4
 80121c6:	2f00      	cmp	r7, #0
 80121c8:	d143      	bne.n	8012252 <_malloc_r+0xd6>
 80121ca:	2c00      	cmp	r4, #0
 80121cc:	d04b      	beq.n	8012266 <_malloc_r+0xea>
 80121ce:	6823      	ldr	r3, [r4, #0]
 80121d0:	4639      	mov	r1, r7
 80121d2:	4630      	mov	r0, r6
 80121d4:	eb04 0903 	add.w	r9, r4, r3
 80121d8:	f000 fdcc 	bl	8012d74 <_sbrk_r>
 80121dc:	4581      	cmp	r9, r0
 80121de:	d142      	bne.n	8012266 <_malloc_r+0xea>
 80121e0:	6821      	ldr	r1, [r4, #0]
 80121e2:	4630      	mov	r0, r6
 80121e4:	1a6d      	subs	r5, r5, r1
 80121e6:	4629      	mov	r1, r5
 80121e8:	f7ff ffa6 	bl	8012138 <sbrk_aligned>
 80121ec:	3001      	adds	r0, #1
 80121ee:	d03a      	beq.n	8012266 <_malloc_r+0xea>
 80121f0:	6823      	ldr	r3, [r4, #0]
 80121f2:	442b      	add	r3, r5
 80121f4:	6023      	str	r3, [r4, #0]
 80121f6:	f8d8 3000 	ldr.w	r3, [r8]
 80121fa:	685a      	ldr	r2, [r3, #4]
 80121fc:	bb62      	cbnz	r2, 8012258 <_malloc_r+0xdc>
 80121fe:	f8c8 7000 	str.w	r7, [r8]
 8012202:	e00f      	b.n	8012224 <_malloc_r+0xa8>
 8012204:	6822      	ldr	r2, [r4, #0]
 8012206:	1b52      	subs	r2, r2, r5
 8012208:	d420      	bmi.n	801224c <_malloc_r+0xd0>
 801220a:	2a0b      	cmp	r2, #11
 801220c:	d917      	bls.n	801223e <_malloc_r+0xc2>
 801220e:	1961      	adds	r1, r4, r5
 8012210:	42a3      	cmp	r3, r4
 8012212:	6025      	str	r5, [r4, #0]
 8012214:	bf18      	it	ne
 8012216:	6059      	strne	r1, [r3, #4]
 8012218:	6863      	ldr	r3, [r4, #4]
 801221a:	bf08      	it	eq
 801221c:	f8c8 1000 	streq.w	r1, [r8]
 8012220:	5162      	str	r2, [r4, r5]
 8012222:	604b      	str	r3, [r1, #4]
 8012224:	4630      	mov	r0, r6
 8012226:	f000 f82f 	bl	8012288 <__malloc_unlock>
 801222a:	f104 000b 	add.w	r0, r4, #11
 801222e:	1d23      	adds	r3, r4, #4
 8012230:	f020 0007 	bic.w	r0, r0, #7
 8012234:	1ac2      	subs	r2, r0, r3
 8012236:	bf1c      	itt	ne
 8012238:	1a1b      	subne	r3, r3, r0
 801223a:	50a3      	strne	r3, [r4, r2]
 801223c:	e7af      	b.n	801219e <_malloc_r+0x22>
 801223e:	6862      	ldr	r2, [r4, #4]
 8012240:	42a3      	cmp	r3, r4
 8012242:	bf0c      	ite	eq
 8012244:	f8c8 2000 	streq.w	r2, [r8]
 8012248:	605a      	strne	r2, [r3, #4]
 801224a:	e7eb      	b.n	8012224 <_malloc_r+0xa8>
 801224c:	4623      	mov	r3, r4
 801224e:	6864      	ldr	r4, [r4, #4]
 8012250:	e7ae      	b.n	80121b0 <_malloc_r+0x34>
 8012252:	463c      	mov	r4, r7
 8012254:	687f      	ldr	r7, [r7, #4]
 8012256:	e7b6      	b.n	80121c6 <_malloc_r+0x4a>
 8012258:	461a      	mov	r2, r3
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	42a3      	cmp	r3, r4
 801225e:	d1fb      	bne.n	8012258 <_malloc_r+0xdc>
 8012260:	2300      	movs	r3, #0
 8012262:	6053      	str	r3, [r2, #4]
 8012264:	e7de      	b.n	8012224 <_malloc_r+0xa8>
 8012266:	230c      	movs	r3, #12
 8012268:	4630      	mov	r0, r6
 801226a:	6033      	str	r3, [r6, #0]
 801226c:	f000 f80c 	bl	8012288 <__malloc_unlock>
 8012270:	e794      	b.n	801219c <_malloc_r+0x20>
 8012272:	6005      	str	r5, [r0, #0]
 8012274:	e7d6      	b.n	8012224 <_malloc_r+0xa8>
 8012276:	bf00      	nop
 8012278:	200007bc 	.word	0x200007bc

0801227c <__malloc_lock>:
 801227c:	4801      	ldr	r0, [pc, #4]	@ (8012284 <__malloc_lock+0x8>)
 801227e:	f7ff bf10 	b.w	80120a2 <__retarget_lock_acquire_recursive>
 8012282:	bf00      	nop
 8012284:	200007b4 	.word	0x200007b4

08012288 <__malloc_unlock>:
 8012288:	4801      	ldr	r0, [pc, #4]	@ (8012290 <__malloc_unlock+0x8>)
 801228a:	f7ff bf0b 	b.w	80120a4 <__retarget_lock_release_recursive>
 801228e:	bf00      	nop
 8012290:	200007b4 	.word	0x200007b4

08012294 <__ssputs_r>:
 8012294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012298:	461f      	mov	r7, r3
 801229a:	688e      	ldr	r6, [r1, #8]
 801229c:	4682      	mov	sl, r0
 801229e:	42be      	cmp	r6, r7
 80122a0:	460c      	mov	r4, r1
 80122a2:	4690      	mov	r8, r2
 80122a4:	680b      	ldr	r3, [r1, #0]
 80122a6:	d82d      	bhi.n	8012304 <__ssputs_r+0x70>
 80122a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80122ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80122b0:	d026      	beq.n	8012300 <__ssputs_r+0x6c>
 80122b2:	6965      	ldr	r5, [r4, #20]
 80122b4:	6909      	ldr	r1, [r1, #16]
 80122b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80122ba:	eba3 0901 	sub.w	r9, r3, r1
 80122be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80122c2:	1c7b      	adds	r3, r7, #1
 80122c4:	444b      	add	r3, r9
 80122c6:	106d      	asrs	r5, r5, #1
 80122c8:	429d      	cmp	r5, r3
 80122ca:	bf38      	it	cc
 80122cc:	461d      	movcc	r5, r3
 80122ce:	0553      	lsls	r3, r2, #21
 80122d0:	d527      	bpl.n	8012322 <__ssputs_r+0x8e>
 80122d2:	4629      	mov	r1, r5
 80122d4:	f7ff ff52 	bl	801217c <_malloc_r>
 80122d8:	4606      	mov	r6, r0
 80122da:	b360      	cbz	r0, 8012336 <__ssputs_r+0xa2>
 80122dc:	464a      	mov	r2, r9
 80122de:	6921      	ldr	r1, [r4, #16]
 80122e0:	f000 fd66 	bl	8012db0 <memcpy>
 80122e4:	89a3      	ldrh	r3, [r4, #12]
 80122e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80122ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122ee:	81a3      	strh	r3, [r4, #12]
 80122f0:	6126      	str	r6, [r4, #16]
 80122f2:	444e      	add	r6, r9
 80122f4:	6026      	str	r6, [r4, #0]
 80122f6:	463e      	mov	r6, r7
 80122f8:	6165      	str	r5, [r4, #20]
 80122fa:	eba5 0509 	sub.w	r5, r5, r9
 80122fe:	60a5      	str	r5, [r4, #8]
 8012300:	42be      	cmp	r6, r7
 8012302:	d900      	bls.n	8012306 <__ssputs_r+0x72>
 8012304:	463e      	mov	r6, r7
 8012306:	4632      	mov	r2, r6
 8012308:	4641      	mov	r1, r8
 801230a:	6820      	ldr	r0, [r4, #0]
 801230c:	f000 fcf5 	bl	8012cfa <memmove>
 8012310:	2000      	movs	r0, #0
 8012312:	68a3      	ldr	r3, [r4, #8]
 8012314:	1b9b      	subs	r3, r3, r6
 8012316:	60a3      	str	r3, [r4, #8]
 8012318:	6823      	ldr	r3, [r4, #0]
 801231a:	4433      	add	r3, r6
 801231c:	6023      	str	r3, [r4, #0]
 801231e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012322:	462a      	mov	r2, r5
 8012324:	f000 fd52 	bl	8012dcc <_realloc_r>
 8012328:	4606      	mov	r6, r0
 801232a:	2800      	cmp	r0, #0
 801232c:	d1e0      	bne.n	80122f0 <__ssputs_r+0x5c>
 801232e:	4650      	mov	r0, sl
 8012330:	6921      	ldr	r1, [r4, #16]
 8012332:	f7ff feb9 	bl	80120a8 <_free_r>
 8012336:	230c      	movs	r3, #12
 8012338:	f8ca 3000 	str.w	r3, [sl]
 801233c:	89a3      	ldrh	r3, [r4, #12]
 801233e:	f04f 30ff 	mov.w	r0, #4294967295
 8012342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012346:	81a3      	strh	r3, [r4, #12]
 8012348:	e7e9      	b.n	801231e <__ssputs_r+0x8a>
	...

0801234c <_svfiprintf_r>:
 801234c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012350:	4698      	mov	r8, r3
 8012352:	898b      	ldrh	r3, [r1, #12]
 8012354:	4607      	mov	r7, r0
 8012356:	061b      	lsls	r3, r3, #24
 8012358:	460d      	mov	r5, r1
 801235a:	4614      	mov	r4, r2
 801235c:	b09d      	sub	sp, #116	@ 0x74
 801235e:	d510      	bpl.n	8012382 <_svfiprintf_r+0x36>
 8012360:	690b      	ldr	r3, [r1, #16]
 8012362:	b973      	cbnz	r3, 8012382 <_svfiprintf_r+0x36>
 8012364:	2140      	movs	r1, #64	@ 0x40
 8012366:	f7ff ff09 	bl	801217c <_malloc_r>
 801236a:	6028      	str	r0, [r5, #0]
 801236c:	6128      	str	r0, [r5, #16]
 801236e:	b930      	cbnz	r0, 801237e <_svfiprintf_r+0x32>
 8012370:	230c      	movs	r3, #12
 8012372:	603b      	str	r3, [r7, #0]
 8012374:	f04f 30ff 	mov.w	r0, #4294967295
 8012378:	b01d      	add	sp, #116	@ 0x74
 801237a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801237e:	2340      	movs	r3, #64	@ 0x40
 8012380:	616b      	str	r3, [r5, #20]
 8012382:	2300      	movs	r3, #0
 8012384:	9309      	str	r3, [sp, #36]	@ 0x24
 8012386:	2320      	movs	r3, #32
 8012388:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801238c:	2330      	movs	r3, #48	@ 0x30
 801238e:	f04f 0901 	mov.w	r9, #1
 8012392:	f8cd 800c 	str.w	r8, [sp, #12]
 8012396:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8012530 <_svfiprintf_r+0x1e4>
 801239a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801239e:	4623      	mov	r3, r4
 80123a0:	469a      	mov	sl, r3
 80123a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123a6:	b10a      	cbz	r2, 80123ac <_svfiprintf_r+0x60>
 80123a8:	2a25      	cmp	r2, #37	@ 0x25
 80123aa:	d1f9      	bne.n	80123a0 <_svfiprintf_r+0x54>
 80123ac:	ebba 0b04 	subs.w	fp, sl, r4
 80123b0:	d00b      	beq.n	80123ca <_svfiprintf_r+0x7e>
 80123b2:	465b      	mov	r3, fp
 80123b4:	4622      	mov	r2, r4
 80123b6:	4629      	mov	r1, r5
 80123b8:	4638      	mov	r0, r7
 80123ba:	f7ff ff6b 	bl	8012294 <__ssputs_r>
 80123be:	3001      	adds	r0, #1
 80123c0:	f000 80a7 	beq.w	8012512 <_svfiprintf_r+0x1c6>
 80123c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80123c6:	445a      	add	r2, fp
 80123c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80123ca:	f89a 3000 	ldrb.w	r3, [sl]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	f000 809f 	beq.w	8012512 <_svfiprintf_r+0x1c6>
 80123d4:	2300      	movs	r3, #0
 80123d6:	f04f 32ff 	mov.w	r2, #4294967295
 80123da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123de:	f10a 0a01 	add.w	sl, sl, #1
 80123e2:	9304      	str	r3, [sp, #16]
 80123e4:	9307      	str	r3, [sp, #28]
 80123e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80123ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80123ec:	4654      	mov	r4, sl
 80123ee:	2205      	movs	r2, #5
 80123f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123f4:	484e      	ldr	r0, [pc, #312]	@ (8012530 <_svfiprintf_r+0x1e4>)
 80123f6:	f000 fccd 	bl	8012d94 <memchr>
 80123fa:	9a04      	ldr	r2, [sp, #16]
 80123fc:	b9d8      	cbnz	r0, 8012436 <_svfiprintf_r+0xea>
 80123fe:	06d0      	lsls	r0, r2, #27
 8012400:	bf44      	itt	mi
 8012402:	2320      	movmi	r3, #32
 8012404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012408:	0711      	lsls	r1, r2, #28
 801240a:	bf44      	itt	mi
 801240c:	232b      	movmi	r3, #43	@ 0x2b
 801240e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012412:	f89a 3000 	ldrb.w	r3, [sl]
 8012416:	2b2a      	cmp	r3, #42	@ 0x2a
 8012418:	d015      	beq.n	8012446 <_svfiprintf_r+0xfa>
 801241a:	4654      	mov	r4, sl
 801241c:	2000      	movs	r0, #0
 801241e:	f04f 0c0a 	mov.w	ip, #10
 8012422:	9a07      	ldr	r2, [sp, #28]
 8012424:	4621      	mov	r1, r4
 8012426:	f811 3b01 	ldrb.w	r3, [r1], #1
 801242a:	3b30      	subs	r3, #48	@ 0x30
 801242c:	2b09      	cmp	r3, #9
 801242e:	d94b      	bls.n	80124c8 <_svfiprintf_r+0x17c>
 8012430:	b1b0      	cbz	r0, 8012460 <_svfiprintf_r+0x114>
 8012432:	9207      	str	r2, [sp, #28]
 8012434:	e014      	b.n	8012460 <_svfiprintf_r+0x114>
 8012436:	eba0 0308 	sub.w	r3, r0, r8
 801243a:	fa09 f303 	lsl.w	r3, r9, r3
 801243e:	4313      	orrs	r3, r2
 8012440:	46a2      	mov	sl, r4
 8012442:	9304      	str	r3, [sp, #16]
 8012444:	e7d2      	b.n	80123ec <_svfiprintf_r+0xa0>
 8012446:	9b03      	ldr	r3, [sp, #12]
 8012448:	1d19      	adds	r1, r3, #4
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	9103      	str	r1, [sp, #12]
 801244e:	2b00      	cmp	r3, #0
 8012450:	bfbb      	ittet	lt
 8012452:	425b      	neglt	r3, r3
 8012454:	f042 0202 	orrlt.w	r2, r2, #2
 8012458:	9307      	strge	r3, [sp, #28]
 801245a:	9307      	strlt	r3, [sp, #28]
 801245c:	bfb8      	it	lt
 801245e:	9204      	strlt	r2, [sp, #16]
 8012460:	7823      	ldrb	r3, [r4, #0]
 8012462:	2b2e      	cmp	r3, #46	@ 0x2e
 8012464:	d10a      	bne.n	801247c <_svfiprintf_r+0x130>
 8012466:	7863      	ldrb	r3, [r4, #1]
 8012468:	2b2a      	cmp	r3, #42	@ 0x2a
 801246a:	d132      	bne.n	80124d2 <_svfiprintf_r+0x186>
 801246c:	9b03      	ldr	r3, [sp, #12]
 801246e:	3402      	adds	r4, #2
 8012470:	1d1a      	adds	r2, r3, #4
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	9203      	str	r2, [sp, #12]
 8012476:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801247a:	9305      	str	r3, [sp, #20]
 801247c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8012534 <_svfiprintf_r+0x1e8>
 8012480:	2203      	movs	r2, #3
 8012482:	4650      	mov	r0, sl
 8012484:	7821      	ldrb	r1, [r4, #0]
 8012486:	f000 fc85 	bl	8012d94 <memchr>
 801248a:	b138      	cbz	r0, 801249c <_svfiprintf_r+0x150>
 801248c:	2240      	movs	r2, #64	@ 0x40
 801248e:	9b04      	ldr	r3, [sp, #16]
 8012490:	eba0 000a 	sub.w	r0, r0, sl
 8012494:	4082      	lsls	r2, r0
 8012496:	4313      	orrs	r3, r2
 8012498:	3401      	adds	r4, #1
 801249a:	9304      	str	r3, [sp, #16]
 801249c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124a0:	2206      	movs	r2, #6
 80124a2:	4825      	ldr	r0, [pc, #148]	@ (8012538 <_svfiprintf_r+0x1ec>)
 80124a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80124a8:	f000 fc74 	bl	8012d94 <memchr>
 80124ac:	2800      	cmp	r0, #0
 80124ae:	d036      	beq.n	801251e <_svfiprintf_r+0x1d2>
 80124b0:	4b22      	ldr	r3, [pc, #136]	@ (801253c <_svfiprintf_r+0x1f0>)
 80124b2:	bb1b      	cbnz	r3, 80124fc <_svfiprintf_r+0x1b0>
 80124b4:	9b03      	ldr	r3, [sp, #12]
 80124b6:	3307      	adds	r3, #7
 80124b8:	f023 0307 	bic.w	r3, r3, #7
 80124bc:	3308      	adds	r3, #8
 80124be:	9303      	str	r3, [sp, #12]
 80124c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124c2:	4433      	add	r3, r6
 80124c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80124c6:	e76a      	b.n	801239e <_svfiprintf_r+0x52>
 80124c8:	460c      	mov	r4, r1
 80124ca:	2001      	movs	r0, #1
 80124cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80124d0:	e7a8      	b.n	8012424 <_svfiprintf_r+0xd8>
 80124d2:	2300      	movs	r3, #0
 80124d4:	f04f 0c0a 	mov.w	ip, #10
 80124d8:	4619      	mov	r1, r3
 80124da:	3401      	adds	r4, #1
 80124dc:	9305      	str	r3, [sp, #20]
 80124de:	4620      	mov	r0, r4
 80124e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124e4:	3a30      	subs	r2, #48	@ 0x30
 80124e6:	2a09      	cmp	r2, #9
 80124e8:	d903      	bls.n	80124f2 <_svfiprintf_r+0x1a6>
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d0c6      	beq.n	801247c <_svfiprintf_r+0x130>
 80124ee:	9105      	str	r1, [sp, #20]
 80124f0:	e7c4      	b.n	801247c <_svfiprintf_r+0x130>
 80124f2:	4604      	mov	r4, r0
 80124f4:	2301      	movs	r3, #1
 80124f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80124fa:	e7f0      	b.n	80124de <_svfiprintf_r+0x192>
 80124fc:	ab03      	add	r3, sp, #12
 80124fe:	9300      	str	r3, [sp, #0]
 8012500:	462a      	mov	r2, r5
 8012502:	4638      	mov	r0, r7
 8012504:	4b0e      	ldr	r3, [pc, #56]	@ (8012540 <_svfiprintf_r+0x1f4>)
 8012506:	a904      	add	r1, sp, #16
 8012508:	f3af 8000 	nop.w
 801250c:	1c42      	adds	r2, r0, #1
 801250e:	4606      	mov	r6, r0
 8012510:	d1d6      	bne.n	80124c0 <_svfiprintf_r+0x174>
 8012512:	89ab      	ldrh	r3, [r5, #12]
 8012514:	065b      	lsls	r3, r3, #25
 8012516:	f53f af2d 	bmi.w	8012374 <_svfiprintf_r+0x28>
 801251a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801251c:	e72c      	b.n	8012378 <_svfiprintf_r+0x2c>
 801251e:	ab03      	add	r3, sp, #12
 8012520:	9300      	str	r3, [sp, #0]
 8012522:	462a      	mov	r2, r5
 8012524:	4638      	mov	r0, r7
 8012526:	4b06      	ldr	r3, [pc, #24]	@ (8012540 <_svfiprintf_r+0x1f4>)
 8012528:	a904      	add	r1, sp, #16
 801252a:	f000 f9bd 	bl	80128a8 <_printf_i>
 801252e:	e7ed      	b.n	801250c <_svfiprintf_r+0x1c0>
 8012530:	08013e64 	.word	0x08013e64
 8012534:	08013e6a 	.word	0x08013e6a
 8012538:	08013e6e 	.word	0x08013e6e
 801253c:	00000000 	.word	0x00000000
 8012540:	08012295 	.word	0x08012295

08012544 <__sfputc_r>:
 8012544:	6893      	ldr	r3, [r2, #8]
 8012546:	b410      	push	{r4}
 8012548:	3b01      	subs	r3, #1
 801254a:	2b00      	cmp	r3, #0
 801254c:	6093      	str	r3, [r2, #8]
 801254e:	da07      	bge.n	8012560 <__sfputc_r+0x1c>
 8012550:	6994      	ldr	r4, [r2, #24]
 8012552:	42a3      	cmp	r3, r4
 8012554:	db01      	blt.n	801255a <__sfputc_r+0x16>
 8012556:	290a      	cmp	r1, #10
 8012558:	d102      	bne.n	8012560 <__sfputc_r+0x1c>
 801255a:	bc10      	pop	{r4}
 801255c:	f7ff bc93 	b.w	8011e86 <__swbuf_r>
 8012560:	6813      	ldr	r3, [r2, #0]
 8012562:	1c58      	adds	r0, r3, #1
 8012564:	6010      	str	r0, [r2, #0]
 8012566:	7019      	strb	r1, [r3, #0]
 8012568:	4608      	mov	r0, r1
 801256a:	bc10      	pop	{r4}
 801256c:	4770      	bx	lr

0801256e <__sfputs_r>:
 801256e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012570:	4606      	mov	r6, r0
 8012572:	460f      	mov	r7, r1
 8012574:	4614      	mov	r4, r2
 8012576:	18d5      	adds	r5, r2, r3
 8012578:	42ac      	cmp	r4, r5
 801257a:	d101      	bne.n	8012580 <__sfputs_r+0x12>
 801257c:	2000      	movs	r0, #0
 801257e:	e007      	b.n	8012590 <__sfputs_r+0x22>
 8012580:	463a      	mov	r2, r7
 8012582:	4630      	mov	r0, r6
 8012584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012588:	f7ff ffdc 	bl	8012544 <__sfputc_r>
 801258c:	1c43      	adds	r3, r0, #1
 801258e:	d1f3      	bne.n	8012578 <__sfputs_r+0xa>
 8012590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012594 <_vfiprintf_r>:
 8012594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012598:	460d      	mov	r5, r1
 801259a:	4614      	mov	r4, r2
 801259c:	4698      	mov	r8, r3
 801259e:	4606      	mov	r6, r0
 80125a0:	b09d      	sub	sp, #116	@ 0x74
 80125a2:	b118      	cbz	r0, 80125ac <_vfiprintf_r+0x18>
 80125a4:	6a03      	ldr	r3, [r0, #32]
 80125a6:	b90b      	cbnz	r3, 80125ac <_vfiprintf_r+0x18>
 80125a8:	f7ff fb64 	bl	8011c74 <__sinit>
 80125ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80125ae:	07d9      	lsls	r1, r3, #31
 80125b0:	d405      	bmi.n	80125be <_vfiprintf_r+0x2a>
 80125b2:	89ab      	ldrh	r3, [r5, #12]
 80125b4:	059a      	lsls	r2, r3, #22
 80125b6:	d402      	bmi.n	80125be <_vfiprintf_r+0x2a>
 80125b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80125ba:	f7ff fd72 	bl	80120a2 <__retarget_lock_acquire_recursive>
 80125be:	89ab      	ldrh	r3, [r5, #12]
 80125c0:	071b      	lsls	r3, r3, #28
 80125c2:	d501      	bpl.n	80125c8 <_vfiprintf_r+0x34>
 80125c4:	692b      	ldr	r3, [r5, #16]
 80125c6:	b99b      	cbnz	r3, 80125f0 <_vfiprintf_r+0x5c>
 80125c8:	4629      	mov	r1, r5
 80125ca:	4630      	mov	r0, r6
 80125cc:	f7ff fc9a 	bl	8011f04 <__swsetup_r>
 80125d0:	b170      	cbz	r0, 80125f0 <_vfiprintf_r+0x5c>
 80125d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80125d4:	07dc      	lsls	r4, r3, #31
 80125d6:	d504      	bpl.n	80125e2 <_vfiprintf_r+0x4e>
 80125d8:	f04f 30ff 	mov.w	r0, #4294967295
 80125dc:	b01d      	add	sp, #116	@ 0x74
 80125de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125e2:	89ab      	ldrh	r3, [r5, #12]
 80125e4:	0598      	lsls	r0, r3, #22
 80125e6:	d4f7      	bmi.n	80125d8 <_vfiprintf_r+0x44>
 80125e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80125ea:	f7ff fd5b 	bl	80120a4 <__retarget_lock_release_recursive>
 80125ee:	e7f3      	b.n	80125d8 <_vfiprintf_r+0x44>
 80125f0:	2300      	movs	r3, #0
 80125f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80125f4:	2320      	movs	r3, #32
 80125f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80125fa:	2330      	movs	r3, #48	@ 0x30
 80125fc:	f04f 0901 	mov.w	r9, #1
 8012600:	f8cd 800c 	str.w	r8, [sp, #12]
 8012604:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80127b0 <_vfiprintf_r+0x21c>
 8012608:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801260c:	4623      	mov	r3, r4
 801260e:	469a      	mov	sl, r3
 8012610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012614:	b10a      	cbz	r2, 801261a <_vfiprintf_r+0x86>
 8012616:	2a25      	cmp	r2, #37	@ 0x25
 8012618:	d1f9      	bne.n	801260e <_vfiprintf_r+0x7a>
 801261a:	ebba 0b04 	subs.w	fp, sl, r4
 801261e:	d00b      	beq.n	8012638 <_vfiprintf_r+0xa4>
 8012620:	465b      	mov	r3, fp
 8012622:	4622      	mov	r2, r4
 8012624:	4629      	mov	r1, r5
 8012626:	4630      	mov	r0, r6
 8012628:	f7ff ffa1 	bl	801256e <__sfputs_r>
 801262c:	3001      	adds	r0, #1
 801262e:	f000 80a7 	beq.w	8012780 <_vfiprintf_r+0x1ec>
 8012632:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012634:	445a      	add	r2, fp
 8012636:	9209      	str	r2, [sp, #36]	@ 0x24
 8012638:	f89a 3000 	ldrb.w	r3, [sl]
 801263c:	2b00      	cmp	r3, #0
 801263e:	f000 809f 	beq.w	8012780 <_vfiprintf_r+0x1ec>
 8012642:	2300      	movs	r3, #0
 8012644:	f04f 32ff 	mov.w	r2, #4294967295
 8012648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801264c:	f10a 0a01 	add.w	sl, sl, #1
 8012650:	9304      	str	r3, [sp, #16]
 8012652:	9307      	str	r3, [sp, #28]
 8012654:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012658:	931a      	str	r3, [sp, #104]	@ 0x68
 801265a:	4654      	mov	r4, sl
 801265c:	2205      	movs	r2, #5
 801265e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012662:	4853      	ldr	r0, [pc, #332]	@ (80127b0 <_vfiprintf_r+0x21c>)
 8012664:	f000 fb96 	bl	8012d94 <memchr>
 8012668:	9a04      	ldr	r2, [sp, #16]
 801266a:	b9d8      	cbnz	r0, 80126a4 <_vfiprintf_r+0x110>
 801266c:	06d1      	lsls	r1, r2, #27
 801266e:	bf44      	itt	mi
 8012670:	2320      	movmi	r3, #32
 8012672:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012676:	0713      	lsls	r3, r2, #28
 8012678:	bf44      	itt	mi
 801267a:	232b      	movmi	r3, #43	@ 0x2b
 801267c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012680:	f89a 3000 	ldrb.w	r3, [sl]
 8012684:	2b2a      	cmp	r3, #42	@ 0x2a
 8012686:	d015      	beq.n	80126b4 <_vfiprintf_r+0x120>
 8012688:	4654      	mov	r4, sl
 801268a:	2000      	movs	r0, #0
 801268c:	f04f 0c0a 	mov.w	ip, #10
 8012690:	9a07      	ldr	r2, [sp, #28]
 8012692:	4621      	mov	r1, r4
 8012694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012698:	3b30      	subs	r3, #48	@ 0x30
 801269a:	2b09      	cmp	r3, #9
 801269c:	d94b      	bls.n	8012736 <_vfiprintf_r+0x1a2>
 801269e:	b1b0      	cbz	r0, 80126ce <_vfiprintf_r+0x13a>
 80126a0:	9207      	str	r2, [sp, #28]
 80126a2:	e014      	b.n	80126ce <_vfiprintf_r+0x13a>
 80126a4:	eba0 0308 	sub.w	r3, r0, r8
 80126a8:	fa09 f303 	lsl.w	r3, r9, r3
 80126ac:	4313      	orrs	r3, r2
 80126ae:	46a2      	mov	sl, r4
 80126b0:	9304      	str	r3, [sp, #16]
 80126b2:	e7d2      	b.n	801265a <_vfiprintf_r+0xc6>
 80126b4:	9b03      	ldr	r3, [sp, #12]
 80126b6:	1d19      	adds	r1, r3, #4
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	9103      	str	r1, [sp, #12]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	bfbb      	ittet	lt
 80126c0:	425b      	neglt	r3, r3
 80126c2:	f042 0202 	orrlt.w	r2, r2, #2
 80126c6:	9307      	strge	r3, [sp, #28]
 80126c8:	9307      	strlt	r3, [sp, #28]
 80126ca:	bfb8      	it	lt
 80126cc:	9204      	strlt	r2, [sp, #16]
 80126ce:	7823      	ldrb	r3, [r4, #0]
 80126d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80126d2:	d10a      	bne.n	80126ea <_vfiprintf_r+0x156>
 80126d4:	7863      	ldrb	r3, [r4, #1]
 80126d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80126d8:	d132      	bne.n	8012740 <_vfiprintf_r+0x1ac>
 80126da:	9b03      	ldr	r3, [sp, #12]
 80126dc:	3402      	adds	r4, #2
 80126de:	1d1a      	adds	r2, r3, #4
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	9203      	str	r2, [sp, #12]
 80126e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80126e8:	9305      	str	r3, [sp, #20]
 80126ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80127b4 <_vfiprintf_r+0x220>
 80126ee:	2203      	movs	r2, #3
 80126f0:	4650      	mov	r0, sl
 80126f2:	7821      	ldrb	r1, [r4, #0]
 80126f4:	f000 fb4e 	bl	8012d94 <memchr>
 80126f8:	b138      	cbz	r0, 801270a <_vfiprintf_r+0x176>
 80126fa:	2240      	movs	r2, #64	@ 0x40
 80126fc:	9b04      	ldr	r3, [sp, #16]
 80126fe:	eba0 000a 	sub.w	r0, r0, sl
 8012702:	4082      	lsls	r2, r0
 8012704:	4313      	orrs	r3, r2
 8012706:	3401      	adds	r4, #1
 8012708:	9304      	str	r3, [sp, #16]
 801270a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801270e:	2206      	movs	r2, #6
 8012710:	4829      	ldr	r0, [pc, #164]	@ (80127b8 <_vfiprintf_r+0x224>)
 8012712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012716:	f000 fb3d 	bl	8012d94 <memchr>
 801271a:	2800      	cmp	r0, #0
 801271c:	d03f      	beq.n	801279e <_vfiprintf_r+0x20a>
 801271e:	4b27      	ldr	r3, [pc, #156]	@ (80127bc <_vfiprintf_r+0x228>)
 8012720:	bb1b      	cbnz	r3, 801276a <_vfiprintf_r+0x1d6>
 8012722:	9b03      	ldr	r3, [sp, #12]
 8012724:	3307      	adds	r3, #7
 8012726:	f023 0307 	bic.w	r3, r3, #7
 801272a:	3308      	adds	r3, #8
 801272c:	9303      	str	r3, [sp, #12]
 801272e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012730:	443b      	add	r3, r7
 8012732:	9309      	str	r3, [sp, #36]	@ 0x24
 8012734:	e76a      	b.n	801260c <_vfiprintf_r+0x78>
 8012736:	460c      	mov	r4, r1
 8012738:	2001      	movs	r0, #1
 801273a:	fb0c 3202 	mla	r2, ip, r2, r3
 801273e:	e7a8      	b.n	8012692 <_vfiprintf_r+0xfe>
 8012740:	2300      	movs	r3, #0
 8012742:	f04f 0c0a 	mov.w	ip, #10
 8012746:	4619      	mov	r1, r3
 8012748:	3401      	adds	r4, #1
 801274a:	9305      	str	r3, [sp, #20]
 801274c:	4620      	mov	r0, r4
 801274e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012752:	3a30      	subs	r2, #48	@ 0x30
 8012754:	2a09      	cmp	r2, #9
 8012756:	d903      	bls.n	8012760 <_vfiprintf_r+0x1cc>
 8012758:	2b00      	cmp	r3, #0
 801275a:	d0c6      	beq.n	80126ea <_vfiprintf_r+0x156>
 801275c:	9105      	str	r1, [sp, #20]
 801275e:	e7c4      	b.n	80126ea <_vfiprintf_r+0x156>
 8012760:	4604      	mov	r4, r0
 8012762:	2301      	movs	r3, #1
 8012764:	fb0c 2101 	mla	r1, ip, r1, r2
 8012768:	e7f0      	b.n	801274c <_vfiprintf_r+0x1b8>
 801276a:	ab03      	add	r3, sp, #12
 801276c:	9300      	str	r3, [sp, #0]
 801276e:	462a      	mov	r2, r5
 8012770:	4630      	mov	r0, r6
 8012772:	4b13      	ldr	r3, [pc, #76]	@ (80127c0 <_vfiprintf_r+0x22c>)
 8012774:	a904      	add	r1, sp, #16
 8012776:	f3af 8000 	nop.w
 801277a:	4607      	mov	r7, r0
 801277c:	1c78      	adds	r0, r7, #1
 801277e:	d1d6      	bne.n	801272e <_vfiprintf_r+0x19a>
 8012780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012782:	07d9      	lsls	r1, r3, #31
 8012784:	d405      	bmi.n	8012792 <_vfiprintf_r+0x1fe>
 8012786:	89ab      	ldrh	r3, [r5, #12]
 8012788:	059a      	lsls	r2, r3, #22
 801278a:	d402      	bmi.n	8012792 <_vfiprintf_r+0x1fe>
 801278c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801278e:	f7ff fc89 	bl	80120a4 <__retarget_lock_release_recursive>
 8012792:	89ab      	ldrh	r3, [r5, #12]
 8012794:	065b      	lsls	r3, r3, #25
 8012796:	f53f af1f 	bmi.w	80125d8 <_vfiprintf_r+0x44>
 801279a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801279c:	e71e      	b.n	80125dc <_vfiprintf_r+0x48>
 801279e:	ab03      	add	r3, sp, #12
 80127a0:	9300      	str	r3, [sp, #0]
 80127a2:	462a      	mov	r2, r5
 80127a4:	4630      	mov	r0, r6
 80127a6:	4b06      	ldr	r3, [pc, #24]	@ (80127c0 <_vfiprintf_r+0x22c>)
 80127a8:	a904      	add	r1, sp, #16
 80127aa:	f000 f87d 	bl	80128a8 <_printf_i>
 80127ae:	e7e4      	b.n	801277a <_vfiprintf_r+0x1e6>
 80127b0:	08013e64 	.word	0x08013e64
 80127b4:	08013e6a 	.word	0x08013e6a
 80127b8:	08013e6e 	.word	0x08013e6e
 80127bc:	00000000 	.word	0x00000000
 80127c0:	0801256f 	.word	0x0801256f

080127c4 <_printf_common>:
 80127c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127c8:	4616      	mov	r6, r2
 80127ca:	4698      	mov	r8, r3
 80127cc:	688a      	ldr	r2, [r1, #8]
 80127ce:	690b      	ldr	r3, [r1, #16]
 80127d0:	4607      	mov	r7, r0
 80127d2:	4293      	cmp	r3, r2
 80127d4:	bfb8      	it	lt
 80127d6:	4613      	movlt	r3, r2
 80127d8:	6033      	str	r3, [r6, #0]
 80127da:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80127de:	460c      	mov	r4, r1
 80127e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80127e4:	b10a      	cbz	r2, 80127ea <_printf_common+0x26>
 80127e6:	3301      	adds	r3, #1
 80127e8:	6033      	str	r3, [r6, #0]
 80127ea:	6823      	ldr	r3, [r4, #0]
 80127ec:	0699      	lsls	r1, r3, #26
 80127ee:	bf42      	ittt	mi
 80127f0:	6833      	ldrmi	r3, [r6, #0]
 80127f2:	3302      	addmi	r3, #2
 80127f4:	6033      	strmi	r3, [r6, #0]
 80127f6:	6825      	ldr	r5, [r4, #0]
 80127f8:	f015 0506 	ands.w	r5, r5, #6
 80127fc:	d106      	bne.n	801280c <_printf_common+0x48>
 80127fe:	f104 0a19 	add.w	sl, r4, #25
 8012802:	68e3      	ldr	r3, [r4, #12]
 8012804:	6832      	ldr	r2, [r6, #0]
 8012806:	1a9b      	subs	r3, r3, r2
 8012808:	42ab      	cmp	r3, r5
 801280a:	dc2b      	bgt.n	8012864 <_printf_common+0xa0>
 801280c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012810:	6822      	ldr	r2, [r4, #0]
 8012812:	3b00      	subs	r3, #0
 8012814:	bf18      	it	ne
 8012816:	2301      	movne	r3, #1
 8012818:	0692      	lsls	r2, r2, #26
 801281a:	d430      	bmi.n	801287e <_printf_common+0xba>
 801281c:	4641      	mov	r1, r8
 801281e:	4638      	mov	r0, r7
 8012820:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012824:	47c8      	blx	r9
 8012826:	3001      	adds	r0, #1
 8012828:	d023      	beq.n	8012872 <_printf_common+0xae>
 801282a:	6823      	ldr	r3, [r4, #0]
 801282c:	6922      	ldr	r2, [r4, #16]
 801282e:	f003 0306 	and.w	r3, r3, #6
 8012832:	2b04      	cmp	r3, #4
 8012834:	bf14      	ite	ne
 8012836:	2500      	movne	r5, #0
 8012838:	6833      	ldreq	r3, [r6, #0]
 801283a:	f04f 0600 	mov.w	r6, #0
 801283e:	bf08      	it	eq
 8012840:	68e5      	ldreq	r5, [r4, #12]
 8012842:	f104 041a 	add.w	r4, r4, #26
 8012846:	bf08      	it	eq
 8012848:	1aed      	subeq	r5, r5, r3
 801284a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801284e:	bf08      	it	eq
 8012850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012854:	4293      	cmp	r3, r2
 8012856:	bfc4      	itt	gt
 8012858:	1a9b      	subgt	r3, r3, r2
 801285a:	18ed      	addgt	r5, r5, r3
 801285c:	42b5      	cmp	r5, r6
 801285e:	d11a      	bne.n	8012896 <_printf_common+0xd2>
 8012860:	2000      	movs	r0, #0
 8012862:	e008      	b.n	8012876 <_printf_common+0xb2>
 8012864:	2301      	movs	r3, #1
 8012866:	4652      	mov	r2, sl
 8012868:	4641      	mov	r1, r8
 801286a:	4638      	mov	r0, r7
 801286c:	47c8      	blx	r9
 801286e:	3001      	adds	r0, #1
 8012870:	d103      	bne.n	801287a <_printf_common+0xb6>
 8012872:	f04f 30ff 	mov.w	r0, #4294967295
 8012876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801287a:	3501      	adds	r5, #1
 801287c:	e7c1      	b.n	8012802 <_printf_common+0x3e>
 801287e:	2030      	movs	r0, #48	@ 0x30
 8012880:	18e1      	adds	r1, r4, r3
 8012882:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012886:	1c5a      	adds	r2, r3, #1
 8012888:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801288c:	4422      	add	r2, r4
 801288e:	3302      	adds	r3, #2
 8012890:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012894:	e7c2      	b.n	801281c <_printf_common+0x58>
 8012896:	2301      	movs	r3, #1
 8012898:	4622      	mov	r2, r4
 801289a:	4641      	mov	r1, r8
 801289c:	4638      	mov	r0, r7
 801289e:	47c8      	blx	r9
 80128a0:	3001      	adds	r0, #1
 80128a2:	d0e6      	beq.n	8012872 <_printf_common+0xae>
 80128a4:	3601      	adds	r6, #1
 80128a6:	e7d9      	b.n	801285c <_printf_common+0x98>

080128a8 <_printf_i>:
 80128a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80128ac:	7e0f      	ldrb	r7, [r1, #24]
 80128ae:	4691      	mov	r9, r2
 80128b0:	2f78      	cmp	r7, #120	@ 0x78
 80128b2:	4680      	mov	r8, r0
 80128b4:	460c      	mov	r4, r1
 80128b6:	469a      	mov	sl, r3
 80128b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80128ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80128be:	d807      	bhi.n	80128d0 <_printf_i+0x28>
 80128c0:	2f62      	cmp	r7, #98	@ 0x62
 80128c2:	d80a      	bhi.n	80128da <_printf_i+0x32>
 80128c4:	2f00      	cmp	r7, #0
 80128c6:	f000 80d3 	beq.w	8012a70 <_printf_i+0x1c8>
 80128ca:	2f58      	cmp	r7, #88	@ 0x58
 80128cc:	f000 80ba 	beq.w	8012a44 <_printf_i+0x19c>
 80128d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80128d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80128d8:	e03a      	b.n	8012950 <_printf_i+0xa8>
 80128da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80128de:	2b15      	cmp	r3, #21
 80128e0:	d8f6      	bhi.n	80128d0 <_printf_i+0x28>
 80128e2:	a101      	add	r1, pc, #4	@ (adr r1, 80128e8 <_printf_i+0x40>)
 80128e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80128e8:	08012941 	.word	0x08012941
 80128ec:	08012955 	.word	0x08012955
 80128f0:	080128d1 	.word	0x080128d1
 80128f4:	080128d1 	.word	0x080128d1
 80128f8:	080128d1 	.word	0x080128d1
 80128fc:	080128d1 	.word	0x080128d1
 8012900:	08012955 	.word	0x08012955
 8012904:	080128d1 	.word	0x080128d1
 8012908:	080128d1 	.word	0x080128d1
 801290c:	080128d1 	.word	0x080128d1
 8012910:	080128d1 	.word	0x080128d1
 8012914:	08012a57 	.word	0x08012a57
 8012918:	0801297f 	.word	0x0801297f
 801291c:	08012a11 	.word	0x08012a11
 8012920:	080128d1 	.word	0x080128d1
 8012924:	080128d1 	.word	0x080128d1
 8012928:	08012a79 	.word	0x08012a79
 801292c:	080128d1 	.word	0x080128d1
 8012930:	0801297f 	.word	0x0801297f
 8012934:	080128d1 	.word	0x080128d1
 8012938:	080128d1 	.word	0x080128d1
 801293c:	08012a19 	.word	0x08012a19
 8012940:	6833      	ldr	r3, [r6, #0]
 8012942:	1d1a      	adds	r2, r3, #4
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	6032      	str	r2, [r6, #0]
 8012948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801294c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012950:	2301      	movs	r3, #1
 8012952:	e09e      	b.n	8012a92 <_printf_i+0x1ea>
 8012954:	6833      	ldr	r3, [r6, #0]
 8012956:	6820      	ldr	r0, [r4, #0]
 8012958:	1d19      	adds	r1, r3, #4
 801295a:	6031      	str	r1, [r6, #0]
 801295c:	0606      	lsls	r6, r0, #24
 801295e:	d501      	bpl.n	8012964 <_printf_i+0xbc>
 8012960:	681d      	ldr	r5, [r3, #0]
 8012962:	e003      	b.n	801296c <_printf_i+0xc4>
 8012964:	0645      	lsls	r5, r0, #25
 8012966:	d5fb      	bpl.n	8012960 <_printf_i+0xb8>
 8012968:	f9b3 5000 	ldrsh.w	r5, [r3]
 801296c:	2d00      	cmp	r5, #0
 801296e:	da03      	bge.n	8012978 <_printf_i+0xd0>
 8012970:	232d      	movs	r3, #45	@ 0x2d
 8012972:	426d      	negs	r5, r5
 8012974:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012978:	230a      	movs	r3, #10
 801297a:	4859      	ldr	r0, [pc, #356]	@ (8012ae0 <_printf_i+0x238>)
 801297c:	e011      	b.n	80129a2 <_printf_i+0xfa>
 801297e:	6821      	ldr	r1, [r4, #0]
 8012980:	6833      	ldr	r3, [r6, #0]
 8012982:	0608      	lsls	r0, r1, #24
 8012984:	f853 5b04 	ldr.w	r5, [r3], #4
 8012988:	d402      	bmi.n	8012990 <_printf_i+0xe8>
 801298a:	0649      	lsls	r1, r1, #25
 801298c:	bf48      	it	mi
 801298e:	b2ad      	uxthmi	r5, r5
 8012990:	2f6f      	cmp	r7, #111	@ 0x6f
 8012992:	6033      	str	r3, [r6, #0]
 8012994:	bf14      	ite	ne
 8012996:	230a      	movne	r3, #10
 8012998:	2308      	moveq	r3, #8
 801299a:	4851      	ldr	r0, [pc, #324]	@ (8012ae0 <_printf_i+0x238>)
 801299c:	2100      	movs	r1, #0
 801299e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80129a2:	6866      	ldr	r6, [r4, #4]
 80129a4:	2e00      	cmp	r6, #0
 80129a6:	bfa8      	it	ge
 80129a8:	6821      	ldrge	r1, [r4, #0]
 80129aa:	60a6      	str	r6, [r4, #8]
 80129ac:	bfa4      	itt	ge
 80129ae:	f021 0104 	bicge.w	r1, r1, #4
 80129b2:	6021      	strge	r1, [r4, #0]
 80129b4:	b90d      	cbnz	r5, 80129ba <_printf_i+0x112>
 80129b6:	2e00      	cmp	r6, #0
 80129b8:	d04b      	beq.n	8012a52 <_printf_i+0x1aa>
 80129ba:	4616      	mov	r6, r2
 80129bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80129c0:	fb03 5711 	mls	r7, r3, r1, r5
 80129c4:	5dc7      	ldrb	r7, [r0, r7]
 80129c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80129ca:	462f      	mov	r7, r5
 80129cc:	42bb      	cmp	r3, r7
 80129ce:	460d      	mov	r5, r1
 80129d0:	d9f4      	bls.n	80129bc <_printf_i+0x114>
 80129d2:	2b08      	cmp	r3, #8
 80129d4:	d10b      	bne.n	80129ee <_printf_i+0x146>
 80129d6:	6823      	ldr	r3, [r4, #0]
 80129d8:	07df      	lsls	r7, r3, #31
 80129da:	d508      	bpl.n	80129ee <_printf_i+0x146>
 80129dc:	6923      	ldr	r3, [r4, #16]
 80129de:	6861      	ldr	r1, [r4, #4]
 80129e0:	4299      	cmp	r1, r3
 80129e2:	bfde      	ittt	le
 80129e4:	2330      	movle	r3, #48	@ 0x30
 80129e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80129ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80129ee:	1b92      	subs	r2, r2, r6
 80129f0:	6122      	str	r2, [r4, #16]
 80129f2:	464b      	mov	r3, r9
 80129f4:	4621      	mov	r1, r4
 80129f6:	4640      	mov	r0, r8
 80129f8:	f8cd a000 	str.w	sl, [sp]
 80129fc:	aa03      	add	r2, sp, #12
 80129fe:	f7ff fee1 	bl	80127c4 <_printf_common>
 8012a02:	3001      	adds	r0, #1
 8012a04:	d14a      	bne.n	8012a9c <_printf_i+0x1f4>
 8012a06:	f04f 30ff 	mov.w	r0, #4294967295
 8012a0a:	b004      	add	sp, #16
 8012a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a10:	6823      	ldr	r3, [r4, #0]
 8012a12:	f043 0320 	orr.w	r3, r3, #32
 8012a16:	6023      	str	r3, [r4, #0]
 8012a18:	2778      	movs	r7, #120	@ 0x78
 8012a1a:	4832      	ldr	r0, [pc, #200]	@ (8012ae4 <_printf_i+0x23c>)
 8012a1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012a20:	6823      	ldr	r3, [r4, #0]
 8012a22:	6831      	ldr	r1, [r6, #0]
 8012a24:	061f      	lsls	r7, r3, #24
 8012a26:	f851 5b04 	ldr.w	r5, [r1], #4
 8012a2a:	d402      	bmi.n	8012a32 <_printf_i+0x18a>
 8012a2c:	065f      	lsls	r7, r3, #25
 8012a2e:	bf48      	it	mi
 8012a30:	b2ad      	uxthmi	r5, r5
 8012a32:	6031      	str	r1, [r6, #0]
 8012a34:	07d9      	lsls	r1, r3, #31
 8012a36:	bf44      	itt	mi
 8012a38:	f043 0320 	orrmi.w	r3, r3, #32
 8012a3c:	6023      	strmi	r3, [r4, #0]
 8012a3e:	b11d      	cbz	r5, 8012a48 <_printf_i+0x1a0>
 8012a40:	2310      	movs	r3, #16
 8012a42:	e7ab      	b.n	801299c <_printf_i+0xf4>
 8012a44:	4826      	ldr	r0, [pc, #152]	@ (8012ae0 <_printf_i+0x238>)
 8012a46:	e7e9      	b.n	8012a1c <_printf_i+0x174>
 8012a48:	6823      	ldr	r3, [r4, #0]
 8012a4a:	f023 0320 	bic.w	r3, r3, #32
 8012a4e:	6023      	str	r3, [r4, #0]
 8012a50:	e7f6      	b.n	8012a40 <_printf_i+0x198>
 8012a52:	4616      	mov	r6, r2
 8012a54:	e7bd      	b.n	80129d2 <_printf_i+0x12a>
 8012a56:	6833      	ldr	r3, [r6, #0]
 8012a58:	6825      	ldr	r5, [r4, #0]
 8012a5a:	1d18      	adds	r0, r3, #4
 8012a5c:	6961      	ldr	r1, [r4, #20]
 8012a5e:	6030      	str	r0, [r6, #0]
 8012a60:	062e      	lsls	r6, r5, #24
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	d501      	bpl.n	8012a6a <_printf_i+0x1c2>
 8012a66:	6019      	str	r1, [r3, #0]
 8012a68:	e002      	b.n	8012a70 <_printf_i+0x1c8>
 8012a6a:	0668      	lsls	r0, r5, #25
 8012a6c:	d5fb      	bpl.n	8012a66 <_printf_i+0x1be>
 8012a6e:	8019      	strh	r1, [r3, #0]
 8012a70:	2300      	movs	r3, #0
 8012a72:	4616      	mov	r6, r2
 8012a74:	6123      	str	r3, [r4, #16]
 8012a76:	e7bc      	b.n	80129f2 <_printf_i+0x14a>
 8012a78:	6833      	ldr	r3, [r6, #0]
 8012a7a:	2100      	movs	r1, #0
 8012a7c:	1d1a      	adds	r2, r3, #4
 8012a7e:	6032      	str	r2, [r6, #0]
 8012a80:	681e      	ldr	r6, [r3, #0]
 8012a82:	6862      	ldr	r2, [r4, #4]
 8012a84:	4630      	mov	r0, r6
 8012a86:	f000 f985 	bl	8012d94 <memchr>
 8012a8a:	b108      	cbz	r0, 8012a90 <_printf_i+0x1e8>
 8012a8c:	1b80      	subs	r0, r0, r6
 8012a8e:	6060      	str	r0, [r4, #4]
 8012a90:	6863      	ldr	r3, [r4, #4]
 8012a92:	6123      	str	r3, [r4, #16]
 8012a94:	2300      	movs	r3, #0
 8012a96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a9a:	e7aa      	b.n	80129f2 <_printf_i+0x14a>
 8012a9c:	4632      	mov	r2, r6
 8012a9e:	4649      	mov	r1, r9
 8012aa0:	4640      	mov	r0, r8
 8012aa2:	6923      	ldr	r3, [r4, #16]
 8012aa4:	47d0      	blx	sl
 8012aa6:	3001      	adds	r0, #1
 8012aa8:	d0ad      	beq.n	8012a06 <_printf_i+0x15e>
 8012aaa:	6823      	ldr	r3, [r4, #0]
 8012aac:	079b      	lsls	r3, r3, #30
 8012aae:	d413      	bmi.n	8012ad8 <_printf_i+0x230>
 8012ab0:	68e0      	ldr	r0, [r4, #12]
 8012ab2:	9b03      	ldr	r3, [sp, #12]
 8012ab4:	4298      	cmp	r0, r3
 8012ab6:	bfb8      	it	lt
 8012ab8:	4618      	movlt	r0, r3
 8012aba:	e7a6      	b.n	8012a0a <_printf_i+0x162>
 8012abc:	2301      	movs	r3, #1
 8012abe:	4632      	mov	r2, r6
 8012ac0:	4649      	mov	r1, r9
 8012ac2:	4640      	mov	r0, r8
 8012ac4:	47d0      	blx	sl
 8012ac6:	3001      	adds	r0, #1
 8012ac8:	d09d      	beq.n	8012a06 <_printf_i+0x15e>
 8012aca:	3501      	adds	r5, #1
 8012acc:	68e3      	ldr	r3, [r4, #12]
 8012ace:	9903      	ldr	r1, [sp, #12]
 8012ad0:	1a5b      	subs	r3, r3, r1
 8012ad2:	42ab      	cmp	r3, r5
 8012ad4:	dcf2      	bgt.n	8012abc <_printf_i+0x214>
 8012ad6:	e7eb      	b.n	8012ab0 <_printf_i+0x208>
 8012ad8:	2500      	movs	r5, #0
 8012ada:	f104 0619 	add.w	r6, r4, #25
 8012ade:	e7f5      	b.n	8012acc <_printf_i+0x224>
 8012ae0:	08013e75 	.word	0x08013e75
 8012ae4:	08013e86 	.word	0x08013e86

08012ae8 <__sflush_r>:
 8012ae8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aee:	0716      	lsls	r6, r2, #28
 8012af0:	4605      	mov	r5, r0
 8012af2:	460c      	mov	r4, r1
 8012af4:	d454      	bmi.n	8012ba0 <__sflush_r+0xb8>
 8012af6:	684b      	ldr	r3, [r1, #4]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	dc02      	bgt.n	8012b02 <__sflush_r+0x1a>
 8012afc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	dd48      	ble.n	8012b94 <__sflush_r+0xac>
 8012b02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012b04:	2e00      	cmp	r6, #0
 8012b06:	d045      	beq.n	8012b94 <__sflush_r+0xac>
 8012b08:	2300      	movs	r3, #0
 8012b0a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012b0e:	682f      	ldr	r7, [r5, #0]
 8012b10:	6a21      	ldr	r1, [r4, #32]
 8012b12:	602b      	str	r3, [r5, #0]
 8012b14:	d030      	beq.n	8012b78 <__sflush_r+0x90>
 8012b16:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012b18:	89a3      	ldrh	r3, [r4, #12]
 8012b1a:	0759      	lsls	r1, r3, #29
 8012b1c:	d505      	bpl.n	8012b2a <__sflush_r+0x42>
 8012b1e:	6863      	ldr	r3, [r4, #4]
 8012b20:	1ad2      	subs	r2, r2, r3
 8012b22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012b24:	b10b      	cbz	r3, 8012b2a <__sflush_r+0x42>
 8012b26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012b28:	1ad2      	subs	r2, r2, r3
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	4628      	mov	r0, r5
 8012b2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012b30:	6a21      	ldr	r1, [r4, #32]
 8012b32:	47b0      	blx	r6
 8012b34:	1c43      	adds	r3, r0, #1
 8012b36:	89a3      	ldrh	r3, [r4, #12]
 8012b38:	d106      	bne.n	8012b48 <__sflush_r+0x60>
 8012b3a:	6829      	ldr	r1, [r5, #0]
 8012b3c:	291d      	cmp	r1, #29
 8012b3e:	d82b      	bhi.n	8012b98 <__sflush_r+0xb0>
 8012b40:	4a28      	ldr	r2, [pc, #160]	@ (8012be4 <__sflush_r+0xfc>)
 8012b42:	410a      	asrs	r2, r1
 8012b44:	07d6      	lsls	r6, r2, #31
 8012b46:	d427      	bmi.n	8012b98 <__sflush_r+0xb0>
 8012b48:	2200      	movs	r2, #0
 8012b4a:	6062      	str	r2, [r4, #4]
 8012b4c:	6922      	ldr	r2, [r4, #16]
 8012b4e:	04d9      	lsls	r1, r3, #19
 8012b50:	6022      	str	r2, [r4, #0]
 8012b52:	d504      	bpl.n	8012b5e <__sflush_r+0x76>
 8012b54:	1c42      	adds	r2, r0, #1
 8012b56:	d101      	bne.n	8012b5c <__sflush_r+0x74>
 8012b58:	682b      	ldr	r3, [r5, #0]
 8012b5a:	b903      	cbnz	r3, 8012b5e <__sflush_r+0x76>
 8012b5c:	6560      	str	r0, [r4, #84]	@ 0x54
 8012b5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012b60:	602f      	str	r7, [r5, #0]
 8012b62:	b1b9      	cbz	r1, 8012b94 <__sflush_r+0xac>
 8012b64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012b68:	4299      	cmp	r1, r3
 8012b6a:	d002      	beq.n	8012b72 <__sflush_r+0x8a>
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	f7ff fa9b 	bl	80120a8 <_free_r>
 8012b72:	2300      	movs	r3, #0
 8012b74:	6363      	str	r3, [r4, #52]	@ 0x34
 8012b76:	e00d      	b.n	8012b94 <__sflush_r+0xac>
 8012b78:	2301      	movs	r3, #1
 8012b7a:	4628      	mov	r0, r5
 8012b7c:	47b0      	blx	r6
 8012b7e:	4602      	mov	r2, r0
 8012b80:	1c50      	adds	r0, r2, #1
 8012b82:	d1c9      	bne.n	8012b18 <__sflush_r+0x30>
 8012b84:	682b      	ldr	r3, [r5, #0]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d0c6      	beq.n	8012b18 <__sflush_r+0x30>
 8012b8a:	2b1d      	cmp	r3, #29
 8012b8c:	d001      	beq.n	8012b92 <__sflush_r+0xaa>
 8012b8e:	2b16      	cmp	r3, #22
 8012b90:	d11d      	bne.n	8012bce <__sflush_r+0xe6>
 8012b92:	602f      	str	r7, [r5, #0]
 8012b94:	2000      	movs	r0, #0
 8012b96:	e021      	b.n	8012bdc <__sflush_r+0xf4>
 8012b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b9c:	b21b      	sxth	r3, r3
 8012b9e:	e01a      	b.n	8012bd6 <__sflush_r+0xee>
 8012ba0:	690f      	ldr	r7, [r1, #16]
 8012ba2:	2f00      	cmp	r7, #0
 8012ba4:	d0f6      	beq.n	8012b94 <__sflush_r+0xac>
 8012ba6:	0793      	lsls	r3, r2, #30
 8012ba8:	bf18      	it	ne
 8012baa:	2300      	movne	r3, #0
 8012bac:	680e      	ldr	r6, [r1, #0]
 8012bae:	bf08      	it	eq
 8012bb0:	694b      	ldreq	r3, [r1, #20]
 8012bb2:	1bf6      	subs	r6, r6, r7
 8012bb4:	600f      	str	r7, [r1, #0]
 8012bb6:	608b      	str	r3, [r1, #8]
 8012bb8:	2e00      	cmp	r6, #0
 8012bba:	ddeb      	ble.n	8012b94 <__sflush_r+0xac>
 8012bbc:	4633      	mov	r3, r6
 8012bbe:	463a      	mov	r2, r7
 8012bc0:	4628      	mov	r0, r5
 8012bc2:	6a21      	ldr	r1, [r4, #32]
 8012bc4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8012bc8:	47e0      	blx	ip
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	dc07      	bgt.n	8012bde <__sflush_r+0xf6>
 8012bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8012bda:	81a3      	strh	r3, [r4, #12]
 8012bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bde:	4407      	add	r7, r0
 8012be0:	1a36      	subs	r6, r6, r0
 8012be2:	e7e9      	b.n	8012bb8 <__sflush_r+0xd0>
 8012be4:	dfbffffe 	.word	0xdfbffffe

08012be8 <_fflush_r>:
 8012be8:	b538      	push	{r3, r4, r5, lr}
 8012bea:	690b      	ldr	r3, [r1, #16]
 8012bec:	4605      	mov	r5, r0
 8012bee:	460c      	mov	r4, r1
 8012bf0:	b913      	cbnz	r3, 8012bf8 <_fflush_r+0x10>
 8012bf2:	2500      	movs	r5, #0
 8012bf4:	4628      	mov	r0, r5
 8012bf6:	bd38      	pop	{r3, r4, r5, pc}
 8012bf8:	b118      	cbz	r0, 8012c02 <_fflush_r+0x1a>
 8012bfa:	6a03      	ldr	r3, [r0, #32]
 8012bfc:	b90b      	cbnz	r3, 8012c02 <_fflush_r+0x1a>
 8012bfe:	f7ff f839 	bl	8011c74 <__sinit>
 8012c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d0f3      	beq.n	8012bf2 <_fflush_r+0xa>
 8012c0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012c0c:	07d0      	lsls	r0, r2, #31
 8012c0e:	d404      	bmi.n	8012c1a <_fflush_r+0x32>
 8012c10:	0599      	lsls	r1, r3, #22
 8012c12:	d402      	bmi.n	8012c1a <_fflush_r+0x32>
 8012c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c16:	f7ff fa44 	bl	80120a2 <__retarget_lock_acquire_recursive>
 8012c1a:	4628      	mov	r0, r5
 8012c1c:	4621      	mov	r1, r4
 8012c1e:	f7ff ff63 	bl	8012ae8 <__sflush_r>
 8012c22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012c24:	4605      	mov	r5, r0
 8012c26:	07da      	lsls	r2, r3, #31
 8012c28:	d4e4      	bmi.n	8012bf4 <_fflush_r+0xc>
 8012c2a:	89a3      	ldrh	r3, [r4, #12]
 8012c2c:	059b      	lsls	r3, r3, #22
 8012c2e:	d4e1      	bmi.n	8012bf4 <_fflush_r+0xc>
 8012c30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c32:	f7ff fa37 	bl	80120a4 <__retarget_lock_release_recursive>
 8012c36:	e7dd      	b.n	8012bf4 <_fflush_r+0xc>

08012c38 <__swhatbuf_r>:
 8012c38:	b570      	push	{r4, r5, r6, lr}
 8012c3a:	460c      	mov	r4, r1
 8012c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c40:	4615      	mov	r5, r2
 8012c42:	2900      	cmp	r1, #0
 8012c44:	461e      	mov	r6, r3
 8012c46:	b096      	sub	sp, #88	@ 0x58
 8012c48:	da0c      	bge.n	8012c64 <__swhatbuf_r+0x2c>
 8012c4a:	89a3      	ldrh	r3, [r4, #12]
 8012c4c:	2100      	movs	r1, #0
 8012c4e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012c52:	bf14      	ite	ne
 8012c54:	2340      	movne	r3, #64	@ 0x40
 8012c56:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012c5a:	2000      	movs	r0, #0
 8012c5c:	6031      	str	r1, [r6, #0]
 8012c5e:	602b      	str	r3, [r5, #0]
 8012c60:	b016      	add	sp, #88	@ 0x58
 8012c62:	bd70      	pop	{r4, r5, r6, pc}
 8012c64:	466a      	mov	r2, sp
 8012c66:	f000 f863 	bl	8012d30 <_fstat_r>
 8012c6a:	2800      	cmp	r0, #0
 8012c6c:	dbed      	blt.n	8012c4a <__swhatbuf_r+0x12>
 8012c6e:	9901      	ldr	r1, [sp, #4]
 8012c70:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012c74:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012c78:	4259      	negs	r1, r3
 8012c7a:	4159      	adcs	r1, r3
 8012c7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012c80:	e7eb      	b.n	8012c5a <__swhatbuf_r+0x22>

08012c82 <__smakebuf_r>:
 8012c82:	898b      	ldrh	r3, [r1, #12]
 8012c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c86:	079d      	lsls	r5, r3, #30
 8012c88:	4606      	mov	r6, r0
 8012c8a:	460c      	mov	r4, r1
 8012c8c:	d507      	bpl.n	8012c9e <__smakebuf_r+0x1c>
 8012c8e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012c92:	6023      	str	r3, [r4, #0]
 8012c94:	6123      	str	r3, [r4, #16]
 8012c96:	2301      	movs	r3, #1
 8012c98:	6163      	str	r3, [r4, #20]
 8012c9a:	b003      	add	sp, #12
 8012c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c9e:	466a      	mov	r2, sp
 8012ca0:	ab01      	add	r3, sp, #4
 8012ca2:	f7ff ffc9 	bl	8012c38 <__swhatbuf_r>
 8012ca6:	9f00      	ldr	r7, [sp, #0]
 8012ca8:	4605      	mov	r5, r0
 8012caa:	4639      	mov	r1, r7
 8012cac:	4630      	mov	r0, r6
 8012cae:	f7ff fa65 	bl	801217c <_malloc_r>
 8012cb2:	b948      	cbnz	r0, 8012cc8 <__smakebuf_r+0x46>
 8012cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cb8:	059a      	lsls	r2, r3, #22
 8012cba:	d4ee      	bmi.n	8012c9a <__smakebuf_r+0x18>
 8012cbc:	f023 0303 	bic.w	r3, r3, #3
 8012cc0:	f043 0302 	orr.w	r3, r3, #2
 8012cc4:	81a3      	strh	r3, [r4, #12]
 8012cc6:	e7e2      	b.n	8012c8e <__smakebuf_r+0xc>
 8012cc8:	89a3      	ldrh	r3, [r4, #12]
 8012cca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012cd2:	81a3      	strh	r3, [r4, #12]
 8012cd4:	9b01      	ldr	r3, [sp, #4]
 8012cd6:	6020      	str	r0, [r4, #0]
 8012cd8:	b15b      	cbz	r3, 8012cf2 <__smakebuf_r+0x70>
 8012cda:	4630      	mov	r0, r6
 8012cdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ce0:	f000 f838 	bl	8012d54 <_isatty_r>
 8012ce4:	b128      	cbz	r0, 8012cf2 <__smakebuf_r+0x70>
 8012ce6:	89a3      	ldrh	r3, [r4, #12]
 8012ce8:	f023 0303 	bic.w	r3, r3, #3
 8012cec:	f043 0301 	orr.w	r3, r3, #1
 8012cf0:	81a3      	strh	r3, [r4, #12]
 8012cf2:	89a3      	ldrh	r3, [r4, #12]
 8012cf4:	431d      	orrs	r5, r3
 8012cf6:	81a5      	strh	r5, [r4, #12]
 8012cf8:	e7cf      	b.n	8012c9a <__smakebuf_r+0x18>

08012cfa <memmove>:
 8012cfa:	4288      	cmp	r0, r1
 8012cfc:	b510      	push	{r4, lr}
 8012cfe:	eb01 0402 	add.w	r4, r1, r2
 8012d02:	d902      	bls.n	8012d0a <memmove+0x10>
 8012d04:	4284      	cmp	r4, r0
 8012d06:	4623      	mov	r3, r4
 8012d08:	d807      	bhi.n	8012d1a <memmove+0x20>
 8012d0a:	1e43      	subs	r3, r0, #1
 8012d0c:	42a1      	cmp	r1, r4
 8012d0e:	d008      	beq.n	8012d22 <memmove+0x28>
 8012d10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012d18:	e7f8      	b.n	8012d0c <memmove+0x12>
 8012d1a:	4601      	mov	r1, r0
 8012d1c:	4402      	add	r2, r0
 8012d1e:	428a      	cmp	r2, r1
 8012d20:	d100      	bne.n	8012d24 <memmove+0x2a>
 8012d22:	bd10      	pop	{r4, pc}
 8012d24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012d28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012d2c:	e7f7      	b.n	8012d1e <memmove+0x24>
	...

08012d30 <_fstat_r>:
 8012d30:	b538      	push	{r3, r4, r5, lr}
 8012d32:	2300      	movs	r3, #0
 8012d34:	4d06      	ldr	r5, [pc, #24]	@ (8012d50 <_fstat_r+0x20>)
 8012d36:	4604      	mov	r4, r0
 8012d38:	4608      	mov	r0, r1
 8012d3a:	4611      	mov	r1, r2
 8012d3c:	602b      	str	r3, [r5, #0]
 8012d3e:	f7ef ff71 	bl	8002c24 <_fstat>
 8012d42:	1c43      	adds	r3, r0, #1
 8012d44:	d102      	bne.n	8012d4c <_fstat_r+0x1c>
 8012d46:	682b      	ldr	r3, [r5, #0]
 8012d48:	b103      	cbz	r3, 8012d4c <_fstat_r+0x1c>
 8012d4a:	6023      	str	r3, [r4, #0]
 8012d4c:	bd38      	pop	{r3, r4, r5, pc}
 8012d4e:	bf00      	nop
 8012d50:	200007b0 	.word	0x200007b0

08012d54 <_isatty_r>:
 8012d54:	b538      	push	{r3, r4, r5, lr}
 8012d56:	2300      	movs	r3, #0
 8012d58:	4d05      	ldr	r5, [pc, #20]	@ (8012d70 <_isatty_r+0x1c>)
 8012d5a:	4604      	mov	r4, r0
 8012d5c:	4608      	mov	r0, r1
 8012d5e:	602b      	str	r3, [r5, #0]
 8012d60:	f7ef ff6f 	bl	8002c42 <_isatty>
 8012d64:	1c43      	adds	r3, r0, #1
 8012d66:	d102      	bne.n	8012d6e <_isatty_r+0x1a>
 8012d68:	682b      	ldr	r3, [r5, #0]
 8012d6a:	b103      	cbz	r3, 8012d6e <_isatty_r+0x1a>
 8012d6c:	6023      	str	r3, [r4, #0]
 8012d6e:	bd38      	pop	{r3, r4, r5, pc}
 8012d70:	200007b0 	.word	0x200007b0

08012d74 <_sbrk_r>:
 8012d74:	b538      	push	{r3, r4, r5, lr}
 8012d76:	2300      	movs	r3, #0
 8012d78:	4d05      	ldr	r5, [pc, #20]	@ (8012d90 <_sbrk_r+0x1c>)
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	4608      	mov	r0, r1
 8012d7e:	602b      	str	r3, [r5, #0]
 8012d80:	f7ef ff76 	bl	8002c70 <_sbrk>
 8012d84:	1c43      	adds	r3, r0, #1
 8012d86:	d102      	bne.n	8012d8e <_sbrk_r+0x1a>
 8012d88:	682b      	ldr	r3, [r5, #0]
 8012d8a:	b103      	cbz	r3, 8012d8e <_sbrk_r+0x1a>
 8012d8c:	6023      	str	r3, [r4, #0]
 8012d8e:	bd38      	pop	{r3, r4, r5, pc}
 8012d90:	200007b0 	.word	0x200007b0

08012d94 <memchr>:
 8012d94:	4603      	mov	r3, r0
 8012d96:	b510      	push	{r4, lr}
 8012d98:	b2c9      	uxtb	r1, r1
 8012d9a:	4402      	add	r2, r0
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	4618      	mov	r0, r3
 8012da0:	d101      	bne.n	8012da6 <memchr+0x12>
 8012da2:	2000      	movs	r0, #0
 8012da4:	e003      	b.n	8012dae <memchr+0x1a>
 8012da6:	7804      	ldrb	r4, [r0, #0]
 8012da8:	3301      	adds	r3, #1
 8012daa:	428c      	cmp	r4, r1
 8012dac:	d1f6      	bne.n	8012d9c <memchr+0x8>
 8012dae:	bd10      	pop	{r4, pc}

08012db0 <memcpy>:
 8012db0:	440a      	add	r2, r1
 8012db2:	4291      	cmp	r1, r2
 8012db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8012db8:	d100      	bne.n	8012dbc <memcpy+0xc>
 8012dba:	4770      	bx	lr
 8012dbc:	b510      	push	{r4, lr}
 8012dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012dc2:	4291      	cmp	r1, r2
 8012dc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012dc8:	d1f9      	bne.n	8012dbe <memcpy+0xe>
 8012dca:	bd10      	pop	{r4, pc}

08012dcc <_realloc_r>:
 8012dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dd0:	4680      	mov	r8, r0
 8012dd2:	4615      	mov	r5, r2
 8012dd4:	460c      	mov	r4, r1
 8012dd6:	b921      	cbnz	r1, 8012de2 <_realloc_r+0x16>
 8012dd8:	4611      	mov	r1, r2
 8012dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012dde:	f7ff b9cd 	b.w	801217c <_malloc_r>
 8012de2:	b92a      	cbnz	r2, 8012df0 <_realloc_r+0x24>
 8012de4:	f7ff f960 	bl	80120a8 <_free_r>
 8012de8:	2400      	movs	r4, #0
 8012dea:	4620      	mov	r0, r4
 8012dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012df0:	f000 f81a 	bl	8012e28 <_malloc_usable_size_r>
 8012df4:	4285      	cmp	r5, r0
 8012df6:	4606      	mov	r6, r0
 8012df8:	d802      	bhi.n	8012e00 <_realloc_r+0x34>
 8012dfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012dfe:	d8f4      	bhi.n	8012dea <_realloc_r+0x1e>
 8012e00:	4629      	mov	r1, r5
 8012e02:	4640      	mov	r0, r8
 8012e04:	f7ff f9ba 	bl	801217c <_malloc_r>
 8012e08:	4607      	mov	r7, r0
 8012e0a:	2800      	cmp	r0, #0
 8012e0c:	d0ec      	beq.n	8012de8 <_realloc_r+0x1c>
 8012e0e:	42b5      	cmp	r5, r6
 8012e10:	462a      	mov	r2, r5
 8012e12:	4621      	mov	r1, r4
 8012e14:	bf28      	it	cs
 8012e16:	4632      	movcs	r2, r6
 8012e18:	f7ff ffca 	bl	8012db0 <memcpy>
 8012e1c:	4621      	mov	r1, r4
 8012e1e:	4640      	mov	r0, r8
 8012e20:	f7ff f942 	bl	80120a8 <_free_r>
 8012e24:	463c      	mov	r4, r7
 8012e26:	e7e0      	b.n	8012dea <_realloc_r+0x1e>

08012e28 <_malloc_usable_size_r>:
 8012e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e2c:	1f18      	subs	r0, r3, #4
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	bfbc      	itt	lt
 8012e32:	580b      	ldrlt	r3, [r1, r0]
 8012e34:	18c0      	addlt	r0, r0, r3
 8012e36:	4770      	bx	lr

08012e38 <pow>:
 8012e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e3c:	4614      	mov	r4, r2
 8012e3e:	461d      	mov	r5, r3
 8012e40:	4680      	mov	r8, r0
 8012e42:	4689      	mov	r9, r1
 8012e44:	f000 f898 	bl	8012f78 <__ieee754_pow>
 8012e48:	4622      	mov	r2, r4
 8012e4a:	4606      	mov	r6, r0
 8012e4c:	460f      	mov	r7, r1
 8012e4e:	462b      	mov	r3, r5
 8012e50:	4620      	mov	r0, r4
 8012e52:	4629      	mov	r1, r5
 8012e54:	f7ed fdea 	bl	8000a2c <__aeabi_dcmpun>
 8012e58:	bbc8      	cbnz	r0, 8012ece <pow+0x96>
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	4640      	mov	r0, r8
 8012e60:	4649      	mov	r1, r9
 8012e62:	f7ed fdb1 	bl	80009c8 <__aeabi_dcmpeq>
 8012e66:	b1b8      	cbz	r0, 8012e98 <pow+0x60>
 8012e68:	2200      	movs	r2, #0
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	4629      	mov	r1, r5
 8012e70:	f7ed fdaa 	bl	80009c8 <__aeabi_dcmpeq>
 8012e74:	2800      	cmp	r0, #0
 8012e76:	d141      	bne.n	8012efc <pow+0xc4>
 8012e78:	4620      	mov	r0, r4
 8012e7a:	4629      	mov	r1, r5
 8012e7c:	f000 f844 	bl	8012f08 <finite>
 8012e80:	b328      	cbz	r0, 8012ece <pow+0x96>
 8012e82:	2200      	movs	r2, #0
 8012e84:	2300      	movs	r3, #0
 8012e86:	4620      	mov	r0, r4
 8012e88:	4629      	mov	r1, r5
 8012e8a:	f7ed fda7 	bl	80009dc <__aeabi_dcmplt>
 8012e8e:	b1f0      	cbz	r0, 8012ece <pow+0x96>
 8012e90:	f7ff f8dc 	bl	801204c <__errno>
 8012e94:	2322      	movs	r3, #34	@ 0x22
 8012e96:	e019      	b.n	8012ecc <pow+0x94>
 8012e98:	4630      	mov	r0, r6
 8012e9a:	4639      	mov	r1, r7
 8012e9c:	f000 f834 	bl	8012f08 <finite>
 8012ea0:	b9c8      	cbnz	r0, 8012ed6 <pow+0x9e>
 8012ea2:	4640      	mov	r0, r8
 8012ea4:	4649      	mov	r1, r9
 8012ea6:	f000 f82f 	bl	8012f08 <finite>
 8012eaa:	b1a0      	cbz	r0, 8012ed6 <pow+0x9e>
 8012eac:	4620      	mov	r0, r4
 8012eae:	4629      	mov	r1, r5
 8012eb0:	f000 f82a 	bl	8012f08 <finite>
 8012eb4:	b178      	cbz	r0, 8012ed6 <pow+0x9e>
 8012eb6:	4632      	mov	r2, r6
 8012eb8:	463b      	mov	r3, r7
 8012eba:	4630      	mov	r0, r6
 8012ebc:	4639      	mov	r1, r7
 8012ebe:	f7ed fdb5 	bl	8000a2c <__aeabi_dcmpun>
 8012ec2:	2800      	cmp	r0, #0
 8012ec4:	d0e4      	beq.n	8012e90 <pow+0x58>
 8012ec6:	f7ff f8c1 	bl	801204c <__errno>
 8012eca:	2321      	movs	r3, #33	@ 0x21
 8012ecc:	6003      	str	r3, [r0, #0]
 8012ece:	4630      	mov	r0, r6
 8012ed0:	4639      	mov	r1, r7
 8012ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	2300      	movs	r3, #0
 8012eda:	4630      	mov	r0, r6
 8012edc:	4639      	mov	r1, r7
 8012ede:	f7ed fd73 	bl	80009c8 <__aeabi_dcmpeq>
 8012ee2:	2800      	cmp	r0, #0
 8012ee4:	d0f3      	beq.n	8012ece <pow+0x96>
 8012ee6:	4640      	mov	r0, r8
 8012ee8:	4649      	mov	r1, r9
 8012eea:	f000 f80d 	bl	8012f08 <finite>
 8012eee:	2800      	cmp	r0, #0
 8012ef0:	d0ed      	beq.n	8012ece <pow+0x96>
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	4629      	mov	r1, r5
 8012ef6:	f000 f807 	bl	8012f08 <finite>
 8012efa:	e7c8      	b.n	8012e8e <pow+0x56>
 8012efc:	2600      	movs	r6, #0
 8012efe:	4f01      	ldr	r7, [pc, #4]	@ (8012f04 <pow+0xcc>)
 8012f00:	e7e5      	b.n	8012ece <pow+0x96>
 8012f02:	bf00      	nop
 8012f04:	3ff00000 	.word	0x3ff00000

08012f08 <finite>:
 8012f08:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8012f0c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012f10:	0fc0      	lsrs	r0, r0, #31
 8012f12:	4770      	bx	lr

08012f14 <trunc>:
 8012f14:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
 8012f18:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8012f1c:	f2a5 34ff 	subw	r4, r5, #1023	@ 0x3ff
 8012f20:	2c13      	cmp	r4, #19
 8012f22:	4683      	mov	fp, r0
 8012f24:	468c      	mov	ip, r1
 8012f26:	dc13      	bgt.n	8012f50 <trunc+0x3c>
 8012f28:	2c00      	cmp	r4, #0
 8012f2a:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8012f2e:	da06      	bge.n	8012f3e <trunc+0x2a>
 8012f30:	2200      	movs	r2, #0
 8012f32:	46ac      	mov	ip, r5
 8012f34:	4693      	mov	fp, r2
 8012f36:	4658      	mov	r0, fp
 8012f38:	4661      	mov	r1, ip
 8012f3a:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
 8012f3e:	2000      	movs	r0, #0
 8012f40:	4b0c      	ldr	r3, [pc, #48]	@ (8012f74 <trunc+0x60>)
 8012f42:	4123      	asrs	r3, r4
 8012f44:	400b      	ands	r3, r1
 8012f46:	ea43 0105 	orr.w	r1, r3, r5
 8012f4a:	4683      	mov	fp, r0
 8012f4c:	468c      	mov	ip, r1
 8012f4e:	e7f2      	b.n	8012f36 <trunc+0x22>
 8012f50:	2c33      	cmp	r4, #51	@ 0x33
 8012f52:	dd07      	ble.n	8012f64 <trunc+0x50>
 8012f54:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 8012f58:	d1ed      	bne.n	8012f36 <trunc+0x22>
 8012f5a:	4602      	mov	r2, r0
 8012f5c:	460b      	mov	r3, r1
 8012f5e:	f7ed f915 	bl	800018c <__adddf3>
 8012f62:	e7f2      	b.n	8012f4a <trunc+0x36>
 8012f64:	f04f 33ff 	mov.w	r3, #4294967295
 8012f68:	f2a5 4513 	subw	r5, r5, #1043	@ 0x413
 8012f6c:	40eb      	lsrs	r3, r5
 8012f6e:	ea20 0003 	bic.w	r0, r0, r3
 8012f72:	e7ea      	b.n	8012f4a <trunc+0x36>
 8012f74:	fff00000 	.word	0xfff00000

08012f78 <__ieee754_pow>:
 8012f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f7c:	b091      	sub	sp, #68	@ 0x44
 8012f7e:	e9cd 2300 	strd	r2, r3, [sp]
 8012f82:	468b      	mov	fp, r1
 8012f84:	e9dd 1800 	ldrd	r1, r8, [sp]
 8012f88:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8012f8c:	4682      	mov	sl, r0
 8012f8e:	ea57 0001 	orrs.w	r0, r7, r1
 8012f92:	d112      	bne.n	8012fba <__ieee754_pow+0x42>
 8012f94:	4653      	mov	r3, sl
 8012f96:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8012f9a:	18db      	adds	r3, r3, r3
 8012f9c:	4152      	adcs	r2, r2
 8012f9e:	4298      	cmp	r0, r3
 8012fa0:	4b91      	ldr	r3, [pc, #580]	@ (80131e8 <__ieee754_pow+0x270>)
 8012fa2:	4193      	sbcs	r3, r2
 8012fa4:	f080 84ce 	bcs.w	8013944 <__ieee754_pow+0x9cc>
 8012fa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012fac:	4650      	mov	r0, sl
 8012fae:	4659      	mov	r1, fp
 8012fb0:	f7ed f8ec 	bl	800018c <__adddf3>
 8012fb4:	b011      	add	sp, #68	@ 0x44
 8012fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fba:	4b8c      	ldr	r3, [pc, #560]	@ (80131ec <__ieee754_pow+0x274>)
 8012fbc:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8012fc0:	429e      	cmp	r6, r3
 8012fc2:	465d      	mov	r5, fp
 8012fc4:	46d1      	mov	r9, sl
 8012fc6:	d807      	bhi.n	8012fd8 <__ieee754_pow+0x60>
 8012fc8:	d102      	bne.n	8012fd0 <__ieee754_pow+0x58>
 8012fca:	f1ba 0f00 	cmp.w	sl, #0
 8012fce:	d1eb      	bne.n	8012fa8 <__ieee754_pow+0x30>
 8012fd0:	429f      	cmp	r7, r3
 8012fd2:	d801      	bhi.n	8012fd8 <__ieee754_pow+0x60>
 8012fd4:	d10f      	bne.n	8012ff6 <__ieee754_pow+0x7e>
 8012fd6:	b171      	cbz	r1, 8012ff6 <__ieee754_pow+0x7e>
 8012fd8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8012fdc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8012fe0:	ea55 0509 	orrs.w	r5, r5, r9
 8012fe4:	d1e0      	bne.n	8012fa8 <__ieee754_pow+0x30>
 8012fe6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012fea:	18db      	adds	r3, r3, r3
 8012fec:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8012ff0:	4152      	adcs	r2, r2
 8012ff2:	429d      	cmp	r5, r3
 8012ff4:	e7d4      	b.n	8012fa0 <__ieee754_pow+0x28>
 8012ff6:	2d00      	cmp	r5, #0
 8012ff8:	4633      	mov	r3, r6
 8012ffa:	da39      	bge.n	8013070 <__ieee754_pow+0xf8>
 8012ffc:	4a7c      	ldr	r2, [pc, #496]	@ (80131f0 <__ieee754_pow+0x278>)
 8012ffe:	4297      	cmp	r7, r2
 8013000:	d84e      	bhi.n	80130a0 <__ieee754_pow+0x128>
 8013002:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8013006:	4297      	cmp	r7, r2
 8013008:	f240 84ab 	bls.w	8013962 <__ieee754_pow+0x9ea>
 801300c:	153a      	asrs	r2, r7, #20
 801300e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013012:	2a14      	cmp	r2, #20
 8013014:	dd0f      	ble.n	8013036 <__ieee754_pow+0xbe>
 8013016:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801301a:	fa21 f402 	lsr.w	r4, r1, r2
 801301e:	fa04 f202 	lsl.w	r2, r4, r2
 8013022:	428a      	cmp	r2, r1
 8013024:	f040 849d 	bne.w	8013962 <__ieee754_pow+0x9ea>
 8013028:	f004 0401 	and.w	r4, r4, #1
 801302c:	f1c4 0402 	rsb	r4, r4, #2
 8013030:	2900      	cmp	r1, #0
 8013032:	d15a      	bne.n	80130ea <__ieee754_pow+0x172>
 8013034:	e00e      	b.n	8013054 <__ieee754_pow+0xdc>
 8013036:	2900      	cmp	r1, #0
 8013038:	d156      	bne.n	80130e8 <__ieee754_pow+0x170>
 801303a:	f1c2 0214 	rsb	r2, r2, #20
 801303e:	fa47 f402 	asr.w	r4, r7, r2
 8013042:	fa04 f202 	lsl.w	r2, r4, r2
 8013046:	42ba      	cmp	r2, r7
 8013048:	f040 8488 	bne.w	801395c <__ieee754_pow+0x9e4>
 801304c:	f004 0401 	and.w	r4, r4, #1
 8013050:	f1c4 0402 	rsb	r4, r4, #2
 8013054:	4a67      	ldr	r2, [pc, #412]	@ (80131f4 <__ieee754_pow+0x27c>)
 8013056:	4297      	cmp	r7, r2
 8013058:	d130      	bne.n	80130bc <__ieee754_pow+0x144>
 801305a:	f1b8 0f00 	cmp.w	r8, #0
 801305e:	f280 8479 	bge.w	8013954 <__ieee754_pow+0x9dc>
 8013062:	4652      	mov	r2, sl
 8013064:	465b      	mov	r3, fp
 8013066:	2000      	movs	r0, #0
 8013068:	4962      	ldr	r1, [pc, #392]	@ (80131f4 <__ieee754_pow+0x27c>)
 801306a:	f7ed fb6f 	bl	800074c <__aeabi_ddiv>
 801306e:	e7a1      	b.n	8012fb4 <__ieee754_pow+0x3c>
 8013070:	2400      	movs	r4, #0
 8013072:	2900      	cmp	r1, #0
 8013074:	d139      	bne.n	80130ea <__ieee754_pow+0x172>
 8013076:	4a5d      	ldr	r2, [pc, #372]	@ (80131ec <__ieee754_pow+0x274>)
 8013078:	4297      	cmp	r7, r2
 801307a:	d1eb      	bne.n	8013054 <__ieee754_pow+0xdc>
 801307c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8013080:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8013084:	ea53 0309 	orrs.w	r3, r3, r9
 8013088:	f000 845c 	beq.w	8013944 <__ieee754_pow+0x9cc>
 801308c:	4b5a      	ldr	r3, [pc, #360]	@ (80131f8 <__ieee754_pow+0x280>)
 801308e:	429e      	cmp	r6, r3
 8013090:	d908      	bls.n	80130a4 <__ieee754_pow+0x12c>
 8013092:	f1b8 0f00 	cmp.w	r8, #0
 8013096:	f2c0 8459 	blt.w	801394c <__ieee754_pow+0x9d4>
 801309a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801309e:	e789      	b.n	8012fb4 <__ieee754_pow+0x3c>
 80130a0:	2402      	movs	r4, #2
 80130a2:	e7e6      	b.n	8013072 <__ieee754_pow+0xfa>
 80130a4:	f1b8 0f00 	cmp.w	r8, #0
 80130a8:	f04f 0000 	mov.w	r0, #0
 80130ac:	f04f 0100 	mov.w	r1, #0
 80130b0:	da80      	bge.n	8012fb4 <__ieee754_pow+0x3c>
 80130b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80130b6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80130ba:	e77b      	b.n	8012fb4 <__ieee754_pow+0x3c>
 80130bc:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80130c0:	d106      	bne.n	80130d0 <__ieee754_pow+0x158>
 80130c2:	4652      	mov	r2, sl
 80130c4:	465b      	mov	r3, fp
 80130c6:	4650      	mov	r0, sl
 80130c8:	4659      	mov	r1, fp
 80130ca:	f7ed fa15 	bl	80004f8 <__aeabi_dmul>
 80130ce:	e771      	b.n	8012fb4 <__ieee754_pow+0x3c>
 80130d0:	4a4a      	ldr	r2, [pc, #296]	@ (80131fc <__ieee754_pow+0x284>)
 80130d2:	4590      	cmp	r8, r2
 80130d4:	d109      	bne.n	80130ea <__ieee754_pow+0x172>
 80130d6:	2d00      	cmp	r5, #0
 80130d8:	db07      	blt.n	80130ea <__ieee754_pow+0x172>
 80130da:	4650      	mov	r0, sl
 80130dc:	4659      	mov	r1, fp
 80130de:	b011      	add	sp, #68	@ 0x44
 80130e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130e4:	f000 bd12 	b.w	8013b0c <__ieee754_sqrt>
 80130e8:	2400      	movs	r4, #0
 80130ea:	4650      	mov	r0, sl
 80130ec:	4659      	mov	r1, fp
 80130ee:	9302      	str	r3, [sp, #8]
 80130f0:	f000 fc6a 	bl	80139c8 <fabs>
 80130f4:	9b02      	ldr	r3, [sp, #8]
 80130f6:	f1b9 0f00 	cmp.w	r9, #0
 80130fa:	d127      	bne.n	801314c <__ieee754_pow+0x1d4>
 80130fc:	4a3d      	ldr	r2, [pc, #244]	@ (80131f4 <__ieee754_pow+0x27c>)
 80130fe:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8013102:	4594      	cmp	ip, r2
 8013104:	d000      	beq.n	8013108 <__ieee754_pow+0x190>
 8013106:	bb0e      	cbnz	r6, 801314c <__ieee754_pow+0x1d4>
 8013108:	f1b8 0f00 	cmp.w	r8, #0
 801310c:	da05      	bge.n	801311a <__ieee754_pow+0x1a2>
 801310e:	4602      	mov	r2, r0
 8013110:	460b      	mov	r3, r1
 8013112:	2000      	movs	r0, #0
 8013114:	4937      	ldr	r1, [pc, #220]	@ (80131f4 <__ieee754_pow+0x27c>)
 8013116:	f7ed fb19 	bl	800074c <__aeabi_ddiv>
 801311a:	2d00      	cmp	r5, #0
 801311c:	f6bf af4a 	bge.w	8012fb4 <__ieee754_pow+0x3c>
 8013120:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8013124:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8013128:	4326      	orrs	r6, r4
 801312a:	d108      	bne.n	801313e <__ieee754_pow+0x1c6>
 801312c:	4602      	mov	r2, r0
 801312e:	460b      	mov	r3, r1
 8013130:	4610      	mov	r0, r2
 8013132:	4619      	mov	r1, r3
 8013134:	f7ed f828 	bl	8000188 <__aeabi_dsub>
 8013138:	4602      	mov	r2, r0
 801313a:	460b      	mov	r3, r1
 801313c:	e795      	b.n	801306a <__ieee754_pow+0xf2>
 801313e:	2c01      	cmp	r4, #1
 8013140:	f47f af38 	bne.w	8012fb4 <__ieee754_pow+0x3c>
 8013144:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013148:	4619      	mov	r1, r3
 801314a:	e733      	b.n	8012fb4 <__ieee754_pow+0x3c>
 801314c:	0fea      	lsrs	r2, r5, #31
 801314e:	3a01      	subs	r2, #1
 8013150:	ea52 0c04 	orrs.w	ip, r2, r4
 8013154:	d102      	bne.n	801315c <__ieee754_pow+0x1e4>
 8013156:	4652      	mov	r2, sl
 8013158:	465b      	mov	r3, fp
 801315a:	e7e9      	b.n	8013130 <__ieee754_pow+0x1b8>
 801315c:	f04f 0900 	mov.w	r9, #0
 8013160:	3c01      	subs	r4, #1
 8013162:	4314      	orrs	r4, r2
 8013164:	bf14      	ite	ne
 8013166:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80131f4 <__ieee754_pow+0x27c>
 801316a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8013200 <__ieee754_pow+0x288>
 801316e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8013172:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8013176:	f240 8107 	bls.w	8013388 <__ieee754_pow+0x410>
 801317a:	4b22      	ldr	r3, [pc, #136]	@ (8013204 <__ieee754_pow+0x28c>)
 801317c:	429f      	cmp	r7, r3
 801317e:	4b1e      	ldr	r3, [pc, #120]	@ (80131f8 <__ieee754_pow+0x280>)
 8013180:	d913      	bls.n	80131aa <__ieee754_pow+0x232>
 8013182:	429e      	cmp	r6, r3
 8013184:	d808      	bhi.n	8013198 <__ieee754_pow+0x220>
 8013186:	f1b8 0f00 	cmp.w	r8, #0
 801318a:	da08      	bge.n	801319e <__ieee754_pow+0x226>
 801318c:	2000      	movs	r0, #0
 801318e:	b011      	add	sp, #68	@ 0x44
 8013190:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013194:	f000 bcb4 	b.w	8013b00 <__math_oflow>
 8013198:	f1b8 0f00 	cmp.w	r8, #0
 801319c:	dcf6      	bgt.n	801318c <__ieee754_pow+0x214>
 801319e:	2000      	movs	r0, #0
 80131a0:	b011      	add	sp, #68	@ 0x44
 80131a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131a6:	f000 bca6 	b.w	8013af6 <__math_uflow>
 80131aa:	429e      	cmp	r6, r3
 80131ac:	d20c      	bcs.n	80131c8 <__ieee754_pow+0x250>
 80131ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131b2:	2200      	movs	r2, #0
 80131b4:	2300      	movs	r3, #0
 80131b6:	f7ed fc11 	bl	80009dc <__aeabi_dcmplt>
 80131ba:	3800      	subs	r0, #0
 80131bc:	bf18      	it	ne
 80131be:	2001      	movne	r0, #1
 80131c0:	f1b8 0f00 	cmp.w	r8, #0
 80131c4:	daec      	bge.n	80131a0 <__ieee754_pow+0x228>
 80131c6:	e7e2      	b.n	801318e <__ieee754_pow+0x216>
 80131c8:	4b0a      	ldr	r3, [pc, #40]	@ (80131f4 <__ieee754_pow+0x27c>)
 80131ca:	2200      	movs	r2, #0
 80131cc:	429e      	cmp	r6, r3
 80131ce:	d91b      	bls.n	8013208 <__ieee754_pow+0x290>
 80131d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131d4:	2300      	movs	r3, #0
 80131d6:	f7ed fc01 	bl	80009dc <__aeabi_dcmplt>
 80131da:	3800      	subs	r0, #0
 80131dc:	bf18      	it	ne
 80131de:	2001      	movne	r0, #1
 80131e0:	f1b8 0f00 	cmp.w	r8, #0
 80131e4:	dcd3      	bgt.n	801318e <__ieee754_pow+0x216>
 80131e6:	e7db      	b.n	80131a0 <__ieee754_pow+0x228>
 80131e8:	fff00000 	.word	0xfff00000
 80131ec:	7ff00000 	.word	0x7ff00000
 80131f0:	433fffff 	.word	0x433fffff
 80131f4:	3ff00000 	.word	0x3ff00000
 80131f8:	3fefffff 	.word	0x3fefffff
 80131fc:	3fe00000 	.word	0x3fe00000
 8013200:	bff00000 	.word	0xbff00000
 8013204:	43f00000 	.word	0x43f00000
 8013208:	4b5b      	ldr	r3, [pc, #364]	@ (8013378 <__ieee754_pow+0x400>)
 801320a:	f7ec ffbd 	bl	8000188 <__aeabi_dsub>
 801320e:	a352      	add	r3, pc, #328	@ (adr r3, 8013358 <__ieee754_pow+0x3e0>)
 8013210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013214:	4604      	mov	r4, r0
 8013216:	460d      	mov	r5, r1
 8013218:	f7ed f96e 	bl	80004f8 <__aeabi_dmul>
 801321c:	a350      	add	r3, pc, #320	@ (adr r3, 8013360 <__ieee754_pow+0x3e8>)
 801321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013222:	4606      	mov	r6, r0
 8013224:	460f      	mov	r7, r1
 8013226:	4620      	mov	r0, r4
 8013228:	4629      	mov	r1, r5
 801322a:	f7ed f965 	bl	80004f8 <__aeabi_dmul>
 801322e:	2200      	movs	r2, #0
 8013230:	4682      	mov	sl, r0
 8013232:	468b      	mov	fp, r1
 8013234:	4620      	mov	r0, r4
 8013236:	4629      	mov	r1, r5
 8013238:	4b50      	ldr	r3, [pc, #320]	@ (801337c <__ieee754_pow+0x404>)
 801323a:	f7ed f95d 	bl	80004f8 <__aeabi_dmul>
 801323e:	4602      	mov	r2, r0
 8013240:	460b      	mov	r3, r1
 8013242:	a149      	add	r1, pc, #292	@ (adr r1, 8013368 <__ieee754_pow+0x3f0>)
 8013244:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013248:	f7ec ff9e 	bl	8000188 <__aeabi_dsub>
 801324c:	4622      	mov	r2, r4
 801324e:	462b      	mov	r3, r5
 8013250:	f7ed f952 	bl	80004f8 <__aeabi_dmul>
 8013254:	4602      	mov	r2, r0
 8013256:	460b      	mov	r3, r1
 8013258:	2000      	movs	r0, #0
 801325a:	4949      	ldr	r1, [pc, #292]	@ (8013380 <__ieee754_pow+0x408>)
 801325c:	f7ec ff94 	bl	8000188 <__aeabi_dsub>
 8013260:	4622      	mov	r2, r4
 8013262:	4680      	mov	r8, r0
 8013264:	4689      	mov	r9, r1
 8013266:	462b      	mov	r3, r5
 8013268:	4620      	mov	r0, r4
 801326a:	4629      	mov	r1, r5
 801326c:	f7ed f944 	bl	80004f8 <__aeabi_dmul>
 8013270:	4602      	mov	r2, r0
 8013272:	460b      	mov	r3, r1
 8013274:	4640      	mov	r0, r8
 8013276:	4649      	mov	r1, r9
 8013278:	f7ed f93e 	bl	80004f8 <__aeabi_dmul>
 801327c:	a33c      	add	r3, pc, #240	@ (adr r3, 8013370 <__ieee754_pow+0x3f8>)
 801327e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013282:	f7ed f939 	bl	80004f8 <__aeabi_dmul>
 8013286:	4602      	mov	r2, r0
 8013288:	460b      	mov	r3, r1
 801328a:	4650      	mov	r0, sl
 801328c:	4659      	mov	r1, fp
 801328e:	f7ec ff7b 	bl	8000188 <__aeabi_dsub>
 8013292:	2400      	movs	r4, #0
 8013294:	4602      	mov	r2, r0
 8013296:	460b      	mov	r3, r1
 8013298:	4680      	mov	r8, r0
 801329a:	4689      	mov	r9, r1
 801329c:	4630      	mov	r0, r6
 801329e:	4639      	mov	r1, r7
 80132a0:	f7ec ff74 	bl	800018c <__adddf3>
 80132a4:	4632      	mov	r2, r6
 80132a6:	463b      	mov	r3, r7
 80132a8:	4620      	mov	r0, r4
 80132aa:	460d      	mov	r5, r1
 80132ac:	f7ec ff6c 	bl	8000188 <__aeabi_dsub>
 80132b0:	4602      	mov	r2, r0
 80132b2:	460b      	mov	r3, r1
 80132b4:	4640      	mov	r0, r8
 80132b6:	4649      	mov	r1, r9
 80132b8:	f7ec ff66 	bl	8000188 <__aeabi_dsub>
 80132bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80132c4:	2300      	movs	r3, #0
 80132c6:	9304      	str	r3, [sp, #16]
 80132c8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80132cc:	4606      	mov	r6, r0
 80132ce:	460f      	mov	r7, r1
 80132d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132d4:	4652      	mov	r2, sl
 80132d6:	465b      	mov	r3, fp
 80132d8:	f7ec ff56 	bl	8000188 <__aeabi_dsub>
 80132dc:	4622      	mov	r2, r4
 80132de:	462b      	mov	r3, r5
 80132e0:	f7ed f90a 	bl	80004f8 <__aeabi_dmul>
 80132e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132e8:	4680      	mov	r8, r0
 80132ea:	4689      	mov	r9, r1
 80132ec:	4630      	mov	r0, r6
 80132ee:	4639      	mov	r1, r7
 80132f0:	f7ed f902 	bl	80004f8 <__aeabi_dmul>
 80132f4:	4602      	mov	r2, r0
 80132f6:	460b      	mov	r3, r1
 80132f8:	4640      	mov	r0, r8
 80132fa:	4649      	mov	r1, r9
 80132fc:	f7ec ff46 	bl	800018c <__adddf3>
 8013300:	4652      	mov	r2, sl
 8013302:	465b      	mov	r3, fp
 8013304:	4606      	mov	r6, r0
 8013306:	460f      	mov	r7, r1
 8013308:	4620      	mov	r0, r4
 801330a:	4629      	mov	r1, r5
 801330c:	f7ed f8f4 	bl	80004f8 <__aeabi_dmul>
 8013310:	460b      	mov	r3, r1
 8013312:	4602      	mov	r2, r0
 8013314:	4680      	mov	r8, r0
 8013316:	4689      	mov	r9, r1
 8013318:	4630      	mov	r0, r6
 801331a:	4639      	mov	r1, r7
 801331c:	f7ec ff36 	bl	800018c <__adddf3>
 8013320:	4b18      	ldr	r3, [pc, #96]	@ (8013384 <__ieee754_pow+0x40c>)
 8013322:	4604      	mov	r4, r0
 8013324:	4299      	cmp	r1, r3
 8013326:	460d      	mov	r5, r1
 8013328:	468a      	mov	sl, r1
 801332a:	468b      	mov	fp, r1
 801332c:	f340 82e0 	ble.w	80138f0 <__ieee754_pow+0x978>
 8013330:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013334:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013338:	4303      	orrs	r3, r0
 801333a:	f000 81df 	beq.w	80136fc <__ieee754_pow+0x784>
 801333e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013342:	2200      	movs	r2, #0
 8013344:	2300      	movs	r3, #0
 8013346:	f7ed fb49 	bl	80009dc <__aeabi_dcmplt>
 801334a:	3800      	subs	r0, #0
 801334c:	bf18      	it	ne
 801334e:	2001      	movne	r0, #1
 8013350:	e71d      	b.n	801318e <__ieee754_pow+0x216>
 8013352:	bf00      	nop
 8013354:	f3af 8000 	nop.w
 8013358:	60000000 	.word	0x60000000
 801335c:	3ff71547 	.word	0x3ff71547
 8013360:	f85ddf44 	.word	0xf85ddf44
 8013364:	3e54ae0b 	.word	0x3e54ae0b
 8013368:	55555555 	.word	0x55555555
 801336c:	3fd55555 	.word	0x3fd55555
 8013370:	652b82fe 	.word	0x652b82fe
 8013374:	3ff71547 	.word	0x3ff71547
 8013378:	3ff00000 	.word	0x3ff00000
 801337c:	3fd00000 	.word	0x3fd00000
 8013380:	3fe00000 	.word	0x3fe00000
 8013384:	408fffff 	.word	0x408fffff
 8013388:	4ad3      	ldr	r2, [pc, #844]	@ (80136d8 <__ieee754_pow+0x760>)
 801338a:	402a      	ands	r2, r5
 801338c:	2a00      	cmp	r2, #0
 801338e:	f040 817a 	bne.w	8013686 <__ieee754_pow+0x70e>
 8013392:	4bd2      	ldr	r3, [pc, #840]	@ (80136dc <__ieee754_pow+0x764>)
 8013394:	2200      	movs	r2, #0
 8013396:	f7ed f8af 	bl	80004f8 <__aeabi_dmul>
 801339a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 801339e:	460b      	mov	r3, r1
 80133a0:	151a      	asrs	r2, r3, #20
 80133a2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80133a6:	4422      	add	r2, r4
 80133a8:	920a      	str	r2, [sp, #40]	@ 0x28
 80133aa:	4acd      	ldr	r2, [pc, #820]	@ (80136e0 <__ieee754_pow+0x768>)
 80133ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80133b0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80133b4:	4293      	cmp	r3, r2
 80133b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80133ba:	dd08      	ble.n	80133ce <__ieee754_pow+0x456>
 80133bc:	4ac9      	ldr	r2, [pc, #804]	@ (80136e4 <__ieee754_pow+0x76c>)
 80133be:	4293      	cmp	r3, r2
 80133c0:	f340 8163 	ble.w	801368a <__ieee754_pow+0x712>
 80133c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80133c6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80133ca:	3301      	adds	r3, #1
 80133cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80133ce:	2600      	movs	r6, #0
 80133d0:	00f3      	lsls	r3, r6, #3
 80133d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80133d4:	4bc4      	ldr	r3, [pc, #784]	@ (80136e8 <__ieee754_pow+0x770>)
 80133d6:	4629      	mov	r1, r5
 80133d8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80133dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80133e0:	461a      	mov	r2, r3
 80133e2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80133e6:	4623      	mov	r3, r4
 80133e8:	4682      	mov	sl, r0
 80133ea:	f7ec fecd 	bl	8000188 <__aeabi_dsub>
 80133ee:	4652      	mov	r2, sl
 80133f0:	462b      	mov	r3, r5
 80133f2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80133f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80133fa:	f7ec fec7 	bl	800018c <__adddf3>
 80133fe:	4602      	mov	r2, r0
 8013400:	460b      	mov	r3, r1
 8013402:	2000      	movs	r0, #0
 8013404:	49b9      	ldr	r1, [pc, #740]	@ (80136ec <__ieee754_pow+0x774>)
 8013406:	f7ed f9a1 	bl	800074c <__aeabi_ddiv>
 801340a:	4602      	mov	r2, r0
 801340c:	460b      	mov	r3, r1
 801340e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013412:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013416:	f7ed f86f 	bl	80004f8 <__aeabi_dmul>
 801341a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801341e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8013422:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013426:	2300      	movs	r3, #0
 8013428:	2200      	movs	r2, #0
 801342a:	46ab      	mov	fp, r5
 801342c:	106d      	asrs	r5, r5, #1
 801342e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013432:	9304      	str	r3, [sp, #16]
 8013434:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013438:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801343c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8013440:	4640      	mov	r0, r8
 8013442:	4649      	mov	r1, r9
 8013444:	4614      	mov	r4, r2
 8013446:	461d      	mov	r5, r3
 8013448:	f7ed f856 	bl	80004f8 <__aeabi_dmul>
 801344c:	4602      	mov	r2, r0
 801344e:	460b      	mov	r3, r1
 8013450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013454:	f7ec fe98 	bl	8000188 <__aeabi_dsub>
 8013458:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801345c:	4606      	mov	r6, r0
 801345e:	460f      	mov	r7, r1
 8013460:	4620      	mov	r0, r4
 8013462:	4629      	mov	r1, r5
 8013464:	f7ec fe90 	bl	8000188 <__aeabi_dsub>
 8013468:	4602      	mov	r2, r0
 801346a:	460b      	mov	r3, r1
 801346c:	4650      	mov	r0, sl
 801346e:	4659      	mov	r1, fp
 8013470:	f7ec fe8a 	bl	8000188 <__aeabi_dsub>
 8013474:	4642      	mov	r2, r8
 8013476:	464b      	mov	r3, r9
 8013478:	f7ed f83e 	bl	80004f8 <__aeabi_dmul>
 801347c:	4602      	mov	r2, r0
 801347e:	460b      	mov	r3, r1
 8013480:	4630      	mov	r0, r6
 8013482:	4639      	mov	r1, r7
 8013484:	f7ec fe80 	bl	8000188 <__aeabi_dsub>
 8013488:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801348c:	f7ed f834 	bl	80004f8 <__aeabi_dmul>
 8013490:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013494:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013498:	4610      	mov	r0, r2
 801349a:	4619      	mov	r1, r3
 801349c:	f7ed f82c 	bl	80004f8 <__aeabi_dmul>
 80134a0:	a37b      	add	r3, pc, #492	@ (adr r3, 8013690 <__ieee754_pow+0x718>)
 80134a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a6:	4604      	mov	r4, r0
 80134a8:	460d      	mov	r5, r1
 80134aa:	f7ed f825 	bl	80004f8 <__aeabi_dmul>
 80134ae:	a37a      	add	r3, pc, #488	@ (adr r3, 8013698 <__ieee754_pow+0x720>)
 80134b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b4:	f7ec fe6a 	bl	800018c <__adddf3>
 80134b8:	4622      	mov	r2, r4
 80134ba:	462b      	mov	r3, r5
 80134bc:	f7ed f81c 	bl	80004f8 <__aeabi_dmul>
 80134c0:	a377      	add	r3, pc, #476	@ (adr r3, 80136a0 <__ieee754_pow+0x728>)
 80134c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c6:	f7ec fe61 	bl	800018c <__adddf3>
 80134ca:	4622      	mov	r2, r4
 80134cc:	462b      	mov	r3, r5
 80134ce:	f7ed f813 	bl	80004f8 <__aeabi_dmul>
 80134d2:	a375      	add	r3, pc, #468	@ (adr r3, 80136a8 <__ieee754_pow+0x730>)
 80134d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d8:	f7ec fe58 	bl	800018c <__adddf3>
 80134dc:	4622      	mov	r2, r4
 80134de:	462b      	mov	r3, r5
 80134e0:	f7ed f80a 	bl	80004f8 <__aeabi_dmul>
 80134e4:	a372      	add	r3, pc, #456	@ (adr r3, 80136b0 <__ieee754_pow+0x738>)
 80134e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ea:	f7ec fe4f 	bl	800018c <__adddf3>
 80134ee:	4622      	mov	r2, r4
 80134f0:	462b      	mov	r3, r5
 80134f2:	f7ed f801 	bl	80004f8 <__aeabi_dmul>
 80134f6:	a370      	add	r3, pc, #448	@ (adr r3, 80136b8 <__ieee754_pow+0x740>)
 80134f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134fc:	f7ec fe46 	bl	800018c <__adddf3>
 8013500:	4622      	mov	r2, r4
 8013502:	4606      	mov	r6, r0
 8013504:	460f      	mov	r7, r1
 8013506:	462b      	mov	r3, r5
 8013508:	4620      	mov	r0, r4
 801350a:	4629      	mov	r1, r5
 801350c:	f7ec fff4 	bl	80004f8 <__aeabi_dmul>
 8013510:	4602      	mov	r2, r0
 8013512:	460b      	mov	r3, r1
 8013514:	4630      	mov	r0, r6
 8013516:	4639      	mov	r1, r7
 8013518:	f7ec ffee 	bl	80004f8 <__aeabi_dmul>
 801351c:	4604      	mov	r4, r0
 801351e:	460d      	mov	r5, r1
 8013520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013524:	4642      	mov	r2, r8
 8013526:	464b      	mov	r3, r9
 8013528:	f7ec fe30 	bl	800018c <__adddf3>
 801352c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013530:	f7ec ffe2 	bl	80004f8 <__aeabi_dmul>
 8013534:	4622      	mov	r2, r4
 8013536:	462b      	mov	r3, r5
 8013538:	f7ec fe28 	bl	800018c <__adddf3>
 801353c:	4642      	mov	r2, r8
 801353e:	4682      	mov	sl, r0
 8013540:	468b      	mov	fp, r1
 8013542:	464b      	mov	r3, r9
 8013544:	4640      	mov	r0, r8
 8013546:	4649      	mov	r1, r9
 8013548:	f7ec ffd6 	bl	80004f8 <__aeabi_dmul>
 801354c:	2200      	movs	r2, #0
 801354e:	4b68      	ldr	r3, [pc, #416]	@ (80136f0 <__ieee754_pow+0x778>)
 8013550:	4606      	mov	r6, r0
 8013552:	460f      	mov	r7, r1
 8013554:	f7ec fe1a 	bl	800018c <__adddf3>
 8013558:	4652      	mov	r2, sl
 801355a:	465b      	mov	r3, fp
 801355c:	f7ec fe16 	bl	800018c <__adddf3>
 8013560:	2400      	movs	r4, #0
 8013562:	460d      	mov	r5, r1
 8013564:	4622      	mov	r2, r4
 8013566:	460b      	mov	r3, r1
 8013568:	4640      	mov	r0, r8
 801356a:	4649      	mov	r1, r9
 801356c:	f7ec ffc4 	bl	80004f8 <__aeabi_dmul>
 8013570:	2200      	movs	r2, #0
 8013572:	4680      	mov	r8, r0
 8013574:	4689      	mov	r9, r1
 8013576:	4620      	mov	r0, r4
 8013578:	4629      	mov	r1, r5
 801357a:	4b5d      	ldr	r3, [pc, #372]	@ (80136f0 <__ieee754_pow+0x778>)
 801357c:	f7ec fe04 	bl	8000188 <__aeabi_dsub>
 8013580:	4632      	mov	r2, r6
 8013582:	463b      	mov	r3, r7
 8013584:	f7ec fe00 	bl	8000188 <__aeabi_dsub>
 8013588:	4602      	mov	r2, r0
 801358a:	460b      	mov	r3, r1
 801358c:	4650      	mov	r0, sl
 801358e:	4659      	mov	r1, fp
 8013590:	f7ec fdfa 	bl	8000188 <__aeabi_dsub>
 8013594:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013598:	f7ec ffae 	bl	80004f8 <__aeabi_dmul>
 801359c:	4622      	mov	r2, r4
 801359e:	4606      	mov	r6, r0
 80135a0:	460f      	mov	r7, r1
 80135a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80135a6:	462b      	mov	r3, r5
 80135a8:	f7ec ffa6 	bl	80004f8 <__aeabi_dmul>
 80135ac:	4602      	mov	r2, r0
 80135ae:	460b      	mov	r3, r1
 80135b0:	4630      	mov	r0, r6
 80135b2:	4639      	mov	r1, r7
 80135b4:	f7ec fdea 	bl	800018c <__adddf3>
 80135b8:	2400      	movs	r4, #0
 80135ba:	4606      	mov	r6, r0
 80135bc:	460f      	mov	r7, r1
 80135be:	4602      	mov	r2, r0
 80135c0:	460b      	mov	r3, r1
 80135c2:	4640      	mov	r0, r8
 80135c4:	4649      	mov	r1, r9
 80135c6:	f7ec fde1 	bl	800018c <__adddf3>
 80135ca:	a33d      	add	r3, pc, #244	@ (adr r3, 80136c0 <__ieee754_pow+0x748>)
 80135cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d0:	4620      	mov	r0, r4
 80135d2:	460d      	mov	r5, r1
 80135d4:	f7ec ff90 	bl	80004f8 <__aeabi_dmul>
 80135d8:	4642      	mov	r2, r8
 80135da:	464b      	mov	r3, r9
 80135dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80135e0:	4620      	mov	r0, r4
 80135e2:	4629      	mov	r1, r5
 80135e4:	f7ec fdd0 	bl	8000188 <__aeabi_dsub>
 80135e8:	4602      	mov	r2, r0
 80135ea:	460b      	mov	r3, r1
 80135ec:	4630      	mov	r0, r6
 80135ee:	4639      	mov	r1, r7
 80135f0:	f7ec fdca 	bl	8000188 <__aeabi_dsub>
 80135f4:	a334      	add	r3, pc, #208	@ (adr r3, 80136c8 <__ieee754_pow+0x750>)
 80135f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135fa:	f7ec ff7d 	bl	80004f8 <__aeabi_dmul>
 80135fe:	a334      	add	r3, pc, #208	@ (adr r3, 80136d0 <__ieee754_pow+0x758>)
 8013600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013604:	4606      	mov	r6, r0
 8013606:	460f      	mov	r7, r1
 8013608:	4620      	mov	r0, r4
 801360a:	4629      	mov	r1, r5
 801360c:	f7ec ff74 	bl	80004f8 <__aeabi_dmul>
 8013610:	4602      	mov	r2, r0
 8013612:	460b      	mov	r3, r1
 8013614:	4630      	mov	r0, r6
 8013616:	4639      	mov	r1, r7
 8013618:	f7ec fdb8 	bl	800018c <__adddf3>
 801361c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801361e:	4b35      	ldr	r3, [pc, #212]	@ (80136f4 <__ieee754_pow+0x77c>)
 8013620:	2400      	movs	r4, #0
 8013622:	4413      	add	r3, r2
 8013624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013628:	f7ec fdb0 	bl	800018c <__adddf3>
 801362c:	4682      	mov	sl, r0
 801362e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013630:	468b      	mov	fp, r1
 8013632:	f7ec fef7 	bl	8000424 <__aeabi_i2d>
 8013636:	4606      	mov	r6, r0
 8013638:	460f      	mov	r7, r1
 801363a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801363c:	4b2e      	ldr	r3, [pc, #184]	@ (80136f8 <__ieee754_pow+0x780>)
 801363e:	4413      	add	r3, r2
 8013640:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013644:	4652      	mov	r2, sl
 8013646:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801364a:	465b      	mov	r3, fp
 801364c:	f7ec fd9e 	bl	800018c <__adddf3>
 8013650:	4642      	mov	r2, r8
 8013652:	464b      	mov	r3, r9
 8013654:	f7ec fd9a 	bl	800018c <__adddf3>
 8013658:	4632      	mov	r2, r6
 801365a:	463b      	mov	r3, r7
 801365c:	f7ec fd96 	bl	800018c <__adddf3>
 8013660:	4632      	mov	r2, r6
 8013662:	463b      	mov	r3, r7
 8013664:	4620      	mov	r0, r4
 8013666:	460d      	mov	r5, r1
 8013668:	f7ec fd8e 	bl	8000188 <__aeabi_dsub>
 801366c:	4642      	mov	r2, r8
 801366e:	464b      	mov	r3, r9
 8013670:	f7ec fd8a 	bl	8000188 <__aeabi_dsub>
 8013674:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013678:	f7ec fd86 	bl	8000188 <__aeabi_dsub>
 801367c:	4602      	mov	r2, r0
 801367e:	460b      	mov	r3, r1
 8013680:	4650      	mov	r0, sl
 8013682:	4659      	mov	r1, fp
 8013684:	e618      	b.n	80132b8 <__ieee754_pow+0x340>
 8013686:	2400      	movs	r4, #0
 8013688:	e68a      	b.n	80133a0 <__ieee754_pow+0x428>
 801368a:	2601      	movs	r6, #1
 801368c:	e6a0      	b.n	80133d0 <__ieee754_pow+0x458>
 801368e:	bf00      	nop
 8013690:	4a454eef 	.word	0x4a454eef
 8013694:	3fca7e28 	.word	0x3fca7e28
 8013698:	93c9db65 	.word	0x93c9db65
 801369c:	3fcd864a 	.word	0x3fcd864a
 80136a0:	a91d4101 	.word	0xa91d4101
 80136a4:	3fd17460 	.word	0x3fd17460
 80136a8:	518f264d 	.word	0x518f264d
 80136ac:	3fd55555 	.word	0x3fd55555
 80136b0:	db6fabff 	.word	0xdb6fabff
 80136b4:	3fdb6db6 	.word	0x3fdb6db6
 80136b8:	33333303 	.word	0x33333303
 80136bc:	3fe33333 	.word	0x3fe33333
 80136c0:	e0000000 	.word	0xe0000000
 80136c4:	3feec709 	.word	0x3feec709
 80136c8:	dc3a03fd 	.word	0xdc3a03fd
 80136cc:	3feec709 	.word	0x3feec709
 80136d0:	145b01f5 	.word	0x145b01f5
 80136d4:	be3e2fe0 	.word	0xbe3e2fe0
 80136d8:	7ff00000 	.word	0x7ff00000
 80136dc:	43400000 	.word	0x43400000
 80136e0:	0003988e 	.word	0x0003988e
 80136e4:	000bb679 	.word	0x000bb679
 80136e8:	08013eb8 	.word	0x08013eb8
 80136ec:	3ff00000 	.word	0x3ff00000
 80136f0:	40080000 	.word	0x40080000
 80136f4:	08013e98 	.word	0x08013e98
 80136f8:	08013ea8 	.word	0x08013ea8
 80136fc:	a39a      	add	r3, pc, #616	@ (adr r3, 8013968 <__ieee754_pow+0x9f0>)
 80136fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013702:	4630      	mov	r0, r6
 8013704:	4639      	mov	r1, r7
 8013706:	f7ec fd41 	bl	800018c <__adddf3>
 801370a:	4642      	mov	r2, r8
 801370c:	e9cd 0100 	strd	r0, r1, [sp]
 8013710:	464b      	mov	r3, r9
 8013712:	4620      	mov	r0, r4
 8013714:	4629      	mov	r1, r5
 8013716:	f7ec fd37 	bl	8000188 <__aeabi_dsub>
 801371a:	4602      	mov	r2, r0
 801371c:	460b      	mov	r3, r1
 801371e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013722:	f7ed f979 	bl	8000a18 <__aeabi_dcmpgt>
 8013726:	2800      	cmp	r0, #0
 8013728:	f47f ae09 	bne.w	801333e <__ieee754_pow+0x3c6>
 801372c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013730:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8013734:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8013738:	fa43 fa0a 	asr.w	sl, r3, sl
 801373c:	44da      	add	sl, fp
 801373e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013742:	489b      	ldr	r0, [pc, #620]	@ (80139b0 <__ieee754_pow+0xa38>)
 8013744:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013748:	4108      	asrs	r0, r1
 801374a:	ea00 030a 	and.w	r3, r0, sl
 801374e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013752:	f1c1 0114 	rsb	r1, r1, #20
 8013756:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801375a:	4640      	mov	r0, r8
 801375c:	fa4a fa01 	asr.w	sl, sl, r1
 8013760:	f1bb 0f00 	cmp.w	fp, #0
 8013764:	4649      	mov	r1, r9
 8013766:	f04f 0200 	mov.w	r2, #0
 801376a:	bfb8      	it	lt
 801376c:	f1ca 0a00 	rsblt	sl, sl, #0
 8013770:	f7ec fd0a 	bl	8000188 <__aeabi_dsub>
 8013774:	4680      	mov	r8, r0
 8013776:	4689      	mov	r9, r1
 8013778:	2400      	movs	r4, #0
 801377a:	4632      	mov	r2, r6
 801377c:	463b      	mov	r3, r7
 801377e:	4640      	mov	r0, r8
 8013780:	4649      	mov	r1, r9
 8013782:	f7ec fd03 	bl	800018c <__adddf3>
 8013786:	a37a      	add	r3, pc, #488	@ (adr r3, 8013970 <__ieee754_pow+0x9f8>)
 8013788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801378c:	4620      	mov	r0, r4
 801378e:	460d      	mov	r5, r1
 8013790:	f7ec feb2 	bl	80004f8 <__aeabi_dmul>
 8013794:	4642      	mov	r2, r8
 8013796:	464b      	mov	r3, r9
 8013798:	e9cd 0100 	strd	r0, r1, [sp]
 801379c:	4620      	mov	r0, r4
 801379e:	4629      	mov	r1, r5
 80137a0:	f7ec fcf2 	bl	8000188 <__aeabi_dsub>
 80137a4:	4602      	mov	r2, r0
 80137a6:	460b      	mov	r3, r1
 80137a8:	4630      	mov	r0, r6
 80137aa:	4639      	mov	r1, r7
 80137ac:	f7ec fcec 	bl	8000188 <__aeabi_dsub>
 80137b0:	a371      	add	r3, pc, #452	@ (adr r3, 8013978 <__ieee754_pow+0xa00>)
 80137b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137b6:	f7ec fe9f 	bl	80004f8 <__aeabi_dmul>
 80137ba:	a371      	add	r3, pc, #452	@ (adr r3, 8013980 <__ieee754_pow+0xa08>)
 80137bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c0:	4680      	mov	r8, r0
 80137c2:	4689      	mov	r9, r1
 80137c4:	4620      	mov	r0, r4
 80137c6:	4629      	mov	r1, r5
 80137c8:	f7ec fe96 	bl	80004f8 <__aeabi_dmul>
 80137cc:	4602      	mov	r2, r0
 80137ce:	460b      	mov	r3, r1
 80137d0:	4640      	mov	r0, r8
 80137d2:	4649      	mov	r1, r9
 80137d4:	f7ec fcda 	bl	800018c <__adddf3>
 80137d8:	4604      	mov	r4, r0
 80137da:	460d      	mov	r5, r1
 80137dc:	4602      	mov	r2, r0
 80137de:	460b      	mov	r3, r1
 80137e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80137e4:	f7ec fcd2 	bl	800018c <__adddf3>
 80137e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80137ec:	4680      	mov	r8, r0
 80137ee:	4689      	mov	r9, r1
 80137f0:	f7ec fcca 	bl	8000188 <__aeabi_dsub>
 80137f4:	4602      	mov	r2, r0
 80137f6:	460b      	mov	r3, r1
 80137f8:	4620      	mov	r0, r4
 80137fa:	4629      	mov	r1, r5
 80137fc:	f7ec fcc4 	bl	8000188 <__aeabi_dsub>
 8013800:	4642      	mov	r2, r8
 8013802:	4606      	mov	r6, r0
 8013804:	460f      	mov	r7, r1
 8013806:	464b      	mov	r3, r9
 8013808:	4640      	mov	r0, r8
 801380a:	4649      	mov	r1, r9
 801380c:	f7ec fe74 	bl	80004f8 <__aeabi_dmul>
 8013810:	a35d      	add	r3, pc, #372	@ (adr r3, 8013988 <__ieee754_pow+0xa10>)
 8013812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013816:	4604      	mov	r4, r0
 8013818:	460d      	mov	r5, r1
 801381a:	f7ec fe6d 	bl	80004f8 <__aeabi_dmul>
 801381e:	a35c      	add	r3, pc, #368	@ (adr r3, 8013990 <__ieee754_pow+0xa18>)
 8013820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013824:	f7ec fcb0 	bl	8000188 <__aeabi_dsub>
 8013828:	4622      	mov	r2, r4
 801382a:	462b      	mov	r3, r5
 801382c:	f7ec fe64 	bl	80004f8 <__aeabi_dmul>
 8013830:	a359      	add	r3, pc, #356	@ (adr r3, 8013998 <__ieee754_pow+0xa20>)
 8013832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013836:	f7ec fca9 	bl	800018c <__adddf3>
 801383a:	4622      	mov	r2, r4
 801383c:	462b      	mov	r3, r5
 801383e:	f7ec fe5b 	bl	80004f8 <__aeabi_dmul>
 8013842:	a357      	add	r3, pc, #348	@ (adr r3, 80139a0 <__ieee754_pow+0xa28>)
 8013844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013848:	f7ec fc9e 	bl	8000188 <__aeabi_dsub>
 801384c:	4622      	mov	r2, r4
 801384e:	462b      	mov	r3, r5
 8013850:	f7ec fe52 	bl	80004f8 <__aeabi_dmul>
 8013854:	a354      	add	r3, pc, #336	@ (adr r3, 80139a8 <__ieee754_pow+0xa30>)
 8013856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385a:	f7ec fc97 	bl	800018c <__adddf3>
 801385e:	4622      	mov	r2, r4
 8013860:	462b      	mov	r3, r5
 8013862:	f7ec fe49 	bl	80004f8 <__aeabi_dmul>
 8013866:	4602      	mov	r2, r0
 8013868:	460b      	mov	r3, r1
 801386a:	4640      	mov	r0, r8
 801386c:	4649      	mov	r1, r9
 801386e:	f7ec fc8b 	bl	8000188 <__aeabi_dsub>
 8013872:	4604      	mov	r4, r0
 8013874:	460d      	mov	r5, r1
 8013876:	4602      	mov	r2, r0
 8013878:	460b      	mov	r3, r1
 801387a:	4640      	mov	r0, r8
 801387c:	4649      	mov	r1, r9
 801387e:	f7ec fe3b 	bl	80004f8 <__aeabi_dmul>
 8013882:	2200      	movs	r2, #0
 8013884:	e9cd 0100 	strd	r0, r1, [sp]
 8013888:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801388c:	4620      	mov	r0, r4
 801388e:	4629      	mov	r1, r5
 8013890:	f7ec fc7a 	bl	8000188 <__aeabi_dsub>
 8013894:	4602      	mov	r2, r0
 8013896:	460b      	mov	r3, r1
 8013898:	e9dd 0100 	ldrd	r0, r1, [sp]
 801389c:	f7ec ff56 	bl	800074c <__aeabi_ddiv>
 80138a0:	4632      	mov	r2, r6
 80138a2:	4604      	mov	r4, r0
 80138a4:	460d      	mov	r5, r1
 80138a6:	463b      	mov	r3, r7
 80138a8:	4640      	mov	r0, r8
 80138aa:	4649      	mov	r1, r9
 80138ac:	f7ec fe24 	bl	80004f8 <__aeabi_dmul>
 80138b0:	4632      	mov	r2, r6
 80138b2:	463b      	mov	r3, r7
 80138b4:	f7ec fc6a 	bl	800018c <__adddf3>
 80138b8:	4602      	mov	r2, r0
 80138ba:	460b      	mov	r3, r1
 80138bc:	4620      	mov	r0, r4
 80138be:	4629      	mov	r1, r5
 80138c0:	f7ec fc62 	bl	8000188 <__aeabi_dsub>
 80138c4:	4642      	mov	r2, r8
 80138c6:	464b      	mov	r3, r9
 80138c8:	f7ec fc5e 	bl	8000188 <__aeabi_dsub>
 80138cc:	4602      	mov	r2, r0
 80138ce:	460b      	mov	r3, r1
 80138d0:	2000      	movs	r0, #0
 80138d2:	4938      	ldr	r1, [pc, #224]	@ (80139b4 <__ieee754_pow+0xa3c>)
 80138d4:	f7ec fc58 	bl	8000188 <__aeabi_dsub>
 80138d8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80138dc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80138e0:	da2e      	bge.n	8013940 <__ieee754_pow+0x9c8>
 80138e2:	4652      	mov	r2, sl
 80138e4:	f000 f874 	bl	80139d0 <scalbn>
 80138e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80138ec:	f7ff bbed 	b.w	80130ca <__ieee754_pow+0x152>
 80138f0:	4c31      	ldr	r4, [pc, #196]	@ (80139b8 <__ieee754_pow+0xa40>)
 80138f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80138f6:	42a3      	cmp	r3, r4
 80138f8:	d91a      	bls.n	8013930 <__ieee754_pow+0x9b8>
 80138fa:	4b30      	ldr	r3, [pc, #192]	@ (80139bc <__ieee754_pow+0xa44>)
 80138fc:	440b      	add	r3, r1
 80138fe:	4303      	orrs	r3, r0
 8013900:	d009      	beq.n	8013916 <__ieee754_pow+0x99e>
 8013902:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013906:	2200      	movs	r2, #0
 8013908:	2300      	movs	r3, #0
 801390a:	f7ed f867 	bl	80009dc <__aeabi_dcmplt>
 801390e:	3800      	subs	r0, #0
 8013910:	bf18      	it	ne
 8013912:	2001      	movne	r0, #1
 8013914:	e444      	b.n	80131a0 <__ieee754_pow+0x228>
 8013916:	4642      	mov	r2, r8
 8013918:	464b      	mov	r3, r9
 801391a:	f7ec fc35 	bl	8000188 <__aeabi_dsub>
 801391e:	4632      	mov	r2, r6
 8013920:	463b      	mov	r3, r7
 8013922:	f7ed f86f 	bl	8000a04 <__aeabi_dcmpge>
 8013926:	2800      	cmp	r0, #0
 8013928:	d1eb      	bne.n	8013902 <__ieee754_pow+0x98a>
 801392a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80139c0 <__ieee754_pow+0xa48>
 801392e:	e6fd      	b.n	801372c <__ieee754_pow+0x7b4>
 8013930:	469a      	mov	sl, r3
 8013932:	4b24      	ldr	r3, [pc, #144]	@ (80139c4 <__ieee754_pow+0xa4c>)
 8013934:	459a      	cmp	sl, r3
 8013936:	f63f aef9 	bhi.w	801372c <__ieee754_pow+0x7b4>
 801393a:	f8dd a010 	ldr.w	sl, [sp, #16]
 801393e:	e71b      	b.n	8013778 <__ieee754_pow+0x800>
 8013940:	4621      	mov	r1, r4
 8013942:	e7d1      	b.n	80138e8 <__ieee754_pow+0x970>
 8013944:	2000      	movs	r0, #0
 8013946:	491b      	ldr	r1, [pc, #108]	@ (80139b4 <__ieee754_pow+0xa3c>)
 8013948:	f7ff bb34 	b.w	8012fb4 <__ieee754_pow+0x3c>
 801394c:	2000      	movs	r0, #0
 801394e:	2100      	movs	r1, #0
 8013950:	f7ff bb30 	b.w	8012fb4 <__ieee754_pow+0x3c>
 8013954:	4650      	mov	r0, sl
 8013956:	4659      	mov	r1, fp
 8013958:	f7ff bb2c 	b.w	8012fb4 <__ieee754_pow+0x3c>
 801395c:	460c      	mov	r4, r1
 801395e:	f7ff bb79 	b.w	8013054 <__ieee754_pow+0xdc>
 8013962:	2400      	movs	r4, #0
 8013964:	f7ff bb64 	b.w	8013030 <__ieee754_pow+0xb8>
 8013968:	652b82fe 	.word	0x652b82fe
 801396c:	3c971547 	.word	0x3c971547
 8013970:	00000000 	.word	0x00000000
 8013974:	3fe62e43 	.word	0x3fe62e43
 8013978:	fefa39ef 	.word	0xfefa39ef
 801397c:	3fe62e42 	.word	0x3fe62e42
 8013980:	0ca86c39 	.word	0x0ca86c39
 8013984:	be205c61 	.word	0xbe205c61
 8013988:	72bea4d0 	.word	0x72bea4d0
 801398c:	3e663769 	.word	0x3e663769
 8013990:	c5d26bf1 	.word	0xc5d26bf1
 8013994:	3ebbbd41 	.word	0x3ebbbd41
 8013998:	af25de2c 	.word	0xaf25de2c
 801399c:	3f11566a 	.word	0x3f11566a
 80139a0:	16bebd93 	.word	0x16bebd93
 80139a4:	3f66c16c 	.word	0x3f66c16c
 80139a8:	5555553e 	.word	0x5555553e
 80139ac:	3fc55555 	.word	0x3fc55555
 80139b0:	fff00000 	.word	0xfff00000
 80139b4:	3ff00000 	.word	0x3ff00000
 80139b8:	4090cbff 	.word	0x4090cbff
 80139bc:	3f6f3400 	.word	0x3f6f3400
 80139c0:	4090cc00 	.word	0x4090cc00
 80139c4:	3fe00000 	.word	0x3fe00000

080139c8 <fabs>:
 80139c8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80139cc:	4619      	mov	r1, r3
 80139ce:	4770      	bx	lr

080139d0 <scalbn>:
 80139d0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80139d4:	4616      	mov	r6, r2
 80139d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80139da:	4683      	mov	fp, r0
 80139dc:	468c      	mov	ip, r1
 80139de:	460b      	mov	r3, r1
 80139e0:	b982      	cbnz	r2, 8013a04 <scalbn+0x34>
 80139e2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80139e6:	4303      	orrs	r3, r0
 80139e8:	d039      	beq.n	8013a5e <scalbn+0x8e>
 80139ea:	4b2f      	ldr	r3, [pc, #188]	@ (8013aa8 <scalbn+0xd8>)
 80139ec:	2200      	movs	r2, #0
 80139ee:	f7ec fd83 	bl	80004f8 <__aeabi_dmul>
 80139f2:	4b2e      	ldr	r3, [pc, #184]	@ (8013aac <scalbn+0xdc>)
 80139f4:	4683      	mov	fp, r0
 80139f6:	429e      	cmp	r6, r3
 80139f8:	468c      	mov	ip, r1
 80139fa:	da0d      	bge.n	8013a18 <scalbn+0x48>
 80139fc:	a326      	add	r3, pc, #152	@ (adr r3, 8013a98 <scalbn+0xc8>)
 80139fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a02:	e01b      	b.n	8013a3c <scalbn+0x6c>
 8013a04:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8013a08:	42ba      	cmp	r2, r7
 8013a0a:	d109      	bne.n	8013a20 <scalbn+0x50>
 8013a0c:	4602      	mov	r2, r0
 8013a0e:	f7ec fbbd 	bl	800018c <__adddf3>
 8013a12:	4683      	mov	fp, r0
 8013a14:	468c      	mov	ip, r1
 8013a16:	e022      	b.n	8013a5e <scalbn+0x8e>
 8013a18:	460b      	mov	r3, r1
 8013a1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013a1e:	3a36      	subs	r2, #54	@ 0x36
 8013a20:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013a24:	428e      	cmp	r6, r1
 8013a26:	dd0c      	ble.n	8013a42 <scalbn+0x72>
 8013a28:	a31d      	add	r3, pc, #116	@ (adr r3, 8013aa0 <scalbn+0xd0>)
 8013a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a2e:	461c      	mov	r4, r3
 8013a30:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8013a34:	f361 74df 	bfi	r4, r1, #31, #1
 8013a38:	4621      	mov	r1, r4
 8013a3a:	481d      	ldr	r0, [pc, #116]	@ (8013ab0 <scalbn+0xe0>)
 8013a3c:	f7ec fd5c 	bl	80004f8 <__aeabi_dmul>
 8013a40:	e7e7      	b.n	8013a12 <scalbn+0x42>
 8013a42:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013a46:	4432      	add	r2, r6
 8013a48:	428a      	cmp	r2, r1
 8013a4a:	dced      	bgt.n	8013a28 <scalbn+0x58>
 8013a4c:	2a00      	cmp	r2, #0
 8013a4e:	dd0a      	ble.n	8013a66 <scalbn+0x96>
 8013a50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013a54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013a58:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013a5c:	46ac      	mov	ip, r5
 8013a5e:	4658      	mov	r0, fp
 8013a60:	4661      	mov	r1, ip
 8013a62:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8013a66:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013a6a:	da09      	bge.n	8013a80 <scalbn+0xb0>
 8013a6c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8013a70:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8013a74:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8013a78:	480e      	ldr	r0, [pc, #56]	@ (8013ab4 <scalbn+0xe4>)
 8013a7a:	f041 011f 	orr.w	r1, r1, #31
 8013a7e:	e7bd      	b.n	80139fc <scalbn+0x2c>
 8013a80:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013a84:	3236      	adds	r2, #54	@ 0x36
 8013a86:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013a8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013a8e:	4658      	mov	r0, fp
 8013a90:	4629      	mov	r1, r5
 8013a92:	2200      	movs	r2, #0
 8013a94:	4b08      	ldr	r3, [pc, #32]	@ (8013ab8 <scalbn+0xe8>)
 8013a96:	e7d1      	b.n	8013a3c <scalbn+0x6c>
 8013a98:	c2f8f359 	.word	0xc2f8f359
 8013a9c:	01a56e1f 	.word	0x01a56e1f
 8013aa0:	8800759c 	.word	0x8800759c
 8013aa4:	7e37e43c 	.word	0x7e37e43c
 8013aa8:	43500000 	.word	0x43500000
 8013aac:	ffff3cb0 	.word	0xffff3cb0
 8013ab0:	8800759c 	.word	0x8800759c
 8013ab4:	c2f8f359 	.word	0xc2f8f359
 8013ab8:	3c900000 	.word	0x3c900000

08013abc <with_errno>:
 8013abc:	b570      	push	{r4, r5, r6, lr}
 8013abe:	4604      	mov	r4, r0
 8013ac0:	460d      	mov	r5, r1
 8013ac2:	4616      	mov	r6, r2
 8013ac4:	f7fe fac2 	bl	801204c <__errno>
 8013ac8:	4629      	mov	r1, r5
 8013aca:	6006      	str	r6, [r0, #0]
 8013acc:	4620      	mov	r0, r4
 8013ace:	bd70      	pop	{r4, r5, r6, pc}

08013ad0 <xflow>:
 8013ad0:	b513      	push	{r0, r1, r4, lr}
 8013ad2:	4604      	mov	r4, r0
 8013ad4:	4619      	mov	r1, r3
 8013ad6:	4610      	mov	r0, r2
 8013ad8:	b10c      	cbz	r4, 8013ade <xflow+0xe>
 8013ada:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013ade:	e9cd 2300 	strd	r2, r3, [sp]
 8013ae2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ae6:	f7ec fd07 	bl	80004f8 <__aeabi_dmul>
 8013aea:	2222      	movs	r2, #34	@ 0x22
 8013aec:	b002      	add	sp, #8
 8013aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013af2:	f7ff bfe3 	b.w	8013abc <with_errno>

08013af6 <__math_uflow>:
 8013af6:	2200      	movs	r2, #0
 8013af8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8013afc:	f7ff bfe8 	b.w	8013ad0 <xflow>

08013b00 <__math_oflow>:
 8013b00:	2200      	movs	r2, #0
 8013b02:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8013b06:	f7ff bfe3 	b.w	8013ad0 <xflow>
	...

08013b0c <__ieee754_sqrt>:
 8013b0c:	4a67      	ldr	r2, [pc, #412]	@ (8013cac <__ieee754_sqrt+0x1a0>)
 8013b0e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b12:	438a      	bics	r2, r1
 8013b14:	4606      	mov	r6, r0
 8013b16:	460f      	mov	r7, r1
 8013b18:	460b      	mov	r3, r1
 8013b1a:	4604      	mov	r4, r0
 8013b1c:	d10e      	bne.n	8013b3c <__ieee754_sqrt+0x30>
 8013b1e:	4602      	mov	r2, r0
 8013b20:	f7ec fcea 	bl	80004f8 <__aeabi_dmul>
 8013b24:	4602      	mov	r2, r0
 8013b26:	460b      	mov	r3, r1
 8013b28:	4630      	mov	r0, r6
 8013b2a:	4639      	mov	r1, r7
 8013b2c:	f7ec fb2e 	bl	800018c <__adddf3>
 8013b30:	4606      	mov	r6, r0
 8013b32:	460f      	mov	r7, r1
 8013b34:	4630      	mov	r0, r6
 8013b36:	4639      	mov	r1, r7
 8013b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b3c:	2900      	cmp	r1, #0
 8013b3e:	dc0c      	bgt.n	8013b5a <__ieee754_sqrt+0x4e>
 8013b40:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8013b44:	4302      	orrs	r2, r0
 8013b46:	d0f5      	beq.n	8013b34 <__ieee754_sqrt+0x28>
 8013b48:	b189      	cbz	r1, 8013b6e <__ieee754_sqrt+0x62>
 8013b4a:	4602      	mov	r2, r0
 8013b4c:	f7ec fb1c 	bl	8000188 <__aeabi_dsub>
 8013b50:	4602      	mov	r2, r0
 8013b52:	460b      	mov	r3, r1
 8013b54:	f7ec fdfa 	bl	800074c <__aeabi_ddiv>
 8013b58:	e7ea      	b.n	8013b30 <__ieee754_sqrt+0x24>
 8013b5a:	150a      	asrs	r2, r1, #20
 8013b5c:	d115      	bne.n	8013b8a <__ieee754_sqrt+0x7e>
 8013b5e:	2100      	movs	r1, #0
 8013b60:	e009      	b.n	8013b76 <__ieee754_sqrt+0x6a>
 8013b62:	0ae3      	lsrs	r3, r4, #11
 8013b64:	3a15      	subs	r2, #21
 8013b66:	0564      	lsls	r4, r4, #21
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d0fa      	beq.n	8013b62 <__ieee754_sqrt+0x56>
 8013b6c:	e7f7      	b.n	8013b5e <__ieee754_sqrt+0x52>
 8013b6e:	460a      	mov	r2, r1
 8013b70:	e7fa      	b.n	8013b68 <__ieee754_sqrt+0x5c>
 8013b72:	005b      	lsls	r3, r3, #1
 8013b74:	3101      	adds	r1, #1
 8013b76:	02d8      	lsls	r0, r3, #11
 8013b78:	d5fb      	bpl.n	8013b72 <__ieee754_sqrt+0x66>
 8013b7a:	1e48      	subs	r0, r1, #1
 8013b7c:	1a12      	subs	r2, r2, r0
 8013b7e:	f1c1 0020 	rsb	r0, r1, #32
 8013b82:	fa24 f000 	lsr.w	r0, r4, r0
 8013b86:	4303      	orrs	r3, r0
 8013b88:	408c      	lsls	r4, r1
 8013b8a:	2600      	movs	r6, #0
 8013b8c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8013b90:	2116      	movs	r1, #22
 8013b92:	07d2      	lsls	r2, r2, #31
 8013b94:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8013b98:	4632      	mov	r2, r6
 8013b9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013ba2:	bf5c      	itt	pl
 8013ba4:	005b      	lslpl	r3, r3, #1
 8013ba6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8013baa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013bae:	bf58      	it	pl
 8013bb0:	0064      	lslpl	r4, r4, #1
 8013bb2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8013bb6:	107f      	asrs	r7, r7, #1
 8013bb8:	0064      	lsls	r4, r4, #1
 8013bba:	1815      	adds	r5, r2, r0
 8013bbc:	429d      	cmp	r5, r3
 8013bbe:	bfde      	ittt	le
 8013bc0:	182a      	addle	r2, r5, r0
 8013bc2:	1b5b      	suble	r3, r3, r5
 8013bc4:	1836      	addle	r6, r6, r0
 8013bc6:	0fe5      	lsrs	r5, r4, #31
 8013bc8:	3901      	subs	r1, #1
 8013bca:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8013bce:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8013bd2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8013bd6:	d1f0      	bne.n	8013bba <__ieee754_sqrt+0xae>
 8013bd8:	460d      	mov	r5, r1
 8013bda:	f04f 0a20 	mov.w	sl, #32
 8013bde:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8013be2:	429a      	cmp	r2, r3
 8013be4:	eb01 0c00 	add.w	ip, r1, r0
 8013be8:	db02      	blt.n	8013bf0 <__ieee754_sqrt+0xe4>
 8013bea:	d113      	bne.n	8013c14 <__ieee754_sqrt+0x108>
 8013bec:	45a4      	cmp	ip, r4
 8013bee:	d811      	bhi.n	8013c14 <__ieee754_sqrt+0x108>
 8013bf0:	f1bc 0f00 	cmp.w	ip, #0
 8013bf4:	eb0c 0100 	add.w	r1, ip, r0
 8013bf8:	da42      	bge.n	8013c80 <__ieee754_sqrt+0x174>
 8013bfa:	2900      	cmp	r1, #0
 8013bfc:	db40      	blt.n	8013c80 <__ieee754_sqrt+0x174>
 8013bfe:	f102 0e01 	add.w	lr, r2, #1
 8013c02:	1a9b      	subs	r3, r3, r2
 8013c04:	4672      	mov	r2, lr
 8013c06:	45a4      	cmp	ip, r4
 8013c08:	bf88      	it	hi
 8013c0a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013c0e:	eba4 040c 	sub.w	r4, r4, ip
 8013c12:	4405      	add	r5, r0
 8013c14:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8013c18:	f1ba 0a01 	subs.w	sl, sl, #1
 8013c1c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8013c20:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8013c24:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8013c28:	d1db      	bne.n	8013be2 <__ieee754_sqrt+0xd6>
 8013c2a:	431c      	orrs	r4, r3
 8013c2c:	d01a      	beq.n	8013c64 <__ieee754_sqrt+0x158>
 8013c2e:	4c20      	ldr	r4, [pc, #128]	@ (8013cb0 <__ieee754_sqrt+0x1a4>)
 8013c30:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8013cb4 <__ieee754_sqrt+0x1a8>
 8013c34:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013c38:	e9db 2300 	ldrd	r2, r3, [fp]
 8013c3c:	f7ec faa4 	bl	8000188 <__aeabi_dsub>
 8013c40:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013c44:	4602      	mov	r2, r0
 8013c46:	460b      	mov	r3, r1
 8013c48:	4640      	mov	r0, r8
 8013c4a:	4649      	mov	r1, r9
 8013c4c:	f7ec fed0 	bl	80009f0 <__aeabi_dcmple>
 8013c50:	b140      	cbz	r0, 8013c64 <__ieee754_sqrt+0x158>
 8013c52:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013c56:	e9db 2300 	ldrd	r2, r3, [fp]
 8013c5a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8013c5e:	d111      	bne.n	8013c84 <__ieee754_sqrt+0x178>
 8013c60:	4655      	mov	r5, sl
 8013c62:	3601      	adds	r6, #1
 8013c64:	1072      	asrs	r2, r6, #1
 8013c66:	086b      	lsrs	r3, r5, #1
 8013c68:	07f1      	lsls	r1, r6, #31
 8013c6a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013c6e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8013c72:	bf48      	it	mi
 8013c74:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8013c78:	4618      	mov	r0, r3
 8013c7a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8013c7e:	e757      	b.n	8013b30 <__ieee754_sqrt+0x24>
 8013c80:	4696      	mov	lr, r2
 8013c82:	e7be      	b.n	8013c02 <__ieee754_sqrt+0xf6>
 8013c84:	f7ec fa82 	bl	800018c <__adddf3>
 8013c88:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013c8c:	4602      	mov	r2, r0
 8013c8e:	460b      	mov	r3, r1
 8013c90:	4640      	mov	r0, r8
 8013c92:	4649      	mov	r1, r9
 8013c94:	f7ec fea2 	bl	80009dc <__aeabi_dcmplt>
 8013c98:	b120      	cbz	r0, 8013ca4 <__ieee754_sqrt+0x198>
 8013c9a:	1ca8      	adds	r0, r5, #2
 8013c9c:	bf08      	it	eq
 8013c9e:	3601      	addeq	r6, #1
 8013ca0:	3502      	adds	r5, #2
 8013ca2:	e7df      	b.n	8013c64 <__ieee754_sqrt+0x158>
 8013ca4:	1c6b      	adds	r3, r5, #1
 8013ca6:	f023 0501 	bic.w	r5, r3, #1
 8013caa:	e7db      	b.n	8013c64 <__ieee754_sqrt+0x158>
 8013cac:	7ff00000 	.word	0x7ff00000
 8013cb0:	20000200 	.word	0x20000200
 8013cb4:	200001f8 	.word	0x200001f8

08013cb8 <_init>:
 8013cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cba:	bf00      	nop
 8013cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cbe:	bc08      	pop	{r3}
 8013cc0:	469e      	mov	lr, r3
 8013cc2:	4770      	bx	lr

08013cc4 <_fini>:
 8013cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cc6:	bf00      	nop
 8013cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cca:	bc08      	pop	{r3}
 8013ccc:	469e      	mov	lr, r3
 8013cce:	4770      	bx	lr
